Args: /home/frost/Parallella/llvm-build/bin/llc -march epiphany -mcpu E16 -O2 -filetype asm ll/matlib.ll -o asm/matlib.llvm.bad.s -debug -print-before-all -print-after-all 

Features:
CPU:E16

*** IR Dump Before Pre-ISel Intrinsic Lowering ***; ModuleID = 'll/matlib.ll'
source_filename = "src/matlib.c"
target datalayout = "e-p:32:32-i8:8-i16:16-i32:32-i64:64-v32:64-v64:64-f32:32-f64:64-n32-S64"
target triple = "epiphany"

; Function Attrs: norecurse nounwind optsize
define hidden void @matclr(float* noalias %a, i32 %NN) local_unnamed_addr #0 {
entry:
  %mul = mul nsw i32 %NN, %NN
  %cmp5 = icmp eq i32 %mul, 0
  br i1 %cmp5, label %for.end, label %for.body.preheader

for.body.preheader:                               ; preds = %entry
  br label %for.body

for.body:                                         ; preds = %for.body, %for.body.preheader
  %i.06 = phi i32 [ %inc, %for.body ], [ 0, %for.body.preheader ]
  %arrayidx = getelementptr inbounds float, float* %a, i32 %i.06
  store volatile float 0.000000e+00, float* %arrayidx, align 4, !tbaa !1
  %inc = add nuw nsw i32 %i.06, 1
  %cmp = icmp slt i32 %inc, %mul
  br i1 %cmp, label %for.body, label %for.end.loopexit

for.end.loopexit:                                 ; preds = %for.body
  br label %for.end

for.end:                                          ; preds = %for.end.loopexit, %entry
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start(i64, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end(i64, i8* nocapture) #1

; Function Attrs: nounwind optsize
define hidden void @matmac(float* noalias %aa, float* noalias %bb, float* noalias %cc, i32 %NN) local_unnamed_addr #2 {
entry:
  %tot = alloca [8 x float], align 4
  %0 = bitcast [8 x float]* %tot to i8*
  %cmp143 = icmp sgt i32 %NN, 0
  br i1 %cmp143, label %for.body3.lr.ph.preheader, label %for.end81

for.body3.lr.ph.preheader:                        ; preds = %entry
  br label %for.body3.lr.ph

for.body3.lr.ph:                                  ; preds = %for.end78, %for.body3.lr.ph.preheader
  %i.0144 = phi i32 [ %inc80, %for.end78 ], [ 0, %for.body3.lr.ph.preheader ]
  %mul68 = mul nsw i32 %i.0144, %NN
  %add.ptr69 = getelementptr inbounds float, float* %cc, i32 %mul68
  %add.ptr = getelementptr inbounds float, float* %aa, i32 %mul68
  br label %for.body9.preheader

for.body9.preheader:                              ; preds = %for.end75, %for.body3.lr.ph
  %j0.0142 = phi i32 [ 0, %for.body3.lr.ph ], [ %add77, %for.end75 ]
  call void @llvm.lifetime.start(i64 32, i8* nonnull %0) #3
  call void @llvm.memset.p0i8.i32(i8* nonnull %0, i8 0, i32 32, i32 4, i1 false)
  br label %for.body9

for.cond64.preheader:                             ; preds = %for.end60
  %add.ptr70 = getelementptr inbounds float, float* %add.ptr69, i32 %j0.0142
  br label %for.body66

for.body9:                                        ; preds = %for.end60, %for.body9.preheader
  %x.0139 = phi i32 [ %inc62, %for.end60 ], [ 0, %for.body9.preheader ]
  %add.ptr10 = getelementptr inbounds float, float* %add.ptr, i32 %x.0139
  %1 = load volatile float, float* %add.ptr10, align 4, !tbaa !1
  %mul15 = mul nsw i32 %x.0139, %NN
  %add.ptr16 = getelementptr inbounds float, float* %bb, i32 %mul15
  %add.ptr17 = getelementptr inbounds float, float* %add.ptr16, i32 %j0.0142
  br label %for.body13

for.body13:                                       ; preds = %for.body13, %for.body9
  %j1.1137 = phi i32 [ 0, %for.body9 ], [ %add59, %for.body13 ]
  %add.ptr18 = getelementptr inbounds float, float* %add.ptr17, i32 %j1.1137
  %2 = load volatile float, float* %add.ptr18, align 4, !tbaa !1
  %add.ptr25 = getelementptr inbounds float, float* %add.ptr18, i32 1
  %3 = load volatile float, float* %add.ptr25, align 4, !tbaa !1
  %add.ptr31 = getelementptr inbounds float, float* %add.ptr18, i32 2
  %4 = load volatile float, float* %add.ptr31, align 4, !tbaa !1
  %add.ptr37 = getelementptr inbounds float, float* %add.ptr18, i32 3
  %5 = load volatile float, float* %add.ptr37, align 4, !tbaa !1
  %mul40 = fmul float %1, %2
  %arrayidx41 = getelementptr inbounds [8 x float], [8 x float]* %tot, i32 0, i32 %j1.1137
  %6 = load float, float* %arrayidx41, align 4, !tbaa !1
  %add42 = fadd float %mul40, %6
  store float %add42, float* %arrayidx41, align 4, !tbaa !1
  %mul44 = fmul float %1, %3
  %add45 = or i32 %j1.1137, 1
  %arrayidx46 = getelementptr inbounds [8 x float], [8 x float]* %tot, i32 0, i32 %add45
  %7 = load float, float* %arrayidx46, align 4, !tbaa !1
  %add47 = fadd float %mul44, %7
  store float %add47, float* %arrayidx46, align 4, !tbaa !1
  %mul49 = fmul float %1, %4
  %add50 = or i32 %j1.1137, 2
  %arrayidx51 = getelementptr inbounds [8 x float], [8 x float]* %tot, i32 0, i32 %add50
  %8 = load float, float* %arrayidx51, align 4, !tbaa !1
  %add52 = fadd float %mul49, %8
  store float %add52, float* %arrayidx51, align 4, !tbaa !1
  %mul54 = fmul float %1, %5
  %add55 = or i32 %j1.1137, 3
  %arrayidx56 = getelementptr inbounds [8 x float], [8 x float]* %tot, i32 0, i32 %add55
  %9 = load float, float* %arrayidx56, align 4, !tbaa !1
  %add57 = fadd float %mul54, %9
  store float %add57, float* %arrayidx56, align 4, !tbaa !1
  %add59 = add nuw nsw i32 %j1.1137, 4
  %cmp12 = icmp slt i32 %add59, 8
  br i1 %cmp12, label %for.body13, label %for.end60

for.end60:                                        ; preds = %for.body13
  %inc62 = add nuw nsw i32 %x.0139, 1
  %exitcond = icmp eq i32 %inc62, %NN
  br i1 %exitcond, label %for.cond64.preheader, label %for.body9

for.body66:                                       ; preds = %for.body66, %for.cond64.preheader
  %j1.2140 = phi i32 [ 0, %for.cond64.preheader ], [ %add74, %for.body66 ]
  %arrayidx67 = getelementptr inbounds [8 x float], [8 x float]* %tot, i32 0, i32 %j1.2140
  %10 = load float, float* %arrayidx67, align 4, !tbaa !1
  %add.ptr71 = getelementptr inbounds float, float* %add.ptr70, i32 %j1.2140
  %11 = load volatile float, float* %add.ptr71, align 4, !tbaa !1
  %add72 = fadd float %10, %11
  store volatile float %add72, float* %add.ptr71, align 4, !tbaa !1
  %add74 = add nuw nsw i32 %j1.2140, 1
  %exitcond145 = icmp eq i32 %add74, 8
  br i1 %exitcond145, label %for.end75, label %for.body66

for.end75:                                        ; preds = %for.body66
  call void @llvm.lifetime.end(i64 32, i8* nonnull %0) #3
  %add77 = add nuw nsw i32 %j0.0142, 8
  %cmp2 = icmp slt i32 %add77, %NN
  br i1 %cmp2, label %for.body9.preheader, label %for.end78

for.end78:                                        ; preds = %for.end75
  %inc80 = add nuw nsw i32 %i.0144, 1
  %exitcond146 = icmp eq i32 %inc80, %NN
  br i1 %exitcond146, label %for.end81.loopexit, label %for.body3.lr.ph

for.end81.loopexit:                               ; preds = %for.end78
  br label %for.end81

for.end81:                                        ; preds = %for.end81.loopexit, %entry
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i32(i8* nocapture writeonly, i8, i32, i32, i1) #1

attributes #0 = { norecurse nounwind optsize "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="E16" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind "target-cpu"="E16" }
attributes #2 = { nounwind optsize "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="E16" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind }

!llvm.ident = !{!0}

!0 = !{!"clang version 4.0.0 (tags/RELEASE_400/final)"}
!1 = !{!2, !2, i64 0}
!2 = !{!"float", !3, i64 0}
!3 = !{!"omnipotent char", !4, i64 0}
!4 = !{!"Simple C/C++ TBAA"}
*** IR Dump After Pre-ISel Intrinsic Lowering ***; ModuleID = 'll/matlib.ll'
source_filename = "src/matlib.c"
target datalayout = "e-p:32:32-i8:8-i16:16-i32:32-i64:64-v32:64-v64:64-f32:32-f64:64-n32-S64"
target triple = "epiphany"

; Function Attrs: norecurse nounwind optsize
define hidden void @matclr(float* noalias %a, i32 %NN) local_unnamed_addr #0 {
entry:
  %mul = mul nsw i32 %NN, %NN
  %cmp5 = icmp eq i32 %mul, 0
  br i1 %cmp5, label %for.end, label %for.body.preheader

for.body.preheader:                               ; preds = %entry
  br label %for.body

for.body:                                         ; preds = %for.body, %for.body.preheader
  %i.06 = phi i32 [ %inc, %for.body ], [ 0, %for.body.preheader ]
  %arrayidx = getelementptr inbounds float, float* %a, i32 %i.06
  store volatile float 0.000000e+00, float* %arrayidx, align 4, !tbaa !1
  %inc = add nuw nsw i32 %i.06, 1
  %cmp = icmp slt i32 %inc, %mul
  br i1 %cmp, label %for.body, label %for.end.loopexit

for.end.loopexit:                                 ; preds = %for.body
  br label %for.end

for.end:                                          ; preds = %for.end.loopexit, %entry
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start(i64, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end(i64, i8* nocapture) #1

; Function Attrs: nounwind optsize
define hidden void @matmac(float* noalias %aa, float* noalias %bb, float* noalias %cc, i32 %NN) local_unnamed_addr #2 {
entry:
  %tot = alloca [8 x float], align 4
  %0 = bitcast [8 x float]* %tot to i8*
  %cmp143 = icmp sgt i32 %NN, 0
  br i1 %cmp143, label %for.body3.lr.ph.preheader, label %for.end81

for.body3.lr.ph.preheader:                        ; preds = %entry
  br label %for.body3.lr.ph

for.body3.lr.ph:                                  ; preds = %for.end78, %for.body3.lr.ph.preheader
  %i.0144 = phi i32 [ %inc80, %for.end78 ], [ 0, %for.body3.lr.ph.preheader ]
  %mul68 = mul nsw i32 %i.0144, %NN
  %add.ptr69 = getelementptr inbounds float, float* %cc, i32 %mul68
  %add.ptr = getelementptr inbounds float, float* %aa, i32 %mul68
  br label %for.body9.preheader

for.body9.preheader:                              ; preds = %for.end75, %for.body3.lr.ph
  %j0.0142 = phi i32 [ 0, %for.body3.lr.ph ], [ %add77, %for.end75 ]
  call void @llvm.lifetime.start(i64 32, i8* nonnull %0) #3
  call void @llvm.memset.p0i8.i32(i8* nonnull %0, i8 0, i32 32, i32 4, i1 false)
  br label %for.body9

for.cond64.preheader:                             ; preds = %for.end60
  %add.ptr70 = getelementptr inbounds float, float* %add.ptr69, i32 %j0.0142
  br label %for.body66

for.body9:                                        ; preds = %for.end60, %for.body9.preheader
  %x.0139 = phi i32 [ %inc62, %for.end60 ], [ 0, %for.body9.preheader ]
  %add.ptr10 = getelementptr inbounds float, float* %add.ptr, i32 %x.0139
  %1 = load volatile float, float* %add.ptr10, align 4, !tbaa !1
  %mul15 = mul nsw i32 %x.0139, %NN
  %add.ptr16 = getelementptr inbounds float, float* %bb, i32 %mul15
  %add.ptr17 = getelementptr inbounds float, float* %add.ptr16, i32 %j0.0142
  br label %for.body13

for.body13:                                       ; preds = %for.body13, %for.body9
  %j1.1137 = phi i32 [ 0, %for.body9 ], [ %add59, %for.body13 ]
  %add.ptr18 = getelementptr inbounds float, float* %add.ptr17, i32 %j1.1137
  %2 = load volatile float, float* %add.ptr18, align 4, !tbaa !1
  %add.ptr25 = getelementptr inbounds float, float* %add.ptr18, i32 1
  %3 = load volatile float, float* %add.ptr25, align 4, !tbaa !1
  %add.ptr31 = getelementptr inbounds float, float* %add.ptr18, i32 2
  %4 = load volatile float, float* %add.ptr31, align 4, !tbaa !1
  %add.ptr37 = getelementptr inbounds float, float* %add.ptr18, i32 3
  %5 = load volatile float, float* %add.ptr37, align 4, !tbaa !1
  %mul40 = fmul float %1, %2
  %arrayidx41 = getelementptr inbounds [8 x float], [8 x float]* %tot, i32 0, i32 %j1.1137
  %6 = load float, float* %arrayidx41, align 4, !tbaa !1
  %add42 = fadd float %mul40, %6
  store float %add42, float* %arrayidx41, align 4, !tbaa !1
  %mul44 = fmul float %1, %3
  %add45 = or i32 %j1.1137, 1
  %arrayidx46 = getelementptr inbounds [8 x float], [8 x float]* %tot, i32 0, i32 %add45
  %7 = load float, float* %arrayidx46, align 4, !tbaa !1
  %add47 = fadd float %mul44, %7
  store float %add47, float* %arrayidx46, align 4, !tbaa !1
  %mul49 = fmul float %1, %4
  %add50 = or i32 %j1.1137, 2
  %arrayidx51 = getelementptr inbounds [8 x float], [8 x float]* %tot, i32 0, i32 %add50
  %8 = load float, float* %arrayidx51, align 4, !tbaa !1
  %add52 = fadd float %mul49, %8
  store float %add52, float* %arrayidx51, align 4, !tbaa !1
  %mul54 = fmul float %1, %5
  %add55 = or i32 %j1.1137, 3
  %arrayidx56 = getelementptr inbounds [8 x float], [8 x float]* %tot, i32 0, i32 %add55
  %9 = load float, float* %arrayidx56, align 4, !tbaa !1
  %add57 = fadd float %mul54, %9
  store float %add57, float* %arrayidx56, align 4, !tbaa !1
  %add59 = add nuw nsw i32 %j1.1137, 4
  %cmp12 = icmp slt i32 %add59, 8
  br i1 %cmp12, label %for.body13, label %for.end60

for.end60:                                        ; preds = %for.body13
  %inc62 = add nuw nsw i32 %x.0139, 1
  %exitcond = icmp eq i32 %inc62, %NN
  br i1 %exitcond, label %for.cond64.preheader, label %for.body9

for.body66:                                       ; preds = %for.body66, %for.cond64.preheader
  %j1.2140 = phi i32 [ 0, %for.cond64.preheader ], [ %add74, %for.body66 ]
  %arrayidx67 = getelementptr inbounds [8 x float], [8 x float]* %tot, i32 0, i32 %j1.2140
  %10 = load float, float* %arrayidx67, align 4, !tbaa !1
  %add.ptr71 = getelementptr inbounds float, float* %add.ptr70, i32 %j1.2140
  %11 = load volatile float, float* %add.ptr71, align 4, !tbaa !1
  %add72 = fadd float %10, %11
  store volatile float %add72, float* %add.ptr71, align 4, !tbaa !1
  %add74 = add nuw nsw i32 %j1.2140, 1
  %exitcond145 = icmp eq i32 %add74, 8
  br i1 %exitcond145, label %for.end75, label %for.body66

for.end75:                                        ; preds = %for.body66
  call void @llvm.lifetime.end(i64 32, i8* nonnull %0) #3
  %add77 = add nuw nsw i32 %j0.0142, 8
  %cmp2 = icmp slt i32 %add77, %NN
  br i1 %cmp2, label %for.body9.preheader, label %for.end78

for.end78:                                        ; preds = %for.end75
  %inc80 = add nuw nsw i32 %i.0144, 1
  %exitcond146 = icmp eq i32 %inc80, %NN
  br i1 %exitcond146, label %for.end81.loopexit, label %for.body3.lr.ph

for.end81.loopexit:                               ; preds = %for.end78
  br label %for.end81

for.end81:                                        ; preds = %for.end81.loopexit, %entry
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i32(i8* nocapture writeonly, i8, i32, i32, i1) #1

attributes #0 = { norecurse nounwind optsize "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="E16" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind "target-cpu"="E16" }
attributes #2 = { nounwind optsize "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="E16" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind }

!llvm.ident = !{!0}

!0 = !{!"clang version 4.0.0 (tags/RELEASE_400/final)"}
!1 = !{!2, !2, i64 0}
!2 = !{!"float", !3, i64 0}
!3 = !{!"omnipotent char", !4, i64 0}
!4 = !{!"Simple C/C++ TBAA"}
*** IR Dump Before Expand Atomic instructions ***
; Function Attrs: norecurse nounwind optsize
define hidden void @matclr(float* noalias %a, i32 %NN) local_unnamed_addr #0 {
entry:
  %mul = mul nsw i32 %NN, %NN
  %cmp5 = icmp eq i32 %mul, 0
  br i1 %cmp5, label %for.end, label %for.body.preheader

for.body.preheader:                               ; preds = %entry
  br label %for.body

for.body:                                         ; preds = %for.body, %for.body.preheader
  %i.06 = phi i32 [ %inc, %for.body ], [ 0, %for.body.preheader ]
  %arrayidx = getelementptr inbounds float, float* %a, i32 %i.06
  store volatile float 0.000000e+00, float* %arrayidx, align 4, !tbaa !1
  %inc = add nuw nsw i32 %i.06, 1
  %cmp = icmp slt i32 %inc, %mul
  br i1 %cmp, label %for.body, label %for.end.loopexit

for.end.loopexit:                                 ; preds = %for.body
  br label %for.end

for.end:                                          ; preds = %for.end.loopexit, %entry
  ret void
}
*** IR Dump After Expand Atomic instructions ***
; Function Attrs: norecurse nounwind optsize
define hidden void @matclr(float* noalias %a, i32 %NN) local_unnamed_addr #0 {
entry:
  %mul = mul nsw i32 %NN, %NN
  %cmp5 = icmp eq i32 %mul, 0
  br i1 %cmp5, label %for.end, label %for.body.preheader

for.body.preheader:                               ; preds = %entry
  br label %for.body

for.body:                                         ; preds = %for.body, %for.body.preheader
  %i.06 = phi i32 [ %inc, %for.body ], [ 0, %for.body.preheader ]
  %arrayidx = getelementptr inbounds float, float* %a, i32 %i.06
  store volatile float 0.000000e+00, float* %arrayidx, align 4, !tbaa !1
  %inc = add nuw nsw i32 %i.06, 1
  %cmp = icmp slt i32 %inc, %mul
  br i1 %cmp, label %for.body, label %for.end.loopexit

for.end.loopexit:                                 ; preds = %for.body
  br label %for.end

for.end:                                          ; preds = %for.end.loopexit, %entry
  ret void
}
*** IR Dump Before SROA ***
; Function Attrs: norecurse nounwind optsize
define hidden void @matclr(float* noalias %a, i32 %NN) local_unnamed_addr #0 {
entry:
  %mul = mul nsw i32 %NN, %NN
  %cmp5 = icmp eq i32 %mul, 0
  br i1 %cmp5, label %for.end, label %for.body.preheader

for.body.preheader:                               ; preds = %entry
  br label %for.body

for.body:                                         ; preds = %for.body, %for.body.preheader
  %i.06 = phi i32 [ %inc, %for.body ], [ 0, %for.body.preheader ]
  %arrayidx = getelementptr inbounds float, float* %a, i32 %i.06
  store volatile float 0.000000e+00, float* %arrayidx, align 4, !tbaa !1
  %inc = add nuw nsw i32 %i.06, 1
  %cmp = icmp slt i32 %inc, %mul
  br i1 %cmp, label %for.body, label %for.end.loopexit

for.end.loopexit:                                 ; preds = %for.body
  br label %for.end

for.end:                                          ; preds = %for.end.loopexit, %entry
  ret void
}
SROA function: matclr
*** IR Dump After SROA ***
; Function Attrs: norecurse nounwind optsize
define hidden void @matclr(float* noalias %a, i32 %NN) local_unnamed_addr #0 {
entry:
  %mul = mul nsw i32 %NN, %NN
  %cmp5 = icmp eq i32 %mul, 0
  br i1 %cmp5, label %for.end, label %for.body.preheader

for.body.preheader:                               ; preds = %entry
  br label %for.body

for.body:                                         ; preds = %for.body, %for.body.preheader
  %i.06 = phi i32 [ %inc, %for.body ], [ 0, %for.body.preheader ]
  %arrayidx = getelementptr inbounds float, float* %a, i32 %i.06
  store volatile float 0.000000e+00, float* %arrayidx, align 4, !tbaa !1
  %inc = add nuw nsw i32 %i.06, 1
  %cmp = icmp slt i32 %inc, %mul
  br i1 %cmp, label %for.body, label %for.end.loopexit

for.end.loopexit:                                 ; preds = %for.body
  br label %for.end

for.end:                                          ; preds = %for.end.loopexit, %entry
  ret void
}
*** IR Dump Before Module Verifier ***
; Function Attrs: norecurse nounwind optsize
define hidden void @matclr(float* noalias %a, i32 %NN) local_unnamed_addr #0 {
entry:
  %mul = mul nsw i32 %NN, %NN
  %cmp5 = icmp eq i32 %mul, 0
  br i1 %cmp5, label %for.end, label %for.body.preheader

for.body.preheader:                               ; preds = %entry
  br label %for.body

for.body:                                         ; preds = %for.body, %for.body.preheader
  %i.06 = phi i32 [ %inc, %for.body ], [ 0, %for.body.preheader ]
  %arrayidx = getelementptr inbounds float, float* %a, i32 %i.06
  store volatile float 0.000000e+00, float* %arrayidx, align 4, !tbaa !1
  %inc = add nuw nsw i32 %i.06, 1
  %cmp = icmp slt i32 %inc, %mul
  br i1 %cmp, label %for.body, label %for.end.loopexit

for.end.loopexit:                                 ; preds = %for.body
  br label %for.end

for.end:                                          ; preds = %for.end.loopexit, %entry
  ret void
}
*** IR Dump After Module Verifier ***
; Function Attrs: norecurse nounwind optsize
define hidden void @matclr(float* noalias %a, i32 %NN) local_unnamed_addr #0 {
entry:
  %mul = mul nsw i32 %NN, %NN
  %cmp5 = icmp eq i32 %mul, 0
  br i1 %cmp5, label %for.end, label %for.body.preheader

for.body.preheader:                               ; preds = %entry
  br label %for.body

for.body:                                         ; preds = %for.body, %for.body.preheader
  %i.06 = phi i32 [ %inc, %for.body ], [ 0, %for.body.preheader ]
  %arrayidx = getelementptr inbounds float, float* %a, i32 %i.06
  store volatile float 0.000000e+00, float* %arrayidx, align 4, !tbaa !1
  %inc = add nuw nsw i32 %i.06, 1
  %cmp = icmp slt i32 %inc, %mul
  br i1 %cmp, label %for.body, label %for.end.loopexit

for.end.loopexit:                                 ; preds = %for.body
  br label %for.end

for.end:                                          ; preds = %for.end.loopexit, %entry
  ret void
}
*** IR Dump Before Canonicalize natural loops ***
; Function Attrs: norecurse nounwind optsize
define hidden void @matclr(float* noalias %a, i32 %NN) local_unnamed_addr #0 {
entry:
  %mul = mul nsw i32 %NN, %NN
  %cmp5 = icmp eq i32 %mul, 0
  br i1 %cmp5, label %for.end, label %for.body.preheader

for.body.preheader:                               ; preds = %entry
  br label %for.body

for.body:                                         ; preds = %for.body, %for.body.preheader
  %i.06 = phi i32 [ %inc, %for.body ], [ 0, %for.body.preheader ]
  %arrayidx = getelementptr inbounds float, float* %a, i32 %i.06
  store volatile float 0.000000e+00, float* %arrayidx, align 4, !tbaa !1
  %inc = add nuw nsw i32 %i.06, 1
  %cmp = icmp slt i32 %inc, %mul
  br i1 %cmp, label %for.body, label %for.end.loopexit

for.end.loopexit:                                 ; preds = %for.body
  br label %for.end

for.end:                                          ; preds = %for.end.loopexit, %entry
  ret void
}
*** IR Dump After Canonicalize natural loops ***
; Function Attrs: norecurse nounwind optsize
define hidden void @matclr(float* noalias %a, i32 %NN) local_unnamed_addr #0 {
entry:
  %mul = mul nsw i32 %NN, %NN
  %cmp5 = icmp eq i32 %mul, 0
  br i1 %cmp5, label %for.end, label %for.body.preheader

for.body.preheader:                               ; preds = %entry
  br label %for.body

for.body:                                         ; preds = %for.body, %for.body.preheader
  %i.06 = phi i32 [ %inc, %for.body ], [ 0, %for.body.preheader ]
  %arrayidx = getelementptr inbounds float, float* %a, i32 %i.06
  store volatile float 0.000000e+00, float* %arrayidx, align 4, !tbaa !1
  %inc = add nuw nsw i32 %i.06, 1
  %cmp = icmp slt i32 %inc, %mul
  br i1 %cmp, label %for.body, label %for.end.loopexit

for.end.loopexit:                                 ; preds = %for.body
  br label %for.end

for.end:                                          ; preds = %for.end.loopexit, %entry
  ret void
}
FOUND USER:   %cmp = icmp slt i32 %inc, %mul
   OF SCEV: {1,+,1}<nuw><nsw><%for.body>
FOUND USER:   store volatile float 0.000000e+00, float* %arrayidx, align 4, !tbaa !1
   OF SCEV: {%a,+,4}<nsw><%for.body>
*** IR Dump Before Loop Strength Reduction ***
for.body:                                         ; preds = %for.body, %for.body.preheader
  %i.06 = phi i32 [ %inc, %for.body ], [ 0, %for.body.preheader ]
  %arrayidx = getelementptr inbounds float, float* %a, i32 %i.06
  store volatile float 0.000000e+00, float* %arrayidx, align 4, !tbaa !1
  %inc = add nuw nsw i32 %i.06, 1
  %cmp = icmp slt i32 %inc, %mul
  br i1 %cmp, label %for.body, label %for.end.loopexit

LSR on loop %for.body:
  Change loop exiting icmp to use postinc iv:   %cmp = icmp slt i32 %inc, %mul
Collecting IV Chains.
IV Chain#0 Head: (  store volatile float 0.000000e+00, float* %arrayidx, align 4, !tbaa !1) IV={%a,+,4}<nsw><%for.body>
IV Chain#1 Head: (  %cmp = icmp slt i32 %inc, %mul) IV={1,+,1}<nuw><nsw><%for.body>
IV Chain#1  Inc: (  %i.06 = phi i32 [ %inc, %for.body ], [ 0, %for.body.preheader ]) IV+0
Chain:   %cmp = icmp slt i32 %inc, %mul Cost: 1
LSR has identified the following interesting factors and types: *4
LSR is examining the following fixup sites:
  UserInst=%cmp, OperandValToReplace=%inc, PostIncLoop=%for.body
  UserInst=store 0.000000e+00, OperandValToReplace=%arrayidx
LSR found 2 uses:
LSR is examining the following uses:
  LSR Use: Kind=Basic, Offsets={0}, widest fixup type: i32
    reg({0,+,1}<nuw><nsw><%for.body>)
  LSR Use: Kind=Address of float in addrspace(0), Offsets={0}, widest fixup type: float*
    reg({%a,+,4}<nsw><%for.body>)

After generating reuse formulae:
LSR is examining the following uses:
  LSR Use: Kind=Basic, Offsets={0}, widest fixup type: i32
    reg({0,+,1}<nuw><nsw><%for.body>)
  LSR Use: Kind=Address of float in addrspace(0), Offsets={0}, widest fixup type: float*
    reg({%a,+,4}<nsw><%for.body>)
    reg(%a) + 1*reg({0,+,4}<nuw><nsw><%for.body>)
Filtering for use LSR Use: Kind=Basic, Offsets={0}, widest fixup type: i32
Filtering for use LSR Use: Kind=Address of float in addrspace(0), Offsets={0}, widest fixup type: float*
  Filtering out formula reg(%a) + 1*reg({0,+,4}<nuw><nsw><%for.body>)
    in favor of formula reg({%a,+,4}<nsw><%for.body>)

After filtering out undesirable candidates:
LSR is examining the following uses:
  LSR Use: Kind=Basic, Offsets={0}, widest fixup type: i32
    reg({0,+,1}<nuw><nsw><%for.body>)
  LSR Use: Kind=Address of float in addrspace(0), Offsets={0}, widest fixup type: float*
    reg({%a,+,4}<nsw><%for.body>)
New best at 2 regs, with addrec cost 2.
 Regs: {0,+,1}<nuw><nsw><%for.body> {%a,+,4}<nsw><%for.body>

The chosen solution requires 2 regs, with addrec cost 2:
  LSR Use: Kind=Basic, Offsets={0}, widest fixup type: i32
    reg({0,+,1}<nuw><nsw><%for.body>)
  LSR Use: Kind=Address of float in addrspace(0), Offsets={0}, widest fixup type: float*
    reg({%a,+,4}<nsw><%for.body>)
*** IR Dump After Loop Strength Reduction ***
for.body:                                         ; preds = %for.body, %for.body.preheader
  %lsr.iv = phi float* [ %scevgep, %for.body ], [ %a, %for.body.preheader ]
  %i.06 = phi i32 [ %inc, %for.body ], [ 0, %for.body.preheader ]
  store volatile float 0.000000e+00, float* %lsr.iv, align 4, !tbaa !1
  %inc = add nuw nsw i32 %i.06, 1
  %scevgep = getelementptr float, float* %lsr.iv, i32 1
  %cmp = icmp slt i32 %inc, %mul
  br i1 %cmp, label %for.body, label %for.end.loopexit
*** IR Dump Before Lower Garbage Collection Instructions ***
; Function Attrs: norecurse nounwind optsize
define hidden void @matclr(float* noalias %a, i32 %NN) local_unnamed_addr #0 {
entry:
  %mul = mul nsw i32 %NN, %NN
  %cmp5 = icmp eq i32 %mul, 0
  br i1 %cmp5, label %for.end, label %for.body.preheader

for.body.preheader:                               ; preds = %entry
  br label %for.body

for.body:                                         ; preds = %for.body, %for.body.preheader
  %lsr.iv = phi float* [ %scevgep, %for.body ], [ %a, %for.body.preheader ]
  %i.06 = phi i32 [ %inc, %for.body ], [ 0, %for.body.preheader ]
  store volatile float 0.000000e+00, float* %lsr.iv, align 4, !tbaa !1
  %inc = add nuw nsw i32 %i.06, 1
  %scevgep = getelementptr float, float* %lsr.iv, i32 1
  %cmp = icmp slt i32 %inc, %mul
  br i1 %cmp, label %for.body, label %for.end.loopexit

for.end.loopexit:                                 ; preds = %for.body
  br label %for.end

for.end:                                          ; preds = %for.end.loopexit, %entry
  ret void
}
*** IR Dump After Lower Garbage Collection Instructions ***
; Function Attrs: norecurse nounwind optsize
define hidden void @matclr(float* noalias %a, i32 %NN) local_unnamed_addr #0 {
entry:
  %mul = mul nsw i32 %NN, %NN
  %cmp5 = icmp eq i32 %mul, 0
  br i1 %cmp5, label %for.end, label %for.body.preheader

for.body.preheader:                               ; preds = %entry
  br label %for.body

for.body:                                         ; preds = %for.body, %for.body.preheader
  %lsr.iv = phi float* [ %scevgep, %for.body ], [ %a, %for.body.preheader ]
  %i.06 = phi i32 [ %inc, %for.body ], [ 0, %for.body.preheader ]
  store volatile float 0.000000e+00, float* %lsr.iv, align 4, !tbaa !1
  %inc = add nuw nsw i32 %i.06, 1
  %scevgep = getelementptr float, float* %lsr.iv, i32 1
  %cmp = icmp slt i32 %inc, %mul
  br i1 %cmp, label %for.body, label %for.end.loopexit

for.end.loopexit:                                 ; preds = %for.body
  br label %for.end

for.end:                                          ; preds = %for.end.loopexit, %entry
  ret void
}
*** IR Dump Before Shadow Stack GC Lowering ***
; Function Attrs: norecurse nounwind optsize
define hidden void @matclr(float* noalias %a, i32 %NN) local_unnamed_addr #0 {
entry:
  %mul = mul nsw i32 %NN, %NN
  %cmp5 = icmp eq i32 %mul, 0
  br i1 %cmp5, label %for.end, label %for.body.preheader

for.body.preheader:                               ; preds = %entry
  br label %for.body

for.body:                                         ; preds = %for.body, %for.body.preheader
  %lsr.iv = phi float* [ %scevgep, %for.body ], [ %a, %for.body.preheader ]
  %i.06 = phi i32 [ %inc, %for.body ], [ 0, %for.body.preheader ]
  store volatile float 0.000000e+00, float* %lsr.iv, align 4, !tbaa !1
  %inc = add nuw nsw i32 %i.06, 1
  %scevgep = getelementptr float, float* %lsr.iv, i32 1
  %cmp = icmp slt i32 %inc, %mul
  br i1 %cmp, label %for.body, label %for.end.loopexit

for.end.loopexit:                                 ; preds = %for.body
  br label %for.end

for.end:                                          ; preds = %for.end.loopexit, %entry
  ret void
}
*** IR Dump After Shadow Stack GC Lowering ***
; Function Attrs: norecurse nounwind optsize
define hidden void @matclr(float* noalias %a, i32 %NN) local_unnamed_addr #0 {
entry:
  %mul = mul nsw i32 %NN, %NN
  %cmp5 = icmp eq i32 %mul, 0
  br i1 %cmp5, label %for.end, label %for.body.preheader

for.body.preheader:                               ; preds = %entry
  br label %for.body

for.body:                                         ; preds = %for.body, %for.body.preheader
  %lsr.iv = phi float* [ %scevgep, %for.body ], [ %a, %for.body.preheader ]
  %i.06 = phi i32 [ %inc, %for.body ], [ 0, %for.body.preheader ]
  store volatile float 0.000000e+00, float* %lsr.iv, align 4, !tbaa !1
  %inc = add nuw nsw i32 %i.06, 1
  %scevgep = getelementptr float, float* %lsr.iv, i32 1
  %cmp = icmp slt i32 %inc, %mul
  br i1 %cmp, label %for.body, label %for.end.loopexit

for.end.loopexit:                                 ; preds = %for.body
  br label %for.end

for.end:                                          ; preds = %for.end.loopexit, %entry
  ret void
}
*** IR Dump Before Remove unreachable blocks from the CFG ***
; Function Attrs: norecurse nounwind optsize
define hidden void @matclr(float* noalias %a, i32 %NN) local_unnamed_addr #0 {
entry:
  %mul = mul nsw i32 %NN, %NN
  %cmp5 = icmp eq i32 %mul, 0
  br i1 %cmp5, label %for.end, label %for.body.preheader

for.body.preheader:                               ; preds = %entry
  br label %for.body

for.body:                                         ; preds = %for.body, %for.body.preheader
  %lsr.iv = phi float* [ %scevgep, %for.body ], [ %a, %for.body.preheader ]
  %i.06 = phi i32 [ %inc, %for.body ], [ 0, %for.body.preheader ]
  store volatile float 0.000000e+00, float* %lsr.iv, align 4, !tbaa !1
  %inc = add nuw nsw i32 %i.06, 1
  %scevgep = getelementptr float, float* %lsr.iv, i32 1
  %cmp = icmp slt i32 %inc, %mul
  br i1 %cmp, label %for.body, label %for.end.loopexit

for.end.loopexit:                                 ; preds = %for.body
  br label %for.end

for.end:                                          ; preds = %for.end.loopexit, %entry
  ret void
}
*** IR Dump After Remove unreachable blocks from the CFG ***
; Function Attrs: norecurse nounwind optsize
define hidden void @matclr(float* noalias %a, i32 %NN) local_unnamed_addr #0 {
entry:
  %mul = mul nsw i32 %NN, %NN
  %cmp5 = icmp eq i32 %mul, 0
  br i1 %cmp5, label %for.end, label %for.body.preheader

for.body.preheader:                               ; preds = %entry
  br label %for.body

for.body:                                         ; preds = %for.body, %for.body.preheader
  %lsr.iv = phi float* [ %scevgep, %for.body ], [ %a, %for.body.preheader ]
  %i.06 = phi i32 [ %inc, %for.body ], [ 0, %for.body.preheader ]
  store volatile float 0.000000e+00, float* %lsr.iv, align 4, !tbaa !1
  %inc = add nuw nsw i32 %i.06, 1
  %scevgep = getelementptr float, float* %lsr.iv, i32 1
  %cmp = icmp slt i32 %inc, %mul
  br i1 %cmp, label %for.body, label %for.end.loopexit

for.end.loopexit:                                 ; preds = %for.body
  br label %for.end

for.end:                                          ; preds = %for.end.loopexit, %entry
  ret void
}
*** IR Dump Before Constant Hoisting ***
; Function Attrs: norecurse nounwind optsize
define hidden void @matclr(float* noalias %a, i32 %NN) local_unnamed_addr #0 {
entry:
  %mul = mul nsw i32 %NN, %NN
  %cmp5 = icmp eq i32 %mul, 0
  br i1 %cmp5, label %for.end, label %for.body.preheader

for.body.preheader:                               ; preds = %entry
  br label %for.body

for.body:                                         ; preds = %for.body, %for.body.preheader
  %lsr.iv = phi float* [ %scevgep, %for.body ], [ %a, %for.body.preheader ]
  %i.06 = phi i32 [ %inc, %for.body ], [ 0, %for.body.preheader ]
  store volatile float 0.000000e+00, float* %lsr.iv, align 4, !tbaa !1
  %inc = add nuw nsw i32 %i.06, 1
  %scevgep = getelementptr float, float* %lsr.iv, i32 1
  %cmp = icmp slt i32 %inc, %mul
  br i1 %cmp, label %for.body, label %for.end.loopexit

for.end.loopexit:                                 ; preds = %for.body
  br label %for.end

for.end:                                          ; preds = %for.end.loopexit, %entry
  ret void
}
********** Begin Constant Hoisting **********
********** Function: matclr
********** End Constant Hoisting **********
*** IR Dump After Constant Hoisting ***
; Function Attrs: norecurse nounwind optsize
define hidden void @matclr(float* noalias %a, i32 %NN) local_unnamed_addr #0 {
entry:
  %mul = mul nsw i32 %NN, %NN
  %cmp5 = icmp eq i32 %mul, 0
  br i1 %cmp5, label %for.end, label %for.body.preheader

for.body.preheader:                               ; preds = %entry
  br label %for.body

for.body:                                         ; preds = %for.body, %for.body.preheader
  %lsr.iv = phi float* [ %scevgep, %for.body ], [ %a, %for.body.preheader ]
  %i.06 = phi i32 [ %inc, %for.body ], [ 0, %for.body.preheader ]
  store volatile float 0.000000e+00, float* %lsr.iv, align 4, !tbaa !1
  %inc = add nuw nsw i32 %i.06, 1
  %scevgep = getelementptr float, float* %lsr.iv, i32 1
  %cmp = icmp slt i32 %inc, %mul
  br i1 %cmp, label %for.body, label %for.end.loopexit

for.end.loopexit:                                 ; preds = %for.body
  br label %for.end

for.end:                                          ; preds = %for.end.loopexit, %entry
  ret void
}
*** IR Dump Before Partially inline calls to library functions ***
; Function Attrs: norecurse nounwind optsize
define hidden void @matclr(float* noalias %a, i32 %NN) local_unnamed_addr #0 {
entry:
  %mul = mul nsw i32 %NN, %NN
  %cmp5 = icmp eq i32 %mul, 0
  br i1 %cmp5, label %for.end, label %for.body.preheader

for.body.preheader:                               ; preds = %entry
  br label %for.body

for.body:                                         ; preds = %for.body, %for.body.preheader
  %lsr.iv = phi float* [ %scevgep, %for.body ], [ %a, %for.body.preheader ]
  %i.06 = phi i32 [ %inc, %for.body ], [ 0, %for.body.preheader ]
  store volatile float 0.000000e+00, float* %lsr.iv, align 4, !tbaa !1
  %inc = add nuw nsw i32 %i.06, 1
  %scevgep = getelementptr float, float* %lsr.iv, i32 1
  %cmp = icmp slt i32 %inc, %mul
  br i1 %cmp, label %for.body, label %for.end.loopexit

for.end.loopexit:                                 ; preds = %for.body
  br label %for.end

for.end:                                          ; preds = %for.end.loopexit, %entry
  ret void
}
*** IR Dump After Partially inline calls to library functions ***
; Function Attrs: norecurse nounwind optsize
define hidden void @matclr(float* noalias %a, i32 %NN) local_unnamed_addr #0 {
entry:
  %mul = mul nsw i32 %NN, %NN
  %cmp5 = icmp eq i32 %mul, 0
  br i1 %cmp5, label %for.end, label %for.body.preheader

for.body.preheader:                               ; preds = %entry
  br label %for.body

for.body:                                         ; preds = %for.body, %for.body.preheader
  %lsr.iv = phi float* [ %scevgep, %for.body ], [ %a, %for.body.preheader ]
  %i.06 = phi i32 [ %inc, %for.body ], [ 0, %for.body.preheader ]
  store volatile float 0.000000e+00, float* %lsr.iv, align 4, !tbaa !1
  %inc = add nuw nsw i32 %i.06, 1
  %scevgep = getelementptr float, float* %lsr.iv, i32 1
  %cmp = icmp slt i32 %inc, %mul
  br i1 %cmp, label %for.body, label %for.end.loopexit

for.end.loopexit:                                 ; preds = %for.body
  br label %for.end

for.end:                                          ; preds = %for.end.loopexit, %entry
  ret void
}
*** IR Dump Before Inserts calls to mcount-like functions ***
; Function Attrs: norecurse nounwind optsize
define hidden void @matclr(float* noalias %a, i32 %NN) local_unnamed_addr #0 {
entry:
  %mul = mul nsw i32 %NN, %NN
  %cmp5 = icmp eq i32 %mul, 0
  br i1 %cmp5, label %for.end, label %for.body.preheader

for.body.preheader:                               ; preds = %entry
  br label %for.body

for.body:                                         ; preds = %for.body, %for.body.preheader
  %lsr.iv = phi float* [ %scevgep, %for.body ], [ %a, %for.body.preheader ]
  %i.06 = phi i32 [ %inc, %for.body ], [ 0, %for.body.preheader ]
  store volatile float 0.000000e+00, float* %lsr.iv, align 4, !tbaa !1
  %inc = add nuw nsw i32 %i.06, 1
  %scevgep = getelementptr float, float* %lsr.iv, i32 1
  %cmp = icmp slt i32 %inc, %mul
  br i1 %cmp, label %for.body, label %for.end.loopexit

for.end.loopexit:                                 ; preds = %for.body
  br label %for.end

for.end:                                          ; preds = %for.end.loopexit, %entry
  ret void
}
*** IR Dump After Inserts calls to mcount-like functions ***
; Function Attrs: norecurse nounwind optsize
define hidden void @matclr(float* noalias %a, i32 %NN) local_unnamed_addr #0 {
entry:
  %mul = mul nsw i32 %NN, %NN
  %cmp5 = icmp eq i32 %mul, 0
  br i1 %cmp5, label %for.end, label %for.body.preheader

for.body.preheader:                               ; preds = %entry
  br label %for.body

for.body:                                         ; preds = %for.body, %for.body.preheader
  %lsr.iv = phi float* [ %scevgep, %for.body ], [ %a, %for.body.preheader ]
  %i.06 = phi i32 [ %inc, %for.body ], [ 0, %for.body.preheader ]
  store volatile float 0.000000e+00, float* %lsr.iv, align 4, !tbaa !1
  %inc = add nuw nsw i32 %i.06, 1
  %scevgep = getelementptr float, float* %lsr.iv, i32 1
  %cmp = icmp slt i32 %inc, %mul
  br i1 %cmp, label %for.body, label %for.end.loopexit

for.end.loopexit:                                 ; preds = %for.body
  br label %for.end

for.end:                                          ; preds = %for.end.loopexit, %entry
  ret void
}
*** IR Dump Before CodeGen Prepare ***
; Function Attrs: norecurse nounwind optsize
define hidden void @matclr(float* noalias %a, i32 %NN) local_unnamed_addr #0 {
entry:
  %mul = mul nsw i32 %NN, %NN
  %cmp5 = icmp eq i32 %mul, 0
  br i1 %cmp5, label %for.end, label %for.body.preheader

for.body.preheader:                               ; preds = %entry
  br label %for.body

for.body:                                         ; preds = %for.body, %for.body.preheader
  %lsr.iv = phi float* [ %scevgep, %for.body ], [ %a, %for.body.preheader ]
  %i.06 = phi i32 [ %inc, %for.body ], [ 0, %for.body.preheader ]
  store volatile float 0.000000e+00, float* %lsr.iv, align 4, !tbaa !1
  %inc = add nuw nsw i32 %i.06, 1
  %scevgep = getelementptr float, float* %lsr.iv, i32 1
  %cmp = icmp slt i32 %inc, %mul
  br i1 %cmp, label %for.body, label %for.end.loopexit

for.end.loopexit:                                 ; preds = %for.body
  br label %for.end

for.end:                                          ; preds = %for.end.loopexit, %entry
  ret void
}
MERGING MOSTLY EMPTY BLOCKS - BEFORE:

for.end.loopexit:                                 ; preds = %for.body
  br label %for.end

for.end:                                          ; preds = %for.end.loopexit, %entry
  ret void
AFTER:

for.end:                                          ; preds = %for.body, %entry
  ret void



*** IR Dump After CodeGen Prepare ***
; Function Attrs: norecurse nounwind optsize
define hidden void @matclr(float* noalias %a, i32 %NN) local_unnamed_addr #0 {
entry:
  %mul = mul nsw i32 %NN, %NN
  %cmp5 = icmp eq i32 %mul, 0
  br i1 %cmp5, label %for.end, label %for.body.preheader

for.body.preheader:                               ; preds = %entry
  br label %for.body

for.body:                                         ; preds = %for.body, %for.body.preheader
  %lsr.iv = phi float* [ %scevgep, %for.body ], [ %a, %for.body.preheader ]
  %i.06 = phi i32 [ %inc, %for.body ], [ 0, %for.body.preheader ]
  store volatile float 0.000000e+00, float* %lsr.iv, align 4, !tbaa !1
  %inc = add nuw nsw i32 %i.06, 1
  %scevgep = getelementptr float, float* %lsr.iv, i32 1
  %cmp = icmp slt i32 %inc, %mul
  br i1 %cmp, label %for.body, label %for.end

for.end:                                          ; preds = %for.body, %entry
  ret void
}
*** IR Dump Before Expand Atomic instructions ***
; Function Attrs: nounwind optsize
define hidden void @matmac(float* noalias %aa, float* noalias %bb, float* noalias %cc, i32 %NN) local_unnamed_addr #2 {
entry:
  %tot = alloca [8 x float], align 4
  %0 = bitcast [8 x float]* %tot to i8*
  %cmp143 = icmp sgt i32 %NN, 0
  br i1 %cmp143, label %for.body3.lr.ph.preheader, label %for.end81

for.body3.lr.ph.preheader:                        ; preds = %entry
  br label %for.body3.lr.ph

for.body3.lr.ph:                                  ; preds = %for.end78, %for.body3.lr.ph.preheader
  %i.0144 = phi i32 [ %inc80, %for.end78 ], [ 0, %for.body3.lr.ph.preheader ]
  %mul68 = mul nsw i32 %i.0144, %NN
  %add.ptr69 = getelementptr inbounds float, float* %cc, i32 %mul68
  %add.ptr = getelementptr inbounds float, float* %aa, i32 %mul68
  br label %for.body9.preheader

for.body9.preheader:                              ; preds = %for.end75, %for.body3.lr.ph
  %j0.0142 = phi i32 [ 0, %for.body3.lr.ph ], [ %add77, %for.end75 ]
  call void @llvm.lifetime.start(i64 32, i8* nonnull %0) #3
  call void @llvm.memset.p0i8.i32(i8* nonnull %0, i8 0, i32 32, i32 4, i1 false)
  br label %for.body9

for.cond64.preheader:                             ; preds = %for.end60
  %add.ptr70 = getelementptr inbounds float, float* %add.ptr69, i32 %j0.0142
  br label %for.body66

for.body9:                                        ; preds = %for.end60, %for.body9.preheader
  %x.0139 = phi i32 [ %inc62, %for.end60 ], [ 0, %for.body9.preheader ]
  %add.ptr10 = getelementptr inbounds float, float* %add.ptr, i32 %x.0139
  %1 = load volatile float, float* %add.ptr10, align 4, !tbaa !1
  %mul15 = mul nsw i32 %x.0139, %NN
  %add.ptr16 = getelementptr inbounds float, float* %bb, i32 %mul15
  %add.ptr17 = getelementptr inbounds float, float* %add.ptr16, i32 %j0.0142
  br label %for.body13

for.body13:                                       ; preds = %for.body13, %for.body9
  %j1.1137 = phi i32 [ 0, %for.body9 ], [ %add59, %for.body13 ]
  %add.ptr18 = getelementptr inbounds float, float* %add.ptr17, i32 %j1.1137
  %2 = load volatile float, float* %add.ptr18, align 4, !tbaa !1
  %add.ptr25 = getelementptr inbounds float, float* %add.ptr18, i32 1
  %3 = load volatile float, float* %add.ptr25, align 4, !tbaa !1
  %add.ptr31 = getelementptr inbounds float, float* %add.ptr18, i32 2
  %4 = load volatile float, float* %add.ptr31, align 4, !tbaa !1
  %add.ptr37 = getelementptr inbounds float, float* %add.ptr18, i32 3
  %5 = load volatile float, float* %add.ptr37, align 4, !tbaa !1
  %mul40 = fmul float %1, %2
  %arrayidx41 = getelementptr inbounds [8 x float], [8 x float]* %tot, i32 0, i32 %j1.1137
  %6 = load float, float* %arrayidx41, align 4, !tbaa !1
  %add42 = fadd float %mul40, %6
  store float %add42, float* %arrayidx41, align 4, !tbaa !1
  %mul44 = fmul float %1, %3
  %add45 = or i32 %j1.1137, 1
  %arrayidx46 = getelementptr inbounds [8 x float], [8 x float]* %tot, i32 0, i32 %add45
  %7 = load float, float* %arrayidx46, align 4, !tbaa !1
  %add47 = fadd float %mul44, %7
  store float %add47, float* %arrayidx46, align 4, !tbaa !1
  %mul49 = fmul float %1, %4
  %add50 = or i32 %j1.1137, 2
  %arrayidx51 = getelementptr inbounds [8 x float], [8 x float]* %tot, i32 0, i32 %add50
  %8 = load float, float* %arrayidx51, align 4, !tbaa !1
  %add52 = fadd float %mul49, %8
  store float %add52, float* %arrayidx51, align 4, !tbaa !1
  %mul54 = fmul float %1, %5
  %add55 = or i32 %j1.1137, 3
  %arrayidx56 = getelementptr inbounds [8 x float], [8 x float]* %tot, i32 0, i32 %add55
  %9 = load float, float* %arrayidx56, align 4, !tbaa !1
  %add57 = fadd float %mul54, %9
  store float %add57, float* %arrayidx56, align 4, !tbaa !1
  %add59 = add nuw nsw i32 %j1.1137, 4
  %cmp12 = icmp slt i32 %add59, 8
  br i1 %cmp12, label %for.body13, label %for.end60

for.end60:                                        ; preds = %for.body13
  %inc62 = add nuw nsw i32 %x.0139, 1
  %exitcond = icmp eq i32 %inc62, %NN
  br i1 %exitcond, label %for.cond64.preheader, label %for.body9

for.body66:                                       ; preds = %for.body66, %for.cond64.preheader
  %j1.2140 = phi i32 [ 0, %for.cond64.preheader ], [ %add74, %for.body66 ]
  %arrayidx67 = getelementptr inbounds [8 x float], [8 x float]* %tot, i32 0, i32 %j1.2140
  %10 = load float, float* %arrayidx67, align 4, !tbaa !1
  %add.ptr71 = getelementptr inbounds float, float* %add.ptr70, i32 %j1.2140
  %11 = load volatile float, float* %add.ptr71, align 4, !tbaa !1
  %add72 = fadd float %10, %11
  store volatile float %add72, float* %add.ptr71, align 4, !tbaa !1
  %add74 = add nuw nsw i32 %j1.2140, 1
  %exitcond145 = icmp eq i32 %add74, 8
  br i1 %exitcond145, label %for.end75, label %for.body66

for.end75:                                        ; preds = %for.body66
  call void @llvm.lifetime.end(i64 32, i8* nonnull %0) #3
  %add77 = add nuw nsw i32 %j0.0142, 8
  %cmp2 = icmp slt i32 %add77, %NN
  br i1 %cmp2, label %for.body9.preheader, label %for.end78

for.end78:                                        ; preds = %for.end75
  %inc80 = add nuw nsw i32 %i.0144, 1
  %exitcond146 = icmp eq i32 %inc80, %NN
  br i1 %exitcond146, label %for.end81.loopexit, label %for.body3.lr.ph

for.end81.loopexit:                               ; preds = %for.end78
  br label %for.end81

for.end81:                                        ; preds = %for.end81.loopexit, %entry
  ret void
}
*** IR Dump After Expand Atomic instructions ***
; Function Attrs: nounwind optsize
define hidden void @matmac(float* noalias %aa, float* noalias %bb, float* noalias %cc, i32 %NN) local_unnamed_addr #2 {
entry:
  %tot = alloca [8 x float], align 4
  %0 = bitcast [8 x float]* %tot to i8*
  %cmp143 = icmp sgt i32 %NN, 0
  br i1 %cmp143, label %for.body3.lr.ph.preheader, label %for.end81

for.body3.lr.ph.preheader:                        ; preds = %entry
  br label %for.body3.lr.ph

for.body3.lr.ph:                                  ; preds = %for.end78, %for.body3.lr.ph.preheader
  %i.0144 = phi i32 [ %inc80, %for.end78 ], [ 0, %for.body3.lr.ph.preheader ]
  %mul68 = mul nsw i32 %i.0144, %NN
  %add.ptr69 = getelementptr inbounds float, float* %cc, i32 %mul68
  %add.ptr = getelementptr inbounds float, float* %aa, i32 %mul68
  br label %for.body9.preheader

for.body9.preheader:                              ; preds = %for.end75, %for.body3.lr.ph
  %j0.0142 = phi i32 [ 0, %for.body3.lr.ph ], [ %add77, %for.end75 ]
  call void @llvm.lifetime.start(i64 32, i8* nonnull %0) #3
  call void @llvm.memset.p0i8.i32(i8* nonnull %0, i8 0, i32 32, i32 4, i1 false)
  br label %for.body9

for.cond64.preheader:                             ; preds = %for.end60
  %add.ptr70 = getelementptr inbounds float, float* %add.ptr69, i32 %j0.0142
  br label %for.body66

for.body9:                                        ; preds = %for.end60, %for.body9.preheader
  %x.0139 = phi i32 [ %inc62, %for.end60 ], [ 0, %for.body9.preheader ]
  %add.ptr10 = getelementptr inbounds float, float* %add.ptr, i32 %x.0139
  %1 = load volatile float, float* %add.ptr10, align 4, !tbaa !1
  %mul15 = mul nsw i32 %x.0139, %NN
  %add.ptr16 = getelementptr inbounds float, float* %bb, i32 %mul15
  %add.ptr17 = getelementptr inbounds float, float* %add.ptr16, i32 %j0.0142
  br label %for.body13

for.body13:                                       ; preds = %for.body13, %for.body9
  %j1.1137 = phi i32 [ 0, %for.body9 ], [ %add59, %for.body13 ]
  %add.ptr18 = getelementptr inbounds float, float* %add.ptr17, i32 %j1.1137
  %2 = load volatile float, float* %add.ptr18, align 4, !tbaa !1
  %add.ptr25 = getelementptr inbounds float, float* %add.ptr18, i32 1
  %3 = load volatile float, float* %add.ptr25, align 4, !tbaa !1
  %add.ptr31 = getelementptr inbounds float, float* %add.ptr18, i32 2
  %4 = load volatile float, float* %add.ptr31, align 4, !tbaa !1
  %add.ptr37 = getelementptr inbounds float, float* %add.ptr18, i32 3
  %5 = load volatile float, float* %add.ptr37, align 4, !tbaa !1
  %mul40 = fmul float %1, %2
  %arrayidx41 = getelementptr inbounds [8 x float], [8 x float]* %tot, i32 0, i32 %j1.1137
  %6 = load float, float* %arrayidx41, align 4, !tbaa !1
  %add42 = fadd float %mul40, %6
  store float %add42, float* %arrayidx41, align 4, !tbaa !1
  %mul44 = fmul float %1, %3
  %add45 = or i32 %j1.1137, 1
  %arrayidx46 = getelementptr inbounds [8 x float], [8 x float]* %tot, i32 0, i32 %add45
  %7 = load float, float* %arrayidx46, align 4, !tbaa !1
  %add47 = fadd float %mul44, %7
  store float %add47, float* %arrayidx46, align 4, !tbaa !1
  %mul49 = fmul float %1, %4
  %add50 = or i32 %j1.1137, 2
  %arrayidx51 = getelementptr inbounds [8 x float], [8 x float]* %tot, i32 0, i32 %add50
  %8 = load float, float* %arrayidx51, align 4, !tbaa !1
  %add52 = fadd float %mul49, %8
  store float %add52, float* %arrayidx51, align 4, !tbaa !1
  %mul54 = fmul float %1, %5
  %add55 = or i32 %j1.1137, 3
  %arrayidx56 = getelementptr inbounds [8 x float], [8 x float]* %tot, i32 0, i32 %add55
  %9 = load float, float* %arrayidx56, align 4, !tbaa !1
  %add57 = fadd float %mul54, %9
  store float %add57, float* %arrayidx56, align 4, !tbaa !1
  %add59 = add nuw nsw i32 %j1.1137, 4
  %cmp12 = icmp slt i32 %add59, 8
  br i1 %cmp12, label %for.body13, label %for.end60

for.end60:                                        ; preds = %for.body13
  %inc62 = add nuw nsw i32 %x.0139, 1
  %exitcond = icmp eq i32 %inc62, %NN
  br i1 %exitcond, label %for.cond64.preheader, label %for.body9

for.body66:                                       ; preds = %for.body66, %for.cond64.preheader
  %j1.2140 = phi i32 [ 0, %for.cond64.preheader ], [ %add74, %for.body66 ]
  %arrayidx67 = getelementptr inbounds [8 x float], [8 x float]* %tot, i32 0, i32 %j1.2140
  %10 = load float, float* %arrayidx67, align 4, !tbaa !1
  %add.ptr71 = getelementptr inbounds float, float* %add.ptr70, i32 %j1.2140
  %11 = load volatile float, float* %add.ptr71, align 4, !tbaa !1
  %add72 = fadd float %10, %11
  store volatile float %add72, float* %add.ptr71, align 4, !tbaa !1
  %add74 = add nuw nsw i32 %j1.2140, 1
  %exitcond145 = icmp eq i32 %add74, 8
  br i1 %exitcond145, label %for.end75, label %for.body66

for.end75:                                        ; preds = %for.body66
  call void @llvm.lifetime.end(i64 32, i8* nonnull %0) #3
  %add77 = add nuw nsw i32 %j0.0142, 8
  %cmp2 = icmp slt i32 %add77, %NN
  br i1 %cmp2, label %for.body9.preheader, label %for.end78

for.end78:                                        ; preds = %for.end75
  %inc80 = add nuw nsw i32 %i.0144, 1
  %exitcond146 = icmp eq i32 %inc80, %NN
  br i1 %exitcond146, label %for.end81.loopexit, label %for.body3.lr.ph

for.end81.loopexit:                               ; preds = %for.end78
  br label %for.end81

for.end81:                                        ; preds = %for.end81.loopexit, %entry
  ret void
}
*** IR Dump Before SROA ***
; Function Attrs: nounwind optsize
define hidden void @matmac(float* noalias %aa, float* noalias %bb, float* noalias %cc, i32 %NN) local_unnamed_addr #2 {
entry:
  %tot = alloca [8 x float], align 4
  %0 = bitcast [8 x float]* %tot to i8*
  %cmp143 = icmp sgt i32 %NN, 0
  br i1 %cmp143, label %for.body3.lr.ph.preheader, label %for.end81

for.body3.lr.ph.preheader:                        ; preds = %entry
  br label %for.body3.lr.ph

for.body3.lr.ph:                                  ; preds = %for.end78, %for.body3.lr.ph.preheader
  %i.0144 = phi i32 [ %inc80, %for.end78 ], [ 0, %for.body3.lr.ph.preheader ]
  %mul68 = mul nsw i32 %i.0144, %NN
  %add.ptr69 = getelementptr inbounds float, float* %cc, i32 %mul68
  %add.ptr = getelementptr inbounds float, float* %aa, i32 %mul68
  br label %for.body9.preheader

for.body9.preheader:                              ; preds = %for.end75, %for.body3.lr.ph
  %j0.0142 = phi i32 [ 0, %for.body3.lr.ph ], [ %add77, %for.end75 ]
  call void @llvm.lifetime.start(i64 32, i8* nonnull %0) #3
  call void @llvm.memset.p0i8.i32(i8* nonnull %0, i8 0, i32 32, i32 4, i1 false)
  br label %for.body9

for.cond64.preheader:                             ; preds = %for.end60
  %add.ptr70 = getelementptr inbounds float, float* %add.ptr69, i32 %j0.0142
  br label %for.body66

for.body9:                                        ; preds = %for.end60, %for.body9.preheader
  %x.0139 = phi i32 [ %inc62, %for.end60 ], [ 0, %for.body9.preheader ]
  %add.ptr10 = getelementptr inbounds float, float* %add.ptr, i32 %x.0139
  %1 = load volatile float, float* %add.ptr10, align 4, !tbaa !1
  %mul15 = mul nsw i32 %x.0139, %NN
  %add.ptr16 = getelementptr inbounds float, float* %bb, i32 %mul15
  %add.ptr17 = getelementptr inbounds float, float* %add.ptr16, i32 %j0.0142
  br label %for.body13

for.body13:                                       ; preds = %for.body13, %for.body9
  %j1.1137 = phi i32 [ 0, %for.body9 ], [ %add59, %for.body13 ]
  %add.ptr18 = getelementptr inbounds float, float* %add.ptr17, i32 %j1.1137
  %2 = load volatile float, float* %add.ptr18, align 4, !tbaa !1
  %add.ptr25 = getelementptr inbounds float, float* %add.ptr18, i32 1
  %3 = load volatile float, float* %add.ptr25, align 4, !tbaa !1
  %add.ptr31 = getelementptr inbounds float, float* %add.ptr18, i32 2
  %4 = load volatile float, float* %add.ptr31, align 4, !tbaa !1
  %add.ptr37 = getelementptr inbounds float, float* %add.ptr18, i32 3
  %5 = load volatile float, float* %add.ptr37, align 4, !tbaa !1
  %mul40 = fmul float %1, %2
  %arrayidx41 = getelementptr inbounds [8 x float], [8 x float]* %tot, i32 0, i32 %j1.1137
  %6 = load float, float* %arrayidx41, align 4, !tbaa !1
  %add42 = fadd float %mul40, %6
  store float %add42, float* %arrayidx41, align 4, !tbaa !1
  %mul44 = fmul float %1, %3
  %add45 = or i32 %j1.1137, 1
  %arrayidx46 = getelementptr inbounds [8 x float], [8 x float]* %tot, i32 0, i32 %add45
  %7 = load float, float* %arrayidx46, align 4, !tbaa !1
  %add47 = fadd float %mul44, %7
  store float %add47, float* %arrayidx46, align 4, !tbaa !1
  %mul49 = fmul float %1, %4
  %add50 = or i32 %j1.1137, 2
  %arrayidx51 = getelementptr inbounds [8 x float], [8 x float]* %tot, i32 0, i32 %add50
  %8 = load float, float* %arrayidx51, align 4, !tbaa !1
  %add52 = fadd float %mul49, %8
  store float %add52, float* %arrayidx51, align 4, !tbaa !1
  %mul54 = fmul float %1, %5
  %add55 = or i32 %j1.1137, 3
  %arrayidx56 = getelementptr inbounds [8 x float], [8 x float]* %tot, i32 0, i32 %add55
  %9 = load float, float* %arrayidx56, align 4, !tbaa !1
  %add57 = fadd float %mul54, %9
  store float %add57, float* %arrayidx56, align 4, !tbaa !1
  %add59 = add nuw nsw i32 %j1.1137, 4
  %cmp12 = icmp slt i32 %add59, 8
  br i1 %cmp12, label %for.body13, label %for.end60

for.end60:                                        ; preds = %for.body13
  %inc62 = add nuw nsw i32 %x.0139, 1
  %exitcond = icmp eq i32 %inc62, %NN
  br i1 %exitcond, label %for.cond64.preheader, label %for.body9

for.body66:                                       ; preds = %for.body66, %for.cond64.preheader
  %j1.2140 = phi i32 [ 0, %for.cond64.preheader ], [ %add74, %for.body66 ]
  %arrayidx67 = getelementptr inbounds [8 x float], [8 x float]* %tot, i32 0, i32 %j1.2140
  %10 = load float, float* %arrayidx67, align 4, !tbaa !1
  %add.ptr71 = getelementptr inbounds float, float* %add.ptr70, i32 %j1.2140
  %11 = load volatile float, float* %add.ptr71, align 4, !tbaa !1
  %add72 = fadd float %10, %11
  store volatile float %add72, float* %add.ptr71, align 4, !tbaa !1
  %add74 = add nuw nsw i32 %j1.2140, 1
  %exitcond145 = icmp eq i32 %add74, 8
  br i1 %exitcond145, label %for.end75, label %for.body66

for.end75:                                        ; preds = %for.body66
  call void @llvm.lifetime.end(i64 32, i8* nonnull %0) #3
  %add77 = add nuw nsw i32 %j0.0142, 8
  %cmp2 = icmp slt i32 %add77, %NN
  br i1 %cmp2, label %for.body9.preheader, label %for.end78

for.end78:                                        ; preds = %for.end75
  %inc80 = add nuw nsw i32 %i.0144, 1
  %exitcond146 = icmp eq i32 %inc80, %NN
  br i1 %exitcond146, label %for.end81.loopexit, label %for.body3.lr.ph

for.end81.loopexit:                               ; preds = %for.end78
  br label %for.end81

for.end81:                                        ; preds = %for.end81.loopexit, %entry
  ret void
}
SROA function: matmac
SROA alloca:   %tot = alloca [8 x float], align 4
  Rewriting FCA loads and stores...
Can't analyze slices for alloca:   %tot = alloca [8 x float], align 4
  A pointer to this alloca escaped by:
    %6 = load float, float* %arrayidx41, align 4, !tbaa !1
*** IR Dump After SROA ***
; Function Attrs: nounwind optsize
define hidden void @matmac(float* noalias %aa, float* noalias %bb, float* noalias %cc, i32 %NN) local_unnamed_addr #2 {
entry:
  %tot = alloca [8 x float], align 4
  %0 = bitcast [8 x float]* %tot to i8*
  %cmp143 = icmp sgt i32 %NN, 0
  br i1 %cmp143, label %for.body3.lr.ph.preheader, label %for.end81

for.body3.lr.ph.preheader:                        ; preds = %entry
  br label %for.body3.lr.ph

for.body3.lr.ph:                                  ; preds = %for.end78, %for.body3.lr.ph.preheader
  %i.0144 = phi i32 [ %inc80, %for.end78 ], [ 0, %for.body3.lr.ph.preheader ]
  %mul68 = mul nsw i32 %i.0144, %NN
  %add.ptr69 = getelementptr inbounds float, float* %cc, i32 %mul68
  %add.ptr = getelementptr inbounds float, float* %aa, i32 %mul68
  br label %for.body9.preheader

for.body9.preheader:                              ; preds = %for.end75, %for.body3.lr.ph
  %j0.0142 = phi i32 [ 0, %for.body3.lr.ph ], [ %add77, %for.end75 ]
  call void @llvm.lifetime.start(i64 32, i8* nonnull %0) #3
  call void @llvm.memset.p0i8.i32(i8* nonnull %0, i8 0, i32 32, i32 4, i1 false)
  br label %for.body9

for.cond64.preheader:                             ; preds = %for.end60
  %add.ptr70 = getelementptr inbounds float, float* %add.ptr69, i32 %j0.0142
  br label %for.body66

for.body9:                                        ; preds = %for.end60, %for.body9.preheader
  %x.0139 = phi i32 [ %inc62, %for.end60 ], [ 0, %for.body9.preheader ]
  %add.ptr10 = getelementptr inbounds float, float* %add.ptr, i32 %x.0139
  %1 = load volatile float, float* %add.ptr10, align 4, !tbaa !1
  %mul15 = mul nsw i32 %x.0139, %NN
  %add.ptr16 = getelementptr inbounds float, float* %bb, i32 %mul15
  %add.ptr17 = getelementptr inbounds float, float* %add.ptr16, i32 %j0.0142
  br label %for.body13

for.body13:                                       ; preds = %for.body13, %for.body9
  %j1.1137 = phi i32 [ 0, %for.body9 ], [ %add59, %for.body13 ]
  %add.ptr18 = getelementptr inbounds float, float* %add.ptr17, i32 %j1.1137
  %2 = load volatile float, float* %add.ptr18, align 4, !tbaa !1
  %add.ptr25 = getelementptr inbounds float, float* %add.ptr18, i32 1
  %3 = load volatile float, float* %add.ptr25, align 4, !tbaa !1
  %add.ptr31 = getelementptr inbounds float, float* %add.ptr18, i32 2
  %4 = load volatile float, float* %add.ptr31, align 4, !tbaa !1
  %add.ptr37 = getelementptr inbounds float, float* %add.ptr18, i32 3
  %5 = load volatile float, float* %add.ptr37, align 4, !tbaa !1
  %mul40 = fmul float %1, %2
  %arrayidx41 = getelementptr inbounds [8 x float], [8 x float]* %tot, i32 0, i32 %j1.1137
  %6 = load float, float* %arrayidx41, align 4, !tbaa !1
  %add42 = fadd float %mul40, %6
  store float %add42, float* %arrayidx41, align 4, !tbaa !1
  %mul44 = fmul float %1, %3
  %add45 = or i32 %j1.1137, 1
  %arrayidx46 = getelementptr inbounds [8 x float], [8 x float]* %tot, i32 0, i32 %add45
  %7 = load float, float* %arrayidx46, align 4, !tbaa !1
  %add47 = fadd float %mul44, %7
  store float %add47, float* %arrayidx46, align 4, !tbaa !1
  %mul49 = fmul float %1, %4
  %add50 = or i32 %j1.1137, 2
  %arrayidx51 = getelementptr inbounds [8 x float], [8 x float]* %tot, i32 0, i32 %add50
  %8 = load float, float* %arrayidx51, align 4, !tbaa !1
  %add52 = fadd float %mul49, %8
  store float %add52, float* %arrayidx51, align 4, !tbaa !1
  %mul54 = fmul float %1, %5
  %add55 = or i32 %j1.1137, 3
  %arrayidx56 = getelementptr inbounds [8 x float], [8 x float]* %tot, i32 0, i32 %add55
  %9 = load float, float* %arrayidx56, align 4, !tbaa !1
  %add57 = fadd float %mul54, %9
  store float %add57, float* %arrayidx56, align 4, !tbaa !1
  %add59 = add nuw nsw i32 %j1.1137, 4
  %cmp12 = icmp slt i32 %add59, 8
  br i1 %cmp12, label %for.body13, label %for.end60

for.end60:                                        ; preds = %for.body13
  %inc62 = add nuw nsw i32 %x.0139, 1
  %exitcond = icmp eq i32 %inc62, %NN
  br i1 %exitcond, label %for.cond64.preheader, label %for.body9

for.body66:                                       ; preds = %for.body66, %for.cond64.preheader
  %j1.2140 = phi i32 [ 0, %for.cond64.preheader ], [ %add74, %for.body66 ]
  %arrayidx67 = getelementptr inbounds [8 x float], [8 x float]* %tot, i32 0, i32 %j1.2140
  %10 = load float, float* %arrayidx67, align 4, !tbaa !1
  %add.ptr71 = getelementptr inbounds float, float* %add.ptr70, i32 %j1.2140
  %11 = load volatile float, float* %add.ptr71, align 4, !tbaa !1
  %add72 = fadd float %10, %11
  store volatile float %add72, float* %add.ptr71, align 4, !tbaa !1
  %add74 = add nuw nsw i32 %j1.2140, 1
  %exitcond145 = icmp eq i32 %add74, 8
  br i1 %exitcond145, label %for.end75, label %for.body66

for.end75:                                        ; preds = %for.body66
  call void @llvm.lifetime.end(i64 32, i8* nonnull %0) #3
  %add77 = add nuw nsw i32 %j0.0142, 8
  %cmp2 = icmp slt i32 %add77, %NN
  br i1 %cmp2, label %for.body9.preheader, label %for.end78

for.end78:                                        ; preds = %for.end75
  %inc80 = add nuw nsw i32 %i.0144, 1
  %exitcond146 = icmp eq i32 %inc80, %NN
  br i1 %exitcond146, label %for.end81.loopexit, label %for.body3.lr.ph

for.end81.loopexit:                               ; preds = %for.end78
  br label %for.end81

for.end81:                                        ; preds = %for.end81.loopexit, %entry
  ret void
}
*** IR Dump Before Module Verifier ***
; Function Attrs: nounwind optsize
define hidden void @matmac(float* noalias %aa, float* noalias %bb, float* noalias %cc, i32 %NN) local_unnamed_addr #2 {
entry:
  %tot = alloca [8 x float], align 4
  %0 = bitcast [8 x float]* %tot to i8*
  %cmp143 = icmp sgt i32 %NN, 0
  br i1 %cmp143, label %for.body3.lr.ph.preheader, label %for.end81

for.body3.lr.ph.preheader:                        ; preds = %entry
  br label %for.body3.lr.ph

for.body3.lr.ph:                                  ; preds = %for.end78, %for.body3.lr.ph.preheader
  %i.0144 = phi i32 [ %inc80, %for.end78 ], [ 0, %for.body3.lr.ph.preheader ]
  %mul68 = mul nsw i32 %i.0144, %NN
  %add.ptr69 = getelementptr inbounds float, float* %cc, i32 %mul68
  %add.ptr = getelementptr inbounds float, float* %aa, i32 %mul68
  br label %for.body9.preheader

for.body9.preheader:                              ; preds = %for.end75, %for.body3.lr.ph
  %j0.0142 = phi i32 [ 0, %for.body3.lr.ph ], [ %add77, %for.end75 ]
  call void @llvm.lifetime.start(i64 32, i8* nonnull %0) #3
  call void @llvm.memset.p0i8.i32(i8* nonnull %0, i8 0, i32 32, i32 4, i1 false)
  br label %for.body9

for.cond64.preheader:                             ; preds = %for.end60
  %add.ptr70 = getelementptr inbounds float, float* %add.ptr69, i32 %j0.0142
  br label %for.body66

for.body9:                                        ; preds = %for.end60, %for.body9.preheader
  %x.0139 = phi i32 [ %inc62, %for.end60 ], [ 0, %for.body9.preheader ]
  %add.ptr10 = getelementptr inbounds float, float* %add.ptr, i32 %x.0139
  %1 = load volatile float, float* %add.ptr10, align 4, !tbaa !1
  %mul15 = mul nsw i32 %x.0139, %NN
  %add.ptr16 = getelementptr inbounds float, float* %bb, i32 %mul15
  %add.ptr17 = getelementptr inbounds float, float* %add.ptr16, i32 %j0.0142
  br label %for.body13

for.body13:                                       ; preds = %for.body13, %for.body9
  %j1.1137 = phi i32 [ 0, %for.body9 ], [ %add59, %for.body13 ]
  %add.ptr18 = getelementptr inbounds float, float* %add.ptr17, i32 %j1.1137
  %2 = load volatile float, float* %add.ptr18, align 4, !tbaa !1
  %add.ptr25 = getelementptr inbounds float, float* %add.ptr18, i32 1
  %3 = load volatile float, float* %add.ptr25, align 4, !tbaa !1
  %add.ptr31 = getelementptr inbounds float, float* %add.ptr18, i32 2
  %4 = load volatile float, float* %add.ptr31, align 4, !tbaa !1
  %add.ptr37 = getelementptr inbounds float, float* %add.ptr18, i32 3
  %5 = load volatile float, float* %add.ptr37, align 4, !tbaa !1
  %mul40 = fmul float %1, %2
  %arrayidx41 = getelementptr inbounds [8 x float], [8 x float]* %tot, i32 0, i32 %j1.1137
  %6 = load float, float* %arrayidx41, align 4, !tbaa !1
  %add42 = fadd float %mul40, %6
  store float %add42, float* %arrayidx41, align 4, !tbaa !1
  %mul44 = fmul float %1, %3
  %add45 = or i32 %j1.1137, 1
  %arrayidx46 = getelementptr inbounds [8 x float], [8 x float]* %tot, i32 0, i32 %add45
  %7 = load float, float* %arrayidx46, align 4, !tbaa !1
  %add47 = fadd float %mul44, %7
  store float %add47, float* %arrayidx46, align 4, !tbaa !1
  %mul49 = fmul float %1, %4
  %add50 = or i32 %j1.1137, 2
  %arrayidx51 = getelementptr inbounds [8 x float], [8 x float]* %tot, i32 0, i32 %add50
  %8 = load float, float* %arrayidx51, align 4, !tbaa !1
  %add52 = fadd float %mul49, %8
  store float %add52, float* %arrayidx51, align 4, !tbaa !1
  %mul54 = fmul float %1, %5
  %add55 = or i32 %j1.1137, 3
  %arrayidx56 = getelementptr inbounds [8 x float], [8 x float]* %tot, i32 0, i32 %add55
  %9 = load float, float* %arrayidx56, align 4, !tbaa !1
  %add57 = fadd float %mul54, %9
  store float %add57, float* %arrayidx56, align 4, !tbaa !1
  %add59 = add nuw nsw i32 %j1.1137, 4
  %cmp12 = icmp slt i32 %add59, 8
  br i1 %cmp12, label %for.body13, label %for.end60

for.end60:                                        ; preds = %for.body13
  %inc62 = add nuw nsw i32 %x.0139, 1
  %exitcond = icmp eq i32 %inc62, %NN
  br i1 %exitcond, label %for.cond64.preheader, label %for.body9

for.body66:                                       ; preds = %for.body66, %for.cond64.preheader
  %j1.2140 = phi i32 [ 0, %for.cond64.preheader ], [ %add74, %for.body66 ]
  %arrayidx67 = getelementptr inbounds [8 x float], [8 x float]* %tot, i32 0, i32 %j1.2140
  %10 = load float, float* %arrayidx67, align 4, !tbaa !1
  %add.ptr71 = getelementptr inbounds float, float* %add.ptr70, i32 %j1.2140
  %11 = load volatile float, float* %add.ptr71, align 4, !tbaa !1
  %add72 = fadd float %10, %11
  store volatile float %add72, float* %add.ptr71, align 4, !tbaa !1
  %add74 = add nuw nsw i32 %j1.2140, 1
  %exitcond145 = icmp eq i32 %add74, 8
  br i1 %exitcond145, label %for.end75, label %for.body66

for.end75:                                        ; preds = %for.body66
  call void @llvm.lifetime.end(i64 32, i8* nonnull %0) #3
  %add77 = add nuw nsw i32 %j0.0142, 8
  %cmp2 = icmp slt i32 %add77, %NN
  br i1 %cmp2, label %for.body9.preheader, label %for.end78

for.end78:                                        ; preds = %for.end75
  %inc80 = add nuw nsw i32 %i.0144, 1
  %exitcond146 = icmp eq i32 %inc80, %NN
  br i1 %exitcond146, label %for.end81.loopexit, label %for.body3.lr.ph

for.end81.loopexit:                               ; preds = %for.end78
  br label %for.end81

for.end81:                                        ; preds = %for.end81.loopexit, %entry
  ret void
}
*** IR Dump After Module Verifier ***
; Function Attrs: nounwind optsize
define hidden void @matmac(float* noalias %aa, float* noalias %bb, float* noalias %cc, i32 %NN) local_unnamed_addr #2 {
entry:
  %tot = alloca [8 x float], align 4
  %0 = bitcast [8 x float]* %tot to i8*
  %cmp143 = icmp sgt i32 %NN, 0
  br i1 %cmp143, label %for.body3.lr.ph.preheader, label %for.end81

for.body3.lr.ph.preheader:                        ; preds = %entry
  br label %for.body3.lr.ph

for.body3.lr.ph:                                  ; preds = %for.end78, %for.body3.lr.ph.preheader
  %i.0144 = phi i32 [ %inc80, %for.end78 ], [ 0, %for.body3.lr.ph.preheader ]
  %mul68 = mul nsw i32 %i.0144, %NN
  %add.ptr69 = getelementptr inbounds float, float* %cc, i32 %mul68
  %add.ptr = getelementptr inbounds float, float* %aa, i32 %mul68
  br label %for.body9.preheader

for.body9.preheader:                              ; preds = %for.end75, %for.body3.lr.ph
  %j0.0142 = phi i32 [ 0, %for.body3.lr.ph ], [ %add77, %for.end75 ]
  call void @llvm.lifetime.start(i64 32, i8* nonnull %0) #3
  call void @llvm.memset.p0i8.i32(i8* nonnull %0, i8 0, i32 32, i32 4, i1 false)
  br label %for.body9

for.cond64.preheader:                             ; preds = %for.end60
  %add.ptr70 = getelementptr inbounds float, float* %add.ptr69, i32 %j0.0142
  br label %for.body66

for.body9:                                        ; preds = %for.end60, %for.body9.preheader
  %x.0139 = phi i32 [ %inc62, %for.end60 ], [ 0, %for.body9.preheader ]
  %add.ptr10 = getelementptr inbounds float, float* %add.ptr, i32 %x.0139
  %1 = load volatile float, float* %add.ptr10, align 4, !tbaa !1
  %mul15 = mul nsw i32 %x.0139, %NN
  %add.ptr16 = getelementptr inbounds float, float* %bb, i32 %mul15
  %add.ptr17 = getelementptr inbounds float, float* %add.ptr16, i32 %j0.0142
  br label %for.body13

for.body13:                                       ; preds = %for.body13, %for.body9
  %j1.1137 = phi i32 [ 0, %for.body9 ], [ %add59, %for.body13 ]
  %add.ptr18 = getelementptr inbounds float, float* %add.ptr17, i32 %j1.1137
  %2 = load volatile float, float* %add.ptr18, align 4, !tbaa !1
  %add.ptr25 = getelementptr inbounds float, float* %add.ptr18, i32 1
  %3 = load volatile float, float* %add.ptr25, align 4, !tbaa !1
  %add.ptr31 = getelementptr inbounds float, float* %add.ptr18, i32 2
  %4 = load volatile float, float* %add.ptr31, align 4, !tbaa !1
  %add.ptr37 = getelementptr inbounds float, float* %add.ptr18, i32 3
  %5 = load volatile float, float* %add.ptr37, align 4, !tbaa !1
  %mul40 = fmul float %1, %2
  %arrayidx41 = getelementptr inbounds [8 x float], [8 x float]* %tot, i32 0, i32 %j1.1137
  %6 = load float, float* %arrayidx41, align 4, !tbaa !1
  %add42 = fadd float %mul40, %6
  store float %add42, float* %arrayidx41, align 4, !tbaa !1
  %mul44 = fmul float %1, %3
  %add45 = or i32 %j1.1137, 1
  %arrayidx46 = getelementptr inbounds [8 x float], [8 x float]* %tot, i32 0, i32 %add45
  %7 = load float, float* %arrayidx46, align 4, !tbaa !1
  %add47 = fadd float %mul44, %7
  store float %add47, float* %arrayidx46, align 4, !tbaa !1
  %mul49 = fmul float %1, %4
  %add50 = or i32 %j1.1137, 2
  %arrayidx51 = getelementptr inbounds [8 x float], [8 x float]* %tot, i32 0, i32 %add50
  %8 = load float, float* %arrayidx51, align 4, !tbaa !1
  %add52 = fadd float %mul49, %8
  store float %add52, float* %arrayidx51, align 4, !tbaa !1
  %mul54 = fmul float %1, %5
  %add55 = or i32 %j1.1137, 3
  %arrayidx56 = getelementptr inbounds [8 x float], [8 x float]* %tot, i32 0, i32 %add55
  %9 = load float, float* %arrayidx56, align 4, !tbaa !1
  %add57 = fadd float %mul54, %9
  store float %add57, float* %arrayidx56, align 4, !tbaa !1
  %add59 = add nuw nsw i32 %j1.1137, 4
  %cmp12 = icmp slt i32 %add59, 8
  br i1 %cmp12, label %for.body13, label %for.end60

for.end60:                                        ; preds = %for.body13
  %inc62 = add nuw nsw i32 %x.0139, 1
  %exitcond = icmp eq i32 %inc62, %NN
  br i1 %exitcond, label %for.cond64.preheader, label %for.body9

for.body66:                                       ; preds = %for.body66, %for.cond64.preheader
  %j1.2140 = phi i32 [ 0, %for.cond64.preheader ], [ %add74, %for.body66 ]
  %arrayidx67 = getelementptr inbounds [8 x float], [8 x float]* %tot, i32 0, i32 %j1.2140
  %10 = load float, float* %arrayidx67, align 4, !tbaa !1
  %add.ptr71 = getelementptr inbounds float, float* %add.ptr70, i32 %j1.2140
  %11 = load volatile float, float* %add.ptr71, align 4, !tbaa !1
  %add72 = fadd float %10, %11
  store volatile float %add72, float* %add.ptr71, align 4, !tbaa !1
  %add74 = add nuw nsw i32 %j1.2140, 1
  %exitcond145 = icmp eq i32 %add74, 8
  br i1 %exitcond145, label %for.end75, label %for.body66

for.end75:                                        ; preds = %for.body66
  call void @llvm.lifetime.end(i64 32, i8* nonnull %0) #3
  %add77 = add nuw nsw i32 %j0.0142, 8
  %cmp2 = icmp slt i32 %add77, %NN
  br i1 %cmp2, label %for.body9.preheader, label %for.end78

for.end78:                                        ; preds = %for.end75
  %inc80 = add nuw nsw i32 %i.0144, 1
  %exitcond146 = icmp eq i32 %inc80, %NN
  br i1 %exitcond146, label %for.end81.loopexit, label %for.body3.lr.ph

for.end81.loopexit:                               ; preds = %for.end78
  br label %for.end81

for.end81:                                        ; preds = %for.end81.loopexit, %entry
  ret void
}
*** IR Dump Before Canonicalize natural loops ***
; Function Attrs: nounwind optsize
define hidden void @matmac(float* noalias %aa, float* noalias %bb, float* noalias %cc, i32 %NN) local_unnamed_addr #2 {
entry:
  %tot = alloca [8 x float], align 4
  %0 = bitcast [8 x float]* %tot to i8*
  %cmp143 = icmp sgt i32 %NN, 0
  br i1 %cmp143, label %for.body3.lr.ph.preheader, label %for.end81

for.body3.lr.ph.preheader:                        ; preds = %entry
  br label %for.body3.lr.ph

for.body3.lr.ph:                                  ; preds = %for.end78, %for.body3.lr.ph.preheader
  %i.0144 = phi i32 [ %inc80, %for.end78 ], [ 0, %for.body3.lr.ph.preheader ]
  %mul68 = mul nsw i32 %i.0144, %NN
  %add.ptr69 = getelementptr inbounds float, float* %cc, i32 %mul68
  %add.ptr = getelementptr inbounds float, float* %aa, i32 %mul68
  br label %for.body9.preheader

for.body9.preheader:                              ; preds = %for.end75, %for.body3.lr.ph
  %j0.0142 = phi i32 [ 0, %for.body3.lr.ph ], [ %add77, %for.end75 ]
  call void @llvm.lifetime.start(i64 32, i8* nonnull %0) #3
  call void @llvm.memset.p0i8.i32(i8* nonnull %0, i8 0, i32 32, i32 4, i1 false)
  br label %for.body9

for.cond64.preheader:                             ; preds = %for.end60
  %add.ptr70 = getelementptr inbounds float, float* %add.ptr69, i32 %j0.0142
  br label %for.body66

for.body9:                                        ; preds = %for.end60, %for.body9.preheader
  %x.0139 = phi i32 [ %inc62, %for.end60 ], [ 0, %for.body9.preheader ]
  %add.ptr10 = getelementptr inbounds float, float* %add.ptr, i32 %x.0139
  %1 = load volatile float, float* %add.ptr10, align 4, !tbaa !1
  %mul15 = mul nsw i32 %x.0139, %NN
  %add.ptr16 = getelementptr inbounds float, float* %bb, i32 %mul15
  %add.ptr17 = getelementptr inbounds float, float* %add.ptr16, i32 %j0.0142
  br label %for.body13

for.body13:                                       ; preds = %for.body13, %for.body9
  %j1.1137 = phi i32 [ 0, %for.body9 ], [ %add59, %for.body13 ]
  %add.ptr18 = getelementptr inbounds float, float* %add.ptr17, i32 %j1.1137
  %2 = load volatile float, float* %add.ptr18, align 4, !tbaa !1
  %add.ptr25 = getelementptr inbounds float, float* %add.ptr18, i32 1
  %3 = load volatile float, float* %add.ptr25, align 4, !tbaa !1
  %add.ptr31 = getelementptr inbounds float, float* %add.ptr18, i32 2
  %4 = load volatile float, float* %add.ptr31, align 4, !tbaa !1
  %add.ptr37 = getelementptr inbounds float, float* %add.ptr18, i32 3
  %5 = load volatile float, float* %add.ptr37, align 4, !tbaa !1
  %mul40 = fmul float %1, %2
  %arrayidx41 = getelementptr inbounds [8 x float], [8 x float]* %tot, i32 0, i32 %j1.1137
  %6 = load float, float* %arrayidx41, align 4, !tbaa !1
  %add42 = fadd float %mul40, %6
  store float %add42, float* %arrayidx41, align 4, !tbaa !1
  %mul44 = fmul float %1, %3
  %add45 = or i32 %j1.1137, 1
  %arrayidx46 = getelementptr inbounds [8 x float], [8 x float]* %tot, i32 0, i32 %add45
  %7 = load float, float* %arrayidx46, align 4, !tbaa !1
  %add47 = fadd float %mul44, %7
  store float %add47, float* %arrayidx46, align 4, !tbaa !1
  %mul49 = fmul float %1, %4
  %add50 = or i32 %j1.1137, 2
  %arrayidx51 = getelementptr inbounds [8 x float], [8 x float]* %tot, i32 0, i32 %add50
  %8 = load float, float* %arrayidx51, align 4, !tbaa !1
  %add52 = fadd float %mul49, %8
  store float %add52, float* %arrayidx51, align 4, !tbaa !1
  %mul54 = fmul float %1, %5
  %add55 = or i32 %j1.1137, 3
  %arrayidx56 = getelementptr inbounds [8 x float], [8 x float]* %tot, i32 0, i32 %add55
  %9 = load float, float* %arrayidx56, align 4, !tbaa !1
  %add57 = fadd float %mul54, %9
  store float %add57, float* %arrayidx56, align 4, !tbaa !1
  %add59 = add nuw nsw i32 %j1.1137, 4
  %cmp12 = icmp slt i32 %add59, 8
  br i1 %cmp12, label %for.body13, label %for.end60

for.end60:                                        ; preds = %for.body13
  %inc62 = add nuw nsw i32 %x.0139, 1
  %exitcond = icmp eq i32 %inc62, %NN
  br i1 %exitcond, label %for.cond64.preheader, label %for.body9

for.body66:                                       ; preds = %for.body66, %for.cond64.preheader
  %j1.2140 = phi i32 [ 0, %for.cond64.preheader ], [ %add74, %for.body66 ]
  %arrayidx67 = getelementptr inbounds [8 x float], [8 x float]* %tot, i32 0, i32 %j1.2140
  %10 = load float, float* %arrayidx67, align 4, !tbaa !1
  %add.ptr71 = getelementptr inbounds float, float* %add.ptr70, i32 %j1.2140
  %11 = load volatile float, float* %add.ptr71, align 4, !tbaa !1
  %add72 = fadd float %10, %11
  store volatile float %add72, float* %add.ptr71, align 4, !tbaa !1
  %add74 = add nuw nsw i32 %j1.2140, 1
  %exitcond145 = icmp eq i32 %add74, 8
  br i1 %exitcond145, label %for.end75, label %for.body66

for.end75:                                        ; preds = %for.body66
  call void @llvm.lifetime.end(i64 32, i8* nonnull %0) #3
  %add77 = add nuw nsw i32 %j0.0142, 8
  %cmp2 = icmp slt i32 %add77, %NN
  br i1 %cmp2, label %for.body9.preheader, label %for.end78

for.end78:                                        ; preds = %for.end75
  %inc80 = add nuw nsw i32 %i.0144, 1
  %exitcond146 = icmp eq i32 %inc80, %NN
  br i1 %exitcond146, label %for.end81.loopexit, label %for.body3.lr.ph

for.end81.loopexit:                               ; preds = %for.end78
  br label %for.end81

for.end81:                                        ; preds = %for.end81.loopexit, %entry
  ret void
}
*** IR Dump After Canonicalize natural loops ***
; Function Attrs: nounwind optsize
define hidden void @matmac(float* noalias %aa, float* noalias %bb, float* noalias %cc, i32 %NN) local_unnamed_addr #2 {
entry:
  %tot = alloca [8 x float], align 4
  %0 = bitcast [8 x float]* %tot to i8*
  %cmp143 = icmp sgt i32 %NN, 0
  br i1 %cmp143, label %for.body3.lr.ph.preheader, label %for.end81

for.body3.lr.ph.preheader:                        ; preds = %entry
  br label %for.body3.lr.ph

for.body3.lr.ph:                                  ; preds = %for.end78, %for.body3.lr.ph.preheader
  %i.0144 = phi i32 [ %inc80, %for.end78 ], [ 0, %for.body3.lr.ph.preheader ]
  %mul68 = mul nsw i32 %i.0144, %NN
  %add.ptr69 = getelementptr inbounds float, float* %cc, i32 %mul68
  %add.ptr = getelementptr inbounds float, float* %aa, i32 %mul68
  br label %for.body9.preheader

for.body9.preheader:                              ; preds = %for.end75, %for.body3.lr.ph
  %j0.0142 = phi i32 [ 0, %for.body3.lr.ph ], [ %add77, %for.end75 ]
  call void @llvm.lifetime.start(i64 32, i8* nonnull %0) #3
  call void @llvm.memset.p0i8.i32(i8* nonnull %0, i8 0, i32 32, i32 4, i1 false)
  br label %for.body9

for.cond64.preheader:                             ; preds = %for.end60
  %add.ptr70 = getelementptr inbounds float, float* %add.ptr69, i32 %j0.0142
  br label %for.body66

for.body9:                                        ; preds = %for.end60, %for.body9.preheader
  %x.0139 = phi i32 [ %inc62, %for.end60 ], [ 0, %for.body9.preheader ]
  %add.ptr10 = getelementptr inbounds float, float* %add.ptr, i32 %x.0139
  %1 = load volatile float, float* %add.ptr10, align 4, !tbaa !1
  %mul15 = mul nsw i32 %x.0139, %NN
  %add.ptr16 = getelementptr inbounds float, float* %bb, i32 %mul15
  %add.ptr17 = getelementptr inbounds float, float* %add.ptr16, i32 %j0.0142
  br label %for.body13

for.body13:                                       ; preds = %for.body13, %for.body9
  %j1.1137 = phi i32 [ 0, %for.body9 ], [ %add59, %for.body13 ]
  %add.ptr18 = getelementptr inbounds float, float* %add.ptr17, i32 %j1.1137
  %2 = load volatile float, float* %add.ptr18, align 4, !tbaa !1
  %add.ptr25 = getelementptr inbounds float, float* %add.ptr18, i32 1
  %3 = load volatile float, float* %add.ptr25, align 4, !tbaa !1
  %add.ptr31 = getelementptr inbounds float, float* %add.ptr18, i32 2
  %4 = load volatile float, float* %add.ptr31, align 4, !tbaa !1
  %add.ptr37 = getelementptr inbounds float, float* %add.ptr18, i32 3
  %5 = load volatile float, float* %add.ptr37, align 4, !tbaa !1
  %mul40 = fmul float %1, %2
  %arrayidx41 = getelementptr inbounds [8 x float], [8 x float]* %tot, i32 0, i32 %j1.1137
  %6 = load float, float* %arrayidx41, align 4, !tbaa !1
  %add42 = fadd float %mul40, %6
  store float %add42, float* %arrayidx41, align 4, !tbaa !1
  %mul44 = fmul float %1, %3
  %add45 = or i32 %j1.1137, 1
  %arrayidx46 = getelementptr inbounds [8 x float], [8 x float]* %tot, i32 0, i32 %add45
  %7 = load float, float* %arrayidx46, align 4, !tbaa !1
  %add47 = fadd float %mul44, %7
  store float %add47, float* %arrayidx46, align 4, !tbaa !1
  %mul49 = fmul float %1, %4
  %add50 = or i32 %j1.1137, 2
  %arrayidx51 = getelementptr inbounds [8 x float], [8 x float]* %tot, i32 0, i32 %add50
  %8 = load float, float* %arrayidx51, align 4, !tbaa !1
  %add52 = fadd float %mul49, %8
  store float %add52, float* %arrayidx51, align 4, !tbaa !1
  %mul54 = fmul float %1, %5
  %add55 = or i32 %j1.1137, 3
  %arrayidx56 = getelementptr inbounds [8 x float], [8 x float]* %tot, i32 0, i32 %add55
  %9 = load float, float* %arrayidx56, align 4, !tbaa !1
  %add57 = fadd float %mul54, %9
  store float %add57, float* %arrayidx56, align 4, !tbaa !1
  %add59 = add nuw nsw i32 %j1.1137, 4
  %cmp12 = icmp slt i32 %add59, 8
  br i1 %cmp12, label %for.body13, label %for.end60

for.end60:                                        ; preds = %for.body13
  %inc62 = add nuw nsw i32 %x.0139, 1
  %exitcond = icmp eq i32 %inc62, %NN
  br i1 %exitcond, label %for.cond64.preheader, label %for.body9

for.body66:                                       ; preds = %for.body66, %for.cond64.preheader
  %j1.2140 = phi i32 [ 0, %for.cond64.preheader ], [ %add74, %for.body66 ]
  %arrayidx67 = getelementptr inbounds [8 x float], [8 x float]* %tot, i32 0, i32 %j1.2140
  %10 = load float, float* %arrayidx67, align 4, !tbaa !1
  %add.ptr71 = getelementptr inbounds float, float* %add.ptr70, i32 %j1.2140
  %11 = load volatile float, float* %add.ptr71, align 4, !tbaa !1
  %add72 = fadd float %10, %11
  store volatile float %add72, float* %add.ptr71, align 4, !tbaa !1
  %add74 = add nuw nsw i32 %j1.2140, 1
  %exitcond145 = icmp eq i32 %add74, 8
  br i1 %exitcond145, label %for.end75, label %for.body66

for.end75:                                        ; preds = %for.body66
  call void @llvm.lifetime.end(i64 32, i8* nonnull %0) #3
  %add77 = add nuw nsw i32 %j0.0142, 8
  %cmp2 = icmp slt i32 %add77, %NN
  br i1 %cmp2, label %for.body9.preheader, label %for.end78

for.end78:                                        ; preds = %for.end75
  %inc80 = add nuw nsw i32 %i.0144, 1
  %exitcond146 = icmp eq i32 %inc80, %NN
  br i1 %exitcond146, label %for.end81.loopexit, label %for.body3.lr.ph

for.end81.loopexit:                               ; preds = %for.end78
  br label %for.end81

for.end81:                                        ; preds = %for.end81.loopexit, %entry
  ret void
}
FOUND USER:   %cmp12 = icmp slt i32 %add59, 8
   OF SCEV: {4,+,4}<nuw><nsw><%for.body13>
FOUND USER:   store float %add57, float* %arrayidx56, align 4, !tbaa !1
   OF SCEV: {(12 + %tot)<nsw>,+,16}<nsw><%for.body13>
FOUND USER:   %9 = load float, float* %arrayidx56, align 4, !tbaa !1
   OF SCEV: {(12 + %tot)<nsw>,+,16}<nsw><%for.body13>
FOUND USER:   store float %add52, float* %arrayidx51, align 4, !tbaa !1
   OF SCEV: {(8 + %tot)<nsw>,+,16}<nsw><%for.body13>
FOUND USER:   %8 = load float, float* %arrayidx51, align 4, !tbaa !1
   OF SCEV: {(8 + %tot)<nsw>,+,16}<nsw><%for.body13>
FOUND USER:   store float %add47, float* %arrayidx46, align 4, !tbaa !1
   OF SCEV: {(4 + %tot)<nsw>,+,16}<nsw><%for.body13>
FOUND USER:   %7 = load float, float* %arrayidx46, align 4, !tbaa !1
   OF SCEV: {(4 + %tot)<nsw>,+,16}<nsw><%for.body13>
FOUND USER:   store float %add42, float* %arrayidx41, align 4, !tbaa !1
   OF SCEV: {%tot,+,16}<nsw><%for.body13>
FOUND USER:   %6 = load float, float* %arrayidx41, align 4, !tbaa !1
   OF SCEV: {%tot,+,16}<nsw><%for.body13>
KnuthDiv: m=1 n=3
KnuthDiv: original: 0 4294967295 4294967295 2147483649 0 by 1 0 0
KnuthDiv:   normal: 2147483647 4294967295 3221225472 2147483648 0 by 2147483648 0 0
KnuthDiv: quotient digit #1
KnuthDiv: dividend == 9223372036854775807
KnuthDiv: qp == 4294967295, rp == 2147483647
KnuthDiv: u[j+i] = 2147483648, borrow = 0
KnuthDiv: u[j+i] = 3221225472, borrow = 0
KnuthDiv: u[j+i] = 2147483647, borrow = 2147483647
KnuthDiv: after subtraction: 0 2147483647 3221225472 2147483648 0
KnuthDiv: after correction: 0 2147483647 3221225472 2147483648 0
KnuthDiv: digit result = 4294967295
KnuthDiv: quotient digit #0
KnuthDiv: dividend == 9223372035781033984
KnuthDiv: qp == 4294967295, rp == 1073741824
KnuthDiv: u[j+i] = 0, borrow = 0
KnuthDiv: u[j+i] = 2147483648, borrow = 0
KnuthDiv: u[j+i] = 1073741824, borrow = 2147483647
KnuthDiv: after subtraction: 0 0 1073741824 2147483648 0
KnuthDiv: after correction: 0 0 1073741824 2147483648 0
KnuthDiv: digit result = 4294967295
KnuthDiv: quotient: 4294967295 4294967295
KnuthDiv: remainder: 0 2147483649 0

KnuthDiv: m=1 n=3
KnuthDiv: original: 0 4294967295 4294967295 2147483649 0 by 1 0 0
KnuthDiv:   normal: 2147483647 4294967295 3221225472 2147483648 0 by 2147483648 0 0
KnuthDiv: quotient digit #1
KnuthDiv: dividend == 9223372036854775807
KnuthDiv: qp == 4294967295, rp == 2147483647
KnuthDiv: u[j+i] = 2147483648, borrow = 0
KnuthDiv: u[j+i] = 3221225472, borrow = 0
KnuthDiv: u[j+i] = 2147483647, borrow = 2147483647
KnuthDiv: after subtraction: 0 2147483647 3221225472 2147483648 0
KnuthDiv: after correction: 0 2147483647 3221225472 2147483648 0
KnuthDiv: digit result = 4294967295
KnuthDiv: quotient digit #0
KnuthDiv: dividend == 9223372035781033984
KnuthDiv: qp == 4294967295, rp == 1073741824
KnuthDiv: u[j+i] = 0, borrow = 0
KnuthDiv: u[j+i] = 2147483648, borrow = 0
KnuthDiv: u[j+i] = 1073741824, borrow = 2147483647
KnuthDiv: after subtraction: 0 0 1073741824 2147483648 0
KnuthDiv: after correction: 0 0 1073741824 2147483648 0
KnuthDiv: digit result = 4294967295
KnuthDiv: quotient: 4294967295 4294967295
KnuthDiv: remainder: 0 2147483649 0

KnuthDiv: m=1 n=3
KnuthDiv: original: 0 4294967295 4294967295 2147483649 0 by 1 0 0
KnuthDiv:   normal: 2147483647 4294967295 3221225472 2147483648 0 by 2147483648 0 0
KnuthDiv: quotient digit #1
KnuthDiv: dividend == 9223372036854775807
KnuthDiv: qp == 4294967295, rp == 2147483647
KnuthDiv: u[j+i] = 2147483648, borrow = 0
KnuthDiv: u[j+i] = 3221225472, borrow = 0
KnuthDiv: u[j+i] = 2147483647, borrow = 2147483647
KnuthDiv: after subtraction: 0 2147483647 3221225472 2147483648 0
KnuthDiv: after correction: 0 2147483647 3221225472 2147483648 0
KnuthDiv: digit result = 4294967295
KnuthDiv: quotient digit #0
KnuthDiv: dividend == 9223372035781033984
KnuthDiv: qp == 4294967295, rp == 1073741824
KnuthDiv: u[j+i] = 0, borrow = 0
KnuthDiv: u[j+i] = 2147483648, borrow = 0
KnuthDiv: u[j+i] = 1073741824, borrow = 2147483647
KnuthDiv: after subtraction: 0 0 1073741824 2147483648 0
KnuthDiv: after correction: 0 0 1073741824 2147483648 0
KnuthDiv: digit result = 4294967295
KnuthDiv: quotient: 4294967295 4294967295
KnuthDiv: remainder: 0 2147483649 0

KnuthDiv: m=1 n=3
KnuthDiv: original: 0 4294967295 4294967295 2147483649 0 by 1 0 0
KnuthDiv:   normal: 2147483647 4294967295 3221225472 2147483648 0 by 2147483648 0 0
KnuthDiv: quotient digit #1
KnuthDiv: dividend == 9223372036854775807
KnuthDiv: qp == 4294967295, rp == 2147483647
KnuthDiv: u[j+i] = 2147483648, borrow = 0
KnuthDiv: u[j+i] = 3221225472, borrow = 0
KnuthDiv: u[j+i] = 2147483647, borrow = 2147483647
KnuthDiv: after subtraction: 0 2147483647 3221225472 2147483648 0
KnuthDiv: after correction: 0 2147483647 3221225472 2147483648 0
KnuthDiv: digit result = 4294967295
KnuthDiv: quotient digit #0
KnuthDiv: dividend == 9223372035781033984
KnuthDiv: qp == 4294967295, rp == 1073741824
KnuthDiv: u[j+i] = 0, borrow = 0
KnuthDiv: u[j+i] = 2147483648, borrow = 0
KnuthDiv: u[j+i] = 1073741824, borrow = 2147483647
KnuthDiv: after subtraction: 0 0 1073741824 2147483648 0
KnuthDiv: after correction: 0 0 1073741824 2147483648 0
KnuthDiv: digit result = 4294967295
KnuthDiv: quotient: 4294967295 4294967295
KnuthDiv: remainder: 0 2147483649 0

KnuthDiv: m=1 n=3
KnuthDiv: original: 0 4294967295 4294967295 2147483649 0 by 1 0 0
KnuthDiv:   normal: 2147483647 4294967295 3221225472 2147483648 0 by 2147483648 0 0
KnuthDiv: quotient digit #1
KnuthDiv: dividend == 9223372036854775807
KnuthDiv: qp == 4294967295, rp == 2147483647
KnuthDiv: u[j+i] = 2147483648, borrow = 0
KnuthDiv: u[j+i] = 3221225472, borrow = 0
KnuthDiv: u[j+i] = 2147483647, borrow = 2147483647
KnuthDiv: after subtraction: 0 2147483647 3221225472 2147483648 0
KnuthDiv: after correction: 0 2147483647 3221225472 2147483648 0
KnuthDiv: digit result = 4294967295
KnuthDiv: quotient digit #0
KnuthDiv: dividend == 9223372035781033984
KnuthDiv: qp == 4294967295, rp == 1073741824
KnuthDiv: u[j+i] = 0, borrow = 0
KnuthDiv: u[j+i] = 2147483648, borrow = 0
KnuthDiv: u[j+i] = 1073741824, borrow = 2147483647
KnuthDiv: after subtraction: 0 0 1073741824 2147483648 0
KnuthDiv: after correction: 0 0 1073741824 2147483648 0
KnuthDiv: digit result = 4294967295
KnuthDiv: quotient: 4294967295 4294967295
KnuthDiv: remainder: 0 2147483649 0

KnuthDiv: m=1 n=3
KnuthDiv: original: 0 4294967295 4294967295 2147483649 0 by 1 0 0
KnuthDiv:   normal: 2147483647 4294967295 3221225472 2147483648 0 by 2147483648 0 0
KnuthDiv: quotient digit #1
KnuthDiv: dividend == 9223372036854775807
KnuthDiv: qp == 4294967295, rp == 2147483647
KnuthDiv: u[j+i] = 2147483648, borrow = 0
KnuthDiv: u[j+i] = 3221225472, borrow = 0
KnuthDiv: u[j+i] = 2147483647, borrow = 2147483647
KnuthDiv: after subtraction: 0 2147483647 3221225472 2147483648 0
KnuthDiv: after correction: 0 2147483647 3221225472 2147483648 0
KnuthDiv: digit result = 4294967295
KnuthDiv: quotient digit #0
KnuthDiv: dividend == 9223372035781033984
KnuthDiv: qp == 4294967295, rp == 1073741824
KnuthDiv: u[j+i] = 0, borrow = 0
KnuthDiv: u[j+i] = 2147483648, borrow = 0
KnuthDiv: u[j+i] = 1073741824, borrow = 2147483647
KnuthDiv: after subtraction: 0 0 1073741824 2147483648 0
KnuthDiv: after correction: 0 0 1073741824 2147483648 0
KnuthDiv: digit result = 4294967295
KnuthDiv: quotient: 4294967295 4294967295
KnuthDiv: remainder: 0 2147483649 0

KnuthDiv: m=1 n=3
KnuthDiv: original: 0 4294967295 4294967295 2147483649 0 by 1 0 0
KnuthDiv:   normal: 2147483647 4294967295 3221225472 2147483648 0 by 2147483648 0 0
KnuthDiv: quotient digit #1
KnuthDiv: dividend == 9223372036854775807
KnuthDiv: qp == 4294967295, rp == 2147483647
KnuthDiv: u[j+i] = 2147483648, borrow = 0
KnuthDiv: u[j+i] = 3221225472, borrow = 0
KnuthDiv: u[j+i] = 2147483647, borrow = 2147483647
KnuthDiv: after subtraction: 0 2147483647 3221225472 2147483648 0
KnuthDiv: after correction: 0 2147483647 3221225472 2147483648 0
KnuthDiv: digit result = 4294967295
KnuthDiv: quotient digit #0
KnuthDiv: dividend == 9223372035781033984
KnuthDiv: qp == 4294967295, rp == 1073741824
KnuthDiv: u[j+i] = 0, borrow = 0
KnuthDiv: u[j+i] = 2147483648, borrow = 0
KnuthDiv: u[j+i] = 1073741824, borrow = 2147483647
KnuthDiv: after subtraction: 0 0 1073741824 2147483648 0
KnuthDiv: after correction: 0 0 1073741824 2147483648 0
KnuthDiv: digit result = 4294967295
KnuthDiv: quotient: 4294967295 4294967295
KnuthDiv: remainder: 0 2147483649 0

KnuthDiv: m=1 n=3
KnuthDiv: original: 0 4294967295 4294967295 2147483649 0 by 1 0 0
KnuthDiv:   normal: 2147483647 4294967295 3221225472 2147483648 0 by 2147483648 0 0
KnuthDiv: quotient digit #1
KnuthDiv: dividend == 9223372036854775807
KnuthDiv: qp == 4294967295, rp == 2147483647
KnuthDiv: u[j+i] = 2147483648, borrow = 0
KnuthDiv: u[j+i] = 3221225472, borrow = 0
KnuthDiv: u[j+i] = 2147483647, borrow = 2147483647
KnuthDiv: after subtraction: 0 2147483647 3221225472 2147483648 0
KnuthDiv: after correction: 0 2147483647 3221225472 2147483648 0
KnuthDiv: digit result = 4294967295
KnuthDiv: quotient digit #0
KnuthDiv: dividend == 9223372035781033984
KnuthDiv: qp == 4294967295, rp == 1073741824
KnuthDiv: u[j+i] = 0, borrow = 0
KnuthDiv: u[j+i] = 2147483648, borrow = 0
KnuthDiv: u[j+i] = 1073741824, borrow = 2147483647
KnuthDiv: after subtraction: 0 0 1073741824 2147483648 0
KnuthDiv: after correction: 0 0 1073741824 2147483648 0
KnuthDiv: digit result = 4294967295
KnuthDiv: quotient: 4294967295 4294967295
KnuthDiv: remainder: 0 2147483649 0

KnuthDiv: m=1 n=3
KnuthDiv: original: 0 4294967295 4294967295 2147483649 0 by 1 0 0
KnuthDiv:   normal: 2147483647 4294967295 3221225472 2147483648 0 by 2147483648 0 0
KnuthDiv: quotient digit #1
KnuthDiv: dividend == 9223372036854775807
KnuthDiv: qp == 4294967295, rp == 2147483647
KnuthDiv: u[j+i] = 2147483648, borrow = 0
KnuthDiv: u[j+i] = 3221225472, borrow = 0
KnuthDiv: u[j+i] = 2147483647, borrow = 2147483647
KnuthDiv: after subtraction: 0 2147483647 3221225472 2147483648 0
KnuthDiv: after correction: 0 2147483647 3221225472 2147483648 0
KnuthDiv: digit result = 4294967295
KnuthDiv: quotient digit #0
KnuthDiv: dividend == 9223372035781033984
KnuthDiv: qp == 4294967295, rp == 1073741824
KnuthDiv: u[j+i] = 0, borrow = 0
KnuthDiv: u[j+i] = 2147483648, borrow = 0
KnuthDiv: u[j+i] = 1073741824, borrow = 2147483647
KnuthDiv: after subtraction: 0 0 1073741824 2147483648 0
KnuthDiv: after correction: 0 0 1073741824 2147483648 0
KnuthDiv: digit result = 4294967295
KnuthDiv: quotient: 4294967295 4294967295
KnuthDiv: remainder: 0 2147483649 0

KnuthDiv: m=1 n=3
KnuthDiv: original: 0 4294967295 4294967295 2147483649 0 by 1 0 0
KnuthDiv:   normal: 2147483647 4294967295 3221225472 2147483648 0 by 2147483648 0 0
KnuthDiv: quotient digit #1
KnuthDiv: dividend == 9223372036854775807
KnuthDiv: qp == 4294967295, rp == 2147483647
KnuthDiv: u[j+i] = 2147483648, borrow = 0
KnuthDiv: u[j+i] = 3221225472, borrow = 0
KnuthDiv: u[j+i] = 2147483647, borrow = 2147483647
KnuthDiv: after subtraction: 0 2147483647 3221225472 2147483648 0
KnuthDiv: after correction: 0 2147483647 3221225472 2147483648 0
KnuthDiv: digit result = 4294967295
KnuthDiv: quotient digit #0
KnuthDiv: dividend == 9223372035781033984
KnuthDiv: qp == 4294967295, rp == 1073741824
KnuthDiv: u[j+i] = 0, borrow = 0
KnuthDiv: u[j+i] = 2147483648, borrow = 0
KnuthDiv: u[j+i] = 1073741824, borrow = 2147483647
KnuthDiv: after subtraction: 0 0 1073741824 2147483648 0
KnuthDiv: after correction: 0 0 1073741824 2147483648 0
KnuthDiv: digit result = 4294967295
KnuthDiv: quotient: 4294967295 4294967295
KnuthDiv: remainder: 0 2147483649 0

KnuthDiv: m=1 n=3
KnuthDiv: original: 0 4294967295 4294967295 2147483649 0 by 1 0 0
KnuthDiv:   normal: 2147483647 4294967295 3221225472 2147483648 0 by 2147483648 0 0
KnuthDiv: quotient digit #1
KnuthDiv: dividend == 9223372036854775807
KnuthDiv: qp == 4294967295, rp == 2147483647
KnuthDiv: u[j+i] = 2147483648, borrow = 0
KnuthDiv: u[j+i] = 3221225472, borrow = 0
KnuthDiv: u[j+i] = 2147483647, borrow = 2147483647
KnuthDiv: after subtraction: 0 2147483647 3221225472 2147483648 0
KnuthDiv: after correction: 0 2147483647 3221225472 2147483648 0
KnuthDiv: digit result = 4294967295
KnuthDiv: quotient digit #0
KnuthDiv: dividend == 9223372035781033984
KnuthDiv: qp == 4294967295, rp == 1073741824
KnuthDiv: u[j+i] = 0, borrow = 0
KnuthDiv: u[j+i] = 2147483648, borrow = 0
KnuthDiv: u[j+i] = 1073741824, borrow = 2147483647
KnuthDiv: after subtraction: 0 0 1073741824 2147483648 0
KnuthDiv: after correction: 0 0 1073741824 2147483648 0
KnuthDiv: digit result = 4294967295
KnuthDiv: quotient: 4294967295 4294967295
KnuthDiv: remainder: 0 2147483649 0

KnuthDiv: m=1 n=3
KnuthDiv: original: 0 4294967295 4294967295 2147483649 0 by 1 0 0
KnuthDiv:   normal: 2147483647 4294967295 3221225472 2147483648 0 by 2147483648 0 0
KnuthDiv: quotient digit #1
KnuthDiv: dividend == 9223372036854775807
KnuthDiv: qp == 4294967295, rp == 2147483647
KnuthDiv: u[j+i] = 2147483648, borrow = 0
KnuthDiv: u[j+i] = 3221225472, borrow = 0
KnuthDiv: u[j+i] = 2147483647, borrow = 2147483647
KnuthDiv: after subtraction: 0 2147483647 3221225472 2147483648 0
KnuthDiv: after correction: 0 2147483647 3221225472 2147483648 0
KnuthDiv: digit result = 4294967295
KnuthDiv: quotient digit #0
KnuthDiv: dividend == 9223372035781033984
KnuthDiv: qp == 4294967295, rp == 1073741824
KnuthDiv: u[j+i] = 0, borrow = 0
KnuthDiv: u[j+i] = 2147483648, borrow = 0
KnuthDiv: u[j+i] = 1073741824, borrow = 2147483647
KnuthDiv: after subtraction: 0 0 1073741824 2147483648 0
KnuthDiv: after correction: 0 0 1073741824 2147483648 0
KnuthDiv: digit result = 4294967295
KnuthDiv: quotient: 4294967295 4294967295
KnuthDiv: remainder: 0 2147483649 0

KnuthDiv: m=1 n=3
KnuthDiv: original: 0 4294967295 4294967295 2147483649 0 by 1 0 0
KnuthDiv:   normal: 2147483647 4294967295 3221225472 2147483648 0 by 2147483648 0 0
KnuthDiv: quotient digit #1
KnuthDiv: dividend == 9223372036854775807
KnuthDiv: qp == 4294967295, rp == 2147483647
KnuthDiv: u[j+i] = 2147483648, borrow = 0
KnuthDiv: u[j+i] = 3221225472, borrow = 0
KnuthDiv: u[j+i] = 2147483647, borrow = 2147483647
KnuthDiv: after subtraction: 0 2147483647 3221225472 2147483648 0
KnuthDiv: after correction: 0 2147483647 3221225472 2147483648 0
KnuthDiv: digit result = 4294967295
KnuthDiv: quotient digit #0
KnuthDiv: dividend == 9223372035781033984
KnuthDiv: qp == 4294967295, rp == 1073741824
KnuthDiv: u[j+i] = 0, borrow = 0
KnuthDiv: u[j+i] = 2147483648, borrow = 0
KnuthDiv: u[j+i] = 1073741824, borrow = 2147483647
KnuthDiv: after subtraction: 0 0 1073741824 2147483648 0
KnuthDiv: after correction: 0 0 1073741824 2147483648 0
KnuthDiv: digit result = 4294967295
KnuthDiv: quotient: 4294967295 4294967295
KnuthDiv: remainder: 0 2147483649 0

KnuthDiv: m=1 n=3
KnuthDiv: original: 0 4294967295 4294967295 2147483649 0 by 1 0 0
KnuthDiv:   normal: 2147483647 4294967295 3221225472 2147483648 0 by 2147483648 0 0
KnuthDiv: quotient digit #1
KnuthDiv: dividend == 9223372036854775807
KnuthDiv: qp == 4294967295, rp == 2147483647
KnuthDiv: u[j+i] = 2147483648, borrow = 0
KnuthDiv: u[j+i] = 3221225472, borrow = 0
KnuthDiv: u[j+i] = 2147483647, borrow = 2147483647
KnuthDiv: after subtraction: 0 2147483647 3221225472 2147483648 0
KnuthDiv: after correction: 0 2147483647 3221225472 2147483648 0
KnuthDiv: digit result = 4294967295
KnuthDiv: quotient digit #0
KnuthDiv: dividend == 9223372035781033984
KnuthDiv: qp == 4294967295, rp == 1073741824
KnuthDiv: u[j+i] = 0, borrow = 0
KnuthDiv: u[j+i] = 2147483648, borrow = 0
KnuthDiv: u[j+i] = 1073741824, borrow = 2147483647
KnuthDiv: after subtraction: 0 0 1073741824 2147483648 0
KnuthDiv: after correction: 0 0 1073741824 2147483648 0
KnuthDiv: digit result = 4294967295
KnuthDiv: quotient: 4294967295 4294967295
KnuthDiv: remainder: 0 2147483649 0

FOUND USER:   %5 = load volatile float, float* %add.ptr37, align 4, !tbaa !1
   OF SCEV: {{{(12 + %bb)<nsw>,+,32}<nsw><%for.body9.preheader>,+,(4 * %NN)}<%for.body9>,+,16}<nsw><%for.body13>
KnuthDiv: m=1 n=3
KnuthDiv: original: 0 4294967295 4294967295 2147483649 0 by 1 0 0
KnuthDiv:   normal: 2147483647 4294967295 3221225472 2147483648 0 by 2147483648 0 0
KnuthDiv: quotient digit #1
KnuthDiv: dividend == 9223372036854775807
KnuthDiv: qp == 4294967295, rp == 2147483647
KnuthDiv: u[j+i] = 2147483648, borrow = 0
KnuthDiv: u[j+i] = 3221225472, borrow = 0
KnuthDiv: u[j+i] = 2147483647, borrow = 2147483647
KnuthDiv: after subtraction: 0 2147483647 3221225472 2147483648 0
KnuthDiv: after correction: 0 2147483647 3221225472 2147483648 0
KnuthDiv: digit result = 4294967295
KnuthDiv: quotient digit #0
KnuthDiv: dividend == 9223372035781033984
KnuthDiv: qp == 4294967295, rp == 1073741824
KnuthDiv: u[j+i] = 0, borrow = 0
KnuthDiv: u[j+i] = 2147483648, borrow = 0
KnuthDiv: u[j+i] = 1073741824, borrow = 2147483647
KnuthDiv: after subtraction: 0 0 1073741824 2147483648 0
KnuthDiv: after correction: 0 0 1073741824 2147483648 0
KnuthDiv: digit result = 4294967295
KnuthDiv: quotient: 4294967295 4294967295
KnuthDiv: remainder: 0 2147483649 0

KnuthDiv: m=1 n=3
KnuthDiv: original: 0 4294967295 4294967295 2147483649 0 by 1 0 0
KnuthDiv:   normal: 2147483647 4294967295 3221225472 2147483648 0 by 2147483648 0 0
KnuthDiv: quotient digit #1
KnuthDiv: dividend == 9223372036854775807
KnuthDiv: qp == 4294967295, rp == 2147483647
KnuthDiv: u[j+i] = 2147483648, borrow = 0
KnuthDiv: u[j+i] = 3221225472, borrow = 0
KnuthDiv: u[j+i] = 2147483647, borrow = 2147483647
KnuthDiv: after subtraction: 0 2147483647 3221225472 2147483648 0
KnuthDiv: after correction: 0 2147483647 3221225472 2147483648 0
KnuthDiv: digit result = 4294967295
KnuthDiv: quotient digit #0
KnuthDiv: dividend == 9223372035781033984
KnuthDiv: qp == 4294967295, rp == 1073741824
KnuthDiv: u[j+i] = 0, borrow = 0
KnuthDiv: u[j+i] = 2147483648, borrow = 0
KnuthDiv: u[j+i] = 1073741824, borrow = 2147483647
KnuthDiv: after subtraction: 0 0 1073741824 2147483648 0
KnuthDiv: after correction: 0 0 1073741824 2147483648 0
KnuthDiv: digit result = 4294967295
KnuthDiv: quotient: 4294967295 4294967295
KnuthDiv: remainder: 0 2147483649 0

FOUND USER:   %4 = load volatile float, float* %add.ptr31, align 4, !tbaa !1
   OF SCEV: {{{(8 + %bb)<nsw>,+,32}<nsw><%for.body9.preheader>,+,(4 * %NN)}<%for.body9>,+,16}<nsw><%for.body13>
KnuthDiv: m=1 n=3
KnuthDiv: original: 0 4294967295 4294967295 2147483649 0 by 1 0 0
KnuthDiv:   normal: 2147483647 4294967295 3221225472 2147483648 0 by 2147483648 0 0
KnuthDiv: quotient digit #1
KnuthDiv: dividend == 9223372036854775807
KnuthDiv: qp == 4294967295, rp == 2147483647
KnuthDiv: u[j+i] = 2147483648, borrow = 0
KnuthDiv: u[j+i] = 3221225472, borrow = 0
KnuthDiv: u[j+i] = 2147483647, borrow = 2147483647
KnuthDiv: after subtraction: 0 2147483647 3221225472 2147483648 0
KnuthDiv: after correction: 0 2147483647 3221225472 2147483648 0
KnuthDiv: digit result = 4294967295
KnuthDiv: quotient digit #0
KnuthDiv: dividend == 9223372035781033984
KnuthDiv: qp == 4294967295, rp == 1073741824
KnuthDiv: u[j+i] = 0, borrow = 0
KnuthDiv: u[j+i] = 2147483648, borrow = 0
KnuthDiv: u[j+i] = 1073741824, borrow = 2147483647
KnuthDiv: after subtraction: 0 0 1073741824 2147483648 0
KnuthDiv: after correction: 0 0 1073741824 2147483648 0
KnuthDiv: digit result = 4294967295
KnuthDiv: quotient: 4294967295 4294967295
KnuthDiv: remainder: 0 2147483649 0

KnuthDiv: m=1 n=3
KnuthDiv: original: 0 4294967295 4294967295 2147483649 0 by 1 0 0
KnuthDiv:   normal: 2147483647 4294967295 3221225472 2147483648 0 by 2147483648 0 0
KnuthDiv: quotient digit #1
KnuthDiv: dividend == 9223372036854775807
KnuthDiv: qp == 4294967295, rp == 2147483647
KnuthDiv: u[j+i] = 2147483648, borrow = 0
KnuthDiv: u[j+i] = 3221225472, borrow = 0
KnuthDiv: u[j+i] = 2147483647, borrow = 2147483647
KnuthDiv: after subtraction: 0 2147483647 3221225472 2147483648 0
KnuthDiv: after correction: 0 2147483647 3221225472 2147483648 0
KnuthDiv: digit result = 4294967295
KnuthDiv: quotient digit #0
KnuthDiv: dividend == 9223372035781033984
KnuthDiv: qp == 4294967295, rp == 1073741824
KnuthDiv: u[j+i] = 0, borrow = 0
KnuthDiv: u[j+i] = 2147483648, borrow = 0
KnuthDiv: u[j+i] = 1073741824, borrow = 2147483647
KnuthDiv: after subtraction: 0 0 1073741824 2147483648 0
KnuthDiv: after correction: 0 0 1073741824 2147483648 0
KnuthDiv: digit result = 4294967295
KnuthDiv: quotient: 4294967295 4294967295
KnuthDiv: remainder: 0 2147483649 0

FOUND USER:   %3 = load volatile float, float* %add.ptr25, align 4, !tbaa !1
   OF SCEV: {{{(4 + %bb)<nsw>,+,32}<nsw><%for.body9.preheader>,+,(4 * %NN)}<%for.body9>,+,16}<nsw><%for.body13>
FOUND USER:   %2 = load volatile float, float* %add.ptr18, align 4, !tbaa !1
   OF SCEV: {{{%bb,+,32}<nsw><%for.body9.preheader>,+,(4 * %NN)}<%for.body9>,+,16}<nsw><%for.body13>
*** IR Dump Before Loop Strength Reduction ***
for.body13:                                       ; preds = %for.body13, %for.body9
  %j1.1137 = phi i32 [ 0, %for.body9 ], [ %add59, %for.body13 ]
  %add.ptr18 = getelementptr inbounds float, float* %add.ptr17, i32 %j1.1137
  %2 = load volatile float, float* %add.ptr18, align 4, !tbaa !1
  %add.ptr25 = getelementptr inbounds float, float* %add.ptr18, i32 1
  %3 = load volatile float, float* %add.ptr25, align 4, !tbaa !1
  %add.ptr31 = getelementptr inbounds float, float* %add.ptr18, i32 2
  %4 = load volatile float, float* %add.ptr31, align 4, !tbaa !1
  %add.ptr37 = getelementptr inbounds float, float* %add.ptr18, i32 3
  %5 = load volatile float, float* %add.ptr37, align 4, !tbaa !1
  %mul40 = fmul float %1, %2
  %arrayidx41 = getelementptr inbounds [8 x float], [8 x float]* %tot, i32 0, i32 %j1.1137
  %6 = load float, float* %arrayidx41, align 4, !tbaa !1
  %add42 = fadd float %mul40, %6
  store float %add42, float* %arrayidx41, align 4, !tbaa !1
  %mul44 = fmul float %1, %3
  %add45 = or i32 %j1.1137, 1
  %arrayidx46 = getelementptr inbounds [8 x float], [8 x float]* %tot, i32 0, i32 %add45
  %7 = load float, float* %arrayidx46, align 4, !tbaa !1
  %add47 = fadd float %mul44, %7
  store float %add47, float* %arrayidx46, align 4, !tbaa !1
  %mul49 = fmul float %1, %4
  %add50 = or i32 %j1.1137, 2
  %arrayidx51 = getelementptr inbounds [8 x float], [8 x float]* %tot, i32 0, i32 %add50
  %8 = load float, float* %arrayidx51, align 4, !tbaa !1
  %add52 = fadd float %mul49, %8
  store float %add52, float* %arrayidx51, align 4, !tbaa !1
  %mul54 = fmul float %1, %5
  %add55 = or i32 %j1.1137, 3
  %arrayidx56 = getelementptr inbounds [8 x float], [8 x float]* %tot, i32 0, i32 %add55
  %9 = load float, float* %arrayidx56, align 4, !tbaa !1
  %add57 = fadd float %mul54, %9
  store float %add57, float* %arrayidx56, align 4, !tbaa !1
  %add59 = add nuw nsw i32 %j1.1137, 4
  %cmp12 = icmp slt i32 %add59, 8
  br i1 %cmp12, label %for.body13, label %for.end60

LSR on loop %for.body13:
  Change loop exiting icmp to use postinc iv:   %cmp12 = icmp slt i32 %add59, 8
Collecting IV Chains.
IV Chain#0 Head: (  %2 = load volatile float, float* %add.ptr18, align 4, !tbaa !1) IV={{{%bb,+,32}<nsw><%for.body9.preheader>,+,(4 * %NN)}<%for.body9>,+,16}<nsw><%for.body13>
IV Chain#0  Inc: (  %3 = load volatile float, float* %add.ptr25, align 4, !tbaa !1) IV+4
KnuthDiv: m=1 n=3
KnuthDiv: original: 0 4294967295 4294967295 2147483649 0 by 1 0 0
KnuthDiv:   normal: 2147483647 4294967295 3221225472 2147483648 0 by 2147483648 0 0
KnuthDiv: quotient digit #1
KnuthDiv: dividend == 9223372036854775807
KnuthDiv: qp == 4294967295, rp == 2147483647
KnuthDiv: u[j+i] = 2147483648, borrow = 0
KnuthDiv: u[j+i] = 3221225472, borrow = 0
KnuthDiv: u[j+i] = 2147483647, borrow = 2147483647
KnuthDiv: after subtraction: 0 2147483647 3221225472 2147483648 0
KnuthDiv: after correction: 0 2147483647 3221225472 2147483648 0
KnuthDiv: digit result = 4294967295
KnuthDiv: quotient digit #0
KnuthDiv: dividend == 9223372035781033984
KnuthDiv: qp == 4294967295, rp == 1073741824
KnuthDiv: u[j+i] = 0, borrow = 0
KnuthDiv: u[j+i] = 2147483648, borrow = 0
KnuthDiv: u[j+i] = 1073741824, borrow = 2147483647
KnuthDiv: after subtraction: 0 0 1073741824 2147483648 0
KnuthDiv: after correction: 0 0 1073741824 2147483648 0
KnuthDiv: digit result = 4294967295
KnuthDiv: quotient: 4294967295 4294967295
KnuthDiv: remainder: 0 2147483649 0

KnuthDiv: m=1 n=3
KnuthDiv: original: 0 4294967295 4294967295 2147483649 0 by 1 0 0
KnuthDiv:   normal: 2147483647 4294967295 3221225472 2147483648 0 by 2147483648 0 0
KnuthDiv: quotient digit #1
KnuthDiv: dividend == 9223372036854775807
KnuthDiv: qp == 4294967295, rp == 2147483647
KnuthDiv: u[j+i] = 2147483648, borrow = 0
KnuthDiv: u[j+i] = 3221225472, borrow = 0
KnuthDiv: u[j+i] = 2147483647, borrow = 2147483647
KnuthDiv: after subtraction: 0 2147483647 3221225472 2147483648 0
KnuthDiv: after correction: 0 2147483647 3221225472 2147483648 0
KnuthDiv: digit result = 4294967295
KnuthDiv: quotient digit #0
KnuthDiv: dividend == 9223372035781033984
KnuthDiv: qp == 4294967295, rp == 1073741824
KnuthDiv: u[j+i] = 0, borrow = 0
KnuthDiv: u[j+i] = 2147483648, borrow = 0
KnuthDiv: u[j+i] = 1073741824, borrow = 2147483647
KnuthDiv: after subtraction: 0 0 1073741824 2147483648 0
KnuthDiv: after correction: 0 0 1073741824 2147483648 0
KnuthDiv: digit result = 4294967295
KnuthDiv: quotient: 4294967295 4294967295
KnuthDiv: remainder: 0 2147483649 0

IV Chain#0  Inc: (  %4 = load volatile float, float* %add.ptr31, align 4, !tbaa !1) IV+4
KnuthDiv: m=1 n=3
KnuthDiv: original: 0 4294967295 4294967295 2147483649 0 by 1 0 0
KnuthDiv:   normal: 2147483647 4294967295 3221225472 2147483648 0 by 2147483648 0 0
KnuthDiv: quotient digit #1
KnuthDiv: dividend == 9223372036854775807
KnuthDiv: qp == 4294967295, rp == 2147483647
KnuthDiv: u[j+i] = 2147483648, borrow = 0
KnuthDiv: u[j+i] = 3221225472, borrow = 0
KnuthDiv: u[j+i] = 2147483647, borrow = 2147483647
KnuthDiv: after subtraction: 0 2147483647 3221225472 2147483648 0
KnuthDiv: after correction: 0 2147483647 3221225472 2147483648 0
KnuthDiv: digit result = 4294967295
KnuthDiv: quotient digit #0
KnuthDiv: dividend == 9223372035781033984
KnuthDiv: qp == 4294967295, rp == 1073741824
KnuthDiv: u[j+i] = 0, borrow = 0
KnuthDiv: u[j+i] = 2147483648, borrow = 0
KnuthDiv: u[j+i] = 1073741824, borrow = 2147483647
KnuthDiv: after subtraction: 0 0 1073741824 2147483648 0
KnuthDiv: after correction: 0 0 1073741824 2147483648 0
KnuthDiv: digit result = 4294967295
KnuthDiv: quotient: 4294967295 4294967295
KnuthDiv: remainder: 0 2147483649 0

KnuthDiv: m=1 n=3
KnuthDiv: original: 0 4294967295 4294967295 2147483649 0 by 1 0 0
KnuthDiv:   normal: 2147483647 4294967295 3221225472 2147483648 0 by 2147483648 0 0
KnuthDiv: quotient digit #1
KnuthDiv: dividend == 9223372036854775807
KnuthDiv: qp == 4294967295, rp == 2147483647
KnuthDiv: u[j+i] = 2147483648, borrow = 0
KnuthDiv: u[j+i] = 3221225472, borrow = 0
KnuthDiv: u[j+i] = 2147483647, borrow = 2147483647
KnuthDiv: after subtraction: 0 2147483647 3221225472 2147483648 0
KnuthDiv: after correction: 0 2147483647 3221225472 2147483648 0
KnuthDiv: digit result = 4294967295
KnuthDiv: quotient digit #0
KnuthDiv: dividend == 9223372035781033984
KnuthDiv: qp == 4294967295, rp == 1073741824
KnuthDiv: u[j+i] = 0, borrow = 0
KnuthDiv: u[j+i] = 2147483648, borrow = 0
KnuthDiv: u[j+i] = 1073741824, borrow = 2147483647
KnuthDiv: after subtraction: 0 0 1073741824 2147483648 0
KnuthDiv: after correction: 0 0 1073741824 2147483648 0
KnuthDiv: digit result = 4294967295
KnuthDiv: quotient: 4294967295 4294967295
KnuthDiv: remainder: 0 2147483649 0

IV Chain#0  Inc: (  %5 = load volatile float, float* %add.ptr37, align 4, !tbaa !1) IV+4
IV Chain#1 Head: (  %6 = load float, float* %arrayidx41, align 4, !tbaa !1) IV={%tot,+,16}<nsw><%for.body13>
IV Chain#1  Inc: (  store float %add42, float* %arrayidx41, align 4, !tbaa !1) IV+0
IV Chain#1  Inc: (  %7 = load float, float* %arrayidx46, align 4, !tbaa !1) IV+4
IV Chain#1  Inc: (  store float %add47, float* %arrayidx46, align 4, !tbaa !1) IV+0
IV Chain#1  Inc: (  %8 = load float, float* %arrayidx51, align 4, !tbaa !1) IV+4
IV Chain#1  Inc: (  store float %add52, float* %arrayidx51, align 4, !tbaa !1) IV+0
IV Chain#1  Inc: (  %9 = load float, float* %arrayidx56, align 4, !tbaa !1) IV+4
IV Chain#1  Inc: (  store float %add57, float* %arrayidx56, align 4, !tbaa !1) IV+0
IV Chain#2 Head: (  %cmp12 = icmp slt i32 %add59, 8) IV={4,+,4}<nuw><nsw><%for.body13>
IV Chain#2  Inc: (  %j1.1137 = phi i32 [ 0, %for.body9 ], [ %add59, %for.body13 ]) IV+0
Chain:   %2 = load volatile float, float* %add.ptr18, align 4, !tbaa !1 Cost: 0
Chain:   %6 = load float, float* %arrayidx41, align 4, !tbaa !1 Cost: 0
Chain:   %cmp12 = icmp slt i32 %add59, 8 Cost: 1
LSR has identified the following interesting factors and types: *4
LSR is examining the following fixup sites:
  UserInst=%cmp12, OperandValToReplace=%add59, PostIncLoop=%for.body13
  UserInst=store %add57, OperandValToReplace=%arrayidx56
  UserInst=%9, OperandValToReplace=%arrayidx56
  UserInst=store %add52, OperandValToReplace=%arrayidx51
  UserInst=%8, OperandValToReplace=%arrayidx51
  UserInst=store %add47, OperandValToReplace=%arrayidx46
  UserInst=%7, OperandValToReplace=%arrayidx46
  UserInst=store %add42, OperandValToReplace=%arrayidx41
  UserInst=%6, OperandValToReplace=%arrayidx41
  UserInst=%5, OperandValToReplace=%add.ptr37
  UserInst=%4, OperandValToReplace=%add.ptr31
  UserInst=%3, OperandValToReplace=%add.ptr25
  UserInst=%2, OperandValToReplace=%add.ptr18
LSR found 10 uses:
LSR is examining the following uses:
  LSR Use: Kind=Basic, Offsets={0}, widest fixup type: i32
    reg({0,+,4}<nuw><nsw><%for.body13>)
  LSR Use: Kind=Address of float in addrspace(0), Offsets={0,0}, widest fixup type: float*
    reg({(12 + %tot)<nsw>,+,16}<nsw><%for.body13>)
  LSR Use: Kind=Address of float in addrspace(0), Offsets={0,0}, widest fixup type: float*
    reg({(8 + %tot)<nsw>,+,16}<nsw><%for.body13>)
  LSR Use: Kind=Address of float in addrspace(0), Offsets={0,0}, widest fixup type: float*
    reg({(4 + %tot)<nsw>,+,16}<nsw><%for.body13>)
  LSR Use: Kind=Address of float in addrspace(0), Offsets={0,0}, widest fixup type: float*
    reg({%tot,+,16}<nsw><%for.body13>)
  LSR Use: Kind=Address of float in addrspace(0), Offsets={0}, widest fixup type: float*
    reg({{{(12 + %bb)<nsw>,+,32}<nsw><%for.body9.preheader>,+,(4 * %NN)}<%for.body9>,+,16}<nsw><%for.body13>)
  LSR Use: Kind=Address of float in addrspace(0), Offsets={0}, widest fixup type: float*
    reg({{{(8 + %bb)<nsw>,+,32}<nsw><%for.body9.preheader>,+,(4 * %NN)}<%for.body9>,+,16}<nsw><%for.body13>)
  LSR Use: Kind=Address of float in addrspace(0), Offsets={0}, widest fixup type: float*
    reg({{{(4 + %bb)<nsw>,+,32}<nsw><%for.body9.preheader>,+,(4 * %NN)}<%for.body9>,+,16}<nsw><%for.body13>)
  LSR Use: Kind=Address of float in addrspace(0), Offsets={0}, widest fixup type: float*
    reg({{{%bb,+,32}<nsw><%for.body9.preheader>,+,(4 * %NN)}<%for.body9>,+,16}<nsw><%for.body13>)
  LSR Use: Kind=Basic, Offsets={0}, all-fixups-outside-loop, widest fixup type: i32
    reg(%NN)
KnuthDiv: m=1 n=3
KnuthDiv: original: 0 4294967295 4294967295 2147483649 0 by 1 0 0
KnuthDiv:   normal: 2147483647 4294967295 3221225472 2147483648 0 by 2147483648 0 0
KnuthDiv: quotient digit #1
KnuthDiv: dividend == 9223372036854775807
KnuthDiv: qp == 4294967295, rp == 2147483647
KnuthDiv: u[j+i] = 2147483648, borrow = 0
KnuthDiv: u[j+i] = 3221225472, borrow = 0
KnuthDiv: u[j+i] = 2147483647, borrow = 2147483647
KnuthDiv: after subtraction: 0 2147483647 3221225472 2147483648 0
KnuthDiv: after correction: 0 2147483647 3221225472 2147483648 0
KnuthDiv: digit result = 4294967295
KnuthDiv: quotient digit #0
KnuthDiv: dividend == 9223372035781033984
KnuthDiv: qp == 4294967295, rp == 1073741824
KnuthDiv: u[j+i] = 0, borrow = 0
KnuthDiv: u[j+i] = 2147483648, borrow = 0
KnuthDiv: u[j+i] = 1073741824, borrow = 2147483647
KnuthDiv: after subtraction: 0 0 1073741824 2147483648 0
KnuthDiv: after correction: 0 0 1073741824 2147483648 0
KnuthDiv: digit result = 4294967295
KnuthDiv: quotient: 4294967295 4294967295
KnuthDiv: remainder: 0 2147483649 0

KnuthDiv: m=1 n=3
KnuthDiv: original: 0 4294967295 4294967295 2147483649 0 by 1 0 0
KnuthDiv:   normal: 2147483647 4294967295 3221225472 2147483648 0 by 2147483648 0 0
KnuthDiv: quotient digit #1
KnuthDiv: dividend == 9223372036854775807
KnuthDiv: qp == 4294967295, rp == 2147483647
KnuthDiv: u[j+i] = 2147483648, borrow = 0
KnuthDiv: u[j+i] = 3221225472, borrow = 0
KnuthDiv: u[j+i] = 2147483647, borrow = 2147483647
KnuthDiv: after subtraction: 0 2147483647 3221225472 2147483648 0
KnuthDiv: after correction: 0 2147483647 3221225472 2147483648 0
KnuthDiv: digit result = 4294967295
KnuthDiv: quotient digit #0
KnuthDiv: dividend == 9223372035781033984
KnuthDiv: qp == 4294967295, rp == 1073741824
KnuthDiv: u[j+i] = 0, borrow = 0
KnuthDiv: u[j+i] = 2147483648, borrow = 0
KnuthDiv: u[j+i] = 1073741824, borrow = 2147483647
KnuthDiv: after subtraction: 0 0 1073741824 2147483648 0
KnuthDiv: after correction: 0 0 1073741824 2147483648 0
KnuthDiv: digit result = 4294967295
KnuthDiv: quotient: 4294967295 4294967295
KnuthDiv: remainder: 0 2147483649 0

KnuthDiv: m=1 n=3
KnuthDiv: original: 0 4294967295 4294967295 2147483649 0 by 1 0 0
KnuthDiv:   normal: 2147483647 4294967295 3221225472 2147483648 0 by 2147483648 0 0
KnuthDiv: quotient digit #1
KnuthDiv: dividend == 9223372036854775807
KnuthDiv: qp == 4294967295, rp == 2147483647
KnuthDiv: u[j+i] = 2147483648, borrow = 0
KnuthDiv: u[j+i] = 3221225472, borrow = 0
KnuthDiv: u[j+i] = 2147483647, borrow = 2147483647
KnuthDiv: after subtraction: 0 2147483647 3221225472 2147483648 0
KnuthDiv: after correction: 0 2147483647 3221225472 2147483648 0
KnuthDiv: digit result = 4294967295
KnuthDiv: quotient digit #0
KnuthDiv: dividend == 9223372035781033984
KnuthDiv: qp == 4294967295, rp == 1073741824
KnuthDiv: u[j+i] = 0, borrow = 0
KnuthDiv: u[j+i] = 2147483648, borrow = 0
KnuthDiv: u[j+i] = 1073741824, borrow = 2147483647
KnuthDiv: after subtraction: 0 0 1073741824 2147483648 0
KnuthDiv: after correction: 0 0 1073741824 2147483648 0
KnuthDiv: digit result = 4294967295
KnuthDiv: quotient: 4294967295 4294967295
KnuthDiv: remainder: 0 2147483649 0

KnuthDiv: m=1 n=3
KnuthDiv: original: 0 4294967295 4294967295 2147483649 0 by 1 0 0
KnuthDiv:   normal: 2147483647 4294967295 3221225472 2147483648 0 by 2147483648 0 0
KnuthDiv: quotient digit #1
KnuthDiv: dividend == 9223372036854775807
KnuthDiv: qp == 4294967295, rp == 2147483647
KnuthDiv: u[j+i] = 2147483648, borrow = 0
KnuthDiv: u[j+i] = 3221225472, borrow = 0
KnuthDiv: u[j+i] = 2147483647, borrow = 2147483647
KnuthDiv: after subtraction: 0 2147483647 3221225472 2147483648 0
KnuthDiv: after correction: 0 2147483647 3221225472 2147483648 0
KnuthDiv: digit result = 4294967295
KnuthDiv: quotient digit #0
KnuthDiv: dividend == 9223372035781033984
KnuthDiv: qp == 4294967295, rp == 1073741824
KnuthDiv: u[j+i] = 0, borrow = 0
KnuthDiv: u[j+i] = 2147483648, borrow = 0
KnuthDiv: u[j+i] = 1073741824, borrow = 2147483647
KnuthDiv: after subtraction: 0 0 1073741824 2147483648 0
KnuthDiv: after correction: 0 0 1073741824 2147483648 0
KnuthDiv: digit result = 4294967295
KnuthDiv: quotient: 4294967295 4294967295
KnuthDiv: remainder: 0 2147483649 0

KnuthDiv: m=1 n=3
KnuthDiv: original: 0 4294967295 4294967295 2147483649 0 by 1 0 0
KnuthDiv:   normal: 2147483647 4294967295 3221225472 2147483648 0 by 2147483648 0 0
KnuthDiv: quotient digit #1
KnuthDiv: dividend == 9223372036854775807
KnuthDiv: qp == 4294967295, rp == 2147483647
KnuthDiv: u[j+i] = 2147483648, borrow = 0
KnuthDiv: u[j+i] = 3221225472, borrow = 0
KnuthDiv: u[j+i] = 2147483647, borrow = 2147483647
KnuthDiv: after subtraction: 0 2147483647 3221225472 2147483648 0
KnuthDiv: after correction: 0 2147483647 3221225472 2147483648 0
KnuthDiv: digit result = 4294967295
KnuthDiv: quotient digit #0
KnuthDiv: dividend == 9223372035781033984
KnuthDiv: qp == 4294967295, rp == 1073741824
KnuthDiv: u[j+i] = 0, borrow = 0
KnuthDiv: u[j+i] = 2147483648, borrow = 0
KnuthDiv: u[j+i] = 1073741824, borrow = 2147483647
KnuthDiv: after subtraction: 0 0 1073741824 2147483648 0
KnuthDiv: after correction: 0 0 1073741824 2147483648 0
KnuthDiv: digit result = 4294967295
KnuthDiv: quotient: 4294967295 4294967295
KnuthDiv: remainder: 0 2147483649 0

KnuthDiv: m=1 n=3
KnuthDiv: original: 0 4294967295 4294967295 2147483649 0 by 1 0 0
KnuthDiv:   normal: 2147483647 4294967295 3221225472 2147483648 0 by 2147483648 0 0
KnuthDiv: quotient digit #1
KnuthDiv: dividend == 9223372036854775807
KnuthDiv: qp == 4294967295, rp == 2147483647
KnuthDiv: u[j+i] = 2147483648, borrow = 0
KnuthDiv: u[j+i] = 3221225472, borrow = 0
KnuthDiv: u[j+i] = 2147483647, borrow = 2147483647
KnuthDiv: after subtraction: 0 2147483647 3221225472 2147483648 0
KnuthDiv: after correction: 0 2147483647 3221225472 2147483648 0
KnuthDiv: digit result = 4294967295
KnuthDiv: quotient digit #0
KnuthDiv: dividend == 9223372035781033984
KnuthDiv: qp == 4294967295, rp == 1073741824
KnuthDiv: u[j+i] = 0, borrow = 0
KnuthDiv: u[j+i] = 2147483648, borrow = 0
KnuthDiv: u[j+i] = 1073741824, borrow = 2147483647
KnuthDiv: after subtraction: 0 0 1073741824 2147483648 0
KnuthDiv: after correction: 0 0 1073741824 2147483648 0
KnuthDiv: digit result = 4294967295
KnuthDiv: quotient: 4294967295 4294967295
KnuthDiv: remainder: 0 2147483649 0

KnuthDiv: m=1 n=3
KnuthDiv: original: 0 4294967295 4294967295 2147483649 0 by 1 0 0
KnuthDiv:   normal: 2147483647 4294967295 3221225472 2147483648 0 by 2147483648 0 0
KnuthDiv: quotient digit #1
KnuthDiv: dividend == 9223372036854775807
KnuthDiv: qp == 4294967295, rp == 2147483647
KnuthDiv: u[j+i] = 2147483648, borrow = 0
KnuthDiv: u[j+i] = 3221225472, borrow = 0
KnuthDiv: u[j+i] = 2147483647, borrow = 2147483647
KnuthDiv: after subtraction: 0 2147483647 3221225472 2147483648 0
KnuthDiv: after correction: 0 2147483647 3221225472 2147483648 0
KnuthDiv: digit result = 4294967295
KnuthDiv: quotient digit #0
KnuthDiv: dividend == 9223372035781033984
KnuthDiv: qp == 4294967295, rp == 1073741824
KnuthDiv: u[j+i] = 0, borrow = 0
KnuthDiv: u[j+i] = 2147483648, borrow = 0
KnuthDiv: u[j+i] = 1073741824, borrow = 2147483647
KnuthDiv: after subtraction: 0 0 1073741824 2147483648 0
KnuthDiv: after correction: 0 0 1073741824 2147483648 0
KnuthDiv: digit result = 4294967295
KnuthDiv: quotient: 4294967295 4294967295
KnuthDiv: remainder: 0 2147483649 0

KnuthDiv: m=1 n=3
KnuthDiv: original: 0 4294967295 4294967295 2147483649 0 by 1 0 0
KnuthDiv:   normal: 2147483647 4294967295 3221225472 2147483648 0 by 2147483648 0 0
KnuthDiv: quotient digit #1
KnuthDiv: dividend == 9223372036854775807
KnuthDiv: qp == 4294967295, rp == 2147483647
KnuthDiv: u[j+i] = 2147483648, borrow = 0
KnuthDiv: u[j+i] = 3221225472, borrow = 0
KnuthDiv: u[j+i] = 2147483647, borrow = 2147483647
KnuthDiv: after subtraction: 0 2147483647 3221225472 2147483648 0
KnuthDiv: after correction: 0 2147483647 3221225472 2147483648 0
KnuthDiv: digit result = 4294967295
KnuthDiv: quotient digit #0
KnuthDiv: dividend == 9223372035781033984
KnuthDiv: qp == 4294967295, rp == 1073741824
KnuthDiv: u[j+i] = 0, borrow = 0
KnuthDiv: u[j+i] = 2147483648, borrow = 0
KnuthDiv: u[j+i] = 1073741824, borrow = 2147483647
KnuthDiv: after subtraction: 0 0 1073741824 2147483648 0
KnuthDiv: after correction: 0 0 1073741824 2147483648 0
KnuthDiv: digit result = 4294967295
KnuthDiv: quotient: 4294967295 4294967295
KnuthDiv: remainder: 0 2147483649 0

KnuthDiv: m=1 n=3
KnuthDiv: original: 0 4294967295 4294967295 2147483649 0 by 1 0 0
KnuthDiv:   normal: 2147483647 4294967295 3221225472 2147483648 0 by 2147483648 0 0
KnuthDiv: quotient digit #1
KnuthDiv: dividend == 9223372036854775807
KnuthDiv: qp == 4294967295, rp == 2147483647
KnuthDiv: u[j+i] = 2147483648, borrow = 0
KnuthDiv: u[j+i] = 3221225472, borrow = 0
KnuthDiv: u[j+i] = 2147483647, borrow = 2147483647
KnuthDiv: after subtraction: 0 2147483647 3221225472 2147483648 0
KnuthDiv: after correction: 0 2147483647 3221225472 2147483648 0
KnuthDiv: digit result = 4294967295
KnuthDiv: quotient digit #0
KnuthDiv: dividend == 9223372035781033984
KnuthDiv: qp == 4294967295, rp == 1073741824
KnuthDiv: u[j+i] = 0, borrow = 0
KnuthDiv: u[j+i] = 2147483648, borrow = 0
KnuthDiv: u[j+i] = 1073741824, borrow = 2147483647
KnuthDiv: after subtraction: 0 0 1073741824 2147483648 0
KnuthDiv: after correction: 0 0 1073741824 2147483648 0
KnuthDiv: digit result = 4294967295
KnuthDiv: quotient: 4294967295 4294967295
KnuthDiv: remainder: 0 2147483649 0

KnuthDiv: m=1 n=3
KnuthDiv: original: 0 4294967295 4294967295 2147483649 0 by 1 0 0
KnuthDiv:   normal: 2147483647 4294967295 3221225472 2147483648 0 by 2147483648 0 0
KnuthDiv: quotient digit #1
KnuthDiv: dividend == 9223372036854775807
KnuthDiv: qp == 4294967295, rp == 2147483647
KnuthDiv: u[j+i] = 2147483648, borrow = 0
KnuthDiv: u[j+i] = 3221225472, borrow = 0
KnuthDiv: u[j+i] = 2147483647, borrow = 2147483647
KnuthDiv: after subtraction: 0 2147483647 3221225472 2147483648 0
KnuthDiv: after correction: 0 2147483647 3221225472 2147483648 0
KnuthDiv: digit result = 4294967295
KnuthDiv: quotient digit #0
KnuthDiv: dividend == 9223372035781033984
KnuthDiv: qp == 4294967295, rp == 1073741824
KnuthDiv: u[j+i] = 0, borrow = 0
KnuthDiv: u[j+i] = 2147483648, borrow = 0
KnuthDiv: u[j+i] = 1073741824, borrow = 2147483647
KnuthDiv: after subtraction: 0 0 1073741824 2147483648 0
KnuthDiv: after correction: 0 0 1073741824 2147483648 0
KnuthDiv: digit result = 4294967295
KnuthDiv: quotient: 4294967295 4294967295
KnuthDiv: remainder: 0 2147483649 0

KnuthDiv: m=1 n=3
KnuthDiv: original: 0 4294967295 4294967295 2147483649 0 by 1 0 0
KnuthDiv:   normal: 2147483647 4294967295 3221225472 2147483648 0 by 2147483648 0 0
KnuthDiv: quotient digit #1
KnuthDiv: dividend == 9223372036854775807
KnuthDiv: qp == 4294967295, rp == 2147483647
KnuthDiv: u[j+i] = 2147483648, borrow = 0
KnuthDiv: u[j+i] = 3221225472, borrow = 0
KnuthDiv: u[j+i] = 2147483647, borrow = 2147483647
KnuthDiv: after subtraction: 0 2147483647 3221225472 2147483648 0
KnuthDiv: after correction: 0 2147483647 3221225472 2147483648 0
KnuthDiv: digit result = 4294967295
KnuthDiv: quotient digit #0
KnuthDiv: dividend == 9223372035781033984
KnuthDiv: qp == 4294967295, rp == 1073741824
KnuthDiv: u[j+i] = 0, borrow = 0
KnuthDiv: u[j+i] = 2147483648, borrow = 0
KnuthDiv: u[j+i] = 1073741824, borrow = 2147483647
KnuthDiv: after subtraction: 0 0 1073741824 2147483648 0
KnuthDiv: after correction: 0 0 1073741824 2147483648 0
KnuthDiv: digit result = 4294967295
KnuthDiv: quotient: 4294967295 4294967295
KnuthDiv: remainder: 0 2147483649 0

KnuthDiv: m=1 n=3
KnuthDiv: original: 0 4294967295 4294967295 2147483649 0 by 1 0 0
KnuthDiv:   normal: 2147483647 4294967295 3221225472 2147483648 0 by 2147483648 0 0
KnuthDiv: quotient digit #1
KnuthDiv: dividend == 9223372036854775807
KnuthDiv: qp == 4294967295, rp == 2147483647
KnuthDiv: u[j+i] = 2147483648, borrow = 0
KnuthDiv: u[j+i] = 3221225472, borrow = 0
KnuthDiv: u[j+i] = 2147483647, borrow = 2147483647
KnuthDiv: after subtraction: 0 2147483647 3221225472 2147483648 0
KnuthDiv: after correction: 0 2147483647 3221225472 2147483648 0
KnuthDiv: digit result = 4294967295
KnuthDiv: quotient digit #0
KnuthDiv: dividend == 9223372035781033984
KnuthDiv: qp == 4294967295, rp == 1073741824
KnuthDiv: u[j+i] = 0, borrow = 0
KnuthDiv: u[j+i] = 2147483648, borrow = 0
KnuthDiv: u[j+i] = 1073741824, borrow = 2147483647
KnuthDiv: after subtraction: 0 0 1073741824 2147483648 0
KnuthDiv: after correction: 0 0 1073741824 2147483648 0
KnuthDiv: digit result = 4294967295
KnuthDiv: quotient: 4294967295 4294967295
KnuthDiv: remainder: 0 2147483649 0

KnuthDiv: m=1 n=3
KnuthDiv: original: 0 4294967295 4294967295 2147483649 0 by 1 0 0
KnuthDiv:   normal: 2147483647 4294967295 3221225472 2147483648 0 by 2147483648 0 0
KnuthDiv: quotient digit #1
KnuthDiv: dividend == 9223372036854775807
KnuthDiv: qp == 4294967295, rp == 2147483647
KnuthDiv: u[j+i] = 2147483648, borrow = 0
KnuthDiv: u[j+i] = 3221225472, borrow = 0
KnuthDiv: u[j+i] = 2147483647, borrow = 2147483647
KnuthDiv: after subtraction: 0 2147483647 3221225472 2147483648 0
KnuthDiv: after correction: 0 2147483647 3221225472 2147483648 0
KnuthDiv: digit result = 4294967295
KnuthDiv: quotient digit #0
KnuthDiv: dividend == 9223372035781033984
KnuthDiv: qp == 4294967295, rp == 1073741824
KnuthDiv: u[j+i] = 0, borrow = 0
KnuthDiv: u[j+i] = 2147483648, borrow = 0
KnuthDiv: u[j+i] = 1073741824, borrow = 2147483647
KnuthDiv: after subtraction: 0 0 1073741824 2147483648 0
KnuthDiv: after correction: 0 0 1073741824 2147483648 0
KnuthDiv: digit result = 4294967295
KnuthDiv: quotient: 4294967295 4294967295
KnuthDiv: remainder: 0 2147483649 0

KnuthDiv: m=1 n=3
KnuthDiv: original: 0 4294967295 4294967295 2147483649 0 by 1 0 0
KnuthDiv:   normal: 2147483647 4294967295 3221225472 2147483648 0 by 2147483648 0 0
KnuthDiv: quotient digit #1
KnuthDiv: dividend == 9223372036854775807
KnuthDiv: qp == 4294967295, rp == 2147483647
KnuthDiv: u[j+i] = 2147483648, borrow = 0
KnuthDiv: u[j+i] = 3221225472, borrow = 0
KnuthDiv: u[j+i] = 2147483647, borrow = 2147483647
KnuthDiv: after subtraction: 0 2147483647 3221225472 2147483648 0
KnuthDiv: after correction: 0 2147483647 3221225472 2147483648 0
KnuthDiv: digit result = 4294967295
KnuthDiv: quotient digit #0
KnuthDiv: dividend == 9223372035781033984
KnuthDiv: qp == 4294967295, rp == 1073741824
KnuthDiv: u[j+i] = 0, borrow = 0
KnuthDiv: u[j+i] = 2147483648, borrow = 0
KnuthDiv: u[j+i] = 1073741824, borrow = 2147483647
KnuthDiv: after subtraction: 0 0 1073741824 2147483648 0
KnuthDiv: after correction: 0 0 1073741824 2147483648 0
KnuthDiv: digit result = 4294967295
KnuthDiv: quotient: 4294967295 4294967295
KnuthDiv: remainder: 0 2147483649 0

KnuthDiv: m=1 n=3
KnuthDiv: original: 0 4294967295 4294967295 2147483649 0 by 1 0 0
KnuthDiv:   normal: 2147483647 4294967295 3221225472 2147483648 0 by 2147483648 0 0
KnuthDiv: quotient digit #1
KnuthDiv: dividend == 9223372036854775807
KnuthDiv: qp == 4294967295, rp == 2147483647
KnuthDiv: u[j+i] = 2147483648, borrow = 0
KnuthDiv: u[j+i] = 3221225472, borrow = 0
KnuthDiv: u[j+i] = 2147483647, borrow = 2147483647
KnuthDiv: after subtraction: 0 2147483647 3221225472 2147483648 0
KnuthDiv: after correction: 0 2147483647 3221225472 2147483648 0
KnuthDiv: digit result = 4294967295
KnuthDiv: quotient digit #0
KnuthDiv: dividend == 9223372035781033984
KnuthDiv: qp == 4294967295, rp == 1073741824
KnuthDiv: u[j+i] = 0, borrow = 0
KnuthDiv: u[j+i] = 2147483648, borrow = 0
KnuthDiv: u[j+i] = 1073741824, borrow = 2147483647
KnuthDiv: after subtraction: 0 0 1073741824 2147483648 0
KnuthDiv: after correction: 0 0 1073741824 2147483648 0
KnuthDiv: digit result = 4294967295
KnuthDiv: quotient: 4294967295 4294967295
KnuthDiv: remainder: 0 2147483649 0

KnuthDiv: m=1 n=3
KnuthDiv: original: 0 4294967295 4294967295 2147483649 0 by 1 0 0
KnuthDiv:   normal: 2147483647 4294967295 3221225472 2147483648 0 by 2147483648 0 0
KnuthDiv: quotient digit #1
KnuthDiv: dividend == 9223372036854775807
KnuthDiv: qp == 4294967295, rp == 2147483647
KnuthDiv: u[j+i] = 2147483648, borrow = 0
KnuthDiv: u[j+i] = 3221225472, borrow = 0
KnuthDiv: u[j+i] = 2147483647, borrow = 2147483647
KnuthDiv: after subtraction: 0 2147483647 3221225472 2147483648 0
KnuthDiv: after correction: 0 2147483647 3221225472 2147483648 0
KnuthDiv: digit result = 4294967295
KnuthDiv: quotient digit #0
KnuthDiv: dividend == 9223372035781033984
KnuthDiv: qp == 4294967295, rp == 1073741824
KnuthDiv: u[j+i] = 0, borrow = 0
KnuthDiv: u[j+i] = 2147483648, borrow = 0
KnuthDiv: u[j+i] = 1073741824, borrow = 2147483647
KnuthDiv: after subtraction: 0 0 1073741824 2147483648 0
KnuthDiv: after correction: 0 0 1073741824 2147483648 0
KnuthDiv: digit result = 4294967295
KnuthDiv: quotient: 4294967295 4294967295
KnuthDiv: remainder: 0 2147483649 0

KnuthDiv: m=1 n=3
KnuthDiv: original: 0 4294967295 4294967295 2147483649 0 by 1 0 0
KnuthDiv:   normal: 2147483647 4294967295 3221225472 2147483648 0 by 2147483648 0 0
KnuthDiv: quotient digit #1
KnuthDiv: dividend == 9223372036854775807
KnuthDiv: qp == 4294967295, rp == 2147483647
KnuthDiv: u[j+i] = 2147483648, borrow = 0
KnuthDiv: u[j+i] = 3221225472, borrow = 0
KnuthDiv: u[j+i] = 2147483647, borrow = 2147483647
KnuthDiv: after subtraction: 0 2147483647 3221225472 2147483648 0
KnuthDiv: after correction: 0 2147483647 3221225472 2147483648 0
KnuthDiv: digit result = 4294967295
KnuthDiv: quotient digit #0
KnuthDiv: dividend == 9223372035781033984
KnuthDiv: qp == 4294967295, rp == 1073741824
KnuthDiv: u[j+i] = 0, borrow = 0
KnuthDiv: u[j+i] = 2147483648, borrow = 0
KnuthDiv: u[j+i] = 1073741824, borrow = 2147483647
KnuthDiv: after subtraction: 0 0 1073741824 2147483648 0
KnuthDiv: after correction: 0 0 1073741824 2147483648 0
KnuthDiv: digit result = 4294967295
KnuthDiv: quotient: 4294967295 4294967295
KnuthDiv: remainder: 0 2147483649 0

KnuthDiv: m=1 n=3
KnuthDiv: original: 0 4294967295 4294967295 2147483649 0 by 1 0 0
KnuthDiv:   normal: 2147483647 4294967295 3221225472 2147483648 0 by 2147483648 0 0
KnuthDiv: quotient digit #1
KnuthDiv: dividend == 9223372036854775807
KnuthDiv: qp == 4294967295, rp == 2147483647
KnuthDiv: u[j+i] = 2147483648, borrow = 0
KnuthDiv: u[j+i] = 3221225472, borrow = 0
KnuthDiv: u[j+i] = 2147483647, borrow = 2147483647
KnuthDiv: after subtraction: 0 2147483647 3221225472 2147483648 0
KnuthDiv: after correction: 0 2147483647 3221225472 2147483648 0
KnuthDiv: digit result = 4294967295
KnuthDiv: quotient digit #0
KnuthDiv: dividend == 9223372035781033984
KnuthDiv: qp == 4294967295, rp == 1073741824
KnuthDiv: u[j+i] = 0, borrow = 0
KnuthDiv: u[j+i] = 2147483648, borrow = 0
KnuthDiv: u[j+i] = 1073741824, borrow = 2147483647
KnuthDiv: after subtraction: 0 0 1073741824 2147483648 0
KnuthDiv: after correction: 0 0 1073741824 2147483648 0
KnuthDiv: digit result = 4294967295
KnuthDiv: quotient: 4294967295 4294967295
KnuthDiv: remainder: 0 2147483649 0

Generating cross-use offsets for {%tot,+,16}<nsw><%for.body13>: 0 4 8 12
Generating cross-use offsets for {{{%bb,+,32}<nsw><%for.body9.preheader>,+,(4 * %NN)}<%for.body9>,+,16}<nsw><%for.body13>: 0 4 8 12
Generating cross-use offsets for {0,+,16}<nuw><nsw><%for.body13>: 0 4 8 12
Generating cross-use offsets for %tot: 0 4 8 12
Generating cross-use offsets for %bb: 0 4 8 12
Generating cross-use offsets for {{0,+,32}<nuw><nsw><%for.body9.preheader>,+,(4 * %NN)}<%for.body9>: 0 4 8 12
Generating cross-use offsets for {%bb,+,16}<nw><%for.body13>: 0 4 8 12
Generating cross-use offsets for {{%bb,+,32}<nsw><%for.body9.preheader>,+,(4 * %NN)}<%for.body9>: 0 4 8 12

After generating reuse formulae:
LSR is examining the following uses:
  LSR Use: Kind=Basic, Offsets={0}, widest fixup type: i32
    reg({0,+,4}<nuw><nsw><%for.body13>)
  LSR Use: Kind=Address of float in addrspace(0), Offsets={0,0}, widest fixup type: float*
    reg({(12 + %tot)<nsw>,+,16}<nsw><%for.body13>)
    reg(%tot) + 1*reg({12,+,16}<nuw><nsw><%for.body13>)
    reg(%tot) + 1*reg({0,+,16}<nuw><nsw><%for.body13>) + imm(12)
    reg((12 + %tot)<nsw>) + 1*reg({0,+,16}<nuw><nsw><%for.body13>)
    12 + reg({%tot,+,16}<nsw><%for.body13>)
    4 + reg({(8 + %tot)<nsw>,+,16}<nsw><%for.body13>)
  LSR Use: Kind=Address of float in addrspace(0), Offsets={0,0}, widest fixup type: float*
    reg({(8 + %tot)<nsw>,+,16}<nsw><%for.body13>)
    reg(%tot) + 1*reg({8,+,16}<nuw><nsw><%for.body13>)
    reg(%tot) + 1*reg({0,+,16}<nuw><nsw><%for.body13>) + imm(8)
    reg((8 + %tot)<nsw>) + 1*reg({0,+,16}<nuw><nsw><%for.body13>)
    8 + reg({%tot,+,16}<nsw><%for.body13>)
    -4 + reg({(12 + %tot)<nsw>,+,16}<nsw><%for.body13>)
  LSR Use: Kind=Address of float in addrspace(0), Offsets={0,0}, widest fixup type: float*
    reg({(4 + %tot)<nsw>,+,16}<nsw><%for.body13>)
    reg(%tot) + 1*reg({4,+,16}<nuw><nsw><%for.body13>)
    reg(%tot) + 1*reg({0,+,16}<nuw><nsw><%for.body13>) + imm(4)
    reg((4 + %tot)<nsw>) + 1*reg({0,+,16}<nuw><nsw><%for.body13>)
    4 + reg({%tot,+,16}<nsw><%for.body13>)
    -8 + reg({(12 + %tot)<nsw>,+,16}<nsw><%for.body13>)
    -4 + reg({(8 + %tot)<nsw>,+,16}<nsw><%for.body13>)
  LSR Use: Kind=Address of float in addrspace(0), Offsets={0,0}, widest fixup type: float*
    reg({%tot,+,16}<nsw><%for.body13>)
    reg(%tot) + 1*reg({0,+,16}<nuw><nsw><%for.body13>)
    -12 + reg({(12 + %tot)<nsw>,+,16}<nsw><%for.body13>)
    -8 + reg({(8 + %tot)<nsw>,+,16}<nsw><%for.body13>)
  LSR Use: Kind=Address of float in addrspace(0), Offsets={0}, widest fixup type: float*
    reg({{{(12 + %bb)<nsw>,+,32}<nsw><%for.body9.preheader>,+,(4 * %NN)}<%for.body9>,+,16}<nsw><%for.body13>)
    reg((12 + %bb)<nsw>) + 1*reg({{{0,+,32}<nuw><nsw><%for.body9.preheader>,+,(4 * %NN)}<%for.body9>,+,16}<nw><%for.body13>)
    reg(%bb) + 1*reg({{{0,+,32}<nuw><nsw><%for.body9.preheader>,+,(4 * %NN)}<%for.body9>,+,16}<nw><%for.body13>) + imm(12)
    reg(%bb) + reg({{0,+,32}<nuw><nsw><%for.body9.preheader>,+,(4 * %NN)}<%for.body9>) + 1*reg({0,+,16}<nuw><nsw><%for.body13>) + imm(12)
    reg((12 + %bb)<nsw>) + reg({{0,+,32}<nuw><nsw><%for.body9.preheader>,+,(4 * %NN)}<%for.body9>) + 1*reg({0,+,16}<nuw><nsw><%for.body13>)
    reg({(12 + %bb)<nsw>,+,16}<nw><%for.body13>) + 1*reg({{0,+,32}<nuw><nsw><%for.body9.preheader>,+,(4 * %NN)}<%for.body9>)
    reg({%bb,+,16}<nw><%for.body13>) + 1*reg({{0,+,32}<nuw><nsw><%for.body9.preheader>,+,(4 * %NN)}<%for.body9>) + imm(12)
    reg({12,+,16}<nuw><nsw><%for.body13>) + reg(%bb) + 1*reg({{0,+,32}<nuw><nsw><%for.body9.preheader>,+,(4 * %NN)}<%for.body9>)
    reg({{(12 + %bb)<nsw>,+,32}<nsw><%for.body9.preheader>,+,(4 * %NN)}<%for.body9>) + 1*reg({0,+,16}<nuw><nsw><%for.body13>)
    reg({{%bb,+,32}<nsw><%for.body9.preheader>,+,(4 * %NN)}<%for.body9>) + 1*reg({0,+,16}<nuw><nsw><%for.body13>) + imm(12)
    reg({{12,+,32}<nuw><nsw><%for.body9.preheader>,+,(4 * %NN)}<%for.body9>) + reg(%bb) + 1*reg({0,+,16}<nuw><nsw><%for.body13>)
    reg({12,+,16}<nuw><nsw><%for.body13>) + 1*reg({{%bb,+,32}<nsw><%for.body9.preheader>,+,(4 * %NN)}<%for.body9>)
    12 + reg({{{%bb,+,32}<nsw><%for.body9.preheader>,+,(4 * %NN)}<%for.body9>,+,16}<nsw><%for.body13>)
    4 + reg({{{(8 + %bb)<nsw>,+,32}<nsw><%for.body9.preheader>,+,(4 * %NN)}<%for.body9>,+,16}<nsw><%for.body13>)
  LSR Use: Kind=Address of float in addrspace(0), Offsets={0}, widest fixup type: float*
    reg({{{(8 + %bb)<nsw>,+,32}<nsw><%for.body9.preheader>,+,(4 * %NN)}<%for.body9>,+,16}<nsw><%for.body13>)
    reg((8 + %bb)<nsw>) + 1*reg({{{0,+,32}<nuw><nsw><%for.body9.preheader>,+,(4 * %NN)}<%for.body9>,+,16}<nw><%for.body13>)
    reg(%bb) + 1*reg({{{0,+,32}<nuw><nsw><%for.body9.preheader>,+,(4 * %NN)}<%for.body9>,+,16}<nw><%for.body13>) + imm(8)
    reg(%bb) + reg({{0,+,32}<nuw><nsw><%for.body9.preheader>,+,(4 * %NN)}<%for.body9>) + 1*reg({0,+,16}<nuw><nsw><%for.body13>) + imm(8)
    reg((8 + %bb)<nsw>) + reg({{0,+,32}<nuw><nsw><%for.body9.preheader>,+,(4 * %NN)}<%for.body9>) + 1*reg({0,+,16}<nuw><nsw><%for.body13>)
    reg({(8 + %bb)<nsw>,+,16}<nw><%for.body13>) + 1*reg({{0,+,32}<nuw><nsw><%for.body9.preheader>,+,(4 * %NN)}<%for.body9>)
    reg({%bb,+,16}<nw><%for.body13>) + 1*reg({{0,+,32}<nuw><nsw><%for.body9.preheader>,+,(4 * %NN)}<%for.body9>) + imm(8)
    reg({8,+,16}<nuw><nsw><%for.body13>) + reg(%bb) + 1*reg({{0,+,32}<nuw><nsw><%for.body9.preheader>,+,(4 * %NN)}<%for.body9>)
    reg({{(8 + %bb)<nsw>,+,32}<nsw><%for.body9.preheader>,+,(4 * %NN)}<%for.body9>) + 1*reg({0,+,16}<nuw><nsw><%for.body13>)
    reg({{%bb,+,32}<nsw><%for.body9.preheader>,+,(4 * %NN)}<%for.body9>) + 1*reg({0,+,16}<nuw><nsw><%for.body13>) + imm(8)
    reg({{8,+,32}<nuw><nsw><%for.body9.preheader>,+,(4 * %NN)}<%for.body9>) + reg(%bb) + 1*reg({0,+,16}<nuw><nsw><%for.body13>)
    reg({8,+,16}<nuw><nsw><%for.body13>) + 1*reg({{%bb,+,32}<nsw><%for.body9.preheader>,+,(4 * %NN)}<%for.body9>)
    8 + reg({{{%bb,+,32}<nsw><%for.body9.preheader>,+,(4 * %NN)}<%for.body9>,+,16}<nsw><%for.body13>)
    -4 + reg({{{(12 + %bb)<nsw>,+,32}<nsw><%for.body9.preheader>,+,(4 * %NN)}<%for.body9>,+,16}<nsw><%for.body13>)
  LSR Use: Kind=Address of float in addrspace(0), Offsets={0}, widest fixup type: float*
    reg({{{(4 + %bb)<nsw>,+,32}<nsw><%for.body9.preheader>,+,(4 * %NN)}<%for.body9>,+,16}<nsw><%for.body13>)
    reg((4 + %bb)<nsw>) + 1*reg({{{0,+,32}<nuw><nsw><%for.body9.preheader>,+,(4 * %NN)}<%for.body9>,+,16}<nw><%for.body13>)
    reg(%bb) + 1*reg({{{0,+,32}<nuw><nsw><%for.body9.preheader>,+,(4 * %NN)}<%for.body9>,+,16}<nw><%for.body13>) + imm(4)
    reg(%bb) + reg({{0,+,32}<nuw><nsw><%for.body9.preheader>,+,(4 * %NN)}<%for.body9>) + 1*reg({0,+,16}<nuw><nsw><%for.body13>) + imm(4)
    reg((4 + %bb)<nsw>) + reg({{0,+,32}<nuw><nsw><%for.body9.preheader>,+,(4 * %NN)}<%for.body9>) + 1*reg({0,+,16}<nuw><nsw><%for.body13>)
    reg({(4 + %bb)<nsw>,+,16}<nw><%for.body13>) + 1*reg({{0,+,32}<nuw><nsw><%for.body9.preheader>,+,(4 * %NN)}<%for.body9>)
    reg({%bb,+,16}<nw><%for.body13>) + 1*reg({{0,+,32}<nuw><nsw><%for.body9.preheader>,+,(4 * %NN)}<%for.body9>) + imm(4)
    reg({4,+,16}<nuw><nsw><%for.body13>) + reg(%bb) + 1*reg({{0,+,32}<nuw><nsw><%for.body9.preheader>,+,(4 * %NN)}<%for.body9>)
    reg({{(4 + %bb)<nsw>,+,32}<nsw><%for.body9.preheader>,+,(4 * %NN)}<%for.body9>) + 1*reg({0,+,16}<nuw><nsw><%for.body13>)
    reg({{%bb,+,32}<nsw><%for.body9.preheader>,+,(4 * %NN)}<%for.body9>) + 1*reg({0,+,16}<nuw><nsw><%for.body13>) + imm(4)
    reg({{4,+,32}<nuw><nsw><%for.body9.preheader>,+,(4 * %NN)}<%for.body9>) + reg(%bb) + 1*reg({0,+,16}<nuw><nsw><%for.body13>)
    reg({4,+,16}<nuw><nsw><%for.body13>) + 1*reg({{%bb,+,32}<nsw><%for.body9.preheader>,+,(4 * %NN)}<%for.body9>)
    4 + reg({{{%bb,+,32}<nsw><%for.body9.preheader>,+,(4 * %NN)}<%for.body9>,+,16}<nsw><%for.body13>)
    -8 + reg({{{(12 + %bb)<nsw>,+,32}<nsw><%for.body9.preheader>,+,(4 * %NN)}<%for.body9>,+,16}<nsw><%for.body13>)
    -4 + reg({{{(8 + %bb)<nsw>,+,32}<nsw><%for.body9.preheader>,+,(4 * %NN)}<%for.body9>,+,16}<nsw><%for.body13>)
  LSR Use: Kind=Address of float in addrspace(0), Offsets={0}, widest fixup type: float*
    reg({{{%bb,+,32}<nsw><%for.body9.preheader>,+,(4 * %NN)}<%for.body9>,+,16}<nsw><%for.body13>)
    reg(%bb) + 1*reg({{{0,+,32}<nuw><nsw><%for.body9.preheader>,+,(4 * %NN)}<%for.body9>,+,16}<nw><%for.body13>)
    reg(%bb) + reg({{0,+,32}<nuw><nsw><%for.body9.preheader>,+,(4 * %NN)}<%for.body9>) + 1*reg({0,+,16}<nuw><nsw><%for.body13>)
    reg({%bb,+,16}<nw><%for.body13>) + 1*reg({{0,+,32}<nuw><nsw><%for.body9.preheader>,+,(4 * %NN)}<%for.body9>)
    reg({{%bb,+,32}<nsw><%for.body9.preheader>,+,(4 * %NN)}<%for.body9>) + 1*reg({0,+,16}<nuw><nsw><%for.body13>)
    -12 + reg({{{(12 + %bb)<nsw>,+,32}<nsw><%for.body9.preheader>,+,(4 * %NN)}<%for.body9>,+,16}<nsw><%for.body13>)
    -8 + reg({{{(8 + %bb)<nsw>,+,32}<nsw><%for.body9.preheader>,+,(4 * %NN)}<%for.body9>,+,16}<nsw><%for.body13>)
  LSR Use: Kind=Basic, Offsets={0}, all-fixups-outside-loop, widest fixup type: i32
    reg(%NN)
Filtering for use LSR Use: Kind=Basic, Offsets={0}, widest fixup type: i32
Filtering for use LSR Use: Kind=Address of float in addrspace(0), Offsets={0,0}, widest fixup type: float*
Filtering for use LSR Use: Kind=Address of float in addrspace(0), Offsets={0,0}, widest fixup type: float*
Filtering for use LSR Use: Kind=Address of float in addrspace(0), Offsets={0,0}, widest fixup type: float*
Filtering for use LSR Use: Kind=Address of float in addrspace(0), Offsets={0,0}, widest fixup type: float*
Filtering for use LSR Use: Kind=Address of float in addrspace(0), Offsets={0}, widest fixup type: float*
  Filtering loser reg(%bb) + reg({{0,+,32}<nuw><nsw><%for.body9.preheader>,+,(4 * %NN)}<%for.body9>) + 1*reg({0,+,16}<nuw><nsw><%for.body13>) + imm(12)
  Filtering loser reg((12 + %bb)<nsw>) + reg({{0,+,32}<nuw><nsw><%for.body9.preheader>,+,(4 * %NN)}<%for.body9>) + 1*reg({0,+,16}<nuw><nsw><%for.body13>)
  Filtering loser reg({(12 + %bb)<nsw>,+,16}<nw><%for.body13>) + 1*reg({{0,+,32}<nuw><nsw><%for.body9.preheader>,+,(4 * %NN)}<%for.body9>)
  Filtering loser reg({12,+,16}<nuw><nsw><%for.body13>) + 1*reg({{%bb,+,32}<nsw><%for.body9.preheader>,+,(4 * %NN)}<%for.body9>)
  Filtering loser reg({{12,+,32}<nuw><nsw><%for.body9.preheader>,+,(4 * %NN)}<%for.body9>) + reg(%bb) + 1*reg({0,+,16}<nuw><nsw><%for.body13>)
  Filtering loser reg({{%bb,+,32}<nsw><%for.body9.preheader>,+,(4 * %NN)}<%for.body9>) + 1*reg({0,+,16}<nuw><nsw><%for.body13>) + imm(12)
  Filtering loser reg({{(12 + %bb)<nsw>,+,32}<nsw><%for.body9.preheader>,+,(4 * %NN)}<%for.body9>) + 1*reg({0,+,16}<nuw><nsw><%for.body13>)
  Filtering loser reg({12,+,16}<nuw><nsw><%for.body13>) + reg(%bb) + 1*reg({{0,+,32}<nuw><nsw><%for.body9.preheader>,+,(4 * %NN)}<%for.body9>)
  Filtering loser reg({%bb,+,16}<nw><%for.body13>) + 1*reg({{0,+,32}<nuw><nsw><%for.body9.preheader>,+,(4 * %NN)}<%for.body9>) + imm(12)
Filtering for use LSR Use: Kind=Address of float in addrspace(0), Offsets={0}, widest fixup type: float*
  Filtering loser reg(%bb) + reg({{0,+,32}<nuw><nsw><%for.body9.preheader>,+,(4 * %NN)}<%for.body9>) + 1*reg({0,+,16}<nuw><nsw><%for.body13>) + imm(8)
  Filtering loser reg((8 + %bb)<nsw>) + reg({{0,+,32}<nuw><nsw><%for.body9.preheader>,+,(4 * %NN)}<%for.body9>) + 1*reg({0,+,16}<nuw><nsw><%for.body13>)
  Filtering loser reg({(8 + %bb)<nsw>,+,16}<nw><%for.body13>) + 1*reg({{0,+,32}<nuw><nsw><%for.body9.preheader>,+,(4 * %NN)}<%for.body9>)
  Filtering loser reg({8,+,16}<nuw><nsw><%for.body13>) + 1*reg({{%bb,+,32}<nsw><%for.body9.preheader>,+,(4 * %NN)}<%for.body9>)
  Filtering loser reg({{8,+,32}<nuw><nsw><%for.body9.preheader>,+,(4 * %NN)}<%for.body9>) + reg(%bb) + 1*reg({0,+,16}<nuw><nsw><%for.body13>)
  Filtering loser reg({{%bb,+,32}<nsw><%for.body9.preheader>,+,(4 * %NN)}<%for.body9>) + 1*reg({0,+,16}<nuw><nsw><%for.body13>) + imm(8)
  Filtering loser reg({{(8 + %bb)<nsw>,+,32}<nsw><%for.body9.preheader>,+,(4 * %NN)}<%for.body9>) + 1*reg({0,+,16}<nuw><nsw><%for.body13>)
  Filtering loser reg({8,+,16}<nuw><nsw><%for.body13>) + reg(%bb) + 1*reg({{0,+,32}<nuw><nsw><%for.body9.preheader>,+,(4 * %NN)}<%for.body9>)
  Filtering loser reg({%bb,+,16}<nw><%for.body13>) + 1*reg({{0,+,32}<nuw><nsw><%for.body9.preheader>,+,(4 * %NN)}<%for.body9>) + imm(8)
Filtering for use LSR Use: Kind=Address of float in addrspace(0), Offsets={0}, widest fixup type: float*
  Filtering loser reg(%bb) + reg({{0,+,32}<nuw><nsw><%for.body9.preheader>,+,(4 * %NN)}<%for.body9>) + 1*reg({0,+,16}<nuw><nsw><%for.body13>) + imm(4)
  Filtering loser reg((4 + %bb)<nsw>) + reg({{0,+,32}<nuw><nsw><%for.body9.preheader>,+,(4 * %NN)}<%for.body9>) + 1*reg({0,+,16}<nuw><nsw><%for.body13>)
  Filtering loser reg({(4 + %bb)<nsw>,+,16}<nw><%for.body13>) + 1*reg({{0,+,32}<nuw><nsw><%for.body9.preheader>,+,(4 * %NN)}<%for.body9>)
  Filtering loser reg({%bb,+,16}<nw><%for.body13>) + 1*reg({{0,+,32}<nuw><nsw><%for.body9.preheader>,+,(4 * %NN)}<%for.body9>) + imm(4)
  Filtering loser reg({4,+,16}<nuw><nsw><%for.body13>) + 1*reg({{%bb,+,32}<nsw><%for.body9.preheader>,+,(4 * %NN)}<%for.body9>)
  Filtering loser reg({{4,+,32}<nuw><nsw><%for.body9.preheader>,+,(4 * %NN)}<%for.body9>) + reg(%bb) + 1*reg({0,+,16}<nuw><nsw><%for.body13>)
  Filtering loser reg({{%bb,+,32}<nsw><%for.body9.preheader>,+,(4 * %NN)}<%for.body9>) + 1*reg({0,+,16}<nuw><nsw><%for.body13>) + imm(4)
  Filtering loser reg({{(4 + %bb)<nsw>,+,32}<nsw><%for.body9.preheader>,+,(4 * %NN)}<%for.body9>) + 1*reg({0,+,16}<nuw><nsw><%for.body13>)
  Filtering loser reg({4,+,16}<nuw><nsw><%for.body13>) + reg(%bb) + 1*reg({{0,+,32}<nuw><nsw><%for.body9.preheader>,+,(4 * %NN)}<%for.body9>)
Filtering for use LSR Use: Kind=Address of float in addrspace(0), Offsets={0}, widest fixup type: float*
  Filtering loser reg(%bb) + reg({{0,+,32}<nuw><nsw><%for.body9.preheader>,+,(4 * %NN)}<%for.body9>) + 1*reg({0,+,16}<nuw><nsw><%for.body13>)
  Filtering loser reg({%bb,+,16}<nw><%for.body13>) + 1*reg({{0,+,32}<nuw><nsw><%for.body9.preheader>,+,(4 * %NN)}<%for.body9>)
  Filtering loser reg({{%bb,+,32}<nsw><%for.body9.preheader>,+,(4 * %NN)}<%for.body9>) + 1*reg({0,+,16}<nuw><nsw><%for.body13>)
Filtering for use LSR Use: Kind=Basic, Offsets={0}, all-fixups-outside-loop, widest fixup type: i32

After filtering out undesirable candidates:
LSR is examining the following uses:
  LSR Use: Kind=Basic, Offsets={0}, widest fixup type: i32
    reg({0,+,4}<nuw><nsw><%for.body13>)
  LSR Use: Kind=Address of float in addrspace(0), Offsets={0,0}, widest fixup type: float*
    reg({(12 + %tot)<nsw>,+,16}<nsw><%for.body13>)
    reg(%tot) + 1*reg({12,+,16}<nuw><nsw><%for.body13>)
    reg(%tot) + 1*reg({0,+,16}<nuw><nsw><%for.body13>) + imm(12)
    reg((12 + %tot)<nsw>) + 1*reg({0,+,16}<nuw><nsw><%for.body13>)
    12 + reg({%tot,+,16}<nsw><%for.body13>)
    4 + reg({(8 + %tot)<nsw>,+,16}<nsw><%for.body13>)
  LSR Use: Kind=Address of float in addrspace(0), Offsets={0,0}, widest fixup type: float*
    reg({(8 + %tot)<nsw>,+,16}<nsw><%for.body13>)
    reg(%tot) + 1*reg({8,+,16}<nuw><nsw><%for.body13>)
    reg(%tot) + 1*reg({0,+,16}<nuw><nsw><%for.body13>) + imm(8)
    reg((8 + %tot)<nsw>) + 1*reg({0,+,16}<nuw><nsw><%for.body13>)
    8 + reg({%tot,+,16}<nsw><%for.body13>)
    -4 + reg({(12 + %tot)<nsw>,+,16}<nsw><%for.body13>)
  LSR Use: Kind=Address of float in addrspace(0), Offsets={0,0}, widest fixup type: float*
    reg({(4 + %tot)<nsw>,+,16}<nsw><%for.body13>)
    reg(%tot) + 1*reg({4,+,16}<nuw><nsw><%for.body13>)
    reg(%tot) + 1*reg({0,+,16}<nuw><nsw><%for.body13>) + imm(4)
    reg((4 + %tot)<nsw>) + 1*reg({0,+,16}<nuw><nsw><%for.body13>)
    4 + reg({%tot,+,16}<nsw><%for.body13>)
    -8 + reg({(12 + %tot)<nsw>,+,16}<nsw><%for.body13>)
    -4 + reg({(8 + %tot)<nsw>,+,16}<nsw><%for.body13>)
  LSR Use: Kind=Address of float in addrspace(0), Offsets={0,0}, widest fixup type: float*
    reg({%tot,+,16}<nsw><%for.body13>)
    reg(%tot) + 1*reg({0,+,16}<nuw><nsw><%for.body13>)
    -12 + reg({(12 + %tot)<nsw>,+,16}<nsw><%for.body13>)
    -8 + reg({(8 + %tot)<nsw>,+,16}<nsw><%for.body13>)
  LSR Use: Kind=Address of float in addrspace(0), Offsets={0}, widest fixup type: float*
    reg({{{(12 + %bb)<nsw>,+,32}<nsw><%for.body9.preheader>,+,(4 * %NN)}<%for.body9>,+,16}<nsw><%for.body13>)
    reg((12 + %bb)<nsw>) + 1*reg({{{0,+,32}<nuw><nsw><%for.body9.preheader>,+,(4 * %NN)}<%for.body9>,+,16}<nw><%for.body13>)
    reg(%bb) + 1*reg({{{0,+,32}<nuw><nsw><%for.body9.preheader>,+,(4 * %NN)}<%for.body9>,+,16}<nw><%for.body13>) + imm(12)
    4 + reg({{{(8 + %bb)<nsw>,+,32}<nsw><%for.body9.preheader>,+,(4 * %NN)}<%for.body9>,+,16}<nsw><%for.body13>)
    12 + reg({{{%bb,+,32}<nsw><%for.body9.preheader>,+,(4 * %NN)}<%for.body9>,+,16}<nsw><%for.body13>)
  LSR Use: Kind=Address of float in addrspace(0), Offsets={0}, widest fixup type: float*
    reg({{{(8 + %bb)<nsw>,+,32}<nsw><%for.body9.preheader>,+,(4 * %NN)}<%for.body9>,+,16}<nsw><%for.body13>)
    reg((8 + %bb)<nsw>) + 1*reg({{{0,+,32}<nuw><nsw><%for.body9.preheader>,+,(4 * %NN)}<%for.body9>,+,16}<nw><%for.body13>)
    reg(%bb) + 1*reg({{{0,+,32}<nuw><nsw><%for.body9.preheader>,+,(4 * %NN)}<%for.body9>,+,16}<nw><%for.body13>) + imm(8)
    -4 + reg({{{(12 + %bb)<nsw>,+,32}<nsw><%for.body9.preheader>,+,(4 * %NN)}<%for.body9>,+,16}<nsw><%for.body13>)
    8 + reg({{{%bb,+,32}<nsw><%for.body9.preheader>,+,(4 * %NN)}<%for.body9>,+,16}<nsw><%for.body13>)
  LSR Use: Kind=Address of float in addrspace(0), Offsets={0}, widest fixup type: float*
    reg({{{(4 + %bb)<nsw>,+,32}<nsw><%for.body9.preheader>,+,(4 * %NN)}<%for.body9>,+,16}<nsw><%for.body13>)
    reg((4 + %bb)<nsw>) + 1*reg({{{0,+,32}<nuw><nsw><%for.body9.preheader>,+,(4 * %NN)}<%for.body9>,+,16}<nw><%for.body13>)
    reg(%bb) + 1*reg({{{0,+,32}<nuw><nsw><%for.body9.preheader>,+,(4 * %NN)}<%for.body9>,+,16}<nw><%for.body13>) + imm(4)
    -4 + reg({{{(8 + %bb)<nsw>,+,32}<nsw><%for.body9.preheader>,+,(4 * %NN)}<%for.body9>,+,16}<nsw><%for.body13>)
    -8 + reg({{{(12 + %bb)<nsw>,+,32}<nsw><%for.body9.preheader>,+,(4 * %NN)}<%for.body9>,+,16}<nsw><%for.body13>)
    4 + reg({{{%bb,+,32}<nsw><%for.body9.preheader>,+,(4 * %NN)}<%for.body9>,+,16}<nsw><%for.body13>)
  LSR Use: Kind=Address of float in addrspace(0), Offsets={0}, widest fixup type: float*
    reg({{{%bb,+,32}<nsw><%for.body9.preheader>,+,(4 * %NN)}<%for.body9>,+,16}<nsw><%for.body13>)
    reg(%bb) + 1*reg({{{0,+,32}<nuw><nsw><%for.body9.preheader>,+,(4 * %NN)}<%for.body9>,+,16}<nw><%for.body13>)
    -8 + reg({{{(8 + %bb)<nsw>,+,32}<nsw><%for.body9.preheader>,+,(4 * %NN)}<%for.body9>,+,16}<nsw><%for.body13>)
    -12 + reg({{{(12 + %bb)<nsw>,+,32}<nsw><%for.body9.preheader>,+,(4 * %NN)}<%for.body9>,+,16}<nsw><%for.body13>)
  LSR Use: Kind=Basic, Offsets={0}, all-fixups-outside-loop, widest fixup type: i32
    reg(%NN)
The search space is too complex.
Narrowing the search space by eliminating formulae which use a superset of registers used by other formulae.
After pre-selection:
LSR is examining the following uses:
  LSR Use: Kind=Basic, Offsets={0}, widest fixup type: i32
    reg({0,+,4}<nuw><nsw><%for.body13>)
  LSR Use: Kind=Address of float in addrspace(0), Offsets={0,0}, widest fixup type: float*
    reg({(12 + %tot)<nsw>,+,16}<nsw><%for.body13>)
    reg(%tot) + 1*reg({12,+,16}<nuw><nsw><%for.body13>)
    reg(%tot) + 1*reg({0,+,16}<nuw><nsw><%for.body13>) + imm(12)
    reg((12 + %tot)<nsw>) + 1*reg({0,+,16}<nuw><nsw><%for.body13>)
    12 + reg({%tot,+,16}<nsw><%for.body13>)
    4 + reg({(8 + %tot)<nsw>,+,16}<nsw><%for.body13>)
  LSR Use: Kind=Address of float in addrspace(0), Offsets={0,0}, widest fixup type: float*
    reg({(8 + %tot)<nsw>,+,16}<nsw><%for.body13>)
    reg(%tot) + 1*reg({8,+,16}<nuw><nsw><%for.body13>)
    reg(%tot) + 1*reg({0,+,16}<nuw><nsw><%for.body13>) + imm(8)
    reg((8 + %tot)<nsw>) + 1*reg({0,+,16}<nuw><nsw><%for.body13>)
    8 + reg({%tot,+,16}<nsw><%for.body13>)
    -4 + reg({(12 + %tot)<nsw>,+,16}<nsw><%for.body13>)
  LSR Use: Kind=Address of float in addrspace(0), Offsets={0,0}, widest fixup type: float*
    reg({(4 + %tot)<nsw>,+,16}<nsw><%for.body13>)
    reg(%tot) + 1*reg({4,+,16}<nuw><nsw><%for.body13>)
    reg(%tot) + 1*reg({0,+,16}<nuw><nsw><%for.body13>) + imm(4)
    reg((4 + %tot)<nsw>) + 1*reg({0,+,16}<nuw><nsw><%for.body13>)
    4 + reg({%tot,+,16}<nsw><%for.body13>)
    -8 + reg({(12 + %tot)<nsw>,+,16}<nsw><%for.body13>)
    -4 + reg({(8 + %tot)<nsw>,+,16}<nsw><%for.body13>)
  LSR Use: Kind=Address of float in addrspace(0), Offsets={0,0}, widest fixup type: float*
    reg({%tot,+,16}<nsw><%for.body13>)
    reg(%tot) + 1*reg({0,+,16}<nuw><nsw><%for.body13>)
    -12 + reg({(12 + %tot)<nsw>,+,16}<nsw><%for.body13>)
    -8 + reg({(8 + %tot)<nsw>,+,16}<nsw><%for.body13>)
  LSR Use: Kind=Address of float in addrspace(0), Offsets={0}, widest fixup type: float*
    reg({{{(12 + %bb)<nsw>,+,32}<nsw><%for.body9.preheader>,+,(4 * %NN)}<%for.body9>,+,16}<nsw><%for.body13>)
    reg((12 + %bb)<nsw>) + 1*reg({{{0,+,32}<nuw><nsw><%for.body9.preheader>,+,(4 * %NN)}<%for.body9>,+,16}<nw><%for.body13>)
    reg(%bb) + 1*reg({{{0,+,32}<nuw><nsw><%for.body9.preheader>,+,(4 * %NN)}<%for.body9>,+,16}<nw><%for.body13>) + imm(12)
    4 + reg({{{(8 + %bb)<nsw>,+,32}<nsw><%for.body9.preheader>,+,(4 * %NN)}<%for.body9>,+,16}<nsw><%for.body13>)
    12 + reg({{{%bb,+,32}<nsw><%for.body9.preheader>,+,(4 * %NN)}<%for.body9>,+,16}<nsw><%for.body13>)
  LSR Use: Kind=Address of float in addrspace(0), Offsets={0}, widest fixup type: float*
    reg({{{(8 + %bb)<nsw>,+,32}<nsw><%for.body9.preheader>,+,(4 * %NN)}<%for.body9>,+,16}<nsw><%for.body13>)
    reg((8 + %bb)<nsw>) + 1*reg({{{0,+,32}<nuw><nsw><%for.body9.preheader>,+,(4 * %NN)}<%for.body9>,+,16}<nw><%for.body13>)
    reg(%bb) + 1*reg({{{0,+,32}<nuw><nsw><%for.body9.preheader>,+,(4 * %NN)}<%for.body9>,+,16}<nw><%for.body13>) + imm(8)
    -4 + reg({{{(12 + %bb)<nsw>,+,32}<nsw><%for.body9.preheader>,+,(4 * %NN)}<%for.body9>,+,16}<nsw><%for.body13>)
    8 + reg({{{%bb,+,32}<nsw><%for.body9.preheader>,+,(4 * %NN)}<%for.body9>,+,16}<nsw><%for.body13>)
  LSR Use: Kind=Address of float in addrspace(0), Offsets={0}, widest fixup type: float*
    reg({{{(4 + %bb)<nsw>,+,32}<nsw><%for.body9.preheader>,+,(4 * %NN)}<%for.body9>,+,16}<nsw><%for.body13>)
    reg((4 + %bb)<nsw>) + 1*reg({{{0,+,32}<nuw><nsw><%for.body9.preheader>,+,(4 * %NN)}<%for.body9>,+,16}<nw><%for.body13>)
    reg(%bb) + 1*reg({{{0,+,32}<nuw><nsw><%for.body9.preheader>,+,(4 * %NN)}<%for.body9>,+,16}<nw><%for.body13>) + imm(4)
    -4 + reg({{{(8 + %bb)<nsw>,+,32}<nsw><%for.body9.preheader>,+,(4 * %NN)}<%for.body9>,+,16}<nsw><%for.body13>)
    -8 + reg({{{(12 + %bb)<nsw>,+,32}<nsw><%for.body9.preheader>,+,(4 * %NN)}<%for.body9>,+,16}<nsw><%for.body13>)
    4 + reg({{{%bb,+,32}<nsw><%for.body9.preheader>,+,(4 * %NN)}<%for.body9>,+,16}<nsw><%for.body13>)
  LSR Use: Kind=Address of float in addrspace(0), Offsets={0}, widest fixup type: float*
    reg({{{%bb,+,32}<nsw><%for.body9.preheader>,+,(4 * %NN)}<%for.body9>,+,16}<nsw><%for.body13>)
    reg(%bb) + 1*reg({{{0,+,32}<nuw><nsw><%for.body9.preheader>,+,(4 * %NN)}<%for.body9>,+,16}<nw><%for.body13>)
    -8 + reg({{{(8 + %bb)<nsw>,+,32}<nsw><%for.body9.preheader>,+,(4 * %NN)}<%for.body9>,+,16}<nsw><%for.body13>)
    -12 + reg({{{(12 + %bb)<nsw>,+,32}<nsw><%for.body9.preheader>,+,(4 * %NN)}<%for.body9>,+,16}<nsw><%for.body13>)
  LSR Use: Kind=Basic, Offsets={0}, all-fixups-outside-loop, widest fixup type: i32
    reg(%NN)
The search space is too complex.
Narrowing the search space by assuming that uses separated by a constant offset will use the same registers.
  Deleting use LSR Use: Kind=Address of float in addrspace(0), Offsets={0,0}, widest fixup type: float*
New fixup has offset 12
New fixup has offset 12
  Deleting use LSR Use: Kind=Address of float in addrspace(0), Offsets={0,0}, widest fixup type: float*
New fixup has offset 8
New fixup has offset 8
  Deleting use LSR Use: Kind=Address of float in addrspace(0), Offsets={0}, widest fixup type: float*
New fixup has offset -8
  Deleting use LSR Use: Kind=Address of float in addrspace(0), Offsets={0}, widest fixup type: float*
New fixup has offset -4
  Deleting use LSR Use: Kind=Address of float in addrspace(0), Offsets={0,-8,-4}, widest fixup type: float*
New fixup has offset -4
New fixup has offset -12
New fixup has offset -8
  Deleting use LSR Use: Kind=Address of float in addrspace(0), Offsets={0,0}, widest fixup type: float*
New fixup has offset 4
New fixup has offset 4
After pre-selection:
LSR is examining the following uses:
  LSR Use: Kind=Basic, Offsets={0}, widest fixup type: i32
    reg({0,+,4}<nuw><nsw><%for.body13>)
  LSR Use: Kind=Basic, Offsets={0}, all-fixups-outside-loop, widest fixup type: i32
    reg(%NN)
  LSR Use: Kind=Address of float in addrspace(0), Offsets={0,-4,-12,-8}, widest fixup type: float*
    reg({{{(12 + %bb)<nsw>,+,32}<nsw><%for.body9.preheader>,+,(4 * %NN)}<%for.body9>,+,16}<nsw><%for.body13>)
    reg((12 + %bb)<nsw>) + 1*reg({{{0,+,32}<nuw><nsw><%for.body9.preheader>,+,(4 * %NN)}<%for.body9>,+,16}<nw><%for.body13>)
    reg(%bb) + 1*reg({{{0,+,32}<nuw><nsw><%for.body9.preheader>,+,(4 * %NN)}<%for.body9>,+,16}<nw><%for.body13>) + imm(12)
    4 + reg({{{(8 + %bb)<nsw>,+,32}<nsw><%for.body9.preheader>,+,(4 * %NN)}<%for.body9>,+,16}<nsw><%for.body13>)
    12 + reg({{{%bb,+,32}<nsw><%for.body9.preheader>,+,(4 * %NN)}<%for.body9>,+,16}<nsw><%for.body13>)
  LSR Use: Kind=Address of float in addrspace(0), Offsets={0,0,12,12,8,8,4,4}, widest fixup type: float*
    reg({%tot,+,16}<nsw><%for.body13>)
    reg(%tot) + 1*reg({0,+,16}<nuw><nsw><%for.body13>)
    -12 + reg({(12 + %tot)<nsw>,+,16}<nsw><%for.body13>)
    -8 + reg({(8 + %tot)<nsw>,+,16}<nsw><%for.body13>)
New best at 4 regs, with addrec cost 3, plus 40 imm cost, plus 1 setup cost.
 Regs: {0,+,4}<nuw><nsw><%for.body13> %NN {{{(12 + %bb)<nsw>,+,32}<nsw><%for.body9.preheader>,+,(4 * %NN)}<%for.body9>,+,16}<nsw><%for.body13> {%tot,+,16}<nsw><%for.body13>
New best at 4 regs, with addrec cost 3, plus 36 imm cost, plus 2 setup cost.
 Regs: {0,+,4}<nuw><nsw><%for.body13> %NN {{{(12 + %bb)<nsw>,+,32}<nsw><%for.body9.preheader>,+,(4 * %NN)}<%for.body9>,+,16}<nsw><%for.body13> {(12 + %tot)<nsw>,+,16}<nsw><%for.body13>
New best at 4 regs, with addrec cost 3, plus 34 imm cost, plus 2 setup cost.
 Regs: {0,+,4}<nuw><nsw><%for.body13> %NN {{{(12 + %bb)<nsw>,+,32}<nsw><%for.body9.preheader>,+,(4 * %NN)}<%for.body9>,+,16}<nsw><%for.body13> {(8 + %tot)<nsw>,+,16}<nsw><%for.body13>
New best at 4 regs, with addrec cost 3, plus 33 imm cost, plus 2 setup cost.
 Regs: {0,+,4}<nuw><nsw><%for.body13> %NN {{{(8 + %bb)<nsw>,+,32}<nsw><%for.body9.preheader>,+,(4 * %NN)}<%for.body9>,+,16}<nsw><%for.body13> {(8 + %tot)<nsw>,+,16}<nsw><%for.body13>

The chosen solution requires 4 regs, with addrec cost 3, plus 33 imm cost, plus 2 setup cost:
  LSR Use: Kind=Basic, Offsets={0}, widest fixup type: i32
    reg({0,+,4}<nuw><nsw><%for.body13>)
  LSR Use: Kind=Basic, Offsets={0}, all-fixups-outside-loop, widest fixup type: i32
    reg(%NN)
  LSR Use: Kind=Address of float in addrspace(0), Offsets={0,-4,-12,-8}, widest fixup type: float*
    4 + reg({{{(8 + %bb)<nsw>,+,32}<nsw><%for.body9.preheader>,+,(4 * %NN)}<%for.body9>,+,16}<nsw><%for.body13>)
  LSR Use: Kind=Address of float in addrspace(0), Offsets={0,0,12,12,8,8,4,4}, widest fixup type: float*
    -8 + reg({(8 + %tot)<nsw>,+,16}<nsw><%for.body13>)
*** IR Dump After Loop Strength Reduction ***
for.body13:                                       ; preds = %for.body13, %for.body9
  %lsr.iv12 = phi [8 x float]* [ %11, %for.body13 ], [ %scevgep1011, %for.body9 ]
  %lsr.iv5 = phi float* [ %scevgep6, %for.body13 ], [ %lsr.iv2, %for.body9 ]
  %j1.1137 = phi i32 [ 0, %for.body9 ], [ %add59, %for.body13 ]
  %lsr.iv1214 = bitcast [8 x float]* %lsr.iv12 to float*
  %scevgep8 = getelementptr float, float* %lsr.iv5, i32 -2
  %3 = load volatile float, float* %scevgep8, align 4, !tbaa !1
  %scevgep9 = getelementptr float, float* %lsr.iv5, i32 -1
  %4 = load volatile float, float* %scevgep9, align 4, !tbaa !1
  %5 = load volatile float, float* %lsr.iv5, align 4, !tbaa !1
  %scevgep7 = getelementptr float, float* %lsr.iv5, i32 1
  %6 = load volatile float, float* %scevgep7, align 4, !tbaa !1
  %mul40 = fmul float %2, %3
  %scevgep15 = getelementptr float, float* %lsr.iv1214, i32 -2
  %7 = load float, float* %scevgep15, align 4, !tbaa !1
  %add42 = fadd float %mul40, %7
  store float %add42, float* %scevgep15, align 4, !tbaa !1
  %mul44 = fmul float %2, %4
  %scevgep17 = getelementptr float, float* %lsr.iv1214, i32 -1
  %8 = load float, float* %scevgep17, align 4, !tbaa !1
  %add47 = fadd float %mul44, %8
  store float %add47, float* %scevgep17, align 4, !tbaa !1
  %mul49 = fmul float %2, %5
  %9 = load float, float* %lsr.iv1214, align 4, !tbaa !1
  %add52 = fadd float %mul49, %9
  store float %add52, float* %lsr.iv1214, align 4, !tbaa !1
  %mul54 = fmul float %2, %6
  %scevgep16 = getelementptr float, float* %lsr.iv1214, i32 1
  %10 = load float, float* %scevgep16, align 4, !tbaa !1
  %add57 = fadd float %mul54, %10
  store float %add57, float* %scevgep16, align 4, !tbaa !1
  %add59 = add nuw nsw i32 %j1.1137, 4
  %scevgep6 = getelementptr float, float* %lsr.iv5, i32 4
  %scevgep13 = getelementptr [8 x float], [8 x float]* %lsr.iv12, i32 0, i32 4
  %11 = bitcast float* %scevgep13 to [8 x float]*
  %cmp12 = icmp slt i32 %add59, 8
  br i1 %cmp12, label %for.body13, label %for.end60
FOUND USER in other loop:   %lsr.iv5 = phi float* [ %scevgep6, %for.body13 ], [ %lsr.iv2, %for.body9 ]
   OF SCEV: {{(8 + %bb)<nsw>,+,32}<nsw><%for.body9.preheader>,+,(4 * %NN)}<%for.body9>
FOUND USER:   %exitcond = icmp eq i32 %inc62, %NN
   OF SCEV: {1,+,1}<nuw><%for.body9>
KnuthDiv: m=1 n=3
KnuthDiv: original: 0 4294967295 4294967295 2147483649 0 by 1 0 0
KnuthDiv:   normal: 2147483647 4294967295 3221225472 2147483648 0 by 2147483648 0 0
KnuthDiv: quotient digit #1
KnuthDiv: dividend == 9223372036854775807
KnuthDiv: qp == 4294967295, rp == 2147483647
KnuthDiv: u[j+i] = 2147483648, borrow = 0
KnuthDiv: u[j+i] = 3221225472, borrow = 0
KnuthDiv: u[j+i] = 2147483647, borrow = 2147483647
KnuthDiv: after subtraction: 0 2147483647 3221225472 2147483648 0
KnuthDiv: after correction: 0 2147483647 3221225472 2147483648 0
KnuthDiv: digit result = 4294967295
KnuthDiv: quotient digit #0
KnuthDiv: dividend == 9223372035781033984
KnuthDiv: qp == 4294967295, rp == 1073741824
KnuthDiv: u[j+i] = 0, borrow = 0
KnuthDiv: u[j+i] = 2147483648, borrow = 0
KnuthDiv: u[j+i] = 1073741824, borrow = 2147483647
KnuthDiv: after subtraction: 0 0 1073741824 2147483648 0
KnuthDiv: after correction: 0 0 1073741824 2147483648 0
KnuthDiv: digit result = 4294967295
KnuthDiv: quotient: 4294967295 4294967295
KnuthDiv: remainder: 0 2147483649 0

KnuthDiv: m=1 n=3
KnuthDiv: original: 0 4294967295 4294967295 2147483649 0 by 1 0 0
KnuthDiv:   normal: 2147483647 4294967295 3221225472 2147483648 0 by 2147483648 0 0
KnuthDiv: quotient digit #1
KnuthDiv: dividend == 9223372036854775807
KnuthDiv: qp == 4294967295, rp == 2147483647
KnuthDiv: u[j+i] = 2147483648, borrow = 0
KnuthDiv: u[j+i] = 3221225472, borrow = 0
KnuthDiv: u[j+i] = 2147483647, borrow = 2147483647
KnuthDiv: after subtraction: 0 2147483647 3221225472 2147483648 0
KnuthDiv: after correction: 0 2147483647 3221225472 2147483648 0
KnuthDiv: digit result = 4294967295
KnuthDiv: quotient digit #0
KnuthDiv: dividend == 9223372035781033984
KnuthDiv: qp == 4294967295, rp == 1073741824
KnuthDiv: u[j+i] = 0, borrow = 0
KnuthDiv: u[j+i] = 2147483648, borrow = 0
KnuthDiv: u[j+i] = 1073741824, borrow = 2147483647
KnuthDiv: after subtraction: 0 0 1073741824 2147483648 0
KnuthDiv: after correction: 0 0 1073741824 2147483648 0
KnuthDiv: digit result = 4294967295
KnuthDiv: quotient: 4294967295 4294967295
KnuthDiv: remainder: 0 2147483649 0

KnuthDiv: m=1 n=3
KnuthDiv: original: 0 4294967295 4294967295 2147483649 0 by 1 0 0
KnuthDiv:   normal: 2147483647 4294967295 3221225472 2147483648 0 by 2147483648 0 0
KnuthDiv: quotient digit #1
KnuthDiv: dividend == 9223372036854775807
KnuthDiv: qp == 4294967295, rp == 2147483647
KnuthDiv: u[j+i] = 2147483648, borrow = 0
KnuthDiv: u[j+i] = 3221225472, borrow = 0
KnuthDiv: u[j+i] = 2147483647, borrow = 2147483647
KnuthDiv: after subtraction: 0 2147483647 3221225472 2147483648 0
KnuthDiv: after correction: 0 2147483647 3221225472 2147483648 0
KnuthDiv: digit result = 4294967295
KnuthDiv: quotient digit #0
KnuthDiv: dividend == 9223372035781033984
KnuthDiv: qp == 4294967295, rp == 1073741824
KnuthDiv: u[j+i] = 0, borrow = 0
KnuthDiv: u[j+i] = 2147483648, borrow = 0
KnuthDiv: u[j+i] = 1073741824, borrow = 2147483647
KnuthDiv: after subtraction: 0 0 1073741824 2147483648 0
KnuthDiv: after correction: 0 0 1073741824 2147483648 0
KnuthDiv: digit result = 4294967295
KnuthDiv: quotient: 4294967295 4294967295
KnuthDiv: remainder: 0 2147483649 0

KnuthDiv: m=1 n=3
KnuthDiv: original: 0 4294967295 4294967295 2147483649 0 by 1 0 0
KnuthDiv:   normal: 2147483647 4294967295 3221225472 2147483648 0 by 2147483648 0 0
KnuthDiv: quotient digit #1
KnuthDiv: dividend == 9223372036854775807
KnuthDiv: qp == 4294967295, rp == 2147483647
KnuthDiv: u[j+i] = 2147483648, borrow = 0
KnuthDiv: u[j+i] = 3221225472, borrow = 0
KnuthDiv: u[j+i] = 2147483647, borrow = 2147483647
KnuthDiv: after subtraction: 0 2147483647 3221225472 2147483648 0
KnuthDiv: after correction: 0 2147483647 3221225472 2147483648 0
KnuthDiv: digit result = 4294967295
KnuthDiv: quotient digit #0
KnuthDiv: dividend == 9223372035781033984
KnuthDiv: qp == 4294967295, rp == 1073741824
KnuthDiv: u[j+i] = 0, borrow = 0
KnuthDiv: u[j+i] = 2147483648, borrow = 0
KnuthDiv: u[j+i] = 1073741824, borrow = 2147483647
KnuthDiv: after subtraction: 0 0 1073741824 2147483648 0
KnuthDiv: after correction: 0 0 1073741824 2147483648 0
KnuthDiv: digit result = 4294967295
KnuthDiv: quotient: 4294967295 4294967295
KnuthDiv: remainder: 0 2147483649 0

KnuthDiv: m=1 n=3
KnuthDiv: original: 0 4294967295 4294967295 2147483649 0 by 1 0 0
KnuthDiv:   normal: 2147483647 4294967295 3221225472 2147483648 0 by 2147483648 0 0
KnuthDiv: quotient digit #1
KnuthDiv: dividend == 9223372036854775807
KnuthDiv: qp == 4294967295, rp == 2147483647
KnuthDiv: u[j+i] = 2147483648, borrow = 0
KnuthDiv: u[j+i] = 3221225472, borrow = 0
KnuthDiv: u[j+i] = 2147483647, borrow = 2147483647
KnuthDiv: after subtraction: 0 2147483647 3221225472 2147483648 0
KnuthDiv: after correction: 0 2147483647 3221225472 2147483648 0
KnuthDiv: digit result = 4294967295
KnuthDiv: quotient digit #0
KnuthDiv: dividend == 9223372035781033984
KnuthDiv: qp == 4294967295, rp == 1073741824
KnuthDiv: u[j+i] = 0, borrow = 0
KnuthDiv: u[j+i] = 2147483648, borrow = 0
KnuthDiv: u[j+i] = 1073741824, borrow = 2147483647
KnuthDiv: after subtraction: 0 0 1073741824 2147483648 0
KnuthDiv: after correction: 0 0 1073741824 2147483648 0
KnuthDiv: digit result = 4294967295
KnuthDiv: quotient: 4294967295 4294967295
KnuthDiv: remainder: 0 2147483649 0

KnuthDiv: m=1 n=3
KnuthDiv: original: 0 4294967295 4294967295 2147483649 0 by 1 0 0
KnuthDiv:   normal: 2147483647 4294967295 3221225472 2147483648 0 by 2147483648 0 0
KnuthDiv: quotient digit #1
KnuthDiv: dividend == 9223372036854775807
KnuthDiv: qp == 4294967295, rp == 2147483647
KnuthDiv: u[j+i] = 2147483648, borrow = 0
KnuthDiv: u[j+i] = 3221225472, borrow = 0
KnuthDiv: u[j+i] = 2147483647, borrow = 2147483647
KnuthDiv: after subtraction: 0 2147483647 3221225472 2147483648 0
KnuthDiv: after correction: 0 2147483647 3221225472 2147483648 0
KnuthDiv: digit result = 4294967295
KnuthDiv: quotient digit #0
KnuthDiv: dividend == 9223372035781033984
KnuthDiv: qp == 4294967295, rp == 1073741824
KnuthDiv: u[j+i] = 0, borrow = 0
KnuthDiv: u[j+i] = 2147483648, borrow = 0
KnuthDiv: u[j+i] = 1073741824, borrow = 2147483647
KnuthDiv: after subtraction: 0 0 1073741824 2147483648 0
KnuthDiv: after correction: 0 0 1073741824 2147483648 0
KnuthDiv: digit result = 4294967295
KnuthDiv: quotient: 4294967295 4294967295
KnuthDiv: remainder: 0 2147483649 0

KnuthDiv: m=1 n=3
KnuthDiv: original: 0 4294967295 4294967295 2147483649 0 by 1 0 0
KnuthDiv:   normal: 2147483647 4294967295 3221225472 2147483648 0 by 2147483648 0 0
KnuthDiv: quotient digit #1
KnuthDiv: dividend == 9223372036854775807
KnuthDiv: qp == 4294967295, rp == 2147483647
KnuthDiv: u[j+i] = 2147483648, borrow = 0
KnuthDiv: u[j+i] = 3221225472, borrow = 0
KnuthDiv: u[j+i] = 2147483647, borrow = 2147483647
KnuthDiv: after subtraction: 0 2147483647 3221225472 2147483648 0
KnuthDiv: after correction: 0 2147483647 3221225472 2147483648 0
KnuthDiv: digit result = 4294967295
KnuthDiv: quotient digit #0
KnuthDiv: dividend == 9223372035781033984
KnuthDiv: qp == 4294967295, rp == 1073741824
KnuthDiv: u[j+i] = 0, borrow = 0
KnuthDiv: u[j+i] = 2147483648, borrow = 0
KnuthDiv: u[j+i] = 1073741824, borrow = 2147483647
KnuthDiv: after subtraction: 0 0 1073741824 2147483648 0
KnuthDiv: after correction: 0 0 1073741824 2147483648 0
KnuthDiv: digit result = 4294967295
KnuthDiv: quotient: 4294967295 4294967295
KnuthDiv: remainder: 0 2147483649 0

KnuthDiv: m=1 n=3
KnuthDiv: original: 0 4294967295 4294967295 2147483649 0 by 1 0 0
KnuthDiv:   normal: 2147483647 4294967295 3221225472 2147483648 0 by 2147483648 0 0
KnuthDiv: quotient digit #1
KnuthDiv: dividend == 9223372036854775807
KnuthDiv: qp == 4294967295, rp == 2147483647
KnuthDiv: u[j+i] = 2147483648, borrow = 0
KnuthDiv: u[j+i] = 3221225472, borrow = 0
KnuthDiv: u[j+i] = 2147483647, borrow = 2147483647
KnuthDiv: after subtraction: 0 2147483647 3221225472 2147483648 0
KnuthDiv: after correction: 0 2147483647 3221225472 2147483648 0
KnuthDiv: digit result = 4294967295
KnuthDiv: quotient digit #0
KnuthDiv: dividend == 9223372035781033984
KnuthDiv: qp == 4294967295, rp == 1073741824
KnuthDiv: u[j+i] = 0, borrow = 0
KnuthDiv: u[j+i] = 2147483648, borrow = 0
KnuthDiv: u[j+i] = 1073741824, borrow = 2147483647
KnuthDiv: after subtraction: 0 0 1073741824 2147483648 0
KnuthDiv: after correction: 0 0 1073741824 2147483648 0
KnuthDiv: digit result = 4294967295
KnuthDiv: quotient: 4294967295 4294967295
KnuthDiv: remainder: 0 2147483649 0

KnuthDiv: m=1 n=3
KnuthDiv: original: 0 4294967295 4294967295 2147483649 0 by 1 0 0
KnuthDiv:   normal: 2147483647 4294967295 3221225472 2147483648 0 by 2147483648 0 0
KnuthDiv: quotient digit #1
KnuthDiv: dividend == 9223372036854775807
KnuthDiv: qp == 4294967295, rp == 2147483647
KnuthDiv: u[j+i] = 2147483648, borrow = 0
KnuthDiv: u[j+i] = 3221225472, borrow = 0
KnuthDiv: u[j+i] = 2147483647, borrow = 2147483647
KnuthDiv: after subtraction: 0 2147483647 3221225472 2147483648 0
KnuthDiv: after correction: 0 2147483647 3221225472 2147483648 0
KnuthDiv: digit result = 4294967295
KnuthDiv: quotient digit #0
KnuthDiv: dividend == 9223372035781033984
KnuthDiv: qp == 4294967295, rp == 1073741824
KnuthDiv: u[j+i] = 0, borrow = 0
KnuthDiv: u[j+i] = 2147483648, borrow = 0
KnuthDiv: u[j+i] = 1073741824, borrow = 2147483647
KnuthDiv: after subtraction: 0 0 1073741824 2147483648 0
KnuthDiv: after correction: 0 0 1073741824 2147483648 0
KnuthDiv: digit result = 4294967295
KnuthDiv: quotient: 4294967295 4294967295
KnuthDiv: remainder: 0 2147483649 0

KnuthDiv: m=1 n=3
KnuthDiv: original: 0 4294967295 4294967295 2147483649 0 by 1 0 0
KnuthDiv:   normal: 2147483647 4294967295 3221225472 2147483648 0 by 2147483648 0 0
KnuthDiv: quotient digit #1
KnuthDiv: dividend == 9223372036854775807
KnuthDiv: qp == 4294967295, rp == 2147483647
KnuthDiv: u[j+i] = 2147483648, borrow = 0
KnuthDiv: u[j+i] = 3221225472, borrow = 0
KnuthDiv: u[j+i] = 2147483647, borrow = 2147483647
KnuthDiv: after subtraction: 0 2147483647 3221225472 2147483648 0
KnuthDiv: after correction: 0 2147483647 3221225472 2147483648 0
KnuthDiv: digit result = 4294967295
KnuthDiv: quotient digit #0
KnuthDiv: dividend == 9223372035781033984
KnuthDiv: qp == 4294967295, rp == 1073741824
KnuthDiv: u[j+i] = 0, borrow = 0
KnuthDiv: u[j+i] = 2147483648, borrow = 0
KnuthDiv: u[j+i] = 1073741824, borrow = 2147483647
KnuthDiv: after subtraction: 0 0 1073741824 2147483648 0
KnuthDiv: after correction: 0 0 1073741824 2147483648 0
KnuthDiv: digit result = 4294967295
KnuthDiv: quotient: 4294967295 4294967295
KnuthDiv: remainder: 0 2147483649 0

FOUND USER:   %2 = load volatile float, float* %add.ptr10, align 4, !tbaa !1
   OF SCEV: {{%aa,+,(4 * %NN)}<nsw><%for.body3.lr.ph>,+,4}<nsw><%for.body9>
*** IR Dump Before Loop Strength Reduction ***
for.body9:                                        ; preds = %for.end60, %for.body9.preheader
  %lsr.iv2 = phi float* [ %12, %for.end60 ], [ %lsr.iv, %for.body9.preheader ]
  %x.0139 = phi i32 [ %inc62, %for.end60 ], [ 0, %for.body9.preheader ]
  %lsr.iv23 = bitcast float* %lsr.iv2 to i1*
  %add.ptr10 = getelementptr inbounds float, float* %add.ptr, i32 %x.0139
  %2 = load volatile float, float* %add.ptr10, align 4, !tbaa !1
  br label %for.body13

for.body13:                                       ; preds = %for.body13, %for.body9
  %lsr.iv12 = phi [8 x float]* [ %11, %for.body13 ], [ %scevgep1011, %for.body9 ]
  %lsr.iv5 = phi float* [ %scevgep6, %for.body13 ], [ %lsr.iv2, %for.body9 ]
  %j1.1137 = phi i32 [ 0, %for.body9 ], [ %add59, %for.body13 ]
  %lsr.iv1214 = bitcast [8 x float]* %lsr.iv12 to float*
  %scevgep8 = getelementptr float, float* %lsr.iv5, i32 -2
  %3 = load volatile float, float* %scevgep8, align 4, !tbaa !1
  %scevgep9 = getelementptr float, float* %lsr.iv5, i32 -1
  %4 = load volatile float, float* %scevgep9, align 4, !tbaa !1
  %5 = load volatile float, float* %lsr.iv5, align 4, !tbaa !1
  %scevgep7 = getelementptr float, float* %lsr.iv5, i32 1
  %6 = load volatile float, float* %scevgep7, align 4, !tbaa !1
  %mul40 = fmul float %2, %3
  %scevgep15 = getelementptr float, float* %lsr.iv1214, i32 -2
  %7 = load float, float* %scevgep15, align 4, !tbaa !1
  %add42 = fadd float %mul40, %7
  store float %add42, float* %scevgep15, align 4, !tbaa !1
  %mul44 = fmul float %2, %4
  %scevgep17 = getelementptr float, float* %lsr.iv1214, i32 -1
  %8 = load float, float* %scevgep17, align 4, !tbaa !1
  %add47 = fadd float %mul44, %8
  store float %add47, float* %scevgep17, align 4, !tbaa !1
  %mul49 = fmul float %2, %5
  %9 = load float, float* %lsr.iv1214, align 4, !tbaa !1
  %add52 = fadd float %mul49, %9
  store float %add52, float* %lsr.iv1214, align 4, !tbaa !1
  %mul54 = fmul float %2, %6
  %scevgep16 = getelementptr float, float* %lsr.iv1214, i32 1
  %10 = load float, float* %scevgep16, align 4, !tbaa !1
  %add57 = fadd float %mul54, %10
  store float %add57, float* %scevgep16, align 4, !tbaa !1
  %add59 = add nuw nsw i32 %j1.1137, 4
  %scevgep6 = getelementptr float, float* %lsr.iv5, i32 4
  %scevgep13 = getelementptr [8 x float], [8 x float]* %lsr.iv12, i32 0, i32 4
  %11 = bitcast float* %scevgep13 to [8 x float]*
  %cmp12 = icmp slt i32 %add59, 8
  br i1 %cmp12, label %for.body13, label %for.end60

for.end60:                                        ; preds = %for.body13
  %inc62 = add nuw nsw i32 %x.0139, 1
  %exitcond = icmp eq i32 %inc62, %NN
  %scevgep4 = getelementptr i1, i1* %lsr.iv23, i32 %1
  %12 = bitcast i1* %scevgep4 to float*
  br i1 %exitcond, label %for.cond64.preheader, label %for.body9

LSR on loop %for.body9:
  Change loop exiting icmp to use postinc iv:   %exitcond = icmp eq i32 %inc62, %NN
LSR skipping outer loop Loop at depth 3 containing: %for.body9<header>,%for.body13,%for.end60<latch><exiting>
    Loop at depth 4 containing: %for.body13<header><latch><exiting>

*** IR Dump After Loop Strength Reduction ***
for.body9:                                        ; preds = %for.end60, %for.body9.preheader
  %lsr.iv2 = phi float* [ %12, %for.end60 ], [ %lsr.iv, %for.body9.preheader ]
  %x.0139 = phi i32 [ %inc62, %for.end60 ], [ 0, %for.body9.preheader ]
  %lsr.iv23 = bitcast float* %lsr.iv2 to i1*
  %add.ptr10 = getelementptr inbounds float, float* %add.ptr, i32 %x.0139
  %2 = load volatile float, float* %add.ptr10, align 4, !tbaa !1
  br label %for.body13

for.body13:                                       ; preds = %for.body13, %for.body9
  %lsr.iv12 = phi [8 x float]* [ %11, %for.body13 ], [ %scevgep1011, %for.body9 ]
  %lsr.iv5 = phi float* [ %scevgep6, %for.body13 ], [ %lsr.iv2, %for.body9 ]
  %j1.1137 = phi i32 [ 0, %for.body9 ], [ %add59, %for.body13 ]
  %lsr.iv1214 = bitcast [8 x float]* %lsr.iv12 to float*
  %scevgep8 = getelementptr float, float* %lsr.iv5, i32 -2
  %3 = load volatile float, float* %scevgep8, align 4, !tbaa !1
  %scevgep9 = getelementptr float, float* %lsr.iv5, i32 -1
  %4 = load volatile float, float* %scevgep9, align 4, !tbaa !1
  %5 = load volatile float, float* %lsr.iv5, align 4, !tbaa !1
  %scevgep7 = getelementptr float, float* %lsr.iv5, i32 1
  %6 = load volatile float, float* %scevgep7, align 4, !tbaa !1
  %mul40 = fmul float %2, %3
  %scevgep15 = getelementptr float, float* %lsr.iv1214, i32 -2
  %7 = load float, float* %scevgep15, align 4, !tbaa !1
  %add42 = fadd float %mul40, %7
  store float %add42, float* %scevgep15, align 4, !tbaa !1
  %mul44 = fmul float %2, %4
  %scevgep17 = getelementptr float, float* %lsr.iv1214, i32 -1
  %8 = load float, float* %scevgep17, align 4, !tbaa !1
  %add47 = fadd float %mul44, %8
  store float %add47, float* %scevgep17, align 4, !tbaa !1
  %mul49 = fmul float %2, %5
  %9 = load float, float* %lsr.iv1214, align 4, !tbaa !1
  %add52 = fadd float %mul49, %9
  store float %add52, float* %lsr.iv1214, align 4, !tbaa !1
  %mul54 = fmul float %2, %6
  %scevgep16 = getelementptr float, float* %lsr.iv1214, i32 1
  %10 = load float, float* %scevgep16, align 4, !tbaa !1
  %add57 = fadd float %mul54, %10
  store float %add57, float* %scevgep16, align 4, !tbaa !1
  %add59 = add nuw nsw i32 %j1.1137, 4
  %scevgep6 = getelementptr float, float* %lsr.iv5, i32 4
  %scevgep13 = getelementptr [8 x float], [8 x float]* %lsr.iv12, i32 0, i32 4
  %11 = bitcast float* %scevgep13 to [8 x float]*
  %cmp12 = icmp slt i32 %add59, 8
  br i1 %cmp12, label %for.body13, label %for.end60

for.end60:                                        ; preds = %for.body13
  %inc62 = add nuw nsw i32 %x.0139, 1
  %scevgep4 = getelementptr i1, i1* %lsr.iv23, i32 %1
  %12 = bitcast i1* %scevgep4 to float*
  %exitcond = icmp eq i32 %inc62, %NN
  br i1 %exitcond, label %for.cond64.preheader, label %for.body9
FOUND USER:   %exitcond145 = icmp eq i32 %add74, 8
   OF SCEV: {1,+,1}<nuw><nsw><%for.body66>
KnuthDiv: m=1 n=3
KnuthDiv: original: 0 4294967295 4294967295 2147483649 0 by 1 0 0
KnuthDiv:   normal: 2147483647 4294967295 3221225472 2147483648 0 by 2147483648 0 0
KnuthDiv: quotient digit #1
KnuthDiv: dividend == 9223372036854775807
KnuthDiv: qp == 4294967295, rp == 2147483647
KnuthDiv: u[j+i] = 2147483648, borrow = 0
KnuthDiv: u[j+i] = 3221225472, borrow = 0
KnuthDiv: u[j+i] = 2147483647, borrow = 2147483647
KnuthDiv: after subtraction: 0 2147483647 3221225472 2147483648 0
KnuthDiv: after correction: 0 2147483647 3221225472 2147483648 0
KnuthDiv: digit result = 4294967295
KnuthDiv: quotient digit #0
KnuthDiv: dividend == 9223372035781033984
KnuthDiv: qp == 4294967295, rp == 1073741824
KnuthDiv: u[j+i] = 0, borrow = 0
KnuthDiv: u[j+i] = 2147483648, borrow = 0
KnuthDiv: u[j+i] = 1073741824, borrow = 2147483647
KnuthDiv: after subtraction: 0 0 1073741824 2147483648 0
KnuthDiv: after correction: 0 0 1073741824 2147483648 0
KnuthDiv: digit result = 4294967295
KnuthDiv: quotient: 4294967295 4294967295
KnuthDiv: remainder: 0 2147483649 0

KnuthDiv: m=1 n=3
KnuthDiv: original: 0 4294967295 4294967295 2147483649 0 by 1 0 0
KnuthDiv:   normal: 2147483647 4294967295 3221225472 2147483648 0 by 2147483648 0 0
KnuthDiv: quotient digit #1
KnuthDiv: dividend == 9223372036854775807
KnuthDiv: qp == 4294967295, rp == 2147483647
KnuthDiv: u[j+i] = 2147483648, borrow = 0
KnuthDiv: u[j+i] = 3221225472, borrow = 0
KnuthDiv: u[j+i] = 2147483647, borrow = 2147483647
KnuthDiv: after subtraction: 0 2147483647 3221225472 2147483648 0
KnuthDiv: after correction: 0 2147483647 3221225472 2147483648 0
KnuthDiv: digit result = 4294967295
KnuthDiv: quotient digit #0
KnuthDiv: dividend == 9223372035781033984
KnuthDiv: qp == 4294967295, rp == 1073741824
KnuthDiv: u[j+i] = 0, borrow = 0
KnuthDiv: u[j+i] = 2147483648, borrow = 0
KnuthDiv: u[j+i] = 1073741824, borrow = 2147483647
KnuthDiv: after subtraction: 0 0 1073741824 2147483648 0
KnuthDiv: after correction: 0 0 1073741824 2147483648 0
KnuthDiv: digit result = 4294967295
KnuthDiv: quotient: 4294967295 4294967295
KnuthDiv: remainder: 0 2147483649 0

KnuthDiv: m=1 n=3
KnuthDiv: original: 0 4294967295 4294967295 2147483649 0 by 1 0 0
KnuthDiv:   normal: 2147483647 4294967295 3221225472 2147483648 0 by 2147483648 0 0
KnuthDiv: quotient digit #1
KnuthDiv: dividend == 9223372036854775807
KnuthDiv: qp == 4294967295, rp == 2147483647
KnuthDiv: u[j+i] = 2147483648, borrow = 0
KnuthDiv: u[j+i] = 3221225472, borrow = 0
KnuthDiv: u[j+i] = 2147483647, borrow = 2147483647
KnuthDiv: after subtraction: 0 2147483647 3221225472 2147483648 0
KnuthDiv: after correction: 0 2147483647 3221225472 2147483648 0
KnuthDiv: digit result = 4294967295
KnuthDiv: quotient digit #0
KnuthDiv: dividend == 9223372035781033984
KnuthDiv: qp == 4294967295, rp == 1073741824
KnuthDiv: u[j+i] = 0, borrow = 0
KnuthDiv: u[j+i] = 2147483648, borrow = 0
KnuthDiv: u[j+i] = 1073741824, borrow = 2147483647
KnuthDiv: after subtraction: 0 0 1073741824 2147483648 0
KnuthDiv: after correction: 0 0 1073741824 2147483648 0
KnuthDiv: digit result = 4294967295
KnuthDiv: quotient: 4294967295 4294967295
KnuthDiv: remainder: 0 2147483649 0

KnuthDiv: m=1 n=3
KnuthDiv: original: 0 4294967295 4294967295 2147483649 0 by 1 0 0
KnuthDiv:   normal: 2147483647 4294967295 3221225472 2147483648 0 by 2147483648 0 0
KnuthDiv: quotient digit #1
KnuthDiv: dividend == 9223372036854775807
KnuthDiv: qp == 4294967295, rp == 2147483647
KnuthDiv: u[j+i] = 2147483648, borrow = 0
KnuthDiv: u[j+i] = 3221225472, borrow = 0
KnuthDiv: u[j+i] = 2147483647, borrow = 2147483647
KnuthDiv: after subtraction: 0 2147483647 3221225472 2147483648 0
KnuthDiv: after correction: 0 2147483647 3221225472 2147483648 0
KnuthDiv: digit result = 4294967295
KnuthDiv: quotient digit #0
KnuthDiv: dividend == 9223372035781033984
KnuthDiv: qp == 4294967295, rp == 1073741824
KnuthDiv: u[j+i] = 0, borrow = 0
KnuthDiv: u[j+i] = 2147483648, borrow = 0
KnuthDiv: u[j+i] = 1073741824, borrow = 2147483647
KnuthDiv: after subtraction: 0 0 1073741824 2147483648 0
KnuthDiv: after correction: 0 0 1073741824 2147483648 0
KnuthDiv: digit result = 4294967295
KnuthDiv: quotient: 4294967295 4294967295
KnuthDiv: remainder: 0 2147483649 0

FOUND USER:   store volatile float %add72, float* %add.ptr71, align 4, !tbaa !1
   OF SCEV: {{{%cc,+,(4 * %NN)}<nsw><%for.body3.lr.ph>,+,32}<nsw><%for.body9.preheader>,+,4}<nsw><%for.body66>
FOUND USER:   %14 = load volatile float, float* %add.ptr71, align 4, !tbaa !1
   OF SCEV: {{{%cc,+,(4 * %NN)}<nsw><%for.body3.lr.ph>,+,32}<nsw><%for.body9.preheader>,+,4}<nsw><%for.body66>
FOUND USER:   %13 = load float, float* %arrayidx67, align 4, !tbaa !1
   OF SCEV: {%tot,+,4}<nsw><%for.body66>
*** IR Dump Before Loop Strength Reduction ***
for.body66:                                       ; preds = %for.body66, %for.cond64.preheader
  %j1.2140 = phi i32 [ 0, %for.cond64.preheader ], [ %add74, %for.body66 ]
  %arrayidx67 = getelementptr inbounds [8 x float], [8 x float]* %tot, i32 0, i32 %j1.2140
  %13 = load float, float* %arrayidx67, align 4, !tbaa !1
  %add.ptr71 = getelementptr inbounds float, float* %add.ptr70, i32 %j1.2140
  %14 = load volatile float, float* %add.ptr71, align 4, !tbaa !1
  %add72 = fadd float %13, %14
  store volatile float %add72, float* %add.ptr71, align 4, !tbaa !1
  %add74 = add nuw nsw i32 %j1.2140, 1
  %exitcond145 = icmp eq i32 %add74, 8
  br i1 %exitcond145, label %for.end75, label %for.body66

LSR on loop %for.body66:
  Change loop exiting icmp to use postinc iv:   %exitcond145 = icmp eq i32 %add74, 8
Collecting IV Chains.
IV Chain#0 Head: (  %13 = load float, float* %arrayidx67, align 4, !tbaa !1) IV={%tot,+,4}<nsw><%for.body66>
IV Chain#1 Head: (  %14 = load volatile float, float* %add.ptr71, align 4, !tbaa !1) IV={{{%cc,+,(4 * %NN)}<nsw><%for.body3.lr.ph>,+,32}<nsw><%for.body9.preheader>,+,4}<nsw><%for.body66>
IV Chain#1  Inc: (  store volatile float %add72, float* %add.ptr71, align 4, !tbaa !1) IV+0
IV Chain#2 Head: (  %exitcond145 = icmp eq i32 %add74, 8) IV={1,+,1}<nuw><nsw><%for.body66>
IV Chain#2  Inc: (  %j1.2140 = phi i32 [ 0, %for.cond64.preheader ], [ %add74, %for.body66 ]) IV+0
Chain:   %14 = load volatile float, float* %add.ptr71, align 4, !tbaa !1 Cost: 1
Chain:   %exitcond145 = icmp eq i32 %add74, 8 Cost: 1
LSR has identified the following interesting factors and types: *4
KnuthDiv: m=0 n=3
KnuthDiv: original: 0 6 4294967295 4294967289 by 1 0 0
KnuthDiv:   normal: 3 2147483647 4294967292 2147483648 by 2147483648 0 0
KnuthDiv: quotient digit #0
KnuthDiv: dividend == 15032385535
KnuthDiv: qp == 6, rp == 2147483647
KnuthDiv: u[j+i] = 2147483648, borrow = 0
KnuthDiv: u[j+i] = 4294967292, borrow = 0
KnuthDiv: u[j+i] = 2147483647, borrow = 3
KnuthDiv: after subtraction: 0 2147483647 4294967292 2147483648
KnuthDiv: after correction: 0 2147483647 4294967292 2147483648
KnuthDiv: digit result = 6
KnuthDiv: quotient: 6
KnuthDiv: remainder: 0 4294967295 4294967289

KnuthDiv: m=1 n=3
KnuthDiv: original: 0 4294967295 4294967295 4294967295 4294967289 by 1 0 0
KnuthDiv:   normal: 2147483647 4294967295 4294967295 4294967292 2147483648 by 2147483648 0 0
KnuthDiv: quotient digit #1
KnuthDiv: dividend == 9223372036854775807
KnuthDiv: qp == 4294967295, rp == 2147483647
KnuthDiv: u[j+i] = 4294967292, borrow = 0
KnuthDiv: u[j+i] = 4294967295, borrow = 0
KnuthDiv: u[j+i] = 2147483647, borrow = 2147483647
KnuthDiv: after subtraction: 0 2147483647 4294967295 4294967292 2147483648
KnuthDiv: after correction: 0 2147483647 4294967295 4294967292 2147483648
KnuthDiv: digit result = 4294967295
KnuthDiv: quotient digit #0
KnuthDiv: dividend == 9223372036854775807
KnuthDiv: qp == 4294967295, rp == 2147483647
KnuthDiv: u[j+i] = 2147483648, borrow = 0
KnuthDiv: u[j+i] = 4294967292, borrow = 0
KnuthDiv: u[j+i] = 2147483647, borrow = 2147483647
KnuthDiv: after subtraction: 0 0 2147483647 4294967292 2147483648
KnuthDiv: after correction: 0 0 2147483647 4294967292 2147483648
KnuthDiv: digit result = 4294967295
KnuthDiv: quotient: 4294967295 4294967295
KnuthDiv: remainder: 0 4294967295 4294967289

KnuthDiv: m=0 n=3
KnuthDiv: original: 0 6 4294967295 4294967289 by 1 0 0
KnuthDiv:   normal: 3 2147483647 4294967292 2147483648 by 2147483648 0 0
KnuthDiv: quotient digit #0
KnuthDiv: dividend == 15032385535
KnuthDiv: qp == 6, rp == 2147483647
KnuthDiv: u[j+i] = 2147483648, borrow = 0
KnuthDiv: u[j+i] = 4294967292, borrow = 0
KnuthDiv: u[j+i] = 2147483647, borrow = 3
KnuthDiv: after subtraction: 0 2147483647 4294967292 2147483648
KnuthDiv: after correction: 0 2147483647 4294967292 2147483648
KnuthDiv: digit result = 6
KnuthDiv: quotient: 6
KnuthDiv: remainder: 0 4294967295 4294967289

KnuthDiv: m=1 n=3
KnuthDiv: original: 0 4294967295 4294967295 4294967295 4294967289 by 1 0 0
KnuthDiv:   normal: 2147483647 4294967295 4294967295 4294967292 2147483648 by 2147483648 0 0
KnuthDiv: quotient digit #1
KnuthDiv: dividend == 9223372036854775807
KnuthDiv: qp == 4294967295, rp == 2147483647
KnuthDiv: u[j+i] = 4294967292, borrow = 0
KnuthDiv: u[j+i] = 4294967295, borrow = 0
KnuthDiv: u[j+i] = 2147483647, borrow = 2147483647
KnuthDiv: after subtraction: 0 2147483647 4294967295 4294967292 2147483648
KnuthDiv: after correction: 0 2147483647 4294967295 4294967292 2147483648
KnuthDiv: digit result = 4294967295
KnuthDiv: quotient digit #0
KnuthDiv: dividend == 9223372036854775807
KnuthDiv: qp == 4294967295, rp == 2147483647
KnuthDiv: u[j+i] = 2147483648, borrow = 0
KnuthDiv: u[j+i] = 4294967292, borrow = 0
KnuthDiv: u[j+i] = 2147483647, borrow = 2147483647
KnuthDiv: after subtraction: 0 0 2147483647 4294967292 2147483648
KnuthDiv: after correction: 0 0 2147483647 4294967292 2147483648
KnuthDiv: digit result = 4294967295
KnuthDiv: quotient: 4294967295 4294967295
KnuthDiv: remainder: 0 4294967295 4294967289

KnuthDiv: m=0 n=3
KnuthDiv: original: 0 6 4294967295 4294967289 by 1 0 0
KnuthDiv:   normal: 3 2147483647 4294967292 2147483648 by 2147483648 0 0
KnuthDiv: quotient digit #0
KnuthDiv: dividend == 15032385535
KnuthDiv: qp == 6, rp == 2147483647
KnuthDiv: u[j+i] = 2147483648, borrow = 0
KnuthDiv: u[j+i] = 4294967292, borrow = 0
KnuthDiv: u[j+i] = 2147483647, borrow = 3
KnuthDiv: after subtraction: 0 2147483647 4294967292 2147483648
KnuthDiv: after correction: 0 2147483647 4294967292 2147483648
KnuthDiv: digit result = 6
KnuthDiv: quotient: 6
KnuthDiv: remainder: 0 4294967295 4294967289

KnuthDiv: m=1 n=3
KnuthDiv: original: 0 4294967295 4294967295 4294967295 4294967289 by 1 0 0
KnuthDiv:   normal: 2147483647 4294967295 4294967295 4294967292 2147483648 by 2147483648 0 0
KnuthDiv: quotient digit #1
KnuthDiv: dividend == 9223372036854775807
KnuthDiv: qp == 4294967295, rp == 2147483647
KnuthDiv: u[j+i] = 4294967292, borrow = 0
KnuthDiv: u[j+i] = 4294967295, borrow = 0
KnuthDiv: u[j+i] = 2147483647, borrow = 2147483647
KnuthDiv: after subtraction: 0 2147483647 4294967295 4294967292 2147483648
KnuthDiv: after correction: 0 2147483647 4294967295 4294967292 2147483648
KnuthDiv: digit result = 4294967295
KnuthDiv: quotient digit #0
KnuthDiv: dividend == 9223372036854775807
KnuthDiv: qp == 4294967295, rp == 2147483647
KnuthDiv: u[j+i] = 2147483648, borrow = 0
KnuthDiv: u[j+i] = 4294967292, borrow = 0
KnuthDiv: u[j+i] = 2147483647, borrow = 2147483647
KnuthDiv: after subtraction: 0 0 2147483647 4294967292 2147483648
KnuthDiv: after correction: 0 0 2147483647 4294967292 2147483648
KnuthDiv: digit result = 4294967295
KnuthDiv: quotient: 4294967295 4294967295
KnuthDiv: remainder: 0 4294967295 4294967289

KnuthDiv: m=0 n=3
KnuthDiv: original: 0 6 4294967295 4294967289 by 1 0 0
KnuthDiv:   normal: 3 2147483647 4294967292 2147483648 by 2147483648 0 0
KnuthDiv: quotient digit #0
KnuthDiv: dividend == 15032385535
KnuthDiv: qp == 6, rp == 2147483647
KnuthDiv: u[j+i] = 2147483648, borrow = 0
KnuthDiv: u[j+i] = 4294967292, borrow = 0
KnuthDiv: u[j+i] = 2147483647, borrow = 3
KnuthDiv: after subtraction: 0 2147483647 4294967292 2147483648
KnuthDiv: after correction: 0 2147483647 4294967292 2147483648
KnuthDiv: digit result = 6
KnuthDiv: quotient: 6
KnuthDiv: remainder: 0 4294967295 4294967289

KnuthDiv: m=1 n=3
KnuthDiv: original: 0 4294967295 4294967295 4294967295 4294967289 by 1 0 0
KnuthDiv:   normal: 2147483647 4294967295 4294967295 4294967292 2147483648 by 2147483648 0 0
KnuthDiv: quotient digit #1
KnuthDiv: dividend == 9223372036854775807
KnuthDiv: qp == 4294967295, rp == 2147483647
KnuthDiv: u[j+i] = 4294967292, borrow = 0
KnuthDiv: u[j+i] = 4294967295, borrow = 0
KnuthDiv: u[j+i] = 2147483647, borrow = 2147483647
KnuthDiv: after subtraction: 0 2147483647 4294967295 4294967292 2147483648
KnuthDiv: after correction: 0 2147483647 4294967295 4294967292 2147483648
KnuthDiv: digit result = 4294967295
KnuthDiv: quotient digit #0
KnuthDiv: dividend == 9223372036854775807
KnuthDiv: qp == 4294967295, rp == 2147483647
KnuthDiv: u[j+i] = 2147483648, borrow = 0
KnuthDiv: u[j+i] = 4294967292, borrow = 0
KnuthDiv: u[j+i] = 2147483647, borrow = 2147483647
KnuthDiv: after subtraction: 0 0 2147483647 4294967292 2147483648
KnuthDiv: after correction: 0 0 2147483647 4294967292 2147483648
KnuthDiv: digit result = 4294967295
KnuthDiv: quotient: 4294967295 4294967295
KnuthDiv: remainder: 0 4294967295 4294967289

LSR is examining the following fixup sites:
  UserInst=%exitcond145, OperandValToReplace=%add74, PostIncLoop=%for.body66
  UserInst=store %add72, OperandValToReplace=%add.ptr71
  UserInst=%14, OperandValToReplace=%add.ptr71
  UserInst=%13, OperandValToReplace=%arrayidx67
LSR found 4 uses:
LSR is examining the following uses:
  LSR Use: Kind=ICmpZero, Offsets={0}, widest fixup type: i32
    reg({8,+,-1}<nw><%for.body66>)
  LSR Use: Kind=Address of float in addrspace(0), Offsets={0,0}, widest fixup type: float*
    reg({{{%cc,+,(4 * %NN)}<nsw><%for.body3.lr.ph>,+,32}<nsw><%for.body9.preheader>,+,4}<nsw><%for.body66>)
  LSR Use: Kind=Address of float in addrspace(0), Offsets={0}, widest fixup type: float*
    reg({%tot,+,4}<nsw><%for.body66>)
  LSR Use: Kind=Basic, Offsets={0}, all-fixups-outside-loop, widest fixup type: i32
    reg(%NN)
KnuthDiv: m=0 n=3
KnuthDiv: original: 0 6 4294967295 4294967289 by 1 0 0
KnuthDiv:   normal: 3 2147483647 4294967292 2147483648 by 2147483648 0 0
KnuthDiv: quotient digit #0
KnuthDiv: dividend == 15032385535
KnuthDiv: qp == 6, rp == 2147483647
KnuthDiv: u[j+i] = 2147483648, borrow = 0
KnuthDiv: u[j+i] = 4294967292, borrow = 0
KnuthDiv: u[j+i] = 2147483647, borrow = 3
KnuthDiv: after subtraction: 0 2147483647 4294967292 2147483648
KnuthDiv: after correction: 0 2147483647 4294967292 2147483648
KnuthDiv: digit result = 6
KnuthDiv: quotient: 6
KnuthDiv: remainder: 0 4294967295 4294967289

KnuthDiv: m=1 n=3
KnuthDiv: original: 0 4294967295 4294967295 4294967295 4294967289 by 1 0 0
KnuthDiv:   normal: 2147483647 4294967295 4294967295 4294967292 2147483648 by 2147483648 0 0
KnuthDiv: quotient digit #1
KnuthDiv: dividend == 9223372036854775807
KnuthDiv: qp == 4294967295, rp == 2147483647
KnuthDiv: u[j+i] = 4294967292, borrow = 0
KnuthDiv: u[j+i] = 4294967295, borrow = 0
KnuthDiv: u[j+i] = 2147483647, borrow = 2147483647
KnuthDiv: after subtraction: 0 2147483647 4294967295 4294967292 2147483648
KnuthDiv: after correction: 0 2147483647 4294967295 4294967292 2147483648
KnuthDiv: digit result = 4294967295
KnuthDiv: quotient digit #0
KnuthDiv: dividend == 9223372036854775807
KnuthDiv: qp == 4294967295, rp == 2147483647
KnuthDiv: u[j+i] = 2147483648, borrow = 0
KnuthDiv: u[j+i] = 4294967292, borrow = 0
KnuthDiv: u[j+i] = 2147483647, borrow = 2147483647
KnuthDiv: after subtraction: 0 0 2147483647 4294967292 2147483648
KnuthDiv: after correction: 0 0 2147483647 4294967292 2147483648
KnuthDiv: digit result = 4294967295
KnuthDiv: quotient: 4294967295 4294967295
KnuthDiv: remainder: 0 4294967295 4294967289

KnuthDiv: m=0 n=3
KnuthDiv: original: 0 6 4294967295 4294967289 by 1 0 0
KnuthDiv:   normal: 3 2147483647 4294967292 2147483648 by 2147483648 0 0
KnuthDiv: quotient digit #0
KnuthDiv: dividend == 15032385535
KnuthDiv: qp == 6, rp == 2147483647
KnuthDiv: u[j+i] = 2147483648, borrow = 0
KnuthDiv: u[j+i] = 4294967292, borrow = 0
KnuthDiv: u[j+i] = 2147483647, borrow = 3
KnuthDiv: after subtraction: 0 2147483647 4294967292 2147483648
KnuthDiv: after correction: 0 2147483647 4294967292 2147483648
KnuthDiv: digit result = 6
KnuthDiv: quotient: 6
KnuthDiv: remainder: 0 4294967295 4294967289

KnuthDiv: m=1 n=3
KnuthDiv: original: 0 4294967295 4294967295 4294967295 4294967289 by 1 0 0
KnuthDiv:   normal: 2147483647 4294967295 4294967295 4294967292 2147483648 by 2147483648 0 0
KnuthDiv: quotient digit #1
KnuthDiv: dividend == 9223372036854775807
KnuthDiv: qp == 4294967295, rp == 2147483647
KnuthDiv: u[j+i] = 4294967292, borrow = 0
KnuthDiv: u[j+i] = 4294967295, borrow = 0
KnuthDiv: u[j+i] = 2147483647, borrow = 2147483647
KnuthDiv: after subtraction: 0 2147483647 4294967295 4294967292 2147483648
KnuthDiv: after correction: 0 2147483647 4294967295 4294967292 2147483648
KnuthDiv: digit result = 4294967295
KnuthDiv: quotient digit #0
KnuthDiv: dividend == 9223372036854775807
KnuthDiv: qp == 4294967295, rp == 2147483647
KnuthDiv: u[j+i] = 2147483648, borrow = 0
KnuthDiv: u[j+i] = 4294967292, borrow = 0
KnuthDiv: u[j+i] = 2147483647, borrow = 2147483647
KnuthDiv: after subtraction: 0 0 2147483647 4294967292 2147483648
KnuthDiv: after correction: 0 0 2147483647 4294967292 2147483648
KnuthDiv: digit result = 4294967295
KnuthDiv: quotient: 4294967295 4294967295
KnuthDiv: remainder: 0 4294967295 4294967289

KnuthDiv: m=0 n=3
KnuthDiv: original: 0 6 4294967295 4294967289 by 1 0 0
KnuthDiv:   normal: 3 2147483647 4294967292 2147483648 by 2147483648 0 0
KnuthDiv: quotient digit #0
KnuthDiv: dividend == 15032385535
KnuthDiv: qp == 6, rp == 2147483647
KnuthDiv: u[j+i] = 2147483648, borrow = 0
KnuthDiv: u[j+i] = 4294967292, borrow = 0
KnuthDiv: u[j+i] = 2147483647, borrow = 3
KnuthDiv: after subtraction: 0 2147483647 4294967292 2147483648
KnuthDiv: after correction: 0 2147483647 4294967292 2147483648
KnuthDiv: digit result = 6
KnuthDiv: quotient: 6
KnuthDiv: remainder: 0 4294967295 4294967289

KnuthDiv: m=1 n=3
KnuthDiv: original: 0 4294967295 4294967295 4294967295 4294967289 by 1 0 0
KnuthDiv:   normal: 2147483647 4294967295 4294967295 4294967292 2147483648 by 2147483648 0 0
KnuthDiv: quotient digit #1
KnuthDiv: dividend == 9223372036854775807
KnuthDiv: qp == 4294967295, rp == 2147483647
KnuthDiv: u[j+i] = 4294967292, borrow = 0
KnuthDiv: u[j+i] = 4294967295, borrow = 0
KnuthDiv: u[j+i] = 2147483647, borrow = 2147483647
KnuthDiv: after subtraction: 0 2147483647 4294967295 4294967292 2147483648
KnuthDiv: after correction: 0 2147483647 4294967295 4294967292 2147483648
KnuthDiv: digit result = 4294967295
KnuthDiv: quotient digit #0
KnuthDiv: dividend == 9223372036854775807
KnuthDiv: qp == 4294967295, rp == 2147483647
KnuthDiv: u[j+i] = 2147483648, borrow = 0
KnuthDiv: u[j+i] = 4294967292, borrow = 0
KnuthDiv: u[j+i] = 2147483647, borrow = 2147483647
KnuthDiv: after subtraction: 0 0 2147483647 4294967292 2147483648
KnuthDiv: after correction: 0 0 2147483647 4294967292 2147483648
KnuthDiv: digit result = 4294967295
KnuthDiv: quotient: 4294967295 4294967295
KnuthDiv: remainder: 0 4294967295 4294967289

KnuthDiv: m=0 n=3
KnuthDiv: original: 0 6 4294967295 4294967289 by 1 0 0
KnuthDiv:   normal: 3 2147483647 4294967292 2147483648 by 2147483648 0 0
KnuthDiv: quotient digit #0
KnuthDiv: dividend == 15032385535
KnuthDiv: qp == 6, rp == 2147483647
KnuthDiv: u[j+i] = 2147483648, borrow = 0
KnuthDiv: u[j+i] = 4294967292, borrow = 0
KnuthDiv: u[j+i] = 2147483647, borrow = 3
KnuthDiv: after subtraction: 0 2147483647 4294967292 2147483648
KnuthDiv: after correction: 0 2147483647 4294967292 2147483648
KnuthDiv: digit result = 6
KnuthDiv: quotient: 6
KnuthDiv: remainder: 0 4294967295 4294967289

KnuthDiv: m=1 n=3
KnuthDiv: original: 0 4294967295 4294967295 4294967295 4294967289 by 1 0 0
KnuthDiv:   normal: 2147483647 4294967295 4294967295 4294967292 2147483648 by 2147483648 0 0
KnuthDiv: quotient digit #1
KnuthDiv: dividend == 9223372036854775807
KnuthDiv: qp == 4294967295, rp == 2147483647
KnuthDiv: u[j+i] = 4294967292, borrow = 0
KnuthDiv: u[j+i] = 4294967295, borrow = 0
KnuthDiv: u[j+i] = 2147483647, borrow = 2147483647
KnuthDiv: after subtraction: 0 2147483647 4294967295 4294967292 2147483648
KnuthDiv: after correction: 0 2147483647 4294967295 4294967292 2147483648
KnuthDiv: digit result = 4294967295
KnuthDiv: quotient digit #0
KnuthDiv: dividend == 9223372036854775807
KnuthDiv: qp == 4294967295, rp == 2147483647
KnuthDiv: u[j+i] = 2147483648, borrow = 0
KnuthDiv: u[j+i] = 4294967292, borrow = 0
KnuthDiv: u[j+i] = 2147483647, borrow = 2147483647
KnuthDiv: after subtraction: 0 0 2147483647 4294967292 2147483648
KnuthDiv: after correction: 0 0 2147483647 4294967292 2147483648
KnuthDiv: digit result = 4294967295
KnuthDiv: quotient: 4294967295 4294967295
KnuthDiv: remainder: 0 4294967295 4294967289

KnuthDiv: m=0 n=3
KnuthDiv: original: 0 6 4294967295 4294967268 by 1 0 0
KnuthDiv:   normal: 3 2147483647 4294967282 0 by 2147483648 0 0
KnuthDiv: quotient digit #0
KnuthDiv: dividend == 15032385535
KnuthDiv: qp == 6, rp == 2147483647
KnuthDiv: u[j+i] = 0, borrow = 0
KnuthDiv: u[j+i] = 4294967282, borrow = 0
KnuthDiv: u[j+i] = 2147483647, borrow = 3
KnuthDiv: after subtraction: 0 2147483647 4294967282 0
KnuthDiv: after correction: 0 2147483647 4294967282 0
KnuthDiv: digit result = 6
KnuthDiv: quotient: 6
KnuthDiv: remainder: 0 4294967295 4294967268

KnuthDiv: m=1 n=3
KnuthDiv: original: 0 4294967295 4294967295 4294967295 4294967268 by 1 0 0
KnuthDiv:   normal: 2147483647 4294967295 4294967295 4294967282 0 by 2147483648 0 0
KnuthDiv: quotient digit #1
KnuthDiv: dividend == 9223372036854775807
KnuthDiv: qp == 4294967295, rp == 2147483647
KnuthDiv: u[j+i] = 4294967282, borrow = 0
KnuthDiv: u[j+i] = 4294967295, borrow = 0
KnuthDiv: u[j+i] = 2147483647, borrow = 2147483647
KnuthDiv: after subtraction: 0 2147483647 4294967295 4294967282 0
KnuthDiv: after correction: 0 2147483647 4294967295 4294967282 0
KnuthDiv: digit result = 4294967295
KnuthDiv: quotient digit #0
KnuthDiv: dividend == 9223372036854775807
KnuthDiv: qp == 4294967295, rp == 2147483647
KnuthDiv: u[j+i] = 0, borrow = 0
KnuthDiv: u[j+i] = 4294967282, borrow = 0
KnuthDiv: u[j+i] = 2147483647, borrow = 2147483647
KnuthDiv: after subtraction: 0 0 2147483647 4294967282 0
KnuthDiv: after correction: 0 0 2147483647 4294967282 0
KnuthDiv: digit result = 4294967295
KnuthDiv: quotient: 4294967295 4294967295
KnuthDiv: remainder: 0 4294967295 4294967268

KnuthDiv: m=0 n=3
KnuthDiv: original: 0 6 4294967295 4294967268 by 1 0 0
KnuthDiv:   normal: 3 2147483647 4294967282 0 by 2147483648 0 0
KnuthDiv: quotient digit #0
KnuthDiv: dividend == 15032385535
KnuthDiv: qp == 6, rp == 2147483647
KnuthDiv: u[j+i] = 0, borrow = 0
KnuthDiv: u[j+i] = 4294967282, borrow = 0
KnuthDiv: u[j+i] = 2147483647, borrow = 3
KnuthDiv: after subtraction: 0 2147483647 4294967282 0
KnuthDiv: after correction: 0 2147483647 4294967282 0
KnuthDiv: digit result = 6
KnuthDiv: quotient: 6
KnuthDiv: remainder: 0 4294967295 4294967268

KnuthDiv: m=1 n=3
KnuthDiv: original: 0 4294967295 4294967295 4294967295 4294967268 by 1 0 0
KnuthDiv:   normal: 2147483647 4294967295 4294967295 4294967282 0 by 2147483648 0 0
KnuthDiv: quotient digit #1
KnuthDiv: dividend == 9223372036854775807
KnuthDiv: qp == 4294967295, rp == 2147483647
KnuthDiv: u[j+i] = 4294967282, borrow = 0
KnuthDiv: u[j+i] = 4294967295, borrow = 0
KnuthDiv: u[j+i] = 2147483647, borrow = 2147483647
KnuthDiv: after subtraction: 0 2147483647 4294967295 4294967282 0
KnuthDiv: after correction: 0 2147483647 4294967295 4294967282 0
KnuthDiv: digit result = 4294967295
KnuthDiv: quotient digit #0
KnuthDiv: dividend == 9223372036854775807
KnuthDiv: qp == 4294967295, rp == 2147483647
KnuthDiv: u[j+i] = 0, borrow = 0
KnuthDiv: u[j+i] = 4294967282, borrow = 0
KnuthDiv: u[j+i] = 2147483647, borrow = 2147483647
KnuthDiv: after subtraction: 0 0 2147483647 4294967282 0
KnuthDiv: after correction: 0 0 2147483647 4294967282 0
KnuthDiv: digit result = 4294967295
KnuthDiv: quotient: 4294967295 4294967295
KnuthDiv: remainder: 0 4294967295 4294967268

KnuthDiv: m=0 n=3
KnuthDiv: original: 0 6 4294967295 4294967268 by 1 0 0
KnuthDiv:   normal: 3 2147483647 4294967282 0 by 2147483648 0 0
KnuthDiv: quotient digit #0
KnuthDiv: dividend == 15032385535
KnuthDiv: qp == 6, rp == 2147483647
KnuthDiv: u[j+i] = 0, borrow = 0
KnuthDiv: u[j+i] = 4294967282, borrow = 0
KnuthDiv: u[j+i] = 2147483647, borrow = 3
KnuthDiv: after subtraction: 0 2147483647 4294967282 0
KnuthDiv: after correction: 0 2147483647 4294967282 0
KnuthDiv: digit result = 6
KnuthDiv: quotient: 6
KnuthDiv: remainder: 0 4294967295 4294967268

KnuthDiv: m=1 n=3
KnuthDiv: original: 0 4294967295 4294967295 4294967295 4294967268 by 1 0 0
KnuthDiv:   normal: 2147483647 4294967295 4294967295 4294967282 0 by 2147483648 0 0
KnuthDiv: quotient digit #1
KnuthDiv: dividend == 9223372036854775807
KnuthDiv: qp == 4294967295, rp == 2147483647
KnuthDiv: u[j+i] = 4294967282, borrow = 0
KnuthDiv: u[j+i] = 4294967295, borrow = 0
KnuthDiv: u[j+i] = 2147483647, borrow = 2147483647
KnuthDiv: after subtraction: 0 2147483647 4294967295 4294967282 0
KnuthDiv: after correction: 0 2147483647 4294967295 4294967282 0
KnuthDiv: digit result = 4294967295
KnuthDiv: quotient digit #0
KnuthDiv: dividend == 9223372036854775807
KnuthDiv: qp == 4294967295, rp == 2147483647
KnuthDiv: u[j+i] = 0, borrow = 0
KnuthDiv: u[j+i] = 4294967282, borrow = 0
KnuthDiv: u[j+i] = 2147483647, borrow = 2147483647
KnuthDiv: after subtraction: 0 0 2147483647 4294967282 0
KnuthDiv: after correction: 0 0 2147483647 4294967282 0
KnuthDiv: digit result = 4294967295
KnuthDiv: quotient: 4294967295 4294967295
KnuthDiv: remainder: 0 4294967295 4294967268

KnuthDiv: m=0 n=3
KnuthDiv: original: 0 6 4294967295 4294967268 by 1 0 0
KnuthDiv:   normal: 3 2147483647 4294967282 0 by 2147483648 0 0
KnuthDiv: quotient digit #0
KnuthDiv: dividend == 15032385535
KnuthDiv: qp == 6, rp == 2147483647
KnuthDiv: u[j+i] = 0, borrow = 0
KnuthDiv: u[j+i] = 4294967282, borrow = 0
KnuthDiv: u[j+i] = 2147483647, borrow = 3
KnuthDiv: after subtraction: 0 2147483647 4294967282 0
KnuthDiv: after correction: 0 2147483647 4294967282 0
KnuthDiv: digit result = 6
KnuthDiv: quotient: 6
KnuthDiv: remainder: 0 4294967295 4294967268

KnuthDiv: m=1 n=3
KnuthDiv: original: 0 4294967295 4294967295 4294967295 4294967268 by 1 0 0
KnuthDiv:   normal: 2147483647 4294967295 4294967295 4294967282 0 by 2147483648 0 0
KnuthDiv: quotient digit #1
KnuthDiv: dividend == 9223372036854775807
KnuthDiv: qp == 4294967295, rp == 2147483647
KnuthDiv: u[j+i] = 4294967282, borrow = 0
KnuthDiv: u[j+i] = 4294967295, borrow = 0
KnuthDiv: u[j+i] = 2147483647, borrow = 2147483647
KnuthDiv: after subtraction: 0 2147483647 4294967295 4294967282 0
KnuthDiv: after correction: 0 2147483647 4294967295 4294967282 0
KnuthDiv: digit result = 4294967295
KnuthDiv: quotient digit #0
KnuthDiv: dividend == 9223372036854775807
KnuthDiv: qp == 4294967295, rp == 2147483647
KnuthDiv: u[j+i] = 0, borrow = 0
KnuthDiv: u[j+i] = 4294967282, borrow = 0
KnuthDiv: u[j+i] = 2147483647, borrow = 2147483647
KnuthDiv: after subtraction: 0 0 2147483647 4294967282 0
KnuthDiv: after correction: 0 0 2147483647 4294967282 0
KnuthDiv: digit result = 4294967295
KnuthDiv: quotient: 4294967295 4294967295
KnuthDiv: remainder: 0 4294967295 4294967268

KnuthDiv: m=0 n=3
KnuthDiv: original: 0 6 4294967295 4294967268 by 1 0 0
KnuthDiv:   normal: 3 2147483647 4294967282 0 by 2147483648 0 0
KnuthDiv: quotient digit #0
KnuthDiv: dividend == 15032385535
KnuthDiv: qp == 6, rp == 2147483647
KnuthDiv: u[j+i] = 0, borrow = 0
KnuthDiv: u[j+i] = 4294967282, borrow = 0
KnuthDiv: u[j+i] = 2147483647, borrow = 3
KnuthDiv: after subtraction: 0 2147483647 4294967282 0
KnuthDiv: after correction: 0 2147483647 4294967282 0
KnuthDiv: digit result = 6
KnuthDiv: quotient: 6
KnuthDiv: remainder: 0 4294967295 4294967268

KnuthDiv: m=1 n=3
KnuthDiv: original: 0 4294967295 4294967295 4294967295 4294967268 by 1 0 0
KnuthDiv:   normal: 2147483647 4294967295 4294967295 4294967282 0 by 2147483648 0 0
KnuthDiv: quotient digit #1
KnuthDiv: dividend == 9223372036854775807
KnuthDiv: qp == 4294967295, rp == 2147483647
KnuthDiv: u[j+i] = 4294967282, borrow = 0
KnuthDiv: u[j+i] = 4294967295, borrow = 0
KnuthDiv: u[j+i] = 2147483647, borrow = 2147483647
KnuthDiv: after subtraction: 0 2147483647 4294967295 4294967282 0
KnuthDiv: after correction: 0 2147483647 4294967295 4294967282 0
KnuthDiv: digit result = 4294967295
KnuthDiv: quotient digit #0
KnuthDiv: dividend == 9223372036854775807
KnuthDiv: qp == 4294967295, rp == 2147483647
KnuthDiv: u[j+i] = 0, borrow = 0
KnuthDiv: u[j+i] = 4294967282, borrow = 0
KnuthDiv: u[j+i] = 2147483647, borrow = 2147483647
KnuthDiv: after subtraction: 0 0 2147483647 4294967282 0
KnuthDiv: after correction: 0 0 2147483647 4294967282 0
KnuthDiv: digit result = 4294967295
KnuthDiv: quotient: 4294967295 4294967295
KnuthDiv: remainder: 0 4294967295 4294967268

KnuthDiv: m=0 n=3
KnuthDiv: original: 0 6 4294967295 4294967268 by 1 0 0
KnuthDiv:   normal: 3 2147483647 4294967282 0 by 2147483648 0 0
KnuthDiv: quotient digit #0
KnuthDiv: dividend == 15032385535
KnuthDiv: qp == 6, rp == 2147483647
KnuthDiv: u[j+i] = 0, borrow = 0
KnuthDiv: u[j+i] = 4294967282, borrow = 0
KnuthDiv: u[j+i] = 2147483647, borrow = 3
KnuthDiv: after subtraction: 0 2147483647 4294967282 0
KnuthDiv: after correction: 0 2147483647 4294967282 0
KnuthDiv: digit result = 6
KnuthDiv: quotient: 6
KnuthDiv: remainder: 0 4294967295 4294967268

KnuthDiv: m=1 n=3
KnuthDiv: original: 0 4294967295 4294967295 4294967295 4294967268 by 1 0 0
KnuthDiv:   normal: 2147483647 4294967295 4294967295 4294967282 0 by 2147483648 0 0
KnuthDiv: quotient digit #1
KnuthDiv: dividend == 9223372036854775807
KnuthDiv: qp == 4294967295, rp == 2147483647
KnuthDiv: u[j+i] = 4294967282, borrow = 0
KnuthDiv: u[j+i] = 4294967295, borrow = 0
KnuthDiv: u[j+i] = 2147483647, borrow = 2147483647
KnuthDiv: after subtraction: 0 2147483647 4294967295 4294967282 0
KnuthDiv: after correction: 0 2147483647 4294967295 4294967282 0
KnuthDiv: digit result = 4294967295
KnuthDiv: quotient digit #0
KnuthDiv: dividend == 9223372036854775807
KnuthDiv: qp == 4294967295, rp == 2147483647
KnuthDiv: u[j+i] = 0, borrow = 0
KnuthDiv: u[j+i] = 4294967282, borrow = 0
KnuthDiv: u[j+i] = 2147483647, borrow = 2147483647
KnuthDiv: after subtraction: 0 0 2147483647 4294967282 0
KnuthDiv: after correction: 0 0 2147483647 4294967282 0
KnuthDiv: digit result = 4294967295
KnuthDiv: quotient: 4294967295 4294967295
KnuthDiv: remainder: 0 4294967295 4294967268

KnuthDiv: m=0 n=3
KnuthDiv: original: 0 6 4294967295 4294967268 by 1 0 0
KnuthDiv:   normal: 3 2147483647 4294967282 0 by 2147483648 0 0
KnuthDiv: quotient digit #0
KnuthDiv: dividend == 15032385535
KnuthDiv: qp == 6, rp == 2147483647
KnuthDiv: u[j+i] = 0, borrow = 0
KnuthDiv: u[j+i] = 4294967282, borrow = 0
KnuthDiv: u[j+i] = 2147483647, borrow = 3
KnuthDiv: after subtraction: 0 2147483647 4294967282 0
KnuthDiv: after correction: 0 2147483647 4294967282 0
KnuthDiv: digit result = 6
KnuthDiv: quotient: 6
KnuthDiv: remainder: 0 4294967295 4294967268

KnuthDiv: m=1 n=3
KnuthDiv: original: 0 4294967295 4294967295 4294967295 4294967268 by 1 0 0
KnuthDiv:   normal: 2147483647 4294967295 4294967295 4294967282 0 by 2147483648 0 0
KnuthDiv: quotient digit #1
KnuthDiv: dividend == 9223372036854775807
KnuthDiv: qp == 4294967295, rp == 2147483647
KnuthDiv: u[j+i] = 4294967282, borrow = 0
KnuthDiv: u[j+i] = 4294967295, borrow = 0
KnuthDiv: u[j+i] = 2147483647, borrow = 2147483647
KnuthDiv: after subtraction: 0 2147483647 4294967295 4294967282 0
KnuthDiv: after correction: 0 2147483647 4294967295 4294967282 0
KnuthDiv: digit result = 4294967295
KnuthDiv: quotient digit #0
KnuthDiv: dividend == 9223372036854775807
KnuthDiv: qp == 4294967295, rp == 2147483647
KnuthDiv: u[j+i] = 0, borrow = 0
KnuthDiv: u[j+i] = 4294967282, borrow = 0
KnuthDiv: u[j+i] = 2147483647, borrow = 2147483647
KnuthDiv: after subtraction: 0 0 2147483647 4294967282 0
KnuthDiv: after correction: 0 0 2147483647 4294967282 0
KnuthDiv: digit result = 4294967295
KnuthDiv: quotient: 4294967295 4294967295
KnuthDiv: remainder: 0 4294967295 4294967268

KnuthDiv: m=0 n=3
KnuthDiv: original: 0 6 4294967295 4294967268 by 1 0 0
KnuthDiv:   normal: 3 2147483647 4294967282 0 by 2147483648 0 0
KnuthDiv: quotient digit #0
KnuthDiv: dividend == 15032385535
KnuthDiv: qp == 6, rp == 2147483647
KnuthDiv: u[j+i] = 0, borrow = 0
KnuthDiv: u[j+i] = 4294967282, borrow = 0
KnuthDiv: u[j+i] = 2147483647, borrow = 3
KnuthDiv: after subtraction: 0 2147483647 4294967282 0
KnuthDiv: after correction: 0 2147483647 4294967282 0
KnuthDiv: digit result = 6
KnuthDiv: quotient: 6
KnuthDiv: remainder: 0 4294967295 4294967268

KnuthDiv: m=1 n=3
KnuthDiv: original: 0 4294967295 4294967295 4294967295 4294967268 by 1 0 0
KnuthDiv:   normal: 2147483647 4294967295 4294967295 4294967282 0 by 2147483648 0 0
KnuthDiv: quotient digit #1
KnuthDiv: dividend == 9223372036854775807
KnuthDiv: qp == 4294967295, rp == 2147483647
KnuthDiv: u[j+i] = 4294967282, borrow = 0
KnuthDiv: u[j+i] = 4294967295, borrow = 0
KnuthDiv: u[j+i] = 2147483647, borrow = 2147483647
KnuthDiv: after subtraction: 0 2147483647 4294967295 4294967282 0
KnuthDiv: after correction: 0 2147483647 4294967295 4294967282 0
KnuthDiv: digit result = 4294967295
KnuthDiv: quotient digit #0
KnuthDiv: dividend == 9223372036854775807
KnuthDiv: qp == 4294967295, rp == 2147483647
KnuthDiv: u[j+i] = 0, borrow = 0
KnuthDiv: u[j+i] = 4294967282, borrow = 0
KnuthDiv: u[j+i] = 2147483647, borrow = 2147483647
KnuthDiv: after subtraction: 0 0 2147483647 4294967282 0
KnuthDiv: after correction: 0 0 2147483647 4294967282 0
KnuthDiv: digit result = 4294967295
KnuthDiv: quotient: 4294967295 4294967295
KnuthDiv: remainder: 0 4294967295 4294967268

Generating cross-use offsets for {0,+,-1}<nw><%for.body66>: 0 8
Skipping cross-use reuse for {0,+,-1}<nw><%for.body66>
Skipping cross-use reuse for {8,+,-1}<nw><%for.body66>
Generating cross-use offsets for {0,+,4}<nuw><nsw><%for.body66>: -32 0
Generating cross-use offsets for {0,+,-4}<nsw><%for.body66>: 0 32
Skipping cross-use reuse for {0,+,-4}<nsw><%for.body66>
Skipping cross-use reuse for {32,+,-4}<nsw><%for.body66>
Generating cross-use offsets for {0,+,1}<nuw><nsw><%for.body66>: -8 0
Skipping cross-use reuse for {-8,+,1}<nw><%for.body66>
Skipping cross-use reuse for {0,+,1}<nuw><nsw><%for.body66>

After generating reuse formulae:
LSR is examining the following uses:
  LSR Use: Kind=ICmpZero, Offsets={0}, widest fixup type: i32
    reg({8,+,-1}<nw><%for.body66>)
    8 + reg({0,+,-1}<nw><%for.body66>)
    reg({32,+,-4}<nsw><%for.body66>)
    reg({-32,+,4}<nuw><nsw><%for.body66>)
    reg({-8,+,1}<nw><%for.body66>)
    32 + reg({0,+,-4}<nsw><%for.body66>)
    -32 + reg({0,+,4}<nuw><nsw><%for.body66>)
    -8 + reg({0,+,1}<nuw><nsw><%for.body66>)
  LSR Use: Kind=Address of float in addrspace(0), Offsets={0,0}, widest fixup type: float*
    reg({{{%cc,+,(4 * %NN)}<nsw><%for.body3.lr.ph>,+,32}<nsw><%for.body9.preheader>,+,4}<nsw><%for.body66>)
    reg(%cc) + 1*reg({{{0,+,(4 * %NN)}<nsw><%for.body3.lr.ph>,+,32}<%for.body9.preheader>,+,4}<nw><%for.body66>)
    reg(%cc) + reg({{0,+,(4 * %NN)}<nsw><%for.body3.lr.ph>,+,32}<%for.body9.preheader>) + 1*reg({0,+,4}<nuw><nsw><%for.body66>)
    reg({%cc,+,4}<nw><%for.body66>) + 1*reg({{0,+,(4 * %NN)}<nsw><%for.body3.lr.ph>,+,32}<%for.body9.preheader>)
    reg({{%cc,+,(4 * %NN)}<nsw><%for.body3.lr.ph>,+,32}<nsw><%for.body9.preheader>) + 1*reg({0,+,4}<nuw><nsw><%for.body66>)
    32 + reg(%cc) + reg({{0,+,(4 * %NN)}<nsw><%for.body3.lr.ph>,+,32}<%for.body9.preheader>) + 1*reg({-32,+,4}<nuw><nsw><%for.body66>)
    32 + reg({{%cc,+,(4 * %NN)}<nsw><%for.body3.lr.ph>,+,32}<nsw><%for.body9.preheader>) + 1*reg({-32,+,4}<nuw><nsw><%for.body66>)
  LSR Use: Kind=Address of float in addrspace(0), Offsets={0}, widest fixup type: float*
    reg({%tot,+,4}<nsw><%for.body66>)
    reg(%tot) + 1*reg({0,+,4}<nuw><nsw><%for.body66>)
    32 + reg(%tot) + 1*reg({-32,+,4}<nuw><nsw><%for.body66>)
  LSR Use: Kind=Special, Offsets={0}, all-fixups-outside-loop, widest fixup type: i32
    reg(%NN)
Filtering for use LSR Use: Kind=ICmpZero, Offsets={0}, widest fixup type: i32
  Filtering out formula 8 + reg({0,+,-1}<nw><%for.body66>)
    in favor of formula reg({8,+,-1}<nw><%for.body66>)
  Filtering out formula -8 + reg({0,+,1}<nuw><nsw><%for.body66>)
    in favor of formula reg({8,+,-1}<nw><%for.body66>)
  Filtering out formula reg({32,+,-4}<nsw><%for.body66>)
    in favor of formula reg({8,+,-1}<nw><%for.body66>)
  Filtering out formula 32 + reg({0,+,-4}<nsw><%for.body66>)
    in favor of formula reg({8,+,-1}<nw><%for.body66>)
  Filtering out formula reg({-8,+,1}<nw><%for.body66>)
    in favor of formula reg({8,+,-1}<nw><%for.body66>)
Filtering for use LSR Use: Kind=Address of float in addrspace(0), Offsets={0,0}, widest fixup type: float*
  Filtering out formula reg(%cc) + 1*reg({{{0,+,(4 * %NN)}<nsw><%for.body3.lr.ph>,+,32}<%for.body9.preheader>,+,4}<nw><%for.body66>)
    in favor of formula reg({{{%cc,+,(4 * %NN)}<nsw><%for.body3.lr.ph>,+,32}<nsw><%for.body9.preheader>,+,4}<nsw><%for.body66>)
  Filtering loser 32 + reg({{%cc,+,(4 * %NN)}<nsw><%for.body3.lr.ph>,+,32}<nsw><%for.body9.preheader>) + 1*reg({-32,+,4}<nuw><nsw><%for.body66>)
  Filtering loser 32 + reg(%cc) + reg({{0,+,(4 * %NN)}<nsw><%for.body3.lr.ph>,+,32}<%for.body9.preheader>) + 1*reg({-32,+,4}<nuw><nsw><%for.body66>)
  Filtering loser reg({{%cc,+,(4 * %NN)}<nsw><%for.body3.lr.ph>,+,32}<nsw><%for.body9.preheader>) + 1*reg({0,+,4}<nuw><nsw><%for.body66>)
  Filtering loser reg({%cc,+,4}<nw><%for.body66>) + 1*reg({{0,+,(4 * %NN)}<nsw><%for.body3.lr.ph>,+,32}<%for.body9.preheader>)
  Filtering loser reg(%cc) + reg({{0,+,(4 * %NN)}<nsw><%for.body3.lr.ph>,+,32}<%for.body9.preheader>) + 1*reg({0,+,4}<nuw><nsw><%for.body66>)
Filtering for use LSR Use: Kind=Address of float in addrspace(0), Offsets={0}, widest fixup type: float*
Filtering for use LSR Use: Kind=Special, Offsets={0}, all-fixups-outside-loop, widest fixup type: i32

After filtering out undesirable candidates:
LSR is examining the following uses:
  LSR Use: Kind=ICmpZero, Offsets={0}, widest fixup type: i32
    reg({8,+,-1}<nw><%for.body66>)
    -32 + reg({0,+,4}<nuw><nsw><%for.body66>)
    reg({-32,+,4}<nuw><nsw><%for.body66>)
  LSR Use: Kind=Address of float in addrspace(0), Offsets={0,0}, widest fixup type: float*
    reg({{{%cc,+,(4 * %NN)}<nsw><%for.body3.lr.ph>,+,32}<nsw><%for.body9.preheader>,+,4}<nsw><%for.body66>)
  LSR Use: Kind=Address of float in addrspace(0), Offsets={0}, widest fixup type: float*
    reg({%tot,+,4}<nsw><%for.body66>)
    reg(%tot) + 1*reg({0,+,4}<nuw><nsw><%for.body66>)
    32 + reg(%tot) + 1*reg({-32,+,4}<nuw><nsw><%for.body66>)
  LSR Use: Kind=Special, Offsets={0}, all-fixups-outside-loop, widest fixup type: i32
    reg(%NN)
New best at 4 regs, with addrec cost 3, plus 1 setup cost.
 Regs: {8,+,-1}<nw><%for.body66> {{{%cc,+,(4 * %NN)}<nsw><%for.body3.lr.ph>,+,32}<nsw><%for.body9.preheader>,+,4}<nsw><%for.body66> {%tot,+,4}<nsw><%for.body66> %NN
New best at 4 regs, with addrec cost 2, plus 6 imm cost, plus 1 setup cost.
 Regs: {0,+,4}<nuw><nsw><%for.body66> {{{%cc,+,(4 * %NN)}<nsw><%for.body3.lr.ph>,+,32}<nsw><%for.body9.preheader>,+,4}<nsw><%for.body66> %tot %NN

The chosen solution requires 4 regs, with addrec cost 2, plus 6 imm cost, plus 1 setup cost:
  LSR Use: Kind=ICmpZero, Offsets={0}, widest fixup type: i32
    -32 + reg({0,+,4}<nuw><nsw><%for.body66>)
  LSR Use: Kind=Address of float in addrspace(0), Offsets={0,0}, widest fixup type: float*
    reg({{{%cc,+,(4 * %NN)}<nsw><%for.body3.lr.ph>,+,32}<nsw><%for.body9.preheader>,+,4}<nsw><%for.body66>)
  LSR Use: Kind=Address of float in addrspace(0), Offsets={0}, widest fixup type: float*
    reg(%tot) + 1*reg({0,+,4}<nuw><nsw><%for.body66>)
  LSR Use: Kind=Special, Offsets={0}, all-fixups-outside-loop, widest fixup type: i32
    reg(%NN)
*** IR Dump After Loop Strength Reduction ***
for.body66:                                       ; preds = %for.body66, %for.cond64.preheader
  %lsr.iv24 = phi float* [ %scevgep25, %for.body66 ], [ %lsr.iv22, %for.cond64.preheader ]
  %lsr.iv18 = phi i32 [ %lsr.iv.next, %for.body66 ], [ 0, %for.cond64.preheader ]
  %uglygep = getelementptr i8, i8* %tot2627, i32 %lsr.iv18
  %uglygep28 = bitcast i8* %uglygep to float*
  %13 = load float, float* %uglygep28, align 4, !tbaa !1
  %14 = load volatile float, float* %lsr.iv24, align 4, !tbaa !1
  %add72 = fadd float %13, %14
  store volatile float %add72, float* %lsr.iv24, align 4, !tbaa !1
  %lsr.iv.next = add nuw nsw i32 %lsr.iv18, 4
  %scevgep25 = getelementptr float, float* %lsr.iv24, i32 1
  %exitcond145 = icmp eq i32 %lsr.iv.next, 32
  br i1 %exitcond145, label %for.end75, label %for.body66
FOUND USER in other loop:   %lsr.iv24 = phi float* [ %scevgep25, %for.body66 ], [ %lsr.iv22, %for.cond64.preheader ]
   OF SCEV: {{%cc,+,(4 * %NN)}<nsw><%for.body3.lr.ph>,+,32}<nsw><%for.body9.preheader>
FOUND USER in other loop:   %lsr.iv2 = phi float* [ %12, %for.end60 ], [ %lsr.iv, %for.body9.preheader ]
   OF SCEV: {(8 + %bb)<nsw>,+,32}<nsw><%for.body9.preheader>
FOUND USER:   %cmp2 = icmp slt i32 %add77, %NN
   OF SCEV: {8,+,8}<nuw><%for.body9.preheader>
*** IR Dump Before Loop Strength Reduction ***
for.body9.preheader:                              ; preds = %for.end75, %for.body3.lr.ph
  %lsr.iv22 = phi float* [ %scevgep23, %for.end75 ], [ %lsr.iv19, %for.body3.lr.ph ]
  %lsr.iv = phi float* [ %scevgep1, %for.end75 ], [ %scevgep, %for.body3.lr.ph ]
  %j0.0142 = phi i32 [ 0, %for.body3.lr.ph ], [ %add77, %for.end75 ]
  call void @llvm.lifetime.start(i64 32, i8* nonnull %0) #3
  call void @llvm.memset.p0i8.i32(i8* nonnull %0, i8 0, i32 32, i32 4, i1 false)
  br label %for.body9

for.body9:                                        ; preds = %for.end60, %for.body9.preheader
  %lsr.iv2 = phi float* [ %12, %for.end60 ], [ %lsr.iv, %for.body9.preheader ]
  %x.0139 = phi i32 [ %inc62, %for.end60 ], [ 0, %for.body9.preheader ]
  %lsr.iv23 = bitcast float* %lsr.iv2 to i1*
  %add.ptr10 = getelementptr inbounds float, float* %add.ptr, i32 %x.0139
  %2 = load volatile float, float* %add.ptr10, align 4, !tbaa !1
  br label %for.body13

for.body13:                                       ; preds = %for.body13, %for.body9
  %lsr.iv12 = phi [8 x float]* [ %11, %for.body13 ], [ %scevgep1011, %for.body9 ]
  %lsr.iv5 = phi float* [ %scevgep6, %for.body13 ], [ %lsr.iv2, %for.body9 ]
  %j1.1137 = phi i32 [ 0, %for.body9 ], [ %add59, %for.body13 ]
  %lsr.iv1214 = bitcast [8 x float]* %lsr.iv12 to float*
  %scevgep8 = getelementptr float, float* %lsr.iv5, i32 -2
  %3 = load volatile float, float* %scevgep8, align 4, !tbaa !1
  %scevgep9 = getelementptr float, float* %lsr.iv5, i32 -1
  %4 = load volatile float, float* %scevgep9, align 4, !tbaa !1
  %5 = load volatile float, float* %lsr.iv5, align 4, !tbaa !1
  %scevgep7 = getelementptr float, float* %lsr.iv5, i32 1
  %6 = load volatile float, float* %scevgep7, align 4, !tbaa !1
  %mul40 = fmul float %2, %3
  %scevgep15 = getelementptr float, float* %lsr.iv1214, i32 -2
  %7 = load float, float* %scevgep15, align 4, !tbaa !1
  %add42 = fadd float %mul40, %7
  store float %add42, float* %scevgep15, align 4, !tbaa !1
  %mul44 = fmul float %2, %4
  %scevgep17 = getelementptr float, float* %lsr.iv1214, i32 -1
  %8 = load float, float* %scevgep17, align 4, !tbaa !1
  %add47 = fadd float %mul44, %8
  store float %add47, float* %scevgep17, align 4, !tbaa !1
  %mul49 = fmul float %2, %5
  %9 = load float, float* %lsr.iv1214, align 4, !tbaa !1
  %add52 = fadd float %mul49, %9
  store float %add52, float* %lsr.iv1214, align 4, !tbaa !1
  %mul54 = fmul float %2, %6
  %scevgep16 = getelementptr float, float* %lsr.iv1214, i32 1
  %10 = load float, float* %scevgep16, align 4, !tbaa !1
  %add57 = fadd float %mul54, %10
  store float %add57, float* %scevgep16, align 4, !tbaa !1
  %add59 = add nuw nsw i32 %j1.1137, 4
  %scevgep6 = getelementptr float, float* %lsr.iv5, i32 4
  %scevgep13 = getelementptr [8 x float], [8 x float]* %lsr.iv12, i32 0, i32 4
  %11 = bitcast float* %scevgep13 to [8 x float]*
  %cmp12 = icmp slt i32 %add59, 8
  br i1 %cmp12, label %for.body13, label %for.end60

for.end60:                                        ; preds = %for.body13
  %inc62 = add nuw nsw i32 %x.0139, 1
  %scevgep4 = getelementptr i1, i1* %lsr.iv23, i32 %1
  %12 = bitcast i1* %scevgep4 to float*
  %exitcond = icmp eq i32 %inc62, %NN
  br i1 %exitcond, label %for.cond64.preheader, label %for.body9

for.cond64.preheader:                             ; preds = %for.end60
  br label %for.body66

for.body66:                                       ; preds = %for.body66, %for.cond64.preheader
  %lsr.iv24 = phi float* [ %scevgep25, %for.body66 ], [ %lsr.iv22, %for.cond64.preheader ]
  %lsr.iv18 = phi i32 [ %lsr.iv.next, %for.body66 ], [ 0, %for.cond64.preheader ]
  %uglygep = getelementptr i8, i8* %tot2627, i32 %lsr.iv18
  %uglygep28 = bitcast i8* %uglygep to float*
  %13 = load float, float* %uglygep28, align 4, !tbaa !1
  %14 = load volatile float, float* %lsr.iv24, align 4, !tbaa !1
  %add72 = fadd float %13, %14
  store volatile float %add72, float* %lsr.iv24, align 4, !tbaa !1
  %lsr.iv.next = add nuw nsw i32 %lsr.iv18, 4
  %scevgep25 = getelementptr float, float* %lsr.iv24, i32 1
  %exitcond145 = icmp eq i32 %lsr.iv.next, 32
  br i1 %exitcond145, label %for.end75, label %for.body66

for.end75:                                        ; preds = %for.body66
  call void @llvm.lifetime.end(i64 32, i8* nonnull %0) #3
  %add77 = add nuw nsw i32 %j0.0142, 8
  %cmp2 = icmp slt i32 %add77, %NN
  %scevgep1 = getelementptr float, float* %lsr.iv, i32 8
  %scevgep23 = getelementptr float, float* %lsr.iv22, i32 8
  br i1 %cmp2, label %for.body9.preheader, label %for.end78

LSR on loop %for.body9.preheader:
  Change loop exiting icmp to use postinc iv:   %cmp2 = icmp slt i32 %add77, %NN
LSR skipping outer loop Loop at depth 2 containing: %for.body9.preheader<header>,%for.body9,%for.body13,%for.end60,%for.cond64.preheader,%for.body66,%for.end75<latch><exiting>
    Loop at depth 3 containing: %for.body9<header>,%for.body13,%for.end60<latch><exiting>
        Loop at depth 4 containing: %for.body13<header><latch><exiting>
    Loop at depth 3 containing: %for.body66<header><latch><exiting>

*** IR Dump After Loop Strength Reduction ***
for.body9.preheader:                              ; preds = %for.end75, %for.body3.lr.ph
  %lsr.iv22 = phi float* [ %scevgep23, %for.end75 ], [ %lsr.iv19, %for.body3.lr.ph ]
  %lsr.iv = phi float* [ %scevgep1, %for.end75 ], [ %scevgep, %for.body3.lr.ph ]
  %j0.0142 = phi i32 [ 0, %for.body3.lr.ph ], [ %add77, %for.end75 ]
  call void @llvm.lifetime.start(i64 32, i8* nonnull %0) #3
  call void @llvm.memset.p0i8.i32(i8* nonnull %0, i8 0, i32 32, i32 4, i1 false)
  br label %for.body9

for.body9:                                        ; preds = %for.end60, %for.body9.preheader
  %lsr.iv2 = phi float* [ %12, %for.end60 ], [ %lsr.iv, %for.body9.preheader ]
  %x.0139 = phi i32 [ %inc62, %for.end60 ], [ 0, %for.body9.preheader ]
  %lsr.iv23 = bitcast float* %lsr.iv2 to i1*
  %add.ptr10 = getelementptr inbounds float, float* %add.ptr, i32 %x.0139
  %2 = load volatile float, float* %add.ptr10, align 4, !tbaa !1
  br label %for.body13

for.body13:                                       ; preds = %for.body13, %for.body9
  %lsr.iv12 = phi [8 x float]* [ %11, %for.body13 ], [ %scevgep1011, %for.body9 ]
  %lsr.iv5 = phi float* [ %scevgep6, %for.body13 ], [ %lsr.iv2, %for.body9 ]
  %j1.1137 = phi i32 [ 0, %for.body9 ], [ %add59, %for.body13 ]
  %lsr.iv1214 = bitcast [8 x float]* %lsr.iv12 to float*
  %scevgep8 = getelementptr float, float* %lsr.iv5, i32 -2
  %3 = load volatile float, float* %scevgep8, align 4, !tbaa !1
  %scevgep9 = getelementptr float, float* %lsr.iv5, i32 -1
  %4 = load volatile float, float* %scevgep9, align 4, !tbaa !1
  %5 = load volatile float, float* %lsr.iv5, align 4, !tbaa !1
  %scevgep7 = getelementptr float, float* %lsr.iv5, i32 1
  %6 = load volatile float, float* %scevgep7, align 4, !tbaa !1
  %mul40 = fmul float %2, %3
  %scevgep15 = getelementptr float, float* %lsr.iv1214, i32 -2
  %7 = load float, float* %scevgep15, align 4, !tbaa !1
  %add42 = fadd float %mul40, %7
  store float %add42, float* %scevgep15, align 4, !tbaa !1
  %mul44 = fmul float %2, %4
  %scevgep17 = getelementptr float, float* %lsr.iv1214, i32 -1
  %8 = load float, float* %scevgep17, align 4, !tbaa !1
  %add47 = fadd float %mul44, %8
  store float %add47, float* %scevgep17, align 4, !tbaa !1
  %mul49 = fmul float %2, %5
  %9 = load float, float* %lsr.iv1214, align 4, !tbaa !1
  %add52 = fadd float %mul49, %9
  store float %add52, float* %lsr.iv1214, align 4, !tbaa !1
  %mul54 = fmul float %2, %6
  %scevgep16 = getelementptr float, float* %lsr.iv1214, i32 1
  %10 = load float, float* %scevgep16, align 4, !tbaa !1
  %add57 = fadd float %mul54, %10
  store float %add57, float* %scevgep16, align 4, !tbaa !1
  %add59 = add nuw nsw i32 %j1.1137, 4
  %scevgep6 = getelementptr float, float* %lsr.iv5, i32 4
  %scevgep13 = getelementptr [8 x float], [8 x float]* %lsr.iv12, i32 0, i32 4
  %11 = bitcast float* %scevgep13 to [8 x float]*
  %cmp12 = icmp slt i32 %add59, 8
  br i1 %cmp12, label %for.body13, label %for.end60

for.end60:                                        ; preds = %for.body13
  %inc62 = add nuw nsw i32 %x.0139, 1
  %scevgep4 = getelementptr i1, i1* %lsr.iv23, i32 %1
  %12 = bitcast i1* %scevgep4 to float*
  %exitcond = icmp eq i32 %inc62, %NN
  br i1 %exitcond, label %for.cond64.preheader, label %for.body9

for.cond64.preheader:                             ; preds = %for.end60
  br label %for.body66

for.body66:                                       ; preds = %for.body66, %for.cond64.preheader
  %lsr.iv24 = phi float* [ %scevgep25, %for.body66 ], [ %lsr.iv22, %for.cond64.preheader ]
  %lsr.iv18 = phi i32 [ %lsr.iv.next, %for.body66 ], [ 0, %for.cond64.preheader ]
  %uglygep = getelementptr i8, i8* %tot2627, i32 %lsr.iv18
  %uglygep28 = bitcast i8* %uglygep to float*
  %13 = load float, float* %uglygep28, align 4, !tbaa !1
  %14 = load volatile float, float* %lsr.iv24, align 4, !tbaa !1
  %add72 = fadd float %13, %14
  store volatile float %add72, float* %lsr.iv24, align 4, !tbaa !1
  %lsr.iv.next = add nuw nsw i32 %lsr.iv18, 4
  %scevgep25 = getelementptr float, float* %lsr.iv24, i32 1
  %exitcond145 = icmp eq i32 %lsr.iv.next, 32
  br i1 %exitcond145, label %for.end75, label %for.body66

for.end75:                                        ; preds = %for.body66
  call void @llvm.lifetime.end(i64 32, i8* nonnull %0) #3
  %add77 = add nuw nsw i32 %j0.0142, 8
  %scevgep1 = getelementptr float, float* %lsr.iv, i32 8
  %scevgep23 = getelementptr float, float* %lsr.iv22, i32 8
  %cmp2 = icmp slt i32 %add77, %NN
  br i1 %cmp2, label %for.body9.preheader, label %for.end78
FOUND USER in other loop:   %lsr.iv22 = phi float* [ %scevgep23, %for.end75 ], [ %lsr.iv19, %for.body3.lr.ph ]
   OF SCEV: {%cc,+,(4 * %NN)}<nsw><%for.body3.lr.ph>
FOUND USER:   %exitcond146 = icmp eq i32 %inc80, %NN
   OF SCEV: {1,+,1}<nuw><%for.body3.lr.ph>
FOUND USER in other loop:   %2 = load volatile float, float* %add.ptr10, align 4, !tbaa !1
   OF SCEV: {{%aa,+,(4 * %NN)}<nsw><%for.body3.lr.ph>,+,4}<nsw><%for.body9>
*** IR Dump Before Loop Strength Reduction ***
for.body3.lr.ph:                                  ; preds = %for.end78, %for.body3.lr.ph.preheader
  %lsr.iv19 = phi float* [ %15, %for.end78 ], [ %cc, %for.body3.lr.ph.preheader ]
  %i.0144 = phi i32 [ %inc80, %for.end78 ], [ 0, %for.body3.lr.ph.preheader ]
  %lsr.iv1920 = bitcast float* %lsr.iv19 to i1*
  %mul68 = mul nsw i32 %i.0144, %NN
  %add.ptr = getelementptr inbounds float, float* %aa, i32 %mul68
  br label %for.body9.preheader

for.body9.preheader:                              ; preds = %for.end75, %for.body3.lr.ph
  %lsr.iv22 = phi float* [ %scevgep23, %for.end75 ], [ %lsr.iv19, %for.body3.lr.ph ]
  %lsr.iv = phi float* [ %scevgep1, %for.end75 ], [ %scevgep, %for.body3.lr.ph ]
  %j0.0142 = phi i32 [ 0, %for.body3.lr.ph ], [ %add77, %for.end75 ]
  call void @llvm.lifetime.start(i64 32, i8* nonnull %0) #3
  call void @llvm.memset.p0i8.i32(i8* nonnull %0, i8 0, i32 32, i32 4, i1 false)
  br label %for.body9

for.body9:                                        ; preds = %for.end60, %for.body9.preheader
  %lsr.iv2 = phi float* [ %12, %for.end60 ], [ %lsr.iv, %for.body9.preheader ]
  %x.0139 = phi i32 [ %inc62, %for.end60 ], [ 0, %for.body9.preheader ]
  %lsr.iv23 = bitcast float* %lsr.iv2 to i1*
  %add.ptr10 = getelementptr inbounds float, float* %add.ptr, i32 %x.0139
  %2 = load volatile float, float* %add.ptr10, align 4, !tbaa !1
  br label %for.body13

for.body13:                                       ; preds = %for.body13, %for.body9
  %lsr.iv12 = phi [8 x float]* [ %11, %for.body13 ], [ %scevgep1011, %for.body9 ]
  %lsr.iv5 = phi float* [ %scevgep6, %for.body13 ], [ %lsr.iv2, %for.body9 ]
  %j1.1137 = phi i32 [ 0, %for.body9 ], [ %add59, %for.body13 ]
  %lsr.iv1214 = bitcast [8 x float]* %lsr.iv12 to float*
  %scevgep8 = getelementptr float, float* %lsr.iv5, i32 -2
  %3 = load volatile float, float* %scevgep8, align 4, !tbaa !1
  %scevgep9 = getelementptr float, float* %lsr.iv5, i32 -1
  %4 = load volatile float, float* %scevgep9, align 4, !tbaa !1
  %5 = load volatile float, float* %lsr.iv5, align 4, !tbaa !1
  %scevgep7 = getelementptr float, float* %lsr.iv5, i32 1
  %6 = load volatile float, float* %scevgep7, align 4, !tbaa !1
  %mul40 = fmul float %2, %3
  %scevgep15 = getelementptr float, float* %lsr.iv1214, i32 -2
  %7 = load float, float* %scevgep15, align 4, !tbaa !1
  %add42 = fadd float %mul40, %7
  store float %add42, float* %scevgep15, align 4, !tbaa !1
  %mul44 = fmul float %2, %4
  %scevgep17 = getelementptr float, float* %lsr.iv1214, i32 -1
  %8 = load float, float* %scevgep17, align 4, !tbaa !1
  %add47 = fadd float %mul44, %8
  store float %add47, float* %scevgep17, align 4, !tbaa !1
  %mul49 = fmul float %2, %5
  %9 = load float, float* %lsr.iv1214, align 4, !tbaa !1
  %add52 = fadd float %mul49, %9
  store float %add52, float* %lsr.iv1214, align 4, !tbaa !1
  %mul54 = fmul float %2, %6
  %scevgep16 = getelementptr float, float* %lsr.iv1214, i32 1
  %10 = load float, float* %scevgep16, align 4, !tbaa !1
  %add57 = fadd float %mul54, %10
  store float %add57, float* %scevgep16, align 4, !tbaa !1
  %add59 = add nuw nsw i32 %j1.1137, 4
  %scevgep6 = getelementptr float, float* %lsr.iv5, i32 4
  %scevgep13 = getelementptr [8 x float], [8 x float]* %lsr.iv12, i32 0, i32 4
  %11 = bitcast float* %scevgep13 to [8 x float]*
  %cmp12 = icmp slt i32 %add59, 8
  br i1 %cmp12, label %for.body13, label %for.end60

for.end60:                                        ; preds = %for.body13
  %inc62 = add nuw nsw i32 %x.0139, 1
  %scevgep4 = getelementptr i1, i1* %lsr.iv23, i32 %1
  %12 = bitcast i1* %scevgep4 to float*
  %exitcond = icmp eq i32 %inc62, %NN
  br i1 %exitcond, label %for.cond64.preheader, label %for.body9

for.cond64.preheader:                             ; preds = %for.end60
  br label %for.body66

for.body66:                                       ; preds = %for.body66, %for.cond64.preheader
  %lsr.iv24 = phi float* [ %scevgep25, %for.body66 ], [ %lsr.iv22, %for.cond64.preheader ]
  %lsr.iv18 = phi i32 [ %lsr.iv.next, %for.body66 ], [ 0, %for.cond64.preheader ]
  %uglygep = getelementptr i8, i8* %tot2627, i32 %lsr.iv18
  %uglygep28 = bitcast i8* %uglygep to float*
  %13 = load float, float* %uglygep28, align 4, !tbaa !1
  %14 = load volatile float, float* %lsr.iv24, align 4, !tbaa !1
  %add72 = fadd float %13, %14
  store volatile float %add72, float* %lsr.iv24, align 4, !tbaa !1
  %lsr.iv.next = add nuw nsw i32 %lsr.iv18, 4
  %scevgep25 = getelementptr float, float* %lsr.iv24, i32 1
  %exitcond145 = icmp eq i32 %lsr.iv.next, 32
  br i1 %exitcond145, label %for.end75, label %for.body66

for.end75:                                        ; preds = %for.body66
  call void @llvm.lifetime.end(i64 32, i8* nonnull %0) #3
  %add77 = add nuw nsw i32 %j0.0142, 8
  %scevgep1 = getelementptr float, float* %lsr.iv, i32 8
  %scevgep23 = getelementptr float, float* %lsr.iv22, i32 8
  %cmp2 = icmp slt i32 %add77, %NN
  br i1 %cmp2, label %for.body9.preheader, label %for.end78

for.end78:                                        ; preds = %for.end75
  %inc80 = add nuw nsw i32 %i.0144, 1
  %exitcond146 = icmp eq i32 %inc80, %NN
  %scevgep21 = getelementptr i1, i1* %lsr.iv1920, i32 %1
  %15 = bitcast i1* %scevgep21 to float*
  br i1 %exitcond146, label %for.end81.loopexit, label %for.body3.lr.ph

LSR on loop %for.body3.lr.ph:
  Change loop exiting icmp to use postinc iv:   %exitcond146 = icmp eq i32 %inc80, %NN
LSR skipping outer loop Loop at depth 1 containing: %for.body3.lr.ph<header>,%for.body9.preheader,%for.body9,%for.body13,%for.end60,%for.cond64.preheader,%for.body66,%for.end75,%for.end78<latch><exiting>
    Loop at depth 2 containing: %for.body9.preheader<header>,%for.body9,%for.body13,%for.end60,%for.cond64.preheader,%for.body66,%for.end75<latch><exiting>
        Loop at depth 3 containing: %for.body9<header>,%for.body13,%for.end60<latch><exiting>
            Loop at depth 4 containing: %for.body13<header><latch><exiting>
        Loop at depth 3 containing: %for.body66<header><latch><exiting>

*** IR Dump After Loop Strength Reduction ***
for.body3.lr.ph:                                  ; preds = %for.end78, %for.body3.lr.ph.preheader
  %lsr.iv19 = phi float* [ %15, %for.end78 ], [ %cc, %for.body3.lr.ph.preheader ]
  %i.0144 = phi i32 [ %inc80, %for.end78 ], [ 0, %for.body3.lr.ph.preheader ]
  %lsr.iv1920 = bitcast float* %lsr.iv19 to i1*
  %mul68 = mul nsw i32 %i.0144, %NN
  %add.ptr = getelementptr inbounds float, float* %aa, i32 %mul68
  br label %for.body9.preheader

for.body9.preheader:                              ; preds = %for.end75, %for.body3.lr.ph
  %lsr.iv22 = phi float* [ %scevgep23, %for.end75 ], [ %lsr.iv19, %for.body3.lr.ph ]
  %lsr.iv = phi float* [ %scevgep1, %for.end75 ], [ %scevgep, %for.body3.lr.ph ]
  %j0.0142 = phi i32 [ 0, %for.body3.lr.ph ], [ %add77, %for.end75 ]
  call void @llvm.lifetime.start(i64 32, i8* nonnull %0) #3
  call void @llvm.memset.p0i8.i32(i8* nonnull %0, i8 0, i32 32, i32 4, i1 false)
  br label %for.body9

for.body9:                                        ; preds = %for.end60, %for.body9.preheader
  %lsr.iv2 = phi float* [ %12, %for.end60 ], [ %lsr.iv, %for.body9.preheader ]
  %x.0139 = phi i32 [ %inc62, %for.end60 ], [ 0, %for.body9.preheader ]
  %lsr.iv23 = bitcast float* %lsr.iv2 to i1*
  %add.ptr10 = getelementptr inbounds float, float* %add.ptr, i32 %x.0139
  %2 = load volatile float, float* %add.ptr10, align 4, !tbaa !1
  br label %for.body13

for.body13:                                       ; preds = %for.body13, %for.body9
  %lsr.iv12 = phi [8 x float]* [ %11, %for.body13 ], [ %scevgep1011, %for.body9 ]
  %lsr.iv5 = phi float* [ %scevgep6, %for.body13 ], [ %lsr.iv2, %for.body9 ]
  %j1.1137 = phi i32 [ 0, %for.body9 ], [ %add59, %for.body13 ]
  %lsr.iv1214 = bitcast [8 x float]* %lsr.iv12 to float*
  %scevgep8 = getelementptr float, float* %lsr.iv5, i32 -2
  %3 = load volatile float, float* %scevgep8, align 4, !tbaa !1
  %scevgep9 = getelementptr float, float* %lsr.iv5, i32 -1
  %4 = load volatile float, float* %scevgep9, align 4, !tbaa !1
  %5 = load volatile float, float* %lsr.iv5, align 4, !tbaa !1
  %scevgep7 = getelementptr float, float* %lsr.iv5, i32 1
  %6 = load volatile float, float* %scevgep7, align 4, !tbaa !1
  %mul40 = fmul float %2, %3
  %scevgep15 = getelementptr float, float* %lsr.iv1214, i32 -2
  %7 = load float, float* %scevgep15, align 4, !tbaa !1
  %add42 = fadd float %mul40, %7
  store float %add42, float* %scevgep15, align 4, !tbaa !1
  %mul44 = fmul float %2, %4
  %scevgep17 = getelementptr float, float* %lsr.iv1214, i32 -1
  %8 = load float, float* %scevgep17, align 4, !tbaa !1
  %add47 = fadd float %mul44, %8
  store float %add47, float* %scevgep17, align 4, !tbaa !1
  %mul49 = fmul float %2, %5
  %9 = load float, float* %lsr.iv1214, align 4, !tbaa !1
  %add52 = fadd float %mul49, %9
  store float %add52, float* %lsr.iv1214, align 4, !tbaa !1
  %mul54 = fmul float %2, %6
  %scevgep16 = getelementptr float, float* %lsr.iv1214, i32 1
  %10 = load float, float* %scevgep16, align 4, !tbaa !1
  %add57 = fadd float %mul54, %10
  store float %add57, float* %scevgep16, align 4, !tbaa !1
  %add59 = add nuw nsw i32 %j1.1137, 4
  %scevgep6 = getelementptr float, float* %lsr.iv5, i32 4
  %scevgep13 = getelementptr [8 x float], [8 x float]* %lsr.iv12, i32 0, i32 4
  %11 = bitcast float* %scevgep13 to [8 x float]*
  %cmp12 = icmp slt i32 %add59, 8
  br i1 %cmp12, label %for.body13, label %for.end60

for.end60:                                        ; preds = %for.body13
  %inc62 = add nuw nsw i32 %x.0139, 1
  %scevgep4 = getelementptr i1, i1* %lsr.iv23, i32 %1
  %12 = bitcast i1* %scevgep4 to float*
  %exitcond = icmp eq i32 %inc62, %NN
  br i1 %exitcond, label %for.cond64.preheader, label %for.body9

for.cond64.preheader:                             ; preds = %for.end60
  br label %for.body66

for.body66:                                       ; preds = %for.body66, %for.cond64.preheader
  %lsr.iv24 = phi float* [ %scevgep25, %for.body66 ], [ %lsr.iv22, %for.cond64.preheader ]
  %lsr.iv18 = phi i32 [ %lsr.iv.next, %for.body66 ], [ 0, %for.cond64.preheader ]
  %uglygep = getelementptr i8, i8* %tot2627, i32 %lsr.iv18
  %uglygep28 = bitcast i8* %uglygep to float*
  %13 = load float, float* %uglygep28, align 4, !tbaa !1
  %14 = load volatile float, float* %lsr.iv24, align 4, !tbaa !1
  %add72 = fadd float %13, %14
  store volatile float %add72, float* %lsr.iv24, align 4, !tbaa !1
  %lsr.iv.next = add nuw nsw i32 %lsr.iv18, 4
  %scevgep25 = getelementptr float, float* %lsr.iv24, i32 1
  %exitcond145 = icmp eq i32 %lsr.iv.next, 32
  br i1 %exitcond145, label %for.end75, label %for.body66

for.end75:                                        ; preds = %for.body66
  call void @llvm.lifetime.end(i64 32, i8* nonnull %0) #3
  %add77 = add nuw nsw i32 %j0.0142, 8
  %scevgep1 = getelementptr float, float* %lsr.iv, i32 8
  %scevgep23 = getelementptr float, float* %lsr.iv22, i32 8
  %cmp2 = icmp slt i32 %add77, %NN
  br i1 %cmp2, label %for.body9.preheader, label %for.end78

for.end78:                                        ; preds = %for.end75
  %inc80 = add nuw nsw i32 %i.0144, 1
  %scevgep21 = getelementptr i1, i1* %lsr.iv1920, i32 %1
  %15 = bitcast i1* %scevgep21 to float*
  %exitcond146 = icmp eq i32 %inc80, %NN
  br i1 %exitcond146, label %for.end81.loopexit, label %for.body3.lr.ph
*** IR Dump Before Lower Garbage Collection Instructions ***
; Function Attrs: nounwind optsize
define hidden void @matmac(float* noalias %aa, float* noalias %bb, float* noalias %cc, i32 %NN) local_unnamed_addr #2 {
entry:
  %tot = alloca [8 x float], align 4
  %tot26 = bitcast [8 x float]* %tot to float*
  %tot2627 = bitcast float* %tot26 to i8*
  %0 = bitcast [8 x float]* %tot to i8*
  %cmp143 = icmp sgt i32 %NN, 0
  br i1 %cmp143, label %for.body3.lr.ph.preheader, label %for.end81

for.body3.lr.ph.preheader:                        ; preds = %entry
  %scevgep = getelementptr float, float* %bb, i32 2
  %1 = shl i32 %NN, 2
  %scevgep10 = getelementptr [8 x float], [8 x float]* %tot, i32 0, i32 2
  %scevgep1011 = bitcast float* %scevgep10 to [8 x float]*
  br label %for.body3.lr.ph

for.body3.lr.ph:                                  ; preds = %for.end78, %for.body3.lr.ph.preheader
  %lsr.iv19 = phi float* [ %15, %for.end78 ], [ %cc, %for.body3.lr.ph.preheader ]
  %i.0144 = phi i32 [ %inc80, %for.end78 ], [ 0, %for.body3.lr.ph.preheader ]
  %lsr.iv1920 = bitcast float* %lsr.iv19 to i1*
  %mul68 = mul nsw i32 %i.0144, %NN
  %add.ptr = getelementptr inbounds float, float* %aa, i32 %mul68
  br label %for.body9.preheader

for.body9.preheader:                              ; preds = %for.end75, %for.body3.lr.ph
  %lsr.iv22 = phi float* [ %scevgep23, %for.end75 ], [ %lsr.iv19, %for.body3.lr.ph ]
  %lsr.iv = phi float* [ %scevgep1, %for.end75 ], [ %scevgep, %for.body3.lr.ph ]
  %j0.0142 = phi i32 [ 0, %for.body3.lr.ph ], [ %add77, %for.end75 ]
  call void @llvm.lifetime.start(i64 32, i8* nonnull %0) #3
  call void @llvm.memset.p0i8.i32(i8* nonnull %0, i8 0, i32 32, i32 4, i1 false)
  br label %for.body9

for.cond64.preheader:                             ; preds = %for.end60
  br label %for.body66

for.body9:                                        ; preds = %for.end60, %for.body9.preheader
  %lsr.iv2 = phi float* [ %12, %for.end60 ], [ %lsr.iv, %for.body9.preheader ]
  %x.0139 = phi i32 [ %inc62, %for.end60 ], [ 0, %for.body9.preheader ]
  %lsr.iv23 = bitcast float* %lsr.iv2 to i1*
  %add.ptr10 = getelementptr inbounds float, float* %add.ptr, i32 %x.0139
  %2 = load volatile float, float* %add.ptr10, align 4, !tbaa !1
  br label %for.body13

for.body13:                                       ; preds = %for.body13, %for.body9
  %lsr.iv12 = phi [8 x float]* [ %11, %for.body13 ], [ %scevgep1011, %for.body9 ]
  %lsr.iv5 = phi float* [ %scevgep6, %for.body13 ], [ %lsr.iv2, %for.body9 ]
  %j1.1137 = phi i32 [ 0, %for.body9 ], [ %add59, %for.body13 ]
  %lsr.iv1214 = bitcast [8 x float]* %lsr.iv12 to float*
  %scevgep8 = getelementptr float, float* %lsr.iv5, i32 -2
  %3 = load volatile float, float* %scevgep8, align 4, !tbaa !1
  %scevgep9 = getelementptr float, float* %lsr.iv5, i32 -1
  %4 = load volatile float, float* %scevgep9, align 4, !tbaa !1
  %5 = load volatile float, float* %lsr.iv5, align 4, !tbaa !1
  %scevgep7 = getelementptr float, float* %lsr.iv5, i32 1
  %6 = load volatile float, float* %scevgep7, align 4, !tbaa !1
  %mul40 = fmul float %2, %3
  %scevgep15 = getelementptr float, float* %lsr.iv1214, i32 -2
  %7 = load float, float* %scevgep15, align 4, !tbaa !1
  %add42 = fadd float %mul40, %7
  store float %add42, float* %scevgep15, align 4, !tbaa !1
  %mul44 = fmul float %2, %4
  %scevgep17 = getelementptr float, float* %lsr.iv1214, i32 -1
  %8 = load float, float* %scevgep17, align 4, !tbaa !1
  %add47 = fadd float %mul44, %8
  store float %add47, float* %scevgep17, align 4, !tbaa !1
  %mul49 = fmul float %2, %5
  %9 = load float, float* %lsr.iv1214, align 4, !tbaa !1
  %add52 = fadd float %mul49, %9
  store float %add52, float* %lsr.iv1214, align 4, !tbaa !1
  %mul54 = fmul float %2, %6
  %scevgep16 = getelementptr float, float* %lsr.iv1214, i32 1
  %10 = load float, float* %scevgep16, align 4, !tbaa !1
  %add57 = fadd float %mul54, %10
  store float %add57, float* %scevgep16, align 4, !tbaa !1
  %add59 = add nuw nsw i32 %j1.1137, 4
  %scevgep6 = getelementptr float, float* %lsr.iv5, i32 4
  %scevgep13 = getelementptr [8 x float], [8 x float]* %lsr.iv12, i32 0, i32 4
  %11 = bitcast float* %scevgep13 to [8 x float]*
  %cmp12 = icmp slt i32 %add59, 8
  br i1 %cmp12, label %for.body13, label %for.end60

for.end60:                                        ; preds = %for.body13
  %inc62 = add nuw nsw i32 %x.0139, 1
  %scevgep4 = getelementptr i1, i1* %lsr.iv23, i32 %1
  %12 = bitcast i1* %scevgep4 to float*
  %exitcond = icmp eq i32 %inc62, %NN
  br i1 %exitcond, label %for.cond64.preheader, label %for.body9

for.body66:                                       ; preds = %for.body66, %for.cond64.preheader
  %lsr.iv24 = phi float* [ %scevgep25, %for.body66 ], [ %lsr.iv22, %for.cond64.preheader ]
  %lsr.iv18 = phi i32 [ %lsr.iv.next, %for.body66 ], [ 0, %for.cond64.preheader ]
  %uglygep = getelementptr i8, i8* %tot2627, i32 %lsr.iv18
  %uglygep28 = bitcast i8* %uglygep to float*
  %13 = load float, float* %uglygep28, align 4, !tbaa !1
  %14 = load volatile float, float* %lsr.iv24, align 4, !tbaa !1
  %add72 = fadd float %13, %14
  store volatile float %add72, float* %lsr.iv24, align 4, !tbaa !1
  %lsr.iv.next = add nuw nsw i32 %lsr.iv18, 4
  %scevgep25 = getelementptr float, float* %lsr.iv24, i32 1
  %exitcond145 = icmp eq i32 %lsr.iv.next, 32
  br i1 %exitcond145, label %for.end75, label %for.body66

for.end75:                                        ; preds = %for.body66
  call void @llvm.lifetime.end(i64 32, i8* nonnull %0) #3
  %add77 = add nuw nsw i32 %j0.0142, 8
  %scevgep1 = getelementptr float, float* %lsr.iv, i32 8
  %scevgep23 = getelementptr float, float* %lsr.iv22, i32 8
  %cmp2 = icmp slt i32 %add77, %NN
  br i1 %cmp2, label %for.body9.preheader, label %for.end78

for.end78:                                        ; preds = %for.end75
  %inc80 = add nuw nsw i32 %i.0144, 1
  %scevgep21 = getelementptr i1, i1* %lsr.iv1920, i32 %1
  %15 = bitcast i1* %scevgep21 to float*
  %exitcond146 = icmp eq i32 %inc80, %NN
  br i1 %exitcond146, label %for.end81.loopexit, label %for.body3.lr.ph

for.end81.loopexit:                               ; preds = %for.end78
  br label %for.end81

for.end81:                                        ; preds = %for.end81.loopexit, %entry
  ret void
}
*** IR Dump After Lower Garbage Collection Instructions ***
; Function Attrs: nounwind optsize
define hidden void @matmac(float* noalias %aa, float* noalias %bb, float* noalias %cc, i32 %NN) local_unnamed_addr #2 {
entry:
  %tot = alloca [8 x float], align 4
  %tot26 = bitcast [8 x float]* %tot to float*
  %tot2627 = bitcast float* %tot26 to i8*
  %0 = bitcast [8 x float]* %tot to i8*
  %cmp143 = icmp sgt i32 %NN, 0
  br i1 %cmp143, label %for.body3.lr.ph.preheader, label %for.end81

for.body3.lr.ph.preheader:                        ; preds = %entry
  %scevgep = getelementptr float, float* %bb, i32 2
  %1 = shl i32 %NN, 2
  %scevgep10 = getelementptr [8 x float], [8 x float]* %tot, i32 0, i32 2
  %scevgep1011 = bitcast float* %scevgep10 to [8 x float]*
  br label %for.body3.lr.ph

for.body3.lr.ph:                                  ; preds = %for.end78, %for.body3.lr.ph.preheader
  %lsr.iv19 = phi float* [ %15, %for.end78 ], [ %cc, %for.body3.lr.ph.preheader ]
  %i.0144 = phi i32 [ %inc80, %for.end78 ], [ 0, %for.body3.lr.ph.preheader ]
  %lsr.iv1920 = bitcast float* %lsr.iv19 to i1*
  %mul68 = mul nsw i32 %i.0144, %NN
  %add.ptr = getelementptr inbounds float, float* %aa, i32 %mul68
  br label %for.body9.preheader

for.body9.preheader:                              ; preds = %for.end75, %for.body3.lr.ph
  %lsr.iv22 = phi float* [ %scevgep23, %for.end75 ], [ %lsr.iv19, %for.body3.lr.ph ]
  %lsr.iv = phi float* [ %scevgep1, %for.end75 ], [ %scevgep, %for.body3.lr.ph ]
  %j0.0142 = phi i32 [ 0, %for.body3.lr.ph ], [ %add77, %for.end75 ]
  call void @llvm.lifetime.start(i64 32, i8* nonnull %0) #3
  call void @llvm.memset.p0i8.i32(i8* nonnull %0, i8 0, i32 32, i32 4, i1 false)
  br label %for.body9

for.cond64.preheader:                             ; preds = %for.end60
  br label %for.body66

for.body9:                                        ; preds = %for.end60, %for.body9.preheader
  %lsr.iv2 = phi float* [ %12, %for.end60 ], [ %lsr.iv, %for.body9.preheader ]
  %x.0139 = phi i32 [ %inc62, %for.end60 ], [ 0, %for.body9.preheader ]
  %lsr.iv23 = bitcast float* %lsr.iv2 to i1*
  %add.ptr10 = getelementptr inbounds float, float* %add.ptr, i32 %x.0139
  %2 = load volatile float, float* %add.ptr10, align 4, !tbaa !1
  br label %for.body13

for.body13:                                       ; preds = %for.body13, %for.body9
  %lsr.iv12 = phi [8 x float]* [ %11, %for.body13 ], [ %scevgep1011, %for.body9 ]
  %lsr.iv5 = phi float* [ %scevgep6, %for.body13 ], [ %lsr.iv2, %for.body9 ]
  %j1.1137 = phi i32 [ 0, %for.body9 ], [ %add59, %for.body13 ]
  %lsr.iv1214 = bitcast [8 x float]* %lsr.iv12 to float*
  %scevgep8 = getelementptr float, float* %lsr.iv5, i32 -2
  %3 = load volatile float, float* %scevgep8, align 4, !tbaa !1
  %scevgep9 = getelementptr float, float* %lsr.iv5, i32 -1
  %4 = load volatile float, float* %scevgep9, align 4, !tbaa !1
  %5 = load volatile float, float* %lsr.iv5, align 4, !tbaa !1
  %scevgep7 = getelementptr float, float* %lsr.iv5, i32 1
  %6 = load volatile float, float* %scevgep7, align 4, !tbaa !1
  %mul40 = fmul float %2, %3
  %scevgep15 = getelementptr float, float* %lsr.iv1214, i32 -2
  %7 = load float, float* %scevgep15, align 4, !tbaa !1
  %add42 = fadd float %mul40, %7
  store float %add42, float* %scevgep15, align 4, !tbaa !1
  %mul44 = fmul float %2, %4
  %scevgep17 = getelementptr float, float* %lsr.iv1214, i32 -1
  %8 = load float, float* %scevgep17, align 4, !tbaa !1
  %add47 = fadd float %mul44, %8
  store float %add47, float* %scevgep17, align 4, !tbaa !1
  %mul49 = fmul float %2, %5
  %9 = load float, float* %lsr.iv1214, align 4, !tbaa !1
  %add52 = fadd float %mul49, %9
  store float %add52, float* %lsr.iv1214, align 4, !tbaa !1
  %mul54 = fmul float %2, %6
  %scevgep16 = getelementptr float, float* %lsr.iv1214, i32 1
  %10 = load float, float* %scevgep16, align 4, !tbaa !1
  %add57 = fadd float %mul54, %10
  store float %add57, float* %scevgep16, align 4, !tbaa !1
  %add59 = add nuw nsw i32 %j1.1137, 4
  %scevgep6 = getelementptr float, float* %lsr.iv5, i32 4
  %scevgep13 = getelementptr [8 x float], [8 x float]* %lsr.iv12, i32 0, i32 4
  %11 = bitcast float* %scevgep13 to [8 x float]*
  %cmp12 = icmp slt i32 %add59, 8
  br i1 %cmp12, label %for.body13, label %for.end60

for.end60:                                        ; preds = %for.body13
  %inc62 = add nuw nsw i32 %x.0139, 1
  %scevgep4 = getelementptr i1, i1* %lsr.iv23, i32 %1
  %12 = bitcast i1* %scevgep4 to float*
  %exitcond = icmp eq i32 %inc62, %NN
  br i1 %exitcond, label %for.cond64.preheader, label %for.body9

for.body66:                                       ; preds = %for.body66, %for.cond64.preheader
  %lsr.iv24 = phi float* [ %scevgep25, %for.body66 ], [ %lsr.iv22, %for.cond64.preheader ]
  %lsr.iv18 = phi i32 [ %lsr.iv.next, %for.body66 ], [ 0, %for.cond64.preheader ]
  %uglygep = getelementptr i8, i8* %tot2627, i32 %lsr.iv18
  %uglygep28 = bitcast i8* %uglygep to float*
  %13 = load float, float* %uglygep28, align 4, !tbaa !1
  %14 = load volatile float, float* %lsr.iv24, align 4, !tbaa !1
  %add72 = fadd float %13, %14
  store volatile float %add72, float* %lsr.iv24, align 4, !tbaa !1
  %lsr.iv.next = add nuw nsw i32 %lsr.iv18, 4
  %scevgep25 = getelementptr float, float* %lsr.iv24, i32 1
  %exitcond145 = icmp eq i32 %lsr.iv.next, 32
  br i1 %exitcond145, label %for.end75, label %for.body66

for.end75:                                        ; preds = %for.body66
  call void @llvm.lifetime.end(i64 32, i8* nonnull %0) #3
  %add77 = add nuw nsw i32 %j0.0142, 8
  %scevgep1 = getelementptr float, float* %lsr.iv, i32 8
  %scevgep23 = getelementptr float, float* %lsr.iv22, i32 8
  %cmp2 = icmp slt i32 %add77, %NN
  br i1 %cmp2, label %for.body9.preheader, label %for.end78

for.end78:                                        ; preds = %for.end75
  %inc80 = add nuw nsw i32 %i.0144, 1
  %scevgep21 = getelementptr i1, i1* %lsr.iv1920, i32 %1
  %15 = bitcast i1* %scevgep21 to float*
  %exitcond146 = icmp eq i32 %inc80, %NN
  br i1 %exitcond146, label %for.end81.loopexit, label %for.body3.lr.ph

for.end81.loopexit:                               ; preds = %for.end78
  br label %for.end81

for.end81:                                        ; preds = %for.end81.loopexit, %entry
  ret void
}
*** IR Dump Before Shadow Stack GC Lowering ***
; Function Attrs: nounwind optsize
define hidden void @matmac(float* noalias %aa, float* noalias %bb, float* noalias %cc, i32 %NN) local_unnamed_addr #2 {
entry:
  %tot = alloca [8 x float], align 4
  %tot26 = bitcast [8 x float]* %tot to float*
  %tot2627 = bitcast float* %tot26 to i8*
  %0 = bitcast [8 x float]* %tot to i8*
  %cmp143 = icmp sgt i32 %NN, 0
  br i1 %cmp143, label %for.body3.lr.ph.preheader, label %for.end81

for.body3.lr.ph.preheader:                        ; preds = %entry
  %scevgep = getelementptr float, float* %bb, i32 2
  %1 = shl i32 %NN, 2
  %scevgep10 = getelementptr [8 x float], [8 x float]* %tot, i32 0, i32 2
  %scevgep1011 = bitcast float* %scevgep10 to [8 x float]*
  br label %for.body3.lr.ph

for.body3.lr.ph:                                  ; preds = %for.end78, %for.body3.lr.ph.preheader
  %lsr.iv19 = phi float* [ %15, %for.end78 ], [ %cc, %for.body3.lr.ph.preheader ]
  %i.0144 = phi i32 [ %inc80, %for.end78 ], [ 0, %for.body3.lr.ph.preheader ]
  %lsr.iv1920 = bitcast float* %lsr.iv19 to i1*
  %mul68 = mul nsw i32 %i.0144, %NN
  %add.ptr = getelementptr inbounds float, float* %aa, i32 %mul68
  br label %for.body9.preheader

for.body9.preheader:                              ; preds = %for.end75, %for.body3.lr.ph
  %lsr.iv22 = phi float* [ %scevgep23, %for.end75 ], [ %lsr.iv19, %for.body3.lr.ph ]
  %lsr.iv = phi float* [ %scevgep1, %for.end75 ], [ %scevgep, %for.body3.lr.ph ]
  %j0.0142 = phi i32 [ 0, %for.body3.lr.ph ], [ %add77, %for.end75 ]
  call void @llvm.lifetime.start(i64 32, i8* nonnull %0) #3
  call void @llvm.memset.p0i8.i32(i8* nonnull %0, i8 0, i32 32, i32 4, i1 false)
  br label %for.body9

for.cond64.preheader:                             ; preds = %for.end60
  br label %for.body66

for.body9:                                        ; preds = %for.end60, %for.body9.preheader
  %lsr.iv2 = phi float* [ %12, %for.end60 ], [ %lsr.iv, %for.body9.preheader ]
  %x.0139 = phi i32 [ %inc62, %for.end60 ], [ 0, %for.body9.preheader ]
  %lsr.iv23 = bitcast float* %lsr.iv2 to i1*
  %add.ptr10 = getelementptr inbounds float, float* %add.ptr, i32 %x.0139
  %2 = load volatile float, float* %add.ptr10, align 4, !tbaa !1
  br label %for.body13

for.body13:                                       ; preds = %for.body13, %for.body9
  %lsr.iv12 = phi [8 x float]* [ %11, %for.body13 ], [ %scevgep1011, %for.body9 ]
  %lsr.iv5 = phi float* [ %scevgep6, %for.body13 ], [ %lsr.iv2, %for.body9 ]
  %j1.1137 = phi i32 [ 0, %for.body9 ], [ %add59, %for.body13 ]
  %lsr.iv1214 = bitcast [8 x float]* %lsr.iv12 to float*
  %scevgep8 = getelementptr float, float* %lsr.iv5, i32 -2
  %3 = load volatile float, float* %scevgep8, align 4, !tbaa !1
  %scevgep9 = getelementptr float, float* %lsr.iv5, i32 -1
  %4 = load volatile float, float* %scevgep9, align 4, !tbaa !1
  %5 = load volatile float, float* %lsr.iv5, align 4, !tbaa !1
  %scevgep7 = getelementptr float, float* %lsr.iv5, i32 1
  %6 = load volatile float, float* %scevgep7, align 4, !tbaa !1
  %mul40 = fmul float %2, %3
  %scevgep15 = getelementptr float, float* %lsr.iv1214, i32 -2
  %7 = load float, float* %scevgep15, align 4, !tbaa !1
  %add42 = fadd float %mul40, %7
  store float %add42, float* %scevgep15, align 4, !tbaa !1
  %mul44 = fmul float %2, %4
  %scevgep17 = getelementptr float, float* %lsr.iv1214, i32 -1
  %8 = load float, float* %scevgep17, align 4, !tbaa !1
  %add47 = fadd float %mul44, %8
  store float %add47, float* %scevgep17, align 4, !tbaa !1
  %mul49 = fmul float %2, %5
  %9 = load float, float* %lsr.iv1214, align 4, !tbaa !1
  %add52 = fadd float %mul49, %9
  store float %add52, float* %lsr.iv1214, align 4, !tbaa !1
  %mul54 = fmul float %2, %6
  %scevgep16 = getelementptr float, float* %lsr.iv1214, i32 1
  %10 = load float, float* %scevgep16, align 4, !tbaa !1
  %add57 = fadd float %mul54, %10
  store float %add57, float* %scevgep16, align 4, !tbaa !1
  %add59 = add nuw nsw i32 %j1.1137, 4
  %scevgep6 = getelementptr float, float* %lsr.iv5, i32 4
  %scevgep13 = getelementptr [8 x float], [8 x float]* %lsr.iv12, i32 0, i32 4
  %11 = bitcast float* %scevgep13 to [8 x float]*
  %cmp12 = icmp slt i32 %add59, 8
  br i1 %cmp12, label %for.body13, label %for.end60

for.end60:                                        ; preds = %for.body13
  %inc62 = add nuw nsw i32 %x.0139, 1
  %scevgep4 = getelementptr i1, i1* %lsr.iv23, i32 %1
  %12 = bitcast i1* %scevgep4 to float*
  %exitcond = icmp eq i32 %inc62, %NN
  br i1 %exitcond, label %for.cond64.preheader, label %for.body9

for.body66:                                       ; preds = %for.body66, %for.cond64.preheader
  %lsr.iv24 = phi float* [ %scevgep25, %for.body66 ], [ %lsr.iv22, %for.cond64.preheader ]
  %lsr.iv18 = phi i32 [ %lsr.iv.next, %for.body66 ], [ 0, %for.cond64.preheader ]
  %uglygep = getelementptr i8, i8* %tot2627, i32 %lsr.iv18
  %uglygep28 = bitcast i8* %uglygep to float*
  %13 = load float, float* %uglygep28, align 4, !tbaa !1
  %14 = load volatile float, float* %lsr.iv24, align 4, !tbaa !1
  %add72 = fadd float %13, %14
  store volatile float %add72, float* %lsr.iv24, align 4, !tbaa !1
  %lsr.iv.next = add nuw nsw i32 %lsr.iv18, 4
  %scevgep25 = getelementptr float, float* %lsr.iv24, i32 1
  %exitcond145 = icmp eq i32 %lsr.iv.next, 32
  br i1 %exitcond145, label %for.end75, label %for.body66

for.end75:                                        ; preds = %for.body66
  call void @llvm.lifetime.end(i64 32, i8* nonnull %0) #3
  %add77 = add nuw nsw i32 %j0.0142, 8
  %scevgep1 = getelementptr float, float* %lsr.iv, i32 8
  %scevgep23 = getelementptr float, float* %lsr.iv22, i32 8
  %cmp2 = icmp slt i32 %add77, %NN
  br i1 %cmp2, label %for.body9.preheader, label %for.end78

for.end78:                                        ; preds = %for.end75
  %inc80 = add nuw nsw i32 %i.0144, 1
  %scevgep21 = getelementptr i1, i1* %lsr.iv1920, i32 %1
  %15 = bitcast i1* %scevgep21 to float*
  %exitcond146 = icmp eq i32 %inc80, %NN
  br i1 %exitcond146, label %for.end81.loopexit, label %for.body3.lr.ph

for.end81.loopexit:                               ; preds = %for.end78
  br label %for.end81

for.end81:                                        ; preds = %for.end81.loopexit, %entry
  ret void
}
*** IR Dump After Shadow Stack GC Lowering ***
; Function Attrs: nounwind optsize
define hidden void @matmac(float* noalias %aa, float* noalias %bb, float* noalias %cc, i32 %NN) local_unnamed_addr #2 {
entry:
  %tot = alloca [8 x float], align 4
  %tot26 = bitcast [8 x float]* %tot to float*
  %tot2627 = bitcast float* %tot26 to i8*
  %0 = bitcast [8 x float]* %tot to i8*
  %cmp143 = icmp sgt i32 %NN, 0
  br i1 %cmp143, label %for.body3.lr.ph.preheader, label %for.end81

for.body3.lr.ph.preheader:                        ; preds = %entry
  %scevgep = getelementptr float, float* %bb, i32 2
  %1 = shl i32 %NN, 2
  %scevgep10 = getelementptr [8 x float], [8 x float]* %tot, i32 0, i32 2
  %scevgep1011 = bitcast float* %scevgep10 to [8 x float]*
  br label %for.body3.lr.ph

for.body3.lr.ph:                                  ; preds = %for.end78, %for.body3.lr.ph.preheader
  %lsr.iv19 = phi float* [ %15, %for.end78 ], [ %cc, %for.body3.lr.ph.preheader ]
  %i.0144 = phi i32 [ %inc80, %for.end78 ], [ 0, %for.body3.lr.ph.preheader ]
  %lsr.iv1920 = bitcast float* %lsr.iv19 to i1*
  %mul68 = mul nsw i32 %i.0144, %NN
  %add.ptr = getelementptr inbounds float, float* %aa, i32 %mul68
  br label %for.body9.preheader

for.body9.preheader:                              ; preds = %for.end75, %for.body3.lr.ph
  %lsr.iv22 = phi float* [ %scevgep23, %for.end75 ], [ %lsr.iv19, %for.body3.lr.ph ]
  %lsr.iv = phi float* [ %scevgep1, %for.end75 ], [ %scevgep, %for.body3.lr.ph ]
  %j0.0142 = phi i32 [ 0, %for.body3.lr.ph ], [ %add77, %for.end75 ]
  call void @llvm.lifetime.start(i64 32, i8* nonnull %0) #3
  call void @llvm.memset.p0i8.i32(i8* nonnull %0, i8 0, i32 32, i32 4, i1 false)
  br label %for.body9

for.cond64.preheader:                             ; preds = %for.end60
  br label %for.body66

for.body9:                                        ; preds = %for.end60, %for.body9.preheader
  %lsr.iv2 = phi float* [ %12, %for.end60 ], [ %lsr.iv, %for.body9.preheader ]
  %x.0139 = phi i32 [ %inc62, %for.end60 ], [ 0, %for.body9.preheader ]
  %lsr.iv23 = bitcast float* %lsr.iv2 to i1*
  %add.ptr10 = getelementptr inbounds float, float* %add.ptr, i32 %x.0139
  %2 = load volatile float, float* %add.ptr10, align 4, !tbaa !1
  br label %for.body13

for.body13:                                       ; preds = %for.body13, %for.body9
  %lsr.iv12 = phi [8 x float]* [ %11, %for.body13 ], [ %scevgep1011, %for.body9 ]
  %lsr.iv5 = phi float* [ %scevgep6, %for.body13 ], [ %lsr.iv2, %for.body9 ]
  %j1.1137 = phi i32 [ 0, %for.body9 ], [ %add59, %for.body13 ]
  %lsr.iv1214 = bitcast [8 x float]* %lsr.iv12 to float*
  %scevgep8 = getelementptr float, float* %lsr.iv5, i32 -2
  %3 = load volatile float, float* %scevgep8, align 4, !tbaa !1
  %scevgep9 = getelementptr float, float* %lsr.iv5, i32 -1
  %4 = load volatile float, float* %scevgep9, align 4, !tbaa !1
  %5 = load volatile float, float* %lsr.iv5, align 4, !tbaa !1
  %scevgep7 = getelementptr float, float* %lsr.iv5, i32 1
  %6 = load volatile float, float* %scevgep7, align 4, !tbaa !1
  %mul40 = fmul float %2, %3
  %scevgep15 = getelementptr float, float* %lsr.iv1214, i32 -2
  %7 = load float, float* %scevgep15, align 4, !tbaa !1
  %add42 = fadd float %mul40, %7
  store float %add42, float* %scevgep15, align 4, !tbaa !1
  %mul44 = fmul float %2, %4
  %scevgep17 = getelementptr float, float* %lsr.iv1214, i32 -1
  %8 = load float, float* %scevgep17, align 4, !tbaa !1
  %add47 = fadd float %mul44, %8
  store float %add47, float* %scevgep17, align 4, !tbaa !1
  %mul49 = fmul float %2, %5
  %9 = load float, float* %lsr.iv1214, align 4, !tbaa !1
  %add52 = fadd float %mul49, %9
  store float %add52, float* %lsr.iv1214, align 4, !tbaa !1
  %mul54 = fmul float %2, %6
  %scevgep16 = getelementptr float, float* %lsr.iv1214, i32 1
  %10 = load float, float* %scevgep16, align 4, !tbaa !1
  %add57 = fadd float %mul54, %10
  store float %add57, float* %scevgep16, align 4, !tbaa !1
  %add59 = add nuw nsw i32 %j1.1137, 4
  %scevgep6 = getelementptr float, float* %lsr.iv5, i32 4
  %scevgep13 = getelementptr [8 x float], [8 x float]* %lsr.iv12, i32 0, i32 4
  %11 = bitcast float* %scevgep13 to [8 x float]*
  %cmp12 = icmp slt i32 %add59, 8
  br i1 %cmp12, label %for.body13, label %for.end60

for.end60:                                        ; preds = %for.body13
  %inc62 = add nuw nsw i32 %x.0139, 1
  %scevgep4 = getelementptr i1, i1* %lsr.iv23, i32 %1
  %12 = bitcast i1* %scevgep4 to float*
  %exitcond = icmp eq i32 %inc62, %NN
  br i1 %exitcond, label %for.cond64.preheader, label %for.body9

for.body66:                                       ; preds = %for.body66, %for.cond64.preheader
  %lsr.iv24 = phi float* [ %scevgep25, %for.body66 ], [ %lsr.iv22, %for.cond64.preheader ]
  %lsr.iv18 = phi i32 [ %lsr.iv.next, %for.body66 ], [ 0, %for.cond64.preheader ]
  %uglygep = getelementptr i8, i8* %tot2627, i32 %lsr.iv18
  %uglygep28 = bitcast i8* %uglygep to float*
  %13 = load float, float* %uglygep28, align 4, !tbaa !1
  %14 = load volatile float, float* %lsr.iv24, align 4, !tbaa !1
  %add72 = fadd float %13, %14
  store volatile float %add72, float* %lsr.iv24, align 4, !tbaa !1
  %lsr.iv.next = add nuw nsw i32 %lsr.iv18, 4
  %scevgep25 = getelementptr float, float* %lsr.iv24, i32 1
  %exitcond145 = icmp eq i32 %lsr.iv.next, 32
  br i1 %exitcond145, label %for.end75, label %for.body66

for.end75:                                        ; preds = %for.body66
  call void @llvm.lifetime.end(i64 32, i8* nonnull %0) #3
  %add77 = add nuw nsw i32 %j0.0142, 8
  %scevgep1 = getelementptr float, float* %lsr.iv, i32 8
  %scevgep23 = getelementptr float, float* %lsr.iv22, i32 8
  %cmp2 = icmp slt i32 %add77, %NN
  br i1 %cmp2, label %for.body9.preheader, label %for.end78

for.end78:                                        ; preds = %for.end75
  %inc80 = add nuw nsw i32 %i.0144, 1
  %scevgep21 = getelementptr i1, i1* %lsr.iv1920, i32 %1
  %15 = bitcast i1* %scevgep21 to float*
  %exitcond146 = icmp eq i32 %inc80, %NN
  br i1 %exitcond146, label %for.end81.loopexit, label %for.body3.lr.ph

for.end81.loopexit:                               ; preds = %for.end78
  br label %for.end81

for.end81:                                        ; preds = %for.end81.loopexit, %entry
  ret void
}
*** IR Dump Before Remove unreachable blocks from the CFG ***
; Function Attrs: nounwind optsize
define hidden void @matmac(float* noalias %aa, float* noalias %bb, float* noalias %cc, i32 %NN) local_unnamed_addr #2 {
entry:
  %tot = alloca [8 x float], align 4
  %tot26 = bitcast [8 x float]* %tot to float*
  %tot2627 = bitcast float* %tot26 to i8*
  %0 = bitcast [8 x float]* %tot to i8*
  %cmp143 = icmp sgt i32 %NN, 0
  br i1 %cmp143, label %for.body3.lr.ph.preheader, label %for.end81

for.body3.lr.ph.preheader:                        ; preds = %entry
  %scevgep = getelementptr float, float* %bb, i32 2
  %1 = shl i32 %NN, 2
  %scevgep10 = getelementptr [8 x float], [8 x float]* %tot, i32 0, i32 2
  %scevgep1011 = bitcast float* %scevgep10 to [8 x float]*
  br label %for.body3.lr.ph

for.body3.lr.ph:                                  ; preds = %for.end78, %for.body3.lr.ph.preheader
  %lsr.iv19 = phi float* [ %15, %for.end78 ], [ %cc, %for.body3.lr.ph.preheader ]
  %i.0144 = phi i32 [ %inc80, %for.end78 ], [ 0, %for.body3.lr.ph.preheader ]
  %lsr.iv1920 = bitcast float* %lsr.iv19 to i1*
  %mul68 = mul nsw i32 %i.0144, %NN
  %add.ptr = getelementptr inbounds float, float* %aa, i32 %mul68
  br label %for.body9.preheader

for.body9.preheader:                              ; preds = %for.end75, %for.body3.lr.ph
  %lsr.iv22 = phi float* [ %scevgep23, %for.end75 ], [ %lsr.iv19, %for.body3.lr.ph ]
  %lsr.iv = phi float* [ %scevgep1, %for.end75 ], [ %scevgep, %for.body3.lr.ph ]
  %j0.0142 = phi i32 [ 0, %for.body3.lr.ph ], [ %add77, %for.end75 ]
  call void @llvm.lifetime.start(i64 32, i8* nonnull %0) #3
  call void @llvm.memset.p0i8.i32(i8* nonnull %0, i8 0, i32 32, i32 4, i1 false)
  br label %for.body9

for.cond64.preheader:                             ; preds = %for.end60
  br label %for.body66

for.body9:                                        ; preds = %for.end60, %for.body9.preheader
  %lsr.iv2 = phi float* [ %12, %for.end60 ], [ %lsr.iv, %for.body9.preheader ]
  %x.0139 = phi i32 [ %inc62, %for.end60 ], [ 0, %for.body9.preheader ]
  %lsr.iv23 = bitcast float* %lsr.iv2 to i1*
  %add.ptr10 = getelementptr inbounds float, float* %add.ptr, i32 %x.0139
  %2 = load volatile float, float* %add.ptr10, align 4, !tbaa !1
  br label %for.body13

for.body13:                                       ; preds = %for.body13, %for.body9
  %lsr.iv12 = phi [8 x float]* [ %11, %for.body13 ], [ %scevgep1011, %for.body9 ]
  %lsr.iv5 = phi float* [ %scevgep6, %for.body13 ], [ %lsr.iv2, %for.body9 ]
  %j1.1137 = phi i32 [ 0, %for.body9 ], [ %add59, %for.body13 ]
  %lsr.iv1214 = bitcast [8 x float]* %lsr.iv12 to float*
  %scevgep8 = getelementptr float, float* %lsr.iv5, i32 -2
  %3 = load volatile float, float* %scevgep8, align 4, !tbaa !1
  %scevgep9 = getelementptr float, float* %lsr.iv5, i32 -1
  %4 = load volatile float, float* %scevgep9, align 4, !tbaa !1
  %5 = load volatile float, float* %lsr.iv5, align 4, !tbaa !1
  %scevgep7 = getelementptr float, float* %lsr.iv5, i32 1
  %6 = load volatile float, float* %scevgep7, align 4, !tbaa !1
  %mul40 = fmul float %2, %3
  %scevgep15 = getelementptr float, float* %lsr.iv1214, i32 -2
  %7 = load float, float* %scevgep15, align 4, !tbaa !1
  %add42 = fadd float %mul40, %7
  store float %add42, float* %scevgep15, align 4, !tbaa !1
  %mul44 = fmul float %2, %4
  %scevgep17 = getelementptr float, float* %lsr.iv1214, i32 -1
  %8 = load float, float* %scevgep17, align 4, !tbaa !1
  %add47 = fadd float %mul44, %8
  store float %add47, float* %scevgep17, align 4, !tbaa !1
  %mul49 = fmul float %2, %5
  %9 = load float, float* %lsr.iv1214, align 4, !tbaa !1
  %add52 = fadd float %mul49, %9
  store float %add52, float* %lsr.iv1214, align 4, !tbaa !1
  %mul54 = fmul float %2, %6
  %scevgep16 = getelementptr float, float* %lsr.iv1214, i32 1
  %10 = load float, float* %scevgep16, align 4, !tbaa !1
  %add57 = fadd float %mul54, %10
  store float %add57, float* %scevgep16, align 4, !tbaa !1
  %add59 = add nuw nsw i32 %j1.1137, 4
  %scevgep6 = getelementptr float, float* %lsr.iv5, i32 4
  %scevgep13 = getelementptr [8 x float], [8 x float]* %lsr.iv12, i32 0, i32 4
  %11 = bitcast float* %scevgep13 to [8 x float]*
  %cmp12 = icmp slt i32 %add59, 8
  br i1 %cmp12, label %for.body13, label %for.end60

for.end60:                                        ; preds = %for.body13
  %inc62 = add nuw nsw i32 %x.0139, 1
  %scevgep4 = getelementptr i1, i1* %lsr.iv23, i32 %1
  %12 = bitcast i1* %scevgep4 to float*
  %exitcond = icmp eq i32 %inc62, %NN
  br i1 %exitcond, label %for.cond64.preheader, label %for.body9

for.body66:                                       ; preds = %for.body66, %for.cond64.preheader
  %lsr.iv24 = phi float* [ %scevgep25, %for.body66 ], [ %lsr.iv22, %for.cond64.preheader ]
  %lsr.iv18 = phi i32 [ %lsr.iv.next, %for.body66 ], [ 0, %for.cond64.preheader ]
  %uglygep = getelementptr i8, i8* %tot2627, i32 %lsr.iv18
  %uglygep28 = bitcast i8* %uglygep to float*
  %13 = load float, float* %uglygep28, align 4, !tbaa !1
  %14 = load volatile float, float* %lsr.iv24, align 4, !tbaa !1
  %add72 = fadd float %13, %14
  store volatile float %add72, float* %lsr.iv24, align 4, !tbaa !1
  %lsr.iv.next = add nuw nsw i32 %lsr.iv18, 4
  %scevgep25 = getelementptr float, float* %lsr.iv24, i32 1
  %exitcond145 = icmp eq i32 %lsr.iv.next, 32
  br i1 %exitcond145, label %for.end75, label %for.body66

for.end75:                                        ; preds = %for.body66
  call void @llvm.lifetime.end(i64 32, i8* nonnull %0) #3
  %add77 = add nuw nsw i32 %j0.0142, 8
  %scevgep1 = getelementptr float, float* %lsr.iv, i32 8
  %scevgep23 = getelementptr float, float* %lsr.iv22, i32 8
  %cmp2 = icmp slt i32 %add77, %NN
  br i1 %cmp2, label %for.body9.preheader, label %for.end78

for.end78:                                        ; preds = %for.end75
  %inc80 = add nuw nsw i32 %i.0144, 1
  %scevgep21 = getelementptr i1, i1* %lsr.iv1920, i32 %1
  %15 = bitcast i1* %scevgep21 to float*
  %exitcond146 = icmp eq i32 %inc80, %NN
  br i1 %exitcond146, label %for.end81.loopexit, label %for.body3.lr.ph

for.end81.loopexit:                               ; preds = %for.end78
  br label %for.end81

for.end81:                                        ; preds = %for.end81.loopexit, %entry
  ret void
}
*** IR Dump After Remove unreachable blocks from the CFG ***
; Function Attrs: nounwind optsize
define hidden void @matmac(float* noalias %aa, float* noalias %bb, float* noalias %cc, i32 %NN) local_unnamed_addr #2 {
entry:
  %tot = alloca [8 x float], align 4
  %tot26 = bitcast [8 x float]* %tot to float*
  %tot2627 = bitcast float* %tot26 to i8*
  %0 = bitcast [8 x float]* %tot to i8*
  %cmp143 = icmp sgt i32 %NN, 0
  br i1 %cmp143, label %for.body3.lr.ph.preheader, label %for.end81

for.body3.lr.ph.preheader:                        ; preds = %entry
  %scevgep = getelementptr float, float* %bb, i32 2
  %1 = shl i32 %NN, 2
  %scevgep10 = getelementptr [8 x float], [8 x float]* %tot, i32 0, i32 2
  %scevgep1011 = bitcast float* %scevgep10 to [8 x float]*
  br label %for.body3.lr.ph

for.body3.lr.ph:                                  ; preds = %for.end78, %for.body3.lr.ph.preheader
  %lsr.iv19 = phi float* [ %15, %for.end78 ], [ %cc, %for.body3.lr.ph.preheader ]
  %i.0144 = phi i32 [ %inc80, %for.end78 ], [ 0, %for.body3.lr.ph.preheader ]
  %lsr.iv1920 = bitcast float* %lsr.iv19 to i1*
  %mul68 = mul nsw i32 %i.0144, %NN
  %add.ptr = getelementptr inbounds float, float* %aa, i32 %mul68
  br label %for.body9.preheader

for.body9.preheader:                              ; preds = %for.end75, %for.body3.lr.ph
  %lsr.iv22 = phi float* [ %scevgep23, %for.end75 ], [ %lsr.iv19, %for.body3.lr.ph ]
  %lsr.iv = phi float* [ %scevgep1, %for.end75 ], [ %scevgep, %for.body3.lr.ph ]
  %j0.0142 = phi i32 [ 0, %for.body3.lr.ph ], [ %add77, %for.end75 ]
  call void @llvm.lifetime.start(i64 32, i8* nonnull %0) #3
  call void @llvm.memset.p0i8.i32(i8* nonnull %0, i8 0, i32 32, i32 4, i1 false)
  br label %for.body9

for.cond64.preheader:                             ; preds = %for.end60
  br label %for.body66

for.body9:                                        ; preds = %for.end60, %for.body9.preheader
  %lsr.iv2 = phi float* [ %12, %for.end60 ], [ %lsr.iv, %for.body9.preheader ]
  %x.0139 = phi i32 [ %inc62, %for.end60 ], [ 0, %for.body9.preheader ]
  %lsr.iv23 = bitcast float* %lsr.iv2 to i1*
  %add.ptr10 = getelementptr inbounds float, float* %add.ptr, i32 %x.0139
  %2 = load volatile float, float* %add.ptr10, align 4, !tbaa !1
  br label %for.body13

for.body13:                                       ; preds = %for.body13, %for.body9
  %lsr.iv12 = phi [8 x float]* [ %11, %for.body13 ], [ %scevgep1011, %for.body9 ]
  %lsr.iv5 = phi float* [ %scevgep6, %for.body13 ], [ %lsr.iv2, %for.body9 ]
  %j1.1137 = phi i32 [ 0, %for.body9 ], [ %add59, %for.body13 ]
  %lsr.iv1214 = bitcast [8 x float]* %lsr.iv12 to float*
  %scevgep8 = getelementptr float, float* %lsr.iv5, i32 -2
  %3 = load volatile float, float* %scevgep8, align 4, !tbaa !1
  %scevgep9 = getelementptr float, float* %lsr.iv5, i32 -1
  %4 = load volatile float, float* %scevgep9, align 4, !tbaa !1
  %5 = load volatile float, float* %lsr.iv5, align 4, !tbaa !1
  %scevgep7 = getelementptr float, float* %lsr.iv5, i32 1
  %6 = load volatile float, float* %scevgep7, align 4, !tbaa !1
  %mul40 = fmul float %2, %3
  %scevgep15 = getelementptr float, float* %lsr.iv1214, i32 -2
  %7 = load float, float* %scevgep15, align 4, !tbaa !1
  %add42 = fadd float %mul40, %7
  store float %add42, float* %scevgep15, align 4, !tbaa !1
  %mul44 = fmul float %2, %4
  %scevgep17 = getelementptr float, float* %lsr.iv1214, i32 -1
  %8 = load float, float* %scevgep17, align 4, !tbaa !1
  %add47 = fadd float %mul44, %8
  store float %add47, float* %scevgep17, align 4, !tbaa !1
  %mul49 = fmul float %2, %5
  %9 = load float, float* %lsr.iv1214, align 4, !tbaa !1
  %add52 = fadd float %mul49, %9
  store float %add52, float* %lsr.iv1214, align 4, !tbaa !1
  %mul54 = fmul float %2, %6
  %scevgep16 = getelementptr float, float* %lsr.iv1214, i32 1
  %10 = load float, float* %scevgep16, align 4, !tbaa !1
  %add57 = fadd float %mul54, %10
  store float %add57, float* %scevgep16, align 4, !tbaa !1
  %add59 = add nuw nsw i32 %j1.1137, 4
  %scevgep6 = getelementptr float, float* %lsr.iv5, i32 4
  %scevgep13 = getelementptr [8 x float], [8 x float]* %lsr.iv12, i32 0, i32 4
  %11 = bitcast float* %scevgep13 to [8 x float]*
  %cmp12 = icmp slt i32 %add59, 8
  br i1 %cmp12, label %for.body13, label %for.end60

for.end60:                                        ; preds = %for.body13
  %inc62 = add nuw nsw i32 %x.0139, 1
  %scevgep4 = getelementptr i1, i1* %lsr.iv23, i32 %1
  %12 = bitcast i1* %scevgep4 to float*
  %exitcond = icmp eq i32 %inc62, %NN
  br i1 %exitcond, label %for.cond64.preheader, label %for.body9

for.body66:                                       ; preds = %for.body66, %for.cond64.preheader
  %lsr.iv24 = phi float* [ %scevgep25, %for.body66 ], [ %lsr.iv22, %for.cond64.preheader ]
  %lsr.iv18 = phi i32 [ %lsr.iv.next, %for.body66 ], [ 0, %for.cond64.preheader ]
  %uglygep = getelementptr i8, i8* %tot2627, i32 %lsr.iv18
  %uglygep28 = bitcast i8* %uglygep to float*
  %13 = load float, float* %uglygep28, align 4, !tbaa !1
  %14 = load volatile float, float* %lsr.iv24, align 4, !tbaa !1
  %add72 = fadd float %13, %14
  store volatile float %add72, float* %lsr.iv24, align 4, !tbaa !1
  %lsr.iv.next = add nuw nsw i32 %lsr.iv18, 4
  %scevgep25 = getelementptr float, float* %lsr.iv24, i32 1
  %exitcond145 = icmp eq i32 %lsr.iv.next, 32
  br i1 %exitcond145, label %for.end75, label %for.body66

for.end75:                                        ; preds = %for.body66
  call void @llvm.lifetime.end(i64 32, i8* nonnull %0) #3
  %add77 = add nuw nsw i32 %j0.0142, 8
  %scevgep1 = getelementptr float, float* %lsr.iv, i32 8
  %scevgep23 = getelementptr float, float* %lsr.iv22, i32 8
  %cmp2 = icmp slt i32 %add77, %NN
  br i1 %cmp2, label %for.body9.preheader, label %for.end78

for.end78:                                        ; preds = %for.end75
  %inc80 = add nuw nsw i32 %i.0144, 1
  %scevgep21 = getelementptr i1, i1* %lsr.iv1920, i32 %1
  %15 = bitcast i1* %scevgep21 to float*
  %exitcond146 = icmp eq i32 %inc80, %NN
  br i1 %exitcond146, label %for.end81.loopexit, label %for.body3.lr.ph

for.end81.loopexit:                               ; preds = %for.end78
  br label %for.end81

for.end81:                                        ; preds = %for.end81.loopexit, %entry
  ret void
}
*** IR Dump Before Constant Hoisting ***
; Function Attrs: nounwind optsize
define hidden void @matmac(float* noalias %aa, float* noalias %bb, float* noalias %cc, i32 %NN) local_unnamed_addr #2 {
entry:
  %tot = alloca [8 x float], align 4
  %tot26 = bitcast [8 x float]* %tot to float*
  %tot2627 = bitcast float* %tot26 to i8*
  %0 = bitcast [8 x float]* %tot to i8*
  %cmp143 = icmp sgt i32 %NN, 0
  br i1 %cmp143, label %for.body3.lr.ph.preheader, label %for.end81

for.body3.lr.ph.preheader:                        ; preds = %entry
  %scevgep = getelementptr float, float* %bb, i32 2
  %1 = shl i32 %NN, 2
  %scevgep10 = getelementptr [8 x float], [8 x float]* %tot, i32 0, i32 2
  %scevgep1011 = bitcast float* %scevgep10 to [8 x float]*
  br label %for.body3.lr.ph

for.body3.lr.ph:                                  ; preds = %for.end78, %for.body3.lr.ph.preheader
  %lsr.iv19 = phi float* [ %15, %for.end78 ], [ %cc, %for.body3.lr.ph.preheader ]
  %i.0144 = phi i32 [ %inc80, %for.end78 ], [ 0, %for.body3.lr.ph.preheader ]
  %lsr.iv1920 = bitcast float* %lsr.iv19 to i1*
  %mul68 = mul nsw i32 %i.0144, %NN
  %add.ptr = getelementptr inbounds float, float* %aa, i32 %mul68
  br label %for.body9.preheader

for.body9.preheader:                              ; preds = %for.end75, %for.body3.lr.ph
  %lsr.iv22 = phi float* [ %scevgep23, %for.end75 ], [ %lsr.iv19, %for.body3.lr.ph ]
  %lsr.iv = phi float* [ %scevgep1, %for.end75 ], [ %scevgep, %for.body3.lr.ph ]
  %j0.0142 = phi i32 [ 0, %for.body3.lr.ph ], [ %add77, %for.end75 ]
  call void @llvm.lifetime.start(i64 32, i8* nonnull %0) #3
  call void @llvm.memset.p0i8.i32(i8* nonnull %0, i8 0, i32 32, i32 4, i1 false)
  br label %for.body9

for.cond64.preheader:                             ; preds = %for.end60
  br label %for.body66

for.body9:                                        ; preds = %for.end60, %for.body9.preheader
  %lsr.iv2 = phi float* [ %12, %for.end60 ], [ %lsr.iv, %for.body9.preheader ]
  %x.0139 = phi i32 [ %inc62, %for.end60 ], [ 0, %for.body9.preheader ]
  %lsr.iv23 = bitcast float* %lsr.iv2 to i1*
  %add.ptr10 = getelementptr inbounds float, float* %add.ptr, i32 %x.0139
  %2 = load volatile float, float* %add.ptr10, align 4, !tbaa !1
  br label %for.body13

for.body13:                                       ; preds = %for.body13, %for.body9
  %lsr.iv12 = phi [8 x float]* [ %11, %for.body13 ], [ %scevgep1011, %for.body9 ]
  %lsr.iv5 = phi float* [ %scevgep6, %for.body13 ], [ %lsr.iv2, %for.body9 ]
  %j1.1137 = phi i32 [ 0, %for.body9 ], [ %add59, %for.body13 ]
  %lsr.iv1214 = bitcast [8 x float]* %lsr.iv12 to float*
  %scevgep8 = getelementptr float, float* %lsr.iv5, i32 -2
  %3 = load volatile float, float* %scevgep8, align 4, !tbaa !1
  %scevgep9 = getelementptr float, float* %lsr.iv5, i32 -1
  %4 = load volatile float, float* %scevgep9, align 4, !tbaa !1
  %5 = load volatile float, float* %lsr.iv5, align 4, !tbaa !1
  %scevgep7 = getelementptr float, float* %lsr.iv5, i32 1
  %6 = load volatile float, float* %scevgep7, align 4, !tbaa !1
  %mul40 = fmul float %2, %3
  %scevgep15 = getelementptr float, float* %lsr.iv1214, i32 -2
  %7 = load float, float* %scevgep15, align 4, !tbaa !1
  %add42 = fadd float %mul40, %7
  store float %add42, float* %scevgep15, align 4, !tbaa !1
  %mul44 = fmul float %2, %4
  %scevgep17 = getelementptr float, float* %lsr.iv1214, i32 -1
  %8 = load float, float* %scevgep17, align 4, !tbaa !1
  %add47 = fadd float %mul44, %8
  store float %add47, float* %scevgep17, align 4, !tbaa !1
  %mul49 = fmul float %2, %5
  %9 = load float, float* %lsr.iv1214, align 4, !tbaa !1
  %add52 = fadd float %mul49, %9
  store float %add52, float* %lsr.iv1214, align 4, !tbaa !1
  %mul54 = fmul float %2, %6
  %scevgep16 = getelementptr float, float* %lsr.iv1214, i32 1
  %10 = load float, float* %scevgep16, align 4, !tbaa !1
  %add57 = fadd float %mul54, %10
  store float %add57, float* %scevgep16, align 4, !tbaa !1
  %add59 = add nuw nsw i32 %j1.1137, 4
  %scevgep6 = getelementptr float, float* %lsr.iv5, i32 4
  %scevgep13 = getelementptr [8 x float], [8 x float]* %lsr.iv12, i32 0, i32 4
  %11 = bitcast float* %scevgep13 to [8 x float]*
  %cmp12 = icmp slt i32 %add59, 8
  br i1 %cmp12, label %for.body13, label %for.end60

for.end60:                                        ; preds = %for.body13
  %inc62 = add nuw nsw i32 %x.0139, 1
  %scevgep4 = getelementptr i1, i1* %lsr.iv23, i32 %1
  %12 = bitcast i1* %scevgep4 to float*
  %exitcond = icmp eq i32 %inc62, %NN
  br i1 %exitcond, label %for.cond64.preheader, label %for.body9

for.body66:                                       ; preds = %for.body66, %for.cond64.preheader
  %lsr.iv24 = phi float* [ %scevgep25, %for.body66 ], [ %lsr.iv22, %for.cond64.preheader ]
  %lsr.iv18 = phi i32 [ %lsr.iv.next, %for.body66 ], [ 0, %for.cond64.preheader ]
  %uglygep = getelementptr i8, i8* %tot2627, i32 %lsr.iv18
  %uglygep28 = bitcast i8* %uglygep to float*
  %13 = load float, float* %uglygep28, align 4, !tbaa !1
  %14 = load volatile float, float* %lsr.iv24, align 4, !tbaa !1
  %add72 = fadd float %13, %14
  store volatile float %add72, float* %lsr.iv24, align 4, !tbaa !1
  %lsr.iv.next = add nuw nsw i32 %lsr.iv18, 4
  %scevgep25 = getelementptr float, float* %lsr.iv24, i32 1
  %exitcond145 = icmp eq i32 %lsr.iv.next, 32
  br i1 %exitcond145, label %for.end75, label %for.body66

for.end75:                                        ; preds = %for.body66
  call void @llvm.lifetime.end(i64 32, i8* nonnull %0) #3
  %add77 = add nuw nsw i32 %j0.0142, 8
  %scevgep1 = getelementptr float, float* %lsr.iv, i32 8
  %scevgep23 = getelementptr float, float* %lsr.iv22, i32 8
  %cmp2 = icmp slt i32 %add77, %NN
  br i1 %cmp2, label %for.body9.preheader, label %for.end78

for.end78:                                        ; preds = %for.end75
  %inc80 = add nuw nsw i32 %i.0144, 1
  %scevgep21 = getelementptr i1, i1* %lsr.iv1920, i32 %1
  %15 = bitcast i1* %scevgep21 to float*
  %exitcond146 = icmp eq i32 %inc80, %NN
  br i1 %exitcond146, label %for.end81.loopexit, label %for.body3.lr.ph

for.end81.loopexit:                               ; preds = %for.end78
  br label %for.end81

for.end81:                                        ; preds = %for.end81.loopexit, %entry
  ret void
}
********** Begin Constant Hoisting **********
********** Function: matmac
********** End Constant Hoisting **********
*** IR Dump After Constant Hoisting ***
; Function Attrs: nounwind optsize
define hidden void @matmac(float* noalias %aa, float* noalias %bb, float* noalias %cc, i32 %NN) local_unnamed_addr #2 {
entry:
  %tot = alloca [8 x float], align 4
  %tot26 = bitcast [8 x float]* %tot to float*
  %tot2627 = bitcast float* %tot26 to i8*
  %0 = bitcast [8 x float]* %tot to i8*
  %cmp143 = icmp sgt i32 %NN, 0
  br i1 %cmp143, label %for.body3.lr.ph.preheader, label %for.end81

for.body3.lr.ph.preheader:                        ; preds = %entry
  %scevgep = getelementptr float, float* %bb, i32 2
  %1 = shl i32 %NN, 2
  %scevgep10 = getelementptr [8 x float], [8 x float]* %tot, i32 0, i32 2
  %scevgep1011 = bitcast float* %scevgep10 to [8 x float]*
  br label %for.body3.lr.ph

for.body3.lr.ph:                                  ; preds = %for.end78, %for.body3.lr.ph.preheader
  %lsr.iv19 = phi float* [ %15, %for.end78 ], [ %cc, %for.body3.lr.ph.preheader ]
  %i.0144 = phi i32 [ %inc80, %for.end78 ], [ 0, %for.body3.lr.ph.preheader ]
  %lsr.iv1920 = bitcast float* %lsr.iv19 to i1*
  %mul68 = mul nsw i32 %i.0144, %NN
  %add.ptr = getelementptr inbounds float, float* %aa, i32 %mul68
  br label %for.body9.preheader

for.body9.preheader:                              ; preds = %for.end75, %for.body3.lr.ph
  %lsr.iv22 = phi float* [ %scevgep23, %for.end75 ], [ %lsr.iv19, %for.body3.lr.ph ]
  %lsr.iv = phi float* [ %scevgep1, %for.end75 ], [ %scevgep, %for.body3.lr.ph ]
  %j0.0142 = phi i32 [ 0, %for.body3.lr.ph ], [ %add77, %for.end75 ]
  call void @llvm.lifetime.start(i64 32, i8* nonnull %0) #3
  call void @llvm.memset.p0i8.i32(i8* nonnull %0, i8 0, i32 32, i32 4, i1 false)
  br label %for.body9

for.cond64.preheader:                             ; preds = %for.end60
  br label %for.body66

for.body9:                                        ; preds = %for.end60, %for.body9.preheader
  %lsr.iv2 = phi float* [ %12, %for.end60 ], [ %lsr.iv, %for.body9.preheader ]
  %x.0139 = phi i32 [ %inc62, %for.end60 ], [ 0, %for.body9.preheader ]
  %lsr.iv23 = bitcast float* %lsr.iv2 to i1*
  %add.ptr10 = getelementptr inbounds float, float* %add.ptr, i32 %x.0139
  %2 = load volatile float, float* %add.ptr10, align 4, !tbaa !1
  br label %for.body13

for.body13:                                       ; preds = %for.body13, %for.body9
  %lsr.iv12 = phi [8 x float]* [ %11, %for.body13 ], [ %scevgep1011, %for.body9 ]
  %lsr.iv5 = phi float* [ %scevgep6, %for.body13 ], [ %lsr.iv2, %for.body9 ]
  %j1.1137 = phi i32 [ 0, %for.body9 ], [ %add59, %for.body13 ]
  %lsr.iv1214 = bitcast [8 x float]* %lsr.iv12 to float*
  %scevgep8 = getelementptr float, float* %lsr.iv5, i32 -2
  %3 = load volatile float, float* %scevgep8, align 4, !tbaa !1
  %scevgep9 = getelementptr float, float* %lsr.iv5, i32 -1
  %4 = load volatile float, float* %scevgep9, align 4, !tbaa !1
  %5 = load volatile float, float* %lsr.iv5, align 4, !tbaa !1
  %scevgep7 = getelementptr float, float* %lsr.iv5, i32 1
  %6 = load volatile float, float* %scevgep7, align 4, !tbaa !1
  %mul40 = fmul float %2, %3
  %scevgep15 = getelementptr float, float* %lsr.iv1214, i32 -2
  %7 = load float, float* %scevgep15, align 4, !tbaa !1
  %add42 = fadd float %mul40, %7
  store float %add42, float* %scevgep15, align 4, !tbaa !1
  %mul44 = fmul float %2, %4
  %scevgep17 = getelementptr float, float* %lsr.iv1214, i32 -1
  %8 = load float, float* %scevgep17, align 4, !tbaa !1
  %add47 = fadd float %mul44, %8
  store float %add47, float* %scevgep17, align 4, !tbaa !1
  %mul49 = fmul float %2, %5
  %9 = load float, float* %lsr.iv1214, align 4, !tbaa !1
  %add52 = fadd float %mul49, %9
  store float %add52, float* %lsr.iv1214, align 4, !tbaa !1
  %mul54 = fmul float %2, %6
  %scevgep16 = getelementptr float, float* %lsr.iv1214, i32 1
  %10 = load float, float* %scevgep16, align 4, !tbaa !1
  %add57 = fadd float %mul54, %10
  store float %add57, float* %scevgep16, align 4, !tbaa !1
  %add59 = add nuw nsw i32 %j1.1137, 4
  %scevgep6 = getelementptr float, float* %lsr.iv5, i32 4
  %scevgep13 = getelementptr [8 x float], [8 x float]* %lsr.iv12, i32 0, i32 4
  %11 = bitcast float* %scevgep13 to [8 x float]*
  %cmp12 = icmp slt i32 %add59, 8
  br i1 %cmp12, label %for.body13, label %for.end60

for.end60:                                        ; preds = %for.body13
  %inc62 = add nuw nsw i32 %x.0139, 1
  %scevgep4 = getelementptr i1, i1* %lsr.iv23, i32 %1
  %12 = bitcast i1* %scevgep4 to float*
  %exitcond = icmp eq i32 %inc62, %NN
  br i1 %exitcond, label %for.cond64.preheader, label %for.body9

for.body66:                                       ; preds = %for.body66, %for.cond64.preheader
  %lsr.iv24 = phi float* [ %scevgep25, %for.body66 ], [ %lsr.iv22, %for.cond64.preheader ]
  %lsr.iv18 = phi i32 [ %lsr.iv.next, %for.body66 ], [ 0, %for.cond64.preheader ]
  %uglygep = getelementptr i8, i8* %tot2627, i32 %lsr.iv18
  %uglygep28 = bitcast i8* %uglygep to float*
  %13 = load float, float* %uglygep28, align 4, !tbaa !1
  %14 = load volatile float, float* %lsr.iv24, align 4, !tbaa !1
  %add72 = fadd float %13, %14
  store volatile float %add72, float* %lsr.iv24, align 4, !tbaa !1
  %lsr.iv.next = add nuw nsw i32 %lsr.iv18, 4
  %scevgep25 = getelementptr float, float* %lsr.iv24, i32 1
  %exitcond145 = icmp eq i32 %lsr.iv.next, 32
  br i1 %exitcond145, label %for.end75, label %for.body66

for.end75:                                        ; preds = %for.body66
  call void @llvm.lifetime.end(i64 32, i8* nonnull %0) #3
  %add77 = add nuw nsw i32 %j0.0142, 8
  %scevgep1 = getelementptr float, float* %lsr.iv, i32 8
  %scevgep23 = getelementptr float, float* %lsr.iv22, i32 8
  %cmp2 = icmp slt i32 %add77, %NN
  br i1 %cmp2, label %for.body9.preheader, label %for.end78

for.end78:                                        ; preds = %for.end75
  %inc80 = add nuw nsw i32 %i.0144, 1
  %scevgep21 = getelementptr i1, i1* %lsr.iv1920, i32 %1
  %15 = bitcast i1* %scevgep21 to float*
  %exitcond146 = icmp eq i32 %inc80, %NN
  br i1 %exitcond146, label %for.end81.loopexit, label %for.body3.lr.ph

for.end81.loopexit:                               ; preds = %for.end78
  br label %for.end81

for.end81:                                        ; preds = %for.end81.loopexit, %entry
  ret void
}
*** IR Dump Before Partially inline calls to library functions ***
; Function Attrs: nounwind optsize
define hidden void @matmac(float* noalias %aa, float* noalias %bb, float* noalias %cc, i32 %NN) local_unnamed_addr #2 {
entry:
  %tot = alloca [8 x float], align 4
  %tot26 = bitcast [8 x float]* %tot to float*
  %tot2627 = bitcast float* %tot26 to i8*
  %0 = bitcast [8 x float]* %tot to i8*
  %cmp143 = icmp sgt i32 %NN, 0
  br i1 %cmp143, label %for.body3.lr.ph.preheader, label %for.end81

for.body3.lr.ph.preheader:                        ; preds = %entry
  %scevgep = getelementptr float, float* %bb, i32 2
  %1 = shl i32 %NN, 2
  %scevgep10 = getelementptr [8 x float], [8 x float]* %tot, i32 0, i32 2
  %scevgep1011 = bitcast float* %scevgep10 to [8 x float]*
  br label %for.body3.lr.ph

for.body3.lr.ph:                                  ; preds = %for.end78, %for.body3.lr.ph.preheader
  %lsr.iv19 = phi float* [ %15, %for.end78 ], [ %cc, %for.body3.lr.ph.preheader ]
  %i.0144 = phi i32 [ %inc80, %for.end78 ], [ 0, %for.body3.lr.ph.preheader ]
  %lsr.iv1920 = bitcast float* %lsr.iv19 to i1*
  %mul68 = mul nsw i32 %i.0144, %NN
  %add.ptr = getelementptr inbounds float, float* %aa, i32 %mul68
  br label %for.body9.preheader

for.body9.preheader:                              ; preds = %for.end75, %for.body3.lr.ph
  %lsr.iv22 = phi float* [ %scevgep23, %for.end75 ], [ %lsr.iv19, %for.body3.lr.ph ]
  %lsr.iv = phi float* [ %scevgep1, %for.end75 ], [ %scevgep, %for.body3.lr.ph ]
  %j0.0142 = phi i32 [ 0, %for.body3.lr.ph ], [ %add77, %for.end75 ]
  call void @llvm.lifetime.start(i64 32, i8* nonnull %0) #3
  call void @llvm.memset.p0i8.i32(i8* nonnull %0, i8 0, i32 32, i32 4, i1 false)
  br label %for.body9

for.cond64.preheader:                             ; preds = %for.end60
  br label %for.body66

for.body9:                                        ; preds = %for.end60, %for.body9.preheader
  %lsr.iv2 = phi float* [ %12, %for.end60 ], [ %lsr.iv, %for.body9.preheader ]
  %x.0139 = phi i32 [ %inc62, %for.end60 ], [ 0, %for.body9.preheader ]
  %lsr.iv23 = bitcast float* %lsr.iv2 to i1*
  %add.ptr10 = getelementptr inbounds float, float* %add.ptr, i32 %x.0139
  %2 = load volatile float, float* %add.ptr10, align 4, !tbaa !1
  br label %for.body13

for.body13:                                       ; preds = %for.body13, %for.body9
  %lsr.iv12 = phi [8 x float]* [ %11, %for.body13 ], [ %scevgep1011, %for.body9 ]
  %lsr.iv5 = phi float* [ %scevgep6, %for.body13 ], [ %lsr.iv2, %for.body9 ]
  %j1.1137 = phi i32 [ 0, %for.body9 ], [ %add59, %for.body13 ]
  %lsr.iv1214 = bitcast [8 x float]* %lsr.iv12 to float*
  %scevgep8 = getelementptr float, float* %lsr.iv5, i32 -2
  %3 = load volatile float, float* %scevgep8, align 4, !tbaa !1
  %scevgep9 = getelementptr float, float* %lsr.iv5, i32 -1
  %4 = load volatile float, float* %scevgep9, align 4, !tbaa !1
  %5 = load volatile float, float* %lsr.iv5, align 4, !tbaa !1
  %scevgep7 = getelementptr float, float* %lsr.iv5, i32 1
  %6 = load volatile float, float* %scevgep7, align 4, !tbaa !1
  %mul40 = fmul float %2, %3
  %scevgep15 = getelementptr float, float* %lsr.iv1214, i32 -2
  %7 = load float, float* %scevgep15, align 4, !tbaa !1
  %add42 = fadd float %mul40, %7
  store float %add42, float* %scevgep15, align 4, !tbaa !1
  %mul44 = fmul float %2, %4
  %scevgep17 = getelementptr float, float* %lsr.iv1214, i32 -1
  %8 = load float, float* %scevgep17, align 4, !tbaa !1
  %add47 = fadd float %mul44, %8
  store float %add47, float* %scevgep17, align 4, !tbaa !1
  %mul49 = fmul float %2, %5
  %9 = load float, float* %lsr.iv1214, align 4, !tbaa !1
  %add52 = fadd float %mul49, %9
  store float %add52, float* %lsr.iv1214, align 4, !tbaa !1
  %mul54 = fmul float %2, %6
  %scevgep16 = getelementptr float, float* %lsr.iv1214, i32 1
  %10 = load float, float* %scevgep16, align 4, !tbaa !1
  %add57 = fadd float %mul54, %10
  store float %add57, float* %scevgep16, align 4, !tbaa !1
  %add59 = add nuw nsw i32 %j1.1137, 4
  %scevgep6 = getelementptr float, float* %lsr.iv5, i32 4
  %scevgep13 = getelementptr [8 x float], [8 x float]* %lsr.iv12, i32 0, i32 4
  %11 = bitcast float* %scevgep13 to [8 x float]*
  %cmp12 = icmp slt i32 %add59, 8
  br i1 %cmp12, label %for.body13, label %for.end60

for.end60:                                        ; preds = %for.body13
  %inc62 = add nuw nsw i32 %x.0139, 1
  %scevgep4 = getelementptr i1, i1* %lsr.iv23, i32 %1
  %12 = bitcast i1* %scevgep4 to float*
  %exitcond = icmp eq i32 %inc62, %NN
  br i1 %exitcond, label %for.cond64.preheader, label %for.body9

for.body66:                                       ; preds = %for.body66, %for.cond64.preheader
  %lsr.iv24 = phi float* [ %scevgep25, %for.body66 ], [ %lsr.iv22, %for.cond64.preheader ]
  %lsr.iv18 = phi i32 [ %lsr.iv.next, %for.body66 ], [ 0, %for.cond64.preheader ]
  %uglygep = getelementptr i8, i8* %tot2627, i32 %lsr.iv18
  %uglygep28 = bitcast i8* %uglygep to float*
  %13 = load float, float* %uglygep28, align 4, !tbaa !1
  %14 = load volatile float, float* %lsr.iv24, align 4, !tbaa !1
  %add72 = fadd float %13, %14
  store volatile float %add72, float* %lsr.iv24, align 4, !tbaa !1
  %lsr.iv.next = add nuw nsw i32 %lsr.iv18, 4
  %scevgep25 = getelementptr float, float* %lsr.iv24, i32 1
  %exitcond145 = icmp eq i32 %lsr.iv.next, 32
  br i1 %exitcond145, label %for.end75, label %for.body66

for.end75:                                        ; preds = %for.body66
  call void @llvm.lifetime.end(i64 32, i8* nonnull %0) #3
  %add77 = add nuw nsw i32 %j0.0142, 8
  %scevgep1 = getelementptr float, float* %lsr.iv, i32 8
  %scevgep23 = getelementptr float, float* %lsr.iv22, i32 8
  %cmp2 = icmp slt i32 %add77, %NN
  br i1 %cmp2, label %for.body9.preheader, label %for.end78

for.end78:                                        ; preds = %for.end75
  %inc80 = add nuw nsw i32 %i.0144, 1
  %scevgep21 = getelementptr i1, i1* %lsr.iv1920, i32 %1
  %15 = bitcast i1* %scevgep21 to float*
  %exitcond146 = icmp eq i32 %inc80, %NN
  br i1 %exitcond146, label %for.end81.loopexit, label %for.body3.lr.ph

for.end81.loopexit:                               ; preds = %for.end78
  br label %for.end81

for.end81:                                        ; preds = %for.end81.loopexit, %entry
  ret void
}
*** IR Dump After Partially inline calls to library functions ***
; Function Attrs: nounwind optsize
define hidden void @matmac(float* noalias %aa, float* noalias %bb, float* noalias %cc, i32 %NN) local_unnamed_addr #2 {
entry:
  %tot = alloca [8 x float], align 4
  %tot26 = bitcast [8 x float]* %tot to float*
  %tot2627 = bitcast float* %tot26 to i8*
  %0 = bitcast [8 x float]* %tot to i8*
  %cmp143 = icmp sgt i32 %NN, 0
  br i1 %cmp143, label %for.body3.lr.ph.preheader, label %for.end81

for.body3.lr.ph.preheader:                        ; preds = %entry
  %scevgep = getelementptr float, float* %bb, i32 2
  %1 = shl i32 %NN, 2
  %scevgep10 = getelementptr [8 x float], [8 x float]* %tot, i32 0, i32 2
  %scevgep1011 = bitcast float* %scevgep10 to [8 x float]*
  br label %for.body3.lr.ph

for.body3.lr.ph:                                  ; preds = %for.end78, %for.body3.lr.ph.preheader
  %lsr.iv19 = phi float* [ %15, %for.end78 ], [ %cc, %for.body3.lr.ph.preheader ]
  %i.0144 = phi i32 [ %inc80, %for.end78 ], [ 0, %for.body3.lr.ph.preheader ]
  %lsr.iv1920 = bitcast float* %lsr.iv19 to i1*
  %mul68 = mul nsw i32 %i.0144, %NN
  %add.ptr = getelementptr inbounds float, float* %aa, i32 %mul68
  br label %for.body9.preheader

for.body9.preheader:                              ; preds = %for.end75, %for.body3.lr.ph
  %lsr.iv22 = phi float* [ %scevgep23, %for.end75 ], [ %lsr.iv19, %for.body3.lr.ph ]
  %lsr.iv = phi float* [ %scevgep1, %for.end75 ], [ %scevgep, %for.body3.lr.ph ]
  %j0.0142 = phi i32 [ 0, %for.body3.lr.ph ], [ %add77, %for.end75 ]
  call void @llvm.lifetime.start(i64 32, i8* nonnull %0) #3
  call void @llvm.memset.p0i8.i32(i8* nonnull %0, i8 0, i32 32, i32 4, i1 false)
  br label %for.body9

for.cond64.preheader:                             ; preds = %for.end60
  br label %for.body66

for.body9:                                        ; preds = %for.end60, %for.body9.preheader
  %lsr.iv2 = phi float* [ %12, %for.end60 ], [ %lsr.iv, %for.body9.preheader ]
  %x.0139 = phi i32 [ %inc62, %for.end60 ], [ 0, %for.body9.preheader ]
  %lsr.iv23 = bitcast float* %lsr.iv2 to i1*
  %add.ptr10 = getelementptr inbounds float, float* %add.ptr, i32 %x.0139
  %2 = load volatile float, float* %add.ptr10, align 4, !tbaa !1
  br label %for.body13

for.body13:                                       ; preds = %for.body13, %for.body9
  %lsr.iv12 = phi [8 x float]* [ %11, %for.body13 ], [ %scevgep1011, %for.body9 ]
  %lsr.iv5 = phi float* [ %scevgep6, %for.body13 ], [ %lsr.iv2, %for.body9 ]
  %j1.1137 = phi i32 [ 0, %for.body9 ], [ %add59, %for.body13 ]
  %lsr.iv1214 = bitcast [8 x float]* %lsr.iv12 to float*
  %scevgep8 = getelementptr float, float* %lsr.iv5, i32 -2
  %3 = load volatile float, float* %scevgep8, align 4, !tbaa !1
  %scevgep9 = getelementptr float, float* %lsr.iv5, i32 -1
  %4 = load volatile float, float* %scevgep9, align 4, !tbaa !1
  %5 = load volatile float, float* %lsr.iv5, align 4, !tbaa !1
  %scevgep7 = getelementptr float, float* %lsr.iv5, i32 1
  %6 = load volatile float, float* %scevgep7, align 4, !tbaa !1
  %mul40 = fmul float %2, %3
  %scevgep15 = getelementptr float, float* %lsr.iv1214, i32 -2
  %7 = load float, float* %scevgep15, align 4, !tbaa !1
  %add42 = fadd float %mul40, %7
  store float %add42, float* %scevgep15, align 4, !tbaa !1
  %mul44 = fmul float %2, %4
  %scevgep17 = getelementptr float, float* %lsr.iv1214, i32 -1
  %8 = load float, float* %scevgep17, align 4, !tbaa !1
  %add47 = fadd float %mul44, %8
  store float %add47, float* %scevgep17, align 4, !tbaa !1
  %mul49 = fmul float %2, %5
  %9 = load float, float* %lsr.iv1214, align 4, !tbaa !1
  %add52 = fadd float %mul49, %9
  store float %add52, float* %lsr.iv1214, align 4, !tbaa !1
  %mul54 = fmul float %2, %6
  %scevgep16 = getelementptr float, float* %lsr.iv1214, i32 1
  %10 = load float, float* %scevgep16, align 4, !tbaa !1
  %add57 = fadd float %mul54, %10
  store float %add57, float* %scevgep16, align 4, !tbaa !1
  %add59 = add nuw nsw i32 %j1.1137, 4
  %scevgep6 = getelementptr float, float* %lsr.iv5, i32 4
  %scevgep13 = getelementptr [8 x float], [8 x float]* %lsr.iv12, i32 0, i32 4
  %11 = bitcast float* %scevgep13 to [8 x float]*
  %cmp12 = icmp slt i32 %add59, 8
  br i1 %cmp12, label %for.body13, label %for.end60

for.end60:                                        ; preds = %for.body13
  %inc62 = add nuw nsw i32 %x.0139, 1
  %scevgep4 = getelementptr i1, i1* %lsr.iv23, i32 %1
  %12 = bitcast i1* %scevgep4 to float*
  %exitcond = icmp eq i32 %inc62, %NN
  br i1 %exitcond, label %for.cond64.preheader, label %for.body9

for.body66:                                       ; preds = %for.body66, %for.cond64.preheader
  %lsr.iv24 = phi float* [ %scevgep25, %for.body66 ], [ %lsr.iv22, %for.cond64.preheader ]
  %lsr.iv18 = phi i32 [ %lsr.iv.next, %for.body66 ], [ 0, %for.cond64.preheader ]
  %uglygep = getelementptr i8, i8* %tot2627, i32 %lsr.iv18
  %uglygep28 = bitcast i8* %uglygep to float*
  %13 = load float, float* %uglygep28, align 4, !tbaa !1
  %14 = load volatile float, float* %lsr.iv24, align 4, !tbaa !1
  %add72 = fadd float %13, %14
  store volatile float %add72, float* %lsr.iv24, align 4, !tbaa !1
  %lsr.iv.next = add nuw nsw i32 %lsr.iv18, 4
  %scevgep25 = getelementptr float, float* %lsr.iv24, i32 1
  %exitcond145 = icmp eq i32 %lsr.iv.next, 32
  br i1 %exitcond145, label %for.end75, label %for.body66

for.end75:                                        ; preds = %for.body66
  call void @llvm.lifetime.end(i64 32, i8* nonnull %0) #3
  %add77 = add nuw nsw i32 %j0.0142, 8
  %scevgep1 = getelementptr float, float* %lsr.iv, i32 8
  %scevgep23 = getelementptr float, float* %lsr.iv22, i32 8
  %cmp2 = icmp slt i32 %add77, %NN
  br i1 %cmp2, label %for.body9.preheader, label %for.end78

for.end78:                                        ; preds = %for.end75
  %inc80 = add nuw nsw i32 %i.0144, 1
  %scevgep21 = getelementptr i1, i1* %lsr.iv1920, i32 %1
  %15 = bitcast i1* %scevgep21 to float*
  %exitcond146 = icmp eq i32 %inc80, %NN
  br i1 %exitcond146, label %for.end81.loopexit, label %for.body3.lr.ph

for.end81.loopexit:                               ; preds = %for.end78
  br label %for.end81

for.end81:                                        ; preds = %for.end81.loopexit, %entry
  ret void
}
*** IR Dump Before Inserts calls to mcount-like functions ***
; Function Attrs: nounwind optsize
define hidden void @matmac(float* noalias %aa, float* noalias %bb, float* noalias %cc, i32 %NN) local_unnamed_addr #2 {
entry:
  %tot = alloca [8 x float], align 4
  %tot26 = bitcast [8 x float]* %tot to float*
  %tot2627 = bitcast float* %tot26 to i8*
  %0 = bitcast [8 x float]* %tot to i8*
  %cmp143 = icmp sgt i32 %NN, 0
  br i1 %cmp143, label %for.body3.lr.ph.preheader, label %for.end81

for.body3.lr.ph.preheader:                        ; preds = %entry
  %scevgep = getelementptr float, float* %bb, i32 2
  %1 = shl i32 %NN, 2
  %scevgep10 = getelementptr [8 x float], [8 x float]* %tot, i32 0, i32 2
  %scevgep1011 = bitcast float* %scevgep10 to [8 x float]*
  br label %for.body3.lr.ph

for.body3.lr.ph:                                  ; preds = %for.end78, %for.body3.lr.ph.preheader
  %lsr.iv19 = phi float* [ %15, %for.end78 ], [ %cc, %for.body3.lr.ph.preheader ]
  %i.0144 = phi i32 [ %inc80, %for.end78 ], [ 0, %for.body3.lr.ph.preheader ]
  %lsr.iv1920 = bitcast float* %lsr.iv19 to i1*
  %mul68 = mul nsw i32 %i.0144, %NN
  %add.ptr = getelementptr inbounds float, float* %aa, i32 %mul68
  br label %for.body9.preheader

for.body9.preheader:                              ; preds = %for.end75, %for.body3.lr.ph
  %lsr.iv22 = phi float* [ %scevgep23, %for.end75 ], [ %lsr.iv19, %for.body3.lr.ph ]
  %lsr.iv = phi float* [ %scevgep1, %for.end75 ], [ %scevgep, %for.body3.lr.ph ]
  %j0.0142 = phi i32 [ 0, %for.body3.lr.ph ], [ %add77, %for.end75 ]
  call void @llvm.lifetime.start(i64 32, i8* nonnull %0) #3
  call void @llvm.memset.p0i8.i32(i8* nonnull %0, i8 0, i32 32, i32 4, i1 false)
  br label %for.body9

for.cond64.preheader:                             ; preds = %for.end60
  br label %for.body66

for.body9:                                        ; preds = %for.end60, %for.body9.preheader
  %lsr.iv2 = phi float* [ %12, %for.end60 ], [ %lsr.iv, %for.body9.preheader ]
  %x.0139 = phi i32 [ %inc62, %for.end60 ], [ 0, %for.body9.preheader ]
  %lsr.iv23 = bitcast float* %lsr.iv2 to i1*
  %add.ptr10 = getelementptr inbounds float, float* %add.ptr, i32 %x.0139
  %2 = load volatile float, float* %add.ptr10, align 4, !tbaa !1
  br label %for.body13

for.body13:                                       ; preds = %for.body13, %for.body9
  %lsr.iv12 = phi [8 x float]* [ %11, %for.body13 ], [ %scevgep1011, %for.body9 ]
  %lsr.iv5 = phi float* [ %scevgep6, %for.body13 ], [ %lsr.iv2, %for.body9 ]
  %j1.1137 = phi i32 [ 0, %for.body9 ], [ %add59, %for.body13 ]
  %lsr.iv1214 = bitcast [8 x float]* %lsr.iv12 to float*
  %scevgep8 = getelementptr float, float* %lsr.iv5, i32 -2
  %3 = load volatile float, float* %scevgep8, align 4, !tbaa !1
  %scevgep9 = getelementptr float, float* %lsr.iv5, i32 -1
  %4 = load volatile float, float* %scevgep9, align 4, !tbaa !1
  %5 = load volatile float, float* %lsr.iv5, align 4, !tbaa !1
  %scevgep7 = getelementptr float, float* %lsr.iv5, i32 1
  %6 = load volatile float, float* %scevgep7, align 4, !tbaa !1
  %mul40 = fmul float %2, %3
  %scevgep15 = getelementptr float, float* %lsr.iv1214, i32 -2
  %7 = load float, float* %scevgep15, align 4, !tbaa !1
  %add42 = fadd float %mul40, %7
  store float %add42, float* %scevgep15, align 4, !tbaa !1
  %mul44 = fmul float %2, %4
  %scevgep17 = getelementptr float, float* %lsr.iv1214, i32 -1
  %8 = load float, float* %scevgep17, align 4, !tbaa !1
  %add47 = fadd float %mul44, %8
  store float %add47, float* %scevgep17, align 4, !tbaa !1
  %mul49 = fmul float %2, %5
  %9 = load float, float* %lsr.iv1214, align 4, !tbaa !1
  %add52 = fadd float %mul49, %9
  store float %add52, float* %lsr.iv1214, align 4, !tbaa !1
  %mul54 = fmul float %2, %6
  %scevgep16 = getelementptr float, float* %lsr.iv1214, i32 1
  %10 = load float, float* %scevgep16, align 4, !tbaa !1
  %add57 = fadd float %mul54, %10
  store float %add57, float* %scevgep16, align 4, !tbaa !1
  %add59 = add nuw nsw i32 %j1.1137, 4
  %scevgep6 = getelementptr float, float* %lsr.iv5, i32 4
  %scevgep13 = getelementptr [8 x float], [8 x float]* %lsr.iv12, i32 0, i32 4
  %11 = bitcast float* %scevgep13 to [8 x float]*
  %cmp12 = icmp slt i32 %add59, 8
  br i1 %cmp12, label %for.body13, label %for.end60

for.end60:                                        ; preds = %for.body13
  %inc62 = add nuw nsw i32 %x.0139, 1
  %scevgep4 = getelementptr i1, i1* %lsr.iv23, i32 %1
  %12 = bitcast i1* %scevgep4 to float*
  %exitcond = icmp eq i32 %inc62, %NN
  br i1 %exitcond, label %for.cond64.preheader, label %for.body9

for.body66:                                       ; preds = %for.body66, %for.cond64.preheader
  %lsr.iv24 = phi float* [ %scevgep25, %for.body66 ], [ %lsr.iv22, %for.cond64.preheader ]
  %lsr.iv18 = phi i32 [ %lsr.iv.next, %for.body66 ], [ 0, %for.cond64.preheader ]
  %uglygep = getelementptr i8, i8* %tot2627, i32 %lsr.iv18
  %uglygep28 = bitcast i8* %uglygep to float*
  %13 = load float, float* %uglygep28, align 4, !tbaa !1
  %14 = load volatile float, float* %lsr.iv24, align 4, !tbaa !1
  %add72 = fadd float %13, %14
  store volatile float %add72, float* %lsr.iv24, align 4, !tbaa !1
  %lsr.iv.next = add nuw nsw i32 %lsr.iv18, 4
  %scevgep25 = getelementptr float, float* %lsr.iv24, i32 1
  %exitcond145 = icmp eq i32 %lsr.iv.next, 32
  br i1 %exitcond145, label %for.end75, label %for.body66

for.end75:                                        ; preds = %for.body66
  call void @llvm.lifetime.end(i64 32, i8* nonnull %0) #3
  %add77 = add nuw nsw i32 %j0.0142, 8
  %scevgep1 = getelementptr float, float* %lsr.iv, i32 8
  %scevgep23 = getelementptr float, float* %lsr.iv22, i32 8
  %cmp2 = icmp slt i32 %add77, %NN
  br i1 %cmp2, label %for.body9.preheader, label %for.end78

for.end78:                                        ; preds = %for.end75
  %inc80 = add nuw nsw i32 %i.0144, 1
  %scevgep21 = getelementptr i1, i1* %lsr.iv1920, i32 %1
  %15 = bitcast i1* %scevgep21 to float*
  %exitcond146 = icmp eq i32 %inc80, %NN
  br i1 %exitcond146, label %for.end81.loopexit, label %for.body3.lr.ph

for.end81.loopexit:                               ; preds = %for.end78
  br label %for.end81

for.end81:                                        ; preds = %for.end81.loopexit, %entry
  ret void
}
*** IR Dump After Inserts calls to mcount-like functions ***
; Function Attrs: nounwind optsize
define hidden void @matmac(float* noalias %aa, float* noalias %bb, float* noalias %cc, i32 %NN) local_unnamed_addr #2 {
entry:
  %tot = alloca [8 x float], align 4
  %tot26 = bitcast [8 x float]* %tot to float*
  %tot2627 = bitcast float* %tot26 to i8*
  %0 = bitcast [8 x float]* %tot to i8*
  %cmp143 = icmp sgt i32 %NN, 0
  br i1 %cmp143, label %for.body3.lr.ph.preheader, label %for.end81

for.body3.lr.ph.preheader:                        ; preds = %entry
  %scevgep = getelementptr float, float* %bb, i32 2
  %1 = shl i32 %NN, 2
  %scevgep10 = getelementptr [8 x float], [8 x float]* %tot, i32 0, i32 2
  %scevgep1011 = bitcast float* %scevgep10 to [8 x float]*
  br label %for.body3.lr.ph

for.body3.lr.ph:                                  ; preds = %for.end78, %for.body3.lr.ph.preheader
  %lsr.iv19 = phi float* [ %15, %for.end78 ], [ %cc, %for.body3.lr.ph.preheader ]
  %i.0144 = phi i32 [ %inc80, %for.end78 ], [ 0, %for.body3.lr.ph.preheader ]
  %lsr.iv1920 = bitcast float* %lsr.iv19 to i1*
  %mul68 = mul nsw i32 %i.0144, %NN
  %add.ptr = getelementptr inbounds float, float* %aa, i32 %mul68
  br label %for.body9.preheader

for.body9.preheader:                              ; preds = %for.end75, %for.body3.lr.ph
  %lsr.iv22 = phi float* [ %scevgep23, %for.end75 ], [ %lsr.iv19, %for.body3.lr.ph ]
  %lsr.iv = phi float* [ %scevgep1, %for.end75 ], [ %scevgep, %for.body3.lr.ph ]
  %j0.0142 = phi i32 [ 0, %for.body3.lr.ph ], [ %add77, %for.end75 ]
  call void @llvm.lifetime.start(i64 32, i8* nonnull %0) #3
  call void @llvm.memset.p0i8.i32(i8* nonnull %0, i8 0, i32 32, i32 4, i1 false)
  br label %for.body9

for.cond64.preheader:                             ; preds = %for.end60
  br label %for.body66

for.body9:                                        ; preds = %for.end60, %for.body9.preheader
  %lsr.iv2 = phi float* [ %12, %for.end60 ], [ %lsr.iv, %for.body9.preheader ]
  %x.0139 = phi i32 [ %inc62, %for.end60 ], [ 0, %for.body9.preheader ]
  %lsr.iv23 = bitcast float* %lsr.iv2 to i1*
  %add.ptr10 = getelementptr inbounds float, float* %add.ptr, i32 %x.0139
  %2 = load volatile float, float* %add.ptr10, align 4, !tbaa !1
  br label %for.body13

for.body13:                                       ; preds = %for.body13, %for.body9
  %lsr.iv12 = phi [8 x float]* [ %11, %for.body13 ], [ %scevgep1011, %for.body9 ]
  %lsr.iv5 = phi float* [ %scevgep6, %for.body13 ], [ %lsr.iv2, %for.body9 ]
  %j1.1137 = phi i32 [ 0, %for.body9 ], [ %add59, %for.body13 ]
  %lsr.iv1214 = bitcast [8 x float]* %lsr.iv12 to float*
  %scevgep8 = getelementptr float, float* %lsr.iv5, i32 -2
  %3 = load volatile float, float* %scevgep8, align 4, !tbaa !1
  %scevgep9 = getelementptr float, float* %lsr.iv5, i32 -1
  %4 = load volatile float, float* %scevgep9, align 4, !tbaa !1
  %5 = load volatile float, float* %lsr.iv5, align 4, !tbaa !1
  %scevgep7 = getelementptr float, float* %lsr.iv5, i32 1
  %6 = load volatile float, float* %scevgep7, align 4, !tbaa !1
  %mul40 = fmul float %2, %3
  %scevgep15 = getelementptr float, float* %lsr.iv1214, i32 -2
  %7 = load float, float* %scevgep15, align 4, !tbaa !1
  %add42 = fadd float %mul40, %7
  store float %add42, float* %scevgep15, align 4, !tbaa !1
  %mul44 = fmul float %2, %4
  %scevgep17 = getelementptr float, float* %lsr.iv1214, i32 -1
  %8 = load float, float* %scevgep17, align 4, !tbaa !1
  %add47 = fadd float %mul44, %8
  store float %add47, float* %scevgep17, align 4, !tbaa !1
  %mul49 = fmul float %2, %5
  %9 = load float, float* %lsr.iv1214, align 4, !tbaa !1
  %add52 = fadd float %mul49, %9
  store float %add52, float* %lsr.iv1214, align 4, !tbaa !1
  %mul54 = fmul float %2, %6
  %scevgep16 = getelementptr float, float* %lsr.iv1214, i32 1
  %10 = load float, float* %scevgep16, align 4, !tbaa !1
  %add57 = fadd float %mul54, %10
  store float %add57, float* %scevgep16, align 4, !tbaa !1
  %add59 = add nuw nsw i32 %j1.1137, 4
  %scevgep6 = getelementptr float, float* %lsr.iv5, i32 4
  %scevgep13 = getelementptr [8 x float], [8 x float]* %lsr.iv12, i32 0, i32 4
  %11 = bitcast float* %scevgep13 to [8 x float]*
  %cmp12 = icmp slt i32 %add59, 8
  br i1 %cmp12, label %for.body13, label %for.end60

for.end60:                                        ; preds = %for.body13
  %inc62 = add nuw nsw i32 %x.0139, 1
  %scevgep4 = getelementptr i1, i1* %lsr.iv23, i32 %1
  %12 = bitcast i1* %scevgep4 to float*
  %exitcond = icmp eq i32 %inc62, %NN
  br i1 %exitcond, label %for.cond64.preheader, label %for.body9

for.body66:                                       ; preds = %for.body66, %for.cond64.preheader
  %lsr.iv24 = phi float* [ %scevgep25, %for.body66 ], [ %lsr.iv22, %for.cond64.preheader ]
  %lsr.iv18 = phi i32 [ %lsr.iv.next, %for.body66 ], [ 0, %for.cond64.preheader ]
  %uglygep = getelementptr i8, i8* %tot2627, i32 %lsr.iv18
  %uglygep28 = bitcast i8* %uglygep to float*
  %13 = load float, float* %uglygep28, align 4, !tbaa !1
  %14 = load volatile float, float* %lsr.iv24, align 4, !tbaa !1
  %add72 = fadd float %13, %14
  store volatile float %add72, float* %lsr.iv24, align 4, !tbaa !1
  %lsr.iv.next = add nuw nsw i32 %lsr.iv18, 4
  %scevgep25 = getelementptr float, float* %lsr.iv24, i32 1
  %exitcond145 = icmp eq i32 %lsr.iv.next, 32
  br i1 %exitcond145, label %for.end75, label %for.body66

for.end75:                                        ; preds = %for.body66
  call void @llvm.lifetime.end(i64 32, i8* nonnull %0) #3
  %add77 = add nuw nsw i32 %j0.0142, 8
  %scevgep1 = getelementptr float, float* %lsr.iv, i32 8
  %scevgep23 = getelementptr float, float* %lsr.iv22, i32 8
  %cmp2 = icmp slt i32 %add77, %NN
  br i1 %cmp2, label %for.body9.preheader, label %for.end78

for.end78:                                        ; preds = %for.end75
  %inc80 = add nuw nsw i32 %i.0144, 1
  %scevgep21 = getelementptr i1, i1* %lsr.iv1920, i32 %1
  %15 = bitcast i1* %scevgep21 to float*
  %exitcond146 = icmp eq i32 %inc80, %NN
  br i1 %exitcond146, label %for.end81.loopexit, label %for.body3.lr.ph

for.end81.loopexit:                               ; preds = %for.end78
  br label %for.end81

for.end81:                                        ; preds = %for.end81.loopexit, %entry
  ret void
}
*** IR Dump Before CodeGen Prepare ***
; Function Attrs: nounwind optsize
define hidden void @matmac(float* noalias %aa, float* noalias %bb, float* noalias %cc, i32 %NN) local_unnamed_addr #2 {
entry:
  %tot = alloca [8 x float], align 4
  %tot26 = bitcast [8 x float]* %tot to float*
  %tot2627 = bitcast float* %tot26 to i8*
  %0 = bitcast [8 x float]* %tot to i8*
  %cmp143 = icmp sgt i32 %NN, 0
  br i1 %cmp143, label %for.body3.lr.ph.preheader, label %for.end81

for.body3.lr.ph.preheader:                        ; preds = %entry
  %scevgep = getelementptr float, float* %bb, i32 2
  %1 = shl i32 %NN, 2
  %scevgep10 = getelementptr [8 x float], [8 x float]* %tot, i32 0, i32 2
  %scevgep1011 = bitcast float* %scevgep10 to [8 x float]*
  br label %for.body3.lr.ph

for.body3.lr.ph:                                  ; preds = %for.end78, %for.body3.lr.ph.preheader
  %lsr.iv19 = phi float* [ %15, %for.end78 ], [ %cc, %for.body3.lr.ph.preheader ]
  %i.0144 = phi i32 [ %inc80, %for.end78 ], [ 0, %for.body3.lr.ph.preheader ]
  %lsr.iv1920 = bitcast float* %lsr.iv19 to i1*
  %mul68 = mul nsw i32 %i.0144, %NN
  %add.ptr = getelementptr inbounds float, float* %aa, i32 %mul68
  br label %for.body9.preheader

for.body9.preheader:                              ; preds = %for.end75, %for.body3.lr.ph
  %lsr.iv22 = phi float* [ %scevgep23, %for.end75 ], [ %lsr.iv19, %for.body3.lr.ph ]
  %lsr.iv = phi float* [ %scevgep1, %for.end75 ], [ %scevgep, %for.body3.lr.ph ]
  %j0.0142 = phi i32 [ 0, %for.body3.lr.ph ], [ %add77, %for.end75 ]
  call void @llvm.lifetime.start(i64 32, i8* nonnull %0) #3
  call void @llvm.memset.p0i8.i32(i8* nonnull %0, i8 0, i32 32, i32 4, i1 false)
  br label %for.body9

for.cond64.preheader:                             ; preds = %for.end60
  br label %for.body66

for.body9:                                        ; preds = %for.end60, %for.body9.preheader
  %lsr.iv2 = phi float* [ %12, %for.end60 ], [ %lsr.iv, %for.body9.preheader ]
  %x.0139 = phi i32 [ %inc62, %for.end60 ], [ 0, %for.body9.preheader ]
  %lsr.iv23 = bitcast float* %lsr.iv2 to i1*
  %add.ptr10 = getelementptr inbounds float, float* %add.ptr, i32 %x.0139
  %2 = load volatile float, float* %add.ptr10, align 4, !tbaa !1
  br label %for.body13

for.body13:                                       ; preds = %for.body13, %for.body9
  %lsr.iv12 = phi [8 x float]* [ %11, %for.body13 ], [ %scevgep1011, %for.body9 ]
  %lsr.iv5 = phi float* [ %scevgep6, %for.body13 ], [ %lsr.iv2, %for.body9 ]
  %j1.1137 = phi i32 [ 0, %for.body9 ], [ %add59, %for.body13 ]
  %lsr.iv1214 = bitcast [8 x float]* %lsr.iv12 to float*
  %scevgep8 = getelementptr float, float* %lsr.iv5, i32 -2
  %3 = load volatile float, float* %scevgep8, align 4, !tbaa !1
  %scevgep9 = getelementptr float, float* %lsr.iv5, i32 -1
  %4 = load volatile float, float* %scevgep9, align 4, !tbaa !1
  %5 = load volatile float, float* %lsr.iv5, align 4, !tbaa !1
  %scevgep7 = getelementptr float, float* %lsr.iv5, i32 1
  %6 = load volatile float, float* %scevgep7, align 4, !tbaa !1
  %mul40 = fmul float %2, %3
  %scevgep15 = getelementptr float, float* %lsr.iv1214, i32 -2
  %7 = load float, float* %scevgep15, align 4, !tbaa !1
  %add42 = fadd float %mul40, %7
  store float %add42, float* %scevgep15, align 4, !tbaa !1
  %mul44 = fmul float %2, %4
  %scevgep17 = getelementptr float, float* %lsr.iv1214, i32 -1
  %8 = load float, float* %scevgep17, align 4, !tbaa !1
  %add47 = fadd float %mul44, %8
  store float %add47, float* %scevgep17, align 4, !tbaa !1
  %mul49 = fmul float %2, %5
  %9 = load float, float* %lsr.iv1214, align 4, !tbaa !1
  %add52 = fadd float %mul49, %9
  store float %add52, float* %lsr.iv1214, align 4, !tbaa !1
  %mul54 = fmul float %2, %6
  %scevgep16 = getelementptr float, float* %lsr.iv1214, i32 1
  %10 = load float, float* %scevgep16, align 4, !tbaa !1
  %add57 = fadd float %mul54, %10
  store float %add57, float* %scevgep16, align 4, !tbaa !1
  %add59 = add nuw nsw i32 %j1.1137, 4
  %scevgep6 = getelementptr float, float* %lsr.iv5, i32 4
  %scevgep13 = getelementptr [8 x float], [8 x float]* %lsr.iv12, i32 0, i32 4
  %11 = bitcast float* %scevgep13 to [8 x float]*
  %cmp12 = icmp slt i32 %add59, 8
  br i1 %cmp12, label %for.body13, label %for.end60

for.end60:                                        ; preds = %for.body13
  %inc62 = add nuw nsw i32 %x.0139, 1
  %scevgep4 = getelementptr i1, i1* %lsr.iv23, i32 %1
  %12 = bitcast i1* %scevgep4 to float*
  %exitcond = icmp eq i32 %inc62, %NN
  br i1 %exitcond, label %for.cond64.preheader, label %for.body9

for.body66:                                       ; preds = %for.body66, %for.cond64.preheader
  %lsr.iv24 = phi float* [ %scevgep25, %for.body66 ], [ %lsr.iv22, %for.cond64.preheader ]
  %lsr.iv18 = phi i32 [ %lsr.iv.next, %for.body66 ], [ 0, %for.cond64.preheader ]
  %uglygep = getelementptr i8, i8* %tot2627, i32 %lsr.iv18
  %uglygep28 = bitcast i8* %uglygep to float*
  %13 = load float, float* %uglygep28, align 4, !tbaa !1
  %14 = load volatile float, float* %lsr.iv24, align 4, !tbaa !1
  %add72 = fadd float %13, %14
  store volatile float %add72, float* %lsr.iv24, align 4, !tbaa !1
  %lsr.iv.next = add nuw nsw i32 %lsr.iv18, 4
  %scevgep25 = getelementptr float, float* %lsr.iv24, i32 1
  %exitcond145 = icmp eq i32 %lsr.iv.next, 32
  br i1 %exitcond145, label %for.end75, label %for.body66

for.end75:                                        ; preds = %for.body66
  call void @llvm.lifetime.end(i64 32, i8* nonnull %0) #3
  %add77 = add nuw nsw i32 %j0.0142, 8
  %scevgep1 = getelementptr float, float* %lsr.iv, i32 8
  %scevgep23 = getelementptr float, float* %lsr.iv22, i32 8
  %cmp2 = icmp slt i32 %add77, %NN
  br i1 %cmp2, label %for.body9.preheader, label %for.end78

for.end78:                                        ; preds = %for.end75
  %inc80 = add nuw nsw i32 %i.0144, 1
  %scevgep21 = getelementptr i1, i1* %lsr.iv1920, i32 %1
  %15 = bitcast i1* %scevgep21 to float*
  %exitcond146 = icmp eq i32 %inc80, %NN
  br i1 %exitcond146, label %for.end81.loopexit, label %for.body3.lr.ph

for.end81.loopexit:                               ; preds = %for.end78
  br label %for.end81

for.end81:                                        ; preds = %for.end81.loopexit, %entry
  ret void
}
MERGING MOSTLY EMPTY BLOCKS - BEFORE:

for.end81.loopexit:                               ; preds = %for.end78
  br label %for.end81

for.end81:                                        ; preds = %for.end81.loopexit, %entry
  ret void
AFTER:

for.end81:                                        ; preds = %for.end78, %entry
  ret void



CGP: Found      local addrmode: [Base:%add.ptr10]
CGP: Found      local addrmode: [-8 + Base:%lsr.iv5]
CGP: Found      local addrmode: [-4 + Base:%lsr.iv5]
CGP: Found      local addrmode: [4 + Base:%lsr.iv5]
CGP: Found      local addrmode: [-8 + Base:%lsr.iv12]
CGP: Found      local addrmode: [-8 + Base:%lsr.iv12]
CGP: Found      local addrmode: [-4 + Base:%lsr.iv12]
CGP: Found      local addrmode: [-4 + Base:%lsr.iv12]
CGP: Found      local addrmode: [Base:%lsr.iv12]
CGP: Found      local addrmode: [Base:%lsr.iv12]
CGP: Found      local addrmode: [4 + Base:%lsr.iv12]
CGP: Found      local addrmode: [4 + Base:%lsr.iv12]
CGP: SINKING nonlocal addrmode: [Base:%tot + 1*%lsr.iv18] for   %16 = load float, float* %uglygep28, align 4, !tbaa !1
CGP: Found      local addrmode: [Base:%add.ptr10]
CGP: Found      local addrmode: [-8 + Base:%lsr.iv5]
CGP: Found      local addrmode: [-4 + Base:%lsr.iv5]
CGP: Found      local addrmode: [4 + Base:%lsr.iv5]
CGP: Found      local addrmode: [-8 + Base:%lsr.iv12]
CGP: Found      local addrmode: [-8 + Base:%lsr.iv12]
CGP: Found      local addrmode: [-4 + Base:%lsr.iv12]
CGP: Found      local addrmode: [-4 + Base:%lsr.iv12]
CGP: Found      local addrmode: [Base:%lsr.iv12]
CGP: Found      local addrmode: [Base:%lsr.iv12]
CGP: Found      local addrmode: [4 + Base:%lsr.iv12]
CGP: Found      local addrmode: [4 + Base:%lsr.iv12]
CGP: Found      local addrmode: [Base:%lsr.iv18 + 1*%tot]
*** IR Dump After CodeGen Prepare ***
; Function Attrs: nounwind optsize
define hidden void @matmac(float* noalias %aa, float* noalias %bb, float* noalias %cc, i32 %NN) local_unnamed_addr #2 {
entry:
  %tot = alloca [8 x float], align 4
  %cmp143 = icmp sgt i32 %NN, 0
  br i1 %cmp143, label %for.body3.lr.ph.preheader, label %for.end81

for.body3.lr.ph.preheader:                        ; preds = %entry
  %scevgep = getelementptr float, float* %bb, i32 2
  %0 = shl i32 %NN, 2
  %scevgep10 = getelementptr [8 x float], [8 x float]* %tot, i32 0, i32 2
  br label %for.body3.lr.ph

for.body3.lr.ph:                                  ; preds = %for.end78, %for.body3.lr.ph.preheader
  %lsr.iv19 = phi float* [ %19, %for.end78 ], [ %cc, %for.body3.lr.ph.preheader ]
  %i.0144 = phi i32 [ %inc80, %for.end78 ], [ 0, %for.body3.lr.ph.preheader ]
  %mul68 = mul nsw i32 %i.0144, %NN
  %add.ptr = getelementptr inbounds float, float* %aa, i32 %mul68
  br label %for.body9.preheader

for.body9.preheader:                              ; preds = %for.end75, %for.body3.lr.ph
  %lsr.iv22 = phi float* [ %scevgep23, %for.end75 ], [ %lsr.iv19, %for.body3.lr.ph ]
  %lsr.iv = phi float* [ %scevgep1, %for.end75 ], [ %scevgep, %for.body3.lr.ph ]
  %j0.0142 = phi i32 [ 0, %for.body3.lr.ph ], [ %add77, %for.end75 ]
  %1 = bitcast [8 x float]* %tot to i8*
  call void @llvm.lifetime.start(i64 32, i8* nonnull %1) #3
  call void @llvm.memset.p0i8.i32(i8* nonnull %1, i8 0, i32 32, i32 4, i1 false)
  br label %for.body9

for.cond64.preheader:                             ; preds = %for.end60
  br label %for.body66

for.body9:                                        ; preds = %for.end60, %for.body9.preheader
  %lsr.iv2 = phi float* [ %14, %for.end60 ], [ %lsr.iv, %for.body9.preheader ]
  %x.0139 = phi i32 [ %inc62, %for.end60 ], [ 0, %for.body9.preheader ]
  %2 = bitcast float* %scevgep10 to [8 x float]*
  %add.ptr10 = getelementptr inbounds float, float* %add.ptr, i32 %x.0139
  %3 = load volatile float, float* %add.ptr10, align 4, !tbaa !1
  br label %for.body13

for.body13:                                       ; preds = %for.body13, %for.body9
  %lsr.iv12 = phi [8 x float]* [ %12, %for.body13 ], [ %2, %for.body9 ]
  %lsr.iv5 = phi float* [ %scevgep6, %for.body13 ], [ %lsr.iv2, %for.body9 ]
  %j1.1137 = phi i32 [ 0, %for.body9 ], [ %add59, %for.body13 ]
  %lsr.iv1214 = bitcast [8 x float]* %lsr.iv12 to float*
  %scevgep8 = getelementptr float, float* %lsr.iv5, i32 -2
  %4 = load volatile float, float* %scevgep8, align 4, !tbaa !1
  %scevgep9 = getelementptr float, float* %lsr.iv5, i32 -1
  %5 = load volatile float, float* %scevgep9, align 4, !tbaa !1
  %6 = load volatile float, float* %lsr.iv5, align 4, !tbaa !1
  %scevgep7 = getelementptr float, float* %lsr.iv5, i32 1
  %7 = load volatile float, float* %scevgep7, align 4, !tbaa !1
  %mul40 = fmul float %3, %4
  %scevgep15 = getelementptr float, float* %lsr.iv1214, i32 -2
  %8 = load float, float* %scevgep15, align 4, !tbaa !1
  %add42 = fadd float %mul40, %8
  store float %add42, float* %scevgep15, align 4, !tbaa !1
  %mul44 = fmul float %3, %5
  %scevgep17 = getelementptr float, float* %lsr.iv1214, i32 -1
  %9 = load float, float* %scevgep17, align 4, !tbaa !1
  %add47 = fadd float %mul44, %9
  store float %add47, float* %scevgep17, align 4, !tbaa !1
  %mul49 = fmul float %3, %6
  %10 = load float, float* %lsr.iv1214, align 4, !tbaa !1
  %add52 = fadd float %mul49, %10
  store float %add52, float* %lsr.iv1214, align 4, !tbaa !1
  %mul54 = fmul float %3, %7
  %scevgep16 = getelementptr float, float* %lsr.iv1214, i32 1
  %11 = load float, float* %scevgep16, align 4, !tbaa !1
  %add57 = fadd float %mul54, %11
  store float %add57, float* %scevgep16, align 4, !tbaa !1
  %add59 = add nuw nsw i32 %j1.1137, 4
  %scevgep6 = getelementptr float, float* %lsr.iv5, i32 4
  %scevgep13 = getelementptr [8 x float], [8 x float]* %lsr.iv12, i32 0, i32 4
  %12 = bitcast float* %scevgep13 to [8 x float]*
  %cmp12 = icmp slt i32 %add59, 8
  br i1 %cmp12, label %for.body13, label %for.end60

for.end60:                                        ; preds = %for.body13
  %13 = bitcast float* %lsr.iv2 to i1*
  %inc62 = add nuw nsw i32 %x.0139, 1
  %scevgep4 = getelementptr i1, i1* %13, i32 %0
  %14 = bitcast i1* %scevgep4 to float*
  %exitcond = icmp eq i32 %inc62, %NN
  br i1 %exitcond, label %for.cond64.preheader, label %for.body9

for.body66:                                       ; preds = %for.body66, %for.cond64.preheader
  %lsr.iv24 = phi float* [ %scevgep25, %for.body66 ], [ %lsr.iv22, %for.cond64.preheader ]
  %lsr.iv18 = phi i32 [ %lsr.iv.next, %for.body66 ], [ 0, %for.cond64.preheader ]
  %sunkaddr = ptrtoint [8 x float]* %tot to i32
  %sunkaddr29 = add i32 %sunkaddr, %lsr.iv18
  %sunkaddr30 = inttoptr i32 %sunkaddr29 to float*
  %15 = load float, float* %sunkaddr30, align 4, !tbaa !1
  %16 = load volatile float, float* %lsr.iv24, align 4, !tbaa !1
  %add72 = fadd float %15, %16
  store volatile float %add72, float* %lsr.iv24, align 4, !tbaa !1
  %lsr.iv.next = add nuw nsw i32 %lsr.iv18, 4
  %scevgep25 = getelementptr float, float* %lsr.iv24, i32 1
  %exitcond145 = icmp eq i32 %lsr.iv.next, 32
  br i1 %exitcond145, label %for.end75, label %for.body66

for.end75:                                        ; preds = %for.body66
  %17 = bitcast [8 x float]* %tot to i8*
  call void @llvm.lifetime.end(i64 32, i8* nonnull %17) #3
  %add77 = add nuw nsw i32 %j0.0142, 8
  %scevgep1 = getelementptr float, float* %lsr.iv, i32 8
  %scevgep23 = getelementptr float, float* %lsr.iv22, i32 8
  %cmp2 = icmp slt i32 %add77, %NN
  br i1 %cmp2, label %for.body9.preheader, label %for.end78

for.end78:                                        ; preds = %for.end75
  %18 = bitcast float* %lsr.iv19 to i1*
  %inc80 = add nuw nsw i32 %i.0144, 1
  %scevgep21 = getelementptr i1, i1* %18, i32 %0
  %19 = bitcast i1* %scevgep21 to float*
  %exitcond146 = icmp eq i32 %inc80, %NN
  br i1 %exitcond146, label %for.end81, label %for.body3.lr.ph

for.end81:                                        ; preds = %for.end78, %entry
  ret void
}
*** IR Dump Before Rewrite Symbols ***; ModuleID = 'll/matlib.ll'
source_filename = "src/matlib.c"
target datalayout = "e-p:32:32-i8:8-i16:16-i32:32-i64:64-v32:64-v64:64-f32:32-f64:64-n32-S64"
target triple = "epiphany"

; Function Attrs: norecurse nounwind optsize
define hidden void @matclr(float* noalias %a, i32 %NN) local_unnamed_addr #0 {
entry:
  %mul = mul nsw i32 %NN, %NN
  %cmp5 = icmp eq i32 %mul, 0
  br i1 %cmp5, label %for.end, label %for.body.preheader

for.body.preheader:                               ; preds = %entry
  br label %for.body

for.body:                                         ; preds = %for.body, %for.body.preheader
  %lsr.iv = phi float* [ %scevgep, %for.body ], [ %a, %for.body.preheader ]
  %i.06 = phi i32 [ %inc, %for.body ], [ 0, %for.body.preheader ]
  store volatile float 0.000000e+00, float* %lsr.iv, align 4, !tbaa !1
  %inc = add nuw nsw i32 %i.06, 1
  %scevgep = getelementptr float, float* %lsr.iv, i32 1
  %cmp = icmp slt i32 %inc, %mul
  br i1 %cmp, label %for.body, label %for.end

for.end:                                          ; preds = %for.body, %entry
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start(i64, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end(i64, i8* nocapture) #1

; Function Attrs: nounwind optsize
define hidden void @matmac(float* noalias %aa, float* noalias %bb, float* noalias %cc, i32 %NN) local_unnamed_addr #2 {
entry:
  %tot = alloca [8 x float], align 4
  %cmp143 = icmp sgt i32 %NN, 0
  br i1 %cmp143, label %for.body3.lr.ph.preheader, label %for.end81

for.body3.lr.ph.preheader:                        ; preds = %entry
  %scevgep = getelementptr float, float* %bb, i32 2
  %0 = shl i32 %NN, 2
  %scevgep10 = getelementptr [8 x float], [8 x float]* %tot, i32 0, i32 2
  br label %for.body3.lr.ph

for.body3.lr.ph:                                  ; preds = %for.end78, %for.body3.lr.ph.preheader
  %lsr.iv19 = phi float* [ %19, %for.end78 ], [ %cc, %for.body3.lr.ph.preheader ]
  %i.0144 = phi i32 [ %inc80, %for.end78 ], [ 0, %for.body3.lr.ph.preheader ]
  %mul68 = mul nsw i32 %i.0144, %NN
  %add.ptr = getelementptr inbounds float, float* %aa, i32 %mul68
  br label %for.body9.preheader

for.body9.preheader:                              ; preds = %for.end75, %for.body3.lr.ph
  %lsr.iv22 = phi float* [ %scevgep23, %for.end75 ], [ %lsr.iv19, %for.body3.lr.ph ]
  %lsr.iv = phi float* [ %scevgep1, %for.end75 ], [ %scevgep, %for.body3.lr.ph ]
  %j0.0142 = phi i32 [ 0, %for.body3.lr.ph ], [ %add77, %for.end75 ]
  %1 = bitcast [8 x float]* %tot to i8*
  call void @llvm.lifetime.start(i64 32, i8* nonnull %1) #3
  call void @llvm.memset.p0i8.i32(i8* nonnull %1, i8 0, i32 32, i32 4, i1 false)
  br label %for.body9

for.cond64.preheader:                             ; preds = %for.end60
  br label %for.body66

for.body9:                                        ; preds = %for.end60, %for.body9.preheader
  %lsr.iv2 = phi float* [ %14, %for.end60 ], [ %lsr.iv, %for.body9.preheader ]
  %x.0139 = phi i32 [ %inc62, %for.end60 ], [ 0, %for.body9.preheader ]
  %2 = bitcast float* %scevgep10 to [8 x float]*
  %add.ptr10 = getelementptr inbounds float, float* %add.ptr, i32 %x.0139
  %3 = load volatile float, float* %add.ptr10, align 4, !tbaa !1
  br label %for.body13

for.body13:                                       ; preds = %for.body13, %for.body9
  %lsr.iv12 = phi [8 x float]* [ %12, %for.body13 ], [ %2, %for.body9 ]
  %lsr.iv5 = phi float* [ %scevgep6, %for.body13 ], [ %lsr.iv2, %for.body9 ]
  %j1.1137 = phi i32 [ 0, %for.body9 ], [ %add59, %for.body13 ]
  %lsr.iv1214 = bitcast [8 x float]* %lsr.iv12 to float*
  %scevgep8 = getelementptr float, float* %lsr.iv5, i32 -2
  %4 = load volatile float, float* %scevgep8, align 4, !tbaa !1
  %scevgep9 = getelementptr float, float* %lsr.iv5, i32 -1
  %5 = load volatile float, float* %scevgep9, align 4, !tbaa !1
  %6 = load volatile float, float* %lsr.iv5, align 4, !tbaa !1
  %scevgep7 = getelementptr float, float* %lsr.iv5, i32 1
  %7 = load volatile float, float* %scevgep7, align 4, !tbaa !1
  %mul40 = fmul float %3, %4
  %scevgep15 = getelementptr float, float* %lsr.iv1214, i32 -2
  %8 = load float, float* %scevgep15, align 4, !tbaa !1
  %add42 = fadd float %mul40, %8
  store float %add42, float* %scevgep15, align 4, !tbaa !1
  %mul44 = fmul float %3, %5
  %scevgep17 = getelementptr float, float* %lsr.iv1214, i32 -1
  %9 = load float, float* %scevgep17, align 4, !tbaa !1
  %add47 = fadd float %mul44, %9
  store float %add47, float* %scevgep17, align 4, !tbaa !1
  %mul49 = fmul float %3, %6
  %10 = load float, float* %lsr.iv1214, align 4, !tbaa !1
  %add52 = fadd float %mul49, %10
  store float %add52, float* %lsr.iv1214, align 4, !tbaa !1
  %mul54 = fmul float %3, %7
  %scevgep16 = getelementptr float, float* %lsr.iv1214, i32 1
  %11 = load float, float* %scevgep16, align 4, !tbaa !1
  %add57 = fadd float %mul54, %11
  store float %add57, float* %scevgep16, align 4, !tbaa !1
  %add59 = add nuw nsw i32 %j1.1137, 4
  %scevgep6 = getelementptr float, float* %lsr.iv5, i32 4
  %scevgep13 = getelementptr [8 x float], [8 x float]* %lsr.iv12, i32 0, i32 4
  %12 = bitcast float* %scevgep13 to [8 x float]*
  %cmp12 = icmp slt i32 %add59, 8
  br i1 %cmp12, label %for.body13, label %for.end60

for.end60:                                        ; preds = %for.body13
  %13 = bitcast float* %lsr.iv2 to i1*
  %inc62 = add nuw nsw i32 %x.0139, 1
  %scevgep4 = getelementptr i1, i1* %13, i32 %0
  %14 = bitcast i1* %scevgep4 to float*
  %exitcond = icmp eq i32 %inc62, %NN
  br i1 %exitcond, label %for.cond64.preheader, label %for.body9

for.body66:                                       ; preds = %for.body66, %for.cond64.preheader
  %lsr.iv24 = phi float* [ %scevgep25, %for.body66 ], [ %lsr.iv22, %for.cond64.preheader ]
  %lsr.iv18 = phi i32 [ %lsr.iv.next, %for.body66 ], [ 0, %for.cond64.preheader ]
  %sunkaddr = ptrtoint [8 x float]* %tot to i32
  %sunkaddr29 = add i32 %sunkaddr, %lsr.iv18
  %sunkaddr30 = inttoptr i32 %sunkaddr29 to float*
  %15 = load float, float* %sunkaddr30, align 4, !tbaa !1
  %16 = load volatile float, float* %lsr.iv24, align 4, !tbaa !1
  %add72 = fadd float %15, %16
  store volatile float %add72, float* %lsr.iv24, align 4, !tbaa !1
  %lsr.iv.next = add nuw nsw i32 %lsr.iv18, 4
  %scevgep25 = getelementptr float, float* %lsr.iv24, i32 1
  %exitcond145 = icmp eq i32 %lsr.iv.next, 32
  br i1 %exitcond145, label %for.end75, label %for.body66

for.end75:                                        ; preds = %for.body66
  %17 = bitcast [8 x float]* %tot to i8*
  call void @llvm.lifetime.end(i64 32, i8* nonnull %17) #3
  %add77 = add nuw nsw i32 %j0.0142, 8
  %scevgep1 = getelementptr float, float* %lsr.iv, i32 8
  %scevgep23 = getelementptr float, float* %lsr.iv22, i32 8
  %cmp2 = icmp slt i32 %add77, %NN
  br i1 %cmp2, label %for.body9.preheader, label %for.end78

for.end78:                                        ; preds = %for.end75
  %18 = bitcast float* %lsr.iv19 to i1*
  %inc80 = add nuw nsw i32 %i.0144, 1
  %scevgep21 = getelementptr i1, i1* %18, i32 %0
  %19 = bitcast i1* %scevgep21 to float*
  %exitcond146 = icmp eq i32 %inc80, %NN
  br i1 %exitcond146, label %for.end81, label %for.body3.lr.ph

for.end81:                                        ; preds = %for.end78, %entry
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i32(i8* nocapture writeonly, i8, i32, i32, i1) #1

attributes #0 = { norecurse nounwind optsize "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="E16" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind "target-cpu"="E16" }
attributes #2 = { nounwind optsize "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="E16" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind }

!llvm.ident = !{!0}

!0 = !{!"clang version 4.0.0 (tags/RELEASE_400/final)"}
!1 = !{!2, !2, i64 0}
!2 = !{!"float", !3, i64 0}
!3 = !{!"omnipotent char", !4, i64 0}
!4 = !{!"Simple C/C++ TBAA"}
*** IR Dump After Rewrite Symbols ***; ModuleID = 'll/matlib.ll'
source_filename = "src/matlib.c"
target datalayout = "e-p:32:32-i8:8-i16:16-i32:32-i64:64-v32:64-v64:64-f32:32-f64:64-n32-S64"
target triple = "epiphany"

; Function Attrs: norecurse nounwind optsize
define hidden void @matclr(float* noalias %a, i32 %NN) local_unnamed_addr #0 {
entry:
  %mul = mul nsw i32 %NN, %NN
  %cmp5 = icmp eq i32 %mul, 0
  br i1 %cmp5, label %for.end, label %for.body.preheader

for.body.preheader:                               ; preds = %entry
  br label %for.body

for.body:                                         ; preds = %for.body, %for.body.preheader
  %lsr.iv = phi float* [ %scevgep, %for.body ], [ %a, %for.body.preheader ]
  %i.06 = phi i32 [ %inc, %for.body ], [ 0, %for.body.preheader ]
  store volatile float 0.000000e+00, float* %lsr.iv, align 4, !tbaa !1
  %inc = add nuw nsw i32 %i.06, 1
  %scevgep = getelementptr float, float* %lsr.iv, i32 1
  %cmp = icmp slt i32 %inc, %mul
  br i1 %cmp, label %for.body, label %for.end

for.end:                                          ; preds = %for.body, %entry
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start(i64, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end(i64, i8* nocapture) #1

; Function Attrs: nounwind optsize
define hidden void @matmac(float* noalias %aa, float* noalias %bb, float* noalias %cc, i32 %NN) local_unnamed_addr #2 {
entry:
  %tot = alloca [8 x float], align 4
  %cmp143 = icmp sgt i32 %NN, 0
  br i1 %cmp143, label %for.body3.lr.ph.preheader, label %for.end81

for.body3.lr.ph.preheader:                        ; preds = %entry
  %scevgep = getelementptr float, float* %bb, i32 2
  %0 = shl i32 %NN, 2
  %scevgep10 = getelementptr [8 x float], [8 x float]* %tot, i32 0, i32 2
  br label %for.body3.lr.ph

for.body3.lr.ph:                                  ; preds = %for.end78, %for.body3.lr.ph.preheader
  %lsr.iv19 = phi float* [ %19, %for.end78 ], [ %cc, %for.body3.lr.ph.preheader ]
  %i.0144 = phi i32 [ %inc80, %for.end78 ], [ 0, %for.body3.lr.ph.preheader ]
  %mul68 = mul nsw i32 %i.0144, %NN
  %add.ptr = getelementptr inbounds float, float* %aa, i32 %mul68
  br label %for.body9.preheader

for.body9.preheader:                              ; preds = %for.end75, %for.body3.lr.ph
  %lsr.iv22 = phi float* [ %scevgep23, %for.end75 ], [ %lsr.iv19, %for.body3.lr.ph ]
  %lsr.iv = phi float* [ %scevgep1, %for.end75 ], [ %scevgep, %for.body3.lr.ph ]
  %j0.0142 = phi i32 [ 0, %for.body3.lr.ph ], [ %add77, %for.end75 ]
  %1 = bitcast [8 x float]* %tot to i8*
  call void @llvm.lifetime.start(i64 32, i8* nonnull %1) #3
  call void @llvm.memset.p0i8.i32(i8* nonnull %1, i8 0, i32 32, i32 4, i1 false)
  br label %for.body9

for.cond64.preheader:                             ; preds = %for.end60
  br label %for.body66

for.body9:                                        ; preds = %for.end60, %for.body9.preheader
  %lsr.iv2 = phi float* [ %14, %for.end60 ], [ %lsr.iv, %for.body9.preheader ]
  %x.0139 = phi i32 [ %inc62, %for.end60 ], [ 0, %for.body9.preheader ]
  %2 = bitcast float* %scevgep10 to [8 x float]*
  %add.ptr10 = getelementptr inbounds float, float* %add.ptr, i32 %x.0139
  %3 = load volatile float, float* %add.ptr10, align 4, !tbaa !1
  br label %for.body13

for.body13:                                       ; preds = %for.body13, %for.body9
  %lsr.iv12 = phi [8 x float]* [ %12, %for.body13 ], [ %2, %for.body9 ]
  %lsr.iv5 = phi float* [ %scevgep6, %for.body13 ], [ %lsr.iv2, %for.body9 ]
  %j1.1137 = phi i32 [ 0, %for.body9 ], [ %add59, %for.body13 ]
  %lsr.iv1214 = bitcast [8 x float]* %lsr.iv12 to float*
  %scevgep8 = getelementptr float, float* %lsr.iv5, i32 -2
  %4 = load volatile float, float* %scevgep8, align 4, !tbaa !1
  %scevgep9 = getelementptr float, float* %lsr.iv5, i32 -1
  %5 = load volatile float, float* %scevgep9, align 4, !tbaa !1
  %6 = load volatile float, float* %lsr.iv5, align 4, !tbaa !1
  %scevgep7 = getelementptr float, float* %lsr.iv5, i32 1
  %7 = load volatile float, float* %scevgep7, align 4, !tbaa !1
  %mul40 = fmul float %3, %4
  %scevgep15 = getelementptr float, float* %lsr.iv1214, i32 -2
  %8 = load float, float* %scevgep15, align 4, !tbaa !1
  %add42 = fadd float %mul40, %8
  store float %add42, float* %scevgep15, align 4, !tbaa !1
  %mul44 = fmul float %3, %5
  %scevgep17 = getelementptr float, float* %lsr.iv1214, i32 -1
  %9 = load float, float* %scevgep17, align 4, !tbaa !1
  %add47 = fadd float %mul44, %9
  store float %add47, float* %scevgep17, align 4, !tbaa !1
  %mul49 = fmul float %3, %6
  %10 = load float, float* %lsr.iv1214, align 4, !tbaa !1
  %add52 = fadd float %mul49, %10
  store float %add52, float* %lsr.iv1214, align 4, !tbaa !1
  %mul54 = fmul float %3, %7
  %scevgep16 = getelementptr float, float* %lsr.iv1214, i32 1
  %11 = load float, float* %scevgep16, align 4, !tbaa !1
  %add57 = fadd float %mul54, %11
  store float %add57, float* %scevgep16, align 4, !tbaa !1
  %add59 = add nuw nsw i32 %j1.1137, 4
  %scevgep6 = getelementptr float, float* %lsr.iv5, i32 4
  %scevgep13 = getelementptr [8 x float], [8 x float]* %lsr.iv12, i32 0, i32 4
  %12 = bitcast float* %scevgep13 to [8 x float]*
  %cmp12 = icmp slt i32 %add59, 8
  br i1 %cmp12, label %for.body13, label %for.end60

for.end60:                                        ; preds = %for.body13
  %13 = bitcast float* %lsr.iv2 to i1*
  %inc62 = add nuw nsw i32 %x.0139, 1
  %scevgep4 = getelementptr i1, i1* %13, i32 %0
  %14 = bitcast i1* %scevgep4 to float*
  %exitcond = icmp eq i32 %inc62, %NN
  br i1 %exitcond, label %for.cond64.preheader, label %for.body9

for.body66:                                       ; preds = %for.body66, %for.cond64.preheader
  %lsr.iv24 = phi float* [ %scevgep25, %for.body66 ], [ %lsr.iv22, %for.cond64.preheader ]
  %lsr.iv18 = phi i32 [ %lsr.iv.next, %for.body66 ], [ 0, %for.cond64.preheader ]
  %sunkaddr = ptrtoint [8 x float]* %tot to i32
  %sunkaddr29 = add i32 %sunkaddr, %lsr.iv18
  %sunkaddr30 = inttoptr i32 %sunkaddr29 to float*
  %15 = load float, float* %sunkaddr30, align 4, !tbaa !1
  %16 = load volatile float, float* %lsr.iv24, align 4, !tbaa !1
  %add72 = fadd float %15, %16
  store volatile float %add72, float* %lsr.iv24, align 4, !tbaa !1
  %lsr.iv.next = add nuw nsw i32 %lsr.iv18, 4
  %scevgep25 = getelementptr float, float* %lsr.iv24, i32 1
  %exitcond145 = icmp eq i32 %lsr.iv.next, 32
  br i1 %exitcond145, label %for.end75, label %for.body66

for.end75:                                        ; preds = %for.body66
  %17 = bitcast [8 x float]* %tot to i8*
  call void @llvm.lifetime.end(i64 32, i8* nonnull %17) #3
  %add77 = add nuw nsw i32 %j0.0142, 8
  %scevgep1 = getelementptr float, float* %lsr.iv, i32 8
  %scevgep23 = getelementptr float, float* %lsr.iv22, i32 8
  %cmp2 = icmp slt i32 %add77, %NN
  br i1 %cmp2, label %for.body9.preheader, label %for.end78

for.end78:                                        ; preds = %for.end75
  %18 = bitcast float* %lsr.iv19 to i1*
  %inc80 = add nuw nsw i32 %i.0144, 1
  %scevgep21 = getelementptr i1, i1* %18, i32 %0
  %19 = bitcast i1* %scevgep21 to float*
  %exitcond146 = icmp eq i32 %inc80, %NN
  br i1 %exitcond146, label %for.end81, label %for.body3.lr.ph

for.end81:                                        ; preds = %for.end78, %entry
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i32(i8* nocapture writeonly, i8, i32, i32, i1) #1

attributes #0 = { norecurse nounwind optsize "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="E16" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind "target-cpu"="E16" }
attributes #2 = { nounwind optsize "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="E16" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind }

!llvm.ident = !{!0}

!0 = !{!"clang version 4.0.0 (tags/RELEASE_400/final)"}
!1 = !{!2, !2, i64 0}
!2 = !{!"float", !3, i64 0}
!3 = !{!"omnipotent char", !4, i64 0}
!4 = !{!"Simple C/C++ TBAA"}
*** IR Dump Before GPU Load and Store Vectorizer ***
; Function Attrs: norecurse nounwind optsize
define hidden void @matclr(float* noalias %a, i32 %NN) local_unnamed_addr #0 {
entry:
  %mul = mul nsw i32 %NN, %NN
  %cmp5 = icmp eq i32 %mul, 0
  br i1 %cmp5, label %for.end, label %for.body.preheader

for.body.preheader:                               ; preds = %entry
  br label %for.body

for.body:                                         ; preds = %for.body, %for.body.preheader
  %lsr.iv = phi float* [ %scevgep, %for.body ], [ %a, %for.body.preheader ]
  %i.06 = phi i32 [ %inc, %for.body ], [ 0, %for.body.preheader ]
  store volatile float 0.000000e+00, float* %lsr.iv, align 4, !tbaa !1
  %inc = add nuw nsw i32 %i.06, 1
  %scevgep = getelementptr float, float* %lsr.iv, i32 1
  %cmp = icmp slt i32 %inc, %mul
  br i1 %cmp, label %for.body, label %for.end

for.end:                                          ; preds = %for.body, %entry
  ret void
}
*** IR Dump After GPU Load and Store Vectorizer ***
; Function Attrs: norecurse nounwind optsize
define hidden void @matclr(float* noalias %a, i32 %NN) local_unnamed_addr #0 {
entry:
  %mul = mul nsw i32 %NN, %NN
  %cmp5 = icmp eq i32 %mul, 0
  br i1 %cmp5, label %for.end, label %for.body.preheader

for.body.preheader:                               ; preds = %entry
  br label %for.body

for.body:                                         ; preds = %for.body, %for.body.preheader
  %lsr.iv = phi float* [ %scevgep, %for.body ], [ %a, %for.body.preheader ]
  %i.06 = phi i32 [ %inc, %for.body ], [ 0, %for.body.preheader ]
  store volatile float 0.000000e+00, float* %lsr.iv, align 4, !tbaa !1
  %inc = add nuw nsw i32 %i.06, 1
  %scevgep = getelementptr float, float* %lsr.iv, i32 1
  %cmp = icmp slt i32 %inc, %mul
  br i1 %cmp, label %for.body, label %for.end

for.end:                                          ; preds = %for.body, %entry
  ret void
}
*** IR Dump Before Exception handling preparation ***
; Function Attrs: norecurse nounwind optsize
define hidden void @matclr(float* noalias %a, i32 %NN) local_unnamed_addr #0 {
entry:
  %mul = mul nsw i32 %NN, %NN
  %cmp5 = icmp eq i32 %mul, 0
  br i1 %cmp5, label %for.end, label %for.body.preheader

for.body.preheader:                               ; preds = %entry
  br label %for.body

for.body:                                         ; preds = %for.body, %for.body.preheader
  %lsr.iv = phi float* [ %scevgep, %for.body ], [ %a, %for.body.preheader ]
  %i.06 = phi i32 [ %inc, %for.body ], [ 0, %for.body.preheader ]
  store volatile float 0.000000e+00, float* %lsr.iv, align 4, !tbaa !1
  %inc = add nuw nsw i32 %i.06, 1
  %scevgep = getelementptr float, float* %lsr.iv, i32 1
  %cmp = icmp slt i32 %inc, %mul
  br i1 %cmp, label %for.body, label %for.end

for.end:                                          ; preds = %for.body, %entry
  ret void
}
*** IR Dump After Exception handling preparation ***
; Function Attrs: norecurse nounwind optsize
define hidden void @matclr(float* noalias %a, i32 %NN) local_unnamed_addr #0 {
entry:
  %mul = mul nsw i32 %NN, %NN
  %cmp5 = icmp eq i32 %mul, 0
  br i1 %cmp5, label %for.end, label %for.body.preheader

for.body.preheader:                               ; preds = %entry
  br label %for.body

for.body:                                         ; preds = %for.body, %for.body.preheader
  %lsr.iv = phi float* [ %scevgep, %for.body ], [ %a, %for.body.preheader ]
  %i.06 = phi i32 [ %inc, %for.body ], [ 0, %for.body.preheader ]
  store volatile float 0.000000e+00, float* %lsr.iv, align 4, !tbaa !1
  %inc = add nuw nsw i32 %i.06, 1
  %scevgep = getelementptr float, float* %lsr.iv, i32 1
  %cmp = icmp slt i32 %inc, %mul
  br i1 %cmp, label %for.body, label %for.end

for.end:                                          ; preds = %for.body, %entry
  ret void
}
*** IR Dump Before Safe Stack instrumentation pass ***
; Function Attrs: norecurse nounwind optsize
define hidden void @matclr(float* noalias %a, i32 %NN) local_unnamed_addr #0 {
entry:
  %mul = mul nsw i32 %NN, %NN
  %cmp5 = icmp eq i32 %mul, 0
  br i1 %cmp5, label %for.end, label %for.body.preheader

for.body.preheader:                               ; preds = %entry
  br label %for.body

for.body:                                         ; preds = %for.body, %for.body.preheader
  %lsr.iv = phi float* [ %scevgep, %for.body ], [ %a, %for.body.preheader ]
  %i.06 = phi i32 [ %inc, %for.body ], [ 0, %for.body.preheader ]
  store volatile float 0.000000e+00, float* %lsr.iv, align 4, !tbaa !1
  %inc = add nuw nsw i32 %i.06, 1
  %scevgep = getelementptr float, float* %lsr.iv, i32 1
  %cmp = icmp slt i32 %inc, %mul
  br i1 %cmp, label %for.body, label %for.end

for.end:                                          ; preds = %for.body, %entry
  ret void
}
[SafeStack] Function: matclr
[SafeStack]     safestack is not requested for this function
*** IR Dump After Safe Stack instrumentation pass ***
; Function Attrs: norecurse nounwind optsize
define hidden void @matclr(float* noalias %a, i32 %NN) local_unnamed_addr #0 {
entry:
  %mul = mul nsw i32 %NN, %NN
  %cmp5 = icmp eq i32 %mul, 0
  br i1 %cmp5, label %for.end, label %for.body.preheader

for.body.preheader:                               ; preds = %entry
  br label %for.body

for.body:                                         ; preds = %for.body, %for.body.preheader
  %lsr.iv = phi float* [ %scevgep, %for.body ], [ %a, %for.body.preheader ]
  %i.06 = phi i32 [ %inc, %for.body ], [ 0, %for.body.preheader ]
  store volatile float 0.000000e+00, float* %lsr.iv, align 4, !tbaa !1
  %inc = add nuw nsw i32 %i.06, 1
  %scevgep = getelementptr float, float* %lsr.iv, i32 1
  %cmp = icmp slt i32 %inc, %mul
  br i1 %cmp, label %for.body, label %for.end

for.end:                                          ; preds = %for.body, %entry
  ret void
}
*** IR Dump Before Module Verifier ***
; Function Attrs: norecurse nounwind optsize
define hidden void @matclr(float* noalias %a, i32 %NN) local_unnamed_addr #0 {
entry:
  %mul = mul nsw i32 %NN, %NN
  %cmp5 = icmp eq i32 %mul, 0
  br i1 %cmp5, label %for.end, label %for.body.preheader

for.body.preheader:                               ; preds = %entry
  br label %for.body

for.body:                                         ; preds = %for.body, %for.body.preheader
  %lsr.iv = phi float* [ %scevgep, %for.body ], [ %a, %for.body.preheader ]
  %i.06 = phi i32 [ %inc, %for.body ], [ 0, %for.body.preheader ]
  store volatile float 0.000000e+00, float* %lsr.iv, align 4, !tbaa !1
  %inc = add nuw nsw i32 %i.06, 1
  %scevgep = getelementptr float, float* %lsr.iv, i32 1
  %cmp = icmp slt i32 %inc, %mul
  br i1 %cmp, label %for.body, label %for.end

for.end:                                          ; preds = %for.body, %entry
  ret void
}
*** IR Dump After Module Verifier ***
; Function Attrs: norecurse nounwind optsize
define hidden void @matclr(float* noalias %a, i32 %NN) local_unnamed_addr #0 {
entry:
  %mul = mul nsw i32 %NN, %NN
  %cmp5 = icmp eq i32 %mul, 0
  br i1 %cmp5, label %for.end, label %for.body.preheader

for.body.preheader:                               ; preds = %entry
  br label %for.body

for.body:                                         ; preds = %for.body, %for.body.preheader
  %lsr.iv = phi float* [ %scevgep, %for.body ], [ %a, %for.body.preheader ]
  %i.06 = phi i32 [ %inc, %for.body ], [ 0, %for.body.preheader ]
  store volatile float 0.000000e+00, float* %lsr.iv, align 4, !tbaa !1
  %inc = add nuw nsw i32 %i.06, 1
  %scevgep = getelementptr float, float* %lsr.iv, i32 1
  %cmp = icmp slt i32 %inc, %mul
  br i1 %cmp, label %for.body, label %for.end

for.end:                                          ; preds = %for.body, %entry
  ret void
}
---- Branch Probability Info : matclr ----

Computing probabilities for for.end
Computing probabilities for for.body
set edge for.body -> 0 successor probability to 0x7c000000 / 0x80000000 = 96.88%
set edge for.body -> 1 successor probability to 0x04000000 / 0x80000000 = 3.12%
Computing probabilities for for.body.preheader
Computing probabilities for entry
set edge entry -> 1 successor probability to 0x50000000 / 0x80000000 = 62.50%
set edge entry -> 0 successor probability to 0x30000000 / 0x80000000 = 37.50%



=== matclr

Lowering formal arguments
Number of args present: 2
Arg 0 assigned to reg 70
Arg 1 assigned to reg 71
Initial selection DAG: BB#0 'matclr:entry'
SelectionDAG has 15 nodes:
  t0: ch = EntryToken
  t2: i32,ch = CopyFromReg t0, Register:i32 %vreg5
  t4: i32,ch = CopyFromReg t0, Register:i32 %vreg6
  t5: i32 = mul t4, t4
      t7: ch = CopyToReg t0, Register:i32 %vreg0, t5
      t10: i1 = setcc t5, Constant:i32<0>, seteq:ch
    t12: ch = brcond t7, t10, BasicBlock:ch<for.end 0x4638428>
  t14: ch = br t12, BasicBlock:ch<for.body.preheader 0x4638208>



Combining: t14: ch = br t12, BasicBlock:ch<for.body.preheader 0x4638208>

Combining: t13: ch = BasicBlock<for.body.preheader 0x4638208>

Combining: t12: ch = brcond t7, t10, BasicBlock:ch<for.end 0x4638428>
 ... into: t15: ch = br_cc t7, seteq:ch, t5, Constant:i32<0>, BasicBlock:ch<for.end 0x4638428>

Combining: t14: ch = br t15, BasicBlock:ch<for.body.preheader 0x4638208>

Combining: t15: ch = br_cc t7, seteq:ch, t5, Constant:i32<0>, BasicBlock:ch<for.end 0x4638428>

Combining: t11: ch = BasicBlock<for.end 0x4638428>

Combining: t9: ch = seteq

Combining: t8: i32 = Constant<0>

Combining: t7: ch = CopyToReg t0, Register:i32 %vreg0, t5

Combining: t6: i32 = Register %vreg0

Combining: t5: i32 = mul t4, t4

Combining: t4: i32,ch = CopyFromReg t0, Register:i32 %vreg6

Combining: t3: i32 = Register %vreg6

Combining: t0: ch = EntryToken
Optimized lowered selection DAG: BB#0 'matclr:entry'
SelectionDAG has 12 nodes:
  t0: ch = EntryToken
  t4: i32,ch = CopyFromReg t0, Register:i32 %vreg6
  t5: i32 = mul t4, t4
      t7: ch = CopyToReg t0, Register:i32 %vreg0, t5
    t15: ch = br_cc t7, seteq:ch, t5, Constant:i32<0>, BasicBlock:ch<for.end 0x4638428>
  t14: ch = br t15, BasicBlock:ch<for.body.preheader 0x4638208>


Legally typed node: t13: ch = BasicBlock<for.body.preheader 0x4638208>

Legally typed node: t11: ch = BasicBlock<for.end 0x4638428>

Legally typed node: t9: ch = seteq

Legally typed node: t8: i32 = Constant<0>

Legally typed node: t6: i32 = Register %vreg0

Legally typed node: t3: i32 = Register %vreg6

Legally typed node: t0: ch = EntryToken

Legally typed node: t4: i32,ch = CopyFromReg t0, Register:i32 %vreg6

Legally typed node: t5: i32 = mul t4, t4

Legally typed node: t7: ch = CopyToReg t0, Register:i32 %vreg0, t5

Legally typed node: t15: ch = br_cc t7, seteq:ch, t5, Constant:i32<0>, BasicBlock:ch<for.end 0x4638428>

Legally typed node: t14: ch = br t15, BasicBlock:ch<for.body.preheader 0x4638208>

Legally typed node: t65535: ch = handlenode t14

Type-legalized selection DAG: BB#0 'matclr:entry'
SelectionDAG has 12 nodes:
  t0: ch = EntryToken
  t4: i32,ch = CopyFromReg t0, Register:i32 %vreg6
  t5: i32 = mul t4, t4
      t7: ch = CopyToReg t0, Register:i32 %vreg0, t5
    t15: ch = br_cc t7, seteq:ch, t5, Constant:i32<0>, BasicBlock:ch<for.end 0x4638428>
  t14: ch = br t15, BasicBlock:ch<for.body.preheader 0x4638208>



Legalizing: t14: ch = br t15, BasicBlock:ch<for.body.preheader 0x4638208>

Legalizing: t15: ch = br_cc t7, seteq:ch, t5, Constant:i32<0>, BasicBlock:ch<for.end 0x4638428>
 ... replacing: t15: ch = br_cc t7, seteq:ch, t5, Constant:i32<0>, BasicBlock:ch<for.end 0x4638428>
     with:      t17: ch,glue = EpiphanyISD::BRCC t7, BasicBlock:ch<for.end 0x4638428>, Constant:i32<0>, t16:1

Legalizing: t7: ch = CopyToReg t0, Register:i32 %vreg0, t5

Legalizing: t5: i32 = mul t4, t4

Legalizing: t4: i32,ch = CopyFromReg t0, Register:i32 %vreg6

Legalizing: t13: ch = BasicBlock<for.body.preheader 0x4638208>

Legalizing: t11: ch = BasicBlock<for.end 0x4638428>

Legalizing: t8: i32 = Constant<0>

Legalizing: t6: i32 = Register %vreg0

Legalizing: t3: i32 = Register %vreg6

Legalizing: t0: ch = EntryToken

Legalizing: t17: ch,glue = EpiphanyISD::BRCC t7, BasicBlock:ch<for.end 0x4638428>, Constant:i32<0>, t16:1

Legalizing: t16: i32,i32 = EpiphanyISD::CMP t5, Constant:i32<0>
Legalized selection DAG: BB#0 'matclr:entry'
SelectionDAG has 12 nodes:
  t0: ch = EntryToken
  t4: i32,ch = CopyFromReg t0, Register:i32 %vreg6
  t5: i32 = mul t4, t4
      t7: ch = CopyToReg t0, Register:i32 %vreg0, t5
      t16: i32,i32 = EpiphanyISD::CMP t5, Constant:i32<0>
    t17: ch,glue = EpiphanyISD::BRCC t7, BasicBlock:ch<for.end 0x4638428>, Constant:i32<0>, t16:1
  t14: ch = br t17, BasicBlock:ch<for.body.preheader 0x4638208>



Legalizing: t17: ch,glue = EpiphanyISD::BRCC t7, BasicBlock:ch<for.end 0x4638428>, Constant:i32<0>, t16:1

Combining: t17: ch,glue = EpiphanyISD::BRCC t7, BasicBlock:ch<for.end 0x4638428>, Constant:i32<0>, t16:1

Legalizing: t16: i32,i32 = EpiphanyISD::CMP t5, Constant:i32<0>

Combining: t16: i32,i32 = EpiphanyISD::CMP t5, Constant:i32<0>

Legalizing: t14: ch = br t17, BasicBlock:ch<for.body.preheader 0x4638208>

Combining: t14: ch = br t17, BasicBlock:ch<for.body.preheader 0x4638208>

Legalizing: t7: ch = CopyToReg t0, Register:i32 %vreg0, t5

Combining: t7: ch = CopyToReg t0, Register:i32 %vreg0, t5

Legalizing: t5: i32 = mul t4, t4

Combining: t5: i32 = mul t4, t4

Legalizing: t4: i32,ch = CopyFromReg t0, Register:i32 %vreg6

Combining: t4: i32,ch = CopyFromReg t0, Register:i32 %vreg6

Legalizing: t13: ch = BasicBlock<for.body.preheader 0x4638208>

Combining: t13: ch = BasicBlock<for.body.preheader 0x4638208>

Legalizing: t11: ch = BasicBlock<for.end 0x4638428>

Combining: t11: ch = BasicBlock<for.end 0x4638428>

Legalizing: t8: i32 = Constant<0>

Combining: t8: i32 = Constant<0>

Legalizing: t6: i32 = Register %vreg0

Combining: t6: i32 = Register %vreg0

Legalizing: t3: i32 = Register %vreg6

Combining: t3: i32 = Register %vreg6

Legalizing: t0: ch = EntryToken

Combining: t0: ch = EntryToken
Optimized legalized selection DAG: BB#0 'matclr:entry'
SelectionDAG has 12 nodes:
  t0: ch = EntryToken
  t4: i32,ch = CopyFromReg t0, Register:i32 %vreg6
  t5: i32 = mul t4, t4
      t7: ch = CopyToReg t0, Register:i32 %vreg0, t5
      t16: i32,i32 = EpiphanyISD::CMP t5, Constant:i32<0>
    t17: ch,glue = EpiphanyISD::BRCC t7, BasicBlock:ch<for.end 0x4638428>, Constant:i32<0>, t16:1
  t14: ch = br t17, BasicBlock:ch<for.body.preheader 0x4638208>


===== Instruction selection begins: BB#0 'entry'
Selecting: t14: ch = br t17, BasicBlock:ch<for.body.preheader 0x4638208>

ISEL: Starting pattern match on root node: t14: ch = br t17, BasicBlock:ch<for.body.preheader 0x4638208>

  Morphed node: t14: ch = BNONE32 BasicBlock:ch<for.body.preheader 0x4638208>, t17

ISEL: Match complete!
Selecting: t17: ch,glue = EpiphanyISD::BRCC t7, BasicBlock:ch<for.end 0x4638428>, Constant:i32<0>, t16:1

ISEL: Starting pattern match on root node: t17: ch,glue = EpiphanyISD::BRCC t7, BasicBlock:ch<for.end 0x4638428>, Constant:i32<0>, t16:1

  Initial Opcode index to 2902
  Morphed node: t17: ch = BCC BasicBlock:ch<for.end 0x4638428>, TargetConstant:i32<0>, t20, t20:1

ISEL: Match complete!
Selecting: t7: ch = CopyToReg t0, Register:i32 %vreg0, t5

Selecting: t16: i32,i32 = EpiphanyISD::CMP t5, Constant:i32<0>

ISEL: Starting pattern match on root node: t16: i32,i32 = EpiphanyISD::CMP t5, Constant:i32<0>

  Initial Opcode index to 1952
  Morphed node: t16: i32,i32,glue = CMPri_r32 t5, TargetConstant:i32<0>

ISEL: Match complete!
Selecting: t5: i32 = mul t4, t4

ISEL: Starting pattern match on root node: t5: i32 = mul t4, t4

  Initial Opcode index to 2977
  Match failed at index 2981
  Continuing at 3019
  Match failed at index 3021
  Continuing at 3061
  Match failed at index 3064
  Continuing at 3102
  Match failed at index 3104
  Continuing at 3144
  TypeSwitch[i32] from 3147 to 3150
  Morphed node: t5: i32,i32 = IMULrr_r32 t4, t4

ISEL: Match complete!
Selecting: t4: i32,ch = CopyFromReg t0, Register:i32 %vreg6

Selecting: t13: ch = BasicBlock<for.body.preheader 0x4638208>

Selecting: t11: ch = BasicBlock<for.end 0x4638428>

Selecting: t6: i32 = Register %vreg0

Selecting: t3: i32 = Register %vreg6

Selecting: t0: ch = EntryToken

===== Instruction selection ends:
Selected selection DAG: BB#0 'matclr:entry'
SelectionDAG has 14 nodes:
  t0: ch = EntryToken
  t4: i32,ch = CopyFromReg t0, Register:i32 %vreg6
  t5: i32,i32 = IMULrr_r32 t4, t4
    t7: ch = CopyToReg t0, Register:i32 %vreg0, t5
    t16: i32,i32,glue = CMPri_r32 t5, TargetConstant:i32<0>
  t20: ch,glue = CopyToReg t7, Register:i32 %STATUS, t16:1
    t17: ch = BCC BasicBlock:ch<for.end 0x4638428>, TargetConstant:i32<0>, t20, t20:1
  t14: ch = BNONE32 BasicBlock:ch<for.body.preheader 0x4638208>, t17


********** List Scheduling BB#0 'entry' **********
SU(0): t14: ch = BNONE32 BasicBlock:ch<for.body.preheader 0x4638208>, t17

  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 8
  Depth              : 6
  Height             : 0
  Predecessors:
   ord  SU(1): Latency=1
SU(1): t17: ch = BCC BasicBlock:ch<for.end 0x4638428>, TargetConstant:i32<0>, t20, t20:1

    t20: ch,glue = CopyToReg t7, Register:i32 %STATUS, t16:1

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 8
  Depth              : 5
  Height             : 1
  Predecessors:
   ord  SU(5): Latency=1
   data SU(2): Latency=3 Reg=%STATUS
  Successors:
   ord  SU(0): Latency=1
SU(2): t16: i32,i32,glue = CMPri_r32 t5, TargetConstant:i32<0>

  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 5
  Depth              : 2
  Height             : 4
  Predecessors:
   data SU(3): Latency=2
  Successors:
   data SU(1): Latency=3 Reg=%STATUS
SU(3): t5: i32,i32 = IMULrr_r32 t4, t4

  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 1
  Latency            : 5
  Depth              : 0
  Height             : 6
  Predecessors:
   data SU(4): Latency=0
  Successors:
   data SU(2): Latency=2
   data SU(5): Latency=3
SU(4): t4: i32,ch = CopyFromReg t0, Register:i32 %vreg6

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 0
  Depth              : 0
  Height             : 6
  Successors:
   data SU(3): Latency=0
SU(5): t7: ch = CopyToReg t0, Register:i32 %vreg0, t5

  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 3
  Height             : 2
  Predecessors:
   data SU(3): Latency=3
  Successors:
   ord  SU(1): Latency=1

Examining Available:
Height 0: SU(0): t14: ch = BNONE32 BasicBlock:ch<for.body.preheader 0x4638208>, t17


*** Scheduling [0]: SU(0): t14: ch = BNONE32 BasicBlock:ch<for.body.preheader 0x4638208>, t17


Examining Available:
Height 1: SU(1): t17: ch = BCC BasicBlock:ch<for.end 0x4638428>, TargetConstant:i32<0>, t20, t20:1

    t20: ch,glue = CopyToReg t7, Register:i32 %STATUS, t16:1


*** Scheduling [1]: SU(1): t17: ch = BCC BasicBlock:ch<for.end 0x4638428>, TargetConstant:i32<0>, t20, t20:1

    t20: ch,glue = CopyToReg t7, Register:i32 %STATUS, t16:1


Examining Available:
  SU (5)  has no physreg SU(2)  defines a physreg
Height 4: SU(2): t16: i32,i32,glue = CMPri_r32 t5, TargetConstant:i32<0>

Height 2: SU(5): t7: ch = CopyToReg t0, Register:i32 %vreg0, t5

  SU (5)  has no physreg SU(2)  defines a physreg

*** Scheduling [4]: SU(2): t16: i32,i32,glue = CMPri_r32 t5, TargetConstant:i32<0>

FPR64_with_isub_lo_in_FPR32: 1 / 26

Examining Available:
Height 2: SU(5): t7: ch = CopyToReg t0, Register:i32 %vreg0, t5


*** Scheduling [5]: SU(5): t7: ch = CopyToReg t0, Register:i32 %vreg0, t5

FPR64_with_isub_lo_in_FPR32: 1 / 26

Examining Available:
Height 8: SU(3): t5: i32,i32 = IMULrr_r32 t4, t4


*** Scheduling [8]: SU(3): t5: i32,i32 = IMULrr_r32 t4, t4

FPR64_with_isub_lo_in_FPR32: 1 / 26

Examining Available:
Height 8: SU(4): t4: i32,ch = CopyFromReg t0, Register:i32 %vreg6


*** Scheduling [9]: SU(4): t4: i32,ch = CopyFromReg t0, Register:i32 %vreg6

*** Final schedule ***
SU(4): t4: i32,ch = CopyFromReg t0, Register:i32 %vreg6

SU(3): t5: i32,i32 = IMULrr_r32 t4, t4

SU(5): t7: ch = CopyToReg t0, Register:i32 %vreg0, t5

SU(2): t16: i32,i32,glue = CMPri_r32 t5, TargetConstant:i32<0>

SU(1): t17: ch = BCC BasicBlock:ch<for.end 0x4638428>, TargetConstant:i32<0>, t20, t20:1

    t20: ch,glue = CopyToReg t7, Register:i32 %STATUS, t16:1

SU(0): t14: ch = BNONE32 BasicBlock:ch<for.body.preheader 0x4638208>, t17


Total amount of phi nodes to update: 0
Initial selection DAG: BB#1 'matclr:for.body.preheader'
SelectionDAG has 4 nodes:
    t0: ch = EntryToken
  t3: ch = CopyToReg t0, Register:i32 %vreg8, Constant:i32<0>



Combining: t3: ch = CopyToReg t0, Register:i32 %vreg8, Constant:i32<0>

Combining: t2: i32 = Register %vreg8

Combining: t1: i32 = Constant<0>

Combining: t0: ch = EntryToken
Optimized lowered selection DAG: BB#1 'matclr:for.body.preheader'
SelectionDAG has 4 nodes:
    t0: ch = EntryToken
  t3: ch = CopyToReg t0, Register:i32 %vreg8, Constant:i32<0>


Legally typed node: t2: i32 = Register %vreg8

Legally typed node: t1: i32 = Constant<0>

Legally typed node: t0: ch = EntryToken

Legally typed node: t3: ch = CopyToReg t0, Register:i32 %vreg8, Constant:i32<0>

Legally typed node: t65535: ch = handlenode t3

Type-legalized selection DAG: BB#1 'matclr:for.body.preheader'
SelectionDAG has 4 nodes:
    t0: ch = EntryToken
  t3: ch = CopyToReg t0, Register:i32 %vreg8, Constant:i32<0>



Legalizing: t3: ch = CopyToReg t0, Register:i32 %vreg8, Constant:i32<0>

Legalizing: t2: i32 = Register %vreg8

Legalizing: t1: i32 = Constant<0>

Legalizing: t0: ch = EntryToken
Legalized selection DAG: BB#1 'matclr:for.body.preheader'
SelectionDAG has 4 nodes:
    t0: ch = EntryToken
  t3: ch = CopyToReg t0, Register:i32 %vreg8, Constant:i32<0>



Legalizing: t3: ch = CopyToReg t0, Register:i32 %vreg8, Constant:i32<0>

Combining: t3: ch = CopyToReg t0, Register:i32 %vreg8, Constant:i32<0>

Legalizing: t2: i32 = Register %vreg8

Combining: t2: i32 = Register %vreg8

Legalizing: t1: i32 = Constant<0>

Combining: t1: i32 = Constant<0>

Legalizing: t0: ch = EntryToken

Combining: t0: ch = EntryToken
Optimized legalized selection DAG: BB#1 'matclr:for.body.preheader'
SelectionDAG has 4 nodes:
    t0: ch = EntryToken
  t3: ch = CopyToReg t0, Register:i32 %vreg8, Constant:i32<0>


===== Instruction selection begins: BB#1 'for.body.preheader'
Selecting: t3: ch = CopyToReg t0, Register:i32 %vreg8, Constant:i32<0>

Selecting: t2: i32 = Register %vreg8

Selecting: t1: i32 = Constant<0>

ISEL: Starting pattern match on root node: t1: i32 = Constant<0>

  Initial Opcode index to 3685
  TypeSwitch[i32] from 3686 to 3689
  Morphed node: t1: i32 = MOVi32ri TargetConstant:i32<0>

ISEL: Match complete!
Selecting: t0: ch = EntryToken

===== Instruction selection ends:
Selected selection DAG: BB#1 'matclr:for.body.preheader'
SelectionDAG has 5 nodes:
    t0: ch = EntryToken
    t1: i32 = MOVi32ri TargetConstant:i32<0>
  t3: ch = CopyToReg t0, Register:i32 %vreg8, t1


********** List Scheduling BB#1 'for.body.preheader' **********
SU(0): t3: ch = CopyToReg t0, Register:i32 %vreg8, t1

  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 3
  Height             : 0
  Predecessors:
   data SU(1): Latency=3
SU(1): t1: i32 = MOVi32ri TargetConstant:i32<0>

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 5
  Depth              : 0
  Height             : 3
  Successors:
   data SU(0): Latency=3

Examining Available:
Height 0: SU(0): t3: ch = CopyToReg t0, Register:i32 %vreg8, t1


*** Scheduling [0]: SU(0): t3: ch = CopyToReg t0, Register:i32 %vreg8, t1

FPR64_with_isub_lo_in_FPR32: 1 / 26

Examining Available:
Height 3: SU(1): t1: i32 = MOVi32ri TargetConstant:i32<0>


*** Scheduling [3]: SU(1): t1: i32 = MOVi32ri TargetConstant:i32<0>

*** Final schedule ***
SU(1): t1: i32 = MOVi32ri TargetConstant:i32<0>

SU(0): t3: ch = CopyToReg t0, Register:i32 %vreg8, t1


Total amount of phi nodes to update: 2
Node 0 : (0x4638368, 2147483653)
Node 1 : (0x46383c8, 2147483656)
Initial selection DAG: BB#2 'matclr:for.body'
SelectionDAG has 27 nodes:
  t0: ch = EntryToken
  t3: i32,ch = CopyFromReg t0, Register:i32 %vreg1
  t4: i32 = Constant<0>
    t8: i32,ch = CopyFromReg t0, Register:i32 %vreg2
  t10: i32 = add t8, Constant:i32<1>
  t19: ch = ValueType:i32
        t12: ch = CopyToReg t0, Register:i32 %vreg3, t10
          t14: i32 = add t3, Constant:i32<4>
        t16: ch = CopyToReg t0, Register:i32 %vreg4, t14
        t6: ch = store<Volatile ST4[%lsr.iv](tbaa=<0x46205c8>)> t0, ConstantFP:f32<0.000000e+00>, t3, undef:i32
      t23: ch = TokenFactor t12, t16, t6
        t18: i32,ch = CopyFromReg t0, Register:i32 %vreg0
      t21: i1 = setcc t10, t18, setlt:ch
    t24: ch = brcond t23, t21, BasicBlock:ch<for.body 0x46382b8>
  t26: ch = br t24, BasicBlock:ch<for.end 0x4638428>



Combining: t26: ch = br t24, BasicBlock:ch<for.end 0x4638428>

Combining: t25: ch = BasicBlock<for.end 0x4638428>

Combining: t24: ch = brcond t23, t21, BasicBlock:ch<for.body 0x46382b8>
 ... into: t27: ch = br_cc t23, setlt:ch, t10, t18, BasicBlock:ch<for.body 0x46382b8>

Combining: t26: ch = br t27, BasicBlock:ch<for.end 0x4638428>

Combining: t27: ch = br_cc t23, setlt:ch, t10, t18, BasicBlock:ch<for.body 0x46382b8>

Combining: t23: ch = TokenFactor t12, t16, t6

Combining: t22: ch = BasicBlock<for.body 0x46382b8>

Combining: t20: ch = setlt

Combining: t18: i32,ch = CopyFromReg t0, Register:i32 %vreg0

Combining: t17: i32 = Register %vreg0

Combining: t16: ch = CopyToReg t0, Register:i32 %vreg4, t14

Combining: t15: i32 = Register %vreg4

Combining: t14: i32 = add t3, Constant:i32<4>

Combining: t13: i32 = Constant<4>

Combining: t12: ch = CopyToReg t0, Register:i32 %vreg3, t10

Combining: t11: i32 = Register %vreg3

Combining: t10: i32 = add t8, Constant:i32<1>

Combining: t9: i32 = Constant<1>

Combining: t8: i32,ch = CopyFromReg t0, Register:i32 %vreg2

Combining: t7: i32 = Register %vreg2

Combining: t6: ch = store<Volatile ST4[%lsr.iv](tbaa=<0x46205c8>)> t0, ConstantFP:f32<0.000000e+00>, t3, undef:i32
 ... into: t28: ch = store<Volatile ST4[%lsr.iv](tbaa=<0x46205c8>)> t0, Constant:i32<0>, t3, undef:i32

Combining: t23: ch = TokenFactor t12, t16, t28

Combining: t28: ch = store<Volatile ST4[%lsr.iv](tbaa=<0x46205c8>)> t0, Constant:i32<0>, t3, undef:i32

Combining: t5: i32 = undef

Combining: t4: i32 = Constant<0>

Combining: t3: i32,ch = CopyFromReg t0, Register:i32 %vreg1

Combining: t2: i32 = Register %vreg1

Combining: t0: ch = EntryToken
Optimized lowered selection DAG: BB#2 'matclr:for.body'
SelectionDAG has 24 nodes:
  t0: ch = EntryToken
  t3: i32,ch = CopyFromReg t0, Register:i32 %vreg1
    t8: i32,ch = CopyFromReg t0, Register:i32 %vreg2
  t10: i32 = add t8, Constant:i32<1>
        t12: ch = CopyToReg t0, Register:i32 %vreg3, t10
          t14: i32 = add t3, Constant:i32<4>
        t16: ch = CopyToReg t0, Register:i32 %vreg4, t14
        t28: ch = store<Volatile ST4[%lsr.iv](tbaa=<0x46205c8>)> t0, Constant:i32<0>, t3, undef:i32
      t23: ch = TokenFactor t12, t16, t28
      t18: i32,ch = CopyFromReg t0, Register:i32 %vreg0
    t27: ch = br_cc t23, setlt:ch, t10, t18, BasicBlock:ch<for.body 0x46382b8>
  t26: ch = br t27, BasicBlock:ch<for.end 0x4638428>


Legally typed node: t25: ch = BasicBlock<for.end 0x4638428>

Legally typed node: t22: ch = BasicBlock<for.body 0x46382b8>

Legally typed node: t20: ch = setlt

Legally typed node: t17: i32 = Register %vreg0

Legally typed node: t15: i32 = Register %vreg4

Legally typed node: t13: i32 = Constant<4>

Legally typed node: t11: i32 = Register %vreg3

Legally typed node: t9: i32 = Constant<1>

Legally typed node: t7: i32 = Register %vreg2

Legally typed node: t5: i32 = undef

Legally typed node: t4: i32 = Constant<0>

Legally typed node: t2: i32 = Register %vreg1

Legally typed node: t0: ch = EntryToken

Legally typed node: t3: i32,ch = CopyFromReg t0, Register:i32 %vreg1

Legally typed node: t14: i32 = add t3, Constant:i32<4>

Legally typed node: t16: ch = CopyToReg t0, Register:i32 %vreg4, t14

Legally typed node: t28: ch = store<Volatile ST4[%lsr.iv](tbaa=<0x46205c8>)> t0, Constant:i32<0>, t3, undef:i32

Legally typed node: t8: i32,ch = CopyFromReg t0, Register:i32 %vreg2

Legally typed node: t10: i32 = add t8, Constant:i32<1>

Legally typed node: t12: ch = CopyToReg t0, Register:i32 %vreg3, t10

Legally typed node: t23: ch = TokenFactor t12, t16, t28

Legally typed node: t18: i32,ch = CopyFromReg t0, Register:i32 %vreg0

Legally typed node: t27: ch = br_cc t23, setlt:ch, t10, t18, BasicBlock:ch<for.body 0x46382b8>

Legally typed node: t26: ch = br t27, BasicBlock:ch<for.end 0x4638428>

Legally typed node: t65535: ch = handlenode t26

Type-legalized selection DAG: BB#2 'matclr:for.body'
SelectionDAG has 24 nodes:
  t0: ch = EntryToken
  t3: i32,ch = CopyFromReg t0, Register:i32 %vreg1
    t8: i32,ch = CopyFromReg t0, Register:i32 %vreg2
  t10: i32 = add t8, Constant:i32<1>
        t12: ch = CopyToReg t0, Register:i32 %vreg3, t10
          t14: i32 = add t3, Constant:i32<4>
        t16: ch = CopyToReg t0, Register:i32 %vreg4, t14
        t28: ch = store<Volatile ST4[%lsr.iv](tbaa=<0x46205c8>)> t0, Constant:i32<0>, t3, undef:i32
      t23: ch = TokenFactor t12, t16, t28
      t18: i32,ch = CopyFromReg t0, Register:i32 %vreg0
    t27: ch = br_cc t23, setlt:ch, t10, t18, BasicBlock:ch<for.body 0x46382b8>
  t26: ch = br t27, BasicBlock:ch<for.end 0x4638428>



Legalizing: t26: ch = br t27, BasicBlock:ch<for.end 0x4638428>

Legalizing: t27: ch = br_cc t23, setlt:ch, t10, t18, BasicBlock:ch<for.body 0x46382b8>
 ... replacing: t27: ch = br_cc t23, setlt:ch, t10, t18, BasicBlock:ch<for.body 0x46382b8>
     with:      t31: ch,glue = EpiphanyISD::BRCC t23, BasicBlock:ch<for.body 0x46382b8>, Constant:i32<8>, t29:1

Legalizing: t23: ch = TokenFactor t12, t16, t28

Legalizing: t12: ch = CopyToReg t0, Register:i32 %vreg3, t10

Legalizing: t16: ch = CopyToReg t0, Register:i32 %vreg4, t14

Legalizing: t10: i32 = add t8, Constant:i32<1>

Legalizing: t14: i32 = add t3, Constant:i32<4>

Legalizing: t28: ch = store<Volatile ST4[%lsr.iv](tbaa=<0x46205c8>)> t0, Constant:i32<0>, t3, undef:i32

Legalizing: t18: i32,ch = CopyFromReg t0, Register:i32 %vreg0

Legalizing: t8: i32,ch = CopyFromReg t0, Register:i32 %vreg2

Legalizing: t3: i32,ch = CopyFromReg t0, Register:i32 %vreg1

Legalizing: t25: ch = BasicBlock<for.end 0x4638428>

Legalizing: t22: ch = BasicBlock<for.body 0x46382b8>

Legalizing: t17: i32 = Register %vreg0

Legalizing: t15: i32 = Register %vreg4

Legalizing: t13: i32 = Constant<4>

Legalizing: t11: i32 = Register %vreg3

Legalizing: t9: i32 = Constant<1>

Legalizing: t7: i32 = Register %vreg2

Legalizing: t5: i32 = undef

Legalizing: t4: i32 = Constant<0>

Legalizing: t2: i32 = Register %vreg1

Legalizing: t0: ch = EntryToken

Legalizing: t31: ch,glue = EpiphanyISD::BRCC t23, BasicBlock:ch<for.body 0x46382b8>, Constant:i32<8>, t29:1

Legalizing: t30: i32 = Constant<8>

Legalizing: t29: i32,i32 = EpiphanyISD::CMP t10, t18
Legalized selection DAG: BB#2 'matclr:for.body'
SelectionDAG has 25 nodes:
  t0: ch = EntryToken
  t3: i32,ch = CopyFromReg t0, Register:i32 %vreg1
    t8: i32,ch = CopyFromReg t0, Register:i32 %vreg2
  t10: i32 = add t8, Constant:i32<1>
        t12: ch = CopyToReg t0, Register:i32 %vreg3, t10
          t14: i32 = add t3, Constant:i32<4>
        t16: ch = CopyToReg t0, Register:i32 %vreg4, t14
        t28: ch = store<Volatile ST4[%lsr.iv](tbaa=<0x46205c8>)> t0, Constant:i32<0>, t3, undef:i32
      t23: ch = TokenFactor t12, t16, t28
        t18: i32,ch = CopyFromReg t0, Register:i32 %vreg0
      t29: i32,i32 = EpiphanyISD::CMP t10, t18
    t31: ch,glue = EpiphanyISD::BRCC t23, BasicBlock:ch<for.body 0x46382b8>, Constant:i32<8>, t29:1
  t26: ch = br t31, BasicBlock:ch<for.end 0x4638428>



Legalizing: t31: ch,glue = EpiphanyISD::BRCC t23, BasicBlock:ch<for.body 0x46382b8>, Constant:i32<8>, t29:1

Combining: t31: ch,glue = EpiphanyISD::BRCC t23, BasicBlock:ch<for.body 0x46382b8>, Constant:i32<8>, t29:1

Legalizing: t30: i32 = Constant<8>

Combining: t30: i32 = Constant<8>

Legalizing: t29: i32,i32 = EpiphanyISD::CMP t10, t18

Combining: t29: i32,i32 = EpiphanyISD::CMP t10, t18

Legalizing: t26: ch = br t31, BasicBlock:ch<for.end 0x4638428>

Combining: t26: ch = br t31, BasicBlock:ch<for.end 0x4638428>

Legalizing: t23: ch = TokenFactor t12, t16, t28

Combining: t23: ch = TokenFactor t12, t16, t28

Legalizing: t12: ch = CopyToReg t0, Register:i32 %vreg3, t10

Combining: t12: ch = CopyToReg t0, Register:i32 %vreg3, t10

Legalizing: t16: ch = CopyToReg t0, Register:i32 %vreg4, t14

Combining: t16: ch = CopyToReg t0, Register:i32 %vreg4, t14

Legalizing: t10: i32 = add t8, Constant:i32<1>

Combining: t10: i32 = add t8, Constant:i32<1>

Legalizing: t14: i32 = add t3, Constant:i32<4>

Combining: t14: i32 = add t3, Constant:i32<4>

Legalizing: t28: ch = store<Volatile ST4[%lsr.iv](tbaa=<0x46205c8>)> t0, Constant:i32<0>, t3, undef:i32

Combining: t28: ch = store<Volatile ST4[%lsr.iv](tbaa=<0x46205c8>)> t0, Constant:i32<0>, t3, undef:i32

Legalizing: t18: i32,ch = CopyFromReg t0, Register:i32 %vreg0

Combining: t18: i32,ch = CopyFromReg t0, Register:i32 %vreg0

Legalizing: t8: i32,ch = CopyFromReg t0, Register:i32 %vreg2

Combining: t8: i32,ch = CopyFromReg t0, Register:i32 %vreg2

Legalizing: t3: i32,ch = CopyFromReg t0, Register:i32 %vreg1

Combining: t3: i32,ch = CopyFromReg t0, Register:i32 %vreg1

Legalizing: t25: ch = BasicBlock<for.end 0x4638428>

Combining: t25: ch = BasicBlock<for.end 0x4638428>

Legalizing: t22: ch = BasicBlock<for.body 0x46382b8>

Combining: t22: ch = BasicBlock<for.body 0x46382b8>

Legalizing: t17: i32 = Register %vreg0

Combining: t17: i32 = Register %vreg0

Legalizing: t15: i32 = Register %vreg4

Combining: t15: i32 = Register %vreg4

Legalizing: t13: i32 = Constant<4>

Combining: t13: i32 = Constant<4>

Legalizing: t11: i32 = Register %vreg3

Combining: t11: i32 = Register %vreg3

Legalizing: t9: i32 = Constant<1>

Combining: t9: i32 = Constant<1>

Legalizing: t7: i32 = Register %vreg2

Combining: t7: i32 = Register %vreg2

Legalizing: t5: i32 = undef

Combining: t5: i32 = undef

Legalizing: t4: i32 = Constant<0>

Combining: t4: i32 = Constant<0>

Legalizing: t2: i32 = Register %vreg1

Combining: t2: i32 = Register %vreg1

Legalizing: t0: ch = EntryToken

Combining: t0: ch = EntryToken
Optimized legalized selection DAG: BB#2 'matclr:for.body'
SelectionDAG has 25 nodes:
  t0: ch = EntryToken
  t3: i32,ch = CopyFromReg t0, Register:i32 %vreg1
    t8: i32,ch = CopyFromReg t0, Register:i32 %vreg2
  t10: i32 = add t8, Constant:i32<1>
        t12: ch = CopyToReg t0, Register:i32 %vreg3, t10
          t14: i32 = add t3, Constant:i32<4>
        t16: ch = CopyToReg t0, Register:i32 %vreg4, t14
        t28: ch = store<Volatile ST4[%lsr.iv](tbaa=<0x46205c8>)> t0, Constant:i32<0>, t3, undef:i32
      t23: ch = TokenFactor t12, t16, t28
        t18: i32,ch = CopyFromReg t0, Register:i32 %vreg0
      t29: i32,i32 = EpiphanyISD::CMP t10, t18
    t31: ch,glue = EpiphanyISD::BRCC t23, BasicBlock:ch<for.body 0x46382b8>, Constant:i32<8>, t29:1
  t26: ch = br t31, BasicBlock:ch<for.end 0x4638428>


===== Instruction selection begins: BB#2 'for.body'
Selecting: t26: ch = br t31, BasicBlock:ch<for.end 0x4638428>

ISEL: Starting pattern match on root node: t26: ch = br t31, BasicBlock:ch<for.end 0x4638428>

  Initial Opcode index to 4515
  Morphed node: t26: ch = BNONE32 BasicBlock:ch<for.end 0x4638428>, t31

ISEL: Match complete!
Selecting: t31: ch,glue = EpiphanyISD::BRCC t23, BasicBlock:ch<for.body 0x46382b8>, Constant:i32<8>, t29:1

ISEL: Starting pattern match on root node: t31: ch,glue = EpiphanyISD::BRCC t23, BasicBlock:ch<for.body 0x46382b8>, Constant:i32<8>, t29:1

  Initial Opcode index to 2902
  Morphed node: t31: ch = BCC BasicBlock:ch<for.body 0x46382b8>, TargetConstant:i32<8>, t34, t34:1

ISEL: Match complete!
Selecting: t23: ch = TokenFactor t12, t16, t28

Selecting: t12: ch = CopyToReg t0, Register:i32 %vreg3, t10

Selecting: t29: i32,i32 = EpiphanyISD::CMP t10, t18

ISEL: Starting pattern match on root node: t29: i32,i32 = EpiphanyISD::CMP t10, t18

  Initial Opcode index to 1952
  Match failed at index 1962
  Continuing at 2003
  Morphed node: t29: i32,i32,glue = CMPrr_r32 t10, t18

ISEL: Match complete!
Selecting: t16: ch = CopyToReg t0, Register:i32 %vreg4, t14

Selecting: t10: i32 = add t8, Constant:i32<1>

ISEL: Starting pattern match on root node: t10: i32 = add t8, Constant:i32<1>

  Initial Opcode index to 1567
  Morphed node: t10: i32,i32 = ADDri_r32 t8, TargetConstant:i32<1>

ISEL: Match complete!
Selecting: t14: i32 = add t3, Constant:i32<4>

ISEL: Starting pattern match on root node: t14: i32 = add t3, Constant:i32<4>

  Initial Opcode index to 1567
  Morphed node: t14: i32,i32 = ADDri_r32 t3, TargetConstant:i32<4>

ISEL: Match complete!
Selecting: t28: ch = store<Volatile ST4[%lsr.iv](tbaa=<0x46205c8>)> t0, Constant:i32<0>, t3, undef:i32

ISEL: Starting pattern match on root node: t28: ch = store<Volatile ST4[%lsr.iv](tbaa=<0x46205c8>)> t0, Constant:i32<0>, t3, undef:i32

  Initial Opcode index to 842
  Skipped scope entry (due to false predicate) at index 857, continuing at 891
  Morphed node: t28: ch = STRi32_r32<Mem:Volatile ST4[%lsr.iv](tbaa=<0x46205c8>)> Constant:i32<0>, t3, TargetConstant:i32<0>, t0

ISEL: Match complete!
Selecting: t18: i32,ch = CopyFromReg t0, Register:i32 %vreg0

Selecting: t8: i32,ch = CopyFromReg t0, Register:i32 %vreg2

Selecting: t3: i32,ch = CopyFromReg t0, Register:i32 %vreg1

Selecting: t25: ch = BasicBlock<for.end 0x4638428>

Selecting: t22: ch = BasicBlock<for.body 0x46382b8>

Selecting: t17: i32 = Register %vreg0

Selecting: t15: i32 = Register %vreg4

Selecting: t11: i32 = Register %vreg3

Selecting: t7: i32 = Register %vreg2

Selecting: t4: i32 = Constant<0>

ISEL: Starting pattern match on root node: t4: i32 = Constant<0>

  Initial Opcode index to 3685
  TypeSwitch[i32] from 3686 to 3689
  Morphed node: t4: i32 = MOVi32ri TargetConstant:i32<0>

ISEL: Match complete!
Selecting: t2: i32 = Register %vreg1

Selecting: t0: ch = EntryToken

===== Instruction selection ends:
Selected selection DAG: BB#2 'matclr:for.body'
SelectionDAG has 27 nodes:
  t0: ch = EntryToken
  t3: i32,ch = CopyFromReg t0, Register:i32 %vreg1
    t8: i32,ch = CopyFromReg t0, Register:i32 %vreg2
  t10: i32,i32 = ADDri_r32 t8, TargetConstant:i32<1>
      t12: ch = CopyToReg t0, Register:i32 %vreg3, t10
        t14: i32,i32 = ADDri_r32 t3, TargetConstant:i32<4>
      t16: ch = CopyToReg t0, Register:i32 %vreg4, t14
        t4: i32 = MOVi32ri TargetConstant:i32<0>
      t28: ch = STRi32_r32<Mem:Volatile ST4[%lsr.iv](tbaa=<0x46205c8>)> t4, t3, TargetConstant:i32<0>, t0
    t23: ch = TokenFactor t12, t16, t28
      t18: i32,ch = CopyFromReg t0, Register:i32 %vreg0
    t29: i32,i32,glue = CMPrr_r32 t10, t18
  t34: ch,glue = CopyToReg t23, Register:i32 %STATUS, t29:1
    t31: ch = BCC BasicBlock:ch<for.body 0x46382b8>, TargetConstant:i32<8>, t34, t34:1
  t26: ch = BNONE32 BasicBlock:ch<for.end 0x4638428>, t31


********** List Scheduling BB#2 'for.body' **********
SU(0): t26: ch = BNONE32 BasicBlock:ch<for.end 0x4638428>, t31

  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 8
  Depth              : 6
  Height             : 0
  Predecessors:
   ord  SU(1): Latency=1
SU(1): t31: ch = BCC BasicBlock:ch<for.body 0x46382b8>, TargetConstant:i32<8>, t34, t34:1

    t34: ch,glue = CopyToReg t23, Register:i32 %STATUS, t29:1

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 8
  Depth              : 5
  Height             : 1
  Predecessors:
   ord  SU(6): Latency=0
   data SU(2): Latency=3 Reg=%STATUS
  Successors:
   ord  SU(0): Latency=1
SU(2): t29: i32,i32,glue = CMPrr_r32 t10, t18

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 5
  Depth              : 2
  Height             : 4
  Predecessors:
   data SU(4): Latency=2
   data SU(3): Latency=0
  Successors:
   data SU(1): Latency=3 Reg=%STATUS
SU(3): t18: i32,ch = CopyFromReg t0, Register:i32 %vreg0

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 0
  Depth              : 0
  Height             : 4
  Successors:
   data SU(2): Latency=0
SU(4): t10: i32,i32 = ADDri_r32 t8, TargetConstant:i32<1>

  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 1
  Latency            : 5
  Depth              : 0
  Height             : 6
  Predecessors:
   data SU(5): Latency=0
  Successors:
   data SU(2): Latency=2
   data SU(12): Latency=3
SU(5): t8: i32,ch = CopyFromReg t0, Register:i32 %vreg2

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 0
  Depth              : 0
  Height             : 6
  Successors:
   data SU(4): Latency=0
SU(6): t23: ch = TokenFactor t12, t16, t28

  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 4
  Height             : 1
  Predecessors:
   ord  SU(12): Latency=1
   ord  SU(10): Latency=1
   ord  SU(7): Latency=1
  Successors:
   ord  SU(1): Latency=0
SU(7): t28: ch = STRi32_r32<Mem:Volatile ST4[%lsr.iv](tbaa=<0x46205c8>)> t4, t3, TargetConstant:i32<0>, t0

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 5
  Depth              : 1
  Height             : 2
  Predecessors:
   data SU(9): Latency=1
   data SU(8): Latency=0
  Successors:
   ord  SU(6): Latency=1
SU(8): t3: i32,ch = CopyFromReg t0, Register:i32 %vreg1

  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 1
  Latency            : 0
  Depth              : 0
  Height             : 5
  Successors:
   data SU(7): Latency=0
   data SU(11): Latency=0
SU(9): t4: i32 = MOVi32ri TargetConstant:i32<0>

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 5
  Depth              : 0
  Height             : 3
  Successors:
   data SU(7): Latency=1
SU(10): t16: ch = CopyToReg t0, Register:i32 %vreg4, t14

  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 3
  Height             : 2
  Predecessors:
   data SU(11): Latency=3
  Successors:
   ord  SU(6): Latency=1
SU(11): t14: i32,i32 = ADDri_r32 t3, TargetConstant:i32<4>

  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 5
  Depth              : 0
  Height             : 5
  Predecessors:
   data SU(8): Latency=0
  Successors:
   data SU(10): Latency=3
SU(12): t12: ch = CopyToReg t0, Register:i32 %vreg3, t10

  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 3
  Height             : 2
  Predecessors:
   data SU(4): Latency=3
  Successors:
   ord  SU(6): Latency=1
VRegCycle: SU(11)

Examining Available:
Height 0: SU(0): t26: ch = BNONE32 BasicBlock:ch<for.end 0x4638428>, t31


*** Scheduling [0]: SU(0): t26: ch = BNONE32 BasicBlock:ch<for.end 0x4638428>, t31


Examining Available:
Height 1: SU(1): t31: ch = BCC BasicBlock:ch<for.body 0x46382b8>, TargetConstant:i32<8>, t34, t34:1

    t34: ch,glue = CopyToReg t23, Register:i32 %STATUS, t29:1


*** Scheduling [1]: SU(1): t31: ch = BCC BasicBlock:ch<for.body 0x46382b8>, TargetConstant:i32<8>, t34, t34:1

    t34: ch,glue = CopyToReg t23, Register:i32 %STATUS, t29:1


Examining Available:
Height 1: SU(6): t23: ch = TokenFactor t12, t16, t28

Height 4: SU(2): t29: i32,i32,glue = CMPrr_r32 t10, t18


*** Scheduling [2]: SU(6): t23: ch = TokenFactor t12, t16, t28


Examining Available:
  SU (2)  defines a physreg SU(12)  has no physreg
  SU (2)  defines a physreg SU(10)  has no physreg
  SU (2)  defines a physreg SU(7)  has no physreg
Height 4: SU(2): t29: i32,i32,glue = CMPrr_r32 t10, t18

Height 3: SU(12): t12: ch = CopyToReg t0, Register:i32 %vreg3, t10

Height 3: SU(10): t16: ch = CopyToReg t0, Register:i32 %vreg4, t14

Height 3: SU(7): t28: ch = STRi32_r32<Mem:Volatile ST4[%lsr.iv](tbaa=<0x46205c8>)> t4, t3, TargetConstant:i32<0>, t0

  SU (2)  defines a physreg SU(12)  has no physreg
  SU (2)  defines a physreg SU(10)  has no physreg
  SU (2)  defines a physreg SU(7)  has no physreg

*** Scheduling [4]: SU(2): t29: i32,i32,glue = CMPrr_r32 t10, t18

FPR64_with_isub_lo_in_FPR32: 2 / 26

Examining Available:
Height 4: SU(3): t18: i32,ch = CopyFromReg t0, Register:i32 %vreg0

Height 3: SU(12): t12: ch = CopyToReg t0, Register:i32 %vreg3, t10

Height 3: SU(10): t16: ch = CopyToReg t0, Register:i32 %vreg4, t14

Height 3: SU(7): t28: ch = STRi32_r32<Mem:Volatile ST4[%lsr.iv](tbaa=<0x46205c8>)> t4, t3, TargetConstant:i32<0>, t0


*** Scheduling [5]: SU(3): t18: i32,ch = CopyFromReg t0, Register:i32 %vreg0

FPR64_with_isub_lo_in_FPR32: 1 / 26

Examining Available:
Height 3: SU(12): t12: ch = CopyToReg t0, Register:i32 %vreg3, t10

Height 3: SU(10): t16: ch = CopyToReg t0, Register:i32 %vreg4, t14

Height 3: SU(7): t28: ch = STRi32_r32<Mem:Volatile ST4[%lsr.iv](tbaa=<0x46205c8>)> t4, t3, TargetConstant:i32<0>, t0


*** Scheduling [6]: SU(12): t12: ch = CopyToReg t0, Register:i32 %vreg3, t10

FPR64_with_isub_lo_in_FPR32: 1 / 26

Examining Available:
Height 3: SU(10): t16: ch = CopyToReg t0, Register:i32 %vreg4, t14

Height 9: SU(4): t10: i32,i32 = ADDri_r32 t8, TargetConstant:i32<1>

Height 3: SU(7): t28: ch = STRi32_r32<Mem:Volatile ST4[%lsr.iv](tbaa=<0x46205c8>)> t4, t3, TargetConstant:i32<0>, t0


*** Scheduling [7]: SU(10): t16: ch = CopyToReg t0, Register:i32 %vreg4, t14

FPR64_with_isub_lo_in_FPR32: 2 / 26

Examining Available:
Height 9: SU(4): t10: i32,i32 = ADDri_r32 t8, TargetConstant:i32<1>

Height 3: SU(7): t28: ch = STRi32_r32<Mem:Volatile ST4[%lsr.iv](tbaa=<0x46205c8>)> t4, t3, TargetConstant:i32<0>, t0

Height 10: SU(11): t14: i32,i32 = ADDri_r32 t3, TargetConstant:i32<4>


*** Scheduling [9]: SU(4): t10: i32,i32 = ADDri_r32 t8, TargetConstant:i32<1>

FPR64_with_isub_lo_in_FPR32: 2 / 26

Examining Available:
Height 9: SU(5): t8: i32,ch = CopyFromReg t0, Register:i32 %vreg2

Height 3: SU(7): t28: ch = STRi32_r32<Mem:Volatile ST4[%lsr.iv](tbaa=<0x46205c8>)> t4, t3, TargetConstant:i32<0>, t0

Height 10: SU(11): t14: i32,i32 = ADDri_r32 t3, TargetConstant:i32<4>


*** Scheduling [10]: SU(5): t8: i32,ch = CopyFromReg t0, Register:i32 %vreg2

FPR64_with_isub_lo_in_FPR32: 1 / 26

Examining Available:
Height 3: SU(7): t28: ch = STRi32_r32<Mem:Volatile ST4[%lsr.iv](tbaa=<0x46205c8>)> t4, t3, TargetConstant:i32<0>, t0

Height 10: SU(11): t14: i32,i32 = ADDri_r32 t3, TargetConstant:i32<4>


*** Scheduling [11]: SU(7): t28: ch = STRi32_r32<Mem:Volatile ST4[%lsr.iv](tbaa=<0x46205c8>)> t4, t3, TargetConstant:i32<0>, t0

FPR64_with_isub_lo_in_FPR32: 3 / 26

Examining Available:
Height 12: SU(9): t4: i32 = MOVi32ri TargetConstant:i32<0>

Height 10: SU(11): t14: i32,i32 = ADDri_r32 t3, TargetConstant:i32<4>


*** Scheduling [12]: SU(9): t4: i32 = MOVi32ri TargetConstant:i32<0>

FPR64_with_isub_lo_in_FPR32: 2 / 26

Examining Available:
Height 10: SU(11): t14: i32,i32 = ADDri_r32 t3, TargetConstant:i32<4>


*** Scheduling [13]: SU(11): t14: i32,i32 = ADDri_r32 t3, TargetConstant:i32<4>

FPR64_with_isub_lo_in_FPR32: 1 / 26

Examining Available:
Height 13: SU(8): t3: i32,ch = CopyFromReg t0, Register:i32 %vreg1


*** Scheduling [14]: SU(8): t3: i32,ch = CopyFromReg t0, Register:i32 %vreg1

*** Final schedule ***
SU(8): t3: i32,ch = CopyFromReg t0, Register:i32 %vreg1

SU(11): t14: i32,i32 = ADDri_r32 t3, TargetConstant:i32<4>

SU(9): t4: i32 = MOVi32ri TargetConstant:i32<0>

SU(7): t28: ch = STRi32_r32<Mem:Volatile ST4[%lsr.iv](tbaa=<0x46205c8>)> t4, t3, TargetConstant:i32<0>, t0

SU(5): t8: i32,ch = CopyFromReg t0, Register:i32 %vreg2

SU(4): t10: i32,i32 = ADDri_r32 t8, TargetConstant:i32<1>

SU(10): t16: ch = CopyToReg t0, Register:i32 %vreg4, t14

SU(12): t12: ch = CopyToReg t0, Register:i32 %vreg3, t10

SU(3): t18: i32,ch = CopyFromReg t0, Register:i32 %vreg0

SU(2): t29: i32,i32,glue = CMPrr_r32 t10, t18

SU(6): t23: ch = TokenFactor t12, t16, t28

SU(1): t31: ch = BCC BasicBlock:ch<for.body 0x46382b8>, TargetConstant:i32<8>, t34, t34:1

    t34: ch,glue = CopyToReg t23, Register:i32 %STATUS, t29:1

SU(0): t26: ch = BNONE32 BasicBlock:ch<for.end 0x4638428>, t31


Total amount of phi nodes to update: 2
Node 0 : (0x4638368, 2147483652)
Node 1 : (0x46383c8, 2147483651)
Initial selection DAG: BB#3 'matclr:for.end'
SelectionDAG has 2 nodes:
    t0: ch = EntryToken
  t1: ch = EpiphanyISD::RTS t0



Combining: t1: ch = EpiphanyISD::RTS t0

Combining: t0: ch = EntryToken
Optimized lowered selection DAG: BB#3 'matclr:for.end'
SelectionDAG has 2 nodes:
    t0: ch = EntryToken
  t1: ch = EpiphanyISD::RTS t0


Legally typed node: t0: ch = EntryToken

Legally typed node: t1: ch = EpiphanyISD::RTS t0

Legally typed node: t65535: ch = handlenode t1

Type-legalized selection DAG: BB#3 'matclr:for.end'
SelectionDAG has 2 nodes:
    t0: ch = EntryToken
  t1: ch = EpiphanyISD::RTS t0



Legalizing: t1: ch = EpiphanyISD::RTS t0

Legalizing: t0: ch = EntryToken
Legalized selection DAG: BB#3 'matclr:for.end'
SelectionDAG has 2 nodes:
    t0: ch = EntryToken
  t1: ch = EpiphanyISD::RTS t0



Legalizing: t1: ch = EpiphanyISD::RTS t0

Combining: t1: ch = EpiphanyISD::RTS t0

Legalizing: t0: ch = EntryToken

Combining: t0: ch = EntryToken
Optimized legalized selection DAG: BB#3 'matclr:for.end'
SelectionDAG has 2 nodes:
    t0: ch = EntryToken
  t1: ch = EpiphanyISD::RTS t0


===== Instruction selection begins: BB#3 'for.end'
Selecting: t1: ch = EpiphanyISD::RTS t0

ISEL: Starting pattern match on root node: t1: ch = EpiphanyISD::RTS t0

  Initial Opcode index to 4480
  Morphed node: t1: ch = RTS t0

ISEL: Match complete!
Selecting: t0: ch = EntryToken

===== Instruction selection ends:
Selected selection DAG: BB#3 'matclr:for.end'
SelectionDAG has 2 nodes:
    t0: ch = EntryToken
  t1: ch = RTS t0


********** List Scheduling BB#3 'for.end' **********
SU(0): t1: ch = RTS t0

  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0

Examining Available:
Height 0: SU(0): t1: ch = RTS t0


*** Scheduling [0]: SU(0): t1: ch = RTS t0

*** Final schedule ***
SU(0): t1: ch = RTS t0


Total amount of phi nodes to update: 0
*** MachineFunction at end of ISel ***
# Machine code for function matclr: IsSSA, TracksLiveness
Function Live Ins: %R0 in %vreg5, %R1 in %vreg6

BB#0: derived from LLVM BB %entry
    Live Ins: %R0 %R1
	%vreg6<def> = COPY %R1; GPR32:%vreg6
	%vreg5<def> = COPY %R0; GPR32:%vreg5
	%vreg0<def> = IMULrr_r32 %vreg6, %vreg6, %STATUS<imp-def,dead>; GPR32:%vreg0,%vreg6,%vreg6
	%vreg7<def> = CMPri_r32 %vreg0, 0, %STATUS<imp-def>; GPR32:%vreg7,%vreg0
	BCC <BB#3>, 0, %STATUS<imp-use>
	BNONE32 <BB#1>, %STATUS<imp-use>
    Successors according to CFG: BB#3(0x30000000 / 0x80000000 = 37.50%) BB#1(0x50000000 / 0x80000000 = 62.50%)

BB#1: derived from LLVM BB %for.body.preheader
    Predecessors according to CFG: BB#0
	%vreg8<def> = MOVi32ri 0; GPR32:%vreg8
    Successors according to CFG: BB#2(?%)

BB#2: derived from LLVM BB %for.body
    Predecessors according to CFG: BB#1 BB#2
	%vreg1<def> = PHI %vreg5, <BB#1>, %vreg4, <BB#2>; GPR32:%vreg1,%vreg5,%vreg4
	%vreg2<def> = PHI %vreg8, <BB#1>, %vreg3, <BB#2>; GPR32:%vreg2,%vreg8,%vreg3
	%vreg4<def> = ADDri_r32 %vreg1, 4, %STATUS<imp-def,dead>; GPR32:%vreg4,%vreg1
	%vreg9<def> = MOVi32ri 0; GPR32:%vreg9
	STRi32_r32 %vreg9<kill>, %vreg1, 0; mem:Volatile ST4[%lsr.iv](tbaa=!2) GPR32:%vreg9,%vreg1
	%vreg3<def> = ADDri_r32 %vreg2, 1, %STATUS<imp-def,dead>; GPR32:%vreg3,%vreg2
	%vreg10<def> = CMPrr_r32 %vreg3, %vreg0, %STATUS<imp-def>; GPR32:%vreg10,%vreg3,%vreg0
	BCC <BB#2>, 8, %STATUS<imp-use>
	BNONE32 <BB#3>, %STATUS<imp-use>
    Successors according to CFG: BB#2(0x7c000000 / 0x80000000 = 96.88%) BB#3(0x04000000 / 0x80000000 = 3.12%)

BB#3: derived from LLVM BB %for.end
    Predecessors according to CFG: BB#0 BB#2
	RTS

# End machine code for function matclr.

# *** IR Dump Before Epiphany FPU/IALU2 config flag optimization pass ***:
# Machine code for function matclr: IsSSA, TracksLiveness
Function Live Ins: %R0 in %vreg5, %R1 in %vreg6

BB#0: derived from LLVM BB %entry
    Live Ins: %R0 %R1
	%vreg6<def> = COPY %R1; GPR32:%vreg6
	%vreg5<def> = COPY %R0; GPR32:%vreg5
	%vreg0<def> = IMULrr_r32 %vreg6, %vreg6, %STATUS<imp-def,dead>; GPR32:%vreg0,%vreg6,%vreg6
	%vreg7<def> = CMPri_r32 %vreg0, 0, %STATUS<imp-def>; GPR32:%vreg7,%vreg0
	BCC <BB#3>, 0, %STATUS<imp-use>
	BNONE32 <BB#1>, %STATUS<imp-use>
    Successors according to CFG: BB#3(0x30000000 / 0x80000000 = 37.50%) BB#1(0x50000000 / 0x80000000 = 62.50%)

BB#1: derived from LLVM BB %for.body.preheader
    Predecessors according to CFG: BB#0
	%vreg8<def> = MOVi32ri 0; GPR32:%vreg8
    Successors according to CFG: BB#2(?%)

BB#2: derived from LLVM BB %for.body
    Predecessors according to CFG: BB#1 BB#2
	%vreg1<def> = PHI %vreg5, <BB#1>, %vreg4, <BB#2>; GPR32:%vreg1,%vreg5,%vreg4
	%vreg2<def> = PHI %vreg8, <BB#1>, %vreg3, <BB#2>; GPR32:%vreg2,%vreg8,%vreg3
	%vreg4<def> = ADDri_r32 %vreg1, 4, %STATUS<imp-def,dead>; GPR32:%vreg4,%vreg1
	%vreg9<def> = MOVi32ri 0; GPR32:%vreg9
	STRi32_r32 %vreg9<kill>, %vreg1, 0; mem:Volatile ST4[%lsr.iv](tbaa=!2) GPR32:%vreg9,%vreg1
	%vreg3<def> = ADDri_r32 %vreg2, 1, %STATUS<imp-def,dead>; GPR32:%vreg3,%vreg2
	%vreg10<def> = CMPrr_r32 %vreg3, %vreg0, %STATUS<imp-def>; GPR32:%vreg10,%vreg3,%vreg0
	BCC <BB#2>, 8, %STATUS<imp-use>
	BNONE32 <BB#3>, %STATUS<imp-use>
    Successors according to CFG: BB#2(0x7c000000 / 0x80000000 = 96.88%) BB#3(0x04000000 / 0x80000000 = 3.12%)

BB#3: derived from LLVM BB %for.end
    Predecessors according to CFG: BB#0 BB#2
	RTS

# End machine code for function matclr.


Running Epiphany FPU/IALU2 config pass
# *** IR Dump After Epiphany FPU/IALU2 config flag optimization pass ***:
# Machine code for function matclr: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
Function Live Ins: %R0 in %vreg5, %R1 in %vreg6

BB#4: 
    Live Ins: %R0 %R1
	GID %CONFIG<imp-def>
	%vreg13<def> = MOVFS32_core %CONFIG<kill>; GPR32:%vreg13
	STRi32_r32 %vreg13, <fi#0>, 0; mem:ST4[FixedStack0] GPR32:%vreg13
	%vreg12<def,tied1> = MOVTi32ri %vreg13<kill,tied0>, 72; GPR32:%vreg12,%vreg13
	STRi32_r32 %vreg12, <fi#1>, 0; mem:ST4[FixedStack1] GPR32:%vreg12
	%CONFIG<def> = MOVTS32_core %vreg12<kill>; GPR32:%vreg12
	GIE %CONFIG<imp-use,kill>
    Successors according to CFG: BB#0(?%)

BB#0: derived from LLVM BB %entry
    Live Ins: %R0 %R1
    Predecessors according to CFG: BB#4
	%vreg6<def> = COPY %R1; GPR32:%vreg6
	%vreg5<def> = COPY %R0; GPR32:%vreg5
	%vreg0<def> = IMULrr_r32 %vreg6, %vreg6, %STATUS<imp-def,dead>; GPR32:%vreg0,%vreg6,%vreg6
	%vreg7<def> = CMPri_r32 %vreg0, 0, %STATUS<imp-def>; GPR32:%vreg7,%vreg0
	BCC <BB#3>, 0, %STATUS<imp-use>
	BNONE32 <BB#1>, %STATUS<imp-use>
    Successors according to CFG: BB#3(0x30000000 / 0x80000000 = 37.50%) BB#1(0x50000000 / 0x80000000 = 62.50%)

BB#1: derived from LLVM BB %for.body.preheader
    Predecessors according to CFG: BB#0
	%vreg8<def> = MOVi32ri 0; GPR32:%vreg8
    Successors according to CFG: BB#2(?%)

BB#2: derived from LLVM BB %for.body
    Predecessors according to CFG: BB#1 BB#2
	%vreg1<def> = PHI %vreg5, <BB#1>, %vreg4, <BB#2>; GPR32:%vreg1,%vreg5,%vreg4
	%vreg2<def> = PHI %vreg8, <BB#1>, %vreg3, <BB#2>; GPR32:%vreg2,%vreg8,%vreg3
	%vreg4<def> = ADDri_r32 %vreg1, 4, %STATUS<imp-def,dead>; GPR32:%vreg4,%vreg1
	%vreg9<def> = MOVi32ri 0; GPR32:%vreg9
	STRi32_r32 %vreg9<kill>, %vreg1, 0; mem:Volatile ST4[%lsr.iv](tbaa=!2) GPR32:%vreg9,%vreg1
	%vreg3<def> = ADDri_r32 %vreg2, 1, %STATUS<imp-def,dead>; GPR32:%vreg3,%vreg2
	%vreg10<def> = CMPrr_r32 %vreg3, %vreg0, %STATUS<imp-def>; GPR32:%vreg10,%vreg3,%vreg0
	BCC <BB#2>, 8, %STATUS<imp-use>
	BNONE32 <BB#3>, %STATUS<imp-use>
    Successors according to CFG: BB#2(0x7c000000 / 0x80000000 = 96.88%) BB#3(0x04000000 / 0x80000000 = 3.12%)

BB#3: derived from LLVM BB %for.end
    Predecessors according to CFG: BB#0 BB#2
	%vreg14<def> = LDRi32_r32 <fi#0>, 0; mem:LD4[FixedStack0] GPR32:%vreg14
	GID
	%CONFIG<def> = MOVTS32_core %vreg14<kill>; GPR32:%vreg14
	GIE %CONFIG<imp-use,kill>
	RTS

# End machine code for function matclr.

# *** IR Dump Before Expand ISel Pseudo-instructions ***:
# Machine code for function matclr: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
Function Live Ins: %R0 in %vreg5, %R1 in %vreg6

BB#4: 
    Live Ins: %R0 %R1
	GID %CONFIG<imp-def>
	%vreg13<def> = MOVFS32_core %CONFIG<kill>; GPR32:%vreg13
	STRi32_r32 %vreg13, <fi#0>, 0; mem:ST4[FixedStack0] GPR32:%vreg13
	%vreg12<def,tied1> = MOVTi32ri %vreg13<kill,tied0>, 72; GPR32:%vreg12,%vreg13
	STRi32_r32 %vreg12, <fi#1>, 0; mem:ST4[FixedStack1] GPR32:%vreg12
	%CONFIG<def> = MOVTS32_core %vreg12<kill>; GPR32:%vreg12
	GIE %CONFIG<imp-use,kill>
    Successors according to CFG: BB#0(?%)

BB#0: derived from LLVM BB %entry
    Live Ins: %R0 %R1
    Predecessors according to CFG: BB#4
	%vreg6<def> = COPY %R1; GPR32:%vreg6
	%vreg5<def> = COPY %R0; GPR32:%vreg5
	%vreg0<def> = IMULrr_r32 %vreg6, %vreg6, %STATUS<imp-def,dead>; GPR32:%vreg0,%vreg6,%vreg6
	%vreg7<def> = CMPri_r32 %vreg0, 0, %STATUS<imp-def>; GPR32:%vreg7,%vreg0
	BCC <BB#3>, 0, %STATUS<imp-use>
	BNONE32 <BB#1>, %STATUS<imp-use>
    Successors according to CFG: BB#3(0x30000000 / 0x80000000 = 37.50%) BB#1(0x50000000 / 0x80000000 = 62.50%)

BB#1: derived from LLVM BB %for.body.preheader
    Predecessors according to CFG: BB#0
	%vreg8<def> = MOVi32ri 0; GPR32:%vreg8
    Successors according to CFG: BB#2(?%)

BB#2: derived from LLVM BB %for.body
    Predecessors according to CFG: BB#1 BB#2
	%vreg1<def> = PHI %vreg5, <BB#1>, %vreg4, <BB#2>; GPR32:%vreg1,%vreg5,%vreg4
	%vreg2<def> = PHI %vreg8, <BB#1>, %vreg3, <BB#2>; GPR32:%vreg2,%vreg8,%vreg3
	%vreg4<def> = ADDri_r32 %vreg1, 4, %STATUS<imp-def,dead>; GPR32:%vreg4,%vreg1
	%vreg9<def> = MOVi32ri 0; GPR32:%vreg9
	STRi32_r32 %vreg9<kill>, %vreg1, 0; mem:Volatile ST4[%lsr.iv](tbaa=!2) GPR32:%vreg9,%vreg1
	%vreg3<def> = ADDri_r32 %vreg2, 1, %STATUS<imp-def,dead>; GPR32:%vreg3,%vreg2
	%vreg10<def> = CMPrr_r32 %vreg3, %vreg0, %STATUS<imp-def>; GPR32:%vreg10,%vreg3,%vreg0
	BCC <BB#2>, 8, %STATUS<imp-use>
	BNONE32 <BB#3>, %STATUS<imp-use>
    Successors according to CFG: BB#2(0x7c000000 / 0x80000000 = 96.88%) BB#3(0x04000000 / 0x80000000 = 3.12%)

BB#3: derived from LLVM BB %for.end
    Predecessors according to CFG: BB#0 BB#2
	%vreg14<def> = LDRi32_r32 <fi#0>, 0; mem:LD4[FixedStack0] GPR32:%vreg14
	GID
	%CONFIG<def> = MOVTS32_core %vreg14<kill>; GPR32:%vreg14
	GIE %CONFIG<imp-use,kill>
	RTS

# End machine code for function matclr.

# *** IR Dump After Expand ISel Pseudo-instructions ***:
# Machine code for function matclr: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
Function Live Ins: %R0 in %vreg5, %R1 in %vreg6

BB#4: 
    Live Ins: %R0 %R1
	GID %CONFIG<imp-def>
	%vreg13<def> = MOVFS32_core %CONFIG<kill>; GPR32:%vreg13
	STRi32_r32 %vreg13, <fi#0>, 0; mem:ST4[FixedStack0] GPR32:%vreg13
	%vreg12<def,tied1> = MOVTi32ri %vreg13<kill,tied0>, 72; GPR32:%vreg12,%vreg13
	STRi32_r32 %vreg12, <fi#1>, 0; mem:ST4[FixedStack1] GPR32:%vreg12
	%CONFIG<def> = MOVTS32_core %vreg12<kill>; GPR32:%vreg12
	GIE %CONFIG<imp-use,kill>
    Successors according to CFG: BB#0(?%)

BB#0: derived from LLVM BB %entry
    Live Ins: %R0 %R1
    Predecessors according to CFG: BB#4
	%vreg6<def> = COPY %R1; GPR32:%vreg6
	%vreg5<def> = COPY %R0; GPR32:%vreg5
	%vreg0<def> = IMULrr_r32 %vreg6, %vreg6, %STATUS<imp-def,dead>; GPR32:%vreg0,%vreg6,%vreg6
	%vreg7<def> = CMPri_r32 %vreg0, 0, %STATUS<imp-def>; GPR32:%vreg7,%vreg0
	BCC <BB#3>, 0, %STATUS<imp-use>
	BNONE32 <BB#1>, %STATUS<imp-use>
    Successors according to CFG: BB#3(0x30000000 / 0x80000000 = 37.50%) BB#1(0x50000000 / 0x80000000 = 62.50%)

BB#1: derived from LLVM BB %for.body.preheader
    Predecessors according to CFG: BB#0
	%vreg8<def> = MOVi32ri 0; GPR32:%vreg8
    Successors according to CFG: BB#2(?%)

BB#2: derived from LLVM BB %for.body
    Predecessors according to CFG: BB#1 BB#2
	%vreg1<def> = PHI %vreg5, <BB#1>, %vreg4, <BB#2>; GPR32:%vreg1,%vreg5,%vreg4
	%vreg2<def> = PHI %vreg8, <BB#1>, %vreg3, <BB#2>; GPR32:%vreg2,%vreg8,%vreg3
	%vreg4<def> = ADDri_r32 %vreg1, 4, %STATUS<imp-def,dead>; GPR32:%vreg4,%vreg1
	%vreg9<def> = MOVi32ri 0; GPR32:%vreg9
	STRi32_r32 %vreg9<kill>, %vreg1, 0; mem:Volatile ST4[%lsr.iv](tbaa=!2) GPR32:%vreg9,%vreg1
	%vreg3<def> = ADDri_r32 %vreg2, 1, %STATUS<imp-def,dead>; GPR32:%vreg3,%vreg2
	%vreg10<def> = CMPrr_r32 %vreg3, %vreg0, %STATUS<imp-def>; GPR32:%vreg10,%vreg3,%vreg0
	BCC <BB#2>, 8, %STATUS<imp-use>
	BNONE32 <BB#3>, %STATUS<imp-use>
    Successors according to CFG: BB#2(0x7c000000 / 0x80000000 = 96.88%) BB#3(0x04000000 / 0x80000000 = 3.12%)

BB#3: derived from LLVM BB %for.end
    Predecessors according to CFG: BB#0 BB#2
	%vreg14<def> = LDRi32_r32 <fi#0>, 0; mem:LD4[FixedStack0] GPR32:%vreg14
	GID
	%CONFIG<def> = MOVTS32_core %vreg14<kill>; GPR32:%vreg14
	GIE %CONFIG<imp-use,kill>
	RTS

# End machine code for function matclr.

# *** IR Dump Before Tail Duplication ***:
# Machine code for function matclr: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
Function Live Ins: %R0 in %vreg5, %R1 in %vreg6

BB#4: 
    Live Ins: %R0 %R1
	GID %CONFIG<imp-def>
	%vreg13<def> = MOVFS32_core %CONFIG<kill>; GPR32:%vreg13
	STRi32_r32 %vreg13, <fi#0>, 0; mem:ST4[FixedStack0] GPR32:%vreg13
	%vreg12<def,tied1> = MOVTi32ri %vreg13<kill,tied0>, 72; GPR32:%vreg12,%vreg13
	STRi32_r32 %vreg12, <fi#1>, 0; mem:ST4[FixedStack1] GPR32:%vreg12
	%CONFIG<def> = MOVTS32_core %vreg12<kill>; GPR32:%vreg12
	GIE %CONFIG<imp-use,kill>
    Successors according to CFG: BB#0(?%)

BB#0: derived from LLVM BB %entry
    Live Ins: %R0 %R1
    Predecessors according to CFG: BB#4
	%vreg6<def> = COPY %R1; GPR32:%vreg6
	%vreg5<def> = COPY %R0; GPR32:%vreg5
	%vreg0<def> = IMULrr_r32 %vreg6, %vreg6, %STATUS<imp-def,dead>; GPR32:%vreg0,%vreg6,%vreg6
	%vreg7<def> = CMPri_r32 %vreg0, 0, %STATUS<imp-def>; GPR32:%vreg7,%vreg0
	BCC <BB#3>, 0, %STATUS<imp-use>
	BNONE32 <BB#1>, %STATUS<imp-use>
    Successors according to CFG: BB#3(0x30000000 / 0x80000000 = 37.50%) BB#1(0x50000000 / 0x80000000 = 62.50%)

BB#1: derived from LLVM BB %for.body.preheader
    Predecessors according to CFG: BB#0
	%vreg8<def> = MOVi32ri 0; GPR32:%vreg8
    Successors according to CFG: BB#2(?%)

BB#2: derived from LLVM BB %for.body
    Predecessors according to CFG: BB#1 BB#2
	%vreg1<def> = PHI %vreg5, <BB#1>, %vreg4, <BB#2>; GPR32:%vreg1,%vreg5,%vreg4
	%vreg2<def> = PHI %vreg8, <BB#1>, %vreg3, <BB#2>; GPR32:%vreg2,%vreg8,%vreg3
	%vreg4<def> = ADDri_r32 %vreg1, 4, %STATUS<imp-def,dead>; GPR32:%vreg4,%vreg1
	%vreg9<def> = MOVi32ri 0; GPR32:%vreg9
	STRi32_r32 %vreg9<kill>, %vreg1, 0; mem:Volatile ST4[%lsr.iv](tbaa=!2) GPR32:%vreg9,%vreg1
	%vreg3<def> = ADDri_r32 %vreg2, 1, %STATUS<imp-def,dead>; GPR32:%vreg3,%vreg2
	%vreg10<def> = CMPrr_r32 %vreg3, %vreg0, %STATUS<imp-def>; GPR32:%vreg10,%vreg3,%vreg0
	BCC <BB#2>, 8, %STATUS<imp-use>
	BNONE32 <BB#3>, %STATUS<imp-use>
    Successors according to CFG: BB#2(0x7c000000 / 0x80000000 = 96.88%) BB#3(0x04000000 / 0x80000000 = 3.12%)

BB#3: derived from LLVM BB %for.end
    Predecessors according to CFG: BB#0 BB#2
	%vreg14<def> = LDRi32_r32 <fi#0>, 0; mem:LD4[FixedStack0] GPR32:%vreg14
	GID
	%CONFIG<def> = MOVTS32_core %vreg14<kill>; GPR32:%vreg14
	GIE %CONFIG<imp-use,kill>
	RTS

# End machine code for function matclr.


<----------------->
Analyzing block 0
BB#0: derived from LLVM BB %entry
    Live Ins: %R0 %R1
    Predecessors according to CFG: BB#4
	%vreg6<def> = COPY %R1; GPR32:%vreg6
	%vreg5<def> = COPY %R0; GPR32:%vreg5
	%vreg0<def> = IMULrr_r32 %vreg6, %vreg6, %STATUS<imp-def,dead>; GPR32:%vreg0,%vreg6,%vreg6
	%vreg7<def> = CMPri_r32 %vreg0, 0, %STATUS<imp-def>; GPR32:%vreg7,%vreg0
	BCC <BB#3>, 0, %STATUS<imp-use>
	BNONE32 <BB#1>, %STATUS<imp-use>
    Successors according to CFG: BB#3(0x30000000 / 0x80000000 = 37.50%) BB#1(0x50000000 / 0x80000000 = 62.50%)

<----------------->
Analyzing block 1
BB#1: derived from LLVM BB %for.body.preheader
    Predecessors according to CFG: BB#0
	%vreg8<def> = MOVi32ri 0; GPR32:%vreg8
    Successors according to CFG: BB#2(?%)

<----------------->
Analyzing block 2
BB#2: derived from LLVM BB %for.body
    Predecessors according to CFG: BB#1 BB#2
	%vreg1<def> = PHI %vreg5, <BB#1>, %vreg4, <BB#2>; GPR32:%vreg1,%vreg5,%vreg4
	%vreg2<def> = PHI %vreg8, <BB#1>, %vreg3, <BB#2>; GPR32:%vreg2,%vreg8,%vreg3
	%vreg4<def> = ADDri_r32 %vreg1, 4, %STATUS<imp-def,dead>; GPR32:%vreg4,%vreg1
	%vreg9<def> = MOVi32ri 0; GPR32:%vreg9
	STRi32_r32 %vreg9<kill>, %vreg1, 0; mem:Volatile ST4[%lsr.iv](tbaa=!2) GPR32:%vreg9,%vreg1
	%vreg3<def> = ADDri_r32 %vreg2, 1, %STATUS<imp-def,dead>; GPR32:%vreg3,%vreg2
	%vreg10<def> = CMPrr_r32 %vreg3, %vreg0, %STATUS<imp-def>; GPR32:%vreg10,%vreg3,%vreg0
	BCC <BB#2>, 8, %STATUS<imp-use>
	BNONE32 <BB#3>, %STATUS<imp-use>
    Successors according to CFG: BB#2(0x7c000000 / 0x80000000 = 96.88%) BB#3(0x04000000 / 0x80000000 = 3.12%)

<----------------->
Analyzing block 3
BB#3: derived from LLVM BB %for.end
    Predecessors according to CFG: BB#0 BB#2
	%vreg14<def> = LDRi32_r32 <fi#0>, 0; mem:LD4[FixedStack0] GPR32:%vreg14
	GID
	%CONFIG<def> = MOVTS32_core %vreg14<kill>; GPR32:%vreg14
	GIE %CONFIG<imp-use,kill>
	RTS
# *** IR Dump After Tail Duplication ***:
# Machine code for function matclr: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
Function Live Ins: %R0 in %vreg5, %R1 in %vreg6

BB#4: 
    Live Ins: %R0 %R1
	GID %CONFIG<imp-def>
	%vreg13<def> = MOVFS32_core %CONFIG<kill>; GPR32:%vreg13
	STRi32_r32 %vreg13, <fi#0>, 0; mem:ST4[FixedStack0] GPR32:%vreg13
	%vreg12<def,tied1> = MOVTi32ri %vreg13<kill,tied0>, 72; GPR32:%vreg12,%vreg13
	STRi32_r32 %vreg12, <fi#1>, 0; mem:ST4[FixedStack1] GPR32:%vreg12
	%CONFIG<def> = MOVTS32_core %vreg12<kill>; GPR32:%vreg12
	GIE %CONFIG<imp-use,kill>
    Successors according to CFG: BB#0(?%)

BB#0: derived from LLVM BB %entry
    Live Ins: %R0 %R1
    Predecessors according to CFG: BB#4
	%vreg6<def> = COPY %R1; GPR32:%vreg6
	%vreg5<def> = COPY %R0; GPR32:%vreg5
	%vreg0<def> = IMULrr_r32 %vreg6, %vreg6, %STATUS<imp-def,dead>; GPR32:%vreg0,%vreg6,%vreg6
	%vreg7<def> = CMPri_r32 %vreg0, 0, %STATUS<imp-def>; GPR32:%vreg7,%vreg0
	BCC <BB#3>, 0, %STATUS<imp-use>
	BNONE32 <BB#1>, %STATUS<imp-use>
    Successors according to CFG: BB#3(0x30000000 / 0x80000000 = 37.50%) BB#1(0x50000000 / 0x80000000 = 62.50%)

BB#1: derived from LLVM BB %for.body.preheader
    Predecessors according to CFG: BB#0
	%vreg8<def> = MOVi32ri 0; GPR32:%vreg8
    Successors according to CFG: BB#2(?%)

BB#2: derived from LLVM BB %for.body
    Predecessors according to CFG: BB#1 BB#2
	%vreg1<def> = PHI %vreg5, <BB#1>, %vreg4, <BB#2>; GPR32:%vreg1,%vreg5,%vreg4
	%vreg2<def> = PHI %vreg8, <BB#1>, %vreg3, <BB#2>; GPR32:%vreg2,%vreg8,%vreg3
	%vreg4<def> = ADDri_r32 %vreg1, 4, %STATUS<imp-def,dead>; GPR32:%vreg4,%vreg1
	%vreg9<def> = MOVi32ri 0; GPR32:%vreg9
	STRi32_r32 %vreg9<kill>, %vreg1, 0; mem:Volatile ST4[%lsr.iv](tbaa=!2) GPR32:%vreg9,%vreg1
	%vreg3<def> = ADDri_r32 %vreg2, 1, %STATUS<imp-def,dead>; GPR32:%vreg3,%vreg2
	%vreg10<def> = CMPrr_r32 %vreg3, %vreg0, %STATUS<imp-def>; GPR32:%vreg10,%vreg3,%vreg0
	BCC <BB#2>, 8, %STATUS<imp-use>
	BNONE32 <BB#3>, %STATUS<imp-use>
    Successors according to CFG: BB#2(0x7c000000 / 0x80000000 = 96.88%) BB#3(0x04000000 / 0x80000000 = 3.12%)

BB#3: derived from LLVM BB %for.end
    Predecessors according to CFG: BB#0 BB#2
	%vreg14<def> = LDRi32_r32 <fi#0>, 0; mem:LD4[FixedStack0] GPR32:%vreg14
	GID
	%CONFIG<def> = MOVTS32_core %vreg14<kill>; GPR32:%vreg14
	GIE %CONFIG<imp-use,kill>
	RTS

# End machine code for function matclr.

# *** IR Dump Before Optimize machine instruction PHIs ***:
# Machine code for function matclr: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
Function Live Ins: %R0 in %vreg5, %R1 in %vreg6

BB#4: 
    Live Ins: %R0 %R1
	GID %CONFIG<imp-def>
	%vreg13<def> = MOVFS32_core %CONFIG<kill>; GPR32:%vreg13
	STRi32_r32 %vreg13, <fi#0>, 0; mem:ST4[FixedStack0] GPR32:%vreg13
	%vreg12<def,tied1> = MOVTi32ri %vreg13<kill,tied0>, 72; GPR32:%vreg12,%vreg13
	STRi32_r32 %vreg12, <fi#1>, 0; mem:ST4[FixedStack1] GPR32:%vreg12
	%CONFIG<def> = MOVTS32_core %vreg12<kill>; GPR32:%vreg12
	GIE %CONFIG<imp-use,kill>
    Successors according to CFG: BB#0(?%)

BB#0: derived from LLVM BB %entry
    Live Ins: %R0 %R1
    Predecessors according to CFG: BB#4
	%vreg6<def> = COPY %R1; GPR32:%vreg6
	%vreg5<def> = COPY %R0; GPR32:%vreg5
	%vreg0<def> = IMULrr_r32 %vreg6, %vreg6, %STATUS<imp-def,dead>; GPR32:%vreg0,%vreg6,%vreg6
	%vreg7<def> = CMPri_r32 %vreg0, 0, %STATUS<imp-def>; GPR32:%vreg7,%vreg0
	BCC <BB#3>, 0, %STATUS<imp-use>
	BNONE32 <BB#1>, %STATUS<imp-use>
    Successors according to CFG: BB#3(0x30000000 / 0x80000000 = 37.50%) BB#1(0x50000000 / 0x80000000 = 62.50%)

BB#1: derived from LLVM BB %for.body.preheader
    Predecessors according to CFG: BB#0
	%vreg8<def> = MOVi32ri 0; GPR32:%vreg8
    Successors according to CFG: BB#2(?%)

BB#2: derived from LLVM BB %for.body
    Predecessors according to CFG: BB#1 BB#2
	%vreg1<def> = PHI %vreg5, <BB#1>, %vreg4, <BB#2>; GPR32:%vreg1,%vreg5,%vreg4
	%vreg2<def> = PHI %vreg8, <BB#1>, %vreg3, <BB#2>; GPR32:%vreg2,%vreg8,%vreg3
	%vreg4<def> = ADDri_r32 %vreg1, 4, %STATUS<imp-def,dead>; GPR32:%vreg4,%vreg1
	%vreg9<def> = MOVi32ri 0; GPR32:%vreg9
	STRi32_r32 %vreg9<kill>, %vreg1, 0; mem:Volatile ST4[%lsr.iv](tbaa=!2) GPR32:%vreg9,%vreg1
	%vreg3<def> = ADDri_r32 %vreg2, 1, %STATUS<imp-def,dead>; GPR32:%vreg3,%vreg2
	%vreg10<def> = CMPrr_r32 %vreg3, %vreg0, %STATUS<imp-def>; GPR32:%vreg10,%vreg3,%vreg0
	BCC <BB#2>, 8, %STATUS<imp-use>
	BNONE32 <BB#3>, %STATUS<imp-use>
    Successors according to CFG: BB#2(0x7c000000 / 0x80000000 = 96.88%) BB#3(0x04000000 / 0x80000000 = 3.12%)

BB#3: derived from LLVM BB %for.end
    Predecessors according to CFG: BB#0 BB#2
	%vreg14<def> = LDRi32_r32 <fi#0>, 0; mem:LD4[FixedStack0] GPR32:%vreg14
	GID
	%CONFIG<def> = MOVTS32_core %vreg14<kill>; GPR32:%vreg14
	GIE %CONFIG<imp-use,kill>
	RTS

# End machine code for function matclr.

# *** IR Dump After Optimize machine instruction PHIs ***:
# Machine code for function matclr: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
Function Live Ins: %R0 in %vreg5, %R1 in %vreg6

BB#4: 
    Live Ins: %R0 %R1
	GID %CONFIG<imp-def>
	%vreg13<def> = MOVFS32_core %CONFIG<kill>; GPR32:%vreg13
	STRi32_r32 %vreg13, <fi#0>, 0; mem:ST4[FixedStack0] GPR32:%vreg13
	%vreg12<def,tied1> = MOVTi32ri %vreg13<kill,tied0>, 72; GPR32:%vreg12,%vreg13
	STRi32_r32 %vreg12, <fi#1>, 0; mem:ST4[FixedStack1] GPR32:%vreg12
	%CONFIG<def> = MOVTS32_core %vreg12<kill>; GPR32:%vreg12
	GIE %CONFIG<imp-use,kill>
    Successors according to CFG: BB#0(?%)

BB#0: derived from LLVM BB %entry
    Live Ins: %R0 %R1
    Predecessors according to CFG: BB#4
	%vreg6<def> = COPY %R1; GPR32:%vreg6
	%vreg5<def> = COPY %R0; GPR32:%vreg5
	%vreg0<def> = IMULrr_r32 %vreg6, %vreg6, %STATUS<imp-def,dead>; GPR32:%vreg0,%vreg6,%vreg6
	%vreg7<def> = CMPri_r32 %vreg0, 0, %STATUS<imp-def>; GPR32:%vreg7,%vreg0
	BCC <BB#3>, 0, %STATUS<imp-use>
	BNONE32 <BB#1>, %STATUS<imp-use>
    Successors according to CFG: BB#3(0x30000000 / 0x80000000 = 37.50%) BB#1(0x50000000 / 0x80000000 = 62.50%)

BB#1: derived from LLVM BB %for.body.preheader
    Predecessors according to CFG: BB#0
	%vreg8<def> = MOVi32ri 0; GPR32:%vreg8
    Successors according to CFG: BB#2(?%)

BB#2: derived from LLVM BB %for.body
    Predecessors according to CFG: BB#1 BB#2
	%vreg1<def> = PHI %vreg5, <BB#1>, %vreg4, <BB#2>; GPR32:%vreg1,%vreg5,%vreg4
	%vreg2<def> = PHI %vreg8, <BB#1>, %vreg3, <BB#2>; GPR32:%vreg2,%vreg8,%vreg3
	%vreg4<def> = ADDri_r32 %vreg1, 4, %STATUS<imp-def,dead>; GPR32:%vreg4,%vreg1
	%vreg9<def> = MOVi32ri 0; GPR32:%vreg9
	STRi32_r32 %vreg9<kill>, %vreg1, 0; mem:Volatile ST4[%lsr.iv](tbaa=!2) GPR32:%vreg9,%vreg1
	%vreg3<def> = ADDri_r32 %vreg2, 1, %STATUS<imp-def,dead>; GPR32:%vreg3,%vreg2
	%vreg10<def> = CMPrr_r32 %vreg3, %vreg0, %STATUS<imp-def>; GPR32:%vreg10,%vreg3,%vreg0
	BCC <BB#2>, 8, %STATUS<imp-use>
	BNONE32 <BB#3>, %STATUS<imp-use>
    Successors according to CFG: BB#2(0x7c000000 / 0x80000000 = 96.88%) BB#3(0x04000000 / 0x80000000 = 3.12%)

BB#3: derived from LLVM BB %for.end
    Predecessors according to CFG: BB#0 BB#2
	%vreg14<def> = LDRi32_r32 <fi#0>, 0; mem:LD4[FixedStack0] GPR32:%vreg14
	GID
	%CONFIG<def> = MOVTS32_core %vreg14<kill>; GPR32:%vreg14
	GIE %CONFIG<imp-use,kill>
	RTS

# End machine code for function matclr.

# *** IR Dump Before Slot index numbering ***:
# Machine code for function matclr: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
Function Live Ins: %R0 in %vreg5, %R1 in %vreg6

BB#4: 
    Live Ins: %R0 %R1
	GID %CONFIG<imp-def>
	%vreg13<def> = MOVFS32_core %CONFIG<kill>; GPR32:%vreg13
	STRi32_r32 %vreg13, <fi#0>, 0; mem:ST4[FixedStack0] GPR32:%vreg13
	%vreg12<def,tied1> = MOVTi32ri %vreg13<kill,tied0>, 72; GPR32:%vreg12,%vreg13
	STRi32_r32 %vreg12, <fi#1>, 0; mem:ST4[FixedStack1] GPR32:%vreg12
	%CONFIG<def> = MOVTS32_core %vreg12<kill>; GPR32:%vreg12
	GIE %CONFIG<imp-use,kill>
    Successors according to CFG: BB#0(?%)

BB#0: derived from LLVM BB %entry
    Live Ins: %R0 %R1
    Predecessors according to CFG: BB#4
	%vreg6<def> = COPY %R1; GPR32:%vreg6
	%vreg5<def> = COPY %R0; GPR32:%vreg5
	%vreg0<def> = IMULrr_r32 %vreg6, %vreg6, %STATUS<imp-def,dead>; GPR32:%vreg0,%vreg6,%vreg6
	%vreg7<def> = CMPri_r32 %vreg0, 0, %STATUS<imp-def>; GPR32:%vreg7,%vreg0
	BCC <BB#3>, 0, %STATUS<imp-use>
	BNONE32 <BB#1>, %STATUS<imp-use>
    Successors according to CFG: BB#3(0x30000000 / 0x80000000 = 37.50%) BB#1(0x50000000 / 0x80000000 = 62.50%)

BB#1: derived from LLVM BB %for.body.preheader
    Predecessors according to CFG: BB#0
	%vreg8<def> = MOVi32ri 0; GPR32:%vreg8
    Successors according to CFG: BB#2(?%)

BB#2: derived from LLVM BB %for.body
    Predecessors according to CFG: BB#1 BB#2
	%vreg1<def> = PHI %vreg5, <BB#1>, %vreg4, <BB#2>; GPR32:%vreg1,%vreg5,%vreg4
	%vreg2<def> = PHI %vreg8, <BB#1>, %vreg3, <BB#2>; GPR32:%vreg2,%vreg8,%vreg3
	%vreg4<def> = ADDri_r32 %vreg1, 4, %STATUS<imp-def,dead>; GPR32:%vreg4,%vreg1
	%vreg9<def> = MOVi32ri 0; GPR32:%vreg9
	STRi32_r32 %vreg9<kill>, %vreg1, 0; mem:Volatile ST4[%lsr.iv](tbaa=!2) GPR32:%vreg9,%vreg1
	%vreg3<def> = ADDri_r32 %vreg2, 1, %STATUS<imp-def,dead>; GPR32:%vreg3,%vreg2
	%vreg10<def> = CMPrr_r32 %vreg3, %vreg0, %STATUS<imp-def>; GPR32:%vreg10,%vreg3,%vreg0
	BCC <BB#2>, 8, %STATUS<imp-use>
	BNONE32 <BB#3>, %STATUS<imp-use>
    Successors according to CFG: BB#2(0x7c000000 / 0x80000000 = 96.88%) BB#3(0x04000000 / 0x80000000 = 3.12%)

BB#3: derived from LLVM BB %for.end
    Predecessors according to CFG: BB#0 BB#2
	%vreg14<def> = LDRi32_r32 <fi#0>, 0; mem:LD4[FixedStack0] GPR32:%vreg14
	GID
	%CONFIG<def> = MOVTS32_core %vreg14<kill>; GPR32:%vreg14
	GIE %CONFIG<imp-use,kill>
	RTS

# End machine code for function matclr.

# Machine code for function matclr: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
Function Live Ins: %R0 in %vreg5, %R1 in %vreg6

0B	BB#4: 
	    Live Ins: %R0 %R1
16B		GID %CONFIG<imp-def>
32B		%vreg13<def> = MOVFS32_core %CONFIG<kill>; GPR32:%vreg13
48B		STRi32_r32 %vreg13, <fi#0>, 0; mem:ST4[FixedStack0] GPR32:%vreg13
64B		%vreg12<def,tied1> = MOVTi32ri %vreg13<kill,tied0>, 72; GPR32:%vreg12,%vreg13
80B		STRi32_r32 %vreg12, <fi#1>, 0; mem:ST4[FixedStack1] GPR32:%vreg12
96B		%CONFIG<def> = MOVTS32_core %vreg12<kill>; GPR32:%vreg12
112B		GIE %CONFIG<imp-use,kill>
	    Successors according to CFG: BB#0(?%)

128B	BB#0: derived from LLVM BB %entry
	    Live Ins: %R0 %R1
	    Predecessors according to CFG: BB#4
144B		%vreg6<def> = COPY %R1; GPR32:%vreg6
160B		%vreg5<def> = COPY %R0; GPR32:%vreg5
176B		%vreg0<def> = IMULrr_r32 %vreg6, %vreg6, %STATUS<imp-def,dead>; GPR32:%vreg0,%vreg6,%vreg6
192B		%vreg7<def> = CMPri_r32 %vreg0, 0, %STATUS<imp-def>; GPR32:%vreg7,%vreg0
208B		BCC <BB#3>, 0, %STATUS<imp-use>
224B		BNONE32 <BB#1>, %STATUS<imp-use>
	    Successors according to CFG: BB#3(0x30000000 / 0x80000000 = 37.50%) BB#1(0x50000000 / 0x80000000 = 62.50%)

240B	BB#1: derived from LLVM BB %for.body.preheader
	    Predecessors according to CFG: BB#0
256B		%vreg8<def> = MOVi32ri 0; GPR32:%vreg8
	    Successors according to CFG: BB#2(?%)

272B	BB#2: derived from LLVM BB %for.body
	    Predecessors according to CFG: BB#1 BB#2
288B		%vreg1<def> = PHI %vreg5, <BB#1>, %vreg4, <BB#2>; GPR32:%vreg1,%vreg5,%vreg4
304B		%vreg2<def> = PHI %vreg8, <BB#1>, %vreg3, <BB#2>; GPR32:%vreg2,%vreg8,%vreg3
320B		%vreg4<def> = ADDri_r32 %vreg1, 4, %STATUS<imp-def,dead>; GPR32:%vreg4,%vreg1
336B		%vreg9<def> = MOVi32ri 0; GPR32:%vreg9
352B		STRi32_r32 %vreg9<kill>, %vreg1, 0; mem:Volatile ST4[%lsr.iv](tbaa=!2) GPR32:%vreg9,%vreg1
368B		%vreg3<def> = ADDri_r32 %vreg2, 1, %STATUS<imp-def,dead>; GPR32:%vreg3,%vreg2
384B		%vreg10<def> = CMPrr_r32 %vreg3, %vreg0, %STATUS<imp-def>; GPR32:%vreg10,%vreg3,%vreg0
400B		BCC <BB#2>, 8, %STATUS<imp-use>
416B		BNONE32 <BB#3>, %STATUS<imp-use>
	    Successors according to CFG: BB#2(0x7c000000 / 0x80000000 = 96.88%) BB#3(0x04000000 / 0x80000000 = 3.12%)

432B	BB#3: derived from LLVM BB %for.end
	    Predecessors according to CFG: BB#0 BB#2
448B		%vreg14<def> = LDRi32_r32 <fi#0>, 0; mem:LD4[FixedStack0] GPR32:%vreg14
464B		GID
480B		%CONFIG<def> = MOVTS32_core %vreg14<kill>; GPR32:%vreg14
496B		GIE %CONFIG<imp-use,kill>
512B		RTS

# End machine code for function matclr.

# *** IR Dump After Slot index numbering ***:
# Machine code for function matclr: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
Function Live Ins: %R0 in %vreg5, %R1 in %vreg6

0B	BB#4: 
	    Live Ins: %R0 %R1
16B		GID %CONFIG<imp-def>
32B		%vreg13<def> = MOVFS32_core %CONFIG<kill>; GPR32:%vreg13
48B		STRi32_r32 %vreg13, <fi#0>, 0; mem:ST4[FixedStack0] GPR32:%vreg13
64B		%vreg12<def,tied1> = MOVTi32ri %vreg13<kill,tied0>, 72; GPR32:%vreg12,%vreg13
80B		STRi32_r32 %vreg12, <fi#1>, 0; mem:ST4[FixedStack1] GPR32:%vreg12
96B		%CONFIG<def> = MOVTS32_core %vreg12<kill>; GPR32:%vreg12
112B		GIE %CONFIG<imp-use,kill>
	    Successors according to CFG: BB#0(?%)

128B	BB#0: derived from LLVM BB %entry
	    Live Ins: %R0 %R1
	    Predecessors according to CFG: BB#4
144B		%vreg6<def> = COPY %R1; GPR32:%vreg6
160B		%vreg5<def> = COPY %R0; GPR32:%vreg5
176B		%vreg0<def> = IMULrr_r32 %vreg6, %vreg6, %STATUS<imp-def,dead>; GPR32:%vreg0,%vreg6,%vreg6
192B		%vreg7<def> = CMPri_r32 %vreg0, 0, %STATUS<imp-def>; GPR32:%vreg7,%vreg0
208B		BCC <BB#3>, 0, %STATUS<imp-use>
224B		BNONE32 <BB#1>, %STATUS<imp-use>
	    Successors according to CFG: BB#3(0x30000000 / 0x80000000 = 37.50%) BB#1(0x50000000 / 0x80000000 = 62.50%)

240B	BB#1: derived from LLVM BB %for.body.preheader
	    Predecessors according to CFG: BB#0
256B		%vreg8<def> = MOVi32ri 0; GPR32:%vreg8
	    Successors according to CFG: BB#2(?%)

272B	BB#2: derived from LLVM BB %for.body
	    Predecessors according to CFG: BB#1 BB#2
288B		%vreg1<def> = PHI %vreg5, <BB#1>, %vreg4, <BB#2>; GPR32:%vreg1,%vreg5,%vreg4
304B		%vreg2<def> = PHI %vreg8, <BB#1>, %vreg3, <BB#2>; GPR32:%vreg2,%vreg8,%vreg3
320B		%vreg4<def> = ADDri_r32 %vreg1, 4, %STATUS<imp-def,dead>; GPR32:%vreg4,%vreg1
336B		%vreg9<def> = MOVi32ri 0; GPR32:%vreg9
352B		STRi32_r32 %vreg9<kill>, %vreg1, 0; mem:Volatile ST4[%lsr.iv](tbaa=!2) GPR32:%vreg9,%vreg1
368B		%vreg3<def> = ADDri_r32 %vreg2, 1, %STATUS<imp-def,dead>; GPR32:%vreg3,%vreg2
384B		%vreg10<def> = CMPrr_r32 %vreg3, %vreg0, %STATUS<imp-def>; GPR32:%vreg10,%vreg3,%vreg0
400B		BCC <BB#2>, 8, %STATUS<imp-use>
416B		BNONE32 <BB#3>, %STATUS<imp-use>
	    Successors according to CFG: BB#2(0x7c000000 / 0x80000000 = 96.88%) BB#3(0x04000000 / 0x80000000 = 3.12%)

432B	BB#3: derived from LLVM BB %for.end
	    Predecessors according to CFG: BB#0 BB#2
448B		%vreg14<def> = LDRi32_r32 <fi#0>, 0; mem:LD4[FixedStack0] GPR32:%vreg14
464B		GID
480B		%CONFIG<def> = MOVTS32_core %vreg14<kill>; GPR32:%vreg14
496B		GIE %CONFIG<imp-use,kill>
512B		RTS

# End machine code for function matclr.

# *** IR Dump Before Merge disjoint stack slots ***:
# Machine code for function matclr: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
Function Live Ins: %R0 in %vreg5, %R1 in %vreg6

0B	BB#4: 
	    Live Ins: %R0 %R1
16B		GID %CONFIG<imp-def>
32B		%vreg13<def> = MOVFS32_core %CONFIG<kill>; GPR32:%vreg13
48B		STRi32_r32 %vreg13, <fi#0>, 0; mem:ST4[FixedStack0] GPR32:%vreg13
64B		%vreg12<def,tied1> = MOVTi32ri %vreg13<kill,tied0>, 72; GPR32:%vreg12,%vreg13
80B		STRi32_r32 %vreg12, <fi#1>, 0; mem:ST4[FixedStack1] GPR32:%vreg12
96B		%CONFIG<def> = MOVTS32_core %vreg12<kill>; GPR32:%vreg12
112B		GIE %CONFIG<imp-use,kill>
	    Successors according to CFG: BB#0(?%)

128B	BB#0: derived from LLVM BB %entry
	    Live Ins: %R0 %R1
	    Predecessors according to CFG: BB#4
144B		%vreg6<def> = COPY %R1; GPR32:%vreg6
160B		%vreg5<def> = COPY %R0; GPR32:%vreg5
176B		%vreg0<def> = IMULrr_r32 %vreg6, %vreg6, %STATUS<imp-def,dead>; GPR32:%vreg0,%vreg6,%vreg6
192B		%vreg7<def> = CMPri_r32 %vreg0, 0, %STATUS<imp-def>; GPR32:%vreg7,%vreg0
208B		BCC <BB#3>, 0, %STATUS<imp-use>
224B		BNONE32 <BB#1>, %STATUS<imp-use>
	    Successors according to CFG: BB#3(0x30000000 / 0x80000000 = 37.50%) BB#1(0x50000000 / 0x80000000 = 62.50%)

240B	BB#1: derived from LLVM BB %for.body.preheader
	    Predecessors according to CFG: BB#0
256B		%vreg8<def> = MOVi32ri 0; GPR32:%vreg8
	    Successors according to CFG: BB#2(?%)

272B	BB#2: derived from LLVM BB %for.body
	    Predecessors according to CFG: BB#1 BB#2
288B		%vreg1<def> = PHI %vreg5, <BB#1>, %vreg4, <BB#2>; GPR32:%vreg1,%vreg5,%vreg4
304B		%vreg2<def> = PHI %vreg8, <BB#1>, %vreg3, <BB#2>; GPR32:%vreg2,%vreg8,%vreg3
320B		%vreg4<def> = ADDri_r32 %vreg1, 4, %STATUS<imp-def,dead>; GPR32:%vreg4,%vreg1
336B		%vreg9<def> = MOVi32ri 0; GPR32:%vreg9
352B		STRi32_r32 %vreg9<kill>, %vreg1, 0; mem:Volatile ST4[%lsr.iv](tbaa=!2) GPR32:%vreg9,%vreg1
368B		%vreg3<def> = ADDri_r32 %vreg2, 1, %STATUS<imp-def,dead>; GPR32:%vreg3,%vreg2
384B		%vreg10<def> = CMPrr_r32 %vreg3, %vreg0, %STATUS<imp-def>; GPR32:%vreg10,%vreg3,%vreg0
400B		BCC <BB#2>, 8, %STATUS<imp-use>
416B		BNONE32 <BB#3>, %STATUS<imp-use>
	    Successors according to CFG: BB#2(0x7c000000 / 0x80000000 = 96.88%) BB#3(0x04000000 / 0x80000000 = 3.12%)

432B	BB#3: derived from LLVM BB %for.end
	    Predecessors according to CFG: BB#0 BB#2
448B		%vreg14<def> = LDRi32_r32 <fi#0>, 0; mem:LD4[FixedStack0] GPR32:%vreg14
464B		GID
480B		%CONFIG<def> = MOVTS32_core %vreg14<kill>; GPR32:%vreg14
496B		GIE %CONFIG<imp-use,kill>
512B		RTS

# End machine code for function matclr.

********** Stack Coloring **********
********** Function: matclr
Found 0 markers and 2 slots
Slot structure:
Slot #0 - 4 bytes.
Slot #1 - 4 bytes.
Total Stack size: 8 bytes

Will not try to merge slots.
Removed 0 markers.
# *** IR Dump After Merge disjoint stack slots ***:
# Machine code for function matclr: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
Function Live Ins: %R0 in %vreg5, %R1 in %vreg6

BB#4: 
    Live Ins: %R0 %R1
	GID %CONFIG<imp-def>
	%vreg13<def> = MOVFS32_core %CONFIG<kill>; GPR32:%vreg13
	STRi32_r32 %vreg13, <fi#0>, 0; mem:ST4[FixedStack0] GPR32:%vreg13
	%vreg12<def,tied1> = MOVTi32ri %vreg13<kill,tied0>, 72; GPR32:%vreg12,%vreg13
	STRi32_r32 %vreg12, <fi#1>, 0; mem:ST4[FixedStack1] GPR32:%vreg12
	%CONFIG<def> = MOVTS32_core %vreg12<kill>; GPR32:%vreg12
	GIE %CONFIG<imp-use,kill>
    Successors according to CFG: BB#0(?%)

BB#0: derived from LLVM BB %entry
    Live Ins: %R0 %R1
    Predecessors according to CFG: BB#4
	%vreg6<def> = COPY %R1; GPR32:%vreg6
	%vreg5<def> = COPY %R0; GPR32:%vreg5
	%vreg0<def> = IMULrr_r32 %vreg6, %vreg6, %STATUS<imp-def,dead>; GPR32:%vreg0,%vreg6,%vreg6
	%vreg7<def> = CMPri_r32 %vreg0, 0, %STATUS<imp-def>; GPR32:%vreg7,%vreg0
	BCC <BB#3>, 0, %STATUS<imp-use>
	BNONE32 <BB#1>, %STATUS<imp-use>
    Successors according to CFG: BB#3(0x30000000 / 0x80000000 = 37.50%) BB#1(0x50000000 / 0x80000000 = 62.50%)

BB#1: derived from LLVM BB %for.body.preheader
    Predecessors according to CFG: BB#0
	%vreg8<def> = MOVi32ri 0; GPR32:%vreg8
    Successors according to CFG: BB#2(?%)

BB#2: derived from LLVM BB %for.body
    Predecessors according to CFG: BB#1 BB#2
	%vreg1<def> = PHI %vreg5, <BB#1>, %vreg4, <BB#2>; GPR32:%vreg1,%vreg5,%vreg4
	%vreg2<def> = PHI %vreg8, <BB#1>, %vreg3, <BB#2>; GPR32:%vreg2,%vreg8,%vreg3
	%vreg4<def> = ADDri_r32 %vreg1, 4, %STATUS<imp-def,dead>; GPR32:%vreg4,%vreg1
	%vreg9<def> = MOVi32ri 0; GPR32:%vreg9
	STRi32_r32 %vreg9<kill>, %vreg1, 0; mem:Volatile ST4[%lsr.iv](tbaa=!2) GPR32:%vreg9,%vreg1
	%vreg3<def> = ADDri_r32 %vreg2, 1, %STATUS<imp-def,dead>; GPR32:%vreg3,%vreg2
	%vreg10<def> = CMPrr_r32 %vreg3, %vreg0, %STATUS<imp-def>; GPR32:%vreg10,%vreg3,%vreg0
	BCC <BB#2>, 8, %STATUS<imp-use>
	BNONE32 <BB#3>, %STATUS<imp-use>
    Successors according to CFG: BB#2(0x7c000000 / 0x80000000 = 96.88%) BB#3(0x04000000 / 0x80000000 = 3.12%)

BB#3: derived from LLVM BB %for.end
    Predecessors according to CFG: BB#0 BB#2
	%vreg14<def> = LDRi32_r32 <fi#0>, 0; mem:LD4[FixedStack0] GPR32:%vreg14
	GID
	%CONFIG<def> = MOVTS32_core %vreg14<kill>; GPR32:%vreg14
	GIE %CONFIG<imp-use,kill>
	RTS

# End machine code for function matclr.

# *** IR Dump Before Local Stack Slot Allocation ***:
# Machine code for function matclr: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
Function Live Ins: %R0 in %vreg5, %R1 in %vreg6

BB#4: 
    Live Ins: %R0 %R1
	GID %CONFIG<imp-def>
	%vreg13<def> = MOVFS32_core %CONFIG<kill>; GPR32:%vreg13
	STRi32_r32 %vreg13, <fi#0>, 0; mem:ST4[FixedStack0] GPR32:%vreg13
	%vreg12<def,tied1> = MOVTi32ri %vreg13<kill,tied0>, 72; GPR32:%vreg12,%vreg13
	STRi32_r32 %vreg12, <fi#1>, 0; mem:ST4[FixedStack1] GPR32:%vreg12
	%CONFIG<def> = MOVTS32_core %vreg12<kill>; GPR32:%vreg12
	GIE %CONFIG<imp-use,kill>
    Successors according to CFG: BB#0(?%)

BB#0: derived from LLVM BB %entry
    Live Ins: %R0 %R1
    Predecessors according to CFG: BB#4
	%vreg6<def> = COPY %R1; GPR32:%vreg6
	%vreg5<def> = COPY %R0; GPR32:%vreg5
	%vreg0<def> = IMULrr_r32 %vreg6, %vreg6, %STATUS<imp-def,dead>; GPR32:%vreg0,%vreg6,%vreg6
	%vreg7<def> = CMPri_r32 %vreg0, 0, %STATUS<imp-def>; GPR32:%vreg7,%vreg0
	BCC <BB#3>, 0, %STATUS<imp-use>
	BNONE32 <BB#1>, %STATUS<imp-use>
    Successors according to CFG: BB#3(0x30000000 / 0x80000000 = 37.50%) BB#1(0x50000000 / 0x80000000 = 62.50%)

BB#1: derived from LLVM BB %for.body.preheader
    Predecessors according to CFG: BB#0
	%vreg8<def> = MOVi32ri 0; GPR32:%vreg8
    Successors according to CFG: BB#2(?%)

BB#2: derived from LLVM BB %for.body
    Predecessors according to CFG: BB#1 BB#2
	%vreg1<def> = PHI %vreg5, <BB#1>, %vreg4, <BB#2>; GPR32:%vreg1,%vreg5,%vreg4
	%vreg2<def> = PHI %vreg8, <BB#1>, %vreg3, <BB#2>; GPR32:%vreg2,%vreg8,%vreg3
	%vreg4<def> = ADDri_r32 %vreg1, 4, %STATUS<imp-def,dead>; GPR32:%vreg4,%vreg1
	%vreg9<def> = MOVi32ri 0; GPR32:%vreg9
	STRi32_r32 %vreg9<kill>, %vreg1, 0; mem:Volatile ST4[%lsr.iv](tbaa=!2) GPR32:%vreg9,%vreg1
	%vreg3<def> = ADDri_r32 %vreg2, 1, %STATUS<imp-def,dead>; GPR32:%vreg3,%vreg2
	%vreg10<def> = CMPrr_r32 %vreg3, %vreg0, %STATUS<imp-def>; GPR32:%vreg10,%vreg3,%vreg0
	BCC <BB#2>, 8, %STATUS<imp-use>
	BNONE32 <BB#3>, %STATUS<imp-use>
    Successors according to CFG: BB#2(0x7c000000 / 0x80000000 = 96.88%) BB#3(0x04000000 / 0x80000000 = 3.12%)

BB#3: derived from LLVM BB %for.end
    Predecessors according to CFG: BB#0 BB#2
	%vreg14<def> = LDRi32_r32 <fi#0>, 0; mem:LD4[FixedStack0] GPR32:%vreg14
	GID
	%CONFIG<def> = MOVTS32_core %vreg14<kill>; GPR32:%vreg14
	GIE %CONFIG<imp-use,kill>
	RTS

# End machine code for function matclr.

# *** IR Dump After Local Stack Slot Allocation ***:
# Machine code for function matclr: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
Function Live Ins: %R0 in %vreg5, %R1 in %vreg6

BB#4: 
    Live Ins: %R0 %R1
	GID %CONFIG<imp-def>
	%vreg13<def> = MOVFS32_core %CONFIG<kill>; GPR32:%vreg13
	STRi32_r32 %vreg13, <fi#0>, 0; mem:ST4[FixedStack0] GPR32:%vreg13
	%vreg12<def,tied1> = MOVTi32ri %vreg13<kill,tied0>, 72; GPR32:%vreg12,%vreg13
	STRi32_r32 %vreg12, <fi#1>, 0; mem:ST4[FixedStack1] GPR32:%vreg12
	%CONFIG<def> = MOVTS32_core %vreg12<kill>; GPR32:%vreg12
	GIE %CONFIG<imp-use,kill>
    Successors according to CFG: BB#0(?%)

BB#0: derived from LLVM BB %entry
    Live Ins: %R0 %R1
    Predecessors according to CFG: BB#4
	%vreg6<def> = COPY %R1; GPR32:%vreg6
	%vreg5<def> = COPY %R0; GPR32:%vreg5
	%vreg0<def> = IMULrr_r32 %vreg6, %vreg6, %STATUS<imp-def,dead>; GPR32:%vreg0,%vreg6,%vreg6
	%vreg7<def> = CMPri_r32 %vreg0, 0, %STATUS<imp-def>; GPR32:%vreg7,%vreg0
	BCC <BB#3>, 0, %STATUS<imp-use>
	BNONE32 <BB#1>, %STATUS<imp-use>
    Successors according to CFG: BB#3(0x30000000 / 0x80000000 = 37.50%) BB#1(0x50000000 / 0x80000000 = 62.50%)

BB#1: derived from LLVM BB %for.body.preheader
    Predecessors according to CFG: BB#0
	%vreg8<def> = MOVi32ri 0; GPR32:%vreg8
    Successors according to CFG: BB#2(?%)

BB#2: derived from LLVM BB %for.body
    Predecessors according to CFG: BB#1 BB#2
	%vreg1<def> = PHI %vreg5, <BB#1>, %vreg4, <BB#2>; GPR32:%vreg1,%vreg5,%vreg4
	%vreg2<def> = PHI %vreg8, <BB#1>, %vreg3, <BB#2>; GPR32:%vreg2,%vreg8,%vreg3
	%vreg4<def> = ADDri_r32 %vreg1, 4, %STATUS<imp-def,dead>; GPR32:%vreg4,%vreg1
	%vreg9<def> = MOVi32ri 0; GPR32:%vreg9
	STRi32_r32 %vreg9<kill>, %vreg1, 0; mem:Volatile ST4[%lsr.iv](tbaa=!2) GPR32:%vreg9,%vreg1
	%vreg3<def> = ADDri_r32 %vreg2, 1, %STATUS<imp-def,dead>; GPR32:%vreg3,%vreg2
	%vreg10<def> = CMPrr_r32 %vreg3, %vreg0, %STATUS<imp-def>; GPR32:%vreg10,%vreg3,%vreg0
	BCC <BB#2>, 8, %STATUS<imp-use>
	BNONE32 <BB#3>, %STATUS<imp-use>
    Successors according to CFG: BB#2(0x7c000000 / 0x80000000 = 96.88%) BB#3(0x04000000 / 0x80000000 = 3.12%)

BB#3: derived from LLVM BB %for.end
    Predecessors according to CFG: BB#0 BB#2
	%vreg14<def> = LDRi32_r32 <fi#0>, 0; mem:LD4[FixedStack0] GPR32:%vreg14
	GID
	%CONFIG<def> = MOVTS32_core %vreg14<kill>; GPR32:%vreg14
	GIE %CONFIG<imp-use,kill>
	RTS

# End machine code for function matclr.

# *** IR Dump Before Remove dead machine instructions ***:
# Machine code for function matclr: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
Function Live Ins: %R0 in %vreg5, %R1 in %vreg6

BB#4: 
    Live Ins: %R0 %R1
	GID %CONFIG<imp-def>
	%vreg13<def> = MOVFS32_core %CONFIG<kill>; GPR32:%vreg13
	STRi32_r32 %vreg13, <fi#0>, 0; mem:ST4[FixedStack0] GPR32:%vreg13
	%vreg12<def,tied1> = MOVTi32ri %vreg13<kill,tied0>, 72; GPR32:%vreg12,%vreg13
	STRi32_r32 %vreg12, <fi#1>, 0; mem:ST4[FixedStack1] GPR32:%vreg12
	%CONFIG<def> = MOVTS32_core %vreg12<kill>; GPR32:%vreg12
	GIE %CONFIG<imp-use,kill>
    Successors according to CFG: BB#0(?%)

BB#0: derived from LLVM BB %entry
    Live Ins: %R0 %R1
    Predecessors according to CFG: BB#4
	%vreg6<def> = COPY %R1; GPR32:%vreg6
	%vreg5<def> = COPY %R0; GPR32:%vreg5
	%vreg0<def> = IMULrr_r32 %vreg6, %vreg6, %STATUS<imp-def,dead>; GPR32:%vreg0,%vreg6,%vreg6
	%vreg7<def> = CMPri_r32 %vreg0, 0, %STATUS<imp-def>; GPR32:%vreg7,%vreg0
	BCC <BB#3>, 0, %STATUS<imp-use>
	BNONE32 <BB#1>, %STATUS<imp-use>
    Successors according to CFG: BB#3(0x30000000 / 0x80000000 = 37.50%) BB#1(0x50000000 / 0x80000000 = 62.50%)

BB#1: derived from LLVM BB %for.body.preheader
    Predecessors according to CFG: BB#0
	%vreg8<def> = MOVi32ri 0; GPR32:%vreg8
    Successors according to CFG: BB#2(?%)

BB#2: derived from LLVM BB %for.body
    Predecessors according to CFG: BB#1 BB#2
	%vreg1<def> = PHI %vreg5, <BB#1>, %vreg4, <BB#2>; GPR32:%vreg1,%vreg5,%vreg4
	%vreg2<def> = PHI %vreg8, <BB#1>, %vreg3, <BB#2>; GPR32:%vreg2,%vreg8,%vreg3
	%vreg4<def> = ADDri_r32 %vreg1, 4, %STATUS<imp-def,dead>; GPR32:%vreg4,%vreg1
	%vreg9<def> = MOVi32ri 0; GPR32:%vreg9
	STRi32_r32 %vreg9<kill>, %vreg1, 0; mem:Volatile ST4[%lsr.iv](tbaa=!2) GPR32:%vreg9,%vreg1
	%vreg3<def> = ADDri_r32 %vreg2, 1, %STATUS<imp-def,dead>; GPR32:%vreg3,%vreg2
	%vreg10<def> = CMPrr_r32 %vreg3, %vreg0, %STATUS<imp-def>; GPR32:%vreg10,%vreg3,%vreg0
	BCC <BB#2>, 8, %STATUS<imp-use>
	BNONE32 <BB#3>, %STATUS<imp-use>
    Successors according to CFG: BB#2(0x7c000000 / 0x80000000 = 96.88%) BB#3(0x04000000 / 0x80000000 = 3.12%)

BB#3: derived from LLVM BB %for.end
    Predecessors according to CFG: BB#0 BB#2
	%vreg14<def> = LDRi32_r32 <fi#0>, 0; mem:LD4[FixedStack0] GPR32:%vreg14
	GID
	%CONFIG<def> = MOVTS32_core %vreg14<kill>; GPR32:%vreg14
	GIE %CONFIG<imp-use,kill>
	RTS

# End machine code for function matclr.

# *** IR Dump After Remove dead machine instructions ***:
# Machine code for function matclr: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
Function Live Ins: %R0 in %vreg5, %R1 in %vreg6

BB#4: 
    Live Ins: %R0 %R1
	GID %CONFIG<imp-def>
	%vreg13<def> = MOVFS32_core %CONFIG<kill>; GPR32:%vreg13
	STRi32_r32 %vreg13, <fi#0>, 0; mem:ST4[FixedStack0] GPR32:%vreg13
	%vreg12<def,tied1> = MOVTi32ri %vreg13<kill,tied0>, 72; GPR32:%vreg12,%vreg13
	STRi32_r32 %vreg12, <fi#1>, 0; mem:ST4[FixedStack1] GPR32:%vreg12
	%CONFIG<def> = MOVTS32_core %vreg12<kill>; GPR32:%vreg12
	GIE %CONFIG<imp-use,kill>
    Successors according to CFG: BB#0(?%)

BB#0: derived from LLVM BB %entry
    Live Ins: %R0 %R1
    Predecessors according to CFG: BB#4
	%vreg6<def> = COPY %R1; GPR32:%vreg6
	%vreg5<def> = COPY %R0; GPR32:%vreg5
	%vreg0<def> = IMULrr_r32 %vreg6, %vreg6, %STATUS<imp-def,dead>; GPR32:%vreg0,%vreg6,%vreg6
	%vreg7<def> = CMPri_r32 %vreg0, 0, %STATUS<imp-def>; GPR32:%vreg7,%vreg0
	BCC <BB#3>, 0, %STATUS<imp-use>
	BNONE32 <BB#1>, %STATUS<imp-use>
    Successors according to CFG: BB#3(0x30000000 / 0x80000000 = 37.50%) BB#1(0x50000000 / 0x80000000 = 62.50%)

BB#1: derived from LLVM BB %for.body.preheader
    Predecessors according to CFG: BB#0
	%vreg8<def> = MOVi32ri 0; GPR32:%vreg8
    Successors according to CFG: BB#2(?%)

BB#2: derived from LLVM BB %for.body
    Predecessors according to CFG: BB#1 BB#2
	%vreg1<def> = PHI %vreg5, <BB#1>, %vreg4, <BB#2>; GPR32:%vreg1,%vreg5,%vreg4
	%vreg2<def> = PHI %vreg8, <BB#1>, %vreg3, <BB#2>; GPR32:%vreg2,%vreg8,%vreg3
	%vreg4<def> = ADDri_r32 %vreg1, 4, %STATUS<imp-def,dead>; GPR32:%vreg4,%vreg1
	%vreg9<def> = MOVi32ri 0; GPR32:%vreg9
	STRi32_r32 %vreg9<kill>, %vreg1, 0; mem:Volatile ST4[%lsr.iv](tbaa=!2) GPR32:%vreg9,%vreg1
	%vreg3<def> = ADDri_r32 %vreg2, 1, %STATUS<imp-def,dead>; GPR32:%vreg3,%vreg2
	%vreg10<def> = CMPrr_r32 %vreg3, %vreg0, %STATUS<imp-def>; GPR32:%vreg10,%vreg3,%vreg0
	BCC <BB#2>, 8, %STATUS<imp-use>
	BNONE32 <BB#3>, %STATUS<imp-use>
    Successors according to CFG: BB#2(0x7c000000 / 0x80000000 = 96.88%) BB#3(0x04000000 / 0x80000000 = 3.12%)

BB#3: derived from LLVM BB %for.end
    Predecessors according to CFG: BB#0 BB#2
	%vreg14<def> = LDRi32_r32 <fi#0>, 0; mem:LD4[FixedStack0] GPR32:%vreg14
	GID
	%CONFIG<def> = MOVTS32_core %vreg14<kill>; GPR32:%vreg14
	GIE %CONFIG<imp-use,kill>
	RTS

# End machine code for function matclr.

# *** IR Dump Before Early If-Conversion ***:
# Machine code for function matclr: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
Function Live Ins: %R0 in %vreg5, %R1 in %vreg6

BB#4: 
    Live Ins: %R0 %R1
	GID %CONFIG<imp-def>
	%vreg13<def> = MOVFS32_core %CONFIG<kill>; GPR32:%vreg13
	STRi32_r32 %vreg13, <fi#0>, 0; mem:ST4[FixedStack0] GPR32:%vreg13
	%vreg12<def,tied1> = MOVTi32ri %vreg13<kill,tied0>, 72; GPR32:%vreg12,%vreg13
	STRi32_r32 %vreg12, <fi#1>, 0; mem:ST4[FixedStack1] GPR32:%vreg12
	%CONFIG<def> = MOVTS32_core %vreg12<kill>; GPR32:%vreg12
	GIE %CONFIG<imp-use,kill>
    Successors according to CFG: BB#0(?%)

BB#0: derived from LLVM BB %entry
    Live Ins: %R0 %R1
    Predecessors according to CFG: BB#4
	%vreg6<def> = COPY %R1; GPR32:%vreg6
	%vreg5<def> = COPY %R0; GPR32:%vreg5
	%vreg0<def> = IMULrr_r32 %vreg6, %vreg6, %STATUS<imp-def,dead>; GPR32:%vreg0,%vreg6,%vreg6
	%vreg7<def> = CMPri_r32 %vreg0, 0, %STATUS<imp-def>; GPR32:%vreg7,%vreg0
	BCC <BB#3>, 0, %STATUS<imp-use>
	BNONE32 <BB#1>, %STATUS<imp-use>
    Successors according to CFG: BB#3(0x30000000 / 0x80000000 = 37.50%) BB#1(0x50000000 / 0x80000000 = 62.50%)

BB#1: derived from LLVM BB %for.body.preheader
    Predecessors according to CFG: BB#0
	%vreg8<def> = MOVi32ri 0; GPR32:%vreg8
    Successors according to CFG: BB#2(?%)

BB#2: derived from LLVM BB %for.body
    Predecessors according to CFG: BB#1 BB#2
	%vreg1<def> = PHI %vreg5, <BB#1>, %vreg4, <BB#2>; GPR32:%vreg1,%vreg5,%vreg4
	%vreg2<def> = PHI %vreg8, <BB#1>, %vreg3, <BB#2>; GPR32:%vreg2,%vreg8,%vreg3
	%vreg4<def> = ADDri_r32 %vreg1, 4, %STATUS<imp-def,dead>; GPR32:%vreg4,%vreg1
	%vreg9<def> = MOVi32ri 0; GPR32:%vreg9
	STRi32_r32 %vreg9<kill>, %vreg1, 0; mem:Volatile ST4[%lsr.iv](tbaa=!2) GPR32:%vreg9,%vreg1
	%vreg3<def> = ADDri_r32 %vreg2, 1, %STATUS<imp-def,dead>; GPR32:%vreg3,%vreg2
	%vreg10<def> = CMPrr_r32 %vreg3, %vreg0, %STATUS<imp-def>; GPR32:%vreg10,%vreg3,%vreg0
	BCC <BB#2>, 8, %STATUS<imp-use>
	BNONE32 <BB#3>, %STATUS<imp-use>
    Successors according to CFG: BB#2(0x7c000000 / 0x80000000 = 96.88%) BB#3(0x04000000 / 0x80000000 = 3.12%)

BB#3: derived from LLVM BB %for.end
    Predecessors according to CFG: BB#0 BB#2
	%vreg14<def> = LDRi32_r32 <fi#0>, 0; mem:LD4[FixedStack0] GPR32:%vreg14
	GID
	%CONFIG<def> = MOVTS32_core %vreg14<kill>; GPR32:%vreg14
	GIE %CONFIG<imp-use,kill>
	RTS

# End machine code for function matclr.

********** EARLY IF-CONVERSION **********
********** Function: matclr
# *** IR Dump After Early If-Conversion ***:
# Machine code for function matclr: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
Function Live Ins: %R0 in %vreg5, %R1 in %vreg6

BB#4: 
    Live Ins: %R0 %R1
	GID %CONFIG<imp-def>
	%vreg13<def> = MOVFS32_core %CONFIG<kill>; GPR32:%vreg13
	STRi32_r32 %vreg13, <fi#0>, 0; mem:ST4[FixedStack0] GPR32:%vreg13
	%vreg12<def,tied1> = MOVTi32ri %vreg13<kill,tied0>, 72; GPR32:%vreg12,%vreg13
	STRi32_r32 %vreg12, <fi#1>, 0; mem:ST4[FixedStack1] GPR32:%vreg12
	%CONFIG<def> = MOVTS32_core %vreg12<kill>; GPR32:%vreg12
	GIE %CONFIG<imp-use,kill>
    Successors according to CFG: BB#0(?%)

BB#0: derived from LLVM BB %entry
    Live Ins: %R0 %R1
    Predecessors according to CFG: BB#4
	%vreg6<def> = COPY %R1; GPR32:%vreg6
	%vreg5<def> = COPY %R0; GPR32:%vreg5
	%vreg0<def> = IMULrr_r32 %vreg6, %vreg6, %STATUS<imp-def,dead>; GPR32:%vreg0,%vreg6,%vreg6
	%vreg7<def> = CMPri_r32 %vreg0, 0, %STATUS<imp-def>; GPR32:%vreg7,%vreg0
	BCC <BB#3>, 0, %STATUS<imp-use>
	BNONE32 <BB#1>, %STATUS<imp-use>
    Successors according to CFG: BB#3(0x30000000 / 0x80000000 = 37.50%) BB#1(0x50000000 / 0x80000000 = 62.50%)

BB#1: derived from LLVM BB %for.body.preheader
    Predecessors according to CFG: BB#0
	%vreg8<def> = MOVi32ri 0; GPR32:%vreg8
    Successors according to CFG: BB#2(?%)

BB#2: derived from LLVM BB %for.body
    Predecessors according to CFG: BB#1 BB#2
	%vreg1<def> = PHI %vreg5, <BB#1>, %vreg4, <BB#2>; GPR32:%vreg1,%vreg5,%vreg4
	%vreg2<def> = PHI %vreg8, <BB#1>, %vreg3, <BB#2>; GPR32:%vreg2,%vreg8,%vreg3
	%vreg4<def> = ADDri_r32 %vreg1, 4, %STATUS<imp-def,dead>; GPR32:%vreg4,%vreg1
	%vreg9<def> = MOVi32ri 0; GPR32:%vreg9
	STRi32_r32 %vreg9<kill>, %vreg1, 0; mem:Volatile ST4[%lsr.iv](tbaa=!2) GPR32:%vreg9,%vreg1
	%vreg3<def> = ADDri_r32 %vreg2, 1, %STATUS<imp-def,dead>; GPR32:%vreg3,%vreg2
	%vreg10<def> = CMPrr_r32 %vreg3, %vreg0, %STATUS<imp-def>; GPR32:%vreg10,%vreg3,%vreg0
	BCC <BB#2>, 8, %STATUS<imp-use>
	BNONE32 <BB#3>, %STATUS<imp-use>
    Successors according to CFG: BB#2(0x7c000000 / 0x80000000 = 96.88%) BB#3(0x04000000 / 0x80000000 = 3.12%)

BB#3: derived from LLVM BB %for.end
    Predecessors according to CFG: BB#0 BB#2
	%vreg14<def> = LDRi32_r32 <fi#0>, 0; mem:LD4[FixedStack0] GPR32:%vreg14
	GID
	%CONFIG<def> = MOVTS32_core %vreg14<kill>; GPR32:%vreg14
	GIE %CONFIG<imp-use,kill>
	RTS

# End machine code for function matclr.

# *** IR Dump Before Machine Loop Invariant Code Motion ***:
# Machine code for function matclr: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
Function Live Ins: %R0 in %vreg5, %R1 in %vreg6

BB#4: 
    Live Ins: %R0 %R1
	GID %CONFIG<imp-def>
	%vreg13<def> = MOVFS32_core %CONFIG<kill>; GPR32:%vreg13
	STRi32_r32 %vreg13, <fi#0>, 0; mem:ST4[FixedStack0] GPR32:%vreg13
	%vreg12<def,tied1> = MOVTi32ri %vreg13<kill,tied0>, 72; GPR32:%vreg12,%vreg13
	STRi32_r32 %vreg12, <fi#1>, 0; mem:ST4[FixedStack1] GPR32:%vreg12
	%CONFIG<def> = MOVTS32_core %vreg12<kill>; GPR32:%vreg12
	GIE %CONFIG<imp-use,kill>
    Successors according to CFG: BB#0(?%)

BB#0: derived from LLVM BB %entry
    Live Ins: %R0 %R1
    Predecessors according to CFG: BB#4
	%vreg6<def> = COPY %R1; GPR32:%vreg6
	%vreg5<def> = COPY %R0; GPR32:%vreg5
	%vreg0<def> = IMULrr_r32 %vreg6, %vreg6, %STATUS<imp-def,dead>; GPR32:%vreg0,%vreg6,%vreg6
	%vreg7<def> = CMPri_r32 %vreg0, 0, %STATUS<imp-def>; GPR32:%vreg7,%vreg0
	BCC <BB#3>, 0, %STATUS<imp-use>
	BNONE32 <BB#1>, %STATUS<imp-use>
    Successors according to CFG: BB#3(0x30000000 / 0x80000000 = 37.50%) BB#1(0x50000000 / 0x80000000 = 62.50%)

BB#1: derived from LLVM BB %for.body.preheader
    Predecessors according to CFG: BB#0
	%vreg8<def> = MOVi32ri 0; GPR32:%vreg8
    Successors according to CFG: BB#2(?%)

BB#2: derived from LLVM BB %for.body
    Predecessors according to CFG: BB#1 BB#2
	%vreg1<def> = PHI %vreg5, <BB#1>, %vreg4, <BB#2>; GPR32:%vreg1,%vreg5,%vreg4
	%vreg2<def> = PHI %vreg8, <BB#1>, %vreg3, <BB#2>; GPR32:%vreg2,%vreg8,%vreg3
	%vreg4<def> = ADDri_r32 %vreg1, 4, %STATUS<imp-def,dead>; GPR32:%vreg4,%vreg1
	%vreg9<def> = MOVi32ri 0; GPR32:%vreg9
	STRi32_r32 %vreg9<kill>, %vreg1, 0; mem:Volatile ST4[%lsr.iv](tbaa=!2) GPR32:%vreg9,%vreg1
	%vreg3<def> = ADDri_r32 %vreg2, 1, %STATUS<imp-def,dead>; GPR32:%vreg3,%vreg2
	%vreg10<def> = CMPrr_r32 %vreg3, %vreg0, %STATUS<imp-def>; GPR32:%vreg10,%vreg3,%vreg0
	BCC <BB#2>, 8, %STATUS<imp-use>
	BNONE32 <BB#3>, %STATUS<imp-use>
    Successors according to CFG: BB#2(0x7c000000 / 0x80000000 = 96.88%) BB#3(0x04000000 / 0x80000000 = 3.12%)

BB#3: derived from LLVM BB %for.end
    Predecessors according to CFG: BB#0 BB#2
	%vreg14<def> = LDRi32_r32 <fi#0>, 0; mem:LD4[FixedStack0] GPR32:%vreg14
	GID
	%CONFIG<def> = MOVTS32_core %vreg14<kill>; GPR32:%vreg14
	GIE %CONFIG<imp-use,kill>
	RTS

# End machine code for function matclr.

******** Pre-regalloc Machine LICM: matclr ********

<----------------->
Analyzing block 1
BB#1: derived from LLVM BB %for.body.preheader
    Predecessors according to CFG: BB#0
	%vreg8<def> = MOVi32ri 0; GPR32:%vreg8
    Successors according to CFG: BB#2(?%)

<----------------->
Analyzing block 0
BB#0: derived from LLVM BB %entry
    Live Ins: %R0 %R1
    Predecessors according to CFG: BB#4
	%vreg6<def> = COPY %R1; GPR32:%vreg6
	%vreg5<def> = COPY %R0; GPR32:%vreg5
	%vreg0<def> = IMULrr_r32 %vreg6, %vreg6, %STATUS<imp-def,dead>; GPR32:%vreg0,%vreg6,%vreg6
	%vreg7<def> = CMPri_r32 %vreg0, 0, %STATUS<imp-def>; GPR32:%vreg7,%vreg0
	BCC <BB#3>, 0, %STATUS<imp-use>
	BNONE32 <BB#1>, %STATUS<imp-use>
    Successors according to CFG: BB#3(0x30000000 / 0x80000000 = 37.50%) BB#1(0x50000000 / 0x80000000 = 62.50%)
Entering BB#2
Hoist non-reg-pressure: %vreg9<def> = MOVi32ri 0; GPR32:%vreg9
Hoisting %vreg9<def> = MOVi32ri 0; GPR32:%vreg9
 from BB#2 to BB#1
CSEing %vreg9<def> = MOVi32ri 0; GPR32:%vreg9
 with %vreg8<def> = MOVi32ri 0; GPR32:%vreg8
Exiting BB#2
# *** IR Dump After Machine Loop Invariant Code Motion ***:
# Machine code for function matclr: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
Function Live Ins: %R0 in %vreg5, %R1 in %vreg6

BB#4: 
    Live Ins: %R0 %R1
	GID %CONFIG<imp-def>
	%vreg13<def> = MOVFS32_core %CONFIG<kill>; GPR32:%vreg13
	STRi32_r32 %vreg13, <fi#0>, 0; mem:ST4[FixedStack0] GPR32:%vreg13
	%vreg12<def,tied1> = MOVTi32ri %vreg13<kill,tied0>, 72; GPR32:%vreg12,%vreg13
	STRi32_r32 %vreg12, <fi#1>, 0; mem:ST4[FixedStack1] GPR32:%vreg12
	%CONFIG<def> = MOVTS32_core %vreg12<kill>; GPR32:%vreg12
	GIE %CONFIG<imp-use,kill>
    Successors according to CFG: BB#0(?%)

BB#0: derived from LLVM BB %entry
    Live Ins: %R0 %R1
    Predecessors according to CFG: BB#4
	%vreg6<def> = COPY %R1; GPR32:%vreg6
	%vreg5<def> = COPY %R0; GPR32:%vreg5
	%vreg0<def> = IMULrr_r32 %vreg6, %vreg6, %STATUS<imp-def,dead>; GPR32:%vreg0,%vreg6,%vreg6
	%vreg7<def> = CMPri_r32 %vreg0, 0, %STATUS<imp-def>; GPR32:%vreg7,%vreg0
	BCC <BB#3>, 0, %STATUS<imp-use>
	BNONE32 <BB#1>, %STATUS<imp-use>
    Successors according to CFG: BB#3(0x30000000 / 0x80000000 = 37.50%) BB#1(0x50000000 / 0x80000000 = 62.50%)

BB#1: derived from LLVM BB %for.body.preheader
    Predecessors according to CFG: BB#0
	%vreg8<def> = MOVi32ri 0; GPR32:%vreg8
    Successors according to CFG: BB#2(?%)

BB#2: derived from LLVM BB %for.body
    Predecessors according to CFG: BB#1 BB#2
	%vreg1<def> = PHI %vreg5, <BB#1>, %vreg4, <BB#2>; GPR32:%vreg1,%vreg5,%vreg4
	%vreg2<def> = PHI %vreg8, <BB#1>, %vreg3, <BB#2>; GPR32:%vreg2,%vreg8,%vreg3
	%vreg4<def> = ADDri_r32 %vreg1, 4, %STATUS<imp-def,dead>; GPR32:%vreg4,%vreg1
	STRi32_r32 %vreg8, %vreg1, 0; mem:Volatile ST4[%lsr.iv](tbaa=!2) GPR32:%vreg8,%vreg1
	%vreg3<def> = ADDri_r32 %vreg2, 1, %STATUS<imp-def,dead>; GPR32:%vreg3,%vreg2
	%vreg10<def> = CMPrr_r32 %vreg3, %vreg0, %STATUS<imp-def>; GPR32:%vreg10,%vreg3,%vreg0
	BCC <BB#2>, 8, %STATUS<imp-use>
	BNONE32 <BB#3>, %STATUS<imp-use>
    Successors according to CFG: BB#2(0x7c000000 / 0x80000000 = 96.88%) BB#3(0x04000000 / 0x80000000 = 3.12%)

BB#3: derived from LLVM BB %for.end
    Predecessors according to CFG: BB#0 BB#2
	%vreg14<def> = LDRi32_r32 <fi#0>, 0; mem:LD4[FixedStack0] GPR32:%vreg14
	GID
	%CONFIG<def> = MOVTS32_core %vreg14<kill>; GPR32:%vreg14
	GIE %CONFIG<imp-use,kill>
	RTS

# End machine code for function matclr.

# *** IR Dump Before Machine Common Subexpression Elimination ***:
# Machine code for function matclr: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
Function Live Ins: %R0 in %vreg5, %R1 in %vreg6

BB#4: 
    Live Ins: %R0 %R1
	GID %CONFIG<imp-def>
	%vreg13<def> = MOVFS32_core %CONFIG<kill>; GPR32:%vreg13
	STRi32_r32 %vreg13, <fi#0>, 0; mem:ST4[FixedStack0] GPR32:%vreg13
	%vreg12<def,tied1> = MOVTi32ri %vreg13<kill,tied0>, 72; GPR32:%vreg12,%vreg13
	STRi32_r32 %vreg12, <fi#1>, 0; mem:ST4[FixedStack1] GPR32:%vreg12
	%CONFIG<def> = MOVTS32_core %vreg12<kill>; GPR32:%vreg12
	GIE %CONFIG<imp-use,kill>
    Successors according to CFG: BB#0(?%)

BB#0: derived from LLVM BB %entry
    Live Ins: %R0 %R1
    Predecessors according to CFG: BB#4
	%vreg6<def> = COPY %R1; GPR32:%vreg6
	%vreg5<def> = COPY %R0; GPR32:%vreg5
	%vreg0<def> = IMULrr_r32 %vreg6, %vreg6, %STATUS<imp-def,dead>; GPR32:%vreg0,%vreg6,%vreg6
	%vreg7<def> = CMPri_r32 %vreg0, 0, %STATUS<imp-def>; GPR32:%vreg7,%vreg0
	BCC <BB#3>, 0, %STATUS<imp-use>
	BNONE32 <BB#1>, %STATUS<imp-use>
    Successors according to CFG: BB#3(0x30000000 / 0x80000000 = 37.50%) BB#1(0x50000000 / 0x80000000 = 62.50%)

BB#1: derived from LLVM BB %for.body.preheader
    Predecessors according to CFG: BB#0
	%vreg8<def> = MOVi32ri 0; GPR32:%vreg8
    Successors according to CFG: BB#2(?%)

BB#2: derived from LLVM BB %for.body
    Predecessors according to CFG: BB#1 BB#2
	%vreg1<def> = PHI %vreg5, <BB#1>, %vreg4, <BB#2>; GPR32:%vreg1,%vreg5,%vreg4
	%vreg2<def> = PHI %vreg8, <BB#1>, %vreg3, <BB#2>; GPR32:%vreg2,%vreg8,%vreg3
	%vreg4<def> = ADDri_r32 %vreg1, 4, %STATUS<imp-def,dead>; GPR32:%vreg4,%vreg1
	STRi32_r32 %vreg8, %vreg1, 0; mem:Volatile ST4[%lsr.iv](tbaa=!2) GPR32:%vreg8,%vreg1
	%vreg3<def> = ADDri_r32 %vreg2, 1, %STATUS<imp-def,dead>; GPR32:%vreg3,%vreg2
	%vreg10<def> = CMPrr_r32 %vreg3, %vreg0, %STATUS<imp-def>; GPR32:%vreg10,%vreg3,%vreg0
	BCC <BB#2>, 8, %STATUS<imp-use>
	BNONE32 <BB#3>, %STATUS<imp-use>
    Successors according to CFG: BB#2(0x7c000000 / 0x80000000 = 96.88%) BB#3(0x04000000 / 0x80000000 = 3.12%)

BB#3: derived from LLVM BB %for.end
    Predecessors according to CFG: BB#0 BB#2
	%vreg14<def> = LDRi32_r32 <fi#0>, 0; mem:LD4[FixedStack0] GPR32:%vreg14
	GID
	%CONFIG<def> = MOVTS32_core %vreg14<kill>; GPR32:%vreg14
	GIE %CONFIG<imp-use,kill>
	RTS

# End machine code for function matclr.

Entering: (null)
Entering: entry
Entering: for.body.preheader
Entering: for.body
Exiting: for.body
Exiting: for.body.preheader
Entering: for.end
Exiting: for.end
Exiting: entry
Exiting: (null)
# *** IR Dump After Machine Common Subexpression Elimination ***:
# Machine code for function matclr: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
Function Live Ins: %R0 in %vreg5, %R1 in %vreg6

BB#4: 
    Live Ins: %R0 %R1
	GID %CONFIG<imp-def>
	%vreg13<def> = MOVFS32_core %CONFIG<kill>; GPR32:%vreg13
	STRi32_r32 %vreg13, <fi#0>, 0; mem:ST4[FixedStack0] GPR32:%vreg13
	%vreg12<def,tied1> = MOVTi32ri %vreg13<kill,tied0>, 72; GPR32:%vreg12,%vreg13
	STRi32_r32 %vreg12, <fi#1>, 0; mem:ST4[FixedStack1] GPR32:%vreg12
	%CONFIG<def> = MOVTS32_core %vreg12<kill>; GPR32:%vreg12
	GIE %CONFIG<imp-use,kill>
    Successors according to CFG: BB#0(?%)

BB#0: derived from LLVM BB %entry
    Live Ins: %R0 %R1
    Predecessors according to CFG: BB#4
	%vreg6<def> = COPY %R1; GPR32:%vreg6
	%vreg5<def> = COPY %R0; GPR32:%vreg5
	%vreg0<def> = IMULrr_r32 %vreg6, %vreg6, %STATUS<imp-def,dead>; GPR32:%vreg0,%vreg6,%vreg6
	%vreg7<def> = CMPri_r32 %vreg0, 0, %STATUS<imp-def>; GPR32:%vreg7,%vreg0
	BCC <BB#3>, 0, %STATUS<imp-use>
	BNONE32 <BB#1>, %STATUS<imp-use>
    Successors according to CFG: BB#3(0x30000000 / 0x80000000 = 37.50%) BB#1(0x50000000 / 0x80000000 = 62.50%)

BB#1: derived from LLVM BB %for.body.preheader
    Predecessors according to CFG: BB#0
	%vreg8<def> = MOVi32ri 0; GPR32:%vreg8
    Successors according to CFG: BB#2(?%)

BB#2: derived from LLVM BB %for.body
    Predecessors according to CFG: BB#1 BB#2
	%vreg1<def> = PHI %vreg5, <BB#1>, %vreg4, <BB#2>; GPR32:%vreg1,%vreg5,%vreg4
	%vreg2<def> = PHI %vreg8, <BB#1>, %vreg3, <BB#2>; GPR32:%vreg2,%vreg8,%vreg3
	%vreg4<def> = ADDri_r32 %vreg1, 4, %STATUS<imp-def,dead>; GPR32:%vreg4,%vreg1
	STRi32_r32 %vreg8, %vreg1, 0; mem:Volatile ST4[%lsr.iv](tbaa=!2) GPR32:%vreg8,%vreg1
	%vreg3<def> = ADDri_r32 %vreg2, 1, %STATUS<imp-def,dead>; GPR32:%vreg3,%vreg2
	%vreg10<def> = CMPrr_r32 %vreg3, %vreg0, %STATUS<imp-def>; GPR32:%vreg10,%vreg3,%vreg0
	BCC <BB#2>, 8, %STATUS<imp-use>
	BNONE32 <BB#3>, %STATUS<imp-use>
    Successors according to CFG: BB#2(0x7c000000 / 0x80000000 = 96.88%) BB#3(0x04000000 / 0x80000000 = 3.12%)

BB#3: derived from LLVM BB %for.end
    Predecessors according to CFG: BB#0 BB#2
	%vreg14<def> = LDRi32_r32 <fi#0>, 0; mem:LD4[FixedStack0] GPR32:%vreg14
	GID
	%CONFIG<def> = MOVTS32_core %vreg14<kill>; GPR32:%vreg14
	GIE %CONFIG<imp-use,kill>
	RTS

# End machine code for function matclr.


block-frequency: matclr
=======================
reverse-post-order-traversal
 - 0: BB4
 - 1: BB0[entry]
 - 2: BB1[for.body.preheader]
 - 3: BB2[for.body]
 - 4: BB3[for.end]
loop-detection
 - loop = BB2[for.body]
compute-mass-in-loop: BB2[for.body]*
 - node: BB2[for.body]
  => [backedge] weight = 2080374784
  => [  exit  ] weight = 67108864, succ = BB3[for.end]
  => mass:  ffffffffffffffff
  => assign f7ffffffffffffff (0800000000000000) [back] to BB2[for.body]
  => assign 0800000000000000 (0000000000000000) [exit] to BB3[for.end]
compute-loop-scale: BB2[for.body]*
 - exit-mass = 0800000000000000 (ffffffffffffffff - f7ffffffffffffff)
 - scale = 32.0
packaging-loop: BB2[for.body]*
 - node: BB2[for.body]
compute-mass-in-function
 - node: BB4
  => [ local  ] weight = 2147483648, succ = BB0[entry]
  => mass:  ffffffffffffffff
  => assign ffffffffffffffff (0000000000000000) to BB0[entry]
 - node: BB0[entry]
  => [ local  ] weight = 805306368, succ = BB3[for.end]
  => [ local  ] weight = 1342177280, succ = BB1[for.body.preheader]
  => mass:  ffffffffffffffff
  => assign 9fffffffffffffff (6000000000000000) to BB1[for.body.preheader]
  => assign 6000000000000000 (0000000000000000) to BB3[for.end]
 - node: BB1[for.body.preheader]
  => [ local  ] weight = 2147483648, succ = BB2[for.body]
  => mass:  9fffffffffffffff
  => assign 9fffffffffffffff (0000000000000000) to BB2[for.body]
 - node: BB2[for.body]
  => [ local  ] weight = 576460752303423488, succ = BB3[for.end]
  => mass:  9fffffffffffffff
  => assign 9fffffffffffffff (0000000000000000) to BB3[for.end]
 - node: BB3[for.end]
  => mass:  ffffffffffffffff
unwrap-loop-package: BB2[for.body]*: mass = 9fffffffffffffff, scale = 32.0
  => combined-scale = 20.0
 - BB2[for.body]: 1.0 => 20.0
float-to-int: min = 0.625, max = 20.0, factor = 12.8
 - BB4: float = 1.0, scaled = 12.8, int = 12
 - BB0[entry]: float = 1.0, scaled = 12.8, int = 12
 - BB1[for.body.preheader]: float = 0.625, scaled = 8.0, int = 8
 - BB2[for.body]: float = 20.0, scaled = 256.0, int = 255
 - BB3[for.end]: float = 1.0, scaled = 12.8, int = 12
block-frequency-info: matclr
 - BB4: float = 1.0, int = 12
 - BB0[entry]: float = 1.0, int = 12
 - BB1[for.body.preheader]: float = 0.625, int = 8
 - BB2[for.body]: float = 20.0, int = 255
 - BB3[for.end]: float = 1.0, int = 12

# *** IR Dump Before Machine code sinking ***:
# Machine code for function matclr: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
Function Live Ins: %R0 in %vreg5, %R1 in %vreg6

BB#4: 
    Live Ins: %R0 %R1
	GID %CONFIG<imp-def>
	%vreg13<def> = MOVFS32_core %CONFIG<kill>; GPR32:%vreg13
	STRi32_r32 %vreg13, <fi#0>, 0; mem:ST4[FixedStack0] GPR32:%vreg13
	%vreg12<def,tied1> = MOVTi32ri %vreg13<kill,tied0>, 72; GPR32:%vreg12,%vreg13
	STRi32_r32 %vreg12, <fi#1>, 0; mem:ST4[FixedStack1] GPR32:%vreg12
	%CONFIG<def> = MOVTS32_core %vreg12<kill>; GPR32:%vreg12
	GIE %CONFIG<imp-use,kill>
    Successors according to CFG: BB#0(?%)

BB#0: derived from LLVM BB %entry
    Live Ins: %R0 %R1
    Predecessors according to CFG: BB#4
	%vreg6<def> = COPY %R1; GPR32:%vreg6
	%vreg5<def> = COPY %R0; GPR32:%vreg5
	%vreg0<def> = IMULrr_r32 %vreg6, %vreg6, %STATUS<imp-def,dead>; GPR32:%vreg0,%vreg6,%vreg6
	%vreg7<def> = CMPri_r32 %vreg0, 0, %STATUS<imp-def>; GPR32:%vreg7,%vreg0
	BCC <BB#3>, 0, %STATUS<imp-use>
	BNONE32 <BB#1>, %STATUS<imp-use>
    Successors according to CFG: BB#3(0x30000000 / 0x80000000 = 37.50%) BB#1(0x50000000 / 0x80000000 = 62.50%)

BB#1: derived from LLVM BB %for.body.preheader
    Predecessors according to CFG: BB#0
	%vreg8<def> = MOVi32ri 0; GPR32:%vreg8
    Successors according to CFG: BB#2(?%)

BB#2: derived from LLVM BB %for.body
    Predecessors according to CFG: BB#1 BB#2
	%vreg1<def> = PHI %vreg5, <BB#1>, %vreg4, <BB#2>; GPR32:%vreg1,%vreg5,%vreg4
	%vreg2<def> = PHI %vreg8, <BB#1>, %vreg3, <BB#2>; GPR32:%vreg2,%vreg8,%vreg3
	%vreg4<def> = ADDri_r32 %vreg1, 4, %STATUS<imp-def,dead>; GPR32:%vreg4,%vreg1
	STRi32_r32 %vreg8, %vreg1, 0; mem:Volatile ST4[%lsr.iv](tbaa=!2) GPR32:%vreg8,%vreg1
	%vreg3<def> = ADDri_r32 %vreg2, 1, %STATUS<imp-def,dead>; GPR32:%vreg3,%vreg2
	%vreg10<def> = CMPrr_r32 %vreg3, %vreg0, %STATUS<imp-def>; GPR32:%vreg10,%vreg3,%vreg0
	BCC <BB#2>, 8, %STATUS<imp-use>
	BNONE32 <BB#3>, %STATUS<imp-use>
    Successors according to CFG: BB#2(0x7c000000 / 0x80000000 = 96.88%) BB#3(0x04000000 / 0x80000000 = 3.12%)

BB#3: derived from LLVM BB %for.end
    Predecessors according to CFG: BB#0 BB#2
	%vreg14<def> = LDRi32_r32 <fi#0>, 0; mem:LD4[FixedStack0] GPR32:%vreg14
	GID
	%CONFIG<def> = MOVTS32_core %vreg14<kill>; GPR32:%vreg14
	GIE %CONFIG<imp-use,kill>
	RTS

# End machine code for function matclr.

******** Machine Sinking ********
# *** IR Dump After Machine code sinking ***:
# Machine code for function matclr: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
Function Live Ins: %R0 in %vreg5, %R1 in %vreg6

BB#4: 
    Live Ins: %R0 %R1
	GID %CONFIG<imp-def>
	%vreg13<def> = MOVFS32_core %CONFIG<kill>; GPR32:%vreg13
	STRi32_r32 %vreg13, <fi#0>, 0; mem:ST4[FixedStack0] GPR32:%vreg13
	%vreg12<def,tied1> = MOVTi32ri %vreg13<kill,tied0>, 72; GPR32:%vreg12,%vreg13
	STRi32_r32 %vreg12, <fi#1>, 0; mem:ST4[FixedStack1] GPR32:%vreg12
	%CONFIG<def> = MOVTS32_core %vreg12<kill>; GPR32:%vreg12
	GIE %CONFIG<imp-use,kill>
    Successors according to CFG: BB#0(?%)

BB#0: derived from LLVM BB %entry
    Live Ins: %R0 %R1
    Predecessors according to CFG: BB#4
	%vreg6<def> = COPY %R1; GPR32:%vreg6
	%vreg5<def> = COPY %R0; GPR32:%vreg5
	%vreg0<def> = IMULrr_r32 %vreg6, %vreg6, %STATUS<imp-def,dead>; GPR32:%vreg0,%vreg6,%vreg6
	%vreg7<def> = CMPri_r32 %vreg0, 0, %STATUS<imp-def>; GPR32:%vreg7,%vreg0
	BCC <BB#3>, 0, %STATUS<imp-use>
	BNONE32 <BB#1>, %STATUS<imp-use>
    Successors according to CFG: BB#3(0x30000000 / 0x80000000 = 37.50%) BB#1(0x50000000 / 0x80000000 = 62.50%)

BB#1: derived from LLVM BB %for.body.preheader
    Predecessors according to CFG: BB#0
	%vreg8<def> = MOVi32ri 0; GPR32:%vreg8
    Successors according to CFG: BB#2(?%)

BB#2: derived from LLVM BB %for.body
    Predecessors according to CFG: BB#1 BB#2
	%vreg1<def> = PHI %vreg5, <BB#1>, %vreg4, <BB#2>; GPR32:%vreg1,%vreg5,%vreg4
	%vreg2<def> = PHI %vreg8, <BB#1>, %vreg3, <BB#2>; GPR32:%vreg2,%vreg8,%vreg3
	%vreg4<def> = ADDri_r32 %vreg1, 4, %STATUS<imp-def,dead>; GPR32:%vreg4,%vreg1
	STRi32_r32 %vreg8, %vreg1, 0; mem:Volatile ST4[%lsr.iv](tbaa=!2) GPR32:%vreg8,%vreg1
	%vreg3<def> = ADDri_r32 %vreg2, 1, %STATUS<imp-def,dead>; GPR32:%vreg3,%vreg2
	%vreg10<def> = CMPrr_r32 %vreg3, %vreg0, %STATUS<imp-def>; GPR32:%vreg10,%vreg3,%vreg0
	BCC <BB#2>, 8, %STATUS<imp-use>
	BNONE32 <BB#3>, %STATUS<imp-use>
    Successors according to CFG: BB#2(0x7c000000 / 0x80000000 = 96.88%) BB#3(0x04000000 / 0x80000000 = 3.12%)

BB#3: derived from LLVM BB %for.end
    Predecessors according to CFG: BB#0 BB#2
	%vreg14<def> = LDRi32_r32 <fi#0>, 0; mem:LD4[FixedStack0] GPR32:%vreg14
	GID
	%CONFIG<def> = MOVTS32_core %vreg14<kill>; GPR32:%vreg14
	GIE %CONFIG<imp-use,kill>
	RTS

# End machine code for function matclr.

# *** IR Dump Before Peephole Optimizations ***:
# Machine code for function matclr: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
Function Live Ins: %R0 in %vreg5, %R1 in %vreg6

BB#4: 
    Live Ins: %R0 %R1
	GID %CONFIG<imp-def>
	%vreg13<def> = MOVFS32_core %CONFIG<kill>; GPR32:%vreg13
	STRi32_r32 %vreg13, <fi#0>, 0; mem:ST4[FixedStack0] GPR32:%vreg13
	%vreg12<def,tied1> = MOVTi32ri %vreg13<kill,tied0>, 72; GPR32:%vreg12,%vreg13
	STRi32_r32 %vreg12, <fi#1>, 0; mem:ST4[FixedStack1] GPR32:%vreg12
	%CONFIG<def> = MOVTS32_core %vreg12<kill>; GPR32:%vreg12
	GIE %CONFIG<imp-use,kill>
    Successors according to CFG: BB#0(?%)

BB#0: derived from LLVM BB %entry
    Live Ins: %R0 %R1
    Predecessors according to CFG: BB#4
	%vreg6<def> = COPY %R1; GPR32:%vreg6
	%vreg5<def> = COPY %R0; GPR32:%vreg5
	%vreg0<def> = IMULrr_r32 %vreg6, %vreg6, %STATUS<imp-def,dead>; GPR32:%vreg0,%vreg6,%vreg6
	%vreg7<def> = CMPri_r32 %vreg0, 0, %STATUS<imp-def>; GPR32:%vreg7,%vreg0
	BCC <BB#3>, 0, %STATUS<imp-use>
	BNONE32 <BB#1>, %STATUS<imp-use>
    Successors according to CFG: BB#3(0x30000000 / 0x80000000 = 37.50%) BB#1(0x50000000 / 0x80000000 = 62.50%)

BB#1: derived from LLVM BB %for.body.preheader
    Predecessors according to CFG: BB#0
	%vreg8<def> = MOVi32ri 0; GPR32:%vreg8
    Successors according to CFG: BB#2(?%)

BB#2: derived from LLVM BB %for.body
    Predecessors according to CFG: BB#1 BB#2
	%vreg1<def> = PHI %vreg5, <BB#1>, %vreg4, <BB#2>; GPR32:%vreg1,%vreg5,%vreg4
	%vreg2<def> = PHI %vreg8, <BB#1>, %vreg3, <BB#2>; GPR32:%vreg2,%vreg8,%vreg3
	%vreg4<def> = ADDri_r32 %vreg1, 4, %STATUS<imp-def,dead>; GPR32:%vreg4,%vreg1
	STRi32_r32 %vreg8, %vreg1, 0; mem:Volatile ST4[%lsr.iv](tbaa=!2) GPR32:%vreg8,%vreg1
	%vreg3<def> = ADDri_r32 %vreg2, 1, %STATUS<imp-def,dead>; GPR32:%vreg3,%vreg2
	%vreg10<def> = CMPrr_r32 %vreg3, %vreg0, %STATUS<imp-def>; GPR32:%vreg10,%vreg3,%vreg0
	BCC <BB#2>, 8, %STATUS<imp-use>
	BNONE32 <BB#3>, %STATUS<imp-use>
    Successors according to CFG: BB#2(0x7c000000 / 0x80000000 = 96.88%) BB#3(0x04000000 / 0x80000000 = 3.12%)

BB#3: derived from LLVM BB %for.end
    Predecessors according to CFG: BB#0 BB#2
	%vreg14<def> = LDRi32_r32 <fi#0>, 0; mem:LD4[FixedStack0] GPR32:%vreg14
	GID
	%CONFIG<def> = MOVTS32_core %vreg14<kill>; GPR32:%vreg14
	GIE %CONFIG<imp-use,kill>
	RTS

# End machine code for function matclr.

********** PEEPHOLE OPTIMIZER **********
********** Function: matclr
NAPhysCopy: blowing away all info due to GID %CONFIG<imp-def>

Encountered load fold barrier on GID %CONFIG<imp-def>

NAPhysCopy: blowing away all info due to %vreg13<def> = MOVFS32_core %CONFIG<kill>; GPR32:%vreg13

Encountered load fold barrier on %vreg13<def> = MOVFS32_core %CONFIG<kill>; GPR32:%vreg13

Encountered load fold barrier on STRi32_r32 %vreg13, <fi#0>, 0; mem:ST4[FixedStack0] GPR32:%vreg13

Encountered load fold barrier on STRi32_r32 %vreg12, <fi#1>, 0; mem:ST4[FixedStack1] GPR32:%vreg12

NAPhysCopy: blowing away all info due to %CONFIG<def> = MOVTS32_core %vreg12<kill>; GPR32:%vreg12

Encountered load fold barrier on %CONFIG<def> = MOVTS32_core %vreg12<kill>; GPR32:%vreg12

NAPhysCopy: blowing away all info due to GIE %CONFIG<imp-use,kill>

Encountered load fold barrier on GIE %CONFIG<imp-use,kill>

Encountered load fold barrier on STRi32_r32 %vreg8, %vreg1, 0; mem:Volatile ST4[%lsr.iv](tbaa=!2) GPR32:%vreg8,%vreg1

NAPhysCopy: blowing away all info due to GID

Encountered load fold barrier on GID

NAPhysCopy: blowing away all info due to %CONFIG<def> = MOVTS32_core %vreg14<kill>; GPR32:%vreg14

Encountered load fold barrier on %CONFIG<def> = MOVTS32_core %vreg14<kill>; GPR32:%vreg14

NAPhysCopy: blowing away all info due to GIE %CONFIG<imp-use,kill>

Encountered load fold barrier on GIE %CONFIG<imp-use,kill>

# *** IR Dump After Peephole Optimizations ***:
# Machine code for function matclr: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
Function Live Ins: %R0 in %vreg5, %R1 in %vreg6

BB#4: 
    Live Ins: %R0 %R1
	GID %CONFIG<imp-def>
	%vreg13<def> = MOVFS32_core %CONFIG<kill>; GPR32:%vreg13
	STRi32_r32 %vreg13, <fi#0>, 0; mem:ST4[FixedStack0] GPR32:%vreg13
	%vreg12<def,tied1> = MOVTi32ri %vreg13<kill,tied0>, 72; GPR32:%vreg12,%vreg13
	STRi32_r32 %vreg12, <fi#1>, 0; mem:ST4[FixedStack1] GPR32:%vreg12
	%CONFIG<def> = MOVTS32_core %vreg12<kill>; GPR32:%vreg12
	GIE %CONFIG<imp-use,kill>
    Successors according to CFG: BB#0(?%)

BB#0: derived from LLVM BB %entry
    Live Ins: %R0 %R1
    Predecessors according to CFG: BB#4
	%vreg6<def> = COPY %R1; GPR32:%vreg6
	%vreg5<def> = COPY %R0; GPR32:%vreg5
	%vreg0<def> = IMULrr_r32 %vreg6, %vreg6, %STATUS<imp-def,dead>; GPR32:%vreg0,%vreg6,%vreg6
	%vreg7<def> = CMPri_r32 %vreg0, 0, %STATUS<imp-def>; GPR32:%vreg7,%vreg0
	BCC <BB#3>, 0, %STATUS<imp-use>
	BNONE32 <BB#1>, %STATUS<imp-use>
    Successors according to CFG: BB#3(0x30000000 / 0x80000000 = 37.50%) BB#1(0x50000000 / 0x80000000 = 62.50%)

BB#1: derived from LLVM BB %for.body.preheader
    Predecessors according to CFG: BB#0
	%vreg8<def> = MOVi32ri 0; GPR32:%vreg8
    Successors according to CFG: BB#2(?%)

BB#2: derived from LLVM BB %for.body
    Predecessors according to CFG: BB#1 BB#2
	%vreg1<def> = PHI %vreg5, <BB#1>, %vreg4, <BB#2>; GPR32:%vreg1,%vreg5,%vreg4
	%vreg2<def> = PHI %vreg8, <BB#1>, %vreg3, <BB#2>; GPR32:%vreg2,%vreg8,%vreg3
	%vreg4<def> = ADDri_r32 %vreg1, 4, %STATUS<imp-def,dead>; GPR32:%vreg4,%vreg1
	STRi32_r32 %vreg8, %vreg1, 0; mem:Volatile ST4[%lsr.iv](tbaa=!2) GPR32:%vreg8,%vreg1
	%vreg3<def> = ADDri_r32 %vreg2, 1, %STATUS<imp-def,dead>; GPR32:%vreg3,%vreg2
	%vreg10<def> = CMPrr_r32 %vreg3, %vreg0, %STATUS<imp-def>; GPR32:%vreg10,%vreg3,%vreg0
	BCC <BB#2>, 8, %STATUS<imp-use>
	BNONE32 <BB#3>, %STATUS<imp-use>
    Successors according to CFG: BB#2(0x7c000000 / 0x80000000 = 96.88%) BB#3(0x04000000 / 0x80000000 = 3.12%)

BB#3: derived from LLVM BB %for.end
    Predecessors according to CFG: BB#0 BB#2
	%vreg14<def> = LDRi32_r32 <fi#0>, 0; mem:LD4[FixedStack0] GPR32:%vreg14
	GID
	%CONFIG<def> = MOVTS32_core %vreg14<kill>; GPR32:%vreg14
	GIE %CONFIG<imp-use,kill>
	RTS

# End machine code for function matclr.

# *** IR Dump Before Remove dead machine instructions ***:
# Machine code for function matclr: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
Function Live Ins: %R0 in %vreg5, %R1 in %vreg6

BB#4: 
    Live Ins: %R0 %R1
	GID %CONFIG<imp-def>
	%vreg13<def> = MOVFS32_core %CONFIG<kill>; GPR32:%vreg13
	STRi32_r32 %vreg13, <fi#0>, 0; mem:ST4[FixedStack0] GPR32:%vreg13
	%vreg12<def,tied1> = MOVTi32ri %vreg13<kill,tied0>, 72; GPR32:%vreg12,%vreg13
	STRi32_r32 %vreg12, <fi#1>, 0; mem:ST4[FixedStack1] GPR32:%vreg12
	%CONFIG<def> = MOVTS32_core %vreg12<kill>; GPR32:%vreg12
	GIE %CONFIG<imp-use,kill>
    Successors according to CFG: BB#0(?%)

BB#0: derived from LLVM BB %entry
    Live Ins: %R0 %R1
    Predecessors according to CFG: BB#4
	%vreg6<def> = COPY %R1; GPR32:%vreg6
	%vreg5<def> = COPY %R0; GPR32:%vreg5
	%vreg0<def> = IMULrr_r32 %vreg6, %vreg6, %STATUS<imp-def,dead>; GPR32:%vreg0,%vreg6,%vreg6
	%vreg7<def> = CMPri_r32 %vreg0, 0, %STATUS<imp-def>; GPR32:%vreg7,%vreg0
	BCC <BB#3>, 0, %STATUS<imp-use>
	BNONE32 <BB#1>, %STATUS<imp-use>
    Successors according to CFG: BB#3(0x30000000 / 0x80000000 = 37.50%) BB#1(0x50000000 / 0x80000000 = 62.50%)

BB#1: derived from LLVM BB %for.body.preheader
    Predecessors according to CFG: BB#0
	%vreg8<def> = MOVi32ri 0; GPR32:%vreg8
    Successors according to CFG: BB#2(?%)

BB#2: derived from LLVM BB %for.body
    Predecessors according to CFG: BB#1 BB#2
	%vreg1<def> = PHI %vreg5, <BB#1>, %vreg4, <BB#2>; GPR32:%vreg1,%vreg5,%vreg4
	%vreg2<def> = PHI %vreg8, <BB#1>, %vreg3, <BB#2>; GPR32:%vreg2,%vreg8,%vreg3
	%vreg4<def> = ADDri_r32 %vreg1, 4, %STATUS<imp-def,dead>; GPR32:%vreg4,%vreg1
	STRi32_r32 %vreg8, %vreg1, 0; mem:Volatile ST4[%lsr.iv](tbaa=!2) GPR32:%vreg8,%vreg1
	%vreg3<def> = ADDri_r32 %vreg2, 1, %STATUS<imp-def,dead>; GPR32:%vreg3,%vreg2
	%vreg10<def> = CMPrr_r32 %vreg3, %vreg0, %STATUS<imp-def>; GPR32:%vreg10,%vreg3,%vreg0
	BCC <BB#2>, 8, %STATUS<imp-use>
	BNONE32 <BB#3>, %STATUS<imp-use>
    Successors according to CFG: BB#2(0x7c000000 / 0x80000000 = 96.88%) BB#3(0x04000000 / 0x80000000 = 3.12%)

BB#3: derived from LLVM BB %for.end
    Predecessors according to CFG: BB#0 BB#2
	%vreg14<def> = LDRi32_r32 <fi#0>, 0; mem:LD4[FixedStack0] GPR32:%vreg14
	GID
	%CONFIG<def> = MOVTS32_core %vreg14<kill>; GPR32:%vreg14
	GIE %CONFIG<imp-use,kill>
	RTS

# End machine code for function matclr.

# *** IR Dump After Remove dead machine instructions ***:
# Machine code for function matclr: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
Function Live Ins: %R0 in %vreg5, %R1 in %vreg6

BB#4: 
    Live Ins: %R0 %R1
	GID %CONFIG<imp-def>
	%vreg13<def> = MOVFS32_core %CONFIG<kill>; GPR32:%vreg13
	STRi32_r32 %vreg13, <fi#0>, 0; mem:ST4[FixedStack0] GPR32:%vreg13
	%vreg12<def,tied1> = MOVTi32ri %vreg13<kill,tied0>, 72; GPR32:%vreg12,%vreg13
	STRi32_r32 %vreg12, <fi#1>, 0; mem:ST4[FixedStack1] GPR32:%vreg12
	%CONFIG<def> = MOVTS32_core %vreg12<kill>; GPR32:%vreg12
	GIE %CONFIG<imp-use,kill>
    Successors according to CFG: BB#0(?%)

BB#0: derived from LLVM BB %entry
    Live Ins: %R0 %R1
    Predecessors according to CFG: BB#4
	%vreg6<def> = COPY %R1; GPR32:%vreg6
	%vreg5<def> = COPY %R0; GPR32:%vreg5
	%vreg0<def> = IMULrr_r32 %vreg6, %vreg6, %STATUS<imp-def,dead>; GPR32:%vreg0,%vreg6,%vreg6
	%vreg7<def> = CMPri_r32 %vreg0, 0, %STATUS<imp-def>; GPR32:%vreg7,%vreg0
	BCC <BB#3>, 0, %STATUS<imp-use>
	BNONE32 <BB#1>, %STATUS<imp-use>
    Successors according to CFG: BB#3(0x30000000 / 0x80000000 = 37.50%) BB#1(0x50000000 / 0x80000000 = 62.50%)

BB#1: derived from LLVM BB %for.body.preheader
    Predecessors according to CFG: BB#0
	%vreg8<def> = MOVi32ri 0; GPR32:%vreg8
    Successors according to CFG: BB#2(?%)

BB#2: derived from LLVM BB %for.body
    Predecessors according to CFG: BB#1 BB#2
	%vreg1<def> = PHI %vreg5, <BB#1>, %vreg4, <BB#2>; GPR32:%vreg1,%vreg5,%vreg4
	%vreg2<def> = PHI %vreg8, <BB#1>, %vreg3, <BB#2>; GPR32:%vreg2,%vreg8,%vreg3
	%vreg4<def> = ADDri_r32 %vreg1, 4, %STATUS<imp-def,dead>; GPR32:%vreg4,%vreg1
	STRi32_r32 %vreg8, %vreg1, 0; mem:Volatile ST4[%lsr.iv](tbaa=!2) GPR32:%vreg8,%vreg1
	%vreg3<def> = ADDri_r32 %vreg2, 1, %STATUS<imp-def,dead>; GPR32:%vreg3,%vreg2
	%vreg10<def> = CMPrr_r32 %vreg3, %vreg0, %STATUS<imp-def>; GPR32:%vreg10,%vreg3,%vreg0
	BCC <BB#2>, 8, %STATUS<imp-use>
	BNONE32 <BB#3>, %STATUS<imp-use>
    Successors according to CFG: BB#2(0x7c000000 / 0x80000000 = 96.88%) BB#3(0x04000000 / 0x80000000 = 3.12%)

BB#3: derived from LLVM BB %for.end
    Predecessors according to CFG: BB#0 BB#2
	%vreg14<def> = LDRi32_r32 <fi#0>, 0; mem:LD4[FixedStack0] GPR32:%vreg14
	GID
	%CONFIG<def> = MOVTS32_core %vreg14<kill>; GPR32:%vreg14
	GIE %CONFIG<imp-use,kill>
	RTS

# End machine code for function matclr.

# *** IR Dump Before Remove unreachable machine basic blocks ***:
# Machine code for function matclr: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
Function Live Ins: %R0 in %vreg5, %R1 in %vreg6

BB#4: 
    Live Ins: %R0 %R1
	GID %CONFIG<imp-def>
	%vreg13<def> = MOVFS32_core %CONFIG<kill>; GPR32:%vreg13
	STRi32_r32 %vreg13, <fi#0>, 0; mem:ST4[FixedStack0] GPR32:%vreg13
	%vreg12<def,tied1> = MOVTi32ri %vreg13<kill,tied0>, 72; GPR32:%vreg12,%vreg13
	STRi32_r32 %vreg12, <fi#1>, 0; mem:ST4[FixedStack1] GPR32:%vreg12
	%CONFIG<def> = MOVTS32_core %vreg12<kill>; GPR32:%vreg12
	GIE %CONFIG<imp-use,kill>
    Successors according to CFG: BB#0(?%)

BB#0: derived from LLVM BB %entry
    Live Ins: %R0 %R1
    Predecessors according to CFG: BB#4
	%vreg6<def> = COPY %R1; GPR32:%vreg6
	%vreg5<def> = COPY %R0; GPR32:%vreg5
	%vreg0<def> = IMULrr_r32 %vreg6, %vreg6, %STATUS<imp-def,dead>; GPR32:%vreg0,%vreg6,%vreg6
	%vreg7<def> = CMPri_r32 %vreg0, 0, %STATUS<imp-def>; GPR32:%vreg7,%vreg0
	BCC <BB#3>, 0, %STATUS<imp-use>
	BNONE32 <BB#1>, %STATUS<imp-use>
    Successors according to CFG: BB#3(0x30000000 / 0x80000000 = 37.50%) BB#1(0x50000000 / 0x80000000 = 62.50%)

BB#1: derived from LLVM BB %for.body.preheader
    Predecessors according to CFG: BB#0
	%vreg8<def> = MOVi32ri 0; GPR32:%vreg8
    Successors according to CFG: BB#2(?%)

BB#2: derived from LLVM BB %for.body
    Predecessors according to CFG: BB#1 BB#2
	%vreg1<def> = PHI %vreg5, <BB#1>, %vreg4, <BB#2>; GPR32:%vreg1,%vreg5,%vreg4
	%vreg2<def> = PHI %vreg8, <BB#1>, %vreg3, <BB#2>; GPR32:%vreg2,%vreg8,%vreg3
	%vreg4<def> = ADDri_r32 %vreg1, 4, %STATUS<imp-def,dead>; GPR32:%vreg4,%vreg1
	STRi32_r32 %vreg8, %vreg1, 0; mem:Volatile ST4[%lsr.iv](tbaa=!2) GPR32:%vreg8,%vreg1
	%vreg3<def> = ADDri_r32 %vreg2, 1, %STATUS<imp-def,dead>; GPR32:%vreg3,%vreg2
	%vreg10<def> = CMPrr_r32 %vreg3, %vreg0, %STATUS<imp-def>; GPR32:%vreg10,%vreg3,%vreg0
	BCC <BB#2>, 8, %STATUS<imp-use>
	BNONE32 <BB#3>, %STATUS<imp-use>
    Successors according to CFG: BB#2(0x7c000000 / 0x80000000 = 96.88%) BB#3(0x04000000 / 0x80000000 = 3.12%)

BB#3: derived from LLVM BB %for.end
    Predecessors according to CFG: BB#0 BB#2
	%vreg14<def> = LDRi32_r32 <fi#0>, 0; mem:LD4[FixedStack0] GPR32:%vreg14
	GID
	%CONFIG<def> = MOVTS32_core %vreg14<kill>; GPR32:%vreg14
	GIE %CONFIG<imp-use,kill>
	RTS

# End machine code for function matclr.

# *** IR Dump After Remove unreachable machine basic blocks ***:
# Machine code for function matclr: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
Function Live Ins: %R0 in %vreg5, %R1 in %vreg6

BB#0: 
    Live Ins: %R0 %R1
	GID %CONFIG<imp-def>
	%vreg13<def> = MOVFS32_core %CONFIG<kill>; GPR32:%vreg13
	STRi32_r32 %vreg13, <fi#0>, 0; mem:ST4[FixedStack0] GPR32:%vreg13
	%vreg12<def,tied1> = MOVTi32ri %vreg13<kill,tied0>, 72; GPR32:%vreg12,%vreg13
	STRi32_r32 %vreg12, <fi#1>, 0; mem:ST4[FixedStack1] GPR32:%vreg12
	%CONFIG<def> = MOVTS32_core %vreg12<kill>; GPR32:%vreg12
	GIE %CONFIG<imp-use,kill>
    Successors according to CFG: BB#1(?%)

BB#1: derived from LLVM BB %entry
    Live Ins: %R0 %R1
    Predecessors according to CFG: BB#0
	%vreg6<def> = COPY %R1; GPR32:%vreg6
	%vreg5<def> = COPY %R0; GPR32:%vreg5
	%vreg0<def> = IMULrr_r32 %vreg6, %vreg6, %STATUS<imp-def,dead>; GPR32:%vreg0,%vreg6,%vreg6
	%vreg7<def> = CMPri_r32 %vreg0, 0, %STATUS<imp-def>; GPR32:%vreg7,%vreg0
	BCC <BB#4>, 0, %STATUS<imp-use>
	BNONE32 <BB#2>, %STATUS<imp-use>
    Successors according to CFG: BB#4(0x30000000 / 0x80000000 = 37.50%) BB#2(0x50000000 / 0x80000000 = 62.50%)

BB#2: derived from LLVM BB %for.body.preheader
    Predecessors according to CFG: BB#1
	%vreg8<def> = MOVi32ri 0; GPR32:%vreg8
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %for.body
    Predecessors according to CFG: BB#2 BB#3
	%vreg1<def> = PHI %vreg5, <BB#2>, %vreg4, <BB#3>; GPR32:%vreg1,%vreg5,%vreg4
	%vreg2<def> = PHI %vreg8, <BB#2>, %vreg3, <BB#3>; GPR32:%vreg2,%vreg8,%vreg3
	%vreg4<def> = ADDri_r32 %vreg1, 4, %STATUS<imp-def,dead>; GPR32:%vreg4,%vreg1
	STRi32_r32 %vreg8, %vreg1, 0; mem:Volatile ST4[%lsr.iv](tbaa=!2) GPR32:%vreg8,%vreg1
	%vreg3<def> = ADDri_r32 %vreg2, 1, %STATUS<imp-def,dead>; GPR32:%vreg3,%vreg2
	%vreg10<def> = CMPrr_r32 %vreg3, %vreg0, %STATUS<imp-def>; GPR32:%vreg10,%vreg3,%vreg0
	BCC <BB#3>, 8, %STATUS<imp-use>
	BNONE32 <BB#4>, %STATUS<imp-use>
    Successors according to CFG: BB#3(0x7c000000 / 0x80000000 = 96.88%) BB#4(0x04000000 / 0x80000000 = 3.12%)

BB#4: derived from LLVM BB %for.end
    Predecessors according to CFG: BB#1 BB#3
	%vreg14<def> = LDRi32_r32 <fi#0>, 0; mem:LD4[FixedStack0] GPR32:%vreg14
	GID
	%CONFIG<def> = MOVTS32_core %vreg14<kill>; GPR32:%vreg14
	GIE %CONFIG<imp-use,kill>
	RTS

# End machine code for function matclr.

# *** IR Dump Before Live Variable Analysis ***:
# Machine code for function matclr: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
Function Live Ins: %R0 in %vreg5, %R1 in %vreg6

BB#0: 
    Live Ins: %R0 %R1
	GID %CONFIG<imp-def>
	%vreg13<def> = MOVFS32_core %CONFIG<kill>; GPR32:%vreg13
	STRi32_r32 %vreg13, <fi#0>, 0; mem:ST4[FixedStack0] GPR32:%vreg13
	%vreg12<def,tied1> = MOVTi32ri %vreg13<kill,tied0>, 72; GPR32:%vreg12,%vreg13
	STRi32_r32 %vreg12, <fi#1>, 0; mem:ST4[FixedStack1] GPR32:%vreg12
	%CONFIG<def> = MOVTS32_core %vreg12<kill>; GPR32:%vreg12
	GIE %CONFIG<imp-use,kill>
    Successors according to CFG: BB#1(?%)

BB#1: derived from LLVM BB %entry
    Live Ins: %R0 %R1
    Predecessors according to CFG: BB#0
	%vreg6<def> = COPY %R1; GPR32:%vreg6
	%vreg5<def> = COPY %R0; GPR32:%vreg5
	%vreg0<def> = IMULrr_r32 %vreg6, %vreg6, %STATUS<imp-def,dead>; GPR32:%vreg0,%vreg6,%vreg6
	%vreg7<def> = CMPri_r32 %vreg0, 0, %STATUS<imp-def>; GPR32:%vreg7,%vreg0
	BCC <BB#4>, 0, %STATUS<imp-use>
	BNONE32 <BB#2>, %STATUS<imp-use>
    Successors according to CFG: BB#4(0x30000000 / 0x80000000 = 37.50%) BB#2(0x50000000 / 0x80000000 = 62.50%)

BB#2: derived from LLVM BB %for.body.preheader
    Predecessors according to CFG: BB#1
	%vreg8<def> = MOVi32ri 0; GPR32:%vreg8
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %for.body
    Predecessors according to CFG: BB#2 BB#3
	%vreg1<def> = PHI %vreg5, <BB#2>, %vreg4, <BB#3>; GPR32:%vreg1,%vreg5,%vreg4
	%vreg2<def> = PHI %vreg8, <BB#2>, %vreg3, <BB#3>; GPR32:%vreg2,%vreg8,%vreg3
	%vreg4<def> = ADDri_r32 %vreg1, 4, %STATUS<imp-def,dead>; GPR32:%vreg4,%vreg1
	STRi32_r32 %vreg8, %vreg1, 0; mem:Volatile ST4[%lsr.iv](tbaa=!2) GPR32:%vreg8,%vreg1
	%vreg3<def> = ADDri_r32 %vreg2, 1, %STATUS<imp-def,dead>; GPR32:%vreg3,%vreg2
	%vreg10<def> = CMPrr_r32 %vreg3, %vreg0, %STATUS<imp-def>; GPR32:%vreg10,%vreg3,%vreg0
	BCC <BB#3>, 8, %STATUS<imp-use>
	BNONE32 <BB#4>, %STATUS<imp-use>
    Successors according to CFG: BB#3(0x7c000000 / 0x80000000 = 96.88%) BB#4(0x04000000 / 0x80000000 = 3.12%)

BB#4: derived from LLVM BB %for.end
    Predecessors according to CFG: BB#1 BB#3
	%vreg14<def> = LDRi32_r32 <fi#0>, 0; mem:LD4[FixedStack0] GPR32:%vreg14
	GID
	%CONFIG<def> = MOVTS32_core %vreg14<kill>; GPR32:%vreg14
	GIE %CONFIG<imp-use,kill>
	RTS

# End machine code for function matclr.

# *** IR Dump After Live Variable Analysis ***:
# Machine code for function matclr: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
Function Live Ins: %R0 in %vreg5, %R1 in %vreg6

BB#0: 
    Live Ins: %R0 %R1
	GID %CONFIG<imp-def>
	%vreg13<def> = MOVFS32_core %CONFIG<kill>; GPR32:%vreg13
	STRi32_r32 %vreg13, <fi#0>, 0; mem:ST4[FixedStack0] GPR32:%vreg13
	%vreg12<def,tied1> = MOVTi32ri %vreg13<kill,tied0>, 72; GPR32:%vreg12,%vreg13
	STRi32_r32 %vreg12, <fi#1>, 0; mem:ST4[FixedStack1] GPR32:%vreg12
	%CONFIG<def> = MOVTS32_core %vreg12<kill>; GPR32:%vreg12
	GIE %CONFIG<imp-use,kill>
    Successors according to CFG: BB#1(?%)

BB#1: derived from LLVM BB %entry
    Live Ins: %R0 %R1
    Predecessors according to CFG: BB#0
	%vreg6<def> = COPY %R1<kill>; GPR32:%vreg6
	%vreg5<def> = COPY %R0<kill>; GPR32:%vreg5
	%vreg0<def> = IMULrr_r32 %vreg6<kill>, %vreg6, %STATUS<imp-def,dead>; GPR32:%vreg0,%vreg6,%vreg6
	%vreg7<def,dead> = CMPri_r32 %vreg0, 0, %STATUS<imp-def>; GPR32:%vreg7,%vreg0
	BCC <BB#4>, 0, %STATUS<imp-use>
	BNONE32 <BB#2>, %STATUS<imp-use>
    Successors according to CFG: BB#4(0x30000000 / 0x80000000 = 37.50%) BB#2(0x50000000 / 0x80000000 = 62.50%)

BB#2: derived from LLVM BB %for.body.preheader
    Predecessors according to CFG: BB#1
	%vreg8<def> = MOVi32ri 0; GPR32:%vreg8
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %for.body
    Predecessors according to CFG: BB#2 BB#3
	%vreg1<def> = PHI %vreg5, <BB#2>, %vreg4, <BB#3>; GPR32:%vreg1,%vreg5,%vreg4
	%vreg2<def> = PHI %vreg8, <BB#2>, %vreg3, <BB#3>; GPR32:%vreg2,%vreg8,%vreg3
	%vreg4<def> = ADDri_r32 %vreg1, 4, %STATUS<imp-def,dead>; GPR32:%vreg4,%vreg1
	STRi32_r32 %vreg8, %vreg1<kill>, 0; mem:Volatile ST4[%lsr.iv](tbaa=!2) GPR32:%vreg8,%vreg1
	%vreg3<def> = ADDri_r32 %vreg2<kill>, 1, %STATUS<imp-def,dead>; GPR32:%vreg3,%vreg2
	%vreg10<def,dead> = CMPrr_r32 %vreg3, %vreg0, %STATUS<imp-def>; GPR32:%vreg10,%vreg3,%vreg0
	BCC <BB#3>, 8, %STATUS<imp-use>
	BNONE32 <BB#4>, %STATUS<imp-use>
    Successors according to CFG: BB#3(0x7c000000 / 0x80000000 = 96.88%) BB#4(0x04000000 / 0x80000000 = 3.12%)

BB#4: derived from LLVM BB %for.end
    Predecessors according to CFG: BB#1 BB#3
	%vreg14<def> = LDRi32_r32 <fi#0>, 0; mem:LD4[FixedStack0] GPR32:%vreg14
	GID
	%CONFIG<def> = MOVTS32_core %vreg14<kill>; GPR32:%vreg14
	GIE %CONFIG<imp-use,kill>
	RTS

# End machine code for function matclr.

# *** IR Dump Before Epiphany Load/Store Optimization Pass ***:
# Machine code for function matclr: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
Function Live Ins: %R0 in %vreg5, %R1 in %vreg6

BB#0: 
    Live Ins: %R0 %R1
	GID %CONFIG<imp-def>
	%vreg13<def> = MOVFS32_core %CONFIG<kill>; GPR32:%vreg13
	STRi32_r32 %vreg13, <fi#0>, 0; mem:ST4[FixedStack0] GPR32:%vreg13
	%vreg12<def,tied1> = MOVTi32ri %vreg13<kill,tied0>, 72; GPR32:%vreg12,%vreg13
	STRi32_r32 %vreg12, <fi#1>, 0; mem:ST4[FixedStack1] GPR32:%vreg12
	%CONFIG<def> = MOVTS32_core %vreg12<kill>; GPR32:%vreg12
	GIE %CONFIG<imp-use,kill>
    Successors according to CFG: BB#1(?%)

BB#1: derived from LLVM BB %entry
    Live Ins: %R0 %R1
    Predecessors according to CFG: BB#0
	%vreg6<def> = COPY %R1<kill>; GPR32:%vreg6
	%vreg5<def> = COPY %R0<kill>; GPR32:%vreg5
	%vreg0<def> = IMULrr_r32 %vreg6<kill>, %vreg6, %STATUS<imp-def,dead>; GPR32:%vreg0,%vreg6,%vreg6
	%vreg7<def,dead> = CMPri_r32 %vreg0, 0, %STATUS<imp-def>; GPR32:%vreg7,%vreg0
	BCC <BB#4>, 0, %STATUS<imp-use>
	BNONE32 <BB#2>, %STATUS<imp-use>
    Successors according to CFG: BB#4(0x30000000 / 0x80000000 = 37.50%) BB#2(0x50000000 / 0x80000000 = 62.50%)

BB#2: derived from LLVM BB %for.body.preheader
    Predecessors according to CFG: BB#1
	%vreg8<def> = MOVi32ri 0; GPR32:%vreg8
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %for.body
    Predecessors according to CFG: BB#2 BB#3
	%vreg1<def> = PHI %vreg5, <BB#2>, %vreg4, <BB#3>; GPR32:%vreg1,%vreg5,%vreg4
	%vreg2<def> = PHI %vreg8, <BB#2>, %vreg3, <BB#3>; GPR32:%vreg2,%vreg8,%vreg3
	%vreg4<def> = ADDri_r32 %vreg1, 4, %STATUS<imp-def,dead>; GPR32:%vreg4,%vreg1
	STRi32_r32 %vreg8, %vreg1<kill>, 0; mem:Volatile ST4[%lsr.iv](tbaa=!2) GPR32:%vreg8,%vreg1
	%vreg3<def> = ADDri_r32 %vreg2<kill>, 1, %STATUS<imp-def,dead>; GPR32:%vreg3,%vreg2
	%vreg10<def,dead> = CMPrr_r32 %vreg3, %vreg0, %STATUS<imp-def>; GPR32:%vreg10,%vreg3,%vreg0
	BCC <BB#3>, 8, %STATUS<imp-use>
	BNONE32 <BB#4>, %STATUS<imp-use>
    Successors according to CFG: BB#3(0x7c000000 / 0x80000000 = 96.88%) BB#4(0x04000000 / 0x80000000 = 3.12%)

BB#4: derived from LLVM BB %for.end
    Predecessors according to CFG: BB#1 BB#3
	%vreg14<def> = LDRi32_r32 <fi#0>, 0; mem:LD4[FixedStack0] GPR32:%vreg14
	GID
	%CONFIG<def> = MOVTS32_core %vreg14<kill>; GPR32:%vreg14
	GIE %CONFIG<imp-use,kill>
	RTS

# End machine code for function matclr.


Running Epiphany Load/Store Optimization Pass

Trying to pair instruction: STRi32_r32 %vreg13, <fi#0>, 0; mem:ST4[FixedStack0] GPR32:%vreg13
Checking instruction   STRi32_r32 %vreg12, <fi#1>, 0; mem:ST4[FixedStack1] GPR32:%vreg12
Proposed paired reg was modified, will try to merge forward
Creating pair load/store. Replacing instructions:
    STRi32_r32 %vreg13, <fi#0>, 0; mem:ST4[FixedStack0] GPR32:%vreg13
    STRi32_r32 %vreg12, <fi#1>, 0; mem:ST4[FixedStack1] GPR32:%vreg12
  with instruction:
    STRi64 %vreg15, <fi#1>, 0; mem:ST4[FixedStack1] ST4[FixedStack0] GPR64:%vreg15


Trying to pair instruction: STRi32_r32 %vreg8, %vreg1<kill>, 0; mem:Volatile ST4[%lsr.iv](tbaa=!2) GPR32:%vreg8,%vreg1
Volatile load/store, skipping
Not a candidate for merging

Trying to pair instruction: %vreg14<def> = LDRi32_r32 <fi#0>, 0; mem:LD4[FixedStack0] GPR32:%vreg14
Unable to find matching instruction
# *** IR Dump After Epiphany Load/Store Optimization Pass ***:
# Machine code for function matclr: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=8, at location [SP]
Function Live Ins: %R0 in %vreg5, %R1 in %vreg6

BB#0: 
    Live Ins: %R0 %R1
	GID %CONFIG<imp-def>
	%vreg13<def> = MOVFS32_core %CONFIG<kill>; GPR32:%vreg13
	%vreg12<def,tied1> = MOVTi32ri %vreg13<tied0>, 72; GPR32:%vreg12,%vreg13
	%vreg15<def> = REG_SEQUENCE %vreg13, isub_lo, %vreg12, isub_hi; GPR64:%vreg15 GPR32:%vreg13,%vreg12
	STRi64 %vreg15, <fi#1>, 0; mem:ST4[FixedStack1] ST4[FixedStack0] GPR64:%vreg15
	%CONFIG<def> = MOVTS32_core %vreg12<kill>; GPR32:%vreg12
	GIE %CONFIG<imp-use,kill>
    Successors according to CFG: BB#1(?%)

BB#1: derived from LLVM BB %entry
    Live Ins: %R0 %R1
    Predecessors according to CFG: BB#0
	%vreg6<def> = COPY %R1<kill>; GPR32:%vreg6
	%vreg5<def> = COPY %R0<kill>; GPR32:%vreg5
	%vreg0<def> = IMULrr_r32 %vreg6<kill>, %vreg6, %STATUS<imp-def,dead>; GPR32:%vreg0,%vreg6,%vreg6
	%vreg7<def,dead> = CMPri_r32 %vreg0, 0, %STATUS<imp-def>; GPR32:%vreg7,%vreg0
	BCC <BB#4>, 0, %STATUS<imp-use>
	BNONE32 <BB#2>, %STATUS<imp-use>
    Successors according to CFG: BB#4(0x30000000 / 0x80000000 = 37.50%) BB#2(0x50000000 / 0x80000000 = 62.50%)

BB#2: derived from LLVM BB %for.body.preheader
    Predecessors according to CFG: BB#1
	%vreg8<def> = MOVi32ri 0; GPR32:%vreg8
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %for.body
    Predecessors according to CFG: BB#2 BB#3
	%vreg1<def> = PHI %vreg5, <BB#2>, %vreg4, <BB#3>; GPR32:%vreg1,%vreg5,%vreg4
	%vreg2<def> = PHI %vreg8, <BB#2>, %vreg3, <BB#3>; GPR32:%vreg2,%vreg8,%vreg3
	%vreg4<def> = ADDri_r32 %vreg1, 4, %STATUS<imp-def,dead>; GPR32:%vreg4,%vreg1
	STRi32_r32 %vreg8, %vreg1<kill>, 0; mem:Volatile ST4[%lsr.iv](tbaa=!2) GPR32:%vreg8,%vreg1
	%vreg3<def> = ADDri_r32 %vreg2<kill>, 1, %STATUS<imp-def,dead>; GPR32:%vreg3,%vreg2
	%vreg10<def,dead> = CMPrr_r32 %vreg3, %vreg0, %STATUS<imp-def>; GPR32:%vreg10,%vreg3,%vreg0
	BCC <BB#3>, 8, %STATUS<imp-use>
	BNONE32 <BB#4>, %STATUS<imp-use>
    Successors according to CFG: BB#3(0x7c000000 / 0x80000000 = 96.88%) BB#4(0x04000000 / 0x80000000 = 3.12%)

BB#4: derived from LLVM BB %for.end
    Predecessors according to CFG: BB#1 BB#3
	%vreg14<def> = LDRi32_r32 <fi#0>, 0; mem:LD4[FixedStack0] GPR32:%vreg14
	GID
	%CONFIG<def> = MOVTS32_core %vreg14<kill>; GPR32:%vreg14
	GIE %CONFIG<imp-use,kill>
	RTS

# End machine code for function matclr.

# *** IR Dump Before Detect Dead Lanes ***:
# Machine code for function matclr: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=8, at location [SP]
Function Live Ins: %R0 in %vreg5, %R1 in %vreg6

BB#0: 
    Live Ins: %R0 %R1
	GID %CONFIG<imp-def>
	%vreg13<def> = MOVFS32_core %CONFIG<kill>; GPR32:%vreg13
	%vreg12<def,tied1> = MOVTi32ri %vreg13<tied0>, 72; GPR32:%vreg12,%vreg13
	%vreg15<def> = REG_SEQUENCE %vreg13, isub_lo, %vreg12, isub_hi; GPR64:%vreg15 GPR32:%vreg13,%vreg12
	STRi64 %vreg15, <fi#1>, 0; mem:ST4[FixedStack1] ST4[FixedStack0] GPR64:%vreg15
	%CONFIG<def> = MOVTS32_core %vreg12<kill>; GPR32:%vreg12
	GIE %CONFIG<imp-use,kill>
    Successors according to CFG: BB#1(?%)

BB#1: derived from LLVM BB %entry
    Live Ins: %R0 %R1
    Predecessors according to CFG: BB#0
	%vreg6<def> = COPY %R1<kill>; GPR32:%vreg6
	%vreg5<def> = COPY %R0<kill>; GPR32:%vreg5
	%vreg0<def> = IMULrr_r32 %vreg6<kill>, %vreg6, %STATUS<imp-def,dead>; GPR32:%vreg0,%vreg6,%vreg6
	%vreg7<def,dead> = CMPri_r32 %vreg0, 0, %STATUS<imp-def>; GPR32:%vreg7,%vreg0
	BCC <BB#4>, 0, %STATUS<imp-use>
	BNONE32 <BB#2>, %STATUS<imp-use>
    Successors according to CFG: BB#4(0x30000000 / 0x80000000 = 37.50%) BB#2(0x50000000 / 0x80000000 = 62.50%)

BB#2: derived from LLVM BB %for.body.preheader
    Predecessors according to CFG: BB#1
	%vreg8<def> = MOVi32ri 0; GPR32:%vreg8
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %for.body
    Predecessors according to CFG: BB#2 BB#3
	%vreg1<def> = PHI %vreg5, <BB#2>, %vreg4, <BB#3>; GPR32:%vreg1,%vreg5,%vreg4
	%vreg2<def> = PHI %vreg8, <BB#2>, %vreg3, <BB#3>; GPR32:%vreg2,%vreg8,%vreg3
	%vreg4<def> = ADDri_r32 %vreg1, 4, %STATUS<imp-def,dead>; GPR32:%vreg4,%vreg1
	STRi32_r32 %vreg8, %vreg1<kill>, 0; mem:Volatile ST4[%lsr.iv](tbaa=!2) GPR32:%vreg8,%vreg1
	%vreg3<def> = ADDri_r32 %vreg2<kill>, 1, %STATUS<imp-def,dead>; GPR32:%vreg3,%vreg2
	%vreg10<def,dead> = CMPrr_r32 %vreg3, %vreg0, %STATUS<imp-def>; GPR32:%vreg10,%vreg3,%vreg0
	BCC <BB#3>, 8, %STATUS<imp-use>
	BNONE32 <BB#4>, %STATUS<imp-use>
    Successors according to CFG: BB#3(0x7c000000 / 0x80000000 = 96.88%) BB#4(0x04000000 / 0x80000000 = 3.12%)

BB#4: derived from LLVM BB %for.end
    Predecessors according to CFG: BB#1 BB#3
	%vreg14<def> = LDRi32_r32 <fi#0>, 0; mem:LD4[FixedStack0] GPR32:%vreg14
	GID
	%CONFIG<def> = MOVTS32_core %vreg14<kill>; GPR32:%vreg14
	GIE %CONFIG<imp-use,kill>
	RTS

# End machine code for function matclr.

Skipping Detect dead lanes pass
# *** IR Dump After Detect Dead Lanes ***:
# Machine code for function matclr: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=8, at location [SP]
Function Live Ins: %R0 in %vreg5, %R1 in %vreg6

BB#0: 
    Live Ins: %R0 %R1
	GID %CONFIG<imp-def>
	%vreg13<def> = MOVFS32_core %CONFIG<kill>; GPR32:%vreg13
	%vreg12<def,tied1> = MOVTi32ri %vreg13<tied0>, 72; GPR32:%vreg12,%vreg13
	%vreg15<def> = REG_SEQUENCE %vreg13, isub_lo, %vreg12, isub_hi; GPR64:%vreg15 GPR32:%vreg13,%vreg12
	STRi64 %vreg15, <fi#1>, 0; mem:ST4[FixedStack1] ST4[FixedStack0] GPR64:%vreg15
	%CONFIG<def> = MOVTS32_core %vreg12<kill>; GPR32:%vreg12
	GIE %CONFIG<imp-use,kill>
    Successors according to CFG: BB#1(?%)

BB#1: derived from LLVM BB %entry
    Live Ins: %R0 %R1
    Predecessors according to CFG: BB#0
	%vreg6<def> = COPY %R1<kill>; GPR32:%vreg6
	%vreg5<def> = COPY %R0<kill>; GPR32:%vreg5
	%vreg0<def> = IMULrr_r32 %vreg6<kill>, %vreg6, %STATUS<imp-def,dead>; GPR32:%vreg0,%vreg6,%vreg6
	%vreg7<def,dead> = CMPri_r32 %vreg0, 0, %STATUS<imp-def>; GPR32:%vreg7,%vreg0
	BCC <BB#4>, 0, %STATUS<imp-use>
	BNONE32 <BB#2>, %STATUS<imp-use>
    Successors according to CFG: BB#4(0x30000000 / 0x80000000 = 37.50%) BB#2(0x50000000 / 0x80000000 = 62.50%)

BB#2: derived from LLVM BB %for.body.preheader
    Predecessors according to CFG: BB#1
	%vreg8<def> = MOVi32ri 0; GPR32:%vreg8
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %for.body
    Predecessors according to CFG: BB#2 BB#3
	%vreg1<def> = PHI %vreg5, <BB#2>, %vreg4, <BB#3>; GPR32:%vreg1,%vreg5,%vreg4
	%vreg2<def> = PHI %vreg8, <BB#2>, %vreg3, <BB#3>; GPR32:%vreg2,%vreg8,%vreg3
	%vreg4<def> = ADDri_r32 %vreg1, 4, %STATUS<imp-def,dead>; GPR32:%vreg4,%vreg1
	STRi32_r32 %vreg8, %vreg1<kill>, 0; mem:Volatile ST4[%lsr.iv](tbaa=!2) GPR32:%vreg8,%vreg1
	%vreg3<def> = ADDri_r32 %vreg2<kill>, 1, %STATUS<imp-def,dead>; GPR32:%vreg3,%vreg2
	%vreg10<def,dead> = CMPrr_r32 %vreg3, %vreg0, %STATUS<imp-def>; GPR32:%vreg10,%vreg3,%vreg0
	BCC <BB#3>, 8, %STATUS<imp-use>
	BNONE32 <BB#4>, %STATUS<imp-use>
    Successors according to CFG: BB#3(0x7c000000 / 0x80000000 = 96.88%) BB#4(0x04000000 / 0x80000000 = 3.12%)

BB#4: derived from LLVM BB %for.end
    Predecessors according to CFG: BB#1 BB#3
	%vreg14<def> = LDRi32_r32 <fi#0>, 0; mem:LD4[FixedStack0] GPR32:%vreg14
	GID
	%CONFIG<def> = MOVTS32_core %vreg14<kill>; GPR32:%vreg14
	GIE %CONFIG<imp-use,kill>
	RTS

# End machine code for function matclr.

# *** IR Dump Before Process Implicit Definitions ***:
# Machine code for function matclr: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=8, at location [SP]
Function Live Ins: %R0 in %vreg5, %R1 in %vreg6

BB#0: 
    Live Ins: %R0 %R1
	GID %CONFIG<imp-def>
	%vreg13<def> = MOVFS32_core %CONFIG<kill>; GPR32:%vreg13
	%vreg12<def,tied1> = MOVTi32ri %vreg13<tied0>, 72; GPR32:%vreg12,%vreg13
	%vreg15<def> = REG_SEQUENCE %vreg13, isub_lo, %vreg12, isub_hi; GPR64:%vreg15 GPR32:%vreg13,%vreg12
	STRi64 %vreg15, <fi#1>, 0; mem:ST4[FixedStack1] ST4[FixedStack0] GPR64:%vreg15
	%CONFIG<def> = MOVTS32_core %vreg12<kill>; GPR32:%vreg12
	GIE %CONFIG<imp-use,kill>
    Successors according to CFG: BB#1(?%)

BB#1: derived from LLVM BB %entry
    Live Ins: %R0 %R1
    Predecessors according to CFG: BB#0
	%vreg6<def> = COPY %R1<kill>; GPR32:%vreg6
	%vreg5<def> = COPY %R0<kill>; GPR32:%vreg5
	%vreg0<def> = IMULrr_r32 %vreg6<kill>, %vreg6, %STATUS<imp-def,dead>; GPR32:%vreg0,%vreg6,%vreg6
	%vreg7<def,dead> = CMPri_r32 %vreg0, 0, %STATUS<imp-def>; GPR32:%vreg7,%vreg0
	BCC <BB#4>, 0, %STATUS<imp-use>
	BNONE32 <BB#2>, %STATUS<imp-use>
    Successors according to CFG: BB#4(0x30000000 / 0x80000000 = 37.50%) BB#2(0x50000000 / 0x80000000 = 62.50%)

BB#2: derived from LLVM BB %for.body.preheader
    Predecessors according to CFG: BB#1
	%vreg8<def> = MOVi32ri 0; GPR32:%vreg8
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %for.body
    Predecessors according to CFG: BB#2 BB#3
	%vreg1<def> = PHI %vreg5, <BB#2>, %vreg4, <BB#3>; GPR32:%vreg1,%vreg5,%vreg4
	%vreg2<def> = PHI %vreg8, <BB#2>, %vreg3, <BB#3>; GPR32:%vreg2,%vreg8,%vreg3
	%vreg4<def> = ADDri_r32 %vreg1, 4, %STATUS<imp-def,dead>; GPR32:%vreg4,%vreg1
	STRi32_r32 %vreg8, %vreg1<kill>, 0; mem:Volatile ST4[%lsr.iv](tbaa=!2) GPR32:%vreg8,%vreg1
	%vreg3<def> = ADDri_r32 %vreg2<kill>, 1, %STATUS<imp-def,dead>; GPR32:%vreg3,%vreg2
	%vreg10<def,dead> = CMPrr_r32 %vreg3, %vreg0, %STATUS<imp-def>; GPR32:%vreg10,%vreg3,%vreg0
	BCC <BB#3>, 8, %STATUS<imp-use>
	BNONE32 <BB#4>, %STATUS<imp-use>
    Successors according to CFG: BB#3(0x7c000000 / 0x80000000 = 96.88%) BB#4(0x04000000 / 0x80000000 = 3.12%)

BB#4: derived from LLVM BB %for.end
    Predecessors according to CFG: BB#1 BB#3
	%vreg14<def> = LDRi32_r32 <fi#0>, 0; mem:LD4[FixedStack0] GPR32:%vreg14
	GID
	%CONFIG<def> = MOVTS32_core %vreg14<kill>; GPR32:%vreg14
	GIE %CONFIG<imp-use,kill>
	RTS

# End machine code for function matclr.

********** PROCESS IMPLICIT DEFS **********
********** Function: matclr
# *** IR Dump After Process Implicit Definitions ***:
# Machine code for function matclr: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=8, at location [SP]
Function Live Ins: %R0 in %vreg5, %R1 in %vreg6

BB#0: 
    Live Ins: %R0 %R1
	GID %CONFIG<imp-def>
	%vreg13<def> = MOVFS32_core %CONFIG<kill>; GPR32:%vreg13
	%vreg12<def,tied1> = MOVTi32ri %vreg13<tied0>, 72; GPR32:%vreg12,%vreg13
	%vreg15<def> = REG_SEQUENCE %vreg13, isub_lo, %vreg12, isub_hi; GPR64:%vreg15 GPR32:%vreg13,%vreg12
	STRi64 %vreg15, <fi#1>, 0; mem:ST4[FixedStack1] ST4[FixedStack0] GPR64:%vreg15
	%CONFIG<def> = MOVTS32_core %vreg12<kill>; GPR32:%vreg12
	GIE %CONFIG<imp-use,kill>
    Successors according to CFG: BB#1(?%)

BB#1: derived from LLVM BB %entry
    Live Ins: %R0 %R1
    Predecessors according to CFG: BB#0
	%vreg6<def> = COPY %R1<kill>; GPR32:%vreg6
	%vreg5<def> = COPY %R0<kill>; GPR32:%vreg5
	%vreg0<def> = IMULrr_r32 %vreg6<kill>, %vreg6, %STATUS<imp-def,dead>; GPR32:%vreg0,%vreg6,%vreg6
	%vreg7<def,dead> = CMPri_r32 %vreg0, 0, %STATUS<imp-def>; GPR32:%vreg7,%vreg0
	BCC <BB#4>, 0, %STATUS<imp-use>
	BNONE32 <BB#2>, %STATUS<imp-use>
    Successors according to CFG: BB#4(0x30000000 / 0x80000000 = 37.50%) BB#2(0x50000000 / 0x80000000 = 62.50%)

BB#2: derived from LLVM BB %for.body.preheader
    Predecessors according to CFG: BB#1
	%vreg8<def> = MOVi32ri 0; GPR32:%vreg8
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %for.body
    Predecessors according to CFG: BB#2 BB#3
	%vreg1<def> = PHI %vreg5, <BB#2>, %vreg4, <BB#3>; GPR32:%vreg1,%vreg5,%vreg4
	%vreg2<def> = PHI %vreg8, <BB#2>, %vreg3, <BB#3>; GPR32:%vreg2,%vreg8,%vreg3
	%vreg4<def> = ADDri_r32 %vreg1, 4, %STATUS<imp-def,dead>; GPR32:%vreg4,%vreg1
	STRi32_r32 %vreg8, %vreg1<kill>, 0; mem:Volatile ST4[%lsr.iv](tbaa=!2) GPR32:%vreg8,%vreg1
	%vreg3<def> = ADDri_r32 %vreg2<kill>, 1, %STATUS<imp-def,dead>; GPR32:%vreg3,%vreg2
	%vreg10<def,dead> = CMPrr_r32 %vreg3, %vreg0, %STATUS<imp-def>; GPR32:%vreg10,%vreg3,%vreg0
	BCC <BB#3>, 8, %STATUS<imp-use>
	BNONE32 <BB#4>, %STATUS<imp-use>
    Successors according to CFG: BB#3(0x7c000000 / 0x80000000 = 96.88%) BB#4(0x04000000 / 0x80000000 = 3.12%)

BB#4: derived from LLVM BB %for.end
    Predecessors according to CFG: BB#1 BB#3
	%vreg14<def> = LDRi32_r32 <fi#0>, 0; mem:LD4[FixedStack0] GPR32:%vreg14
	GID
	%CONFIG<def> = MOVTS32_core %vreg14<kill>; GPR32:%vreg14
	GIE %CONFIG<imp-use,kill>
	RTS

# End machine code for function matclr.

# *** IR Dump Before Remove unreachable machine basic blocks ***:
# Machine code for function matclr: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=8, at location [SP]
Function Live Ins: %R0 in %vreg5, %R1 in %vreg6

BB#0: 
    Live Ins: %R0 %R1
	GID %CONFIG<imp-def>
	%vreg13<def> = MOVFS32_core %CONFIG<kill>; GPR32:%vreg13
	%vreg12<def,tied1> = MOVTi32ri %vreg13<tied0>, 72; GPR32:%vreg12,%vreg13
	%vreg15<def> = REG_SEQUENCE %vreg13, isub_lo, %vreg12, isub_hi; GPR64:%vreg15 GPR32:%vreg13,%vreg12
	STRi64 %vreg15, <fi#1>, 0; mem:ST4[FixedStack1] ST4[FixedStack0] GPR64:%vreg15
	%CONFIG<def> = MOVTS32_core %vreg12<kill>; GPR32:%vreg12
	GIE %CONFIG<imp-use,kill>
    Successors according to CFG: BB#1(?%)

BB#1: derived from LLVM BB %entry
    Live Ins: %R0 %R1
    Predecessors according to CFG: BB#0
	%vreg6<def> = COPY %R1<kill>; GPR32:%vreg6
	%vreg5<def> = COPY %R0<kill>; GPR32:%vreg5
	%vreg0<def> = IMULrr_r32 %vreg6<kill>, %vreg6, %STATUS<imp-def,dead>; GPR32:%vreg0,%vreg6,%vreg6
	%vreg7<def,dead> = CMPri_r32 %vreg0, 0, %STATUS<imp-def>; GPR32:%vreg7,%vreg0
	BCC <BB#4>, 0, %STATUS<imp-use>
	BNONE32 <BB#2>, %STATUS<imp-use>
    Successors according to CFG: BB#4(0x30000000 / 0x80000000 = 37.50%) BB#2(0x50000000 / 0x80000000 = 62.50%)

BB#2: derived from LLVM BB %for.body.preheader
    Predecessors according to CFG: BB#1
	%vreg8<def> = MOVi32ri 0; GPR32:%vreg8
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %for.body
    Predecessors according to CFG: BB#2 BB#3
	%vreg1<def> = PHI %vreg5, <BB#2>, %vreg4, <BB#3>; GPR32:%vreg1,%vreg5,%vreg4
	%vreg2<def> = PHI %vreg8, <BB#2>, %vreg3, <BB#3>; GPR32:%vreg2,%vreg8,%vreg3
	%vreg4<def> = ADDri_r32 %vreg1, 4, %STATUS<imp-def,dead>; GPR32:%vreg4,%vreg1
	STRi32_r32 %vreg8, %vreg1<kill>, 0; mem:Volatile ST4[%lsr.iv](tbaa=!2) GPR32:%vreg8,%vreg1
	%vreg3<def> = ADDri_r32 %vreg2<kill>, 1, %STATUS<imp-def,dead>; GPR32:%vreg3,%vreg2
	%vreg10<def,dead> = CMPrr_r32 %vreg3, %vreg0, %STATUS<imp-def>; GPR32:%vreg10,%vreg3,%vreg0
	BCC <BB#3>, 8, %STATUS<imp-use>
	BNONE32 <BB#4>, %STATUS<imp-use>
    Successors according to CFG: BB#3(0x7c000000 / 0x80000000 = 96.88%) BB#4(0x04000000 / 0x80000000 = 3.12%)

BB#4: derived from LLVM BB %for.end
    Predecessors according to CFG: BB#1 BB#3
	%vreg14<def> = LDRi32_r32 <fi#0>, 0; mem:LD4[FixedStack0] GPR32:%vreg14
	GID
	%CONFIG<def> = MOVTS32_core %vreg14<kill>; GPR32:%vreg14
	GIE %CONFIG<imp-use,kill>
	RTS

# End machine code for function matclr.

# *** IR Dump After Remove unreachable machine basic blocks ***:
# Machine code for function matclr: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=8, at location [SP]
Function Live Ins: %R0 in %vreg5, %R1 in %vreg6

BB#0: 
    Live Ins: %R0 %R1
	GID %CONFIG<imp-def>
	%vreg13<def> = MOVFS32_core %CONFIG<kill>; GPR32:%vreg13
	%vreg12<def,tied1> = MOVTi32ri %vreg13<tied0>, 72; GPR32:%vreg12,%vreg13
	%vreg15<def> = REG_SEQUENCE %vreg13, isub_lo, %vreg12, isub_hi; GPR64:%vreg15 GPR32:%vreg13,%vreg12
	STRi64 %vreg15, <fi#1>, 0; mem:ST4[FixedStack1] ST4[FixedStack0] GPR64:%vreg15
	%CONFIG<def> = MOVTS32_core %vreg12<kill>; GPR32:%vreg12
	GIE %CONFIG<imp-use,kill>
    Successors according to CFG: BB#1(?%)

BB#1: derived from LLVM BB %entry
    Live Ins: %R0 %R1
    Predecessors according to CFG: BB#0
	%vreg6<def> = COPY %R1<kill>; GPR32:%vreg6
	%vreg5<def> = COPY %R0<kill>; GPR32:%vreg5
	%vreg0<def> = IMULrr_r32 %vreg6<kill>, %vreg6, %STATUS<imp-def,dead>; GPR32:%vreg0,%vreg6,%vreg6
	%vreg7<def,dead> = CMPri_r32 %vreg0, 0, %STATUS<imp-def>; GPR32:%vreg7,%vreg0
	BCC <BB#4>, 0, %STATUS<imp-use>
	BNONE32 <BB#2>, %STATUS<imp-use>
    Successors according to CFG: BB#4(0x30000000 / 0x80000000 = 37.50%) BB#2(0x50000000 / 0x80000000 = 62.50%)

BB#2: derived from LLVM BB %for.body.preheader
    Predecessors according to CFG: BB#1
	%vreg8<def> = MOVi32ri 0; GPR32:%vreg8
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %for.body
    Predecessors according to CFG: BB#2 BB#3
	%vreg1<def> = PHI %vreg5, <BB#2>, %vreg4, <BB#3>; GPR32:%vreg1,%vreg5,%vreg4
	%vreg2<def> = PHI %vreg8, <BB#2>, %vreg3, <BB#3>; GPR32:%vreg2,%vreg8,%vreg3
	%vreg4<def> = ADDri_r32 %vreg1, 4, %STATUS<imp-def,dead>; GPR32:%vreg4,%vreg1
	STRi32_r32 %vreg8, %vreg1<kill>, 0; mem:Volatile ST4[%lsr.iv](tbaa=!2) GPR32:%vreg8,%vreg1
	%vreg3<def> = ADDri_r32 %vreg2<kill>, 1, %STATUS<imp-def,dead>; GPR32:%vreg3,%vreg2
	%vreg10<def,dead> = CMPrr_r32 %vreg3, %vreg0, %STATUS<imp-def>; GPR32:%vreg10,%vreg3,%vreg0
	BCC <BB#3>, 8, %STATUS<imp-use>
	BNONE32 <BB#4>, %STATUS<imp-use>
    Successors according to CFG: BB#3(0x7c000000 / 0x80000000 = 96.88%) BB#4(0x04000000 / 0x80000000 = 3.12%)

BB#4: derived from LLVM BB %for.end
    Predecessors according to CFG: BB#1 BB#3
	%vreg14<def> = LDRi32_r32 <fi#0>, 0; mem:LD4[FixedStack0] GPR32:%vreg14
	GID
	%CONFIG<def> = MOVTS32_core %vreg14<kill>; GPR32:%vreg14
	GIE %CONFIG<imp-use,kill>
	RTS

# End machine code for function matclr.

# *** IR Dump Before Live Variable Analysis ***:
# Machine code for function matclr: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=8, at location [SP]
Function Live Ins: %R0 in %vreg5, %R1 in %vreg6

BB#0: 
    Live Ins: %R0 %R1
	GID %CONFIG<imp-def>
	%vreg13<def> = MOVFS32_core %CONFIG<kill>; GPR32:%vreg13
	%vreg12<def,tied1> = MOVTi32ri %vreg13<tied0>, 72; GPR32:%vreg12,%vreg13
	%vreg15<def> = REG_SEQUENCE %vreg13, isub_lo, %vreg12, isub_hi; GPR64:%vreg15 GPR32:%vreg13,%vreg12
	STRi64 %vreg15, <fi#1>, 0; mem:ST4[FixedStack1] ST4[FixedStack0] GPR64:%vreg15
	%CONFIG<def> = MOVTS32_core %vreg12<kill>; GPR32:%vreg12
	GIE %CONFIG<imp-use,kill>
    Successors according to CFG: BB#1(?%)

BB#1: derived from LLVM BB %entry
    Live Ins: %R0 %R1
    Predecessors according to CFG: BB#0
	%vreg6<def> = COPY %R1<kill>; GPR32:%vreg6
	%vreg5<def> = COPY %R0<kill>; GPR32:%vreg5
	%vreg0<def> = IMULrr_r32 %vreg6<kill>, %vreg6, %STATUS<imp-def,dead>; GPR32:%vreg0,%vreg6,%vreg6
	%vreg7<def,dead> = CMPri_r32 %vreg0, 0, %STATUS<imp-def>; GPR32:%vreg7,%vreg0
	BCC <BB#4>, 0, %STATUS<imp-use>
	BNONE32 <BB#2>, %STATUS<imp-use>
    Successors according to CFG: BB#4(0x30000000 / 0x80000000 = 37.50%) BB#2(0x50000000 / 0x80000000 = 62.50%)

BB#2: derived from LLVM BB %for.body.preheader
    Predecessors according to CFG: BB#1
	%vreg8<def> = MOVi32ri 0; GPR32:%vreg8
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %for.body
    Predecessors according to CFG: BB#2 BB#3
	%vreg1<def> = PHI %vreg5, <BB#2>, %vreg4, <BB#3>; GPR32:%vreg1,%vreg5,%vreg4
	%vreg2<def> = PHI %vreg8, <BB#2>, %vreg3, <BB#3>; GPR32:%vreg2,%vreg8,%vreg3
	%vreg4<def> = ADDri_r32 %vreg1, 4, %STATUS<imp-def,dead>; GPR32:%vreg4,%vreg1
	STRi32_r32 %vreg8, %vreg1<kill>, 0; mem:Volatile ST4[%lsr.iv](tbaa=!2) GPR32:%vreg8,%vreg1
	%vreg3<def> = ADDri_r32 %vreg2<kill>, 1, %STATUS<imp-def,dead>; GPR32:%vreg3,%vreg2
	%vreg10<def,dead> = CMPrr_r32 %vreg3, %vreg0, %STATUS<imp-def>; GPR32:%vreg10,%vreg3,%vreg0
	BCC <BB#3>, 8, %STATUS<imp-use>
	BNONE32 <BB#4>, %STATUS<imp-use>
    Successors according to CFG: BB#3(0x7c000000 / 0x80000000 = 96.88%) BB#4(0x04000000 / 0x80000000 = 3.12%)

BB#4: derived from LLVM BB %for.end
    Predecessors according to CFG: BB#1 BB#3
	%vreg14<def> = LDRi32_r32 <fi#0>, 0; mem:LD4[FixedStack0] GPR32:%vreg14
	GID
	%CONFIG<def> = MOVTS32_core %vreg14<kill>; GPR32:%vreg14
	GIE %CONFIG<imp-use,kill>
	RTS

# End machine code for function matclr.

# *** IR Dump After Live Variable Analysis ***:
# Machine code for function matclr: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=8, at location [SP]
Function Live Ins: %R0 in %vreg5, %R1 in %vreg6

BB#0: 
    Live Ins: %R0 %R1
	GID %CONFIG<imp-def>
	%vreg13<def> = MOVFS32_core %CONFIG<kill>; GPR32:%vreg13
	%vreg12<def,tied1> = MOVTi32ri %vreg13<tied0>, 72; GPR32:%vreg12,%vreg13
	%vreg15<def> = REG_SEQUENCE %vreg13<kill>, isub_lo, %vreg12, isub_hi; GPR64:%vreg15 GPR32:%vreg13,%vreg12
	STRi64 %vreg15<kill>, <fi#1>, 0; mem:ST4[FixedStack1] ST4[FixedStack0] GPR64:%vreg15
	%CONFIG<def> = MOVTS32_core %vreg12<kill>; GPR32:%vreg12
	GIE %CONFIG<imp-use,kill>
    Successors according to CFG: BB#1(?%)

BB#1: derived from LLVM BB %entry
    Live Ins: %R0 %R1
    Predecessors according to CFG: BB#0
	%vreg6<def> = COPY %R1<kill>; GPR32:%vreg6
	%vreg5<def> = COPY %R0<kill>; GPR32:%vreg5
	%vreg0<def> = IMULrr_r32 %vreg6<kill>, %vreg6, %STATUS<imp-def,dead>; GPR32:%vreg0,%vreg6,%vreg6
	%vreg7<def,dead> = CMPri_r32 %vreg0, 0, %STATUS<imp-def>; GPR32:%vreg7,%vreg0
	BCC <BB#4>, 0, %STATUS<imp-use>
	BNONE32 <BB#2>, %STATUS<imp-use>
    Successors according to CFG: BB#4(0x30000000 / 0x80000000 = 37.50%) BB#2(0x50000000 / 0x80000000 = 62.50%)

BB#2: derived from LLVM BB %for.body.preheader
    Predecessors according to CFG: BB#1
	%vreg8<def> = MOVi32ri 0; GPR32:%vreg8
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %for.body
    Predecessors according to CFG: BB#2 BB#3
	%vreg1<def> = PHI %vreg5, <BB#2>, %vreg4, <BB#3>; GPR32:%vreg1,%vreg5,%vreg4
	%vreg2<def> = PHI %vreg8, <BB#2>, %vreg3, <BB#3>; GPR32:%vreg2,%vreg8,%vreg3
	%vreg4<def> = ADDri_r32 %vreg1, 4, %STATUS<imp-def,dead>; GPR32:%vreg4,%vreg1
	STRi32_r32 %vreg8, %vreg1<kill>, 0; mem:Volatile ST4[%lsr.iv](tbaa=!2) GPR32:%vreg8,%vreg1
	%vreg3<def> = ADDri_r32 %vreg2<kill>, 1, %STATUS<imp-def,dead>; GPR32:%vreg3,%vreg2
	%vreg10<def,dead> = CMPrr_r32 %vreg3, %vreg0, %STATUS<imp-def>; GPR32:%vreg10,%vreg3,%vreg0
	BCC <BB#3>, 8, %STATUS<imp-use>
	BNONE32 <BB#4>, %STATUS<imp-use>
    Successors according to CFG: BB#3(0x7c000000 / 0x80000000 = 96.88%) BB#4(0x04000000 / 0x80000000 = 3.12%)

BB#4: derived from LLVM BB %for.end
    Predecessors according to CFG: BB#1 BB#3
	%vreg14<def> = LDRi32_r32 <fi#0>, 0; mem:LD4[FixedStack0] GPR32:%vreg14
	GID
	%CONFIG<def> = MOVTS32_core %vreg14<kill>; GPR32:%vreg14
	GIE %CONFIG<imp-use,kill>
	RTS

# End machine code for function matclr.

# *** IR Dump Before Eliminate PHI nodes for register allocation ***:
# Machine code for function matclr: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=8, at location [SP]
Function Live Ins: %R0 in %vreg5, %R1 in %vreg6

BB#0: 
    Live Ins: %R0 %R1
	GID %CONFIG<imp-def>
	%vreg13<def> = MOVFS32_core %CONFIG<kill>; GPR32:%vreg13
	%vreg12<def,tied1> = MOVTi32ri %vreg13<tied0>, 72; GPR32:%vreg12,%vreg13
	%vreg15<def> = REG_SEQUENCE %vreg13<kill>, isub_lo, %vreg12, isub_hi; GPR64:%vreg15 GPR32:%vreg13,%vreg12
	STRi64 %vreg15<kill>, <fi#1>, 0; mem:ST4[FixedStack1] ST4[FixedStack0] GPR64:%vreg15
	%CONFIG<def> = MOVTS32_core %vreg12<kill>; GPR32:%vreg12
	GIE %CONFIG<imp-use,kill>
    Successors according to CFG: BB#1(?%)

BB#1: derived from LLVM BB %entry
    Live Ins: %R0 %R1
    Predecessors according to CFG: BB#0
	%vreg6<def> = COPY %R1<kill>; GPR32:%vreg6
	%vreg5<def> = COPY %R0<kill>; GPR32:%vreg5
	%vreg0<def> = IMULrr_r32 %vreg6<kill>, %vreg6, %STATUS<imp-def,dead>; GPR32:%vreg0,%vreg6,%vreg6
	%vreg7<def,dead> = CMPri_r32 %vreg0, 0, %STATUS<imp-def>; GPR32:%vreg7,%vreg0
	BCC <BB#4>, 0, %STATUS<imp-use>
	BNONE32 <BB#2>, %STATUS<imp-use>
    Successors according to CFG: BB#4(0x30000000 / 0x80000000 = 37.50%) BB#2(0x50000000 / 0x80000000 = 62.50%)

BB#2: derived from LLVM BB %for.body.preheader
    Predecessors according to CFG: BB#1
	%vreg8<def> = MOVi32ri 0; GPR32:%vreg8
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %for.body
    Predecessors according to CFG: BB#2 BB#3
	%vreg1<def> = PHI %vreg5, <BB#2>, %vreg4, <BB#3>; GPR32:%vreg1,%vreg5,%vreg4
	%vreg2<def> = PHI %vreg8, <BB#2>, %vreg3, <BB#3>; GPR32:%vreg2,%vreg8,%vreg3
	%vreg4<def> = ADDri_r32 %vreg1, 4, %STATUS<imp-def,dead>; GPR32:%vreg4,%vreg1
	STRi32_r32 %vreg8, %vreg1<kill>, 0; mem:Volatile ST4[%lsr.iv](tbaa=!2) GPR32:%vreg8,%vreg1
	%vreg3<def> = ADDri_r32 %vreg2<kill>, 1, %STATUS<imp-def,dead>; GPR32:%vreg3,%vreg2
	%vreg10<def,dead> = CMPrr_r32 %vreg3, %vreg0, %STATUS<imp-def>; GPR32:%vreg10,%vreg3,%vreg0
	BCC <BB#3>, 8, %STATUS<imp-use>
	BNONE32 <BB#4>, %STATUS<imp-use>
    Successors according to CFG: BB#3(0x7c000000 / 0x80000000 = 96.88%) BB#4(0x04000000 / 0x80000000 = 3.12%)

BB#4: derived from LLVM BB %for.end
    Predecessors according to CFG: BB#1 BB#3
	%vreg14<def> = LDRi32_r32 <fi#0>, 0; mem:LD4[FixedStack0] GPR32:%vreg14
	GID
	%CONFIG<def> = MOVTS32_core %vreg14<kill>; GPR32:%vreg14
	GIE %CONFIG<imp-use,kill>
	RTS

# End machine code for function matclr.

# *** IR Dump After Eliminate PHI nodes for register allocation ***:
# Machine code for function matclr: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=8, at location [SP]
Function Live Ins: %R0 in %vreg5, %R1 in %vreg6

BB#0: 
    Live Ins: %R0 %R1
	GID %CONFIG<imp-def>
	%vreg13<def> = MOVFS32_core %CONFIG<kill>; GPR32:%vreg13
	%vreg12<def,tied1> = MOVTi32ri %vreg13<tied0>, 72; GPR32:%vreg12,%vreg13
	%vreg15<def> = REG_SEQUENCE %vreg13<kill>, isub_lo, %vreg12, isub_hi; GPR64:%vreg15 GPR32:%vreg13,%vreg12
	STRi64 %vreg15<kill>, <fi#1>, 0; mem:ST4[FixedStack1] ST4[FixedStack0] GPR64:%vreg15
	%CONFIG<def> = MOVTS32_core %vreg12<kill>; GPR32:%vreg12
	GIE %CONFIG<imp-use,kill>
    Successors according to CFG: BB#1(?%)

BB#1: derived from LLVM BB %entry
    Live Ins: %R0 %R1
    Predecessors according to CFG: BB#0
	%vreg6<def> = COPY %R1<kill>; GPR32:%vreg6
	%vreg5<def> = COPY %R0<kill>; GPR32:%vreg5
	%vreg0<def> = IMULrr_r32 %vreg6<kill>, %vreg6, %STATUS<imp-def,dead>; GPR32:%vreg0,%vreg6,%vreg6
	%vreg7<def,dead> = CMPri_r32 %vreg0, 0, %STATUS<imp-def>; GPR32:%vreg7,%vreg0
	BCC <BB#4>, 0, %STATUS<imp-use>
	BNONE32 <BB#2>, %STATUS<imp-use>
    Successors according to CFG: BB#4(0x30000000 / 0x80000000 = 37.50%) BB#2(0x50000000 / 0x80000000 = 62.50%)

BB#2: derived from LLVM BB %for.body.preheader
    Predecessors according to CFG: BB#1
	%vreg8<def> = MOVi32ri 0; GPR32:%vreg8
	%vreg16<def> = COPY %vreg5<kill>; GPR32:%vreg16,%vreg5
	%vreg17<def> = COPY %vreg8; GPR32:%vreg17,%vreg8
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %for.body
    Predecessors according to CFG: BB#2 BB#3
	%vreg2<def> = COPY %vreg17<kill>; GPR32:%vreg2,%vreg17
	%vreg1<def> = COPY %vreg16<kill>; GPR32:%vreg1,%vreg16
	%vreg4<def> = ADDri_r32 %vreg1, 4, %STATUS<imp-def,dead>; GPR32:%vreg4,%vreg1
	STRi32_r32 %vreg8, %vreg1<kill>, 0; mem:Volatile ST4[%lsr.iv](tbaa=!2) GPR32:%vreg8,%vreg1
	%vreg3<def> = ADDri_r32 %vreg2<kill>, 1, %STATUS<imp-def,dead>; GPR32:%vreg3,%vreg2
	%vreg10<def,dead> = CMPrr_r32 %vreg3, %vreg0, %STATUS<imp-def>; GPR32:%vreg10,%vreg3,%vreg0
	%vreg16<def> = COPY %vreg4<kill>; GPR32:%vreg16,%vreg4
	%vreg17<def> = COPY %vreg3<kill>; GPR32:%vreg17,%vreg3
	BCC <BB#3>, 8, %STATUS<imp-use>
	BNONE32 <BB#4>, %STATUS<imp-use>
    Successors according to CFG: BB#3(0x7c000000 / 0x80000000 = 96.88%) BB#4(0x04000000 / 0x80000000 = 3.12%)

BB#4: derived from LLVM BB %for.end
    Predecessors according to CFG: BB#1 BB#3
	%vreg14<def> = LDRi32_r32 <fi#0>, 0; mem:LD4[FixedStack0] GPR32:%vreg14
	GID
	%CONFIG<def> = MOVTS32_core %vreg14<kill>; GPR32:%vreg14
	GIE %CONFIG<imp-use,kill>
	RTS

# End machine code for function matclr.

# *** IR Dump Before Two-Address instruction pass ***:
# Machine code for function matclr: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=8, at location [SP]
Function Live Ins: %R0 in %vreg5, %R1 in %vreg6

BB#0: 
    Live Ins: %R0 %R1
	GID %CONFIG<imp-def>
	%vreg13<def> = MOVFS32_core %CONFIG<kill>; GPR32:%vreg13
	%vreg12<def,tied1> = MOVTi32ri %vreg13<tied0>, 72; GPR32:%vreg12,%vreg13
	%vreg15<def> = REG_SEQUENCE %vreg13<kill>, isub_lo, %vreg12, isub_hi; GPR64:%vreg15 GPR32:%vreg13,%vreg12
	STRi64 %vreg15<kill>, <fi#1>, 0; mem:ST4[FixedStack1] ST4[FixedStack0] GPR64:%vreg15
	%CONFIG<def> = MOVTS32_core %vreg12<kill>; GPR32:%vreg12
	GIE %CONFIG<imp-use,kill>
    Successors according to CFG: BB#1(?%)

BB#1: derived from LLVM BB %entry
    Live Ins: %R0 %R1
    Predecessors according to CFG: BB#0
	%vreg6<def> = COPY %R1<kill>; GPR32:%vreg6
	%vreg5<def> = COPY %R0<kill>; GPR32:%vreg5
	%vreg0<def> = IMULrr_r32 %vreg6<kill>, %vreg6, %STATUS<imp-def,dead>; GPR32:%vreg0,%vreg6,%vreg6
	%vreg7<def,dead> = CMPri_r32 %vreg0, 0, %STATUS<imp-def>; GPR32:%vreg7,%vreg0
	BCC <BB#4>, 0, %STATUS<imp-use>
	BNONE32 <BB#2>, %STATUS<imp-use>
    Successors according to CFG: BB#4(0x30000000 / 0x80000000 = 37.50%) BB#2(0x50000000 / 0x80000000 = 62.50%)

BB#2: derived from LLVM BB %for.body.preheader
    Predecessors according to CFG: BB#1
	%vreg8<def> = MOVi32ri 0; GPR32:%vreg8
	%vreg16<def> = COPY %vreg5<kill>; GPR32:%vreg16,%vreg5
	%vreg17<def> = COPY %vreg8; GPR32:%vreg17,%vreg8
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %for.body
    Predecessors according to CFG: BB#2 BB#3
	%vreg2<def> = COPY %vreg17<kill>; GPR32:%vreg2,%vreg17
	%vreg1<def> = COPY %vreg16<kill>; GPR32:%vreg1,%vreg16
	%vreg4<def> = ADDri_r32 %vreg1, 4, %STATUS<imp-def,dead>; GPR32:%vreg4,%vreg1
	STRi32_r32 %vreg8, %vreg1<kill>, 0; mem:Volatile ST4[%lsr.iv](tbaa=!2) GPR32:%vreg8,%vreg1
	%vreg3<def> = ADDri_r32 %vreg2<kill>, 1, %STATUS<imp-def,dead>; GPR32:%vreg3,%vreg2
	%vreg10<def,dead> = CMPrr_r32 %vreg3, %vreg0, %STATUS<imp-def>; GPR32:%vreg10,%vreg3,%vreg0
	%vreg16<def> = COPY %vreg4<kill>; GPR32:%vreg16,%vreg4
	%vreg17<def> = COPY %vreg3<kill>; GPR32:%vreg17,%vreg3
	BCC <BB#3>, 8, %STATUS<imp-use>
	BNONE32 <BB#4>, %STATUS<imp-use>
    Successors according to CFG: BB#3(0x7c000000 / 0x80000000 = 96.88%) BB#4(0x04000000 / 0x80000000 = 3.12%)

BB#4: derived from LLVM BB %for.end
    Predecessors according to CFG: BB#1 BB#3
	%vreg14<def> = LDRi32_r32 <fi#0>, 0; mem:LD4[FixedStack0] GPR32:%vreg14
	GID
	%CONFIG<def> = MOVTS32_core %vreg14<kill>; GPR32:%vreg14
	GIE %CONFIG<imp-use,kill>
	RTS

# End machine code for function matclr.

********** REWRITING TWO-ADDR INSTRS **********
********** Function: matclr
	%vreg12<def,tied1> = MOVTi32ri %vreg13<tied0>, 72; GPR32:%vreg12,%vreg13
		prepend:	%vreg12<def> = COPY %vreg13; GPR32:%vreg12,%vreg13
		rewrite to:	%vreg12<def,tied1> = MOVTi32ri %vreg12<tied0>, 72; GPR32:%vreg12
Inserted: %vreg15:isub_lo<def,read-undef> = COPY %vreg13<kill>; GPR64:%vreg15 GPR32:%vreg13
Inserted: %vreg15:isub_hi<def> = COPY %vreg12; GPR64:%vreg15 GPR32:%vreg12
Eliminated: %vreg15<def> = REG_SEQUENCE %vreg13<kill>, isub_lo, %vreg12, isub_hi; GPR64:%vreg15 GPR32:%vreg13,%vreg12
# *** IR Dump After Two-Address instruction pass ***:
# Machine code for function matclr: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=8, at location [SP]
Function Live Ins: %R0 in %vreg5, %R1 in %vreg6

BB#0: 
    Live Ins: %R0 %R1
	GID %CONFIG<imp-def>
	%vreg13<def> = MOVFS32_core %CONFIG<kill>; GPR32:%vreg13
	%vreg12<def> = COPY %vreg13; GPR32:%vreg12,%vreg13
	%vreg12<def,tied1> = MOVTi32ri %vreg12<tied0>, 72; GPR32:%vreg12
	%vreg15:isub_lo<def,read-undef> = COPY %vreg13<kill>; GPR64:%vreg15 GPR32:%vreg13
	%vreg15:isub_hi<def> = COPY %vreg12; GPR64:%vreg15 GPR32:%vreg12
	STRi64 %vreg15<kill>, <fi#1>, 0; mem:ST4[FixedStack1] ST4[FixedStack0] GPR64:%vreg15
	%CONFIG<def> = MOVTS32_core %vreg12<kill>; GPR32:%vreg12
	GIE %CONFIG<imp-use,kill>
    Successors according to CFG: BB#1(?%)

BB#1: derived from LLVM BB %entry
    Live Ins: %R0 %R1
    Predecessors according to CFG: BB#0
	%vreg6<def> = COPY %R1<kill>; GPR32:%vreg6
	%vreg5<def> = COPY %R0<kill>; GPR32:%vreg5
	%vreg0<def> = IMULrr_r32 %vreg6<kill>, %vreg6, %STATUS<imp-def,dead>; GPR32:%vreg0,%vreg6,%vreg6
	%vreg7<def,dead> = CMPri_r32 %vreg0, 0, %STATUS<imp-def>; GPR32:%vreg7,%vreg0
	BCC <BB#4>, 0, %STATUS<imp-use>
	BNONE32 <BB#2>, %STATUS<imp-use>
    Successors according to CFG: BB#4(0x30000000 / 0x80000000 = 37.50%) BB#2(0x50000000 / 0x80000000 = 62.50%)

BB#2: derived from LLVM BB %for.body.preheader
    Predecessors according to CFG: BB#1
	%vreg8<def> = MOVi32ri 0; GPR32:%vreg8
	%vreg16<def> = COPY %vreg5<kill>; GPR32:%vreg16,%vreg5
	%vreg17<def> = COPY %vreg8; GPR32:%vreg17,%vreg8
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %for.body
    Predecessors according to CFG: BB#2 BB#3
	%vreg2<def> = COPY %vreg17<kill>; GPR32:%vreg2,%vreg17
	%vreg1<def> = COPY %vreg16<kill>; GPR32:%vreg1,%vreg16
	%vreg4<def> = ADDri_r32 %vreg1, 4, %STATUS<imp-def,dead>; GPR32:%vreg4,%vreg1
	STRi32_r32 %vreg8, %vreg1<kill>, 0; mem:Volatile ST4[%lsr.iv](tbaa=!2) GPR32:%vreg8,%vreg1
	%vreg3<def> = ADDri_r32 %vreg2<kill>, 1, %STATUS<imp-def,dead>; GPR32:%vreg3,%vreg2
	%vreg10<def,dead> = CMPrr_r32 %vreg3, %vreg0, %STATUS<imp-def>; GPR32:%vreg10,%vreg3,%vreg0
	%vreg16<def> = COPY %vreg4<kill>; GPR32:%vreg16,%vreg4
	%vreg17<def> = COPY %vreg3<kill>; GPR32:%vreg17,%vreg3
	BCC <BB#3>, 8, %STATUS<imp-use>
	BNONE32 <BB#4>, %STATUS<imp-use>
    Successors according to CFG: BB#3(0x7c000000 / 0x80000000 = 96.88%) BB#4(0x04000000 / 0x80000000 = 3.12%)

BB#4: derived from LLVM BB %for.end
    Predecessors according to CFG: BB#1 BB#3
	%vreg14<def> = LDRi32_r32 <fi#0>, 0; mem:LD4[FixedStack0] GPR32:%vreg14
	GID
	%CONFIG<def> = MOVTS32_core %vreg14<kill>; GPR32:%vreg14
	GIE %CONFIG<imp-use,kill>
	RTS

# End machine code for function matclr.

# *** IR Dump Before Slot index numbering ***:
# Machine code for function matclr: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=8, at location [SP]
Function Live Ins: %R0 in %vreg5, %R1 in %vreg6

BB#0: 
    Live Ins: %R0 %R1
	GID %CONFIG<imp-def>
	%vreg13<def> = MOVFS32_core %CONFIG<kill>; GPR32:%vreg13
	%vreg12<def> = COPY %vreg13; GPR32:%vreg12,%vreg13
	%vreg12<def,tied1> = MOVTi32ri %vreg12<tied0>, 72; GPR32:%vreg12
	%vreg15:isub_lo<def,read-undef> = COPY %vreg13<kill>; GPR64:%vreg15 GPR32:%vreg13
	%vreg15:isub_hi<def> = COPY %vreg12; GPR64:%vreg15 GPR32:%vreg12
	STRi64 %vreg15<kill>, <fi#1>, 0; mem:ST4[FixedStack1] ST4[FixedStack0] GPR64:%vreg15
	%CONFIG<def> = MOVTS32_core %vreg12<kill>; GPR32:%vreg12
	GIE %CONFIG<imp-use,kill>
    Successors according to CFG: BB#1(?%)

BB#1: derived from LLVM BB %entry
    Live Ins: %R0 %R1
    Predecessors according to CFG: BB#0
	%vreg6<def> = COPY %R1<kill>; GPR32:%vreg6
	%vreg5<def> = COPY %R0<kill>; GPR32:%vreg5
	%vreg0<def> = IMULrr_r32 %vreg6<kill>, %vreg6, %STATUS<imp-def,dead>; GPR32:%vreg0,%vreg6,%vreg6
	%vreg7<def,dead> = CMPri_r32 %vreg0, 0, %STATUS<imp-def>; GPR32:%vreg7,%vreg0
	BCC <BB#4>, 0, %STATUS<imp-use>
	BNONE32 <BB#2>, %STATUS<imp-use>
    Successors according to CFG: BB#4(0x30000000 / 0x80000000 = 37.50%) BB#2(0x50000000 / 0x80000000 = 62.50%)

BB#2: derived from LLVM BB %for.body.preheader
    Predecessors according to CFG: BB#1
	%vreg8<def> = MOVi32ri 0; GPR32:%vreg8
	%vreg16<def> = COPY %vreg5<kill>; GPR32:%vreg16,%vreg5
	%vreg17<def> = COPY %vreg8; GPR32:%vreg17,%vreg8
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %for.body
    Predecessors according to CFG: BB#2 BB#3
	%vreg2<def> = COPY %vreg17<kill>; GPR32:%vreg2,%vreg17
	%vreg1<def> = COPY %vreg16<kill>; GPR32:%vreg1,%vreg16
	%vreg4<def> = ADDri_r32 %vreg1, 4, %STATUS<imp-def,dead>; GPR32:%vreg4,%vreg1
	STRi32_r32 %vreg8, %vreg1<kill>, 0; mem:Volatile ST4[%lsr.iv](tbaa=!2) GPR32:%vreg8,%vreg1
	%vreg3<def> = ADDri_r32 %vreg2<kill>, 1, %STATUS<imp-def,dead>; GPR32:%vreg3,%vreg2
	%vreg10<def,dead> = CMPrr_r32 %vreg3, %vreg0, %STATUS<imp-def>; GPR32:%vreg10,%vreg3,%vreg0
	%vreg16<def> = COPY %vreg4<kill>; GPR32:%vreg16,%vreg4
	%vreg17<def> = COPY %vreg3<kill>; GPR32:%vreg17,%vreg3
	BCC <BB#3>, 8, %STATUS<imp-use>
	BNONE32 <BB#4>, %STATUS<imp-use>
    Successors according to CFG: BB#3(0x7c000000 / 0x80000000 = 96.88%) BB#4(0x04000000 / 0x80000000 = 3.12%)

BB#4: derived from LLVM BB %for.end
    Predecessors according to CFG: BB#1 BB#3
	%vreg14<def> = LDRi32_r32 <fi#0>, 0; mem:LD4[FixedStack0] GPR32:%vreg14
	GID
	%CONFIG<def> = MOVTS32_core %vreg14<kill>; GPR32:%vreg14
	GIE %CONFIG<imp-use,kill>
	RTS

# End machine code for function matclr.

# Machine code for function matclr: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=8, at location [SP]
Function Live Ins: %R0 in %vreg5, %R1 in %vreg6

0B	BB#0: 
	    Live Ins: %R0 %R1
16B		GID %CONFIG<imp-def>
32B		%vreg13<def> = MOVFS32_core %CONFIG<kill>; GPR32:%vreg13
48B		%vreg12<def> = COPY %vreg13; GPR32:%vreg12,%vreg13
64B		%vreg12<def,tied1> = MOVTi32ri %vreg12<tied0>, 72; GPR32:%vreg12
80B		%vreg15:isub_lo<def,read-undef> = COPY %vreg13<kill>; GPR64:%vreg15 GPR32:%vreg13
96B		%vreg15:isub_hi<def> = COPY %vreg12; GPR64:%vreg15 GPR32:%vreg12
112B		STRi64 %vreg15<kill>, <fi#1>, 0; mem:ST4[FixedStack1] ST4[FixedStack0] GPR64:%vreg15
128B		%CONFIG<def> = MOVTS32_core %vreg12<kill>; GPR32:%vreg12
144B		GIE %CONFIG<imp-use,kill>
	    Successors according to CFG: BB#1(?%)

160B	BB#1: derived from LLVM BB %entry
	    Live Ins: %R0 %R1
	    Predecessors according to CFG: BB#0
176B		%vreg6<def> = COPY %R1<kill>; GPR32:%vreg6
192B		%vreg5<def> = COPY %R0<kill>; GPR32:%vreg5
208B		%vreg0<def> = IMULrr_r32 %vreg6<kill>, %vreg6, %STATUS<imp-def,dead>; GPR32:%vreg0,%vreg6,%vreg6
224B		%vreg7<def,dead> = CMPri_r32 %vreg0, 0, %STATUS<imp-def>; GPR32:%vreg7,%vreg0
240B		BCC <BB#4>, 0, %STATUS<imp-use>
256B		BNONE32 <BB#2>, %STATUS<imp-use>
	    Successors according to CFG: BB#4(0x30000000 / 0x80000000 = 37.50%) BB#2(0x50000000 / 0x80000000 = 62.50%)

272B	BB#2: derived from LLVM BB %for.body.preheader
	    Predecessors according to CFG: BB#1
288B		%vreg8<def> = MOVi32ri 0; GPR32:%vreg8
304B		%vreg16<def> = COPY %vreg5<kill>; GPR32:%vreg16,%vreg5
320B		%vreg17<def> = COPY %vreg8; GPR32:%vreg17,%vreg8
	    Successors according to CFG: BB#3(?%)

336B	BB#3: derived from LLVM BB %for.body
	    Predecessors according to CFG: BB#2 BB#3
352B		%vreg2<def> = COPY %vreg17<kill>; GPR32:%vreg2,%vreg17
368B		%vreg1<def> = COPY %vreg16<kill>; GPR32:%vreg1,%vreg16
384B		%vreg4<def> = ADDri_r32 %vreg1, 4, %STATUS<imp-def,dead>; GPR32:%vreg4,%vreg1
400B		STRi32_r32 %vreg8, %vreg1<kill>, 0; mem:Volatile ST4[%lsr.iv](tbaa=!2) GPR32:%vreg8,%vreg1
416B		%vreg3<def> = ADDri_r32 %vreg2<kill>, 1, %STATUS<imp-def,dead>; GPR32:%vreg3,%vreg2
432B		%vreg10<def,dead> = CMPrr_r32 %vreg3, %vreg0, %STATUS<imp-def>; GPR32:%vreg10,%vreg3,%vreg0
448B		%vreg16<def> = COPY %vreg4<kill>; GPR32:%vreg16,%vreg4
464B		%vreg17<def> = COPY %vreg3<kill>; GPR32:%vreg17,%vreg3
480B		BCC <BB#3>, 8, %STATUS<imp-use>
496B		BNONE32 <BB#4>, %STATUS<imp-use>
	    Successors according to CFG: BB#3(0x7c000000 / 0x80000000 = 96.88%) BB#4(0x04000000 / 0x80000000 = 3.12%)

512B	BB#4: derived from LLVM BB %for.end
	    Predecessors according to CFG: BB#1 BB#3
528B		%vreg14<def> = LDRi32_r32 <fi#0>, 0; mem:LD4[FixedStack0] GPR32:%vreg14
544B		GID
560B		%CONFIG<def> = MOVTS32_core %vreg14<kill>; GPR32:%vreg14
576B		GIE %CONFIG<imp-use,kill>
592B		RTS

# End machine code for function matclr.

# *** IR Dump After Slot index numbering ***:
# Machine code for function matclr: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=8, at location [SP]
Function Live Ins: %R0 in %vreg5, %R1 in %vreg6

0B	BB#0: 
	    Live Ins: %R0 %R1
16B		GID %CONFIG<imp-def>
32B		%vreg13<def> = MOVFS32_core %CONFIG<kill>; GPR32:%vreg13
48B		%vreg12<def> = COPY %vreg13; GPR32:%vreg12,%vreg13
64B		%vreg12<def,tied1> = MOVTi32ri %vreg12<tied0>, 72; GPR32:%vreg12
80B		%vreg15:isub_lo<def,read-undef> = COPY %vreg13<kill>; GPR64:%vreg15 GPR32:%vreg13
96B		%vreg15:isub_hi<def> = COPY %vreg12; GPR64:%vreg15 GPR32:%vreg12
112B		STRi64 %vreg15<kill>, <fi#1>, 0; mem:ST4[FixedStack1] ST4[FixedStack0] GPR64:%vreg15
128B		%CONFIG<def> = MOVTS32_core %vreg12<kill>; GPR32:%vreg12
144B		GIE %CONFIG<imp-use,kill>
	    Successors according to CFG: BB#1(?%)

160B	BB#1: derived from LLVM BB %entry
	    Live Ins: %R0 %R1
	    Predecessors according to CFG: BB#0
176B		%vreg6<def> = COPY %R1<kill>; GPR32:%vreg6
192B		%vreg5<def> = COPY %R0<kill>; GPR32:%vreg5
208B		%vreg0<def> = IMULrr_r32 %vreg6<kill>, %vreg6, %STATUS<imp-def,dead>; GPR32:%vreg0,%vreg6,%vreg6
224B		%vreg7<def,dead> = CMPri_r32 %vreg0, 0, %STATUS<imp-def>; GPR32:%vreg7,%vreg0
240B		BCC <BB#4>, 0, %STATUS<imp-use>
256B		BNONE32 <BB#2>, %STATUS<imp-use>
	    Successors according to CFG: BB#4(0x30000000 / 0x80000000 = 37.50%) BB#2(0x50000000 / 0x80000000 = 62.50%)

272B	BB#2: derived from LLVM BB %for.body.preheader
	    Predecessors according to CFG: BB#1
288B		%vreg8<def> = MOVi32ri 0; GPR32:%vreg8
304B		%vreg16<def> = COPY %vreg5<kill>; GPR32:%vreg16,%vreg5
320B		%vreg17<def> = COPY %vreg8; GPR32:%vreg17,%vreg8
	    Successors according to CFG: BB#3(?%)

336B	BB#3: derived from LLVM BB %for.body
	    Predecessors according to CFG: BB#2 BB#3
352B		%vreg2<def> = COPY %vreg17<kill>; GPR32:%vreg2,%vreg17
368B		%vreg1<def> = COPY %vreg16<kill>; GPR32:%vreg1,%vreg16
384B		%vreg4<def> = ADDri_r32 %vreg1, 4, %STATUS<imp-def,dead>; GPR32:%vreg4,%vreg1
400B		STRi32_r32 %vreg8, %vreg1<kill>, 0; mem:Volatile ST4[%lsr.iv](tbaa=!2) GPR32:%vreg8,%vreg1
416B		%vreg3<def> = ADDri_r32 %vreg2<kill>, 1, %STATUS<imp-def,dead>; GPR32:%vreg3,%vreg2
432B		%vreg10<def,dead> = CMPrr_r32 %vreg3, %vreg0, %STATUS<imp-def>; GPR32:%vreg10,%vreg3,%vreg0
448B		%vreg16<def> = COPY %vreg4<kill>; GPR32:%vreg16,%vreg4
464B		%vreg17<def> = COPY %vreg3<kill>; GPR32:%vreg17,%vreg3
480B		BCC <BB#3>, 8, %STATUS<imp-use>
496B		BNONE32 <BB#4>, %STATUS<imp-use>
	    Successors according to CFG: BB#3(0x7c000000 / 0x80000000 = 96.88%) BB#4(0x04000000 / 0x80000000 = 3.12%)

512B	BB#4: derived from LLVM BB %for.end
	    Predecessors according to CFG: BB#1 BB#3
528B		%vreg14<def> = LDRi32_r32 <fi#0>, 0; mem:LD4[FixedStack0] GPR32:%vreg14
544B		GID
560B		%CONFIG<def> = MOVTS32_core %vreg14<kill>; GPR32:%vreg14
576B		GIE %CONFIG<imp-use,kill>
592B		RTS

# End machine code for function matclr.

# *** IR Dump Before Live Interval Analysis ***:
# Machine code for function matclr: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=8, at location [SP]
Function Live Ins: %R0 in %vreg5, %R1 in %vreg6

0B	BB#0: 
	    Live Ins: %R0 %R1
16B		GID %CONFIG<imp-def>
32B		%vreg13<def> = MOVFS32_core %CONFIG<kill>; GPR32:%vreg13
48B		%vreg12<def> = COPY %vreg13; GPR32:%vreg12,%vreg13
64B		%vreg12<def,tied1> = MOVTi32ri %vreg12<tied0>, 72; GPR32:%vreg12
80B		%vreg15:isub_lo<def,read-undef> = COPY %vreg13<kill>; GPR64:%vreg15 GPR32:%vreg13
96B		%vreg15:isub_hi<def> = COPY %vreg12; GPR64:%vreg15 GPR32:%vreg12
112B		STRi64 %vreg15<kill>, <fi#1>, 0; mem:ST4[FixedStack1] ST4[FixedStack0] GPR64:%vreg15
128B		%CONFIG<def> = MOVTS32_core %vreg12<kill>; GPR32:%vreg12
144B		GIE %CONFIG<imp-use,kill>
	    Successors according to CFG: BB#1(?%)

160B	BB#1: derived from LLVM BB %entry
	    Live Ins: %R0 %R1
	    Predecessors according to CFG: BB#0
176B		%vreg6<def> = COPY %R1<kill>; GPR32:%vreg6
192B		%vreg5<def> = COPY %R0<kill>; GPR32:%vreg5
208B		%vreg0<def> = IMULrr_r32 %vreg6<kill>, %vreg6, %STATUS<imp-def,dead>; GPR32:%vreg0,%vreg6,%vreg6
224B		%vreg7<def,dead> = CMPri_r32 %vreg0, 0, %STATUS<imp-def>; GPR32:%vreg7,%vreg0
240B		BCC <BB#4>, 0, %STATUS<imp-use>
256B		BNONE32 <BB#2>, %STATUS<imp-use>
	    Successors according to CFG: BB#4(0x30000000 / 0x80000000 = 37.50%) BB#2(0x50000000 / 0x80000000 = 62.50%)

272B	BB#2: derived from LLVM BB %for.body.preheader
	    Predecessors according to CFG: BB#1
288B		%vreg8<def> = MOVi32ri 0; GPR32:%vreg8
304B		%vreg16<def> = COPY %vreg5<kill>; GPR32:%vreg16,%vreg5
320B		%vreg17<def> = COPY %vreg8; GPR32:%vreg17,%vreg8
	    Successors according to CFG: BB#3(?%)

336B	BB#3: derived from LLVM BB %for.body
	    Predecessors according to CFG: BB#2 BB#3
352B		%vreg2<def> = COPY %vreg17<kill>; GPR32:%vreg2,%vreg17
368B		%vreg1<def> = COPY %vreg16<kill>; GPR32:%vreg1,%vreg16
384B		%vreg4<def> = ADDri_r32 %vreg1, 4, %STATUS<imp-def,dead>; GPR32:%vreg4,%vreg1
400B		STRi32_r32 %vreg8, %vreg1<kill>, 0; mem:Volatile ST4[%lsr.iv](tbaa=!2) GPR32:%vreg8,%vreg1
416B		%vreg3<def> = ADDri_r32 %vreg2<kill>, 1, %STATUS<imp-def,dead>; GPR32:%vreg3,%vreg2
432B		%vreg10<def,dead> = CMPrr_r32 %vreg3, %vreg0, %STATUS<imp-def>; GPR32:%vreg10,%vreg3,%vreg0
448B		%vreg16<def> = COPY %vreg4<kill>; GPR32:%vreg16,%vreg4
464B		%vreg17<def> = COPY %vreg3<kill>; GPR32:%vreg17,%vreg3
480B		BCC <BB#3>, 8, %STATUS<imp-use>
496B		BNONE32 <BB#4>, %STATUS<imp-use>
	    Successors according to CFG: BB#3(0x7c000000 / 0x80000000 = 96.88%) BB#4(0x04000000 / 0x80000000 = 3.12%)

512B	BB#4: derived from LLVM BB %for.end
	    Predecessors according to CFG: BB#1 BB#3
528B		%vreg14<def> = LDRi32_r32 <fi#0>, 0; mem:LD4[FixedStack0] GPR32:%vreg14
544B		GID
560B		%CONFIG<def> = MOVTS32_core %vreg14<kill>; GPR32:%vreg14
576B		GIE %CONFIG<imp-use,kill>
592B		RTS

# End machine code for function matclr.

Computing live-in reg-units in ABI blocks.
0B	BB#0 R0#0 R1#0
Created 2 new intervals.
********** INTERVALS **********
R0 [0B,192r:0)  0@0B-phi
R1 [0B,176r:0)  0@0B-phi
%vreg0 [208r,512B:0)  0@208r
%vreg1 [368r,400r:0)  0@368r
%vreg2 [352r,416r:0)  0@352r
%vreg3 [416r,464r:0)  0@416r
%vreg4 [384r,448r:0)  0@384r
%vreg5 [192r,304r:0)  0@192r
%vreg6 [176r,208r:0)  0@176r
%vreg7 [224r,224d:0)  0@224r
%vreg8 [288r,512B:0)  0@288r
%vreg10 [432r,432d:0)  0@432r
%vreg12 [48r,64r:0)[64r,128r:1)  0@48r 1@64r
%vreg13 [32r,80r:0)  0@32r
%vreg14 [528r,560r:0)  0@528r
%vreg15 [80r,96r:1)[96r,112r:0)  0@96r 1@80r
%vreg16 [304r,336B:0)[336B,368r:2)[448r,512B:1)  0@304r 1@448r 2@336B-phi
%vreg17 [320r,336B:0)[336B,352r:2)[464r,512B:1)  0@320r 1@464r 2@336B-phi
RegMasks:
********** MACHINEINSTRS **********
# Machine code for function matclr: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=8, at location [SP]
Function Live Ins: %R0 in %vreg5, %R1 in %vreg6

0B	BB#0: 
	    Live Ins: %R0 %R1
16B		GID %CONFIG<imp-def>
32B		%vreg13<def> = MOVFS32_core %CONFIG<kill>; GPR32:%vreg13
48B		%vreg12<def> = COPY %vreg13; GPR32:%vreg12,%vreg13
64B		%vreg12<def,tied1> = MOVTi32ri %vreg12<tied0>, 72; GPR32:%vreg12
80B		%vreg15:isub_lo<def,read-undef> = COPY %vreg13; GPR64:%vreg15 GPR32:%vreg13
96B		%vreg15:isub_hi<def> = COPY %vreg12; GPR64:%vreg15 GPR32:%vreg12
112B		STRi64 %vreg15, <fi#1>, 0; mem:ST4[FixedStack1] ST4[FixedStack0] GPR64:%vreg15
128B		%CONFIG<def> = MOVTS32_core %vreg12; GPR32:%vreg12
144B		GIE %CONFIG<imp-use,kill>
	    Successors according to CFG: BB#1(?%)

160B	BB#1: derived from LLVM BB %entry
	    Live Ins: %R0 %R1
	    Predecessors according to CFG: BB#0
176B		%vreg6<def> = COPY %R1; GPR32:%vreg6
192B		%vreg5<def> = COPY %R0; GPR32:%vreg5
208B		%vreg0<def> = IMULrr_r32 %vreg6, %vreg6, %STATUS<imp-def,dead>; GPR32:%vreg0,%vreg6,%vreg6
224B		%vreg7<def,dead> = CMPri_r32 %vreg0, 0, %STATUS<imp-def>; GPR32:%vreg7,%vreg0
240B		BCC <BB#4>, 0, %STATUS<imp-use>
256B		BNONE32 <BB#2>, %STATUS<imp-use>
	    Successors according to CFG: BB#4(0x30000000 / 0x80000000 = 37.50%) BB#2(0x50000000 / 0x80000000 = 62.50%)

272B	BB#2: derived from LLVM BB %for.body.preheader
	    Predecessors according to CFG: BB#1
288B		%vreg8<def> = MOVi32ri 0; GPR32:%vreg8
304B		%vreg16<def> = COPY %vreg5; GPR32:%vreg16,%vreg5
320B		%vreg17<def> = COPY %vreg8; GPR32:%vreg17,%vreg8
	    Successors according to CFG: BB#3(?%)

336B	BB#3: derived from LLVM BB %for.body
	    Predecessors according to CFG: BB#2 BB#3
352B		%vreg2<def> = COPY %vreg17; GPR32:%vreg2,%vreg17
368B		%vreg1<def> = COPY %vreg16; GPR32:%vreg1,%vreg16
384B		%vreg4<def> = ADDri_r32 %vreg1, 4, %STATUS<imp-def,dead>; GPR32:%vreg4,%vreg1
400B		STRi32_r32 %vreg8, %vreg1, 0; mem:Volatile ST4[%lsr.iv](tbaa=!2) GPR32:%vreg8,%vreg1
416B		%vreg3<def> = ADDri_r32 %vreg2, 1, %STATUS<imp-def,dead>; GPR32:%vreg3,%vreg2
432B		%vreg10<def,dead> = CMPrr_r32 %vreg3, %vreg0, %STATUS<imp-def>; GPR32:%vreg10,%vreg3,%vreg0
448B		%vreg16<def> = COPY %vreg4; GPR32:%vreg16,%vreg4
464B		%vreg17<def> = COPY %vreg3; GPR32:%vreg17,%vreg3
480B		BCC <BB#3>, 8, %STATUS<imp-use>
496B		BNONE32 <BB#4>, %STATUS<imp-use>
	    Successors according to CFG: BB#3(0x7c000000 / 0x80000000 = 96.88%) BB#4(0x04000000 / 0x80000000 = 3.12%)

512B	BB#4: derived from LLVM BB %for.end
	    Predecessors according to CFG: BB#1 BB#3
528B		%vreg14<def> = LDRi32_r32 <fi#0>, 0; mem:LD4[FixedStack0] GPR32:%vreg14
544B		GID
560B		%CONFIG<def> = MOVTS32_core %vreg14; GPR32:%vreg14
576B		GIE %CONFIG<imp-use,kill>
592B		RTS

# End machine code for function matclr.

# *** IR Dump After Live Interval Analysis ***:
# Machine code for function matclr: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=8, at location [SP]
Function Live Ins: %R0 in %vreg5, %R1 in %vreg6

0B	BB#0: 
	    Live Ins: %R0 %R1
16B		GID %CONFIG<imp-def>
32B		%vreg13<def> = MOVFS32_core %CONFIG<kill>; GPR32:%vreg13
48B		%vreg12<def> = COPY %vreg13; GPR32:%vreg12,%vreg13
64B		%vreg12<def,tied1> = MOVTi32ri %vreg12<tied0>, 72; GPR32:%vreg12
80B		%vreg15:isub_lo<def,read-undef> = COPY %vreg13; GPR64:%vreg15 GPR32:%vreg13
96B		%vreg15:isub_hi<def> = COPY %vreg12; GPR64:%vreg15 GPR32:%vreg12
112B		STRi64 %vreg15, <fi#1>, 0; mem:ST4[FixedStack1] ST4[FixedStack0] GPR64:%vreg15
128B		%CONFIG<def> = MOVTS32_core %vreg12; GPR32:%vreg12
144B		GIE %CONFIG<imp-use,kill>
	    Successors according to CFG: BB#1(?%)

160B	BB#1: derived from LLVM BB %entry
	    Live Ins: %R0 %R1
	    Predecessors according to CFG: BB#0
176B		%vreg6<def> = COPY %R1; GPR32:%vreg6
192B		%vreg5<def> = COPY %R0; GPR32:%vreg5
208B		%vreg0<def> = IMULrr_r32 %vreg6, %vreg6, %STATUS<imp-def,dead>; GPR32:%vreg0,%vreg6,%vreg6
224B		%vreg7<def,dead> = CMPri_r32 %vreg0, 0, %STATUS<imp-def>; GPR32:%vreg7,%vreg0
240B		BCC <BB#4>, 0, %STATUS<imp-use>
256B		BNONE32 <BB#2>, %STATUS<imp-use>
	    Successors according to CFG: BB#4(0x30000000 / 0x80000000 = 37.50%) BB#2(0x50000000 / 0x80000000 = 62.50%)

272B	BB#2: derived from LLVM BB %for.body.preheader
	    Predecessors according to CFG: BB#1
288B		%vreg8<def> = MOVi32ri 0; GPR32:%vreg8
304B		%vreg16<def> = COPY %vreg5; GPR32:%vreg16,%vreg5
320B		%vreg17<def> = COPY %vreg8; GPR32:%vreg17,%vreg8
	    Successors according to CFG: BB#3(?%)

336B	BB#3: derived from LLVM BB %for.body
	    Predecessors according to CFG: BB#2 BB#3
352B		%vreg2<def> = COPY %vreg17; GPR32:%vreg2,%vreg17
368B		%vreg1<def> = COPY %vreg16; GPR32:%vreg1,%vreg16
384B		%vreg4<def> = ADDri_r32 %vreg1, 4, %STATUS<imp-def,dead>; GPR32:%vreg4,%vreg1
400B		STRi32_r32 %vreg8, %vreg1, 0; mem:Volatile ST4[%lsr.iv](tbaa=!2) GPR32:%vreg8,%vreg1
416B		%vreg3<def> = ADDri_r32 %vreg2, 1, %STATUS<imp-def,dead>; GPR32:%vreg3,%vreg2
432B		%vreg10<def,dead> = CMPrr_r32 %vreg3, %vreg0, %STATUS<imp-def>; GPR32:%vreg10,%vreg3,%vreg0
448B		%vreg16<def> = COPY %vreg4; GPR32:%vreg16,%vreg4
464B		%vreg17<def> = COPY %vreg3; GPR32:%vreg17,%vreg3
480B		BCC <BB#3>, 8, %STATUS<imp-use>
496B		BNONE32 <BB#4>, %STATUS<imp-use>
	    Successors according to CFG: BB#3(0x7c000000 / 0x80000000 = 96.88%) BB#4(0x04000000 / 0x80000000 = 3.12%)

512B	BB#4: derived from LLVM BB %for.end
	    Predecessors according to CFG: BB#1 BB#3
528B		%vreg14<def> = LDRi32_r32 <fi#0>, 0; mem:LD4[FixedStack0] GPR32:%vreg14
544B		GID
560B		%CONFIG<def> = MOVTS32_core %vreg14; GPR32:%vreg14
576B		GIE %CONFIG<imp-use,kill>
592B		RTS

# End machine code for function matclr.

# *** IR Dump Before Simple Register Coalescing ***:
# Machine code for function matclr: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=8, at location [SP]
Function Live Ins: %R0 in %vreg5, %R1 in %vreg6

0B	BB#0: 
	    Live Ins: %R0 %R1
16B		GID %CONFIG<imp-def>
32B		%vreg13<def> = MOVFS32_core %CONFIG<kill>; GPR32:%vreg13
48B		%vreg12<def> = COPY %vreg13; GPR32:%vreg12,%vreg13
64B		%vreg12<def,tied1> = MOVTi32ri %vreg12<tied0>, 72; GPR32:%vreg12
80B		%vreg15:isub_lo<def,read-undef> = COPY %vreg13; GPR64:%vreg15 GPR32:%vreg13
96B		%vreg15:isub_hi<def> = COPY %vreg12; GPR64:%vreg15 GPR32:%vreg12
112B		STRi64 %vreg15, <fi#1>, 0; mem:ST4[FixedStack1] ST4[FixedStack0] GPR64:%vreg15
128B		%CONFIG<def> = MOVTS32_core %vreg12; GPR32:%vreg12
144B		GIE %CONFIG<imp-use,kill>
	    Successors according to CFG: BB#1(?%)

160B	BB#1: derived from LLVM BB %entry
	    Live Ins: %R0 %R1
	    Predecessors according to CFG: BB#0
176B		%vreg6<def> = COPY %R1; GPR32:%vreg6
192B		%vreg5<def> = COPY %R0; GPR32:%vreg5
208B		%vreg0<def> = IMULrr_r32 %vreg6, %vreg6, %STATUS<imp-def,dead>; GPR32:%vreg0,%vreg6,%vreg6
224B		%vreg7<def,dead> = CMPri_r32 %vreg0, 0, %STATUS<imp-def>; GPR32:%vreg7,%vreg0
240B		BCC <BB#4>, 0, %STATUS<imp-use>
256B		BNONE32 <BB#2>, %STATUS<imp-use>
	    Successors according to CFG: BB#4(0x30000000 / 0x80000000 = 37.50%) BB#2(0x50000000 / 0x80000000 = 62.50%)

272B	BB#2: derived from LLVM BB %for.body.preheader
	    Predecessors according to CFG: BB#1
288B		%vreg8<def> = MOVi32ri 0; GPR32:%vreg8
304B		%vreg16<def> = COPY %vreg5; GPR32:%vreg16,%vreg5
320B		%vreg17<def> = COPY %vreg8; GPR32:%vreg17,%vreg8
	    Successors according to CFG: BB#3(?%)

336B	BB#3: derived from LLVM BB %for.body
	    Predecessors according to CFG: BB#2 BB#3
352B		%vreg2<def> = COPY %vreg17; GPR32:%vreg2,%vreg17
368B		%vreg1<def> = COPY %vreg16; GPR32:%vreg1,%vreg16
384B		%vreg4<def> = ADDri_r32 %vreg1, 4, %STATUS<imp-def,dead>; GPR32:%vreg4,%vreg1
400B		STRi32_r32 %vreg8, %vreg1, 0; mem:Volatile ST4[%lsr.iv](tbaa=!2) GPR32:%vreg8,%vreg1
416B		%vreg3<def> = ADDri_r32 %vreg2, 1, %STATUS<imp-def,dead>; GPR32:%vreg3,%vreg2
432B		%vreg10<def,dead> = CMPrr_r32 %vreg3, %vreg0, %STATUS<imp-def>; GPR32:%vreg10,%vreg3,%vreg0
448B		%vreg16<def> = COPY %vreg4; GPR32:%vreg16,%vreg4
464B		%vreg17<def> = COPY %vreg3; GPR32:%vreg17,%vreg3
480B		BCC <BB#3>, 8, %STATUS<imp-use>
496B		BNONE32 <BB#4>, %STATUS<imp-use>
	    Successors according to CFG: BB#3(0x7c000000 / 0x80000000 = 96.88%) BB#4(0x04000000 / 0x80000000 = 3.12%)

512B	BB#4: derived from LLVM BB %for.end
	    Predecessors according to CFG: BB#1 BB#3
528B		%vreg14<def> = LDRi32_r32 <fi#0>, 0; mem:LD4[FixedStack0] GPR32:%vreg14
544B		GID
560B		%CONFIG<def> = MOVTS32_core %vreg14; GPR32:%vreg14
576B		GIE %CONFIG<imp-use,kill>
592B		RTS

# End machine code for function matclr.

********** SIMPLE REGISTER COALESCING **********
********** Function: matclr
********** JOINING INTERVALS ***********
for.body:
352B	%vreg2<def> = COPY %vreg17; GPR32:%vreg2,%vreg17
	Considering merging to GPR32 with %vreg2 in %vreg17
		RHS = %vreg2 [352r,416r:0)  0@352r
		LHS = %vreg17 [320r,336B:0)[336B,352r:2)[464r,512B:1)  0@320r 1@464r 2@336B-phi
		merge %vreg2:0@352r into %vreg17:2@336B --> @336B
		erased:	352r	%vreg2<def> = COPY %vreg17; GPR32:%vreg2,%vreg17
AllocationOrder(GPR32) = [ %R0 %R1 %R2 %R3 %IP %R16 %R17 %R18 %R19 %R20 %R21 %R22 %R23 %R24 %R25 %R26 %R27 %R32 %R33 %R34 %R35 %R36 %R37 %R38 %R39 %R40 %R41 %R42 %R43 %R44 %R45 %R46 %R47 %R48 %R49 %R50 %R51 %R52 %R53 %R54 %R55 %R56 %R57 %R58 %R59 %R60 %R61 %R62 %R63 %R4 %R5 %R6 %R7 %R8 ]
		updated: 416B	%vreg3<def> = ADDri_r32 %vreg17, 1, %STATUS<imp-def,dead>; GPR32:%vreg3,%vreg17
	Success: %vreg2 -> %vreg17
	Result = %vreg17 [320r,336B:0)[336B,416r:2)[464r,512B:1)  0@320r 1@464r 2@336B-phi
368B	%vreg1<def> = COPY %vreg16; GPR32:%vreg1,%vreg16
	Considering merging to GPR32 with %vreg1 in %vreg16
		RHS = %vreg1 [368r,400r:0)  0@368r
		LHS = %vreg16 [304r,336B:0)[336B,368r:2)[448r,512B:1)  0@304r 1@448r 2@336B-phi
		merge %vreg1:0@368r into %vreg16:2@336B --> @336B
		erased:	368r	%vreg1<def> = COPY %vreg16; GPR32:%vreg1,%vreg16
		updated: 384B	%vreg4<def> = ADDri_r32 %vreg16, 4, %STATUS<imp-def,dead>; GPR32:%vreg4,%vreg16
		updated: 400B	STRi32_r32 %vreg8, %vreg16, 0; mem:Volatile ST4[%lsr.iv](tbaa=!2) GPR32:%vreg8,%vreg16
	Success: %vreg1 -> %vreg16
	Result = %vreg16 [304r,336B:0)[336B,400r:2)[448r,512B:1)  0@304r 1@448r 2@336B-phi
448B	%vreg16<def> = COPY %vreg4; GPR32:%vreg16,%vreg4
	Considering merging to GPR32 with %vreg4 in %vreg16
		RHS = %vreg4 [384r,448r:0)  0@384r
		LHS = %vreg16 [304r,336B:0)[336B,400r:2)[448r,512B:1)  0@304r 1@448r 2@336B-phi
		merge %vreg16:1@448r into %vreg4:0@384r --> @384r
		interference at %vreg4:0@384r
	Interference!
464B	%vreg17<def> = COPY %vreg3; GPR32:%vreg17,%vreg3
	Considering merging to GPR32 with %vreg3 in %vreg17
		RHS = %vreg3 [416r,464r:0)  0@416r
		LHS = %vreg17 [320r,336B:0)[336B,416r:2)[464r,512B:1)  0@320r 1@464r 2@336B-phi
		merge %vreg17:1@464r into %vreg3:0@416r --> @416r
		erased:	464r	%vreg17<def> = COPY %vreg3; GPR32:%vreg17,%vreg3
		updated: 416B	%vreg17<def> = ADDri_r32 %vreg17, 1, %STATUS<imp-def,dead>; GPR32:%vreg17
		updated: 432B	%vreg10<def,dead> = CMPrr_r32 %vreg17, %vreg0, %STATUS<imp-def>; GPR32:%vreg10,%vreg17,%vreg0
	Success: %vreg3 -> %vreg17
	Result = %vreg17 [320r,336B:0)[336B,416r:1)[416r,512B:2)  0@320r 1@336B-phi 2@416r
entry:
176B	%vreg6<def> = COPY %R1; GPR32:%vreg6
	Considering merging %vreg6 with %R1
	Can only merge into reserved registers.
192B	%vreg5<def> = COPY %R0; GPR32:%vreg5
	Considering merging %vreg5 with %R0
	Can only merge into reserved registers.
for.body.preheader:
304B	%vreg16<def> = COPY %vreg5; GPR32:%vreg16,%vreg5
	Considering merging to GPR32 with %vreg5 in %vreg16
		RHS = %vreg5 [192r,304r:0)  0@192r
		LHS = %vreg16 [304r,336B:0)[336B,400r:2)[448r,512B:1)  0@304r 1@448r 2@336B-phi
		merge %vreg16:0@304r into %vreg5:0@192r --> @192r
		erased:	304r	%vreg16<def> = COPY %vreg5; GPR32:%vreg16,%vreg5
		updated: 192B	%vreg16<def> = COPY %R0; GPR32:%vreg16
	Success: %vreg5 -> %vreg16
	Result = %vreg16 [192r,336B:0)[336B,400r:2)[448r,512B:1)  0@192r 1@448r 2@336B-phi
320B	%vreg17<def> = COPY %vreg8; GPR32:%vreg17,%vreg8
	Considering merging to GPR32 with %vreg8 in %vreg17
		RHS = %vreg8 [288r,512B:0)  0@288r
		LHS = %vreg17 [320r,336B:0)[336B,416r:1)[416r,512B:2)  0@320r 1@336B-phi 2@416r
		merge %vreg17:0@320r into %vreg8:0@288r --> @288r
		interference at %vreg17:2@416r
	Interference!
for.end:
(null):
48B	%vreg12<def> = COPY %vreg13; GPR32:%vreg12,%vreg13
	Considering merging to GPR32 with %vreg13 in %vreg12
		RHS = %vreg13 [32r,80r:0)  0@32r
		LHS = %vreg12 [48r,64r:0)[64r,128r:1)  0@48r 1@64r
		merge %vreg12:0@48r into %vreg13:0@32r --> @32r
		interference at %vreg12:1@64r
	Interference!
80B	%vreg15:isub_lo<def,read-undef> = COPY %vreg13; GPR64:%vreg15 GPR32:%vreg13
	Considering merging to FPR64_with_isub_lo_in_FPR32 with %vreg13 in %vreg15:isub_lo
		RHS = %vreg13 [32r,80r:0)  0@32r
		LHS = %vreg15 [80r,96r:1)[96r,112r:0)  0@96r 1@80r
		merge %vreg15:1@80r into %vreg13:0@32r --> @32r
		erased:	80r	%vreg15:isub_lo<def,read-undef> = COPY %vreg13; GPR64:%vreg15 GPR32:%vreg13
AllocationOrder(FPR64_with_isub_lo_in_FPR32) = [ %D0 %D1 %D9 %D10 %D11 %D12 %D13 %D16 %D17 %D18 %D19 %D20 %D21 %D22 %D23 %D24 %D25 %D26 %D27 %D28 %D29 %D30 %D31 %D2 %D3 ]
		updated: 32B	%vreg15:isub_lo<def,read-undef> = MOVFS32_core %CONFIG<kill>; FPR64_with_isub_lo_in_FPR32:%vreg15
		updated: 48B	%vreg12<def> = COPY %vreg15:isub_lo; GPR32:%vreg12 FPR64_with_isub_lo_in_FPR32:%vreg15
	Success: %vreg13:isub_lo -> %vreg15
	Result = %vreg15 [32r,96r:0)[96r,112r:1)  0@32r 1@96r
96B	%vreg15:isub_hi<def> = COPY %vreg12; FPR64_with_isub_lo_in_FPR32:%vreg15 GPR32:%vreg12
	Considering merging to FPR64_with_isub_hi_in_FPR32 with %vreg12 in %vreg15:isub_hi
		RHS = %vreg12 [48r,64r:0)[64r,128r:1)  0@48r 1@64r
		LHS = %vreg15 [32r,96r:0)[96r,112r:1)  0@32r 1@96r
		merge %vreg15:1@96r into %vreg12:1@64r --> @64r
		pruned %vreg15 at 48r: [32r,48r:0)[96r,112r:1)  0@32r 1@96r
		pruned %vreg15 at 64r: [32r,48r:0)[96r,112r:1)  0@32r 1@96r
		erased:	96r	%vreg15:isub_hi<def> = COPY %vreg12; FPR64_with_isub_lo_in_FPR32:%vreg15 GPR32:%vreg12
		restoring liveness to 3 points: 96r,48r,64r:  %vreg15 [32r,48r:0)[48r,64r:2)[64r,128r:1)  0@32r 1@64r 2@48r
AllocationOrder(FPR64_with_isub_hi_in_FPR32) = [ %D0 %D1 %D9 %D10 %D11 %D12 %D13 %D16 %D17 %D18 %D19 %D20 %D21 %D22 %D23 %D24 %D25 %D26 %D27 %D28 %D29 %D30 %D31 %D2 %D3 ]
		updated: 48B	%vreg15:isub_hi<def> = COPY %vreg15:isub_lo; FPR64_with_isub_hi_in_FPR32:%vreg15
		updated: 64B	%vreg15:isub_hi<def,tied1> = MOVTi32ri %vreg15:isub_hi<tied0>, 72; FPR64_with_isub_hi_in_FPR32:%vreg15
		updated: 128B	%CONFIG<def> = MOVTS32_core %vreg15:isub_hi; FPR64_with_isub_hi_in_FPR32:%vreg15
	Success: %vreg12:isub_hi -> %vreg15
	Result = %vreg15 [32r,48r:0)[48r,64r:2)[64r,128r:1)  0@32r 1@64r 2@48r
448B	%vreg16<def> = COPY %vreg4; GPR32:%vreg16,%vreg4
	Considering merging to GPR32 with %vreg4 in %vreg16
		RHS = %vreg4 [384r,448r:0)  0@384r
		LHS = %vreg16 [192r,336B:0)[336B,400r:2)[448r,512B:1)  0@192r 1@448r 2@336B-phi
		merge %vreg16:1@448r into %vreg4:0@384r --> @384r
		interference at %vreg4:0@384r
	Interference!
320B	%vreg17<def> = COPY %vreg8; GPR32:%vreg17,%vreg8
	Considering merging to GPR32 with %vreg8 in %vreg17
		RHS = %vreg8 [288r,512B:0)  0@288r
		LHS = %vreg17 [320r,336B:0)[336B,416r:1)[416r,512B:2)  0@320r 1@336B-phi 2@416r
		merge %vreg17:0@320r into %vreg8:0@288r --> @288r
		interference at %vreg17:2@416r
	Interference!
48B	%vreg15:isub_hi<def> = COPY %vreg15:isub_lo; FPR64_with_isub_hi_in_FPR32:%vreg15
	Not coalescable.
Trying to inflate 0 regs.
********** INTERVALS **********
R0 [0B,192r:0)  0@0B-phi
R1 [0B,176r:0)  0@0B-phi
%vreg0 [208r,512B:0)  0@208r
%vreg4 [384r,448r:0)  0@384r
%vreg6 [176r,208r:0)  0@176r
%vreg7 [224r,224d:0)  0@224r
%vreg8 [288r,512B:0)  0@288r
%vreg10 [432r,432d:0)  0@432r
%vreg14 [528r,560r:0)  0@528r
%vreg15 [32r,48r:0)[48r,64r:2)[64r,128r:1)  0@32r 1@64r 2@48r
%vreg16 [192r,336B:0)[336B,400r:2)[448r,512B:1)  0@192r 1@448r 2@336B-phi
%vreg17 [320r,336B:0)[336B,416r:1)[416r,512B:2)  0@320r 1@336B-phi 2@416r
RegMasks:
********** MACHINEINSTRS **********
# Machine code for function matclr: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=8, at location [SP]
Function Live Ins: %R0 in %vreg5, %R1 in %vreg6

0B	BB#0: 
	    Live Ins: %R0 %R1
16B		GID %CONFIG<imp-def>
32B		%vreg15:isub_lo<def,read-undef> = MOVFS32_core %CONFIG<kill>; FPR64_with_isub_hi_in_FPR32:%vreg15
48B		%vreg15:isub_hi<def> = COPY %vreg15:isub_lo; FPR64_with_isub_hi_in_FPR32:%vreg15
64B		%vreg15:isub_hi<def,tied1> = MOVTi32ri %vreg15:isub_hi<tied0>, 72; FPR64_with_isub_hi_in_FPR32:%vreg15
112B		STRi64 %vreg15, <fi#1>, 0; mem:ST4[FixedStack1] ST4[FixedStack0] FPR64_with_isub_hi_in_FPR32:%vreg15
128B		%CONFIG<def> = MOVTS32_core %vreg15:isub_hi; FPR64_with_isub_hi_in_FPR32:%vreg15
144B		GIE %CONFIG<imp-use,kill>
	    Successors according to CFG: BB#1(?%)

160B	BB#1: derived from LLVM BB %entry
	    Live Ins: %R0 %R1
	    Predecessors according to CFG: BB#0
176B		%vreg6<def> = COPY %R1; GPR32:%vreg6
192B		%vreg16<def> = COPY %R0; GPR32:%vreg16
208B		%vreg0<def> = IMULrr_r32 %vreg6, %vreg6, %STATUS<imp-def,dead>; GPR32:%vreg0,%vreg6,%vreg6
224B		%vreg7<def,dead> = CMPri_r32 %vreg0, 0, %STATUS<imp-def>; GPR32:%vreg7,%vreg0
240B		BCC <BB#4>, 0, %STATUS<imp-use>
256B		BNONE32 <BB#2>, %STATUS<imp-use>
	    Successors according to CFG: BB#4(0x30000000 / 0x80000000 = 37.50%) BB#2(0x50000000 / 0x80000000 = 62.50%)

272B	BB#2: derived from LLVM BB %for.body.preheader
	    Predecessors according to CFG: BB#1
288B		%vreg8<def> = MOVi32ri 0; GPR32:%vreg8
320B		%vreg17<def> = COPY %vreg8; GPR32:%vreg17,%vreg8
	    Successors according to CFG: BB#3(?%)

336B	BB#3: derived from LLVM BB %for.body
	    Predecessors according to CFG: BB#2 BB#3
384B		%vreg4<def> = ADDri_r32 %vreg16, 4, %STATUS<imp-def,dead>; GPR32:%vreg4,%vreg16
400B		STRi32_r32 %vreg8, %vreg16, 0; mem:Volatile ST4[%lsr.iv](tbaa=!2) GPR32:%vreg8,%vreg16
416B		%vreg17<def> = ADDri_r32 %vreg17, 1, %STATUS<imp-def,dead>; GPR32:%vreg17
432B		%vreg10<def,dead> = CMPrr_r32 %vreg17, %vreg0, %STATUS<imp-def>; GPR32:%vreg10,%vreg17,%vreg0
448B		%vreg16<def> = COPY %vreg4; GPR32:%vreg16,%vreg4
480B		BCC <BB#3>, 8, %STATUS<imp-use>
496B		BNONE32 <BB#4>, %STATUS<imp-use>
	    Successors according to CFG: BB#3(0x7c000000 / 0x80000000 = 96.88%) BB#4(0x04000000 / 0x80000000 = 3.12%)

512B	BB#4: derived from LLVM BB %for.end
	    Predecessors according to CFG: BB#1 BB#3
528B		%vreg14<def> = LDRi32_r32 <fi#0>, 0; mem:LD4[FixedStack0] GPR32:%vreg14
544B		GID
560B		%CONFIG<def> = MOVTS32_core %vreg14; GPR32:%vreg14
576B		GIE %CONFIG<imp-use,kill>
592B		RTS

# End machine code for function matclr.

# *** IR Dump After Simple Register Coalescing ***:
# Machine code for function matclr: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=8, at location [SP]
Function Live Ins: %R0 in %vreg5, %R1 in %vreg6

0B	BB#0: 
	    Live Ins: %R0 %R1
16B		GID %CONFIG<imp-def>
32B		%vreg15:isub_lo<def,read-undef> = MOVFS32_core %CONFIG<kill>; FPR64_with_isub_hi_in_FPR32:%vreg15
48B		%vreg15:isub_hi<def> = COPY %vreg15:isub_lo; FPR64_with_isub_hi_in_FPR32:%vreg15
64B		%vreg15:isub_hi<def,tied1> = MOVTi32ri %vreg15:isub_hi<tied0>, 72; FPR64_with_isub_hi_in_FPR32:%vreg15
112B		STRi64 %vreg15, <fi#1>, 0; mem:ST4[FixedStack1] ST4[FixedStack0] FPR64_with_isub_hi_in_FPR32:%vreg15
128B		%CONFIG<def> = MOVTS32_core %vreg15:isub_hi; FPR64_with_isub_hi_in_FPR32:%vreg15
144B		GIE %CONFIG<imp-use,kill>
	    Successors according to CFG: BB#1(?%)

160B	BB#1: derived from LLVM BB %entry
	    Live Ins: %R0 %R1
	    Predecessors according to CFG: BB#0
176B		%vreg6<def> = COPY %R1; GPR32:%vreg6
192B		%vreg16<def> = COPY %R0; GPR32:%vreg16
208B		%vreg0<def> = IMULrr_r32 %vreg6, %vreg6, %STATUS<imp-def,dead>; GPR32:%vreg0,%vreg6,%vreg6
224B		%vreg7<def,dead> = CMPri_r32 %vreg0, 0, %STATUS<imp-def>; GPR32:%vreg7,%vreg0
240B		BCC <BB#4>, 0, %STATUS<imp-use>
256B		BNONE32 <BB#2>, %STATUS<imp-use>
	    Successors according to CFG: BB#4(0x30000000 / 0x80000000 = 37.50%) BB#2(0x50000000 / 0x80000000 = 62.50%)

272B	BB#2: derived from LLVM BB %for.body.preheader
	    Predecessors according to CFG: BB#1
288B		%vreg8<def> = MOVi32ri 0; GPR32:%vreg8
320B		%vreg17<def> = COPY %vreg8; GPR32:%vreg17,%vreg8
	    Successors according to CFG: BB#3(?%)

336B	BB#3: derived from LLVM BB %for.body
	    Predecessors according to CFG: BB#2 BB#3
384B		%vreg4<def> = ADDri_r32 %vreg16, 4, %STATUS<imp-def,dead>; GPR32:%vreg4,%vreg16
400B		STRi32_r32 %vreg8, %vreg16, 0; mem:Volatile ST4[%lsr.iv](tbaa=!2) GPR32:%vreg8,%vreg16
416B		%vreg17<def> = ADDri_r32 %vreg17, 1, %STATUS<imp-def,dead>; GPR32:%vreg17
432B		%vreg10<def,dead> = CMPrr_r32 %vreg17, %vreg0, %STATUS<imp-def>; GPR32:%vreg10,%vreg17,%vreg0
448B		%vreg16<def> = COPY %vreg4; GPR32:%vreg16,%vreg4
480B		BCC <BB#3>, 8, %STATUS<imp-use>
496B		BNONE32 <BB#4>, %STATUS<imp-use>
	    Successors according to CFG: BB#3(0x7c000000 / 0x80000000 = 96.88%) BB#4(0x04000000 / 0x80000000 = 3.12%)

512B	BB#4: derived from LLVM BB %for.end
	    Predecessors according to CFG: BB#1 BB#3
528B		%vreg14<def> = LDRi32_r32 <fi#0>, 0; mem:LD4[FixedStack0] GPR32:%vreg14
544B		GID
560B		%CONFIG<def> = MOVTS32_core %vreg14; GPR32:%vreg14
576B		GIE %CONFIG<imp-use,kill>
592B		RTS

# End machine code for function matclr.

# *** IR Dump Before Rename Disconnected Subregister Components ***:
# Machine code for function matclr: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=8, at location [SP]
Function Live Ins: %R0 in %vreg5, %R1 in %vreg6

0B	BB#0: 
	    Live Ins: %R0 %R1
16B		GID %CONFIG<imp-def>
32B		%vreg15:isub_lo<def,read-undef> = MOVFS32_core %CONFIG<kill>; FPR64_with_isub_hi_in_FPR32:%vreg15
48B		%vreg15:isub_hi<def> = COPY %vreg15:isub_lo; FPR64_with_isub_hi_in_FPR32:%vreg15
64B		%vreg15:isub_hi<def,tied1> = MOVTi32ri %vreg15:isub_hi<tied0>, 72; FPR64_with_isub_hi_in_FPR32:%vreg15
112B		STRi64 %vreg15, <fi#1>, 0; mem:ST4[FixedStack1] ST4[FixedStack0] FPR64_with_isub_hi_in_FPR32:%vreg15
128B		%CONFIG<def> = MOVTS32_core %vreg15:isub_hi; FPR64_with_isub_hi_in_FPR32:%vreg15
144B		GIE %CONFIG<imp-use,kill>
	    Successors according to CFG: BB#1(?%)

160B	BB#1: derived from LLVM BB %entry
	    Live Ins: %R0 %R1
	    Predecessors according to CFG: BB#0
176B		%vreg6<def> = COPY %R1; GPR32:%vreg6
192B		%vreg16<def> = COPY %R0; GPR32:%vreg16
208B		%vreg0<def> = IMULrr_r32 %vreg6, %vreg6, %STATUS<imp-def,dead>; GPR32:%vreg0,%vreg6,%vreg6
224B		%vreg7<def,dead> = CMPri_r32 %vreg0, 0, %STATUS<imp-def>; GPR32:%vreg7,%vreg0
240B		BCC <BB#4>, 0, %STATUS<imp-use>
256B		BNONE32 <BB#2>, %STATUS<imp-use>
	    Successors according to CFG: BB#4(0x30000000 / 0x80000000 = 37.50%) BB#2(0x50000000 / 0x80000000 = 62.50%)

272B	BB#2: derived from LLVM BB %for.body.preheader
	    Predecessors according to CFG: BB#1
288B		%vreg8<def> = MOVi32ri 0; GPR32:%vreg8
320B		%vreg17<def> = COPY %vreg8; GPR32:%vreg17,%vreg8
	    Successors according to CFG: BB#3(?%)

336B	BB#3: derived from LLVM BB %for.body
	    Predecessors according to CFG: BB#2 BB#3
384B		%vreg4<def> = ADDri_r32 %vreg16, 4, %STATUS<imp-def,dead>; GPR32:%vreg4,%vreg16
400B		STRi32_r32 %vreg8, %vreg16, 0; mem:Volatile ST4[%lsr.iv](tbaa=!2) GPR32:%vreg8,%vreg16
416B		%vreg17<def> = ADDri_r32 %vreg17, 1, %STATUS<imp-def,dead>; GPR32:%vreg17
432B		%vreg10<def,dead> = CMPrr_r32 %vreg17, %vreg0, %STATUS<imp-def>; GPR32:%vreg10,%vreg17,%vreg0
448B		%vreg16<def> = COPY %vreg4; GPR32:%vreg16,%vreg4
480B		BCC <BB#3>, 8, %STATUS<imp-use>
496B		BNONE32 <BB#4>, %STATUS<imp-use>
	    Successors according to CFG: BB#3(0x7c000000 / 0x80000000 = 96.88%) BB#4(0x04000000 / 0x80000000 = 3.12%)

512B	BB#4: derived from LLVM BB %for.end
	    Predecessors according to CFG: BB#1 BB#3
528B		%vreg14<def> = LDRi32_r32 <fi#0>, 0; mem:LD4[FixedStack0] GPR32:%vreg14
544B		GID
560B		%CONFIG<def> = MOVTS32_core %vreg14; GPR32:%vreg14
576B		GIE %CONFIG<imp-use,kill>
592B		RTS

# End machine code for function matclr.

# *** IR Dump After Rename Disconnected Subregister Components ***:
# Machine code for function matclr: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=8, at location [SP]
Function Live Ins: %R0 in %vreg5, %R1 in %vreg6

0B	BB#0: 
	    Live Ins: %R0 %R1
16B		GID %CONFIG<imp-def>
32B		%vreg15:isub_lo<def,read-undef> = MOVFS32_core %CONFIG<kill>; FPR64_with_isub_hi_in_FPR32:%vreg15
48B		%vreg15:isub_hi<def> = COPY %vreg15:isub_lo; FPR64_with_isub_hi_in_FPR32:%vreg15
64B		%vreg15:isub_hi<def,tied1> = MOVTi32ri %vreg15:isub_hi<tied0>, 72; FPR64_with_isub_hi_in_FPR32:%vreg15
112B		STRi64 %vreg15, <fi#1>, 0; mem:ST4[FixedStack1] ST4[FixedStack0] FPR64_with_isub_hi_in_FPR32:%vreg15
128B		%CONFIG<def> = MOVTS32_core %vreg15:isub_hi; FPR64_with_isub_hi_in_FPR32:%vreg15
144B		GIE %CONFIG<imp-use,kill>
	    Successors according to CFG: BB#1(?%)

160B	BB#1: derived from LLVM BB %entry
	    Live Ins: %R0 %R1
	    Predecessors according to CFG: BB#0
176B		%vreg6<def> = COPY %R1; GPR32:%vreg6
192B		%vreg16<def> = COPY %R0; GPR32:%vreg16
208B		%vreg0<def> = IMULrr_r32 %vreg6, %vreg6, %STATUS<imp-def,dead>; GPR32:%vreg0,%vreg6,%vreg6
224B		%vreg7<def,dead> = CMPri_r32 %vreg0, 0, %STATUS<imp-def>; GPR32:%vreg7,%vreg0
240B		BCC <BB#4>, 0, %STATUS<imp-use>
256B		BNONE32 <BB#2>, %STATUS<imp-use>
	    Successors according to CFG: BB#4(0x30000000 / 0x80000000 = 37.50%) BB#2(0x50000000 / 0x80000000 = 62.50%)

272B	BB#2: derived from LLVM BB %for.body.preheader
	    Predecessors according to CFG: BB#1
288B		%vreg8<def> = MOVi32ri 0; GPR32:%vreg8
320B		%vreg17<def> = COPY %vreg8; GPR32:%vreg17,%vreg8
	    Successors according to CFG: BB#3(?%)

336B	BB#3: derived from LLVM BB %for.body
	    Predecessors according to CFG: BB#2 BB#3
384B		%vreg4<def> = ADDri_r32 %vreg16, 4, %STATUS<imp-def,dead>; GPR32:%vreg4,%vreg16
400B		STRi32_r32 %vreg8, %vreg16, 0; mem:Volatile ST4[%lsr.iv](tbaa=!2) GPR32:%vreg8,%vreg16
416B		%vreg17<def> = ADDri_r32 %vreg17, 1, %STATUS<imp-def,dead>; GPR32:%vreg17
432B		%vreg10<def,dead> = CMPrr_r32 %vreg17, %vreg0, %STATUS<imp-def>; GPR32:%vreg10,%vreg17,%vreg0
448B		%vreg16<def> = COPY %vreg4; GPR32:%vreg16,%vreg4
480B		BCC <BB#3>, 8, %STATUS<imp-use>
496B		BNONE32 <BB#4>, %STATUS<imp-use>
	    Successors according to CFG: BB#3(0x7c000000 / 0x80000000 = 96.88%) BB#4(0x04000000 / 0x80000000 = 3.12%)

512B	BB#4: derived from LLVM BB %for.end
	    Predecessors according to CFG: BB#1 BB#3
528B		%vreg14<def> = LDRi32_r32 <fi#0>, 0; mem:LD4[FixedStack0] GPR32:%vreg14
544B		GID
560B		%CONFIG<def> = MOVTS32_core %vreg14; GPR32:%vreg14
576B		GIE %CONFIG<imp-use,kill>
592B		RTS

# End machine code for function matclr.

# *** IR Dump Before Machine Instruction Scheduler ***:
# Machine code for function matclr: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=8, at location [SP]
Function Live Ins: %R0 in %vreg5, %R1 in %vreg6

0B	BB#0: 
	    Live Ins: %R0 %R1
16B		GID %CONFIG<imp-def>
32B		%vreg15:isub_lo<def,read-undef> = MOVFS32_core %CONFIG<kill>; FPR64_with_isub_hi_in_FPR32:%vreg15
48B		%vreg15:isub_hi<def> = COPY %vreg15:isub_lo; FPR64_with_isub_hi_in_FPR32:%vreg15
64B		%vreg15:isub_hi<def,tied1> = MOVTi32ri %vreg15:isub_hi<tied0>, 72; FPR64_with_isub_hi_in_FPR32:%vreg15
112B		STRi64 %vreg15, <fi#1>, 0; mem:ST4[FixedStack1] ST4[FixedStack0] FPR64_with_isub_hi_in_FPR32:%vreg15
128B		%CONFIG<def> = MOVTS32_core %vreg15:isub_hi; FPR64_with_isub_hi_in_FPR32:%vreg15
144B		GIE %CONFIG<imp-use,kill>
	    Successors according to CFG: BB#1(?%)

160B	BB#1: derived from LLVM BB %entry
	    Live Ins: %R0 %R1
	    Predecessors according to CFG: BB#0
176B		%vreg6<def> = COPY %R1; GPR32:%vreg6
192B		%vreg16<def> = COPY %R0; GPR32:%vreg16
208B		%vreg0<def> = IMULrr_r32 %vreg6, %vreg6, %STATUS<imp-def,dead>; GPR32:%vreg0,%vreg6,%vreg6
224B		%vreg7<def,dead> = CMPri_r32 %vreg0, 0, %STATUS<imp-def>; GPR32:%vreg7,%vreg0
240B		BCC <BB#4>, 0, %STATUS<imp-use>
256B		BNONE32 <BB#2>, %STATUS<imp-use>
	    Successors according to CFG: BB#4(0x30000000 / 0x80000000 = 37.50%) BB#2(0x50000000 / 0x80000000 = 62.50%)

272B	BB#2: derived from LLVM BB %for.body.preheader
	    Predecessors according to CFG: BB#1
288B		%vreg8<def> = MOVi32ri 0; GPR32:%vreg8
320B		%vreg17<def> = COPY %vreg8; GPR32:%vreg17,%vreg8
	    Successors according to CFG: BB#3(?%)

336B	BB#3: derived from LLVM BB %for.body
	    Predecessors according to CFG: BB#2 BB#3
384B		%vreg4<def> = ADDri_r32 %vreg16, 4, %STATUS<imp-def,dead>; GPR32:%vreg4,%vreg16
400B		STRi32_r32 %vreg8, %vreg16, 0; mem:Volatile ST4[%lsr.iv](tbaa=!2) GPR32:%vreg8,%vreg16
416B		%vreg17<def> = ADDri_r32 %vreg17, 1, %STATUS<imp-def,dead>; GPR32:%vreg17
432B		%vreg10<def,dead> = CMPrr_r32 %vreg17, %vreg0, %STATUS<imp-def>; GPR32:%vreg10,%vreg17,%vreg0
448B		%vreg16<def> = COPY %vreg4; GPR32:%vreg16,%vreg4
480B		BCC <BB#3>, 8, %STATUS<imp-use>
496B		BNONE32 <BB#4>, %STATUS<imp-use>
	    Successors according to CFG: BB#3(0x7c000000 / 0x80000000 = 96.88%) BB#4(0x04000000 / 0x80000000 = 3.12%)

512B	BB#4: derived from LLVM BB %for.end
	    Predecessors according to CFG: BB#1 BB#3
528B		%vreg14<def> = LDRi32_r32 <fi#0>, 0; mem:LD4[FixedStack0] GPR32:%vreg14
544B		GID
560B		%CONFIG<def> = MOVTS32_core %vreg14; GPR32:%vreg14
576B		GIE %CONFIG<imp-use,kill>
592B		RTS

# End machine code for function matclr.

# *** IR Dump After Machine Instruction Scheduler ***:
# Machine code for function matclr: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=8, at location [SP]
Function Live Ins: %R0 in %vreg5, %R1 in %vreg6

0B	BB#0: 
	    Live Ins: %R0 %R1
16B		GID %CONFIG<imp-def>
32B		%vreg15:isub_lo<def,read-undef> = MOVFS32_core %CONFIG<kill>; FPR64_with_isub_hi_in_FPR32:%vreg15
48B		%vreg15:isub_hi<def> = COPY %vreg15:isub_lo; FPR64_with_isub_hi_in_FPR32:%vreg15
64B		%vreg15:isub_hi<def,tied1> = MOVTi32ri %vreg15:isub_hi<tied0>, 72; FPR64_with_isub_hi_in_FPR32:%vreg15
112B		STRi64 %vreg15, <fi#1>, 0; mem:ST4[FixedStack1] ST4[FixedStack0] FPR64_with_isub_hi_in_FPR32:%vreg15
128B		%CONFIG<def> = MOVTS32_core %vreg15:isub_hi; FPR64_with_isub_hi_in_FPR32:%vreg15
144B		GIE %CONFIG<imp-use,kill>
	    Successors according to CFG: BB#1(?%)

160B	BB#1: derived from LLVM BB %entry
	    Live Ins: %R0 %R1
	    Predecessors according to CFG: BB#0
176B		%vreg6<def> = COPY %R1; GPR32:%vreg6
192B		%vreg16<def> = COPY %R0; GPR32:%vreg16
208B		%vreg0<def> = IMULrr_r32 %vreg6, %vreg6, %STATUS<imp-def,dead>; GPR32:%vreg0,%vreg6,%vreg6
224B		%vreg7<def,dead> = CMPri_r32 %vreg0, 0, %STATUS<imp-def>; GPR32:%vreg7,%vreg0
240B		BCC <BB#4>, 0, %STATUS<imp-use>
256B		BNONE32 <BB#2>, %STATUS<imp-use>
	    Successors according to CFG: BB#4(0x30000000 / 0x80000000 = 37.50%) BB#2(0x50000000 / 0x80000000 = 62.50%)

272B	BB#2: derived from LLVM BB %for.body.preheader
	    Predecessors according to CFG: BB#1
288B		%vreg8<def> = MOVi32ri 0; GPR32:%vreg8
320B		%vreg17<def> = COPY %vreg8; GPR32:%vreg17,%vreg8
	    Successors according to CFG: BB#3(?%)

336B	BB#3: derived from LLVM BB %for.body
	    Predecessors according to CFG: BB#2 BB#3
384B		%vreg4<def> = ADDri_r32 %vreg16, 4, %STATUS<imp-def,dead>; GPR32:%vreg4,%vreg16
400B		STRi32_r32 %vreg8, %vreg16, 0; mem:Volatile ST4[%lsr.iv](tbaa=!2) GPR32:%vreg8,%vreg16
416B		%vreg17<def> = ADDri_r32 %vreg17, 1, %STATUS<imp-def,dead>; GPR32:%vreg17
432B		%vreg10<def,dead> = CMPrr_r32 %vreg17, %vreg0, %STATUS<imp-def>; GPR32:%vreg10,%vreg17,%vreg0
448B		%vreg16<def> = COPY %vreg4; GPR32:%vreg16,%vreg4
480B		BCC <BB#3>, 8, %STATUS<imp-use>
496B		BNONE32 <BB#4>, %STATUS<imp-use>
	    Successors according to CFG: BB#3(0x7c000000 / 0x80000000 = 96.88%) BB#4(0x04000000 / 0x80000000 = 3.12%)

512B	BB#4: derived from LLVM BB %for.end
	    Predecessors according to CFG: BB#1 BB#3
528B		%vreg14<def> = LDRi32_r32 <fi#0>, 0; mem:LD4[FixedStack0] GPR32:%vreg14
544B		GID
560B		%CONFIG<def> = MOVTS32_core %vreg14; GPR32:%vreg14
576B		GIE %CONFIG<imp-use,kill>
592B		RTS

# End machine code for function matclr.


block-frequency: matclr
=======================
reverse-post-order-traversal
 - 0: BB0
 - 1: BB1[entry]
 - 2: BB2[for.body.preheader]
 - 3: BB3[for.body]
 - 4: BB4[for.end]
loop-detection
 - loop = BB3[for.body]
compute-mass-in-loop: BB3[for.body]*
 - node: BB3[for.body]
  => [backedge] weight = 2080374784
  => [  exit  ] weight = 67108864, succ = BB4[for.end]
  => mass:  ffffffffffffffff
  => assign f7ffffffffffffff (0800000000000000) [back] to BB3[for.body]
  => assign 0800000000000000 (0000000000000000) [exit] to BB4[for.end]
compute-loop-scale: BB3[for.body]*
 - exit-mass = 0800000000000000 (ffffffffffffffff - f7ffffffffffffff)
 - scale = 32.0
packaging-loop: BB3[for.body]*
 - node: BB3[for.body]
compute-mass-in-function
 - node: BB0
  => [ local  ] weight = 2147483648, succ = BB1[entry]
  => mass:  ffffffffffffffff
  => assign ffffffffffffffff (0000000000000000) to BB1[entry]
 - node: BB1[entry]
  => [ local  ] weight = 805306368, succ = BB4[for.end]
  => [ local  ] weight = 1342177280, succ = BB2[for.body.preheader]
  => mass:  ffffffffffffffff
  => assign 9fffffffffffffff (6000000000000000) to BB2[for.body.preheader]
  => assign 6000000000000000 (0000000000000000) to BB4[for.end]
 - node: BB2[for.body.preheader]
  => [ local  ] weight = 2147483648, succ = BB3[for.body]
  => mass:  9fffffffffffffff
  => assign 9fffffffffffffff (0000000000000000) to BB3[for.body]
 - node: BB3[for.body]
  => [ local  ] weight = 576460752303423488, succ = BB4[for.end]
  => mass:  9fffffffffffffff
  => assign 9fffffffffffffff (0000000000000000) to BB4[for.end]
 - node: BB4[for.end]
  => mass:  ffffffffffffffff
unwrap-loop-package: BB3[for.body]*: mass = 9fffffffffffffff, scale = 32.0
  => combined-scale = 20.0
 - BB3[for.body]: 1.0 => 20.0
float-to-int: min = 0.625, max = 20.0, factor = 12.8
 - BB0: float = 1.0, scaled = 12.8, int = 12
 - BB1[entry]: float = 1.0, scaled = 12.8, int = 12
 - BB2[for.body.preheader]: float = 0.625, scaled = 8.0, int = 8
 - BB3[for.body]: float = 20.0, scaled = 256.0, int = 255
 - BB4[for.end]: float = 1.0, scaled = 12.8, int = 12
block-frequency-info: matclr
 - BB0: float = 1.0, int = 12
 - BB1[entry]: float = 1.0, int = 12
 - BB2[for.body.preheader]: float = 0.625, int = 8
 - BB3[for.body]: float = 20.0, int = 255
 - BB4[for.end]: float = 1.0, int = 12

# *** IR Dump Before Debug Variable Analysis ***:
# Machine code for function matclr: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=8, at location [SP]
Function Live Ins: %R0 in %vreg5, %R1 in %vreg6

0B	BB#0: 
	    Live Ins: %R0 %R1
16B		GID %CONFIG<imp-def>
32B		%vreg15:isub_lo<def,read-undef> = MOVFS32_core %CONFIG<kill>; FPR64_with_isub_hi_in_FPR32:%vreg15
48B		%vreg15:isub_hi<def> = COPY %vreg15:isub_lo; FPR64_with_isub_hi_in_FPR32:%vreg15
64B		%vreg15:isub_hi<def,tied1> = MOVTi32ri %vreg15:isub_hi<tied0>, 72; FPR64_with_isub_hi_in_FPR32:%vreg15
112B		STRi64 %vreg15, <fi#1>, 0; mem:ST4[FixedStack1] ST4[FixedStack0] FPR64_with_isub_hi_in_FPR32:%vreg15
128B		%CONFIG<def> = MOVTS32_core %vreg15:isub_hi; FPR64_with_isub_hi_in_FPR32:%vreg15
144B		GIE %CONFIG<imp-use,kill>
	    Successors according to CFG: BB#1(?%)

160B	BB#1: derived from LLVM BB %entry
	    Live Ins: %R0 %R1
	    Predecessors according to CFG: BB#0
176B		%vreg6<def> = COPY %R1; GPR32:%vreg6
192B		%vreg16<def> = COPY %R0; GPR32:%vreg16
208B		%vreg0<def> = IMULrr_r32 %vreg6, %vreg6, %STATUS<imp-def,dead>; GPR32:%vreg0,%vreg6,%vreg6
224B		%vreg7<def,dead> = CMPri_r32 %vreg0, 0, %STATUS<imp-def>; GPR32:%vreg7,%vreg0
240B		BCC <BB#4>, 0, %STATUS<imp-use>
256B		BNONE32 <BB#2>, %STATUS<imp-use>
	    Successors according to CFG: BB#4(0x30000000 / 0x80000000 = 37.50%) BB#2(0x50000000 / 0x80000000 = 62.50%)

272B	BB#2: derived from LLVM BB %for.body.preheader
	    Predecessors according to CFG: BB#1
288B		%vreg8<def> = MOVi32ri 0; GPR32:%vreg8
320B		%vreg17<def> = COPY %vreg8; GPR32:%vreg17,%vreg8
	    Successors according to CFG: BB#3(?%)

336B	BB#3: derived from LLVM BB %for.body
	    Predecessors according to CFG: BB#2 BB#3
384B		%vreg4<def> = ADDri_r32 %vreg16, 4, %STATUS<imp-def,dead>; GPR32:%vreg4,%vreg16
400B		STRi32_r32 %vreg8, %vreg16, 0; mem:Volatile ST4[%lsr.iv](tbaa=!2) GPR32:%vreg8,%vreg16
416B		%vreg17<def> = ADDri_r32 %vreg17, 1, %STATUS<imp-def,dead>; GPR32:%vreg17
432B		%vreg10<def,dead> = CMPrr_r32 %vreg17, %vreg0, %STATUS<imp-def>; GPR32:%vreg10,%vreg17,%vreg0
448B		%vreg16<def> = COPY %vreg4; GPR32:%vreg16,%vreg4
480B		BCC <BB#3>, 8, %STATUS<imp-use>
496B		BNONE32 <BB#4>, %STATUS<imp-use>
	    Successors according to CFG: BB#3(0x7c000000 / 0x80000000 = 96.88%) BB#4(0x04000000 / 0x80000000 = 3.12%)

512B	BB#4: derived from LLVM BB %for.end
	    Predecessors according to CFG: BB#1 BB#3
528B		%vreg14<def> = LDRi32_r32 <fi#0>, 0; mem:LD4[FixedStack0] GPR32:%vreg14
544B		GID
560B		%CONFIG<def> = MOVTS32_core %vreg14; GPR32:%vreg14
576B		GIE %CONFIG<imp-use,kill>
592B		RTS

# End machine code for function matclr.

# *** IR Dump After Debug Variable Analysis ***:
# Machine code for function matclr: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=8, at location [SP]
Function Live Ins: %R0 in %vreg5, %R1 in %vreg6

0B	BB#0: 
	    Live Ins: %R0 %R1
16B		GID %CONFIG<imp-def>
32B		%vreg15:isub_lo<def,read-undef> = MOVFS32_core %CONFIG<kill>; FPR64_with_isub_hi_in_FPR32:%vreg15
48B		%vreg15:isub_hi<def> = COPY %vreg15:isub_lo; FPR64_with_isub_hi_in_FPR32:%vreg15
64B		%vreg15:isub_hi<def,tied1> = MOVTi32ri %vreg15:isub_hi<tied0>, 72; FPR64_with_isub_hi_in_FPR32:%vreg15
112B		STRi64 %vreg15, <fi#1>, 0; mem:ST4[FixedStack1] ST4[FixedStack0] FPR64_with_isub_hi_in_FPR32:%vreg15
128B		%CONFIG<def> = MOVTS32_core %vreg15:isub_hi; FPR64_with_isub_hi_in_FPR32:%vreg15
144B		GIE %CONFIG<imp-use,kill>
	    Successors according to CFG: BB#1(?%)

160B	BB#1: derived from LLVM BB %entry
	    Live Ins: %R0 %R1
	    Predecessors according to CFG: BB#0
176B		%vreg6<def> = COPY %R1; GPR32:%vreg6
192B		%vreg16<def> = COPY %R0; GPR32:%vreg16
208B		%vreg0<def> = IMULrr_r32 %vreg6, %vreg6, %STATUS<imp-def,dead>; GPR32:%vreg0,%vreg6,%vreg6
224B		%vreg7<def,dead> = CMPri_r32 %vreg0, 0, %STATUS<imp-def>; GPR32:%vreg7,%vreg0
240B		BCC <BB#4>, 0, %STATUS<imp-use>
256B		BNONE32 <BB#2>, %STATUS<imp-use>
	    Successors according to CFG: BB#4(0x30000000 / 0x80000000 = 37.50%) BB#2(0x50000000 / 0x80000000 = 62.50%)

272B	BB#2: derived from LLVM BB %for.body.preheader
	    Predecessors according to CFG: BB#1
288B		%vreg8<def> = MOVi32ri 0; GPR32:%vreg8
320B		%vreg17<def> = COPY %vreg8; GPR32:%vreg17,%vreg8
	    Successors according to CFG: BB#3(?%)

336B	BB#3: derived from LLVM BB %for.body
	    Predecessors according to CFG: BB#2 BB#3
384B		%vreg4<def> = ADDri_r32 %vreg16, 4, %STATUS<imp-def,dead>; GPR32:%vreg4,%vreg16
400B		STRi32_r32 %vreg8, %vreg16, 0; mem:Volatile ST4[%lsr.iv](tbaa=!2) GPR32:%vreg8,%vreg16
416B		%vreg17<def> = ADDri_r32 %vreg17, 1, %STATUS<imp-def,dead>; GPR32:%vreg17
432B		%vreg10<def,dead> = CMPrr_r32 %vreg17, %vreg0, %STATUS<imp-def>; GPR32:%vreg10,%vreg17,%vreg0
448B		%vreg16<def> = COPY %vreg4; GPR32:%vreg16,%vreg4
480B		BCC <BB#3>, 8, %STATUS<imp-use>
496B		BNONE32 <BB#4>, %STATUS<imp-use>
	    Successors according to CFG: BB#3(0x7c000000 / 0x80000000 = 96.88%) BB#4(0x04000000 / 0x80000000 = 3.12%)

512B	BB#4: derived from LLVM BB %for.end
	    Predecessors according to CFG: BB#1 BB#3
528B		%vreg14<def> = LDRi32_r32 <fi#0>, 0; mem:LD4[FixedStack0] GPR32:%vreg14
544B		GID
560B		%CONFIG<def> = MOVTS32_core %vreg14; GPR32:%vreg14
576B		GIE %CONFIG<imp-use,kill>
592B		RTS

# End machine code for function matclr.

# *** IR Dump Before Live Stack Slot Analysis ***:
# Machine code for function matclr: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=8, at location [SP]
Function Live Ins: %R0 in %vreg5, %R1 in %vreg6

0B	BB#0: 
	    Live Ins: %R0 %R1
16B		GID %CONFIG<imp-def>
32B		%vreg15:isub_lo<def,read-undef> = MOVFS32_core %CONFIG<kill>; FPR64_with_isub_hi_in_FPR32:%vreg15
48B		%vreg15:isub_hi<def> = COPY %vreg15:isub_lo; FPR64_with_isub_hi_in_FPR32:%vreg15
64B		%vreg15:isub_hi<def,tied1> = MOVTi32ri %vreg15:isub_hi<tied0>, 72; FPR64_with_isub_hi_in_FPR32:%vreg15
112B		STRi64 %vreg15, <fi#1>, 0; mem:ST4[FixedStack1] ST4[FixedStack0] FPR64_with_isub_hi_in_FPR32:%vreg15
128B		%CONFIG<def> = MOVTS32_core %vreg15:isub_hi; FPR64_with_isub_hi_in_FPR32:%vreg15
144B		GIE %CONFIG<imp-use,kill>
	    Successors according to CFG: BB#1(?%)

160B	BB#1: derived from LLVM BB %entry
	    Live Ins: %R0 %R1
	    Predecessors according to CFG: BB#0
176B		%vreg6<def> = COPY %R1; GPR32:%vreg6
192B		%vreg16<def> = COPY %R0; GPR32:%vreg16
208B		%vreg0<def> = IMULrr_r32 %vreg6, %vreg6, %STATUS<imp-def,dead>; GPR32:%vreg0,%vreg6,%vreg6
224B		%vreg7<def,dead> = CMPri_r32 %vreg0, 0, %STATUS<imp-def>; GPR32:%vreg7,%vreg0
240B		BCC <BB#4>, 0, %STATUS<imp-use>
256B		BNONE32 <BB#2>, %STATUS<imp-use>
	    Successors according to CFG: BB#4(0x30000000 / 0x80000000 = 37.50%) BB#2(0x50000000 / 0x80000000 = 62.50%)

272B	BB#2: derived from LLVM BB %for.body.preheader
	    Predecessors according to CFG: BB#1
288B		%vreg8<def> = MOVi32ri 0; GPR32:%vreg8
320B		%vreg17<def> = COPY %vreg8; GPR32:%vreg17,%vreg8
	    Successors according to CFG: BB#3(?%)

336B	BB#3: derived from LLVM BB %for.body
	    Predecessors according to CFG: BB#2 BB#3
384B		%vreg4<def> = ADDri_r32 %vreg16, 4, %STATUS<imp-def,dead>; GPR32:%vreg4,%vreg16
400B		STRi32_r32 %vreg8, %vreg16, 0; mem:Volatile ST4[%lsr.iv](tbaa=!2) GPR32:%vreg8,%vreg16
416B		%vreg17<def> = ADDri_r32 %vreg17, 1, %STATUS<imp-def,dead>; GPR32:%vreg17
432B		%vreg10<def,dead> = CMPrr_r32 %vreg17, %vreg0, %STATUS<imp-def>; GPR32:%vreg10,%vreg17,%vreg0
448B		%vreg16<def> = COPY %vreg4; GPR32:%vreg16,%vreg4
480B		BCC <BB#3>, 8, %STATUS<imp-use>
496B		BNONE32 <BB#4>, %STATUS<imp-use>
	    Successors according to CFG: BB#3(0x7c000000 / 0x80000000 = 96.88%) BB#4(0x04000000 / 0x80000000 = 3.12%)

512B	BB#4: derived from LLVM BB %for.end
	    Predecessors according to CFG: BB#1 BB#3
528B		%vreg14<def> = LDRi32_r32 <fi#0>, 0; mem:LD4[FixedStack0] GPR32:%vreg14
544B		GID
560B		%CONFIG<def> = MOVTS32_core %vreg14; GPR32:%vreg14
576B		GIE %CONFIG<imp-use,kill>
592B		RTS

# End machine code for function matclr.

# *** IR Dump After Live Stack Slot Analysis ***:
# Machine code for function matclr: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=8, at location [SP]
Function Live Ins: %R0 in %vreg5, %R1 in %vreg6

0B	BB#0: 
	    Live Ins: %R0 %R1
16B		GID %CONFIG<imp-def>
32B		%vreg15:isub_lo<def,read-undef> = MOVFS32_core %CONFIG<kill>; FPR64_with_isub_hi_in_FPR32:%vreg15
48B		%vreg15:isub_hi<def> = COPY %vreg15:isub_lo; FPR64_with_isub_hi_in_FPR32:%vreg15
64B		%vreg15:isub_hi<def,tied1> = MOVTi32ri %vreg15:isub_hi<tied0>, 72; FPR64_with_isub_hi_in_FPR32:%vreg15
112B		STRi64 %vreg15, <fi#1>, 0; mem:ST4[FixedStack1] ST4[FixedStack0] FPR64_with_isub_hi_in_FPR32:%vreg15
128B		%CONFIG<def> = MOVTS32_core %vreg15:isub_hi; FPR64_with_isub_hi_in_FPR32:%vreg15
144B		GIE %CONFIG<imp-use,kill>
	    Successors according to CFG: BB#1(?%)

160B	BB#1: derived from LLVM BB %entry
	    Live Ins: %R0 %R1
	    Predecessors according to CFG: BB#0
176B		%vreg6<def> = COPY %R1; GPR32:%vreg6
192B		%vreg16<def> = COPY %R0; GPR32:%vreg16
208B		%vreg0<def> = IMULrr_r32 %vreg6, %vreg6, %STATUS<imp-def,dead>; GPR32:%vreg0,%vreg6,%vreg6
224B		%vreg7<def,dead> = CMPri_r32 %vreg0, 0, %STATUS<imp-def>; GPR32:%vreg7,%vreg0
240B		BCC <BB#4>, 0, %STATUS<imp-use>
256B		BNONE32 <BB#2>, %STATUS<imp-use>
	    Successors according to CFG: BB#4(0x30000000 / 0x80000000 = 37.50%) BB#2(0x50000000 / 0x80000000 = 62.50%)

272B	BB#2: derived from LLVM BB %for.body.preheader
	    Predecessors according to CFG: BB#1
288B		%vreg8<def> = MOVi32ri 0; GPR32:%vreg8
320B		%vreg17<def> = COPY %vreg8; GPR32:%vreg17,%vreg8
	    Successors according to CFG: BB#3(?%)

336B	BB#3: derived from LLVM BB %for.body
	    Predecessors according to CFG: BB#2 BB#3
384B		%vreg4<def> = ADDri_r32 %vreg16, 4, %STATUS<imp-def,dead>; GPR32:%vreg4,%vreg16
400B		STRi32_r32 %vreg8, %vreg16, 0; mem:Volatile ST4[%lsr.iv](tbaa=!2) GPR32:%vreg8,%vreg16
416B		%vreg17<def> = ADDri_r32 %vreg17, 1, %STATUS<imp-def,dead>; GPR32:%vreg17
432B		%vreg10<def,dead> = CMPrr_r32 %vreg17, %vreg0, %STATUS<imp-def>; GPR32:%vreg10,%vreg17,%vreg0
448B		%vreg16<def> = COPY %vreg4; GPR32:%vreg16,%vreg4
480B		BCC <BB#3>, 8, %STATUS<imp-use>
496B		BNONE32 <BB#4>, %STATUS<imp-use>
	    Successors according to CFG: BB#3(0x7c000000 / 0x80000000 = 96.88%) BB#4(0x04000000 / 0x80000000 = 3.12%)

512B	BB#4: derived from LLVM BB %for.end
	    Predecessors according to CFG: BB#1 BB#3
528B		%vreg14<def> = LDRi32_r32 <fi#0>, 0; mem:LD4[FixedStack0] GPR32:%vreg14
544B		GID
560B		%CONFIG<def> = MOVTS32_core %vreg14; GPR32:%vreg14
576B		GIE %CONFIG<imp-use,kill>
592B		RTS

# End machine code for function matclr.

# *** IR Dump Before Virtual Register Map ***:
# Machine code for function matclr: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=8, at location [SP]
Function Live Ins: %R0 in %vreg5, %R1 in %vreg6

0B	BB#0: 
	    Live Ins: %R0 %R1
16B		GID %CONFIG<imp-def>
32B		%vreg15:isub_lo<def,read-undef> = MOVFS32_core %CONFIG<kill>; FPR64_with_isub_hi_in_FPR32:%vreg15
48B		%vreg15:isub_hi<def> = COPY %vreg15:isub_lo; FPR64_with_isub_hi_in_FPR32:%vreg15
64B		%vreg15:isub_hi<def,tied1> = MOVTi32ri %vreg15:isub_hi<tied0>, 72; FPR64_with_isub_hi_in_FPR32:%vreg15
112B		STRi64 %vreg15, <fi#1>, 0; mem:ST4[FixedStack1] ST4[FixedStack0] FPR64_with_isub_hi_in_FPR32:%vreg15
128B		%CONFIG<def> = MOVTS32_core %vreg15:isub_hi; FPR64_with_isub_hi_in_FPR32:%vreg15
144B		GIE %CONFIG<imp-use,kill>
	    Successors according to CFG: BB#1(?%)

160B	BB#1: derived from LLVM BB %entry
	    Live Ins: %R0 %R1
	    Predecessors according to CFG: BB#0
176B		%vreg6<def> = COPY %R1; GPR32:%vreg6
192B		%vreg16<def> = COPY %R0; GPR32:%vreg16
208B		%vreg0<def> = IMULrr_r32 %vreg6, %vreg6, %STATUS<imp-def,dead>; GPR32:%vreg0,%vreg6,%vreg6
224B		%vreg7<def,dead> = CMPri_r32 %vreg0, 0, %STATUS<imp-def>; GPR32:%vreg7,%vreg0
240B		BCC <BB#4>, 0, %STATUS<imp-use>
256B		BNONE32 <BB#2>, %STATUS<imp-use>
	    Successors according to CFG: BB#4(0x30000000 / 0x80000000 = 37.50%) BB#2(0x50000000 / 0x80000000 = 62.50%)

272B	BB#2: derived from LLVM BB %for.body.preheader
	    Predecessors according to CFG: BB#1
288B		%vreg8<def> = MOVi32ri 0; GPR32:%vreg8
320B		%vreg17<def> = COPY %vreg8; GPR32:%vreg17,%vreg8
	    Successors according to CFG: BB#3(?%)

336B	BB#3: derived from LLVM BB %for.body
	    Predecessors according to CFG: BB#2 BB#3
384B		%vreg4<def> = ADDri_r32 %vreg16, 4, %STATUS<imp-def,dead>; GPR32:%vreg4,%vreg16
400B		STRi32_r32 %vreg8, %vreg16, 0; mem:Volatile ST4[%lsr.iv](tbaa=!2) GPR32:%vreg8,%vreg16
416B		%vreg17<def> = ADDri_r32 %vreg17, 1, %STATUS<imp-def,dead>; GPR32:%vreg17
432B		%vreg10<def,dead> = CMPrr_r32 %vreg17, %vreg0, %STATUS<imp-def>; GPR32:%vreg10,%vreg17,%vreg0
448B		%vreg16<def> = COPY %vreg4; GPR32:%vreg16,%vreg4
480B		BCC <BB#3>, 8, %STATUS<imp-use>
496B		BNONE32 <BB#4>, %STATUS<imp-use>
	    Successors according to CFG: BB#3(0x7c000000 / 0x80000000 = 96.88%) BB#4(0x04000000 / 0x80000000 = 3.12%)

512B	BB#4: derived from LLVM BB %for.end
	    Predecessors according to CFG: BB#1 BB#3
528B		%vreg14<def> = LDRi32_r32 <fi#0>, 0; mem:LD4[FixedStack0] GPR32:%vreg14
544B		GID
560B		%CONFIG<def> = MOVTS32_core %vreg14; GPR32:%vreg14
576B		GIE %CONFIG<imp-use,kill>
592B		RTS

# End machine code for function matclr.

# *** IR Dump After Virtual Register Map ***:
# Machine code for function matclr: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=8, at location [SP]
Function Live Ins: %R0 in %vreg5, %R1 in %vreg6

0B	BB#0: 
	    Live Ins: %R0 %R1
16B		GID %CONFIG<imp-def>
32B		%vreg15:isub_lo<def,read-undef> = MOVFS32_core %CONFIG<kill>; FPR64_with_isub_hi_in_FPR32:%vreg15
48B		%vreg15:isub_hi<def> = COPY %vreg15:isub_lo; FPR64_with_isub_hi_in_FPR32:%vreg15
64B		%vreg15:isub_hi<def,tied1> = MOVTi32ri %vreg15:isub_hi<tied0>, 72; FPR64_with_isub_hi_in_FPR32:%vreg15
112B		STRi64 %vreg15, <fi#1>, 0; mem:ST4[FixedStack1] ST4[FixedStack0] FPR64_with_isub_hi_in_FPR32:%vreg15
128B		%CONFIG<def> = MOVTS32_core %vreg15:isub_hi; FPR64_with_isub_hi_in_FPR32:%vreg15
144B		GIE %CONFIG<imp-use,kill>
	    Successors according to CFG: BB#1(?%)

160B	BB#1: derived from LLVM BB %entry
	    Live Ins: %R0 %R1
	    Predecessors according to CFG: BB#0
176B		%vreg6<def> = COPY %R1; GPR32:%vreg6
192B		%vreg16<def> = COPY %R0; GPR32:%vreg16
208B		%vreg0<def> = IMULrr_r32 %vreg6, %vreg6, %STATUS<imp-def,dead>; GPR32:%vreg0,%vreg6,%vreg6
224B		%vreg7<def,dead> = CMPri_r32 %vreg0, 0, %STATUS<imp-def>; GPR32:%vreg7,%vreg0
240B		BCC <BB#4>, 0, %STATUS<imp-use>
256B		BNONE32 <BB#2>, %STATUS<imp-use>
	    Successors according to CFG: BB#4(0x30000000 / 0x80000000 = 37.50%) BB#2(0x50000000 / 0x80000000 = 62.50%)

272B	BB#2: derived from LLVM BB %for.body.preheader
	    Predecessors according to CFG: BB#1
288B		%vreg8<def> = MOVi32ri 0; GPR32:%vreg8
320B		%vreg17<def> = COPY %vreg8; GPR32:%vreg17,%vreg8
	    Successors according to CFG: BB#3(?%)

336B	BB#3: derived from LLVM BB %for.body
	    Predecessors according to CFG: BB#2 BB#3
384B		%vreg4<def> = ADDri_r32 %vreg16, 4, %STATUS<imp-def,dead>; GPR32:%vreg4,%vreg16
400B		STRi32_r32 %vreg8, %vreg16, 0; mem:Volatile ST4[%lsr.iv](tbaa=!2) GPR32:%vreg8,%vreg16
416B		%vreg17<def> = ADDri_r32 %vreg17, 1, %STATUS<imp-def,dead>; GPR32:%vreg17
432B		%vreg10<def,dead> = CMPrr_r32 %vreg17, %vreg0, %STATUS<imp-def>; GPR32:%vreg10,%vreg17,%vreg0
448B		%vreg16<def> = COPY %vreg4; GPR32:%vreg16,%vreg4
480B		BCC <BB#3>, 8, %STATUS<imp-use>
496B		BNONE32 <BB#4>, %STATUS<imp-use>
	    Successors according to CFG: BB#3(0x7c000000 / 0x80000000 = 96.88%) BB#4(0x04000000 / 0x80000000 = 3.12%)

512B	BB#4: derived from LLVM BB %for.end
	    Predecessors according to CFG: BB#1 BB#3
528B		%vreg14<def> = LDRi32_r32 <fi#0>, 0; mem:LD4[FixedStack0] GPR32:%vreg14
544B		GID
560B		%CONFIG<def> = MOVTS32_core %vreg14; GPR32:%vreg14
576B		GIE %CONFIG<imp-use,kill>
592B		RTS

# End machine code for function matclr.

# *** IR Dump Before Live Register Matrix ***:
# Machine code for function matclr: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=8, at location [SP]
Function Live Ins: %R0 in %vreg5, %R1 in %vreg6

0B	BB#0: 
	    Live Ins: %R0 %R1
16B		GID %CONFIG<imp-def>
32B		%vreg15:isub_lo<def,read-undef> = MOVFS32_core %CONFIG<kill>; FPR64_with_isub_hi_in_FPR32:%vreg15
48B		%vreg15:isub_hi<def> = COPY %vreg15:isub_lo; FPR64_with_isub_hi_in_FPR32:%vreg15
64B		%vreg15:isub_hi<def,tied1> = MOVTi32ri %vreg15:isub_hi<tied0>, 72; FPR64_with_isub_hi_in_FPR32:%vreg15
112B		STRi64 %vreg15, <fi#1>, 0; mem:ST4[FixedStack1] ST4[FixedStack0] FPR64_with_isub_hi_in_FPR32:%vreg15
128B		%CONFIG<def> = MOVTS32_core %vreg15:isub_hi; FPR64_with_isub_hi_in_FPR32:%vreg15
144B		GIE %CONFIG<imp-use,kill>
	    Successors according to CFG: BB#1(?%)

160B	BB#1: derived from LLVM BB %entry
	    Live Ins: %R0 %R1
	    Predecessors according to CFG: BB#0
176B		%vreg6<def> = COPY %R1; GPR32:%vreg6
192B		%vreg16<def> = COPY %R0; GPR32:%vreg16
208B		%vreg0<def> = IMULrr_r32 %vreg6, %vreg6, %STATUS<imp-def,dead>; GPR32:%vreg0,%vreg6,%vreg6
224B		%vreg7<def,dead> = CMPri_r32 %vreg0, 0, %STATUS<imp-def>; GPR32:%vreg7,%vreg0
240B		BCC <BB#4>, 0, %STATUS<imp-use>
256B		BNONE32 <BB#2>, %STATUS<imp-use>
	    Successors according to CFG: BB#4(0x30000000 / 0x80000000 = 37.50%) BB#2(0x50000000 / 0x80000000 = 62.50%)

272B	BB#2: derived from LLVM BB %for.body.preheader
	    Predecessors according to CFG: BB#1
288B		%vreg8<def> = MOVi32ri 0; GPR32:%vreg8
320B		%vreg17<def> = COPY %vreg8; GPR32:%vreg17,%vreg8
	    Successors according to CFG: BB#3(?%)

336B	BB#3: derived from LLVM BB %for.body
	    Predecessors according to CFG: BB#2 BB#3
384B		%vreg4<def> = ADDri_r32 %vreg16, 4, %STATUS<imp-def,dead>; GPR32:%vreg4,%vreg16
400B		STRi32_r32 %vreg8, %vreg16, 0; mem:Volatile ST4[%lsr.iv](tbaa=!2) GPR32:%vreg8,%vreg16
416B		%vreg17<def> = ADDri_r32 %vreg17, 1, %STATUS<imp-def,dead>; GPR32:%vreg17
432B		%vreg10<def,dead> = CMPrr_r32 %vreg17, %vreg0, %STATUS<imp-def>; GPR32:%vreg10,%vreg17,%vreg0
448B		%vreg16<def> = COPY %vreg4; GPR32:%vreg16,%vreg4
480B		BCC <BB#3>, 8, %STATUS<imp-use>
496B		BNONE32 <BB#4>, %STATUS<imp-use>
	    Successors according to CFG: BB#3(0x7c000000 / 0x80000000 = 96.88%) BB#4(0x04000000 / 0x80000000 = 3.12%)

512B	BB#4: derived from LLVM BB %for.end
	    Predecessors according to CFG: BB#1 BB#3
528B		%vreg14<def> = LDRi32_r32 <fi#0>, 0; mem:LD4[FixedStack0] GPR32:%vreg14
544B		GID
560B		%CONFIG<def> = MOVTS32_core %vreg14; GPR32:%vreg14
576B		GIE %CONFIG<imp-use,kill>
592B		RTS

# End machine code for function matclr.

# *** IR Dump After Live Register Matrix ***:
# Machine code for function matclr: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=8, at location [SP]
Function Live Ins: %R0 in %vreg5, %R1 in %vreg6

0B	BB#0: 
	    Live Ins: %R0 %R1
16B		GID %CONFIG<imp-def>
32B		%vreg15:isub_lo<def,read-undef> = MOVFS32_core %CONFIG<kill>; FPR64_with_isub_hi_in_FPR32:%vreg15
48B		%vreg15:isub_hi<def> = COPY %vreg15:isub_lo; FPR64_with_isub_hi_in_FPR32:%vreg15
64B		%vreg15:isub_hi<def,tied1> = MOVTi32ri %vreg15:isub_hi<tied0>, 72; FPR64_with_isub_hi_in_FPR32:%vreg15
112B		STRi64 %vreg15, <fi#1>, 0; mem:ST4[FixedStack1] ST4[FixedStack0] FPR64_with_isub_hi_in_FPR32:%vreg15
128B		%CONFIG<def> = MOVTS32_core %vreg15:isub_hi; FPR64_with_isub_hi_in_FPR32:%vreg15
144B		GIE %CONFIG<imp-use,kill>
	    Successors according to CFG: BB#1(?%)

160B	BB#1: derived from LLVM BB %entry
	    Live Ins: %R0 %R1
	    Predecessors according to CFG: BB#0
176B		%vreg6<def> = COPY %R1; GPR32:%vreg6
192B		%vreg16<def> = COPY %R0; GPR32:%vreg16
208B		%vreg0<def> = IMULrr_r32 %vreg6, %vreg6, %STATUS<imp-def,dead>; GPR32:%vreg0,%vreg6,%vreg6
224B		%vreg7<def,dead> = CMPri_r32 %vreg0, 0, %STATUS<imp-def>; GPR32:%vreg7,%vreg0
240B		BCC <BB#4>, 0, %STATUS<imp-use>
256B		BNONE32 <BB#2>, %STATUS<imp-use>
	    Successors according to CFG: BB#4(0x30000000 / 0x80000000 = 37.50%) BB#2(0x50000000 / 0x80000000 = 62.50%)

272B	BB#2: derived from LLVM BB %for.body.preheader
	    Predecessors according to CFG: BB#1
288B		%vreg8<def> = MOVi32ri 0; GPR32:%vreg8
320B		%vreg17<def> = COPY %vreg8; GPR32:%vreg17,%vreg8
	    Successors according to CFG: BB#3(?%)

336B	BB#3: derived from LLVM BB %for.body
	    Predecessors according to CFG: BB#2 BB#3
384B		%vreg4<def> = ADDri_r32 %vreg16, 4, %STATUS<imp-def,dead>; GPR32:%vreg4,%vreg16
400B		STRi32_r32 %vreg8, %vreg16, 0; mem:Volatile ST4[%lsr.iv](tbaa=!2) GPR32:%vreg8,%vreg16
416B		%vreg17<def> = ADDri_r32 %vreg17, 1, %STATUS<imp-def,dead>; GPR32:%vreg17
432B		%vreg10<def,dead> = CMPrr_r32 %vreg17, %vreg0, %STATUS<imp-def>; GPR32:%vreg10,%vreg17,%vreg0
448B		%vreg16<def> = COPY %vreg4; GPR32:%vreg16,%vreg4
480B		BCC <BB#3>, 8, %STATUS<imp-use>
496B		BNONE32 <BB#4>, %STATUS<imp-use>
	    Successors according to CFG: BB#3(0x7c000000 / 0x80000000 = 96.88%) BB#4(0x04000000 / 0x80000000 = 3.12%)

512B	BB#4: derived from LLVM BB %for.end
	    Predecessors according to CFG: BB#1 BB#3
528B		%vreg14<def> = LDRi32_r32 <fi#0>, 0; mem:LD4[FixedStack0] GPR32:%vreg14
544B		GID
560B		%CONFIG<def> = MOVTS32_core %vreg14; GPR32:%vreg14
576B		GIE %CONFIG<imp-use,kill>
592B		RTS

# End machine code for function matclr.

# *** IR Dump Before Greedy Register Allocator ***:
# Machine code for function matclr: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=8, at location [SP]
Function Live Ins: %R0 in %vreg5, %R1 in %vreg6

0B	BB#0: 
	    Live Ins: %R0 %R1
16B		GID %CONFIG<imp-def>
32B		%vreg15:isub_lo<def,read-undef> = MOVFS32_core %CONFIG<kill>; FPR64_with_isub_hi_in_FPR32:%vreg15
48B		%vreg15:isub_hi<def> = COPY %vreg15:isub_lo; FPR64_with_isub_hi_in_FPR32:%vreg15
64B		%vreg15:isub_hi<def,tied1> = MOVTi32ri %vreg15:isub_hi<tied0>, 72; FPR64_with_isub_hi_in_FPR32:%vreg15
112B		STRi64 %vreg15, <fi#1>, 0; mem:ST4[FixedStack1] ST4[FixedStack0] FPR64_with_isub_hi_in_FPR32:%vreg15
128B		%CONFIG<def> = MOVTS32_core %vreg15:isub_hi; FPR64_with_isub_hi_in_FPR32:%vreg15
144B		GIE %CONFIG<imp-use,kill>
	    Successors according to CFG: BB#1(?%)

160B	BB#1: derived from LLVM BB %entry
	    Live Ins: %R0 %R1
	    Predecessors according to CFG: BB#0
176B		%vreg6<def> = COPY %R1; GPR32:%vreg6
192B		%vreg16<def> = COPY %R0; GPR32:%vreg16
208B		%vreg0<def> = IMULrr_r32 %vreg6, %vreg6, %STATUS<imp-def,dead>; GPR32:%vreg0,%vreg6,%vreg6
224B		%vreg7<def,dead> = CMPri_r32 %vreg0, 0, %STATUS<imp-def>; GPR32:%vreg7,%vreg0
240B		BCC <BB#4>, 0, %STATUS<imp-use>
256B		BNONE32 <BB#2>, %STATUS<imp-use>
	    Successors according to CFG: BB#4(0x30000000 / 0x80000000 = 37.50%) BB#2(0x50000000 / 0x80000000 = 62.50%)

272B	BB#2: derived from LLVM BB %for.body.preheader
	    Predecessors according to CFG: BB#1
288B		%vreg8<def> = MOVi32ri 0; GPR32:%vreg8
320B		%vreg17<def> = COPY %vreg8; GPR32:%vreg17,%vreg8
	    Successors according to CFG: BB#3(?%)

336B	BB#3: derived from LLVM BB %for.body
	    Predecessors according to CFG: BB#2 BB#3
384B		%vreg4<def> = ADDri_r32 %vreg16, 4, %STATUS<imp-def,dead>; GPR32:%vreg4,%vreg16
400B		STRi32_r32 %vreg8, %vreg16, 0; mem:Volatile ST4[%lsr.iv](tbaa=!2) GPR32:%vreg8,%vreg16
416B		%vreg17<def> = ADDri_r32 %vreg17, 1, %STATUS<imp-def,dead>; GPR32:%vreg17
432B		%vreg10<def,dead> = CMPrr_r32 %vreg17, %vreg0, %STATUS<imp-def>; GPR32:%vreg10,%vreg17,%vreg0
448B		%vreg16<def> = COPY %vreg4; GPR32:%vreg16,%vreg4
480B		BCC <BB#3>, 8, %STATUS<imp-use>
496B		BNONE32 <BB#4>, %STATUS<imp-use>
	    Successors according to CFG: BB#3(0x7c000000 / 0x80000000 = 96.88%) BB#4(0x04000000 / 0x80000000 = 3.12%)

512B	BB#4: derived from LLVM BB %for.end
	    Predecessors according to CFG: BB#1 BB#3
528B		%vreg14<def> = LDRi32_r32 <fi#0>, 0; mem:LD4[FixedStack0] GPR32:%vreg14
544B		GID
560B		%CONFIG<def> = MOVTS32_core %vreg14; GPR32:%vreg14
576B		GIE %CONFIG<imp-use,kill>
592B		RTS

# End machine code for function matclr.

********** GREEDY REGISTER ALLOCATION **********
********** Function: matclr
********** Compute Spill Weights **********
********** Function: matclr

isLoadToStackSlot for %vreg0<def> = IMULrr_r32 %vreg6, %vreg6, %STATUS<imp-def,dead>; GPR32:%vreg0,%vreg6,%vreg6

isLoadToStackSlot for %vreg4<def> = ADDri_r32 %vreg16, 4, %STATUS<imp-def,dead>; GPR32:%vreg4,%vreg16
********** INTERVALS **********
R0 [0B,192r:0)  0@0B-phi
R1 [0B,176r:0)  0@0B-phi
%vreg0 [208r,512B:0)  0@208r
%vreg4 [384r,448r:0)  0@384r
%vreg6 [176r,208r:0)  0@176r
%vreg7 [224r,224d:0)  0@224r
%vreg8 [288r,512B:0)  0@288r
%vreg10 [432r,432d:0)  0@432r
%vreg14 [528r,560r:0)  0@528r
%vreg15 [32r,48r:0)[48r,64r:2)[64r,128r:1)  0@32r 1@64r 2@48r
%vreg16 [192r,336B:0)[336B,400r:2)[448r,512B:1)  0@192r 1@448r 2@336B-phi
%vreg17 [320r,336B:0)[336B,416r:1)[416r,512B:2)  0@320r 1@336B-phi 2@416r
RegMasks:
********** MACHINEINSTRS **********
# Machine code for function matclr: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=8, at location [SP]
Function Live Ins: %R0 in %vreg5, %R1 in %vreg6

0B	BB#0: 
	    Live Ins: %R0 %R1
16B		GID %CONFIG<imp-def>
32B		%vreg15:isub_lo<def,read-undef> = MOVFS32_core %CONFIG<kill>; FPR64_with_isub_hi_in_FPR32:%vreg15
48B		%vreg15:isub_hi<def> = COPY %vreg15:isub_lo; FPR64_with_isub_hi_in_FPR32:%vreg15
64B		%vreg15:isub_hi<def,tied1> = MOVTi32ri %vreg15:isub_hi<tied0>, 72; FPR64_with_isub_hi_in_FPR32:%vreg15
112B		STRi64 %vreg15, <fi#1>, 0; mem:ST4[FixedStack1] ST4[FixedStack0] FPR64_with_isub_hi_in_FPR32:%vreg15
128B		%CONFIG<def> = MOVTS32_core %vreg15:isub_hi; FPR64_with_isub_hi_in_FPR32:%vreg15
144B		GIE %CONFIG<imp-use,kill>
	    Successors according to CFG: BB#1(?%)

160B	BB#1: derived from LLVM BB %entry
	    Live Ins: %R0 %R1
	    Predecessors according to CFG: BB#0
176B		%vreg6<def> = COPY %R1; GPR32:%vreg6
192B		%vreg16<def> = COPY %R0; GPR32:%vreg16
208B		%vreg0<def> = IMULrr_r32 %vreg6, %vreg6, %STATUS<imp-def,dead>; GPR32:%vreg0,%vreg6,%vreg6
224B		%vreg7<def,dead> = CMPri_r32 %vreg0, 0, %STATUS<imp-def>; GPR32:%vreg7,%vreg0
240B		BCC <BB#4>, 0, %STATUS<imp-use>
256B		BNONE32 <BB#2>, %STATUS<imp-use>
	    Successors according to CFG: BB#4(0x30000000 / 0x80000000 = 37.50%) BB#2(0x50000000 / 0x80000000 = 62.50%)

272B	BB#2: derived from LLVM BB %for.body.preheader
	    Predecessors according to CFG: BB#1
288B		%vreg8<def> = MOVi32ri 0; GPR32:%vreg8
320B		%vreg17<def> = COPY %vreg8; GPR32:%vreg17,%vreg8
	    Successors according to CFG: BB#3(?%)

336B	BB#3: derived from LLVM BB %for.body
	    Predecessors according to CFG: BB#2 BB#3
384B		%vreg4<def> = ADDri_r32 %vreg16, 4, %STATUS<imp-def,dead>; GPR32:%vreg4,%vreg16
400B		STRi32_r32 %vreg8, %vreg16, 0; mem:Volatile ST4[%lsr.iv](tbaa=!2) GPR32:%vreg8,%vreg16
416B		%vreg17<def> = ADDri_r32 %vreg17, 1, %STATUS<imp-def,dead>; GPR32:%vreg17
432B		%vreg10<def,dead> = CMPrr_r32 %vreg17, %vreg0, %STATUS<imp-def>; GPR32:%vreg10,%vreg17,%vreg0
448B		%vreg16<def> = COPY %vreg4; GPR32:%vreg16,%vreg4
480B		BCC <BB#3>, 8, %STATUS<imp-use>
496B		BNONE32 <BB#4>, %STATUS<imp-use>
	    Successors according to CFG: BB#3(0x7c000000 / 0x80000000 = 96.88%) BB#4(0x04000000 / 0x80000000 = 3.12%)

512B	BB#4: derived from LLVM BB %for.end
	    Predecessors according to CFG: BB#1 BB#3
528B		%vreg14<def> = LDRi32_r32 <fi#0>, 0; mem:LD4[FixedStack0] GPR32:%vreg14
544B		GID
560B		%CONFIG<def> = MOVTS32_core %vreg14; GPR32:%vreg14
576B		GIE %CONFIG<imp-use,kill>
592B		RTS

# End machine code for function matclr.


selectOrSplit GPR32:%vreg16 [192r,336B:0)[336B,400r:2)[448r,512B:1)  0@192r 1@448r 2@336B-phi w=1.616754e-01
AllocationOrder(GPR32) = [ %R0 %R1 %R2 %R3 %IP %R16 %R17 %R18 %R19 %R20 %R21 %R22 %R23 %R24 %R25 %R26 %R27 %R32 %R33 %R34 %R35 %R36 %R37 %R38 %R39 %R40 %R41 %R42 %R43 %R44 %R45 %R46 %R47 %R48 %R49 %R50 %R51 %R52 %R53 %R54 %R55 %R56 %R57 %R58 %R59 %R60 %R61 %R62 %R63 %R4 %R5 %R6 %R7 %R8 ]
hints: %R0
assigning %vreg16 to %R0: R0 [192r,336B:0)[336B,400r:2)[448r,512B:1)  0@192r 1@448r 2@336B-phi

selectOrSplit GPR32:%vreg6 [176r,208r:0)  0@176r w=4.675926e-03
hints: %R1
assigning %vreg6 to %R1: R1 [176r,208r:0)  0@176r

selectOrSplit GPR32:%vreg0 [208r,512B:0)  0@208r w=3.311966e-02
assigning %vreg0 to %R1: R1 [208r,512B:0)  0@208r

selectOrSplit GPR32:%vreg8 [288r,512B:0)  0@288r w=3.667068e-02
assigning %vreg8 to %R2: R2 [288r,512B:0)  0@288r

selectOrSplit GPR32:%vreg17 [320r,336B:0)[336B,416r:1)[416r,512B:2)  0@320r 1@336B-phi 2@416r w=2.557811e-01
hints: %R2
assigning %vreg17 to %R3: R3 [320r,336B:0)[336B,416r:1)[416r,512B:2)  0@320r 1@336B-phi 2@416r

selectOrSplit GPR32:%vreg7 [224r,224d:0)  0@224r w=INF
assigning %vreg7 to %R2: R2 [224r,224d:0)  0@224r

selectOrSplit GPR32:%vreg4 [384r,448r:0)  0@384r w=9.251077e-02
hints: %R0
assigning %vreg4 to %IP: IP [384r,448r:0)  0@384r

selectOrSplit GPR32:%vreg10 [432r,432d:0)  0@432r w=INF
assigning %vreg10 to %R0: R0 [432r,432d:0)  0@432r

selectOrSplit GPR32:%vreg14 [528r,560r:0)  0@528r w=4.629630e-03
assigning %vreg14 to %R0: R0 [528r,560r:0)  0@528r

selectOrSplit FPR64_with_isub_hi_in_FPR32:%vreg15 [32r,48r:0)[48r,64r:2)[64r,128r:1)  0@32r 1@64r 2@48r w=1.411290e-02
AllocationOrder(FPR64_with_isub_hi_in_FPR32) = [ %D0 %D1 %D9 %D10 %D11 %D12 %D13 %D16 %D17 %D18 %D19 %D20 %D21 %D22 %D23 %D24 %D25 %D26 %D27 %D28 %D29 %D30 %D31 %D2 %D3 ]
assigning %vreg15 to %D1: R2 [32r,48r:0)[48r,64r:2)[64r,128r:1)  0@32r 1@64r 2@48r R3 [32r,48r:0)[48r,64r:2)[64r,128r:1)  0@32r 1@64r 2@48r
# *** IR Dump After Greedy Register Allocator ***:
# Machine code for function matclr: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=8, at location [SP]
Function Live Ins: %R0 in %vreg5, %R1 in %vreg6

0B	BB#0: 
	    Live Ins: %R0 %R1
16B		GID %CONFIG<imp-def>
32B		%vreg15:isub_lo<def,read-undef> = MOVFS32_core %CONFIG<kill>; FPR64_with_isub_hi_in_FPR32:%vreg15
48B		%vreg15:isub_hi<def> = COPY %vreg15:isub_lo; FPR64_with_isub_hi_in_FPR32:%vreg15
64B		%vreg15:isub_hi<def,tied1> = MOVTi32ri %vreg15:isub_hi<tied0>, 72; FPR64_with_isub_hi_in_FPR32:%vreg15
112B		STRi64 %vreg15, <fi#1>, 0; mem:ST4[FixedStack1] ST4[FixedStack0] FPR64_with_isub_hi_in_FPR32:%vreg15
128B		%CONFIG<def> = MOVTS32_core %vreg15:isub_hi; FPR64_with_isub_hi_in_FPR32:%vreg15
144B		GIE %CONFIG<imp-use,kill>
	    Successors according to CFG: BB#1(?%)

160B	BB#1: derived from LLVM BB %entry
	    Live Ins: %R0 %R1
	    Predecessors according to CFG: BB#0
176B		%vreg6<def> = COPY %R1; GPR32:%vreg6
192B		%vreg16<def> = COPY %R0; GPR32:%vreg16
208B		%vreg0<def> = IMULrr_r32 %vreg6, %vreg6, %STATUS<imp-def,dead>; GPR32:%vreg0,%vreg6,%vreg6
224B		%vreg7<def,dead> = CMPri_r32 %vreg0, 0, %STATUS<imp-def>; GPR32:%vreg7,%vreg0
240B		BCC <BB#4>, 0, %STATUS<imp-use>
256B		BNONE32 <BB#2>, %STATUS<imp-use>
	    Successors according to CFG: BB#4(0x30000000 / 0x80000000 = 37.50%) BB#2(0x50000000 / 0x80000000 = 62.50%)

272B	BB#2: derived from LLVM BB %for.body.preheader
	    Predecessors according to CFG: BB#1
288B		%vreg8<def> = MOVi32ri 0; GPR32:%vreg8
320B		%vreg17<def> = COPY %vreg8; GPR32:%vreg17,%vreg8
	    Successors according to CFG: BB#3(?%)

336B	BB#3: derived from LLVM BB %for.body
	    Predecessors according to CFG: BB#2 BB#3
384B		%vreg4<def> = ADDri_r32 %vreg16, 4, %STATUS<imp-def,dead>; GPR32:%vreg4,%vreg16
400B		STRi32_r32 %vreg8, %vreg16, 0; mem:Volatile ST4[%lsr.iv](tbaa=!2) GPR32:%vreg8,%vreg16
416B		%vreg17<def> = ADDri_r32 %vreg17, 1, %STATUS<imp-def,dead>; GPR32:%vreg17
432B		%vreg10<def,dead> = CMPrr_r32 %vreg17, %vreg0, %STATUS<imp-def>; GPR32:%vreg10,%vreg17,%vreg0
448B		%vreg16<def> = COPY %vreg4; GPR32:%vreg16,%vreg4
480B		BCC <BB#3>, 8, %STATUS<imp-use>
496B		BNONE32 <BB#4>, %STATUS<imp-use>
	    Successors according to CFG: BB#3(0x7c000000 / 0x80000000 = 96.88%) BB#4(0x04000000 / 0x80000000 = 3.12%)

512B	BB#4: derived from LLVM BB %for.end
	    Predecessors according to CFG: BB#1 BB#3
528B		%vreg14<def> = LDRi32_r32 <fi#0>, 0; mem:LD4[FixedStack0] GPR32:%vreg14
544B		GID
560B		%CONFIG<def> = MOVTS32_core %vreg14; GPR32:%vreg14
576B		GIE %CONFIG<imp-use,kill>
592B		RTS

# End machine code for function matclr.

# *** IR Dump Before Virtual Register Rewriter ***:
# Machine code for function matclr: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=8, at location [SP]
Function Live Ins: %R0 in %vreg5, %R1 in %vreg6

0B	BB#0: 
	    Live Ins: %R0 %R1
16B		GID %CONFIG<imp-def>
32B		%vreg15:isub_lo<def,read-undef> = MOVFS32_core %CONFIG<kill>; FPR64_with_isub_hi_in_FPR32:%vreg15
48B		%vreg15:isub_hi<def> = COPY %vreg15:isub_lo; FPR64_with_isub_hi_in_FPR32:%vreg15
64B		%vreg15:isub_hi<def,tied1> = MOVTi32ri %vreg15:isub_hi<tied0>, 72; FPR64_with_isub_hi_in_FPR32:%vreg15
112B		STRi64 %vreg15, <fi#1>, 0; mem:ST4[FixedStack1] ST4[FixedStack0] FPR64_with_isub_hi_in_FPR32:%vreg15
128B		%CONFIG<def> = MOVTS32_core %vreg15:isub_hi; FPR64_with_isub_hi_in_FPR32:%vreg15
144B		GIE %CONFIG<imp-use,kill>
	    Successors according to CFG: BB#1(?%)

160B	BB#1: derived from LLVM BB %entry
	    Live Ins: %R0 %R1
	    Predecessors according to CFG: BB#0
176B		%vreg6<def> = COPY %R1; GPR32:%vreg6
192B		%vreg16<def> = COPY %R0; GPR32:%vreg16
208B		%vreg0<def> = IMULrr_r32 %vreg6, %vreg6, %STATUS<imp-def,dead>; GPR32:%vreg0,%vreg6,%vreg6
224B		%vreg7<def,dead> = CMPri_r32 %vreg0, 0, %STATUS<imp-def>; GPR32:%vreg7,%vreg0
240B		BCC <BB#4>, 0, %STATUS<imp-use>
256B		BNONE32 <BB#2>, %STATUS<imp-use>
	    Successors according to CFG: BB#4(0x30000000 / 0x80000000 = 37.50%) BB#2(0x50000000 / 0x80000000 = 62.50%)

272B	BB#2: derived from LLVM BB %for.body.preheader
	    Predecessors according to CFG: BB#1
288B		%vreg8<def> = MOVi32ri 0; GPR32:%vreg8
320B		%vreg17<def> = COPY %vreg8; GPR32:%vreg17,%vreg8
	    Successors according to CFG: BB#3(?%)

336B	BB#3: derived from LLVM BB %for.body
	    Predecessors according to CFG: BB#2 BB#3
384B		%vreg4<def> = ADDri_r32 %vreg16, 4, %STATUS<imp-def,dead>; GPR32:%vreg4,%vreg16
400B		STRi32_r32 %vreg8, %vreg16, 0; mem:Volatile ST4[%lsr.iv](tbaa=!2) GPR32:%vreg8,%vreg16
416B		%vreg17<def> = ADDri_r32 %vreg17, 1, %STATUS<imp-def,dead>; GPR32:%vreg17
432B		%vreg10<def,dead> = CMPrr_r32 %vreg17, %vreg0, %STATUS<imp-def>; GPR32:%vreg10,%vreg17,%vreg0
448B		%vreg16<def> = COPY %vreg4; GPR32:%vreg16,%vreg4
480B		BCC <BB#3>, 8, %STATUS<imp-use>
496B		BNONE32 <BB#4>, %STATUS<imp-use>
	    Successors according to CFG: BB#3(0x7c000000 / 0x80000000 = 96.88%) BB#4(0x04000000 / 0x80000000 = 3.12%)

512B	BB#4: derived from LLVM BB %for.end
	    Predecessors according to CFG: BB#1 BB#3
528B		%vreg14<def> = LDRi32_r32 <fi#0>, 0; mem:LD4[FixedStack0] GPR32:%vreg14
544B		GID
560B		%CONFIG<def> = MOVTS32_core %vreg14; GPR32:%vreg14
576B		GIE %CONFIG<imp-use,kill>
592B		RTS

# End machine code for function matclr.

********** REWRITE VIRTUAL REGISTERS **********
********** Function: matclr
********** REGISTER MAP **********
[%vreg0 -> %R1] GPR32
[%vreg4 -> %IP] GPR32
[%vreg6 -> %R1] GPR32
[%vreg7 -> %R2] GPR32
[%vreg8 -> %R2] GPR32
[%vreg10 -> %R0] GPR32
[%vreg14 -> %R0] GPR32
[%vreg15 -> %D1] FPR64_with_isub_hi_in_FPR32
[%vreg16 -> %R0] GPR32
[%vreg17 -> %R3] GPR32

0B	BB#0: 
	    Live Ins: %R0 %R1
16B		GID %CONFIG<imp-def>
32B		%vreg15:isub_lo<def,read-undef> = MOVFS32_core %CONFIG<kill>; FPR64_with_isub_hi_in_FPR32:%vreg15
48B		%vreg15:isub_hi<def> = COPY %vreg15:isub_lo<kill>; FPR64_with_isub_hi_in_FPR32:%vreg15
64B		%vreg15:isub_hi<def,tied1> = MOVTi32ri %vreg15:isub_hi<kill,tied0>, 72; FPR64_with_isub_hi_in_FPR32:%vreg15
112B		STRi64 %vreg15, <fi#1>, 0; mem:ST4[FixedStack1] ST4[FixedStack0] FPR64_with_isub_hi_in_FPR32:%vreg15
128B		%CONFIG<def> = MOVTS32_core %vreg15:isub_hi<kill>; FPR64_with_isub_hi_in_FPR32:%vreg15
144B		GIE %CONFIG<imp-use,kill>
	    Successors according to CFG: BB#1(?%)
> GID %CONFIG<imp-def>
> %R2<def> = MOVFS32_core %CONFIG<kill>, %D1<imp-def>
> %R3<def> = COPY %R2, %D1<imp-use,kill>, %D1<imp-def>
> %R3<def,tied1> = MOVTi32ri %R3<tied0>, 72, %D1<imp-use,kill>, %D1<imp-def>
> STRi64 %D1, <fi#1>, 0; mem:ST4[FixedStack1] ST4[FixedStack0]
> %CONFIG<def> = MOVTS32_core %R3, %D1<imp-use,kill>
> GIE %CONFIG<imp-use,kill>
160B	BB#1: derived from LLVM BB %entry
	    Live Ins: %R0 %R1
	    Predecessors according to CFG: BB#0
176B		%vreg6<def> = COPY %R1; GPR32:%vreg6
192B		%vreg16<def> = COPY %R0; GPR32:%vreg16
208B		%vreg0<def> = IMULrr_r32 %vreg6<kill>, %vreg6, %STATUS<imp-def,dead>; GPR32:%vreg0,%vreg6,%vreg6
224B		%vreg7<def,dead> = CMPri_r32 %vreg0, 0, %STATUS<imp-def>; GPR32:%vreg7,%vreg0
240B		BCC <BB#4>, 0, %STATUS<imp-use>
256B		BNONE32 <BB#2>, %STATUS<imp-use>
	    Successors according to CFG: BB#4(0x30000000 / 0x80000000 = 37.50%) BB#2(0x50000000 / 0x80000000 = 62.50%)
> %R1<def> = COPY %R1
Identity copy: %R1<def> = COPY %R1
  deleted.
> %R0<def> = COPY %R0
Identity copy: %R0<def> = COPY %R0
  deleted.
> %R1<def> = IMULrr_r32 %R1<kill>, %R1, %STATUS<imp-def,dead>
> %R2<def,dead> = CMPri_r32 %R1, 0, %STATUS<imp-def>
> BCC <BB#4>, 0, %STATUS<imp-use>
> BNONE32 <BB#2>, %STATUS<imp-use>
272B	BB#2: derived from LLVM BB %for.body.preheader
	    Live Ins: %R0 %R1
	    Predecessors according to CFG: BB#1
288B		%vreg8<def> = MOVi32ri 0; GPR32:%vreg8
320B		%vreg17<def> = COPY %vreg8; GPR32:%vreg17,%vreg8
	    Successors according to CFG: BB#3(?%)
> %R2<def> = MOVi32ri 0
> %R3<def> = COPY %R2
336B	BB#3: derived from LLVM BB %for.body
	    Live Ins: %R0 %R1 %R2 %R3
	    Predecessors according to CFG: BB#2 BB#3
384B		%vreg4<def> = ADDri_r32 %vreg16, 4, %STATUS<imp-def,dead>; GPR32:%vreg4,%vreg16
400B		STRi32_r32 %vreg8, %vreg16<kill>, 0; mem:Volatile ST4[%lsr.iv](tbaa=!2) GPR32:%vreg8,%vreg16
416B		%vreg17<def> = ADDri_r32 %vreg17<kill>, 1, %STATUS<imp-def,dead>; GPR32:%vreg17
432B		%vreg10<def,dead> = CMPrr_r32 %vreg17, %vreg0, %STATUS<imp-def>; GPR32:%vreg10,%vreg17,%vreg0
448B		%vreg16<def> = COPY %vreg4<kill>; GPR32:%vreg16,%vreg4
480B		BCC <BB#3>, 8, %STATUS<imp-use>
496B		BNONE32 <BB#4>, %STATUS<imp-use>
	    Successors according to CFG: BB#3(0x7c000000 / 0x80000000 = 96.88%) BB#4(0x04000000 / 0x80000000 = 3.12%)
> %IP<def> = ADDri_r32 %R0, 4, %STATUS<imp-def,dead>
> STRi32_r32 %R2, %R0<kill>, 0; mem:Volatile ST4[%lsr.iv](tbaa=!2)
> %R3<def> = ADDri_r32 %R3<kill>, 1, %STATUS<imp-def,dead>
> %R0<def,dead> = CMPrr_r32 %R3, %R1, %STATUS<imp-def>
> %R0<def> = COPY %IP<kill>
> BCC <BB#3>, 8, %STATUS<imp-use>
> BNONE32 <BB#4>, %STATUS<imp-use>
512B	BB#4: derived from LLVM BB %for.end
	    Predecessors according to CFG: BB#1 BB#3
528B		%vreg14<def> = LDRi32_r32 <fi#0>, 0; mem:LD4[FixedStack0] GPR32:%vreg14
544B		GID
560B		%CONFIG<def> = MOVTS32_core %vreg14<kill>; GPR32:%vreg14
576B		GIE %CONFIG<imp-use,kill>
592B		RTS
> %R0<def> = LDRi32_r32 <fi#0>, 0; mem:LD4[FixedStack0]
> GID
> %CONFIG<def> = MOVTS32_core %R0<kill>
> GIE %CONFIG<imp-use,kill>
> RTS
# *** IR Dump After Virtual Register Rewriter ***:
# Machine code for function matclr: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=8, at location [SP]
Function Live Ins: %R0, %R1

0B	BB#0: 
	    Live Ins: %R0 %R1
16B		GID %CONFIG<imp-def>
32B		%R2<def> = MOVFS32_core %CONFIG<kill>, %D1<imp-def>
48B		%R3<def> = COPY %R2, %D1<imp-use,kill>, %D1<imp-def>
64B		%R3<def,tied1> = MOVTi32ri %R3<tied0>, 72, %D1<imp-use,kill>, %D1<imp-def>
112B		STRi64 %D1, <fi#1>, 0; mem:ST4[FixedStack1] ST4[FixedStack0]
128B		%CONFIG<def> = MOVTS32_core %R3, %D1<imp-use,kill>
144B		GIE %CONFIG<imp-use,kill>
	    Successors according to CFG: BB#1(?%)

160B	BB#1: derived from LLVM BB %entry
	    Live Ins: %R0 %R1
	    Predecessors according to CFG: BB#0
208B		%R1<def> = IMULrr_r32 %R1<kill>, %R1, %STATUS<imp-def,dead>
224B		%R2<def,dead> = CMPri_r32 %R1, 0, %STATUS<imp-def>
240B		BCC <BB#4>, 0, %STATUS<imp-use>
256B		BNONE32 <BB#2>, %STATUS<imp-use>
	    Successors according to CFG: BB#4(0x30000000 / 0x80000000 = 37.50%) BB#2(0x50000000 / 0x80000000 = 62.50%)

272B	BB#2: derived from LLVM BB %for.body.preheader
	    Live Ins: %R0 %R1
	    Predecessors according to CFG: BB#1
288B		%R2<def> = MOVi32ri 0
320B		%R3<def> = COPY %R2
	    Successors according to CFG: BB#3(?%)

336B	BB#3: derived from LLVM BB %for.body
	    Live Ins: %R0 %R1 %R2 %R3
	    Predecessors according to CFG: BB#2 BB#3
384B		%IP<def> = ADDri_r32 %R0, 4, %STATUS<imp-def,dead>
400B		STRi32_r32 %R2, %R0<kill>, 0; mem:Volatile ST4[%lsr.iv](tbaa=!2)
416B		%R3<def> = ADDri_r32 %R3<kill>, 1, %STATUS<imp-def,dead>
432B		%R0<def,dead> = CMPrr_r32 %R3, %R1, %STATUS<imp-def>
448B		%R0<def> = COPY %IP<kill>
480B		BCC <BB#3>, 8, %STATUS<imp-use>
496B		BNONE32 <BB#4>, %STATUS<imp-use>
	    Successors according to CFG: BB#3(0x7c000000 / 0x80000000 = 96.88%) BB#4(0x04000000 / 0x80000000 = 3.12%)

512B	BB#4: derived from LLVM BB %for.end
	    Predecessors according to CFG: BB#1 BB#3
528B		%R0<def> = LDRi32_r32 <fi#0>, 0; mem:LD4[FixedStack0]
544B		GID
560B		%CONFIG<def> = MOVTS32_core %R0<kill>
576B		GIE %CONFIG<imp-use,kill>
592B		RTS

# End machine code for function matclr.

# *** IR Dump Before Stack Slot Coloring ***:
# Machine code for function matclr: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=8, at location [SP]
Function Live Ins: %R0, %R1

0B	BB#0: 
	    Live Ins: %R0 %R1
16B		GID %CONFIG<imp-def>
32B		%R2<def> = MOVFS32_core %CONFIG<kill>, %D1<imp-def>
48B		%R3<def> = COPY %R2, %D1<imp-use,kill>, %D1<imp-def>
64B		%R3<def,tied1> = MOVTi32ri %R3<tied0>, 72, %D1<imp-use,kill>, %D1<imp-def>
112B		STRi64 %D1, <fi#1>, 0; mem:ST4[FixedStack1] ST4[FixedStack0]
128B		%CONFIG<def> = MOVTS32_core %R3, %D1<imp-use,kill>
144B		GIE %CONFIG<imp-use,kill>
	    Successors according to CFG: BB#1(?%)

160B	BB#1: derived from LLVM BB %entry
	    Live Ins: %R0 %R1
	    Predecessors according to CFG: BB#0
208B		%R1<def> = IMULrr_r32 %R1<kill>, %R1, %STATUS<imp-def,dead>
224B		%R2<def,dead> = CMPri_r32 %R1, 0, %STATUS<imp-def>
240B		BCC <BB#4>, 0, %STATUS<imp-use>
256B		BNONE32 <BB#2>, %STATUS<imp-use>
	    Successors according to CFG: BB#4(0x30000000 / 0x80000000 = 37.50%) BB#2(0x50000000 / 0x80000000 = 62.50%)

272B	BB#2: derived from LLVM BB %for.body.preheader
	    Live Ins: %R0 %R1
	    Predecessors according to CFG: BB#1
288B		%R2<def> = MOVi32ri 0
320B		%R3<def> = COPY %R2
	    Successors according to CFG: BB#3(?%)

336B	BB#3: derived from LLVM BB %for.body
	    Live Ins: %R0 %R1 %R2 %R3
	    Predecessors according to CFG: BB#2 BB#3
384B		%IP<def> = ADDri_r32 %R0, 4, %STATUS<imp-def,dead>
400B		STRi32_r32 %R2, %R0<kill>, 0; mem:Volatile ST4[%lsr.iv](tbaa=!2)
416B		%R3<def> = ADDri_r32 %R3<kill>, 1, %STATUS<imp-def,dead>
432B		%R0<def,dead> = CMPrr_r32 %R3, %R1, %STATUS<imp-def>
448B		%R0<def> = COPY %IP<kill>
480B		BCC <BB#3>, 8, %STATUS<imp-use>
496B		BNONE32 <BB#4>, %STATUS<imp-use>
	    Successors according to CFG: BB#3(0x7c000000 / 0x80000000 = 96.88%) BB#4(0x04000000 / 0x80000000 = 3.12%)

512B	BB#4: derived from LLVM BB %for.end
	    Predecessors according to CFG: BB#1 BB#3
528B		%R0<def> = LDRi32_r32 <fi#0>, 0; mem:LD4[FixedStack0]
544B		GID
560B		%CONFIG<def> = MOVTS32_core %R0<kill>
576B		GIE %CONFIG<imp-use,kill>
592B		RTS

# End machine code for function matclr.

********** Stack Slot Coloring **********
********** Function: matclr
# *** IR Dump After Stack Slot Coloring ***:
# Machine code for function matclr: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=8, at location [SP]
Function Live Ins: %R0, %R1

BB#0: 
    Live Ins: %R0 %R1
	GID %CONFIG<imp-def>
	%R2<def> = MOVFS32_core %CONFIG<kill>, %D1<imp-def>
	%R3<def> = COPY %R2, %D1<imp-use,kill>, %D1<imp-def>
	%R3<def,tied1> = MOVTi32ri %R3<tied0>, 72, %D1<imp-use,kill>, %D1<imp-def>
	STRi64 %D1, <fi#1>, 0; mem:ST4[FixedStack1] ST4[FixedStack0]
	%CONFIG<def> = MOVTS32_core %R3, %D1<imp-use,kill>
	GIE %CONFIG<imp-use,kill>
    Successors according to CFG: BB#1(?%)

BB#1: derived from LLVM BB %entry
    Live Ins: %R0 %R1
    Predecessors according to CFG: BB#0
	%R1<def> = IMULrr_r32 %R1<kill>, %R1, %STATUS<imp-def,dead>
	%R2<def,dead> = CMPri_r32 %R1, 0, %STATUS<imp-def>
	BCC <BB#4>, 0, %STATUS<imp-use>
	BNONE32 <BB#2>, %STATUS<imp-use>
    Successors according to CFG: BB#4(0x30000000 / 0x80000000 = 37.50%) BB#2(0x50000000 / 0x80000000 = 62.50%)

BB#2: derived from LLVM BB %for.body.preheader
    Live Ins: %R0 %R1
    Predecessors according to CFG: BB#1
	%R2<def> = MOVi32ri 0
	%R3<def> = COPY %R2
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %for.body
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#2 BB#3
	%IP<def> = ADDri_r32 %R0, 4, %STATUS<imp-def,dead>
	STRi32_r32 %R2, %R0<kill>, 0; mem:Volatile ST4[%lsr.iv](tbaa=!2)
	%R3<def> = ADDri_r32 %R3<kill>, 1, %STATUS<imp-def,dead>
	%R0<def,dead> = CMPrr_r32 %R3, %R1, %STATUS<imp-def>
	%R0<def> = COPY %IP<kill>
	BCC <BB#3>, 8, %STATUS<imp-use>
	BNONE32 <BB#4>, %STATUS<imp-use>
    Successors according to CFG: BB#3(0x7c000000 / 0x80000000 = 96.88%) BB#4(0x04000000 / 0x80000000 = 3.12%)

BB#4: derived from LLVM BB %for.end
    Predecessors according to CFG: BB#1 BB#3
	%R0<def> = LDRi32_r32 <fi#0>, 0; mem:LD4[FixedStack0]
	GID
	%CONFIG<def> = MOVTS32_core %R0<kill>
	GIE %CONFIG<imp-use,kill>
	RTS

# End machine code for function matclr.

# *** IR Dump Before Machine Loop Invariant Code Motion ***:
# Machine code for function matclr: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=8, at location [SP]
Function Live Ins: %R0, %R1

BB#0: 
    Live Ins: %R0 %R1
	GID %CONFIG<imp-def>
	%R2<def> = MOVFS32_core %CONFIG<kill>, %D1<imp-def>
	%R3<def> = COPY %R2, %D1<imp-use,kill>, %D1<imp-def>
	%R3<def,tied1> = MOVTi32ri %R3<tied0>, 72, %D1<imp-use,kill>, %D1<imp-def>
	STRi64 %D1, <fi#1>, 0; mem:ST4[FixedStack1] ST4[FixedStack0]
	%CONFIG<def> = MOVTS32_core %R3, %D1<imp-use,kill>
	GIE %CONFIG<imp-use,kill>
    Successors according to CFG: BB#1(?%)

BB#1: derived from LLVM BB %entry
    Live Ins: %R0 %R1
    Predecessors according to CFG: BB#0
	%R1<def> = IMULrr_r32 %R1<kill>, %R1, %STATUS<imp-def,dead>
	%R2<def,dead> = CMPri_r32 %R1, 0, %STATUS<imp-def>
	BCC <BB#4>, 0, %STATUS<imp-use>
	BNONE32 <BB#2>, %STATUS<imp-use>
    Successors according to CFG: BB#4(0x30000000 / 0x80000000 = 37.50%) BB#2(0x50000000 / 0x80000000 = 62.50%)

BB#2: derived from LLVM BB %for.body.preheader
    Live Ins: %R0 %R1
    Predecessors according to CFG: BB#1
	%R2<def> = MOVi32ri 0
	%R3<def> = COPY %R2
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %for.body
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#2 BB#3
	%IP<def> = ADDri_r32 %R0, 4, %STATUS<imp-def,dead>
	STRi32_r32 %R2, %R0<kill>, 0; mem:Volatile ST4[%lsr.iv](tbaa=!2)
	%R3<def> = ADDri_r32 %R3<kill>, 1, %STATUS<imp-def,dead>
	%R0<def,dead> = CMPrr_r32 %R3, %R1, %STATUS<imp-def>
	%R0<def> = COPY %IP<kill>
	BCC <BB#3>, 8, %STATUS<imp-use>
	BNONE32 <BB#4>, %STATUS<imp-use>
    Successors according to CFG: BB#3(0x7c000000 / 0x80000000 = 96.88%) BB#4(0x04000000 / 0x80000000 = 3.12%)

BB#4: derived from LLVM BB %for.end
    Predecessors according to CFG: BB#1 BB#3
	%R0<def> = LDRi32_r32 <fi#0>, 0; mem:LD4[FixedStack0]
	GID
	%CONFIG<def> = MOVTS32_core %R0<kill>
	GIE %CONFIG<imp-use,kill>
	RTS

# End machine code for function matclr.

******** Post-regalloc Machine LICM: matclr ********

isLoadToStackSlot for %IP<def> = ADDri_r32 %R0, 4, %STATUS<imp-def,dead>
# *** IR Dump After Machine Loop Invariant Code Motion ***:
# Machine code for function matclr: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=8, at location [SP]
Function Live Ins: %R0, %R1

BB#0: 
    Live Ins: %R0 %R1
	GID %CONFIG<imp-def>
	%R2<def> = MOVFS32_core %CONFIG<kill>, %D1<imp-def>
	%R3<def> = COPY %R2, %D1<imp-use,kill>, %D1<imp-def>
	%R3<def,tied1> = MOVTi32ri %R3<tied0>, 72, %D1<imp-use,kill>, %D1<imp-def>
	STRi64 %D1, <fi#1>, 0; mem:ST4[FixedStack1] ST4[FixedStack0]
	%CONFIG<def> = MOVTS32_core %R3, %D1<imp-use,kill>
	GIE %CONFIG<imp-use,kill>
    Successors according to CFG: BB#1(?%)

BB#1: derived from LLVM BB %entry
    Live Ins: %R0 %R1
    Predecessors according to CFG: BB#0
	%R1<def> = IMULrr_r32 %R1<kill>, %R1, %STATUS<imp-def,dead>
	%R2<def,dead> = CMPri_r32 %R1, 0, %STATUS<imp-def>
	BCC <BB#4>, 0, %STATUS<imp-use>
	BNONE32 <BB#2>, %STATUS<imp-use>
    Successors according to CFG: BB#4(0x30000000 / 0x80000000 = 37.50%) BB#2(0x50000000 / 0x80000000 = 62.50%)

BB#2: derived from LLVM BB %for.body.preheader
    Live Ins: %R0 %R1
    Predecessors according to CFG: BB#1
	%R2<def> = MOVi32ri 0
	%R3<def> = COPY %R2
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %for.body
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#2 BB#3
	%IP<def> = ADDri_r32 %R0, 4, %STATUS<imp-def,dead>
	STRi32_r32 %R2, %R0<kill>, 0; mem:Volatile ST4[%lsr.iv](tbaa=!2)
	%R3<def> = ADDri_r32 %R3<kill>, 1, %STATUS<imp-def,dead>
	%R0<def,dead> = CMPrr_r32 %R3, %R1, %STATUS<imp-def>
	%R0<def> = COPY %IP<kill>
	BCC <BB#3>, 8, %STATUS<imp-use>
	BNONE32 <BB#4>, %STATUS<imp-use>
    Successors according to CFG: BB#3(0x7c000000 / 0x80000000 = 96.88%) BB#4(0x04000000 / 0x80000000 = 3.12%)

BB#4: derived from LLVM BB %for.end
    Predecessors according to CFG: BB#1 BB#3
	%R0<def> = LDRi32_r32 <fi#0>, 0; mem:LD4[FixedStack0]
	GID
	%CONFIG<def> = MOVTS32_core %R0<kill>
	GIE %CONFIG<imp-use,kill>
	RTS

# End machine code for function matclr.


block-frequency: matclr
=======================
reverse-post-order-traversal
 - 0: BB0
 - 1: BB1[entry]
 - 2: BB2[for.body.preheader]
 - 3: BB3[for.body]
 - 4: BB4[for.end]
loop-detection
 - loop = BB3[for.body]
compute-mass-in-loop: BB3[for.body]*
 - node: BB3[for.body]
  => [backedge] weight = 2080374784
  => [  exit  ] weight = 67108864, succ = BB4[for.end]
  => mass:  ffffffffffffffff
  => assign f7ffffffffffffff (0800000000000000) [back] to BB3[for.body]
  => assign 0800000000000000 (0000000000000000) [exit] to BB4[for.end]
compute-loop-scale: BB3[for.body]*
 - exit-mass = 0800000000000000 (ffffffffffffffff - f7ffffffffffffff)
 - scale = 32.0
packaging-loop: BB3[for.body]*
 - node: BB3[for.body]
compute-mass-in-function
 - node: BB0
  => [ local  ] weight = 2147483648, succ = BB1[entry]
  => mass:  ffffffffffffffff
  => assign ffffffffffffffff (0000000000000000) to BB1[entry]
 - node: BB1[entry]
  => [ local  ] weight = 805306368, succ = BB4[for.end]
  => [ local  ] weight = 1342177280, succ = BB2[for.body.preheader]
  => mass:  ffffffffffffffff
  => assign 9fffffffffffffff (6000000000000000) to BB2[for.body.preheader]
  => assign 6000000000000000 (0000000000000000) to BB4[for.end]
 - node: BB2[for.body.preheader]
  => [ local  ] weight = 2147483648, succ = BB3[for.body]
  => mass:  9fffffffffffffff
  => assign 9fffffffffffffff (0000000000000000) to BB3[for.body]
 - node: BB3[for.body]
  => [ local  ] weight = 576460752303423488, succ = BB4[for.end]
  => mass:  9fffffffffffffff
  => assign 9fffffffffffffff (0000000000000000) to BB4[for.end]
 - node: BB4[for.end]
  => mass:  ffffffffffffffff
unwrap-loop-package: BB3[for.body]*: mass = 9fffffffffffffff, scale = 32.0
  => combined-scale = 20.0
 - BB3[for.body]: 1.0 => 20.0
float-to-int: min = 0.625, max = 20.0, factor = 12.8
 - BB0: float = 1.0, scaled = 12.8, int = 12
 - BB1[entry]: float = 1.0, scaled = 12.8, int = 12
 - BB2[for.body.preheader]: float = 0.625, scaled = 8.0, int = 8
 - BB3[for.body]: float = 20.0, scaled = 256.0, int = 255
 - BB4[for.end]: float = 1.0, scaled = 12.8, int = 12
block-frequency-info: matclr
 - BB0: float = 1.0, int = 12
 - BB1[entry]: float = 1.0, int = 12
 - BB2[for.body.preheader]: float = 0.625, int = 8
 - BB3[for.body]: float = 20.0, int = 255
 - BB4[for.end]: float = 1.0, int = 12

# *** IR Dump Before Shrink Wrapping analysis ***:
# Machine code for function matclr: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=8, at location [SP]
Function Live Ins: %R0, %R1

BB#0: 
    Live Ins: %R0 %R1
	GID %CONFIG<imp-def>
	%R2<def> = MOVFS32_core %CONFIG<kill>, %D1<imp-def>
	%R3<def> = COPY %R2, %D1<imp-use,kill>, %D1<imp-def>
	%R3<def,tied1> = MOVTi32ri %R3<tied0>, 72, %D1<imp-use,kill>, %D1<imp-def>
	STRi64 %D1, <fi#1>, 0; mem:ST4[FixedStack1] ST4[FixedStack0]
	%CONFIG<def> = MOVTS32_core %R3, %D1<imp-use,kill>
	GIE %CONFIG<imp-use,kill>
    Successors according to CFG: BB#1(?%)

BB#1: derived from LLVM BB %entry
    Live Ins: %R0 %R1
    Predecessors according to CFG: BB#0
	%R1<def> = IMULrr_r32 %R1<kill>, %R1, %STATUS<imp-def,dead>
	%R2<def,dead> = CMPri_r32 %R1, 0, %STATUS<imp-def>
	BCC <BB#4>, 0, %STATUS<imp-use>
	BNONE32 <BB#2>, %STATUS<imp-use>
    Successors according to CFG: BB#4(0x30000000 / 0x80000000 = 37.50%) BB#2(0x50000000 / 0x80000000 = 62.50%)

BB#2: derived from LLVM BB %for.body.preheader
    Live Ins: %R0 %R1
    Predecessors according to CFG: BB#1
	%R2<def> = MOVi32ri 0
	%R3<def> = COPY %R2
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %for.body
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#2 BB#3
	%IP<def> = ADDri_r32 %R0, 4, %STATUS<imp-def,dead>
	STRi32_r32 %R2, %R0<kill>, 0; mem:Volatile ST4[%lsr.iv](tbaa=!2)
	%R3<def> = ADDri_r32 %R3<kill>, 1, %STATUS<imp-def,dead>
	%R0<def,dead> = CMPrr_r32 %R3, %R1, %STATUS<imp-def>
	%R0<def> = COPY %IP<kill>
	BCC <BB#3>, 8, %STATUS<imp-use>
	BNONE32 <BB#4>, %STATUS<imp-use>
    Successors according to CFG: BB#3(0x7c000000 / 0x80000000 = 96.88%) BB#4(0x04000000 / 0x80000000 = 3.12%)

BB#4: derived from LLVM BB %for.end
    Predecessors according to CFG: BB#1 BB#3
	%R0<def> = LDRi32_r32 <fi#0>, 0; mem:LD4[FixedStack0]
	GID
	%CONFIG<def> = MOVTS32_core %R0<kill>
	GIE %CONFIG<imp-use,kill>
	RTS

# End machine code for function matclr.

# *** IR Dump After Shrink Wrapping analysis ***:
# Machine code for function matclr: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=8, at location [SP]
Function Live Ins: %R0, %R1

BB#0: 
    Live Ins: %R0 %R1
	GID %CONFIG<imp-def>
	%R2<def> = MOVFS32_core %CONFIG<kill>, %D1<imp-def>
	%R3<def> = COPY %R2, %D1<imp-use,kill>, %D1<imp-def>
	%R3<def,tied1> = MOVTi32ri %R3<tied0>, 72, %D1<imp-use,kill>, %D1<imp-def>
	STRi64 %D1, <fi#1>, 0; mem:ST4[FixedStack1] ST4[FixedStack0]
	%CONFIG<def> = MOVTS32_core %R3, %D1<imp-use,kill>
	GIE %CONFIG<imp-use,kill>
    Successors according to CFG: BB#1(?%)

BB#1: derived from LLVM BB %entry
    Live Ins: %R0 %R1
    Predecessors according to CFG: BB#0
	%R1<def> = IMULrr_r32 %R1<kill>, %R1, %STATUS<imp-def,dead>
	%R2<def,dead> = CMPri_r32 %R1, 0, %STATUS<imp-def>
	BCC <BB#4>, 0, %STATUS<imp-use>
	BNONE32 <BB#2>, %STATUS<imp-use>
    Successors according to CFG: BB#4(0x30000000 / 0x80000000 = 37.50%) BB#2(0x50000000 / 0x80000000 = 62.50%)

BB#2: derived from LLVM BB %for.body.preheader
    Live Ins: %R0 %R1
    Predecessors according to CFG: BB#1
	%R2<def> = MOVi32ri 0
	%R3<def> = COPY %R2
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %for.body
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#2 BB#3
	%IP<def> = ADDri_r32 %R0, 4, %STATUS<imp-def,dead>
	STRi32_r32 %R2, %R0<kill>, 0; mem:Volatile ST4[%lsr.iv](tbaa=!2)
	%R3<def> = ADDri_r32 %R3<kill>, 1, %STATUS<imp-def,dead>
	%R0<def,dead> = CMPrr_r32 %R3, %R1, %STATUS<imp-def>
	%R0<def> = COPY %IP<kill>
	BCC <BB#3>, 8, %STATUS<imp-use>
	BNONE32 <BB#4>, %STATUS<imp-use>
    Successors according to CFG: BB#3(0x7c000000 / 0x80000000 = 96.88%) BB#4(0x04000000 / 0x80000000 = 3.12%)

BB#4: derived from LLVM BB %for.end
    Predecessors according to CFG: BB#1 BB#3
	%R0<def> = LDRi32_r32 <fi#0>, 0; mem:LD4[FixedStack0]
	GID
	%CONFIG<def> = MOVTS32_core %R0<kill>
	GIE %CONFIG<imp-use,kill>
	RTS

# End machine code for function matclr.

# *** IR Dump Before Prologue/Epilogue Insertion & Frame Finalization ***:
# Machine code for function matclr: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=8, at location [SP]
Function Live Ins: %R0, %R1

BB#0: 
    Live Ins: %R0 %R1
	GID %CONFIG<imp-def>
	%R2<def> = MOVFS32_core %CONFIG<kill>, %D1<imp-def>
	%R3<def> = COPY %R2, %D1<imp-use,kill>, %D1<imp-def>
	%R3<def,tied1> = MOVTi32ri %R3<tied0>, 72, %D1<imp-use,kill>, %D1<imp-def>
	STRi64 %D1, <fi#1>, 0; mem:ST4[FixedStack1] ST4[FixedStack0]
	%CONFIG<def> = MOVTS32_core %R3, %D1<imp-use,kill>
	GIE %CONFIG<imp-use,kill>
    Successors according to CFG: BB#1(?%)

BB#1: derived from LLVM BB %entry
    Live Ins: %R0 %R1
    Predecessors according to CFG: BB#0
	%R1<def> = IMULrr_r32 %R1<kill>, %R1, %STATUS<imp-def,dead>
	%R2<def,dead> = CMPri_r32 %R1, 0, %STATUS<imp-def>
	BCC <BB#4>, 0, %STATUS<imp-use>
	BNONE32 <BB#2>, %STATUS<imp-use>
    Successors according to CFG: BB#4(0x30000000 / 0x80000000 = 37.50%) BB#2(0x50000000 / 0x80000000 = 62.50%)

BB#2: derived from LLVM BB %for.body.preheader
    Live Ins: %R0 %R1
    Predecessors according to CFG: BB#1
	%R2<def> = MOVi32ri 0
	%R3<def> = COPY %R2
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %for.body
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#2 BB#3
	%IP<def> = ADDri_r32 %R0, 4, %STATUS<imp-def,dead>
	STRi32_r32 %R2, %R0<kill>, 0; mem:Volatile ST4[%lsr.iv](tbaa=!2)
	%R3<def> = ADDri_r32 %R3<kill>, 1, %STATUS<imp-def,dead>
	%R0<def,dead> = CMPrr_r32 %R3, %R1, %STATUS<imp-def>
	%R0<def> = COPY %IP<kill>
	BCC <BB#3>, 8, %STATUS<imp-use>
	BNONE32 <BB#4>, %STATUS<imp-use>
    Successors according to CFG: BB#3(0x7c000000 / 0x80000000 = 96.88%) BB#4(0x04000000 / 0x80000000 = 3.12%)

BB#4: derived from LLVM BB %for.end
    Predecessors according to CFG: BB#1 BB#3
	%R0<def> = LDRi32_r32 <fi#0>, 0; mem:LD4[FixedStack0]
	GID
	%CONFIG<def> = MOVTS32_core %R0<kill>
	GIE %CONFIG<imp-use,kill>
	RTS

# End machine code for function matclr.

*** determineCalleeSaves
Used CSRs:

Has FP: DisableFramePointerElim set
Local frame base offset: 0
alloc FI(0) at SP[-4]
alloc FI(1) at SP[-8]

Has FP: DisableFramePointerElim set

Has FP: DisableFramePointerElim set

Function : matclr
<--------->
STRi64 %D1, <fi#1>, 0; mem:ST4[FixedStack1] ST4[FixedStack0]
FrameIndex : 1
spOffset   : -8
stackSize  : 8

Has FP: DisableFramePointerElim set
Offset     : -8
<--------->

Function : matclr
<--------->
%R0<def> = LDRi32_r32 <fi#0>, 0; mem:LD4[FixedStack0]
FrameIndex : 0
spOffset   : -4
stackSize  : 8

Has FP: DisableFramePointerElim set
Offset     : -4
<--------->
# *** IR Dump After Prologue/Epilogue Insertion & Frame Finalization ***:
# Machine code for function matclr: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=4, align=4, at location [SP-4]
  fi#1: size=4, align=8, at location [SP-8]
Function Live Ins: %R0, %R1

BB#0: 
    Live Ins: %R0 %R1
	%SP<def,tied2> = STRi64_pmd %LR, %SP<tied0>, -8; flags: FrameSetup
	%FP<def> = ADDri_r32 %SP, 8, %STATUS<imp-def>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	GID %CONFIG<imp-def>
	%R2<def> = MOVFS32_core %CONFIG<kill>, %D1<imp-def>
	%R3<def> = COPY %R2, %D1<imp-use,kill>, %D1<imp-def>
	%R3<def,tied1> = MOVTi32ri %R3<tied0>, 72, %D1<imp-use,kill>, %D1<imp-def>
	STRi64 %D1, %FP, -8; mem:ST4[FixedStack1] ST4[FixedStack0]
	%CONFIG<def> = MOVTS32_core %R3, %D1<imp-use,kill>
	GIE %CONFIG<imp-use,kill>
    Successors according to CFG: BB#1(?%)

BB#1: derived from LLVM BB %entry
    Live Ins: %R0 %R1
    Predecessors according to CFG: BB#0
	%R1<def> = IMULrr_r32 %R1<kill>, %R1, %STATUS<imp-def,dead>
	%R2<def,dead> = CMPri_r32 %R1, 0, %STATUS<imp-def>
	BCC <BB#4>, 0, %STATUS<imp-use>
	BNONE32 <BB#2>, %STATUS<imp-use>
    Successors according to CFG: BB#4(0x30000000 / 0x80000000 = 37.50%) BB#2(0x50000000 / 0x80000000 = 62.50%)

BB#2: derived from LLVM BB %for.body.preheader
    Live Ins: %R0 %R1
    Predecessors according to CFG: BB#1
	%R2<def> = MOVi32ri 0
	%R3<def> = COPY %R2
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %for.body
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#2 BB#3
	%IP<def> = ADDri_r32 %R0, 4, %STATUS<imp-def,dead>
	STRi32_r32 %R2, %R0<kill>, 0; mem:Volatile ST4[%lsr.iv](tbaa=!2)
	%R3<def> = ADDri_r32 %R3<kill>, 1, %STATUS<imp-def,dead>
	%R0<def,dead> = CMPrr_r32 %R3, %R1, %STATUS<imp-def>
	%R0<def> = COPY %IP<kill>
	BCC <BB#3>, 8, %STATUS<imp-use>
	BNONE32 <BB#4>, %STATUS<imp-use>
    Successors according to CFG: BB#3(0x7c000000 / 0x80000000 = 96.88%) BB#4(0x04000000 / 0x80000000 = 3.12%)

BB#4: derived from LLVM BB %for.end
    Predecessors according to CFG: BB#1 BB#3
	%R0<def> = LDRi32_r32 %FP, -4; mem:LD4[FixedStack0]
	GID
	%CONFIG<def> = MOVTS32_core %R0<kill>
	GIE %CONFIG<imp-use,kill>
	%LR<def> = LDRi64 %SP, 8; flags: FrameSetup
	%SP<def> = ADDri_r32 %SP, 8, %STATUS<imp-def>
	RTS

# End machine code for function matclr.

# *** IR Dump Before Control Flow Optimizer ***:
# Machine code for function matclr: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=4, align=4, at location [SP-4]
  fi#1: size=4, align=8, at location [SP-8]
Function Live Ins: %R0, %R1

BB#0: 
    Live Ins: %R0 %R1
	%SP<def,tied2> = STRi64_pmd %LR, %SP<tied0>, -8; flags: FrameSetup
	%FP<def> = ADDri_r32 %SP, 8, %STATUS<imp-def>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	GID %CONFIG<imp-def>
	%R2<def> = MOVFS32_core %CONFIG<kill>, %D1<imp-def>
	%R3<def> = COPY %R2, %D1<imp-use,kill>, %D1<imp-def>
	%R3<def,tied1> = MOVTi32ri %R3<tied0>, 72, %D1<imp-use,kill>, %D1<imp-def>
	STRi64 %D1, %FP, -8; mem:ST4[FixedStack1] ST4[FixedStack0]
	%CONFIG<def> = MOVTS32_core %R3, %D1<imp-use,kill>
	GIE %CONFIG<imp-use,kill>
    Successors according to CFG: BB#1(?%)

BB#1: derived from LLVM BB %entry
    Live Ins: %R0 %R1
    Predecessors according to CFG: BB#0
	%R1<def> = IMULrr_r32 %R1<kill>, %R1, %STATUS<imp-def,dead>
	%R2<def,dead> = CMPri_r32 %R1, 0, %STATUS<imp-def>
	BCC <BB#4>, 0, %STATUS<imp-use>
	BNONE32 <BB#2>, %STATUS<imp-use>
    Successors according to CFG: BB#4(0x30000000 / 0x80000000 = 37.50%) BB#2(0x50000000 / 0x80000000 = 62.50%)

BB#2: derived from LLVM BB %for.body.preheader
    Live Ins: %R0 %R1
    Predecessors according to CFG: BB#1
	%R2<def> = MOVi32ri 0
	%R3<def> = COPY %R2
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %for.body
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#2 BB#3
	%IP<def> = ADDri_r32 %R0, 4, %STATUS<imp-def,dead>
	STRi32_r32 %R2, %R0<kill>, 0; mem:Volatile ST4[%lsr.iv](tbaa=!2)
	%R3<def> = ADDri_r32 %R3<kill>, 1, %STATUS<imp-def,dead>
	%R0<def,dead> = CMPrr_r32 %R3, %R1, %STATUS<imp-def>
	%R0<def> = COPY %IP<kill>
	BCC <BB#3>, 8, %STATUS<imp-use>
	BNONE32 <BB#4>, %STATUS<imp-use>
    Successors according to CFG: BB#3(0x7c000000 / 0x80000000 = 96.88%) BB#4(0x04000000 / 0x80000000 = 3.12%)

BB#4: derived from LLVM BB %for.end
    Predecessors according to CFG: BB#1 BB#3
	%R0<def> = LDRi32_r32 %FP, -4; mem:LD4[FixedStack0]
	GID
	%CONFIG<def> = MOVTS32_core %R0<kill>
	GIE %CONFIG<imp-use,kill>
	%LR<def> = LDRi64 %SP, 8; flags: FrameSetup
	%SP<def> = ADDri_r32 %SP, 8, %STATUS<imp-def>
	RTS

# End machine code for function matclr.


<----------------->
Analyzing block 0
BB#0: 
    Live Ins: %R0 %R1
	%SP<def,tied2> = STRi64_pmd %LR, %SP<tied0>, -8; flags: FrameSetup
	%FP<def> = ADDri_r32 %SP, 8, %STATUS<imp-def>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	GID %CONFIG<imp-def>
	%R2<def> = MOVFS32_core %CONFIG<kill>, %D1<imp-def>
	%R3<def> = COPY %R2, %D1<imp-use,kill>, %D1<imp-def>
	%R3<def,tied1> = MOVTi32ri %R3<tied0>, 72, %D1<imp-use,kill>, %D1<imp-def>
	STRi64 %D1, %FP, -8; mem:ST4[FixedStack1] ST4[FixedStack0]
	%CONFIG<def> = MOVTS32_core %R3, %D1<imp-use,kill>
	GIE %CONFIG<imp-use,kill>
    Successors according to CFG: BB#1(?%)

<----------------->
Analyzing block 1
BB#1: derived from LLVM BB %entry
    Live Ins: %R0 %R1
    Predecessors according to CFG: BB#0
	%R1<def> = IMULrr_r32 %R1<kill>, %R1, %STATUS<imp-def,dead>
	%R2<def,dead> = CMPri_r32 %R1, 0, %STATUS<imp-def>
	BCC <BB#4>, 0, %STATUS<imp-use>
	BNONE32 <BB#2>, %STATUS<imp-use>
    Successors according to CFG: BB#4(0x30000000 / 0x80000000 = 37.50%) BB#2(0x50000000 / 0x80000000 = 62.50%)

<----------------->
Erasing the jump to successor block 1
# Machine code for function matclr: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=4, align=4, at location [SP-4]
  fi#1: size=4, align=8, at location [SP-8]
Function Live Ins: %R0, %R1

BB#0: 
    Live Ins: %R0 %R1
	%SP<def,tied2> = STRi64_pmd %LR, %SP<tied0>, -8; flags: FrameSetup
	%FP<def> = ADDri_r32 %SP, 8, %STATUS<imp-def>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	GID %CONFIG<imp-def>
	%R2<def> = MOVFS32_core %CONFIG<kill>, %D1<imp-def>
	%R3<def> = COPY %R2, %D1<imp-use,kill>, %D1<imp-def>
	%R3<def,tied1> = MOVTi32ri %R3<tied0>, 72, %D1<imp-use,kill>, %D1<imp-def>
	STRi64 %D1, %FP, -8; mem:ST4[FixedStack1] ST4[FixedStack0]
	%CONFIG<def> = MOVTS32_core %R3, %D1<imp-use,kill>
	GIE %CONFIG<imp-use,kill>
    Successors according to CFG: BB#1(?%)

BB#1: derived from LLVM BB %entry
    Live Ins: %R0 %R1
    Predecessors according to CFG: BB#0
	%R1<def> = IMULrr_r32 %R1<kill>, %R1, %STATUS<imp-def,dead>
	%R2<def,dead> = CMPri_r32 %R1, 0, %STATUS<imp-def>
	BCC <BB#4>, 0, %STATUS<imp-use>
    Successors according to CFG: BB#4(0x30000000 / 0x80000000 = 37.50%) BB#2(0x50000000 / 0x80000000 = 62.50%)

BB#2: derived from LLVM BB %for.body.preheader
    Live Ins: %R0 %R1
    Predecessors according to CFG: BB#1
	%R2<def> = MOVi32ri 0
	%R3<def> = COPY %R2
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %for.body
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#2 BB#3
	%IP<def> = ADDri_r32 %R0, 4, %STATUS<imp-def,dead>
	STRi32_r32 %R2, %R0<kill>, 0; mem:Volatile ST4[%lsr.iv](tbaa=!2)
	%R3<def> = ADDri_r32 %R3<kill>, 1, %STATUS<imp-def,dead>
	%R0<def,dead> = CMPrr_r32 %R3, %R1, %STATUS<imp-def>
	%R0<def> = COPY %IP<kill>
	BCC <BB#3>, 8, %STATUS<imp-use>
	BNONE32 <BB#4>, %STATUS<imp-use>
    Successors according to CFG: BB#3(0x7c000000 / 0x80000000 = 96.88%) BB#4(0x04000000 / 0x80000000 = 3.12%)

BB#4: derived from LLVM BB %for.end
    Predecessors according to CFG: BB#1 BB#3
	%R0<def> = LDRi32_r32 %FP, -4; mem:LD4[FixedStack0]
	GID
	%CONFIG<def> = MOVTS32_core %R0<kill>
	GIE %CONFIG<imp-use,kill>
	%LR<def> = LDRi64 %SP, 8; flags: FrameSetup
	%SP<def> = ADDri_r32 %SP, 8, %STATUS<imp-def>
	RTS

# End machine code for function matclr.


<----------------->
Analyzing block 2
BB#2: derived from LLVM BB %for.body.preheader
    Live Ins: %R0 %R1
    Predecessors according to CFG: BB#1
	%R2<def> = MOVi32ri 0
	%R3<def> = COPY %R2
    Successors according to CFG: BB#3(?%)

<----------------->
Analyzing block 3
BB#3: derived from LLVM BB %for.body
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#2 BB#3
	%IP<def> = ADDri_r32 %R0, 4, %STATUS<imp-def,dead>
	STRi32_r32 %R2, %R0<kill>, 0; mem:Volatile ST4[%lsr.iv](tbaa=!2)
	%R3<def> = ADDri_r32 %R3<kill>, 1, %STATUS<imp-def,dead>
	%R0<def,dead> = CMPrr_r32 %R3, %R1, %STATUS<imp-def>
	%R0<def> = COPY %IP<kill>
	BCC <BB#3>, 8, %STATUS<imp-use>
	BNONE32 <BB#4>, %STATUS<imp-use>
    Successors according to CFG: BB#3(0x7c000000 / 0x80000000 = 96.88%) BB#4(0x04000000 / 0x80000000 = 3.12%)

<----------------->
Erasing the jump to successor block 3
# Machine code for function matclr: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=4, align=4, at location [SP-4]
  fi#1: size=4, align=8, at location [SP-8]
Function Live Ins: %R0, %R1

BB#0: 
    Live Ins: %R0 %R1
	%SP<def,tied2> = STRi64_pmd %LR, %SP<tied0>, -8; flags: FrameSetup
	%FP<def> = ADDri_r32 %SP, 8, %STATUS<imp-def>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	GID %CONFIG<imp-def>
	%R2<def> = MOVFS32_core %CONFIG<kill>, %D1<imp-def>
	%R3<def> = COPY %R2, %D1<imp-use,kill>, %D1<imp-def>
	%R3<def,tied1> = MOVTi32ri %R3<tied0>, 72, %D1<imp-use,kill>, %D1<imp-def>
	STRi64 %D1, %FP, -8; mem:ST4[FixedStack1] ST4[FixedStack0]
	%CONFIG<def> = MOVTS32_core %R3, %D1<imp-use,kill>
	GIE %CONFIG<imp-use,kill>
    Successors according to CFG: BB#1(?%)

BB#1: derived from LLVM BB %entry
    Live Ins: %R0 %R1
    Predecessors according to CFG: BB#0
	%R1<def> = IMULrr_r32 %R1<kill>, %R1, %STATUS<imp-def,dead>
	%R2<def,dead> = CMPri_r32 %R1, 0, %STATUS<imp-def>
	BCC <BB#4>, 0, %STATUS<imp-use>
    Successors according to CFG: BB#4(0x30000000 / 0x80000000 = 37.50%) BB#2(0x50000000 / 0x80000000 = 62.50%)

BB#2: derived from LLVM BB %for.body.preheader
    Live Ins: %R0 %R1
    Predecessors according to CFG: BB#1
	%R2<def> = MOVi32ri 0
	%R3<def> = COPY %R2
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %for.body
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#2 BB#3
	%IP<def> = ADDri_r32 %R0, 4, %STATUS<imp-def,dead>
	STRi32_r32 %R2, %R0<kill>, 0; mem:Volatile ST4[%lsr.iv](tbaa=!2)
	%R3<def> = ADDri_r32 %R3<kill>, 1, %STATUS<imp-def,dead>
	%R0<def,dead> = CMPrr_r32 %R3, %R1, %STATUS<imp-def>
	%R0<def> = COPY %IP<kill>
	BCC <BB#3>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#3(0x7c000000 / 0x80000000 = 96.88%) BB#4(0x04000000 / 0x80000000 = 3.12%)

BB#4: derived from LLVM BB %for.end
    Predecessors according to CFG: BB#1 BB#3
	%R0<def> = LDRi32_r32 %FP, -4; mem:LD4[FixedStack0]
	GID
	%CONFIG<def> = MOVTS32_core %R0<kill>
	GIE %CONFIG<imp-use,kill>
	%LR<def> = LDRi64 %SP, 8; flags: FrameSetup
	%SP<def> = ADDri_r32 %SP, 8, %STATUS<imp-def>
	RTS

# End machine code for function matclr.


<----------------->
Analyzing block 4
BB#4: derived from LLVM BB %for.end
    Predecessors according to CFG: BB#1 BB#3
	%R0<def> = LDRi32_r32 %FP, -4; mem:LD4[FixedStack0]
	GID
	%CONFIG<def> = MOVTS32_core %R0<kill>
	GIE %CONFIG<imp-use,kill>
	%LR<def> = LDRi64 %SP, 8; flags: FrameSetup
	%SP<def> = ADDri_r32 %SP, 8, %STATUS<imp-def>
	RTS

<----------------->
Analyzing block 2
BB#2: derived from LLVM BB %for.body.preheader
    Live Ins: %R0 %R1
    Predecessors according to CFG: BB#1
	%R2<def> = MOVi32ri 0
	%R3<def> = COPY %R2
    Successors according to CFG: BB#3(?%)

<----------------->
Analyzing block 1
BB#1: derived from LLVM BB %entry
    Live Ins: %R0 %R1
    Predecessors according to CFG: BB#0
	%R1<def> = IMULrr_r32 %R1<kill>, %R1, %STATUS<imp-def,dead>
	%R2<def,dead> = CMPri_r32 %R1, 0, %STATUS<imp-def>
	BCC <BB#4>, 0, %STATUS<imp-use>
    Successors according to CFG: BB#4(0x30000000 / 0x80000000 = 37.50%) BB#2(0x50000000 / 0x80000000 = 62.50%)

<----------------->
Removing branches out of BB#1
# Machine code for function matclr: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=4, align=4, at location [SP-4]
  fi#1: size=4, align=8, at location [SP-8]
Function Live Ins: %R0, %R1

BB#0: 
    Live Ins: %R0 %R1
	%SP<def,tied2> = STRi64_pmd %LR, %SP<tied0>, -8; flags: FrameSetup
	%FP<def> = ADDri_r32 %SP, 8, %STATUS<imp-def>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	GID %CONFIG<imp-def>
	%R2<def> = MOVFS32_core %CONFIG<kill>, %D1<imp-def>
	%R3<def> = COPY %R2, %D1<imp-use,kill>, %D1<imp-def>
	%R3<def,tied1> = MOVTi32ri %R3<tied0>, 72, %D1<imp-use,kill>, %D1<imp-def>
	STRi64 %D1, %FP, -8; mem:ST4[FixedStack1] ST4[FixedStack0]
	%CONFIG<def> = MOVTS32_core %R3, %D1<imp-use,kill>
	GIE %CONFIG<imp-use,kill>
    Successors according to CFG: BB#1(?%)

BB#1: derived from LLVM BB %entry
    Live Ins: %R0 %R1
    Predecessors according to CFG: BB#0
	%R1<def> = IMULrr_r32 %R1<kill>, %R1, %STATUS<imp-def,dead>
	%R2<def,dead> = CMPri_r32 %R1, 0, %STATUS<imp-def>
    Successors according to CFG: BB#4(0x30000000 / 0x80000000 = 37.50%) BB#2(0x50000000 / 0x80000000 = 62.50%)

BB#2: derived from LLVM BB %for.body.preheader
    Live Ins: %R0 %R1
    Predecessors according to CFG: BB#1
	%R2<def> = MOVi32ri 0
	%R3<def> = COPY %R2
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %for.body
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#2 BB#3
	%IP<def> = ADDri_r32 %R0, 4, %STATUS<imp-def,dead>
	STRi32_r32 %R2, %R0<kill>, 0; mem:Volatile ST4[%lsr.iv](tbaa=!2)
	%R3<def> = ADDri_r32 %R3<kill>, 1, %STATUS<imp-def,dead>
	%R0<def,dead> = CMPrr_r32 %R3, %R1, %STATUS<imp-def>
	%R0<def> = COPY %IP<kill>
	BCC <BB#3>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#3(0x7c000000 / 0x80000000 = 96.88%) BB#4(0x04000000 / 0x80000000 = 3.12%)

BB#4: derived from LLVM BB %for.end
    Predecessors according to CFG: BB#1 BB#3
	%R0<def> = LDRi32_r32 %FP, -4; mem:LD4[FixedStack0]
	GID
	%CONFIG<def> = MOVTS32_core %R0<kill>
	GIE %CONFIG<imp-use,kill>
	%LR<def> = LDRi64 %SP, 8; flags: FrameSetup
	%SP<def> = ADDri_r32 %SP, 8, %STATUS<imp-def>
	RTS

# End machine code for function matclr.


<----------------->
Inserting branch into BB#1
# Machine code for function matclr: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=4, align=4, at location [SP-4]
  fi#1: size=4, align=8, at location [SP-8]
Function Live Ins: %R0, %R1

BB#0: 
    Live Ins: %R0 %R1
	%SP<def,tied2> = STRi64_pmd %LR, %SP<tied0>, -8; flags: FrameSetup
	%FP<def> = ADDri_r32 %SP, 8, %STATUS<imp-def>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	GID %CONFIG<imp-def>
	%R2<def> = MOVFS32_core %CONFIG<kill>, %D1<imp-def>
	%R3<def> = COPY %R2, %D1<imp-use,kill>, %D1<imp-def>
	%R3<def,tied1> = MOVTi32ri %R3<tied0>, 72, %D1<imp-use,kill>, %D1<imp-def>
	STRi64 %D1, %FP, -8; mem:ST4[FixedStack1] ST4[FixedStack0]
	%CONFIG<def> = MOVTS32_core %R3, %D1<imp-use,kill>
	GIE %CONFIG<imp-use,kill>
    Successors according to CFG: BB#1(?%)

BB#1: derived from LLVM BB %entry
    Live Ins: %R0 %R1
    Predecessors according to CFG: BB#0
	%R1<def> = IMULrr_r32 %R1<kill>, %R1, %STATUS<imp-def,dead>
	%R2<def,dead> = CMPri_r32 %R1, 0, %STATUS<imp-def>
	BCC <BB#2>, 1, %STATUS<imp-use>
    Successors according to CFG: BB#4(0x30000000 / 0x80000000 = 37.50%) BB#2(0x50000000 / 0x80000000 = 62.50%)

BB#2: derived from LLVM BB %for.body.preheader
    Live Ins: %R0 %R1
    Predecessors according to CFG: BB#1
	%R2<def> = MOVi32ri 0
	%R3<def> = COPY %R2
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %for.body
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#2 BB#3
	%IP<def> = ADDri_r32 %R0, 4, %STATUS<imp-def,dead>
	STRi32_r32 %R2, %R0<kill>, 0; mem:Volatile ST4[%lsr.iv](tbaa=!2)
	%R3<def> = ADDri_r32 %R3<kill>, 1, %STATUS<imp-def,dead>
	%R0<def,dead> = CMPrr_r32 %R3, %R1, %STATUS<imp-def>
	%R0<def> = COPY %IP<kill>
	BCC <BB#3>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#3(0x7c000000 / 0x80000000 = 96.88%) BB#4(0x04000000 / 0x80000000 = 3.12%)

BB#4: derived from LLVM BB %for.end
    Predecessors according to CFG: BB#1 BB#3
	%R0<def> = LDRi32_r32 %FP, -4; mem:LD4[FixedStack0]
	GID
	%CONFIG<def> = MOVTS32_core %R0<kill>
	GIE %CONFIG<imp-use,kill>
	%LR<def> = LDRi64 %SP, 8; flags: FrameSetup
	%SP<def> = ADDri_r32 %SP, 8, %STATUS<imp-def>
	RTS

# End machine code for function matclr.


<----------------->
Analyzing block 3
BB#3: derived from LLVM BB %for.body
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#2 BB#3
	%IP<def> = ADDri_r32 %R0, 4, %STATUS<imp-def,dead>
	STRi32_r32 %R2, %R0<kill>, 0; mem:Volatile ST4[%lsr.iv](tbaa=!2)
	%R3<def> = ADDri_r32 %R3<kill>, 1, %STATUS<imp-def,dead>
	%R0<def,dead> = CMPrr_r32 %R3, %R1, %STATUS<imp-def>
	%R0<def> = COPY %IP<kill>
	BCC <BB#3>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#3(0x7c000000 / 0x80000000 = 96.88%) BB#4(0x04000000 / 0x80000000 = 3.12%)

TryTailMergeBlocks: BB#1, BB#3
  with successor BB#4
  which has fall-through from BB#3
Looking for common tails of at least 3 instructions

<----------------->
Analyzing block 1
BB#1: derived from LLVM BB %entry
    Live Ins: %R0 %R1
    Predecessors according to CFG: BB#0
	%R1<def> = IMULrr_r32 %R1<kill>, %R1, %STATUS<imp-def,dead>
	%R2<def,dead> = CMPri_r32 %R1, 0, %STATUS<imp-def>
	BCC <BB#2>, 1, %STATUS<imp-use>
    Successors according to CFG: BB#4(0x30000000 / 0x80000000 = 37.50%) BB#2(0x50000000 / 0x80000000 = 62.50%)

<----------------->
Removing branches out of BB#1
# Machine code for function matclr: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=4, align=4, at location [SP-4]
  fi#1: size=4, align=8, at location [SP-8]
Function Live Ins: %R0, %R1

BB#0: 
    Live Ins: %R0 %R1
	%SP<def,tied2> = STRi64_pmd %LR, %SP<tied0>, -8; flags: FrameSetup
	%FP<def> = ADDri_r32 %SP, 8, %STATUS<imp-def>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	GID %CONFIG<imp-def>
	%R2<def> = MOVFS32_core %CONFIG<kill>, %D1<imp-def>
	%R3<def> = COPY %R2, %D1<imp-use,kill>, %D1<imp-def>
	%R3<def,tied1> = MOVTi32ri %R3<tied0>, 72, %D1<imp-use,kill>, %D1<imp-def>
	STRi64 %D1, %FP, -8; mem:ST4[FixedStack1] ST4[FixedStack0]
	%CONFIG<def> = MOVTS32_core %R3, %D1<imp-use,kill>
	GIE %CONFIG<imp-use,kill>
    Successors according to CFG: BB#1(?%)

BB#1: derived from LLVM BB %entry
    Live Ins: %R0 %R1
    Predecessors according to CFG: BB#0
	%R1<def> = IMULrr_r32 %R1<kill>, %R1, %STATUS<imp-def,dead>
	%R2<def,dead> = CMPri_r32 %R1, 0, %STATUS<imp-def>
    Successors according to CFG: BB#4(0x30000000 / 0x80000000 = 37.50%) BB#2(0x50000000 / 0x80000000 = 62.50%)

BB#2: derived from LLVM BB %for.body.preheader
    Live Ins: %R0 %R1
    Predecessors according to CFG: BB#1
	%R2<def> = MOVi32ri 0
	%R3<def> = COPY %R2
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %for.body
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#2 BB#3
	%IP<def> = ADDri_r32 %R0, 4, %STATUS<imp-def,dead>
	STRi32_r32 %R2, %R0<kill>, 0; mem:Volatile ST4[%lsr.iv](tbaa=!2)
	%R3<def> = ADDri_r32 %R3<kill>, 1, %STATUS<imp-def,dead>
	%R0<def,dead> = CMPrr_r32 %R3, %R1, %STATUS<imp-def>
	%R0<def> = COPY %IP<kill>
	BCC <BB#3>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#3(0x7c000000 / 0x80000000 = 96.88%) BB#4(0x04000000 / 0x80000000 = 3.12%)

BB#4: derived from LLVM BB %for.end
    Predecessors according to CFG: BB#1 BB#3
	%R0<def> = LDRi32_r32 %FP, -4; mem:LD4[FixedStack0]
	GID
	%CONFIG<def> = MOVTS32_core %R0<kill>
	GIE %CONFIG<imp-use,kill>
	%LR<def> = LDRi64 %SP, 8; flags: FrameSetup
	%SP<def> = ADDri_r32 %SP, 8, %STATUS<imp-def>
	RTS

# End machine code for function matclr.


<----------------->
Inserting branch into BB#1
# Machine code for function matclr: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=4, align=4, at location [SP-4]
  fi#1: size=4, align=8, at location [SP-8]
Function Live Ins: %R0, %R1

BB#0: 
    Live Ins: %R0 %R1
	%SP<def,tied2> = STRi64_pmd %LR, %SP<tied0>, -8; flags: FrameSetup
	%FP<def> = ADDri_r32 %SP, 8, %STATUS<imp-def>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	GID %CONFIG<imp-def>
	%R2<def> = MOVFS32_core %CONFIG<kill>, %D1<imp-def>
	%R3<def> = COPY %R2, %D1<imp-use,kill>, %D1<imp-def>
	%R3<def,tied1> = MOVTi32ri %R3<tied0>, 72, %D1<imp-use,kill>, %D1<imp-def>
	STRi64 %D1, %FP, -8; mem:ST4[FixedStack1] ST4[FixedStack0]
	%CONFIG<def> = MOVTS32_core %R3, %D1<imp-use,kill>
	GIE %CONFIG<imp-use,kill>
    Successors according to CFG: BB#1(?%)

BB#1: derived from LLVM BB %entry
    Live Ins: %R0 %R1
    Predecessors according to CFG: BB#0
	%R1<def> = IMULrr_r32 %R1<kill>, %R1, %STATUS<imp-def,dead>
	%R2<def,dead> = CMPri_r32 %R1, 0, %STATUS<imp-def>
	BCC <BB#4>, 0, %STATUS<imp-use>
    Successors according to CFG: BB#4(0x30000000 / 0x80000000 = 37.50%) BB#2(0x50000000 / 0x80000000 = 62.50%)

BB#2: derived from LLVM BB %for.body.preheader
    Live Ins: %R0 %R1
    Predecessors according to CFG: BB#1
	%R2<def> = MOVi32ri 0
	%R3<def> = COPY %R2
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %for.body
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#2 BB#3
	%IP<def> = ADDri_r32 %R0, 4, %STATUS<imp-def,dead>
	STRi32_r32 %R2, %R0<kill>, 0; mem:Volatile ST4[%lsr.iv](tbaa=!2)
	%R3<def> = ADDri_r32 %R3<kill>, 1, %STATUS<imp-def,dead>
	%R0<def,dead> = CMPrr_r32 %R3, %R1, %STATUS<imp-def>
	%R0<def> = COPY %IP<kill>
	BCC <BB#3>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#3(0x7c000000 / 0x80000000 = 96.88%) BB#4(0x04000000 / 0x80000000 = 3.12%)

BB#4: derived from LLVM BB %for.end
    Predecessors according to CFG: BB#1 BB#3
	%R0<def> = LDRi32_r32 %FP, -4; mem:LD4[FixedStack0]
	GID
	%CONFIG<def> = MOVTS32_core %R0<kill>
	GIE %CONFIG<imp-use,kill>
	%LR<def> = LDRi64 %SP, 8; flags: FrameSetup
	%SP<def> = ADDri_r32 %SP, 8, %STATUS<imp-def>
	RTS

# End machine code for function matclr.


<----------------->
Analyzing block 0
BB#0: 
    Live Ins: %R0 %R1
	%SP<def,tied2> = STRi64_pmd %LR, %SP<tied0>, -8; flags: FrameSetup
	%FP<def> = ADDri_r32 %SP, 8, %STATUS<imp-def>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	GID %CONFIG<imp-def>
	%R2<def> = MOVFS32_core %CONFIG<kill>, %D1<imp-def>
	%R3<def> = COPY %R2, %D1<imp-use,kill>, %D1<imp-def>
	%R3<def,tied1> = MOVTi32ri %R3<tied0>, 72, %D1<imp-use,kill>, %D1<imp-def>
	STRi64 %D1, %FP, -8; mem:ST4[FixedStack1] ST4[FixedStack0]
	%CONFIG<def> = MOVTS32_core %R3, %D1<imp-use,kill>
	GIE %CONFIG<imp-use,kill>
    Successors according to CFG: BB#1(?%)

<----------------->
Analyzing block 1
BB#1: derived from LLVM BB %entry
    Live Ins: %R0 %R1
    Predecessors according to CFG: BB#0
	%R1<def> = IMULrr_r32 %R1<kill>, %R1, %STATUS<imp-def,dead>
	%R2<def,dead> = CMPri_r32 %R1, 0, %STATUS<imp-def>
	BCC <BB#4>, 0, %STATUS<imp-use>
    Successors according to CFG: BB#4(0x30000000 / 0x80000000 = 37.50%) BB#2(0x50000000 / 0x80000000 = 62.50%)

<----------------->
Analyzing block 0
BB#0: 
    Live Ins: %R0 %R1
	%SP<def,tied2> = STRi64_pmd %LR, %SP<tied0>, -8; flags: FrameSetup
	%FP<def> = ADDri_r32 %SP, 8, %STATUS<imp-def>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	GID %CONFIG<imp-def>
	%R2<def> = MOVFS32_core %CONFIG<kill>, %D1<imp-def>
	%R3<def> = COPY %R2, %D1<imp-use,kill>, %D1<imp-def>
	%R3<def,tied1> = MOVTi32ri %R3<tied0>, 72, %D1<imp-use,kill>, %D1<imp-def>
	STRi64 %D1, %FP, -8; mem:ST4[FixedStack1] ST4[FixedStack0]
	%CONFIG<def> = MOVTS32_core %R3, %D1<imp-use,kill>
	GIE %CONFIG<imp-use,kill>
    Successors according to CFG: BB#1(?%)

<----------------->
Analyzing block 1
BB#1: derived from LLVM BB %entry
    Live Ins: %R0 %R1
    Predecessors according to CFG: BB#0
	%R1<def> = IMULrr_r32 %R1<kill>, %R1, %STATUS<imp-def,dead>
	%R2<def,dead> = CMPri_r32 %R1, 0, %STATUS<imp-def>
	BCC <BB#4>, 0, %STATUS<imp-use>
    Successors according to CFG: BB#4(0x30000000 / 0x80000000 = 37.50%) BB#2(0x50000000 / 0x80000000 = 62.50%)

<----------------->
Analyzing block 0
BB#0: 
    Live Ins: %R0 %R1
	%SP<def,tied2> = STRi64_pmd %LR, %SP<tied0>, -8; flags: FrameSetup
	%FP<def> = ADDri_r32 %SP, 8, %STATUS<imp-def>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	GID %CONFIG<imp-def>
	%R2<def> = MOVFS32_core %CONFIG<kill>, %D1<imp-def>
	%R3<def> = COPY %R2, %D1<imp-use,kill>, %D1<imp-def>
	%R3<def,tied1> = MOVTi32ri %R3<tied0>, 72, %D1<imp-use,kill>, %D1<imp-def>
	STRi64 %D1, %FP, -8; mem:ST4[FixedStack1] ST4[FixedStack0]
	%CONFIG<def> = MOVTS32_core %R3, %D1<imp-use,kill>
	GIE %CONFIG<imp-use,kill>
    Successors according to CFG: BB#1(?%)

<----------------->
Analyzing block 0
BB#0: 
    Live Ins: %R0 %R1
	%SP<def,tied2> = STRi64_pmd %LR, %SP<tied0>, -8; flags: FrameSetup
	%FP<def> = ADDri_r32 %SP, 8, %STATUS<imp-def>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	GID %CONFIG<imp-def>
	%R2<def> = MOVFS32_core %CONFIG<kill>, %D1<imp-def>
	%R3<def> = COPY %R2, %D1<imp-use,kill>, %D1<imp-def>
	%R3<def,tied1> = MOVTi32ri %R3<tied0>, 72, %D1<imp-use,kill>, %D1<imp-def>
	STRi64 %D1, %FP, -8; mem:ST4[FixedStack1] ST4[FixedStack0]
	%CONFIG<def> = MOVTS32_core %R3, %D1<imp-use,kill>
	GIE %CONFIG<imp-use,kill>
    Successors according to CFG: BB#1(?%)

<----------------->
Analyzing block 1
BB#1: derived from LLVM BB %entry
    Live Ins: %R0 %R1
    Predecessors according to CFG: BB#0
	%R1<def> = IMULrr_r32 %R1<kill>, %R1, %STATUS<imp-def,dead>
	%R2<def,dead> = CMPri_r32 %R1, 0, %STATUS<imp-def>
	BCC <BB#4>, 0, %STATUS<imp-use>
    Successors according to CFG: BB#4(0x30000000 / 0x80000000 = 37.50%) BB#2(0x50000000 / 0x80000000 = 62.50%)

<----------------->
Analyzing block 2
BB#2: derived from LLVM BB %for.body.preheader
    Live Ins: %R0 %R1
    Predecessors according to CFG: BB#1
	%R2<def> = MOVi32ri 0
	%R3<def> = COPY %R2
    Successors according to CFG: BB#3(?%)

<----------------->
Analyzing block 1
BB#1: derived from LLVM BB %entry
    Live Ins: %R0 %R1
    Predecessors according to CFG: BB#0
	%R1<def> = IMULrr_r32 %R1<kill>, %R1, %STATUS<imp-def,dead>
	%R2<def,dead> = CMPri_r32 %R1, 0, %STATUS<imp-def>
	BCC <BB#4>, 0, %STATUS<imp-use>
    Successors according to CFG: BB#4(0x30000000 / 0x80000000 = 37.50%) BB#2(0x50000000 / 0x80000000 = 62.50%)

<----------------->
Analyzing block 2
BB#2: derived from LLVM BB %for.body.preheader
    Live Ins: %R0 %R1
    Predecessors according to CFG: BB#1
	%R2<def> = MOVi32ri 0
	%R3<def> = COPY %R2
    Successors according to CFG: BB#3(?%)

<----------------->
Analyzing block 3
BB#3: derived from LLVM BB %for.body
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#2 BB#3
	%IP<def> = ADDri_r32 %R0, 4, %STATUS<imp-def,dead>
	STRi32_r32 %R2, %R0<kill>, 0; mem:Volatile ST4[%lsr.iv](tbaa=!2)
	%R3<def> = ADDri_r32 %R3<kill>, 1, %STATUS<imp-def,dead>
	%R0<def,dead> = CMPrr_r32 %R3, %R1, %STATUS<imp-def>
	%R0<def> = COPY %IP<kill>
	BCC <BB#3>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#3(0x7c000000 / 0x80000000 = 96.88%) BB#4(0x04000000 / 0x80000000 = 3.12%)

<----------------->
Analyzing block 2
BB#2: derived from LLVM BB %for.body.preheader
    Live Ins: %R0 %R1
    Predecessors according to CFG: BB#1
	%R2<def> = MOVi32ri 0
	%R3<def> = COPY %R2
    Successors according to CFG: BB#3(?%)

<----------------->
Analyzing block 3
BB#3: derived from LLVM BB %for.body
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#2 BB#3
	%IP<def> = ADDri_r32 %R0, 4, %STATUS<imp-def,dead>
	STRi32_r32 %R2, %R0<kill>, 0; mem:Volatile ST4[%lsr.iv](tbaa=!2)
	%R3<def> = ADDri_r32 %R3<kill>, 1, %STATUS<imp-def,dead>
	%R0<def,dead> = CMPrr_r32 %R3, %R1, %STATUS<imp-def>
	%R0<def> = COPY %IP<kill>
	BCC <BB#3>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#3(0x7c000000 / 0x80000000 = 96.88%) BB#4(0x04000000 / 0x80000000 = 3.12%)

<----------------->
Analyzing block 4
BB#4: derived from LLVM BB %for.end
    Predecessors according to CFG: BB#1 BB#3
	%R0<def> = LDRi32_r32 %FP, -4; mem:LD4[FixedStack0]
	GID
	%CONFIG<def> = MOVTS32_core %R0<kill>
	GIE %CONFIG<imp-use,kill>
	%LR<def> = LDRi64 %SP, 8; flags: FrameSetup
	%SP<def> = ADDri_r32 %SP, 8, %STATUS<imp-def>
	RTS

<----------------->
Analyzing block 3
BB#3: derived from LLVM BB %for.body
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#2 BB#3
	%IP<def> = ADDri_r32 %R0, 4, %STATUS<imp-def,dead>
	STRi32_r32 %R2, %R0<kill>, 0; mem:Volatile ST4[%lsr.iv](tbaa=!2)
	%R3<def> = ADDri_r32 %R3<kill>, 1, %STATUS<imp-def,dead>
	%R0<def,dead> = CMPrr_r32 %R3, %R1, %STATUS<imp-def>
	%R0<def> = COPY %IP<kill>
	BCC <BB#3>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#3(0x7c000000 / 0x80000000 = 96.88%) BB#4(0x04000000 / 0x80000000 = 3.12%)

<----------------->
Analyzing block 0
BB#0: 
    Live Ins: %R0 %R1
	%SP<def,tied2> = STRi64_pmd %LR, %SP<tied0>, -8; flags: FrameSetup
	%FP<def> = ADDri_r32 %SP, 8, %STATUS<imp-def>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	GID %CONFIG<imp-def>
	%R2<def> = MOVFS32_core %CONFIG<kill>, %D1<imp-def>
	%R3<def> = COPY %R2, %D1<imp-use,kill>, %D1<imp-def>
	%R3<def,tied1> = MOVTi32ri %R3<tied0>, 72, %D1<imp-use,kill>, %D1<imp-def>
	STRi64 %D1, %FP, -8; mem:ST4[FixedStack1] ST4[FixedStack0]
	%CONFIG<def> = MOVTS32_core %R3, %D1<imp-use,kill>
	GIE %CONFIG<imp-use,kill>
    Successors according to CFG: BB#1(?%)

<----------------->
Analyzing block 1
BB#1: derived from LLVM BB %entry
    Live Ins: %R0 %R1
    Predecessors according to CFG: BB#0
	%R1<def> = IMULrr_r32 %R1<kill>, %R1, %STATUS<imp-def,dead>
	%R2<def,dead> = CMPri_r32 %R1, 0, %STATUS<imp-def>
	BCC <BB#4>, 0, %STATUS<imp-use>
    Successors according to CFG: BB#4(0x30000000 / 0x80000000 = 37.50%) BB#2(0x50000000 / 0x80000000 = 62.50%)

<----------------->
Analyzing block 2
BB#2: derived from LLVM BB %for.body.preheader
    Live Ins: %R0 %R1
    Predecessors according to CFG: BB#1
	%R2<def> = MOVi32ri 0
	%R3<def> = COPY %R2
    Successors according to CFG: BB#3(?%)

<----------------->
Analyzing block 3
BB#3: derived from LLVM BB %for.body
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#2 BB#3
	%IP<def> = ADDri_r32 %R0, 4, %STATUS<imp-def,dead>
	STRi32_r32 %R2, %R0<kill>, 0; mem:Volatile ST4[%lsr.iv](tbaa=!2)
	%R3<def> = ADDri_r32 %R3<kill>, 1, %STATUS<imp-def,dead>
	%R0<def,dead> = CMPrr_r32 %R3, %R1, %STATUS<imp-def>
	%R0<def> = COPY %IP<kill>
	BCC <BB#3>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#3(0x7c000000 / 0x80000000 = 96.88%) BB#4(0x04000000 / 0x80000000 = 3.12%)

<----------------->
Analyzing block 4
BB#4: derived from LLVM BB %for.end
    Predecessors according to CFG: BB#1 BB#3
	%R0<def> = LDRi32_r32 %FP, -4; mem:LD4[FixedStack0]
	GID
	%CONFIG<def> = MOVTS32_core %R0<kill>
	GIE %CONFIG<imp-use,kill>
	%LR<def> = LDRi64 %SP, 8; flags: FrameSetup
	%SP<def> = ADDri_r32 %SP, 8, %STATUS<imp-def>
	RTS
# *** IR Dump After Control Flow Optimizer ***:
# Machine code for function matclr: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=4, align=4, at location [SP-4]
  fi#1: size=4, align=8, at location [SP-8]
Function Live Ins: %R0, %R1

BB#0: 
    Live Ins: %R0 %R1
	%SP<def,tied2> = STRi64_pmd %LR, %SP<tied0>, -8; flags: FrameSetup
	%FP<def> = ADDri_r32 %SP, 8, %STATUS<imp-def>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	GID %CONFIG<imp-def>
	%R2<def> = MOVFS32_core %CONFIG<kill>, %D1<imp-def>
	%R3<def> = COPY %R2, %D1<imp-use,kill>, %D1<imp-def>
	%R3<def,tied1> = MOVTi32ri %R3<tied0>, 72, %D1<imp-use,kill>, %D1<imp-def>
	STRi64 %D1, %FP, -8; mem:ST4[FixedStack1] ST4[FixedStack0]
	%CONFIG<def> = MOVTS32_core %R3, %D1<imp-use,kill>
	GIE %CONFIG<imp-use,kill>
    Successors according to CFG: BB#1(?%)

BB#1: derived from LLVM BB %entry
    Live Ins: %R0 %R1
    Predecessors according to CFG: BB#0
	%R1<def> = IMULrr_r32 %R1<kill>, %R1, %STATUS<imp-def,dead>
	%R2<def,dead> = CMPri_r32 %R1, 0, %STATUS<imp-def>
	BCC <BB#4>, 0, %STATUS<imp-use>
    Successors according to CFG: BB#4(0x30000000 / 0x80000000 = 37.50%) BB#2(0x50000000 / 0x80000000 = 62.50%)

BB#2: derived from LLVM BB %for.body.preheader
    Live Ins: %R0 %R1
    Predecessors according to CFG: BB#1
	%R2<def> = MOVi32ri 0
	%R3<def> = COPY %R2
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %for.body
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#2 BB#3
	%IP<def> = ADDri_r32 %R0, 4, %STATUS<imp-def,dead>
	STRi32_r32 %R2, %R0<kill>, 0; mem:Volatile ST4[%lsr.iv](tbaa=!2)
	%R3<def> = ADDri_r32 %R3<kill>, 1, %STATUS<imp-def,dead>
	%R0<def,dead> = CMPrr_r32 %R3, %R1, %STATUS<imp-def>
	%R0<def> = COPY %IP<kill>
	BCC <BB#3>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#3(0x7c000000 / 0x80000000 = 96.88%) BB#4(0x04000000 / 0x80000000 = 3.12%)

BB#4: derived from LLVM BB %for.end
    Predecessors according to CFG: BB#1 BB#3
	%R0<def> = LDRi32_r32 %FP, -4; mem:LD4[FixedStack0]
	GID
	%CONFIG<def> = MOVTS32_core %R0<kill>
	GIE %CONFIG<imp-use,kill>
	%LR<def> = LDRi64 %SP, 8; flags: FrameSetup
	%SP<def> = ADDri_r32 %SP, 8, %STATUS<imp-def>
	RTS

# End machine code for function matclr.

# *** IR Dump Before Tail Duplication ***:
# Machine code for function matclr: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=4, align=4, at location [SP-4]
  fi#1: size=4, align=8, at location [SP-8]
Function Live Ins: %R0, %R1

BB#0: 
    Live Ins: %R0 %R1
	%SP<def,tied2> = STRi64_pmd %LR, %SP<tied0>, -8; flags: FrameSetup
	%FP<def> = ADDri_r32 %SP, 8, %STATUS<imp-def>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	GID %CONFIG<imp-def>
	%R2<def> = MOVFS32_core %CONFIG<kill>, %D1<imp-def>
	%R3<def> = COPY %R2, %D1<imp-use,kill>, %D1<imp-def>
	%R3<def,tied1> = MOVTi32ri %R3<tied0>, 72, %D1<imp-use,kill>, %D1<imp-def>
	STRi64 %D1, %FP, -8; mem:ST4[FixedStack1] ST4[FixedStack0]
	%CONFIG<def> = MOVTS32_core %R3, %D1<imp-use,kill>
	GIE %CONFIG<imp-use,kill>
    Successors according to CFG: BB#1(?%)

BB#1: derived from LLVM BB %entry
    Live Ins: %R0 %R1
    Predecessors according to CFG: BB#0
	%R1<def> = IMULrr_r32 %R1<kill>, %R1, %STATUS<imp-def,dead>
	%R2<def,dead> = CMPri_r32 %R1, 0, %STATUS<imp-def>
	BCC <BB#4>, 0, %STATUS<imp-use>
    Successors according to CFG: BB#4(0x30000000 / 0x80000000 = 37.50%) BB#2(0x50000000 / 0x80000000 = 62.50%)

BB#2: derived from LLVM BB %for.body.preheader
    Live Ins: %R0 %R1
    Predecessors according to CFG: BB#1
	%R2<def> = MOVi32ri 0
	%R3<def> = COPY %R2
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %for.body
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#2 BB#3
	%IP<def> = ADDri_r32 %R0, 4, %STATUS<imp-def,dead>
	STRi32_r32 %R2, %R0<kill>, 0; mem:Volatile ST4[%lsr.iv](tbaa=!2)
	%R3<def> = ADDri_r32 %R3<kill>, 1, %STATUS<imp-def,dead>
	%R0<def,dead> = CMPrr_r32 %R3, %R1, %STATUS<imp-def>
	%R0<def> = COPY %IP<kill>
	BCC <BB#3>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#3(0x7c000000 / 0x80000000 = 96.88%) BB#4(0x04000000 / 0x80000000 = 3.12%)

BB#4: derived from LLVM BB %for.end
    Predecessors according to CFG: BB#1 BB#3
	%R0<def> = LDRi32_r32 %FP, -4; mem:LD4[FixedStack0]
	GID
	%CONFIG<def> = MOVTS32_core %R0<kill>
	GIE %CONFIG<imp-use,kill>
	%LR<def> = LDRi64 %SP, 8; flags: FrameSetup
	%SP<def> = ADDri_r32 %SP, 8, %STATUS<imp-def>
	RTS

# End machine code for function matclr.


<----------------->
Analyzing block 1
BB#1: derived from LLVM BB %entry
    Live Ins: %R0 %R1
    Predecessors according to CFG: BB#0
	%R1<def> = IMULrr_r32 %R1<kill>, %R1, %STATUS<imp-def,dead>
	%R2<def,dead> = CMPri_r32 %R1, 0, %STATUS<imp-def>
	BCC <BB#4>, 0, %STATUS<imp-use>
    Successors according to CFG: BB#4(0x30000000 / 0x80000000 = 37.50%) BB#2(0x50000000 / 0x80000000 = 62.50%)

<----------------->
Analyzing block 2
BB#2: derived from LLVM BB %for.body.preheader
    Live Ins: %R0 %R1
    Predecessors according to CFG: BB#1
	%R2<def> = MOVi32ri 0
	%R3<def> = COPY %R2
    Successors according to CFG: BB#3(?%)

<----------------->
Analyzing block 3
BB#3: derived from LLVM BB %for.body
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#2 BB#3
	%IP<def> = ADDri_r32 %R0, 4, %STATUS<imp-def,dead>
	STRi32_r32 %R2, %R0<kill>, 0; mem:Volatile ST4[%lsr.iv](tbaa=!2)
	%R3<def> = ADDri_r32 %R3<kill>, 1, %STATUS<imp-def,dead>
	%R0<def,dead> = CMPrr_r32 %R3, %R1, %STATUS<imp-def>
	%R0<def> = COPY %IP<kill>
	BCC <BB#3>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#3(0x7c000000 / 0x80000000 = 96.88%) BB#4(0x04000000 / 0x80000000 = 3.12%)

<----------------->
Analyzing block 4
BB#4: derived from LLVM BB %for.end
    Predecessors according to CFG: BB#1 BB#3
	%R0<def> = LDRi32_r32 %FP, -4; mem:LD4[FixedStack0]
	GID
	%CONFIG<def> = MOVTS32_core %R0<kill>
	GIE %CONFIG<imp-use,kill>
	%LR<def> = LDRi64 %SP, 8; flags: FrameSetup
	%SP<def> = ADDri_r32 %SP, 8, %STATUS<imp-def>
	RTS
# *** IR Dump After Tail Duplication ***:
# Machine code for function matclr: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=4, align=4, at location [SP-4]
  fi#1: size=4, align=8, at location [SP-8]
Function Live Ins: %R0, %R1

BB#0: 
    Live Ins: %R0 %R1
	%SP<def,tied2> = STRi64_pmd %LR, %SP<tied0>, -8; flags: FrameSetup
	%FP<def> = ADDri_r32 %SP, 8, %STATUS<imp-def>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	GID %CONFIG<imp-def>
	%R2<def> = MOVFS32_core %CONFIG<kill>, %D1<imp-def>
	%R3<def> = COPY %R2, %D1<imp-use,kill>, %D1<imp-def>
	%R3<def,tied1> = MOVTi32ri %R3<tied0>, 72, %D1<imp-use,kill>, %D1<imp-def>
	STRi64 %D1, %FP, -8; mem:ST4[FixedStack1] ST4[FixedStack0]
	%CONFIG<def> = MOVTS32_core %R3, %D1<imp-use,kill>
	GIE %CONFIG<imp-use,kill>
    Successors according to CFG: BB#1(?%)

BB#1: derived from LLVM BB %entry
    Live Ins: %R0 %R1
    Predecessors according to CFG: BB#0
	%R1<def> = IMULrr_r32 %R1<kill>, %R1, %STATUS<imp-def,dead>
	%R2<def,dead> = CMPri_r32 %R1, 0, %STATUS<imp-def>
	BCC <BB#4>, 0, %STATUS<imp-use>
    Successors according to CFG: BB#4(0x30000000 / 0x80000000 = 37.50%) BB#2(0x50000000 / 0x80000000 = 62.50%)

BB#2: derived from LLVM BB %for.body.preheader
    Live Ins: %R0 %R1
    Predecessors according to CFG: BB#1
	%R2<def> = MOVi32ri 0
	%R3<def> = COPY %R2
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %for.body
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#2 BB#3
	%IP<def> = ADDri_r32 %R0, 4, %STATUS<imp-def,dead>
	STRi32_r32 %R2, %R0<kill>, 0; mem:Volatile ST4[%lsr.iv](tbaa=!2)
	%R3<def> = ADDri_r32 %R3<kill>, 1, %STATUS<imp-def,dead>
	%R0<def,dead> = CMPrr_r32 %R3, %R1, %STATUS<imp-def>
	%R0<def> = COPY %IP<kill>
	BCC <BB#3>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#3(0x7c000000 / 0x80000000 = 96.88%) BB#4(0x04000000 / 0x80000000 = 3.12%)

BB#4: derived from LLVM BB %for.end
    Predecessors according to CFG: BB#1 BB#3
	%R0<def> = LDRi32_r32 %FP, -4; mem:LD4[FixedStack0]
	GID
	%CONFIG<def> = MOVTS32_core %R0<kill>
	GIE %CONFIG<imp-use,kill>
	%LR<def> = LDRi64 %SP, 8; flags: FrameSetup
	%SP<def> = ADDri_r32 %SP, 8, %STATUS<imp-def>
	RTS

# End machine code for function matclr.

# *** IR Dump Before Machine Copy Propagation Pass ***:
# Machine code for function matclr: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=4, align=4, at location [SP-4]
  fi#1: size=4, align=8, at location [SP-8]
Function Live Ins: %R0, %R1

BB#0: 
    Live Ins: %R0 %R1
	%SP<def,tied2> = STRi64_pmd %LR, %SP<tied0>, -8; flags: FrameSetup
	%FP<def> = ADDri_r32 %SP, 8, %STATUS<imp-def>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	GID %CONFIG<imp-def>
	%R2<def> = MOVFS32_core %CONFIG<kill>, %D1<imp-def>
	%R3<def> = COPY %R2, %D1<imp-use,kill>, %D1<imp-def>
	%R3<def,tied1> = MOVTi32ri %R3<tied0>, 72, %D1<imp-use,kill>, %D1<imp-def>
	STRi64 %D1, %FP, -8; mem:ST4[FixedStack1] ST4[FixedStack0]
	%CONFIG<def> = MOVTS32_core %R3, %D1<imp-use,kill>
	GIE %CONFIG<imp-use,kill>
    Successors according to CFG: BB#1(?%)

BB#1: derived from LLVM BB %entry
    Live Ins: %R0 %R1
    Predecessors according to CFG: BB#0
	%R1<def> = IMULrr_r32 %R1<kill>, %R1, %STATUS<imp-def,dead>
	%R2<def,dead> = CMPri_r32 %R1, 0, %STATUS<imp-def>
	BCC <BB#4>, 0, %STATUS<imp-use>
    Successors according to CFG: BB#4(0x30000000 / 0x80000000 = 37.50%) BB#2(0x50000000 / 0x80000000 = 62.50%)

BB#2: derived from LLVM BB %for.body.preheader
    Live Ins: %R0 %R1
    Predecessors according to CFG: BB#1
	%R2<def> = MOVi32ri 0
	%R3<def> = COPY %R2
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %for.body
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#2 BB#3
	%IP<def> = ADDri_r32 %R0, 4, %STATUS<imp-def,dead>
	STRi32_r32 %R2, %R0<kill>, 0; mem:Volatile ST4[%lsr.iv](tbaa=!2)
	%R3<def> = ADDri_r32 %R3<kill>, 1, %STATUS<imp-def,dead>
	%R0<def,dead> = CMPrr_r32 %R3, %R1, %STATUS<imp-def>
	%R0<def> = COPY %IP<kill>
	BCC <BB#3>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#3(0x7c000000 / 0x80000000 = 96.88%) BB#4(0x04000000 / 0x80000000 = 3.12%)

BB#4: derived from LLVM BB %for.end
    Predecessors according to CFG: BB#1 BB#3
	%R0<def> = LDRi32_r32 %FP, -4; mem:LD4[FixedStack0]
	GID
	%CONFIG<def> = MOVTS32_core %R0<kill>
	GIE %CONFIG<imp-use,kill>
	%LR<def> = LDRi64 %SP, 8; flags: FrameSetup
	%SP<def> = ADDri_r32 %SP, 8, %STATUS<imp-def>
	RTS

# End machine code for function matclr.

MCP: CopyPropagateBlock (null)
MCP: Copy is a deletion candidate:   %R3<def> = COPY %R2, %D1<imp-use,kill>, %D1<imp-def>
MCP: Copy is used - not dead:   %R3<def> = COPY %R2, %D1<imp-use,kill>, %D1<imp-def>
MCP: Copy is used - not dead:   %R3<def> = COPY %R2, %D1<imp-use,kill>, %D1<imp-def>
MCP: CopyPropagateBlock entry
MCP: CopyPropagateBlock for.body.preheader
MCP: Copy is a deletion candidate:   %R3<def> = COPY %R2
MCP: CopyPropagateBlock for.body
MCP: Copy is a deletion candidate:   %R0<def> = COPY %IP<kill>
MCP: CopyPropagateBlock for.end
# *** IR Dump After Machine Copy Propagation Pass ***:
# Machine code for function matclr: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=4, align=4, at location [SP-4]
  fi#1: size=4, align=8, at location [SP-8]
Function Live Ins: %R0, %R1

BB#0: 
    Live Ins: %R0 %R1
	%SP<def,tied2> = STRi64_pmd %LR, %SP<tied0>, -8; flags: FrameSetup
	%FP<def> = ADDri_r32 %SP, 8, %STATUS<imp-def>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	GID %CONFIG<imp-def>
	%R2<def> = MOVFS32_core %CONFIG<kill>, %D1<imp-def>
	%R3<def> = COPY %R2, %D1<imp-use,kill>, %D1<imp-def>
	%R3<def,tied1> = MOVTi32ri %R3<tied0>, 72, %D1<imp-use,kill>, %D1<imp-def>
	STRi64 %D1, %FP, -8; mem:ST4[FixedStack1] ST4[FixedStack0]
	%CONFIG<def> = MOVTS32_core %R3, %D1<imp-use,kill>
	GIE %CONFIG<imp-use,kill>
    Successors according to CFG: BB#1(?%)

BB#1: derived from LLVM BB %entry
    Live Ins: %R0 %R1
    Predecessors according to CFG: BB#0
	%R1<def> = IMULrr_r32 %R1<kill>, %R1, %STATUS<imp-def,dead>
	%R2<def,dead> = CMPri_r32 %R1, 0, %STATUS<imp-def>
	BCC <BB#4>, 0, %STATUS<imp-use>
    Successors according to CFG: BB#4(0x30000000 / 0x80000000 = 37.50%) BB#2(0x50000000 / 0x80000000 = 62.50%)

BB#2: derived from LLVM BB %for.body.preheader
    Live Ins: %R0 %R1
    Predecessors according to CFG: BB#1
	%R2<def> = MOVi32ri 0
	%R3<def> = COPY %R2
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %for.body
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#2 BB#3
	%IP<def> = ADDri_r32 %R0, 4, %STATUS<imp-def,dead>
	STRi32_r32 %R2, %R0<kill>, 0; mem:Volatile ST4[%lsr.iv](tbaa=!2)
	%R3<def> = ADDri_r32 %R3<kill>, 1, %STATUS<imp-def,dead>
	%R0<def,dead> = CMPrr_r32 %R3, %R1, %STATUS<imp-def>
	%R0<def> = COPY %IP<kill>
	BCC <BB#3>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#3(0x7c000000 / 0x80000000 = 96.88%) BB#4(0x04000000 / 0x80000000 = 3.12%)

BB#4: derived from LLVM BB %for.end
    Predecessors according to CFG: BB#1 BB#3
	%R0<def> = LDRi32_r32 %FP, -4; mem:LD4[FixedStack0]
	GID
	%CONFIG<def> = MOVTS32_core %R0<kill>
	GIE %CONFIG<imp-use,kill>
	%LR<def> = LDRi64 %SP, 8; flags: FrameSetup
	%SP<def> = ADDri_r32 %SP, 8, %STATUS<imp-def>
	RTS

# End machine code for function matclr.

# *** IR Dump Before Post-RA pseudo instruction expansion pass ***:
# Machine code for function matclr: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=4, align=4, at location [SP-4]
  fi#1: size=4, align=8, at location [SP-8]
Function Live Ins: %R0, %R1

BB#0: 
    Live Ins: %R0 %R1
	%SP<def,tied2> = STRi64_pmd %LR, %SP<tied0>, -8; flags: FrameSetup
	%FP<def> = ADDri_r32 %SP, 8, %STATUS<imp-def>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	GID %CONFIG<imp-def>
	%R2<def> = MOVFS32_core %CONFIG<kill>, %D1<imp-def>
	%R3<def> = COPY %R2, %D1<imp-use,kill>, %D1<imp-def>
	%R3<def,tied1> = MOVTi32ri %R3<tied0>, 72, %D1<imp-use,kill>, %D1<imp-def>
	STRi64 %D1, %FP, -8; mem:ST4[FixedStack1] ST4[FixedStack0]
	%CONFIG<def> = MOVTS32_core %R3, %D1<imp-use,kill>
	GIE %CONFIG<imp-use,kill>
    Successors according to CFG: BB#1(?%)

BB#1: derived from LLVM BB %entry
    Live Ins: %R0 %R1
    Predecessors according to CFG: BB#0
	%R1<def> = IMULrr_r32 %R1<kill>, %R1, %STATUS<imp-def,dead>
	%R2<def,dead> = CMPri_r32 %R1, 0, %STATUS<imp-def>
	BCC <BB#4>, 0, %STATUS<imp-use>
    Successors according to CFG: BB#4(0x30000000 / 0x80000000 = 37.50%) BB#2(0x50000000 / 0x80000000 = 62.50%)

BB#2: derived from LLVM BB %for.body.preheader
    Live Ins: %R0 %R1
    Predecessors according to CFG: BB#1
	%R2<def> = MOVi32ri 0
	%R3<def> = COPY %R2
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %for.body
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#2 BB#3
	%IP<def> = ADDri_r32 %R0, 4, %STATUS<imp-def,dead>
	STRi32_r32 %R2, %R0<kill>, 0; mem:Volatile ST4[%lsr.iv](tbaa=!2)
	%R3<def> = ADDri_r32 %R3<kill>, 1, %STATUS<imp-def,dead>
	%R0<def,dead> = CMPrr_r32 %R3, %R1, %STATUS<imp-def>
	%R0<def> = COPY %IP<kill>
	BCC <BB#3>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#3(0x7c000000 / 0x80000000 = 96.88%) BB#4(0x04000000 / 0x80000000 = 3.12%)

BB#4: derived from LLVM BB %for.end
    Predecessors according to CFG: BB#1 BB#3
	%R0<def> = LDRi32_r32 %FP, -4; mem:LD4[FixedStack0]
	GID
	%CONFIG<def> = MOVTS32_core %R0<kill>
	GIE %CONFIG<imp-use,kill>
	%LR<def> = LDRi64 %SP, 8; flags: FrameSetup
	%SP<def> = ADDri_r32 %SP, 8, %STATUS<imp-def>
	RTS

# End machine code for function matclr.

Machine Function
********** EXPANDING POST-RA PSEUDO INSTRS **********
********** Function: matclr
real copy:   %R3<def> = COPY %R2, %D1<imp-use,kill>, %D1<imp-def>
Expanding 32-bit copy
replaced by: %R3<def> = MOVi32rr %R2, %D1<imp-use,kill>, %D1<imp-def>
real copy:   %R3<def> = COPY %R2
Expanding 32-bit copy
replaced by: %R3<def> = MOVi32rr %R2
real copy:   %R0<def> = COPY %IP<kill>
Expanding 32-bit copy
replaced by: %R0<def> = MOVi32rr %IP<kill>
# *** IR Dump After Post-RA pseudo instruction expansion pass ***:
# Machine code for function matclr: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=4, align=4, at location [SP-4]
  fi#1: size=4, align=8, at location [SP-8]
Function Live Ins: %R0, %R1

BB#0: 
    Live Ins: %R0 %R1
	%SP<def,tied2> = STRi64_pmd %LR, %SP<tied0>, -8; flags: FrameSetup
	%FP<def> = ADDri_r32 %SP, 8, %STATUS<imp-def>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	GID %CONFIG<imp-def>
	%R2<def> = MOVFS32_core %CONFIG<kill>, %D1<imp-def>
	%R3<def> = MOVi32rr %R2, %D1<imp-use,kill>, %D1<imp-def>
	%R3<def,tied1> = MOVTi32ri %R3<tied0>, 72, %D1<imp-use,kill>, %D1<imp-def>
	STRi64 %D1, %FP, -8; mem:ST4[FixedStack1] ST4[FixedStack0]
	%CONFIG<def> = MOVTS32_core %R3, %D1<imp-use,kill>
	GIE %CONFIG<imp-use,kill>
    Successors according to CFG: BB#1(?%)

BB#1: derived from LLVM BB %entry
    Live Ins: %R0 %R1
    Predecessors according to CFG: BB#0
	%R1<def> = IMULrr_r32 %R1<kill>, %R1, %STATUS<imp-def,dead>
	%R2<def,dead> = CMPri_r32 %R1, 0, %STATUS<imp-def>
	BCC <BB#4>, 0, %STATUS<imp-use>
    Successors according to CFG: BB#4(0x30000000 / 0x80000000 = 37.50%) BB#2(0x50000000 / 0x80000000 = 62.50%)

BB#2: derived from LLVM BB %for.body.preheader
    Live Ins: %R0 %R1
    Predecessors according to CFG: BB#1
	%R2<def> = MOVi32ri 0
	%R3<def> = MOVi32rr %R2
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %for.body
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#2 BB#3
	%IP<def> = ADDri_r32 %R0, 4, %STATUS<imp-def,dead>
	STRi32_r32 %R2, %R0<kill>, 0; mem:Volatile ST4[%lsr.iv](tbaa=!2)
	%R3<def> = ADDri_r32 %R3<kill>, 1, %STATUS<imp-def,dead>
	%R0<def,dead> = CMPrr_r32 %R3, %R1, %STATUS<imp-def>
	%R0<def> = MOVi32rr %IP<kill>
	BCC <BB#3>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#3(0x7c000000 / 0x80000000 = 96.88%) BB#4(0x04000000 / 0x80000000 = 3.12%)

BB#4: derived from LLVM BB %for.end
    Predecessors according to CFG: BB#1 BB#3
	%R0<def> = LDRi32_r32 %FP, -4; mem:LD4[FixedStack0]
	GID
	%CONFIG<def> = MOVTS32_core %R0<kill>
	GIE %CONFIG<imp-use,kill>
	%LR<def> = LDRi64 %SP, 8; flags: FrameSetup
	%SP<def> = ADDri_r32 %SP, 8, %STATUS<imp-def>
	JR32 %LR

# End machine code for function matclr.


block-frequency: matclr
=======================
reverse-post-order-traversal
 - 0: BB0
 - 1: BB1[entry]
 - 2: BB2[for.body.preheader]
 - 3: BB3[for.body]
 - 4: BB4[for.end]
loop-detection
 - loop = BB3[for.body]
compute-mass-in-loop: BB3[for.body]*
 - node: BB3[for.body]
  => [backedge] weight = 2080374784
  => [  exit  ] weight = 67108864, succ = BB4[for.end]
  => mass:  ffffffffffffffff
  => assign f7ffffffffffffff (0800000000000000) [back] to BB3[for.body]
  => assign 0800000000000000 (0000000000000000) [exit] to BB4[for.end]
compute-loop-scale: BB3[for.body]*
 - exit-mass = 0800000000000000 (ffffffffffffffff - f7ffffffffffffff)
 - scale = 32.0
packaging-loop: BB3[for.body]*
 - node: BB3[for.body]
compute-mass-in-function
 - node: BB0
  => [ local  ] weight = 2147483648, succ = BB1[entry]
  => mass:  ffffffffffffffff
  => assign ffffffffffffffff (0000000000000000) to BB1[entry]
 - node: BB1[entry]
  => [ local  ] weight = 805306368, succ = BB4[for.end]
  => [ local  ] weight = 1342177280, succ = BB2[for.body.preheader]
  => mass:  ffffffffffffffff
  => assign 9fffffffffffffff (6000000000000000) to BB2[for.body.preheader]
  => assign 6000000000000000 (0000000000000000) to BB4[for.end]
 - node: BB2[for.body.preheader]
  => [ local  ] weight = 2147483648, succ = BB3[for.body]
  => mass:  9fffffffffffffff
  => assign 9fffffffffffffff (0000000000000000) to BB3[for.body]
 - node: BB3[for.body]
  => [ local  ] weight = 576460752303423488, succ = BB4[for.end]
  => mass:  9fffffffffffffff
  => assign 9fffffffffffffff (0000000000000000) to BB4[for.end]
 - node: BB4[for.end]
  => mass:  ffffffffffffffff
unwrap-loop-package: BB3[for.body]*: mass = 9fffffffffffffff, scale = 32.0
  => combined-scale = 20.0
 - BB3[for.body]: 1.0 => 20.0
float-to-int: min = 0.625, max = 20.0, factor = 12.8
 - BB0: float = 1.0, scaled = 12.8, int = 12
 - BB1[entry]: float = 1.0, scaled = 12.8, int = 12
 - BB2[for.body.preheader]: float = 0.625, scaled = 8.0, int = 8
 - BB3[for.body]: float = 20.0, scaled = 256.0, int = 255
 - BB4[for.end]: float = 1.0, scaled = 12.8, int = 12
block-frequency-info: matclr
 - BB0: float = 1.0, int = 12
 - BB1[entry]: float = 1.0, int = 12
 - BB2[for.body.preheader]: float = 0.625, int = 8
 - BB3[for.body]: float = 20.0, int = 255
 - BB4[for.end]: float = 1.0, int = 12

# *** IR Dump Before If Converter ***:
# Machine code for function matclr: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=4, align=4, at location [SP-4]
  fi#1: size=4, align=8, at location [SP-8]
Function Live Ins: %R0, %R1

BB#0: 
    Live Ins: %R0 %R1
	%SP<def,tied2> = STRi64_pmd %LR, %SP<tied0>, -8; flags: FrameSetup
	%FP<def> = ADDri_r32 %SP, 8, %STATUS<imp-def>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	GID %CONFIG<imp-def>
	%R2<def> = MOVFS32_core %CONFIG<kill>, %D1<imp-def>
	%R3<def> = MOVi32rr %R2, %D1<imp-use,kill>, %D1<imp-def>
	%R3<def,tied1> = MOVTi32ri %R3<tied0>, 72, %D1<imp-use,kill>, %D1<imp-def>
	STRi64 %D1, %FP, -8; mem:ST4[FixedStack1] ST4[FixedStack0]
	%CONFIG<def> = MOVTS32_core %R3, %D1<imp-use,kill>
	GIE %CONFIG<imp-use,kill>
    Successors according to CFG: BB#1(?%)

BB#1: derived from LLVM BB %entry
    Live Ins: %R0 %R1
    Predecessors according to CFG: BB#0
	%R1<def> = IMULrr_r32 %R1<kill>, %R1, %STATUS<imp-def,dead>
	%R2<def,dead> = CMPri_r32 %R1, 0, %STATUS<imp-def>
	BCC <BB#4>, 0, %STATUS<imp-use>
    Successors according to CFG: BB#4(0x30000000 / 0x80000000 = 37.50%) BB#2(0x50000000 / 0x80000000 = 62.50%)

BB#2: derived from LLVM BB %for.body.preheader
    Live Ins: %R0 %R1
    Predecessors according to CFG: BB#1
	%R2<def> = MOVi32ri 0
	%R3<def> = MOVi32rr %R2
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %for.body
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#2 BB#3
	%IP<def> = ADDri_r32 %R0, 4, %STATUS<imp-def,dead>
	STRi32_r32 %R2, %R0<kill>, 0; mem:Volatile ST4[%lsr.iv](tbaa=!2)
	%R3<def> = ADDri_r32 %R3<kill>, 1, %STATUS<imp-def,dead>
	%R0<def,dead> = CMPrr_r32 %R3, %R1, %STATUS<imp-def>
	%R0<def> = MOVi32rr %IP<kill>
	BCC <BB#3>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#3(0x7c000000 / 0x80000000 = 96.88%) BB#4(0x04000000 / 0x80000000 = 3.12%)

BB#4: derived from LLVM BB %for.end
    Predecessors according to CFG: BB#1 BB#3
	%R0<def> = LDRi32_r32 %FP, -4; mem:LD4[FixedStack0]
	GID
	%CONFIG<def> = MOVTS32_core %R0<kill>
	GIE %CONFIG<imp-use,kill>
	%LR<def> = LDRi64 %SP, 8; flags: FrameSetup
	%SP<def> = ADDri_r32 %SP, 8, %STATUS<imp-def>
	JR32 %LR

# End machine code for function matclr.


<----------------->
Analyzing block 0
BB#0: 
    Live Ins: %R0 %R1
	%SP<def,tied2> = STRi64_pmd %LR, %SP<tied0>, -8; flags: FrameSetup
	%FP<def> = ADDri_r32 %SP, 8, %STATUS<imp-def>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	GID %CONFIG<imp-def>
	%R2<def> = MOVFS32_core %CONFIG<kill>, %D1<imp-def>
	%R3<def> = MOVi32rr %R2, %D1<imp-use,kill>, %D1<imp-def>
	%R3<def,tied1> = MOVTi32ri %R3<tied0>, 72, %D1<imp-use,kill>, %D1<imp-def>
	STRi64 %D1, %FP, -8; mem:ST4[FixedStack1] ST4[FixedStack0]
	%CONFIG<def> = MOVTS32_core %R3, %D1<imp-use,kill>
	GIE %CONFIG<imp-use,kill>
    Successors according to CFG: BB#1(?%)

<----------------->
Analyzing block 1
BB#1: derived from LLVM BB %entry
    Live Ins: %R0 %R1
    Predecessors according to CFG: BB#0
	%R1<def> = IMULrr_r32 %R1<kill>, %R1, %STATUS<imp-def,dead>
	%R2<def,dead> = CMPri_r32 %R1, 0, %STATUS<imp-def>
	BCC <BB#4>, 0, %STATUS<imp-use>
    Successors according to CFG: BB#4(0x30000000 / 0x80000000 = 37.50%) BB#2(0x50000000 / 0x80000000 = 62.50%)

<----------------->
Analyzing block 2
BB#2: derived from LLVM BB %for.body.preheader
    Live Ins: %R0 %R1
    Predecessors according to CFG: BB#1
	%R2<def> = MOVi32ri 0
	%R3<def> = MOVi32rr %R2
    Successors according to CFG: BB#3(?%)

<----------------->
Analyzing block 3
BB#3: derived from LLVM BB %for.body
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#2 BB#3
	%IP<def> = ADDri_r32 %R0, 4, %STATUS<imp-def,dead>
	STRi32_r32 %R2, %R0<kill>, 0; mem:Volatile ST4[%lsr.iv](tbaa=!2)
	%R3<def> = ADDri_r32 %R3<kill>, 1, %STATUS<imp-def,dead>
	%R0<def,dead> = CMPrr_r32 %R3, %R1, %STATUS<imp-def>
	%R0<def> = MOVi32rr %IP<kill>
	BCC <BB#3>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#3(0x7c000000 / 0x80000000 = 96.88%) BB#4(0x04000000 / 0x80000000 = 3.12%)

<----------------->
Analyzing block 4
BB#4: derived from LLVM BB %for.end
    Predecessors according to CFG: BB#1 BB#3
	%R0<def> = LDRi32_r32 %FP, -4; mem:LD4[FixedStack0]
	GID
	%CONFIG<def> = MOVTS32_core %R0<kill>
	GIE %CONFIG<imp-use,kill>
	%LR<def> = LDRi64 %SP, 8; flags: FrameSetup
	%SP<def> = ADDri_r32 %SP, 8, %STATUS<imp-def>
	JR32 %LR

<----------------->
Analyzing block 2
BB#2: derived from LLVM BB %for.body.preheader
    Live Ins: %R0 %R1
    Predecessors according to CFG: BB#1
	%R2<def> = MOVi32ri 0
	%R3<def> = MOVi32rr %R2
    Successors according to CFG: BB#3(?%)

<----------------->
Analyzing block 1
BB#1: derived from LLVM BB %entry
    Live Ins: %R0 %R1
    Predecessors according to CFG: BB#0
	%R1<def> = IMULrr_r32 %R1<kill>, %R1, %STATUS<imp-def,dead>
	%R2<def,dead> = CMPri_r32 %R1, 0, %STATUS<imp-def>
	BCC <BB#4>, 0, %STATUS<imp-use>
    Successors according to CFG: BB#4(0x30000000 / 0x80000000 = 37.50%) BB#2(0x50000000 / 0x80000000 = 62.50%)

<----------------->
Removing branches out of BB#1
# Machine code for function matclr: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=4, align=4, at location [SP-4]
  fi#1: size=4, align=8, at location [SP-8]
Function Live Ins: %R0, %R1

BB#0: 
    Live Ins: %R0 %R1
	%SP<def,tied2> = STRi64_pmd %LR, %SP<tied0>, -8; flags: FrameSetup
	%FP<def> = ADDri_r32 %SP, 8, %STATUS<imp-def>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	GID %CONFIG<imp-def>
	%R2<def> = MOVFS32_core %CONFIG<kill>, %D1<imp-def>
	%R3<def> = MOVi32rr %R2, %D1<imp-use,kill>, %D1<imp-def>
	%R3<def,tied1> = MOVTi32ri %R3<tied0>, 72, %D1<imp-use,kill>, %D1<imp-def>
	STRi64 %D1, %FP, -8; mem:ST4[FixedStack1] ST4[FixedStack0]
	%CONFIG<def> = MOVTS32_core %R3, %D1<imp-use,kill>
	GIE %CONFIG<imp-use,kill>
    Successors according to CFG: BB#1(?%)

BB#1: derived from LLVM BB %entry
    Live Ins: %R0 %R1
    Predecessors according to CFG: BB#0
	%R1<def> = IMULrr_r32 %R1<kill>, %R1, %STATUS<imp-def,dead>
	%R2<def,dead> = CMPri_r32 %R1, 0, %STATUS<imp-def>
    Successors according to CFG: BB#4(0x30000000 / 0x80000000 = 37.50%) BB#2(0x50000000 / 0x80000000 = 62.50%)

BB#2: derived from LLVM BB %for.body.preheader
    Live Ins: %R0 %R1
    Predecessors according to CFG: BB#1
	%R2<def> = MOVi32ri 0
	%R3<def> = MOVi32rr %R2
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %for.body
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#2 BB#3
	%IP<def> = ADDri_r32 %R0, 4, %STATUS<imp-def,dead>
	STRi32_r32 %R2, %R0<kill>, 0; mem:Volatile ST4[%lsr.iv](tbaa=!2)
	%R3<def> = ADDri_r32 %R3<kill>, 1, %STATUS<imp-def,dead>
	%R0<def,dead> = CMPrr_r32 %R3, %R1, %STATUS<imp-def>
	%R0<def> = MOVi32rr %IP<kill>
	BCC <BB#3>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#3(0x7c000000 / 0x80000000 = 96.88%) BB#4(0x04000000 / 0x80000000 = 3.12%)

BB#4: derived from LLVM BB %for.end
    Predecessors according to CFG: BB#1 BB#3
	%R0<def> = LDRi32_r32 %FP, -4; mem:LD4[FixedStack0]
	GID
	%CONFIG<def> = MOVTS32_core %R0<kill>
	GIE %CONFIG<imp-use,kill>
	%LR<def> = LDRi64 %SP, 8; flags: FrameSetup
	%SP<def> = ADDri_r32 %SP, 8, %STATUS<imp-def>
	JR32 %LR

# End machine code for function matclr.


<----------------->
Inserting branch into BB#1
# Machine code for function matclr: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=4, align=4, at location [SP-4]
  fi#1: size=4, align=8, at location [SP-8]
Function Live Ins: %R0, %R1

BB#0: 
    Live Ins: %R0 %R1
	%SP<def,tied2> = STRi64_pmd %LR, %SP<tied0>, -8; flags: FrameSetup
	%FP<def> = ADDri_r32 %SP, 8, %STATUS<imp-def>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	GID %CONFIG<imp-def>
	%R2<def> = MOVFS32_core %CONFIG<kill>, %D1<imp-def>
	%R3<def> = MOVi32rr %R2, %D1<imp-use,kill>, %D1<imp-def>
	%R3<def,tied1> = MOVTi32ri %R3<tied0>, 72, %D1<imp-use,kill>, %D1<imp-def>
	STRi64 %D1, %FP, -8; mem:ST4[FixedStack1] ST4[FixedStack0]
	%CONFIG<def> = MOVTS32_core %R3, %D1<imp-use,kill>
	GIE %CONFIG<imp-use,kill>
    Successors according to CFG: BB#1(?%)

BB#1: derived from LLVM BB %entry
    Live Ins: %R0 %R1
    Predecessors according to CFG: BB#0
	%R1<def> = IMULrr_r32 %R1<kill>, %R1, %STATUS<imp-def,dead>
	%R2<def,dead> = CMPri_r32 %R1, 0, %STATUS<imp-def>
	BCC <BB#2>, 1, %STATUS<imp-use>
    Successors according to CFG: BB#4(0x30000000 / 0x80000000 = 37.50%) BB#2(0x50000000 / 0x80000000 = 62.50%)

BB#2: derived from LLVM BB %for.body.preheader
    Live Ins: %R0 %R1
    Predecessors according to CFG: BB#1
	%R2<def> = MOVi32ri 0
	%R3<def> = MOVi32rr %R2
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %for.body
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#2 BB#3
	%IP<def> = ADDri_r32 %R0, 4, %STATUS<imp-def,dead>
	STRi32_r32 %R2, %R0<kill>, 0; mem:Volatile ST4[%lsr.iv](tbaa=!2)
	%R3<def> = ADDri_r32 %R3<kill>, 1, %STATUS<imp-def,dead>
	%R0<def,dead> = CMPrr_r32 %R3, %R1, %STATUS<imp-def>
	%R0<def> = MOVi32rr %IP<kill>
	BCC <BB#3>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#3(0x7c000000 / 0x80000000 = 96.88%) BB#4(0x04000000 / 0x80000000 = 3.12%)

BB#4: derived from LLVM BB %for.end
    Predecessors according to CFG: BB#1 BB#3
	%R0<def> = LDRi32_r32 %FP, -4; mem:LD4[FixedStack0]
	GID
	%CONFIG<def> = MOVTS32_core %R0<kill>
	GIE %CONFIG<imp-use,kill>
	%LR<def> = LDRi64 %SP, 8; flags: FrameSetup
	%SP<def> = ADDri_r32 %SP, 8, %STATUS<imp-def>
	JR32 %LR

# End machine code for function matclr.


<----------------->
Analyzing block 3
BB#3: derived from LLVM BB %for.body
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#2 BB#3
	%IP<def> = ADDri_r32 %R0, 4, %STATUS<imp-def,dead>
	STRi32_r32 %R2, %R0<kill>, 0; mem:Volatile ST4[%lsr.iv](tbaa=!2)
	%R3<def> = ADDri_r32 %R3<kill>, 1, %STATUS<imp-def,dead>
	%R0<def,dead> = CMPrr_r32 %R3, %R1, %STATUS<imp-def>
	%R0<def> = MOVi32rr %IP<kill>
	BCC <BB#3>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#3(0x7c000000 / 0x80000000 = 96.88%) BB#4(0x04000000 / 0x80000000 = 3.12%)

TryTailMergeBlocks: BB#1, BB#3
  with successor BB#4
  which has fall-through from BB#3
Looking for common tails of at least 3 instructions

<----------------->
Analyzing block 1
BB#1: derived from LLVM BB %entry
    Live Ins: %R0 %R1
    Predecessors according to CFG: BB#0
	%R1<def> = IMULrr_r32 %R1<kill>, %R1, %STATUS<imp-def,dead>
	%R2<def,dead> = CMPri_r32 %R1, 0, %STATUS<imp-def>
	BCC <BB#2>, 1, %STATUS<imp-use>
    Successors according to CFG: BB#4(0x30000000 / 0x80000000 = 37.50%) BB#2(0x50000000 / 0x80000000 = 62.50%)

<----------------->
Removing branches out of BB#1
# Machine code for function matclr: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=4, align=4, at location [SP-4]
  fi#1: size=4, align=8, at location [SP-8]
Function Live Ins: %R0, %R1

BB#0: 
    Live Ins: %R0 %R1
	%SP<def,tied2> = STRi64_pmd %LR, %SP<tied0>, -8; flags: FrameSetup
	%FP<def> = ADDri_r32 %SP, 8, %STATUS<imp-def>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	GID %CONFIG<imp-def>
	%R2<def> = MOVFS32_core %CONFIG<kill>, %D1<imp-def>
	%R3<def> = MOVi32rr %R2, %D1<imp-use,kill>, %D1<imp-def>
	%R3<def,tied1> = MOVTi32ri %R3<tied0>, 72, %D1<imp-use,kill>, %D1<imp-def>
	STRi64 %D1, %FP, -8; mem:ST4[FixedStack1] ST4[FixedStack0]
	%CONFIG<def> = MOVTS32_core %R3, %D1<imp-use,kill>
	GIE %CONFIG<imp-use,kill>
    Successors according to CFG: BB#1(?%)

BB#1: derived from LLVM BB %entry
    Live Ins: %R0 %R1
    Predecessors according to CFG: BB#0
	%R1<def> = IMULrr_r32 %R1<kill>, %R1, %STATUS<imp-def,dead>
	%R2<def,dead> = CMPri_r32 %R1, 0, %STATUS<imp-def>
    Successors according to CFG: BB#4(0x30000000 / 0x80000000 = 37.50%) BB#2(0x50000000 / 0x80000000 = 62.50%)

BB#2: derived from LLVM BB %for.body.preheader
    Live Ins: %R0 %R1
    Predecessors according to CFG: BB#1
	%R2<def> = MOVi32ri 0
	%R3<def> = MOVi32rr %R2
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %for.body
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#2 BB#3
	%IP<def> = ADDri_r32 %R0, 4, %STATUS<imp-def,dead>
	STRi32_r32 %R2, %R0<kill>, 0; mem:Volatile ST4[%lsr.iv](tbaa=!2)
	%R3<def> = ADDri_r32 %R3<kill>, 1, %STATUS<imp-def,dead>
	%R0<def,dead> = CMPrr_r32 %R3, %R1, %STATUS<imp-def>
	%R0<def> = MOVi32rr %IP<kill>
	BCC <BB#3>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#3(0x7c000000 / 0x80000000 = 96.88%) BB#4(0x04000000 / 0x80000000 = 3.12%)

BB#4: derived from LLVM BB %for.end
    Predecessors according to CFG: BB#1 BB#3
	%R0<def> = LDRi32_r32 %FP, -4; mem:LD4[FixedStack0]
	GID
	%CONFIG<def> = MOVTS32_core %R0<kill>
	GIE %CONFIG<imp-use,kill>
	%LR<def> = LDRi64 %SP, 8; flags: FrameSetup
	%SP<def> = ADDri_r32 %SP, 8, %STATUS<imp-def>
	JR32 %LR

# End machine code for function matclr.


<----------------->
Inserting branch into BB#1
# Machine code for function matclr: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=4, align=4, at location [SP-4]
  fi#1: size=4, align=8, at location [SP-8]
Function Live Ins: %R0, %R1

BB#0: 
    Live Ins: %R0 %R1
	%SP<def,tied2> = STRi64_pmd %LR, %SP<tied0>, -8; flags: FrameSetup
	%FP<def> = ADDri_r32 %SP, 8, %STATUS<imp-def>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	GID %CONFIG<imp-def>
	%R2<def> = MOVFS32_core %CONFIG<kill>, %D1<imp-def>
	%R3<def> = MOVi32rr %R2, %D1<imp-use,kill>, %D1<imp-def>
	%R3<def,tied1> = MOVTi32ri %R3<tied0>, 72, %D1<imp-use,kill>, %D1<imp-def>
	STRi64 %D1, %FP, -8; mem:ST4[FixedStack1] ST4[FixedStack0]
	%CONFIG<def> = MOVTS32_core %R3, %D1<imp-use,kill>
	GIE %CONFIG<imp-use,kill>
    Successors according to CFG: BB#1(?%)

BB#1: derived from LLVM BB %entry
    Live Ins: %R0 %R1
    Predecessors according to CFG: BB#0
	%R1<def> = IMULrr_r32 %R1<kill>, %R1, %STATUS<imp-def,dead>
	%R2<def,dead> = CMPri_r32 %R1, 0, %STATUS<imp-def>
	BCC <BB#4>, 0, %STATUS<imp-use>
    Successors according to CFG: BB#4(0x30000000 / 0x80000000 = 37.50%) BB#2(0x50000000 / 0x80000000 = 62.50%)

BB#2: derived from LLVM BB %for.body.preheader
    Live Ins: %R0 %R1
    Predecessors according to CFG: BB#1
	%R2<def> = MOVi32ri 0
	%R3<def> = MOVi32rr %R2
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %for.body
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#2 BB#3
	%IP<def> = ADDri_r32 %R0, 4, %STATUS<imp-def,dead>
	STRi32_r32 %R2, %R0<kill>, 0; mem:Volatile ST4[%lsr.iv](tbaa=!2)
	%R3<def> = ADDri_r32 %R3<kill>, 1, %STATUS<imp-def,dead>
	%R0<def,dead> = CMPrr_r32 %R3, %R1, %STATUS<imp-def>
	%R0<def> = MOVi32rr %IP<kill>
	BCC <BB#3>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#3(0x7c000000 / 0x80000000 = 96.88%) BB#4(0x04000000 / 0x80000000 = 3.12%)

BB#4: derived from LLVM BB %for.end
    Predecessors according to CFG: BB#1 BB#3
	%R0<def> = LDRi32_r32 %FP, -4; mem:LD4[FixedStack0]
	GID
	%CONFIG<def> = MOVTS32_core %R0<kill>
	GIE %CONFIG<imp-use,kill>
	%LR<def> = LDRi64 %SP, 8; flags: FrameSetup
	%SP<def> = ADDri_r32 %SP, 8, %STATUS<imp-def>
	JR32 %LR

# End machine code for function matclr.


<----------------->
Analyzing block 0
BB#0: 
    Live Ins: %R0 %R1
	%SP<def,tied2> = STRi64_pmd %LR, %SP<tied0>, -8; flags: FrameSetup
	%FP<def> = ADDri_r32 %SP, 8, %STATUS<imp-def>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	GID %CONFIG<imp-def>
	%R2<def> = MOVFS32_core %CONFIG<kill>, %D1<imp-def>
	%R3<def> = MOVi32rr %R2, %D1<imp-use,kill>, %D1<imp-def>
	%R3<def,tied1> = MOVTi32ri %R3<tied0>, 72, %D1<imp-use,kill>, %D1<imp-def>
	STRi64 %D1, %FP, -8; mem:ST4[FixedStack1] ST4[FixedStack0]
	%CONFIG<def> = MOVTS32_core %R3, %D1<imp-use,kill>
	GIE %CONFIG<imp-use,kill>
    Successors according to CFG: BB#1(?%)

<----------------->
Analyzing block 1
BB#1: derived from LLVM BB %entry
    Live Ins: %R0 %R1
    Predecessors according to CFG: BB#0
	%R1<def> = IMULrr_r32 %R1<kill>, %R1, %STATUS<imp-def,dead>
	%R2<def,dead> = CMPri_r32 %R1, 0, %STATUS<imp-def>
	BCC <BB#4>, 0, %STATUS<imp-use>
    Successors according to CFG: BB#4(0x30000000 / 0x80000000 = 37.50%) BB#2(0x50000000 / 0x80000000 = 62.50%)

<----------------->
Analyzing block 0
BB#0: 
    Live Ins: %R0 %R1
	%SP<def,tied2> = STRi64_pmd %LR, %SP<tied0>, -8; flags: FrameSetup
	%FP<def> = ADDri_r32 %SP, 8, %STATUS<imp-def>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	GID %CONFIG<imp-def>
	%R2<def> = MOVFS32_core %CONFIG<kill>, %D1<imp-def>
	%R3<def> = MOVi32rr %R2, %D1<imp-use,kill>, %D1<imp-def>
	%R3<def,tied1> = MOVTi32ri %R3<tied0>, 72, %D1<imp-use,kill>, %D1<imp-def>
	STRi64 %D1, %FP, -8; mem:ST4[FixedStack1] ST4[FixedStack0]
	%CONFIG<def> = MOVTS32_core %R3, %D1<imp-use,kill>
	GIE %CONFIG<imp-use,kill>
    Successors according to CFG: BB#1(?%)

<----------------->
Analyzing block 1
BB#1: derived from LLVM BB %entry
    Live Ins: %R0 %R1
    Predecessors according to CFG: BB#0
	%R1<def> = IMULrr_r32 %R1<kill>, %R1, %STATUS<imp-def,dead>
	%R2<def,dead> = CMPri_r32 %R1, 0, %STATUS<imp-def>
	BCC <BB#4>, 0, %STATUS<imp-use>
    Successors according to CFG: BB#4(0x30000000 / 0x80000000 = 37.50%) BB#2(0x50000000 / 0x80000000 = 62.50%)

<----------------->
Analyzing block 0
BB#0: 
    Live Ins: %R0 %R1
	%SP<def,tied2> = STRi64_pmd %LR, %SP<tied0>, -8; flags: FrameSetup
	%FP<def> = ADDri_r32 %SP, 8, %STATUS<imp-def>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	GID %CONFIG<imp-def>
	%R2<def> = MOVFS32_core %CONFIG<kill>, %D1<imp-def>
	%R3<def> = MOVi32rr %R2, %D1<imp-use,kill>, %D1<imp-def>
	%R3<def,tied1> = MOVTi32ri %R3<tied0>, 72, %D1<imp-use,kill>, %D1<imp-def>
	STRi64 %D1, %FP, -8; mem:ST4[FixedStack1] ST4[FixedStack0]
	%CONFIG<def> = MOVTS32_core %R3, %D1<imp-use,kill>
	GIE %CONFIG<imp-use,kill>
    Successors according to CFG: BB#1(?%)

<----------------->
Analyzing block 0
BB#0: 
    Live Ins: %R0 %R1
	%SP<def,tied2> = STRi64_pmd %LR, %SP<tied0>, -8; flags: FrameSetup
	%FP<def> = ADDri_r32 %SP, 8, %STATUS<imp-def>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	GID %CONFIG<imp-def>
	%R2<def> = MOVFS32_core %CONFIG<kill>, %D1<imp-def>
	%R3<def> = MOVi32rr %R2, %D1<imp-use,kill>, %D1<imp-def>
	%R3<def,tied1> = MOVTi32ri %R3<tied0>, 72, %D1<imp-use,kill>, %D1<imp-def>
	STRi64 %D1, %FP, -8; mem:ST4[FixedStack1] ST4[FixedStack0]
	%CONFIG<def> = MOVTS32_core %R3, %D1<imp-use,kill>
	GIE %CONFIG<imp-use,kill>
    Successors according to CFG: BB#1(?%)

<----------------->
Analyzing block 1
BB#1: derived from LLVM BB %entry
    Live Ins: %R0 %R1
    Predecessors according to CFG: BB#0
	%R1<def> = IMULrr_r32 %R1<kill>, %R1, %STATUS<imp-def,dead>
	%R2<def,dead> = CMPri_r32 %R1, 0, %STATUS<imp-def>
	BCC <BB#4>, 0, %STATUS<imp-use>
    Successors according to CFG: BB#4(0x30000000 / 0x80000000 = 37.50%) BB#2(0x50000000 / 0x80000000 = 62.50%)

<----------------->
Analyzing block 2
BB#2: derived from LLVM BB %for.body.preheader
    Live Ins: %R0 %R1
    Predecessors according to CFG: BB#1
	%R2<def> = MOVi32ri 0
	%R3<def> = MOVi32rr %R2
    Successors according to CFG: BB#3(?%)

<----------------->
Analyzing block 1
BB#1: derived from LLVM BB %entry
    Live Ins: %R0 %R1
    Predecessors according to CFG: BB#0
	%R1<def> = IMULrr_r32 %R1<kill>, %R1, %STATUS<imp-def,dead>
	%R2<def,dead> = CMPri_r32 %R1, 0, %STATUS<imp-def>
	BCC <BB#4>, 0, %STATUS<imp-use>
    Successors according to CFG: BB#4(0x30000000 / 0x80000000 = 37.50%) BB#2(0x50000000 / 0x80000000 = 62.50%)

<----------------->
Analyzing block 2
BB#2: derived from LLVM BB %for.body.preheader
    Live Ins: %R0 %R1
    Predecessors according to CFG: BB#1
	%R2<def> = MOVi32ri 0
	%R3<def> = MOVi32rr %R2
    Successors according to CFG: BB#3(?%)

<----------------->
Analyzing block 3
BB#3: derived from LLVM BB %for.body
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#2 BB#3
	%IP<def> = ADDri_r32 %R0, 4, %STATUS<imp-def,dead>
	STRi32_r32 %R2, %R0<kill>, 0; mem:Volatile ST4[%lsr.iv](tbaa=!2)
	%R3<def> = ADDri_r32 %R3<kill>, 1, %STATUS<imp-def,dead>
	%R0<def,dead> = CMPrr_r32 %R3, %R1, %STATUS<imp-def>
	%R0<def> = MOVi32rr %IP<kill>
	BCC <BB#3>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#3(0x7c000000 / 0x80000000 = 96.88%) BB#4(0x04000000 / 0x80000000 = 3.12%)

<----------------->
Analyzing block 2
BB#2: derived from LLVM BB %for.body.preheader
    Live Ins: %R0 %R1
    Predecessors according to CFG: BB#1
	%R2<def> = MOVi32ri 0
	%R3<def> = MOVi32rr %R2
    Successors according to CFG: BB#3(?%)

<----------------->
Analyzing block 3
BB#3: derived from LLVM BB %for.body
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#2 BB#3
	%IP<def> = ADDri_r32 %R0, 4, %STATUS<imp-def,dead>
	STRi32_r32 %R2, %R0<kill>, 0; mem:Volatile ST4[%lsr.iv](tbaa=!2)
	%R3<def> = ADDri_r32 %R3<kill>, 1, %STATUS<imp-def,dead>
	%R0<def,dead> = CMPrr_r32 %R3, %R1, %STATUS<imp-def>
	%R0<def> = MOVi32rr %IP<kill>
	BCC <BB#3>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#3(0x7c000000 / 0x80000000 = 96.88%) BB#4(0x04000000 / 0x80000000 = 3.12%)

<----------------->
Analyzing block 4
BB#4: derived from LLVM BB %for.end
    Predecessors according to CFG: BB#1 BB#3
	%R0<def> = LDRi32_r32 %FP, -4; mem:LD4[FixedStack0]
	GID
	%CONFIG<def> = MOVTS32_core %R0<kill>
	GIE %CONFIG<imp-use,kill>
	%LR<def> = LDRi64 %SP, 8; flags: FrameSetup
	%SP<def> = ADDri_r32 %SP, 8, %STATUS<imp-def>
	JR32 %LR

<----------------->
Analyzing block 3
BB#3: derived from LLVM BB %for.body
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#2 BB#3
	%IP<def> = ADDri_r32 %R0, 4, %STATUS<imp-def,dead>
	STRi32_r32 %R2, %R0<kill>, 0; mem:Volatile ST4[%lsr.iv](tbaa=!2)
	%R3<def> = ADDri_r32 %R3<kill>, 1, %STATUS<imp-def,dead>
	%R0<def,dead> = CMPrr_r32 %R3, %R1, %STATUS<imp-def>
	%R0<def> = MOVi32rr %IP<kill>
	BCC <BB#3>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#3(0x7c000000 / 0x80000000 = 96.88%) BB#4(0x04000000 / 0x80000000 = 3.12%)

Ifcvt: function (0) 'matclr'

<----------------->
Analyzing block 0
BB#0: 
    Live Ins: %R0 %R1
	%SP<def,tied2> = STRi64_pmd %LR, %SP<tied0>, -8; flags: FrameSetup
	%FP<def> = ADDri_r32 %SP, 8, %STATUS<imp-def>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	GID %CONFIG<imp-def>
	%R2<def> = MOVFS32_core %CONFIG<kill>, %D1<imp-def>
	%R3<def> = MOVi32rr %R2, %D1<imp-use,kill>, %D1<imp-def>
	%R3<def,tied1> = MOVTi32ri %R3<tied0>, 72, %D1<imp-use,kill>, %D1<imp-def>
	STRi64 %D1, %FP, -8; mem:ST4[FixedStack1] ST4[FixedStack0]
	%CONFIG<def> = MOVTS32_core %R3, %D1<imp-use,kill>
	GIE %CONFIG<imp-use,kill>
    Successors according to CFG: BB#1(?%)

<----------------->
Analyzing block 1
BB#1: derived from LLVM BB %entry
    Live Ins: %R0 %R1
    Predecessors according to CFG: BB#0
	%R1<def> = IMULrr_r32 %R1<kill>, %R1, %STATUS<imp-def,dead>
	%R2<def,dead> = CMPri_r32 %R1, 0, %STATUS<imp-def>
	BCC <BB#4>, 0, %STATUS<imp-use>
    Successors according to CFG: BB#4(0x30000000 / 0x80000000 = 37.50%) BB#2(0x50000000 / 0x80000000 = 62.50%)

<----------------->
Analyzing block 4
BB#4: derived from LLVM BB %for.end
    Predecessors according to CFG: BB#1 BB#3
	%R0<def> = LDRi32_r32 %FP, -4; mem:LD4[FixedStack0]
	GID
	%CONFIG<def> = MOVTS32_core %R0<kill>
	GIE %CONFIG<imp-use,kill>
	%LR<def> = LDRi64 %SP, 8; flags: FrameSetup
	%SP<def> = ADDri_r32 %SP, 8, %STATUS<imp-def>
	JR32 %LR

<----------------->
Analyzing block 2
BB#2: derived from LLVM BB %for.body.preheader
    Live Ins: %R0 %R1
    Predecessors according to CFG: BB#1
	%R2<def> = MOVi32ri 0
	%R3<def> = MOVi32rr %R2
    Successors according to CFG: BB#3(?%)

<----------------->
Analyzing block 3
BB#3: derived from LLVM BB %for.body
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#2 BB#3
	%IP<def> = ADDri_r32 %R0, 4, %STATUS<imp-def,dead>
	STRi32_r32 %R2, %R0<kill>, 0; mem:Volatile ST4[%lsr.iv](tbaa=!2)
	%R3<def> = ADDri_r32 %R3<kill>, 1, %STATUS<imp-def,dead>
	%R0<def,dead> = CMPrr_r32 %R3, %R1, %STATUS<imp-def>
	%R0<def> = MOVi32rr %IP<kill>
	BCC <BB#3>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#3(0x7c000000 / 0x80000000 = 96.88%) BB#4(0x04000000 / 0x80000000 = 3.12%)
# *** IR Dump After If Converter ***:
# Machine code for function matclr: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=4, align=4, at location [SP-4]
  fi#1: size=4, align=8, at location [SP-8]
Function Live Ins: %R0, %R1

BB#0: 
    Live Ins: %R0 %R1
	%SP<def,tied2> = STRi64_pmd %LR, %SP<tied0>, -8; flags: FrameSetup
	%FP<def> = ADDri_r32 %SP, 8, %STATUS<imp-def>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	GID %CONFIG<imp-def>
	%R2<def> = MOVFS32_core %CONFIG<kill>, %D1<imp-def>
	%R3<def> = MOVi32rr %R2, %D1<imp-use,kill>, %D1<imp-def>
	%R3<def,tied1> = MOVTi32ri %R3<tied0>, 72, %D1<imp-use,kill>, %D1<imp-def>
	STRi64 %D1, %FP, -8; mem:ST4[FixedStack1] ST4[FixedStack0]
	%CONFIG<def> = MOVTS32_core %R3, %D1<imp-use,kill>
	GIE %CONFIG<imp-use,kill>
    Successors according to CFG: BB#1(?%)

BB#1: derived from LLVM BB %entry
    Live Ins: %R0 %R1
    Predecessors according to CFG: BB#0
	%R1<def> = IMULrr_r32 %R1<kill>, %R1, %STATUS<imp-def,dead>
	%R2<def,dead> = CMPri_r32 %R1, 0, %STATUS<imp-def>
	BCC <BB#4>, 0, %STATUS<imp-use>
    Successors according to CFG: BB#4(0x30000000 / 0x80000000 = 37.50%) BB#2(0x50000000 / 0x80000000 = 62.50%)

BB#2: derived from LLVM BB %for.body.preheader
    Live Ins: %R0 %R1
    Predecessors according to CFG: BB#1
	%R2<def> = MOVi32ri 0
	%R3<def> = MOVi32rr %R2
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %for.body
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#2 BB#3
	%IP<def> = ADDri_r32 %R0, 4, %STATUS<imp-def,dead>
	STRi32_r32 %R2, %R0<kill>, 0; mem:Volatile ST4[%lsr.iv](tbaa=!2)
	%R3<def> = ADDri_r32 %R3<kill>, 1, %STATUS<imp-def,dead>
	%R0<def,dead> = CMPrr_r32 %R3, %R1, %STATUS<imp-def>
	%R0<def> = MOVi32rr %IP<kill>
	BCC <BB#3>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#3(0x7c000000 / 0x80000000 = 96.88%) BB#4(0x04000000 / 0x80000000 = 3.12%)

BB#4: derived from LLVM BB %for.end
    Predecessors according to CFG: BB#1 BB#3
	%R0<def> = LDRi32_r32 %FP, -4; mem:LD4[FixedStack0]
	GID
	%CONFIG<def> = MOVTS32_core %R0<kill>
	GIE %CONFIG<imp-use,kill>
	%LR<def> = LDRi64 %SP, 8; flags: FrameSetup
	%SP<def> = ADDri_r32 %SP, 8, %STATUS<imp-def>
	JR32 %LR

# End machine code for function matclr.

# *** IR Dump Before Post RA top-down list latency scheduler ***:
# Machine code for function matclr: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=4, align=4, at location [SP-4]
  fi#1: size=4, align=8, at location [SP-8]
Function Live Ins: %R0, %R1

BB#0: 
    Live Ins: %R0 %R1
	%SP<def,tied2> = STRi64_pmd %LR, %SP<tied0>, -8; flags: FrameSetup
	%FP<def> = ADDri_r32 %SP, 8, %STATUS<imp-def>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	GID %CONFIG<imp-def>
	%R2<def> = MOVFS32_core %CONFIG<kill>, %D1<imp-def>
	%R3<def> = MOVi32rr %R2, %D1<imp-use,kill>, %D1<imp-def>
	%R3<def,tied1> = MOVTi32ri %R3<tied0>, 72, %D1<imp-use,kill>, %D1<imp-def>
	STRi64 %D1, %FP, -8; mem:ST4[FixedStack1] ST4[FixedStack0]
	%CONFIG<def> = MOVTS32_core %R3, %D1<imp-use,kill>
	GIE %CONFIG<imp-use,kill>
    Successors according to CFG: BB#1(?%)

BB#1: derived from LLVM BB %entry
    Live Ins: %R0 %R1
    Predecessors according to CFG: BB#0
	%R1<def> = IMULrr_r32 %R1<kill>, %R1, %STATUS<imp-def,dead>
	%R2<def,dead> = CMPri_r32 %R1, 0, %STATUS<imp-def>
	BCC <BB#4>, 0, %STATUS<imp-use>
    Successors according to CFG: BB#4(0x30000000 / 0x80000000 = 37.50%) BB#2(0x50000000 / 0x80000000 = 62.50%)

BB#2: derived from LLVM BB %for.body.preheader
    Live Ins: %R0 %R1
    Predecessors according to CFG: BB#1
	%R2<def> = MOVi32ri 0
	%R3<def> = MOVi32rr %R2
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %for.body
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#2 BB#3
	%IP<def> = ADDri_r32 %R0, 4, %STATUS<imp-def,dead>
	STRi32_r32 %R2, %R0<kill>, 0; mem:Volatile ST4[%lsr.iv](tbaa=!2)
	%R3<def> = ADDri_r32 %R3<kill>, 1, %STATUS<imp-def,dead>
	%R0<def,dead> = CMPrr_r32 %R3, %R1, %STATUS<imp-def>
	%R0<def> = MOVi32rr %IP<kill>
	BCC <BB#3>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#3(0x7c000000 / 0x80000000 = 96.88%) BB#4(0x04000000 / 0x80000000 = 3.12%)

BB#4: derived from LLVM BB %for.end
    Predecessors according to CFG: BB#1 BB#3
	%R0<def> = LDRi32_r32 %FP, -4; mem:LD4[FixedStack0]
	GID
	%CONFIG<def> = MOVTS32_core %R0<kill>
	GIE %CONFIG<imp-use,kill>
	%LR<def> = LDRi64 %SP, 8; flags: FrameSetup
	%SP<def> = ADDri_r32 %SP, 8, %STATUS<imp-def>
	JR32 %LR

# End machine code for function matclr.

PostRAScheduler
Using scoreboard hazard recognizer: Depth = 8
AntiDep Critical-Path Registers:
********** List Scheduling **********
*** Final schedule ***

	Def Groups:
	Use Groups: CONFIG=g0->g156(last-use)
Observe:   GIE %CONFIG<imp-use,kill>
	Regs: CONFIG=g156->g0(region live-out)
Global memory object and new barrier chain: SU(5).
Global memory object and new barrier chain: SU(2).
Global memory object and new barrier chain: SU(1).
Global memory object and new barrier chain: SU(0).

===== Aggressive anti-dependency breaking
Available regs:  CMESHROUTE COREID DEBUGCMD DEBUGSTATUS FSTATUS ILAT ILATCL ILATST IMASK IP IPEND IRET LC LE LS MEMPROTECT MEMSTATUS MESHCONFIG MULTICAST PC RESETCORE RMESHROUTE SP STATUS XMESHROUTE ZERO A1 A2 A3 A4 CTIMER0 CTIMER1 D1 D5 D6 D8 D9 D10 D11 D12 D13 D14 D15 D16 D17 D18 D19 D20 D21 D22 D23 D24 D25 D26 D27 D28 D29 D30 D31 R2 R3 R9 R10 R11 R12 R13 R14 R16 R17 R18 R19 R20 R21 R22 R23 R24 R25 R26 R27 R28 R29 R30 R31 R32 R33 R34 R35 R36 R37 R38 R39 R40 R41 R42 R43 R44 R45 R46 R47 R48 R49 R50 R51 R52 R53 R54 R55 R56 R57 R58 R59 R60 R61 R62 R63 V1 V2 V3 V4 V5 V8 DMA0CONFIG DMA1CONFIG DMA0COUNT DMA1COUNT DMA0DSTADDR DMA1DSTADDR DMA0SRCADDR DMA1SRCADDR DMA0STATUS DMA1STATUS DMA0STRIDE DMA1STRIDE DMA0AUTO0 DMA0AUTO1 DMA1AUTO0 DMA1AUTO1
Anti:   %CONFIG<def> = MOVTS32_core %R3, %D1<imp-use,kill>
	Def Groups: CONFIG=g0
	Antidep reg: CONFIG (non-allocatable)
	Use Groups: R3=g0->g157(last-use) D1=g0->g158(last-use) R2->g159(last-use)
Anti:   STRi64 %D1, %FP, -8; mem:ST4[FixedStack1] ST4[FixedStack0]
	Def Groups:
	Use Groups: D1=g158 FP=g0
Anti:   %R3<def,tied1> = MOVTi32ri %R3<tied0>, 72, %D1<imp-use,kill>, %D1<imp-def>
	Def Groups: R3=g157->g158(via D1) D1=g158->g159(via R2)->g159(via R3)
	Antidep reg: R3 (passthru)
	Antidep reg: D1 (passthru)
	Use Groups: R3=g159 D1=g159
Anti:   %R3<def> = MOVi32rr %R2, %D1<imp-use,kill>, %D1<imp-def>
	Def Groups: R3=g159->g159(via D1) D1=g159->g159(via R2)->g159(via R3)
	Antidep reg: D1 (passthru)
	Antidep reg: R3 (passthru)
	Use Groups: R2=g159 D1=g159
Anti:   %R2<def> = MOVFS32_core %CONFIG<kill>, %D1<imp-def>
	Def Groups: R2=g159->g159(via D1) D1=g159->g159(via R2)->g159(via R3)
	Use Groups: CONFIG=g0->g160(last-use)
Anti:   GID %CONFIG<imp-def>
	Def Groups: CONFIG=g160
	Use Groups:
********** List Scheduling **********
SU(0):   GID %CONFIG<imp-def>
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 20
  Successors:
   out  SU(5): Latency=1
   data SU(1): Latency=1 Reg=%CONFIG
   ord  SU(1): Latency=0

SU(1):   %R2<def> = MOVFS32_core %CONFIG<kill>, %D1<imp-def>
  # preds left       : 2
  # succs left       : 6
  # rdefs left       : 0
  Latency            : 5
  Depth              : 1
  Height             : 19
  Predecessors:
   data SU(0): Latency=1 Reg=%CONFIG
   ord  SU(0): Latency=0
  Successors:
   out  SU(2): Latency=1
   data SU(2): Latency=2 Reg=%R2
   data SU(2): Latency=5 Reg=%D1
   out  SU(2): Latency=1
   anti SU(5): Latency=0
   ord  SU(2): Latency=0

SU(2):   %R3<def> = MOVi32rr %R2, %D1<imp-use,kill>, %D1<imp-def>
  # preds left       : 5
  # succs left       : 6
  # rdefs left       : 0
  Latency            : 5
  Depth              : 6
  Height             : 14
  Predecessors:
   out  SU(1): Latency=1
   data SU(1): Latency=2 Reg=%R2
   data SU(1): Latency=5 Reg=%D1
   out  SU(1): Latency=1
   ord  SU(1): Latency=0
  Successors:
   out  SU(3): Latency=1
   out  SU(3): Latency=1
   data SU(3): Latency=2 Reg=%R3
   data SU(3): Latency=5 Reg=%D1
   ord  SU(5): Latency=0
   ord  SU(4): Latency=0

SU(3):   %R3<def,tied1> = MOVTi32ri %R3<tied0>, 72, %D1<imp-use,kill>, %D1<imp-def>
  # preds left       : 4
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 5
  Depth              : 11
  Height             : 9
  Predecessors:
   out  SU(2): Latency=1
   out  SU(2): Latency=1
   data SU(2): Latency=2 Reg=%R3
   data SU(2): Latency=5 Reg=%D1
  Successors:
   data SU(5): Latency=2 Reg=%R3
   data SU(5): Latency=5 Reg=%D1
   data SU(4): Latency=5 Reg=%D1

SU(4):   STRi64 %D1, %FP, -8; mem:ST4[FixedStack1] ST4[FixedStack0]
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 5
  Depth              : 16
  Height             : 4
  Predecessors:
   data SU(3): Latency=5 Reg=%D1
   ord  SU(2): Latency=0
  Successors:
   ord  SU(5): Latency=0

SU(5):   %CONFIG<def> = MOVTS32_core %R3, %D1<imp-use,kill>
  # preds left       : 6
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 5
  Depth              : 16
  Height             : 4
  Predecessors:
   ord  SU(4): Latency=0
   data SU(3): Latency=2 Reg=%R3
   data SU(3): Latency=5 Reg=%D1
   ord  SU(2): Latency=0
   anti SU(1): Latency=0
   out  SU(0): Latency=1
  Successors:
   ord  ExitSU *: Latency=4


*** Examining Available
*** Scheduling [0]: SU(0):   GID %CONFIG<imp-def>
Scoreboard:
	00000000000000000000000000000000
Scoreboard:
	00000000000000000000000000000000
*** Max instructions per cycle 0

*** Examining Available
*** Scheduling [1]: SU(1):   %R2<def> = MOVFS32_core %CONFIG<kill>, %D1<imp-def>
Scoreboard:
	00000000000000000000000000000000
Scoreboard:
	00000000000000000000000000000001
	00000000000000000000000000000010
	00000000000000000000000000000100
	00000000000000000000000000001000
	00000000000000000000000000010000
*** Max instructions per cycle 1

*** Examining Available
*** Stall in cycle 2

*** Examining Available
*** Stall in cycle 3

*** Examining Available
*** Stall in cycle 4

*** Examining Available
*** Stall in cycle 5

*** Examining Available
*** Scheduling [6]: SU(2):   %R3<def> = MOVi32rr %R2, %D1<imp-use,kill>, %D1<imp-def>
Scoreboard:
	00000000000000000000000000000000
Scoreboard:
	00000000000000000000000000000001
	00000000000000000000000000000010
	00000000000000000000000000000100
	00000000000000000000000000001000
	00000000000000000000000000010000
*** Max instructions per cycle 6

*** Examining Available
*** Stall in cycle 7

*** Examining Available
*** Stall in cycle 8

*** Examining Available
*** Stall in cycle 9

*** Examining Available
*** Stall in cycle 10

*** Examining Available
*** Scheduling [11]: SU(3):   %R3<def,tied1> = MOVTi32ri %R3<tied0>, 72, %D1<imp-use,kill>, %D1<imp-def>
Scoreboard:
	00000000000000000000000000000000
Scoreboard:
	00000000000000000000000000000001
	00000000000000000000000000000010
	00000000000000000000000000000100
	00000000000000000000000000001000
	00000000000000000000000000010000
*** Max instructions per cycle 11

*** Examining Available
*** Stall in cycle 12

*** Examining Available
*** Stall in cycle 13

*** Examining Available
*** Stall in cycle 14

*** Examining Available
*** Stall in cycle 15

*** Examining Available
*** Scheduling [16]: SU(4):   STRi64 %D1, %FP, -8; mem:ST4[FixedStack1] ST4[FixedStack0]
Scoreboard:
	00000000000000000000000000000000
Scoreboard:
	00000000000000000000000000000001
	00000000000000000000000000000010
	00000000000000000000000000000100
	00000000000000000000000000001000
	00000000000000000000000000010000
*** Max instructions per cycle 16

*** Examining Available
*** Scheduling [17]: SU(5):   %CONFIG<def> = MOVTS32_core %R3, %D1<imp-use,kill>
Scoreboard:
	00000000000000000000000000000000
Scoreboard:
	00000000000000000000000000000011
	00000000000000000000000000000110
	00000000000000000000000000001100
	00000000000000000000000000011000
	00000000000000000000000000010000
*** Max instructions per cycle 17
*** Final schedule ***
SU(0):   GID %CONFIG<imp-def>
SU(1):   %R2<def> = MOVFS32_core %CONFIG<kill>, %D1<imp-def>
SU(2):   %R3<def> = MOVi32rr %R2, %D1<imp-use,kill>, %D1<imp-def>
SU(3):   %R3<def,tied1> = MOVTi32ri %R3<tied0>, 72, %D1<imp-use,kill>, %D1<imp-def>
SU(4):   STRi64 %D1, %FP, -8; mem:ST4[FixedStack1] ST4[FixedStack0]
SU(5):   %CONFIG<def> = MOVTS32_core %R3, %D1<imp-use,kill>

	Def Groups:
	Use Groups:
Observe:   CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	Regs:
********** List Scheduling **********
*** Final schedule ***

	Def Groups:
	Use Groups:
Observe:   CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	Regs:
Global memory object and new barrier chain: SU(0).

===== Aggressive anti-dependency breaking
Available regs:  CMESHROUTE CONFIG COREID DEBUGCMD DEBUGSTATUS FSTATUS ILAT ILATCL ILATST IMASK IP IPEND IRET LC LE LS MEMPROTECT MEMSTATUS MESHCONFIG MULTICAST PC RESETCORE RMESHROUTE SP STATUS XMESHROUTE ZERO A1 A2 A3 A4 CTIMER0 CTIMER1 D1 D5 D6 D8 D9 D10 D11 D12 D13 D14 D15 D16 D17 D18 D19 D20 D21 D22 D23 D24 D25 D26 D27 D28 D29 D30 D31 R2 R3 R9 R10 R11 R12 R13 R14 R16 R17 R18 R19 R20 R21 R22 R23 R24 R25 R26 R27 R28 R29 R30 R31 R32 R33 R34 R35 R36 R37 R38 R39 R40 R41 R42 R43 R44 R45 R46 R47 R48 R49 R50 R51 R52 R53 R54 R55 R56 R57 R58 R59 R60 R61 R62 R63 V1 V2 V3 V4 V5 V8 DMA0CONFIG DMA1CONFIG DMA0COUNT DMA1COUNT DMA0DSTADDR DMA1DSTADDR DMA0SRCADDR DMA1SRCADDR DMA0STATUS DMA1STATUS DMA0STRIDE DMA1STRIDE DMA0AUTO0 DMA0AUTO1 DMA1AUTO0 DMA1AUTO1
Anti:   %FP<def> = ADDri_r32 %SP, 8, %STATUS<imp-def>; flags: FrameSetup
	Dead Def: STATUS->g161
	Def Groups: FP=g0 STATUS=g161
	Use Groups: SP=g0->g162(last-use)
Anti:   %SP<def,tied2> = STRi64_pmd %LR, %SP<tied0>, -8; flags: FrameSetup
	Def Groups: SP=g162
	Use Groups: LR=g0 SP=g162
********** List Scheduling **********
SU(0):   %SP<def,tied2> = STRi64_pmd %LR, %SP<tied0>, -8; flags: FrameSetup
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 5
  Depth              : 0
  Height             : 2
  Successors:
   data SU(1): Latency=2 Reg=%SP

SU(1):   %FP<def> = ADDri_r32 %SP, 8, %STATUS<imp-def>; flags: FrameSetup
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 5
  Depth              : 2
  Height             : 0
  Predecessors:
   data SU(0): Latency=2 Reg=%SP


*** Examining Available
*** Scheduling [0]: SU(0):   %SP<def,tied2> = STRi64_pmd %LR, %SP<tied0>, -8; flags: FrameSetup
Scoreboard:
	00000000000000000000000000000000
Scoreboard:
	00000000000000000000000000000001
	00000000000000000000000000000010
	00000000000000000000000000000100
	00000000000000000000000000001000
	00000000000000000000000000010000
*** Max instructions per cycle 0

*** Examining Available
*** Stall in cycle 1

*** Examining Available
*** Scheduling [2]: SU(1):   %FP<def> = ADDri_r32 %SP, 8, %STATUS<imp-def>; flags: FrameSetup
Scoreboard:
	00000000000000000000000000000000
Scoreboard:
	00000000000000000000000000000101
	00000000000000000000000000001010
	00000000000000000000000000010100
	00000000000000000000000000001000
	00000000000000000000000000010000
*** Max instructions per cycle 2
*** Final schedule ***
SU(0):   %SP<def,tied2> = STRi64_pmd %LR, %SP<tied0>, -8; flags: FrameSetup
SU(1):   %FP<def> = ADDri_r32 %SP, 8, %STATUS<imp-def>; flags: FrameSetup

Fixup kills for BB#0
Fixing %physreg73 in   %CONFIG<def> = MOVTS32_core %R3<kill>, %D1<imp-use,kill>
Fixing %physreg73<tied0> in   %R3<def,tied1> = MOVTi32ri %R3<kill,tied0>, 72, %D1<imp-use,kill>, %D1<imp-def>
Fixing %physreg72 in   %R3<def> = MOVi32rr %R2<kill>, %D1<imp-use,kill>, %D1<imp-def>
********** List Scheduling **********
*** Final schedule ***

	Def Groups:
	Use Groups: STATUS=g0->g156(last-use)
Observe:   BCC <BB#4>, 0, %STATUS<imp-use>
	Regs: STATUS=g156->g0(region live-out)

===== Aggressive anti-dependency breaking
Available regs:  CMESHROUTE CONFIG COREID DEBUGCMD DEBUGSTATUS FSTATUS ILAT ILATCL ILATST IMASK IP IPEND IRET LC LE LS MEMPROTECT MEMSTATUS MESHCONFIG MULTICAST PC RESETCORE RMESHROUTE SP XMESHROUTE ZERO A1 A2 A3 A4 CTIMER0 CTIMER1 D1 D5 D6 D8 D9 D10 D11 D12 D13 D14 D15 D16 D17 D18 D19 D20 D21 D22 D23 D24 D25 D26 D27 D28 D29 D30 D31 R2 R3 R9 R10 R11 R12 R13 R14 R16 R17 R18 R19 R20 R21 R22 R23 R24 R25 R26 R27 R28 R29 R30 R31 R32 R33 R34 R35 R36 R37 R38 R39 R40 R41 R42 R43 R44 R45 R46 R47 R48 R49 R50 R51 R52 R53 R54 R55 R56 R57 R58 R59 R60 R61 R62 R63 V1 V2 V3 V4 V5 V8 DMA0CONFIG DMA1CONFIG DMA0COUNT DMA1COUNT DMA0DSTADDR DMA1DSTADDR DMA0SRCADDR DMA1SRCADDR DMA0STATUS DMA1STATUS DMA0STRIDE DMA1STRIDE DMA0AUTO0 DMA0AUTO1 DMA1AUTO0 DMA1AUTO1
Anti:   %R2<def,dead> = CMPri_r32 %R1, 0, %STATUS<imp-def>
	Dead Def: R2->g157
	Def Groups: R2=g157 STATUS=g0
	Antidep reg: STATUS (non-allocatable)
	Use Groups: R1=g0
Anti:   %R1<def> = IMULrr_r32 %R1<kill>, %R1, %STATUS<imp-def,dead>
	Dead Def: STATUS->g158
	Def Groups: R1=g0->g0(via D0) STATUS=g158
	Use Groups: R1=g0 R1=g0
********** List Scheduling **********
SU(0):   %R1<def> = IMULrr_r32 %R1<kill>, %R1, %STATUS<imp-def,dead>
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 5
  Depth              : 0
  Height             : 7
  Successors:
   ord  ExitSU *: Latency=4
   data SU(1): Latency=2 Reg=%R1
   out  SU(1): Latency=1

SU(1):   %R2<def,dead> = CMPri_r32 %R1, 0, %STATUS<imp-def>
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 5
  Depth              : 2
  Height             : 5
  Predecessors:
   data SU(0): Latency=2 Reg=%R1
   out  SU(0): Latency=1
  Successors:
   ord  ExitSU *: Latency=5


*** Examining Available
*** Scheduling [0]: SU(0):   %R1<def> = IMULrr_r32 %R1<kill>, %R1, %STATUS<imp-def,dead>
Scoreboard:
	00000000000000000000000000000000
Scoreboard:
	00000000000000000000000000000001
	00000000000000000000000000000010
	00000000000000000000000000000100
	00000000000000000000000000001000
	00000000000000000000000000010000
*** Max instructions per cycle 0

*** Examining Available
*** Stall in cycle 1

*** Examining Available
*** Scheduling [2]: SU(1):   %R2<def,dead> = CMPri_r32 %R1, 0, %STATUS<imp-def>
Scoreboard:
	00000000000000000000000000000000
Scoreboard:
	00000000000000000000000000000101
	00000000000000000000000000001010
	00000000000000000000000000010100
	00000000000000000000000000001000
	00000000000000000000000000010000
*** Max instructions per cycle 2
*** Final schedule ***
SU(0):   %R1<def> = IMULrr_r32 %R1<kill>, %R1, %STATUS<imp-def,dead>
SU(1):   %R2<def,dead> = CMPri_r32 %R1, 0, %STATUS<imp-def>

Fixup kills for BB#1
Global memory object and new barrier chain: SU(1).

===== Aggressive anti-dependency breaking
Available regs:  CMESHROUTE CONFIG COREID DEBUGCMD DEBUGSTATUS FSTATUS ILAT ILATCL ILATST IMASK IP IPEND IRET LC LE LS MEMPROTECT MEMSTATUS MESHCONFIG MULTICAST PC RESETCORE RMESHROUTE SP STATUS XMESHROUTE ZERO A1 A2 A3 A4 CTIMER0 CTIMER1 D5 D6 D8 D9 D10 D11 D12 D13 D14 D15 D16 D17 D18 D19 D20 D21 D22 D23 D24 D25 D26 D27 D28 D29 D30 D31 R9 R10 R11 R12 R13 R14 R16 R17 R18 R19 R20 R21 R22 R23 R24 R25 R26 R27 R28 R29 R30 R31 R32 R33 R34 R35 R36 R37 R38 R39 R40 R41 R42 R43 R44 R45 R46 R47 R48 R49 R50 R51 R52 R53 R54 R55 R56 R57 R58 R59 R60 R61 R62 R63 V1 V2 V3 V4 V5 V8 DMA0CONFIG DMA1CONFIG DMA0COUNT DMA1COUNT DMA0DSTADDR DMA1DSTADDR DMA0SRCADDR DMA1SRCADDR DMA0STATUS DMA1STATUS DMA0STRIDE DMA1STRIDE DMA0AUTO0 DMA0AUTO1 DMA1AUTO0 DMA1AUTO1
Anti:   %R3<def> = MOVi32rr %R2
	Def Groups: R3=g0->g0(via D1)
	Use Groups: R2=g0
Anti:   %R2<def> = MOVi32ri 0
	Def Groups: R2=g0->g0(via D1)
	Use Groups:
********** List Scheduling **********
SU(0):   %R2<def> = MOVi32ri 0
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 5
  Depth              : 0
  Height             : 6
  Successors:
   ord  ExitSU *: Latency=4
   data SU(1): Latency=2 Reg=%R2

SU(1):   %R3<def> = MOVi32rr %R2
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 5
  Depth              : 2
  Height             : 4
  Predecessors:
   data SU(0): Latency=2 Reg=%R2
  Successors:
   ord  ExitSU *: Latency=4


*** Examining Available
*** Scheduling [0]: SU(0):   %R2<def> = MOVi32ri 0
Scoreboard:
	00000000000000000000000000000000
Scoreboard:
	00000000000000000000000000000001
	00000000000000000000000000000010
	00000000000000000000000000000100
	00000000000000000000000000001000
	00000000000000000000000000010000
*** Max instructions per cycle 0

*** Examining Available
*** Stall in cycle 1

*** Examining Available
*** Scheduling [2]: SU(1):   %R3<def> = MOVi32rr %R2
Scoreboard:
	00000000000000000000000000000000
Scoreboard:
	00000000000000000000000000000101
	00000000000000000000000000001010
	00000000000000000000000000010100
	00000000000000000000000000001000
	00000000000000000000000000010000
*** Max instructions per cycle 2
*** Final schedule ***
SU(0):   %R2<def> = MOVi32ri 0
SU(1):   %R3<def> = MOVi32rr %R2

Fixup kills for BB#2
********** List Scheduling **********
*** Final schedule ***

	Def Groups:
	Use Groups: STATUS=g0->g156(last-use)
Observe:   BCC <BB#3>, 8, %STATUS<imp-use>
	Regs: STATUS=g156->g0(region live-out)
Global memory object and new barrier chain: SU(4).
Global memory object and new barrier chain: SU(1).

===== Aggressive anti-dependency breaking
Available regs:  CMESHROUTE CONFIG COREID DEBUGCMD DEBUGSTATUS FSTATUS ILAT ILATCL ILATST IMASK IP IPEND IRET LC LE LS MEMPROTECT MEMSTATUS MESHCONFIG MULTICAST PC RESETCORE RMESHROUTE SP XMESHROUTE ZERO A1 A2 A3 A4 CTIMER0 CTIMER1 D5 D6 D8 D9 D10 D11 D12 D13 D14 D15 D16 D17 D18 D19 D20 D21 D22 D23 D24 D25 D26 D27 D28 D29 D30 D31 R9 R10 R11 R12 R13 R14 R16 R17 R18 R19 R20 R21 R22 R23 R24 R25 R26 R27 R28 R29 R30 R31 R32 R33 R34 R35 R36 R37 R38 R39 R40 R41 R42 R43 R44 R45 R46 R47 R48 R49 R50 R51 R52 R53 R54 R55 R56 R57 R58 R59 R60 R61 R62 R63 V1 V2 V3 V4 V5 V8 DMA0CONFIG DMA1CONFIG DMA0COUNT DMA1COUNT DMA0DSTADDR DMA1DSTADDR DMA0SRCADDR DMA1SRCADDR DMA0STATUS DMA1STATUS DMA0STRIDE DMA1STRIDE DMA0AUTO0 DMA0AUTO1 DMA1AUTO0 DMA1AUTO1
Anti:   %R0<def> = MOVi32rr %IP<kill>
	Def Groups: R0=g0->g0(via D0)
	Antidep reg: R0	Use Groups: IP=g0->g157(last-use)
Anti:   %R0<def,dead> = CMPrr_r32 %R3, %R1, %STATUS<imp-def>
	Def Groups: R0=g0->g0(via D0) STATUS=g0
	Antidep reg: STATUS (non-allocatable)
	Antidep reg: R0 (zero group)
	Use Groups: R3=g0 R1=g0
Anti:   %R3<def> = ADDri_r32 %R3<kill>, 1, %STATUS<imp-def,dead>
	Dead Def: STATUS->g158
	Def Groups: R3=g0->g0(via D1) STATUS=g158
	Use Groups: R3=g0
Anti:   STRi32_r32 %R2, %R0<kill>, 0; mem:Volatile ST4[%lsr.iv](tbaa=!2)
	Def Groups:
	Use Groups: R2=g0 R0=g0
Anti:   %IP<def> = ADDri_r32 %R0, 4, %STATUS<imp-def,dead>
	Dead Def: STATUS->g159
	Def Groups: IP=g157 STATUS=g159
	Use Groups: R0=g0
********** List Scheduling **********
SU(0):   %IP<def> = ADDri_r32 %R0, 4, %STATUS<imp-def,dead>
  # preds left       : 0
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 5
  Depth              : 0
  Height             : 6
  Successors:
   data SU(4): Latency=2 Reg=%IP
   out  SU(3): Latency=1
   anti SU(4): Latency=0
   anti SU(3): Latency=0

SU(1):   STRi32_r32 %R2, %R0<kill>, 0; mem:Volatile ST4[%lsr.iv](tbaa=!2)
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 5
  Depth              : 0
  Height             : 5
  Successors:
   anti SU(4): Latency=0
   anti SU(3): Latency=0
   ord  SU(4): Latency=0

SU(2):   %R3<def> = ADDri_r32 %R3<kill>, 1, %STATUS<imp-def,dead>
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 5
  Depth              : 0
  Height             : 7
  Successors:
   ord  ExitSU *: Latency=4
   data SU(3): Latency=2 Reg=%R3
   out  SU(3): Latency=1

SU(3):   %R0<def,dead> = CMPrr_r32 %R3, %R1, %STATUS<imp-def>
  # preds left       : 5
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 5
  Depth              : 2
  Height             : 5
  Predecessors:
   data SU(2): Latency=2 Reg=%R3
   out  SU(2): Latency=1
   anti SU(1): Latency=0
   out  SU(0): Latency=1
   anti SU(0): Latency=0
  Successors:
   out  SU(4): Latency=1
   ord  ExitSU *: Latency=5

SU(4):   %R0<def> = MOVi32rr %IP<kill>
  # preds left       : 5
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 5
  Depth              : 3
  Height             : 4
  Predecessors:
   out  SU(3): Latency=1
   anti SU(1): Latency=0
   ord  SU(1): Latency=0
   data SU(0): Latency=2 Reg=%IP
   anti SU(0): Latency=0
  Successors:
   ord  ExitSU *: Latency=4


*** Examining Available
*** Scheduling [0]: SU(2):   %R3<def> = ADDri_r32 %R3<kill>, 1, %STATUS<imp-def,dead>
Scoreboard:
	00000000000000000000000000000000
Scoreboard:
	00000000000000000000000000000001
	00000000000000000000000000000010
	00000000000000000000000000000100
	00000000000000000000000000001000
	00000000000000000000000000010000
*** Max instructions per cycle 0

*** Examining Available
*** Scheduling [1]: SU(0):   %IP<def> = ADDri_r32 %R0, 4, %STATUS<imp-def,dead>
Scoreboard:
	00000000000000000000000000000000
Scoreboard:
	00000000000000000000000000000011
	00000000000000000000000000000110
	00000000000000000000000000001100
	00000000000000000000000000011000
	00000000000000000000000000010000
*** Max instructions per cycle 1

*** Examining Available
*** Scheduling [2]: SU(1):   STRi32_r32 %R2, %R0<kill>, 0; mem:Volatile ST4[%lsr.iv](tbaa=!2)
Scoreboard:
	00000000000000000000000000000000
Scoreboard:
	00000000000000000000000000000111
	00000000000000000000000000001110
	00000000000000000000000000011100
	00000000000000000000000000011000
	00000000000000000000000000010000
*** Max instructions per cycle 2

*** Examining Available
*** Scheduling [3]: SU(3):   %R0<def,dead> = CMPrr_r32 %R3, %R1, %STATUS<imp-def>
Scoreboard:
	00000000000000000000000000000000
Scoreboard:
	00000000000000000000000000001111
	00000000000000000000000000011110
	00000000000000000000000000011100
	00000000000000000000000000011000
	00000000000000000000000000010000
*** Max instructions per cycle 3

*** Examining Available
*** Scheduling [4]: SU(4):   %R0<def> = MOVi32rr %IP<kill>
Scoreboard:
	00000000000000000000000000000000
Scoreboard:
	00000000000000000000000000011111
	00000000000000000000000000011110
	00000000000000000000000000011100
	00000000000000000000000000011000
	00000000000000000000000000010000
*** Max instructions per cycle 4
*** Final schedule ***
SU(2):   %R3<def> = ADDri_r32 %R3<kill>, 1, %STATUS<imp-def,dead>
SU(0):   %IP<def> = ADDri_r32 %R0, 4, %STATUS<imp-def,dead>
SU(1):   STRi32_r32 %R2, %R0<kill>, 0; mem:Volatile ST4[%lsr.iv](tbaa=!2)
SU(3):   %R0<def,dead> = CMPrr_r32 %R3, %R1, %STATUS<imp-def>
SU(4):   %R0<def> = MOVi32rr %IP<kill>

Fixup kills for BB#3
********** List Scheduling **********
*** Final schedule ***

	Def Groups:
	Use Groups: LR=g0
Observe:   JR32 %LR
	Regs:
Global memory object and new barrier chain: SU(0).

===== Aggressive anti-dependency breaking
Available regs:  CMESHROUTE CONFIG COREID DEBUGCMD DEBUGSTATUS FSTATUS ILAT ILATCL ILATST IMASK IP IPEND IRET LC LE LS MEMPROTECT MEMSTATUS MESHCONFIG MULTICAST PC RESETCORE RMESHROUTE SP STATUS XMESHROUTE ZERO A1 A2 A3 A4 CTIMER0 CTIMER1 D0 D1 D5 D6 D8 D9 D10 D11 D12 D13 D14 D15 D16 D17 D18 D19 D20 D21 D22 D23 D24 D25 D26 D27 D28 D29 D30 D31 R0 R1 R2 R3 R9 R10 R11 R12 R13 R14 R16 R17 R18 R19 R20 R21 R22 R23 R24 R25 R26 R27 R28 R29 R30 R31 R32 R33 R34 R35 R36 R37 R38 R39 R40 R41 R42 R43 R44 R45 R46 R47 R48 R49 R50 R51 R52 R53 R54 R55 R56 R57 R58 R59 R60 R61 R62 R63 V1 V2 V3 V4 V5 V8 DMA0CONFIG DMA1CONFIG DMA0COUNT DMA1COUNT DMA0DSTADDR DMA1DSTADDR DMA0SRCADDR DMA1SRCADDR DMA0STATUS DMA1STATUS DMA0STRIDE DMA1STRIDE DMA0AUTO0 DMA0AUTO1 DMA1AUTO0 DMA1AUTO1
Anti:   %SP<def> = ADDri_r32 %SP, 8, %STATUS<imp-def>
	Dead Def: SP->g156
	Dead Def: STATUS->g157
	Def Groups: SP=g156 STATUS=g157
	Antidep reg: SP (non-allocatable)
	Use Groups: SP=g156->g158(last-use)
Anti:   %LR<def> = LDRi64 %SP, 8; flags: FrameSetup
	Def Groups: LR=g0
	Use Groups: SP=g158
********** List Scheduling **********
SU(0):   %LR<def> = LDRi64 %SP, 8; flags: FrameSetup
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 6
  Depth              : 0
  Height             : 6
  Successors:
   ord  ExitSU *: Latency=6
   anti SU(1): Latency=0

SU(1):   %SP<def> = ADDri_r32 %SP, 8, %STATUS<imp-def>
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 5
  Depth              : 0
  Height             : 0
  Predecessors:
   anti SU(0): Latency=0


*** Examining Available
*** Scheduling [0]: SU(0):   %LR<def> = LDRi64 %SP, 8; flags: FrameSetup
Scoreboard:
	00000000000000000000000000000000
Scoreboard:
	00000000000000000000000000000001
	00000000000000000000000000000010
	00000000000000000000000000000100
	00000000000000000000000000001000
	00000000000000000000000000010000
	00000000000000000000000000100000
*** Max instructions per cycle 0

*** Examining Available
*** Scheduling [1]: SU(1):   %SP<def> = ADDri_r32 %SP, 8, %STATUS<imp-def>
Scoreboard:
	00000000000000000000000000000000
Scoreboard:
	00000000000000000000000000000011
	00000000000000000000000000000110
	00000000000000000000000000001100
	00000000000000000000000000011000
	00000000000000000000000000110000
*** Max instructions per cycle 1
*** Final schedule ***
SU(0):   %LR<def> = LDRi64 %SP, 8; flags: FrameSetup
SU(1):   %SP<def> = ADDri_r32 %SP, 8, %STATUS<imp-def>

	Def Groups:
	Use Groups: CONFIG=g0->g159(last-use)
Observe:   GIE %CONFIG<imp-use,kill>
	Regs: CONFIG=g159->g0(region live-out) SP=g158->g0(region live-out)
Global memory object and new barrier chain: SU(2).
Global memory object and new barrier chain: SU(1).

===== Aggressive anti-dependency breaking
Available regs:  CMESHROUTE COREID DEBUGCMD DEBUGSTATUS FSTATUS ILAT ILATCL ILATST IMASK IP IPEND IRET LC LE LR LS MEMPROTECT MEMSTATUS MESHCONFIG MULTICAST PC RESETCORE RMESHROUTE STATUS XMESHROUTE ZERO A1 A2 A3 A4 CTIMER0 CTIMER1 D0 D1 D5 D6 D8 D9 D10 D11 D12 D13 D14 D15 D16 D17 D18 D19 D20 D21 D22 D23 D24 D25 D26 D27 D28 D29 D30 D31 R0 R1 R2 R3 R9 R10 R11 R12 R13 R14 R16 R17 R18 R19 R20 R21 R22 R23 R24 R25 R26 R27 R28 R29 R30 R31 R32 R33 R34 R35 R36 R37 R38 R39 R40 R41 R42 R43 R44 R45 R46 R47 R48 R49 R50 R51 R52 R53 R54 R55 R56 R57 R58 R59 R60 R61 R62 R63 V1 V2 V3 V4 V5 V8 DMA0CONFIG DMA1CONFIG DMA0COUNT DMA1COUNT DMA0DSTADDR DMA1DSTADDR DMA0SRCADDR DMA1SRCADDR DMA0STATUS DMA1STATUS DMA0STRIDE DMA1STRIDE DMA0AUTO0 DMA0AUTO1 DMA1AUTO0 DMA1AUTO1
Anti:   %CONFIG<def> = MOVTS32_core %R0<kill>
	Def Groups: CONFIG=g0
	Use Groups: R0=g0->g160(last-use)
Anti:   GID
	Def Groups:
	Use Groups:
Anti:   %R0<def> = LDRi32_r32 %FP, -4; mem:LD4[FixedStack0]
	Def Groups: R0=g160
	Use Groups: FP=g0
********** List Scheduling **********
SU(0):   %R0<def> = LDRi32_r32 %FP, -4; mem:LD4[FixedStack0]
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 6
  Depth              : 0
  Height             : 8
  Successors:
   data SU(2): Latency=4 Reg=%R0
   ord  SU(1): Latency=0

SU(1):   GID
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 4
  Predecessors:
   ord  SU(0): Latency=0
  Successors:
   ord  SU(2): Latency=0

SU(2):   %CONFIG<def> = MOVTS32_core %R0<kill>
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 5
  Depth              : 4
  Height             : 4
  Predecessors:
   ord  SU(1): Latency=0
   data SU(0): Latency=4 Reg=%R0
  Successors:
   ord  ExitSU *: Latency=4


*** Examining Available
*** Scheduling [0]: SU(0):   %R0<def> = LDRi32_r32 %FP, -4; mem:LD4[FixedStack0]
Scoreboard:
	00000000000000000000000000000000
Scoreboard:
	00000000000000000000000000000001
	00000000000000000000000000000010
	00000000000000000000000000000100
	00000000000000000000000000001000
	00000000000000000000000000010000
	00000000000000000000000000100000
*** Max instructions per cycle 0

*** Examining Available
*** Scheduling [1]: SU(1):   GID
Scoreboard:
	00000000000000000000000000000000
Scoreboard:
	00000000000000000000000000000010
	00000000000000000000000000000100
	00000000000000000000000000001000
	00000000000000000000000000010000
	00000000000000000000000000100000
*** Max instructions per cycle 1

*** Examining Available
*** Stall in cycle 2

*** Examining Available
*** Stall in cycle 3

*** Examining Available
*** Scheduling [4]: SU(2):   %CONFIG<def> = MOVTS32_core %R0<kill>
Scoreboard:
	00000000000000000000000000000000
Scoreboard:
	00000000000000000000000000010001
	00000000000000000000000000100010
	00000000000000000000000000000100
	00000000000000000000000000001000
	00000000000000000000000000010000
*** Max instructions per cycle 4
*** Final schedule ***
SU(0):   %R0<def> = LDRi32_r32 %FP, -4; mem:LD4[FixedStack0]
SU(1):   GID
SU(2):   %CONFIG<def> = MOVTS32_core %R0<kill>

Fixup kills for BB#4
# *** IR Dump After Post RA top-down list latency scheduler ***:
# Machine code for function matclr: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=4, align=4, at location [SP-4]
  fi#1: size=4, align=8, at location [SP-8]
Function Live Ins: %R0, %R1

BB#0: 
    Live Ins: %R0 %R1
	%SP<def,tied2> = STRi64_pmd %LR, %SP<tied0>, -8; flags: FrameSetup
	%FP<def> = ADDri_r32 %SP, 8, %STATUS<imp-def>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	GID %CONFIG<imp-def>
	%R2<def> = MOVFS32_core %CONFIG<kill>, %D1<imp-def>
	%R3<def> = MOVi32rr %R2<kill>, %D1<imp-use,kill>, %D1<imp-def>
	%R3<def,tied1> = MOVTi32ri %R3<kill,tied0>, 72, %D1<imp-use,kill>, %D1<imp-def>
	STRi64 %D1, %FP, -8; mem:ST4[FixedStack1] ST4[FixedStack0]
	%CONFIG<def> = MOVTS32_core %R3<kill>, %D1<imp-use,kill>
	GIE %CONFIG<imp-use,kill>
    Successors according to CFG: BB#1(?%)

BB#1: derived from LLVM BB %entry
    Live Ins: %R0 %R1
    Predecessors according to CFG: BB#0
	%R1<def> = IMULrr_r32 %R1<kill>, %R1, %STATUS<imp-def,dead>
	%R2<def,dead> = CMPri_r32 %R1, 0, %STATUS<imp-def>
	BCC <BB#4>, 0, %STATUS<imp-use>
    Successors according to CFG: BB#4(0x30000000 / 0x80000000 = 37.50%) BB#2(0x50000000 / 0x80000000 = 62.50%)

BB#2: derived from LLVM BB %for.body.preheader
    Live Ins: %R0 %R1
    Predecessors according to CFG: BB#1
	%R2<def> = MOVi32ri 0
	%R3<def> = MOVi32rr %R2
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %for.body
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#2 BB#3
	%R3<def> = ADDri_r32 %R3<kill>, 1, %STATUS<imp-def,dead>
	%IP<def> = ADDri_r32 %R0, 4, %STATUS<imp-def,dead>
	STRi32_r32 %R2, %R0<kill>, 0; mem:Volatile ST4[%lsr.iv](tbaa=!2)
	%R0<def,dead> = CMPrr_r32 %R3, %R1, %STATUS<imp-def>
	%R0<def> = MOVi32rr %IP<kill>
	BCC <BB#3>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#3(0x7c000000 / 0x80000000 = 96.88%) BB#4(0x04000000 / 0x80000000 = 3.12%)

BB#4: derived from LLVM BB %for.end
    Predecessors according to CFG: BB#1 BB#3
	%R0<def> = LDRi32_r32 %FP, -4; mem:LD4[FixedStack0]
	GID
	%CONFIG<def> = MOVTS32_core %R0<kill>
	GIE %CONFIG<imp-use,kill>
	%LR<def> = LDRi64 %SP, 8; flags: FrameSetup
	%SP<def> = ADDri_r32 %SP, 8, %STATUS<imp-def>
	JR32 %LR

# End machine code for function matclr.

# *** IR Dump Before Analyze Machine Code For Garbage Collection ***:
# Machine code for function matclr: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=4, align=4, at location [SP-4]
  fi#1: size=4, align=8, at location [SP-8]
Function Live Ins: %R0, %R1

BB#0: 
    Live Ins: %R0 %R1
	%SP<def,tied2> = STRi64_pmd %LR, %SP<tied0>, -8; flags: FrameSetup
	%FP<def> = ADDri_r32 %SP, 8, %STATUS<imp-def>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	GID %CONFIG<imp-def>
	%R2<def> = MOVFS32_core %CONFIG<kill>, %D1<imp-def>
	%R3<def> = MOVi32rr %R2<kill>, %D1<imp-use,kill>, %D1<imp-def>
	%R3<def,tied1> = MOVTi32ri %R3<kill,tied0>, 72, %D1<imp-use,kill>, %D1<imp-def>
	STRi64 %D1, %FP, -8; mem:ST4[FixedStack1] ST4[FixedStack0]
	%CONFIG<def> = MOVTS32_core %R3<kill>, %D1<imp-use,kill>
	GIE %CONFIG<imp-use,kill>
    Successors according to CFG: BB#1(?%)

BB#1: derived from LLVM BB %entry
    Live Ins: %R0 %R1
    Predecessors according to CFG: BB#0
	%R1<def> = IMULrr_r32 %R1<kill>, %R1, %STATUS<imp-def,dead>
	%R2<def,dead> = CMPri_r32 %R1, 0, %STATUS<imp-def>
	BCC <BB#4>, 0, %STATUS<imp-use>
    Successors according to CFG: BB#4(0x30000000 / 0x80000000 = 37.50%) BB#2(0x50000000 / 0x80000000 = 62.50%)

BB#2: derived from LLVM BB %for.body.preheader
    Live Ins: %R0 %R1
    Predecessors according to CFG: BB#1
	%R2<def> = MOVi32ri 0
	%R3<def> = MOVi32rr %R2
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %for.body
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#2 BB#3
	%R3<def> = ADDri_r32 %R3<kill>, 1, %STATUS<imp-def,dead>
	%IP<def> = ADDri_r32 %R0, 4, %STATUS<imp-def,dead>
	STRi32_r32 %R2, %R0<kill>, 0; mem:Volatile ST4[%lsr.iv](tbaa=!2)
	%R0<def,dead> = CMPrr_r32 %R3, %R1, %STATUS<imp-def>
	%R0<def> = MOVi32rr %IP<kill>
	BCC <BB#3>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#3(0x7c000000 / 0x80000000 = 96.88%) BB#4(0x04000000 / 0x80000000 = 3.12%)

BB#4: derived from LLVM BB %for.end
    Predecessors according to CFG: BB#1 BB#3
	%R0<def> = LDRi32_r32 %FP, -4; mem:LD4[FixedStack0]
	GID
	%CONFIG<def> = MOVTS32_core %R0<kill>
	GIE %CONFIG<imp-use,kill>
	%LR<def> = LDRi64 %SP, 8; flags: FrameSetup
	%SP<def> = ADDri_r32 %SP, 8, %STATUS<imp-def>
	JR32 %LR

# End machine code for function matclr.

# *** IR Dump After Analyze Machine Code For Garbage Collection ***:
# Machine code for function matclr: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=4, align=4, at location [SP-4]
  fi#1: size=4, align=8, at location [SP-8]
Function Live Ins: %R0, %R1

BB#0: 
    Live Ins: %R0 %R1
	%SP<def,tied2> = STRi64_pmd %LR, %SP<tied0>, -8; flags: FrameSetup
	%FP<def> = ADDri_r32 %SP, 8, %STATUS<imp-def>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	GID %CONFIG<imp-def>
	%R2<def> = MOVFS32_core %CONFIG<kill>, %D1<imp-def>
	%R3<def> = MOVi32rr %R2<kill>, %D1<imp-use,kill>, %D1<imp-def>
	%R3<def,tied1> = MOVTi32ri %R3<kill,tied0>, 72, %D1<imp-use,kill>, %D1<imp-def>
	STRi64 %D1, %FP, -8; mem:ST4[FixedStack1] ST4[FixedStack0]
	%CONFIG<def> = MOVTS32_core %R3<kill>, %D1<imp-use,kill>
	GIE %CONFIG<imp-use,kill>
    Successors according to CFG: BB#1(?%)

BB#1: derived from LLVM BB %entry
    Live Ins: %R0 %R1
    Predecessors according to CFG: BB#0
	%R1<def> = IMULrr_r32 %R1<kill>, %R1, %STATUS<imp-def,dead>
	%R2<def,dead> = CMPri_r32 %R1, 0, %STATUS<imp-def>
	BCC <BB#4>, 0, %STATUS<imp-use>
    Successors according to CFG: BB#4(0x30000000 / 0x80000000 = 37.50%) BB#2(0x50000000 / 0x80000000 = 62.50%)

BB#2: derived from LLVM BB %for.body.preheader
    Live Ins: %R0 %R1
    Predecessors according to CFG: BB#1
	%R2<def> = MOVi32ri 0
	%R3<def> = MOVi32rr %R2
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %for.body
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#2 BB#3
	%R3<def> = ADDri_r32 %R3<kill>, 1, %STATUS<imp-def,dead>
	%IP<def> = ADDri_r32 %R0, 4, %STATUS<imp-def,dead>
	STRi32_r32 %R2, %R0<kill>, 0; mem:Volatile ST4[%lsr.iv](tbaa=!2)
	%R0<def,dead> = CMPrr_r32 %R3, %R1, %STATUS<imp-def>
	%R0<def> = MOVi32rr %IP<kill>
	BCC <BB#3>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#3(0x7c000000 / 0x80000000 = 96.88%) BB#4(0x04000000 / 0x80000000 = 3.12%)

BB#4: derived from LLVM BB %for.end
    Predecessors according to CFG: BB#1 BB#3
	%R0<def> = LDRi32_r32 %FP, -4; mem:LD4[FixedStack0]
	GID
	%CONFIG<def> = MOVTS32_core %R0<kill>
	GIE %CONFIG<imp-use,kill>
	%LR<def> = LDRi64 %SP, 8; flags: FrameSetup
	%SP<def> = ADDri_r32 %SP, 8, %STATUS<imp-def>
	JR32 %LR

# End machine code for function matclr.


block-frequency: matclr
=======================
reverse-post-order-traversal
 - 0: BB0
 - 1: BB1[entry]
 - 2: BB2[for.body.preheader]
 - 3: BB3[for.body]
 - 4: BB4[for.end]
loop-detection
 - loop = BB3[for.body]
compute-mass-in-loop: BB3[for.body]*
 - node: BB3[for.body]
  => [backedge] weight = 2080374784
  => [  exit  ] weight = 67108864, succ = BB4[for.end]
  => mass:  ffffffffffffffff
  => assign f7ffffffffffffff (0800000000000000) [back] to BB3[for.body]
  => assign 0800000000000000 (0000000000000000) [exit] to BB4[for.end]
compute-loop-scale: BB3[for.body]*
 - exit-mass = 0800000000000000 (ffffffffffffffff - f7ffffffffffffff)
 - scale = 32.0
packaging-loop: BB3[for.body]*
 - node: BB3[for.body]
compute-mass-in-function
 - node: BB0
  => [ local  ] weight = 2147483648, succ = BB1[entry]
  => mass:  ffffffffffffffff
  => assign ffffffffffffffff (0000000000000000) to BB1[entry]
 - node: BB1[entry]
  => [ local  ] weight = 805306368, succ = BB4[for.end]
  => [ local  ] weight = 1342177280, succ = BB2[for.body.preheader]
  => mass:  ffffffffffffffff
  => assign 9fffffffffffffff (6000000000000000) to BB2[for.body.preheader]
  => assign 6000000000000000 (0000000000000000) to BB4[for.end]
 - node: BB2[for.body.preheader]
  => [ local  ] weight = 2147483648, succ = BB3[for.body]
  => mass:  9fffffffffffffff
  => assign 9fffffffffffffff (0000000000000000) to BB3[for.body]
 - node: BB3[for.body]
  => [ local  ] weight = 576460752303423488, succ = BB4[for.end]
  => mass:  9fffffffffffffff
  => assign 9fffffffffffffff (0000000000000000) to BB4[for.end]
 - node: BB4[for.end]
  => mass:  ffffffffffffffff
unwrap-loop-package: BB3[for.body]*: mass = 9fffffffffffffff, scale = 32.0
  => combined-scale = 20.0
 - BB3[for.body]: 1.0 => 20.0
float-to-int: min = 0.625, max = 20.0, factor = 12.8
 - BB0: float = 1.0, scaled = 12.8, int = 12
 - BB1[entry]: float = 1.0, scaled = 12.8, int = 12
 - BB2[for.body.preheader]: float = 0.625, scaled = 8.0, int = 8
 - BB3[for.body]: float = 20.0, scaled = 256.0, int = 255
 - BB4[for.end]: float = 1.0, scaled = 12.8, int = 12
block-frequency-info: matclr
 - BB0: float = 1.0, int = 12
 - BB1[entry]: float = 1.0, int = 12
 - BB2[for.body.preheader]: float = 0.625, int = 8
 - BB3[for.body]: float = 20.0, int = 255
 - BB4[for.end]: float = 1.0, int = 12

# *** IR Dump Before Branch Probability Basic Block Placement ***:
# Machine code for function matclr: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=4, align=4, at location [SP-4]
  fi#1: size=4, align=8, at location [SP-8]
Function Live Ins: %R0, %R1

BB#0: 
    Live Ins: %R0 %R1
	%SP<def,tied2> = STRi64_pmd %LR, %SP<tied0>, -8; flags: FrameSetup
	%FP<def> = ADDri_r32 %SP, 8, %STATUS<imp-def>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	GID %CONFIG<imp-def>
	%R2<def> = MOVFS32_core %CONFIG<kill>, %D1<imp-def>
	%R3<def> = MOVi32rr %R2<kill>, %D1<imp-use,kill>, %D1<imp-def>
	%R3<def,tied1> = MOVTi32ri %R3<kill,tied0>, 72, %D1<imp-use,kill>, %D1<imp-def>
	STRi64 %D1, %FP, -8; mem:ST4[FixedStack1] ST4[FixedStack0]
	%CONFIG<def> = MOVTS32_core %R3<kill>, %D1<imp-use,kill>
	GIE %CONFIG<imp-use,kill>
    Successors according to CFG: BB#1(?%)

BB#1: derived from LLVM BB %entry
    Live Ins: %R0 %R1
    Predecessors according to CFG: BB#0
	%R1<def> = IMULrr_r32 %R1<kill>, %R1, %STATUS<imp-def,dead>
	%R2<def,dead> = CMPri_r32 %R1, 0, %STATUS<imp-def>
	BCC <BB#4>, 0, %STATUS<imp-use>
    Successors according to CFG: BB#4(0x30000000 / 0x80000000 = 37.50%) BB#2(0x50000000 / 0x80000000 = 62.50%)

BB#2: derived from LLVM BB %for.body.preheader
    Live Ins: %R0 %R1
    Predecessors according to CFG: BB#1
	%R2<def> = MOVi32ri 0
	%R3<def> = MOVi32rr %R2
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %for.body
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#2 BB#3
	%R3<def> = ADDri_r32 %R3<kill>, 1, %STATUS<imp-def,dead>
	%IP<def> = ADDri_r32 %R0, 4, %STATUS<imp-def,dead>
	STRi32_r32 %R2, %R0<kill>, 0; mem:Volatile ST4[%lsr.iv](tbaa=!2)
	%R0<def,dead> = CMPrr_r32 %R3, %R1, %STATUS<imp-def>
	%R0<def> = MOVi32rr %IP<kill>
	BCC <BB#3>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#3(0x7c000000 / 0x80000000 = 96.88%) BB#4(0x04000000 / 0x80000000 = 3.12%)

BB#4: derived from LLVM BB %for.end
    Predecessors according to CFG: BB#1 BB#3
	%R0<def> = LDRi32_r32 %FP, -4; mem:LD4[FixedStack0]
	GID
	%CONFIG<def> = MOVTS32_core %R0<kill>
	GIE %CONFIG<imp-use,kill>
	%LR<def> = LDRi64 %SP, 8; flags: FrameSetup
	%SP<def> = ADDri_r32 %SP, 8, %STATUS<imp-def>
	JR32 %LR

# End machine code for function matclr.


<----------------->
Analyzing block 0
BB#0: 
    Live Ins: %R0 %R1
	%SP<def,tied2> = STRi64_pmd %LR, %SP<tied0>, -8; flags: FrameSetup
	%FP<def> = ADDri_r32 %SP, 8, %STATUS<imp-def>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	GID %CONFIG<imp-def>
	%R2<def> = MOVFS32_core %CONFIG<kill>, %D1<imp-def>
	%R3<def> = MOVi32rr %R2<kill>, %D1<imp-use,kill>, %D1<imp-def>
	%R3<def,tied1> = MOVTi32ri %R3<kill,tied0>, 72, %D1<imp-use,kill>, %D1<imp-def>
	STRi64 %D1, %FP, -8; mem:ST4[FixedStack1] ST4[FixedStack0]
	%CONFIG<def> = MOVTS32_core %R3<kill>, %D1<imp-use,kill>
	GIE %CONFIG<imp-use,kill>
    Successors according to CFG: BB#1(?%)

<----------------->
Analyzing block 0
BB#0: 
    Live Ins: %R0 %R1
	%SP<def,tied2> = STRi64_pmd %LR, %SP<tied0>, -8; flags: FrameSetup
	%FP<def> = ADDri_r32 %SP, 8, %STATUS<imp-def>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	GID %CONFIG<imp-def>
	%R2<def> = MOVFS32_core %CONFIG<kill>, %D1<imp-def>
	%R3<def> = MOVi32rr %R2<kill>, %D1<imp-use,kill>, %D1<imp-def>
	%R3<def,tied1> = MOVTi32ri %R3<kill,tied0>, 72, %D1<imp-use,kill>, %D1<imp-def>
	STRi64 %D1, %FP, -8; mem:ST4[FixedStack1] ST4[FixedStack0]
	%CONFIG<def> = MOVTS32_core %R3<kill>, %D1<imp-use,kill>
	GIE %CONFIG<imp-use,kill>
    Successors according to CFG: BB#1(?%)

<----------------->
Analyzing block 1
BB#1: derived from LLVM BB %entry
    Live Ins: %R0 %R1
    Predecessors according to CFG: BB#0
	%R1<def> = IMULrr_r32 %R1<kill>, %R1, %STATUS<imp-def,dead>
	%R2<def,dead> = CMPri_r32 %R1, 0, %STATUS<imp-def>
	BCC <BB#4>, 0, %STATUS<imp-use>
    Successors according to CFG: BB#4(0x30000000 / 0x80000000 = 37.50%) BB#2(0x50000000 / 0x80000000 = 62.50%)

<----------------->
Analyzing block 2
BB#2: derived from LLVM BB %for.body.preheader
    Live Ins: %R0 %R1
    Predecessors according to CFG: BB#1
	%R2<def> = MOVi32ri 0
	%R3<def> = MOVi32rr %R2
    Successors according to CFG: BB#3(?%)

<----------------->
Analyzing block 3
BB#3: derived from LLVM BB %for.body
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#2 BB#3
	%R3<def> = ADDri_r32 %R3<kill>, 1, %STATUS<imp-def,dead>
	%IP<def> = ADDri_r32 %R0, 4, %STATUS<imp-def,dead>
	STRi32_r32 %R2, %R0<kill>, 0; mem:Volatile ST4[%lsr.iv](tbaa=!2)
	%R0<def,dead> = CMPrr_r32 %R3, %R1, %STATUS<imp-def>
	%R0<def> = MOVi32rr %IP<kill>
	BCC <BB#3>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#3(0x7c000000 / 0x80000000 = 96.88%) BB#4(0x04000000 / 0x80000000 = 3.12%)

<----------------->
Analyzing block 4
BB#4: derived from LLVM BB %for.end
    Predecessors according to CFG: BB#1 BB#3
	%R0<def> = LDRi32_r32 %FP, -4; mem:LD4[FixedStack0]
	GID
	%CONFIG<def> = MOVTS32_core %R0<kill>
	GIE %CONFIG<imp-use,kill>
	%LR<def> = LDRi64 %SP, 8; flags: FrameSetup
	%SP<def> = ADDri_r32 %SP, 8, %STATUS<imp-def>
	JR32 %LR
Finding best loop exit for: BB#3 ('for.body')
    exiting: BB#3 ('for.body') -> BB#4 ('for.end') [L:0] (0.5833333333)
    No other candidate exit blocks, using loop header
Selecting best successor for: BB#3 ('for.body')
Finished forming chain for header block BB#3 ('for.body')
          ... BB#3 ('for.body')
Selecting best successor for: BB#0 ('(null)')
    Candidate: BB#1 ('entry'), probability: 0x80000000 / 0x80000000 = 100.00%
    Setting it as best candidate
    Selected: BB#1 ('entry')
Redoing tail duplication for Succ#1

<----------------->
Analyzing block 1
BB#1: derived from LLVM BB %entry
    Live Ins: %R0 %R1
    Predecessors according to CFG: BB#0
	%R1<def> = IMULrr_r32 %R1<kill>, %R1, %STATUS<imp-def,dead>
	%R2<def,dead> = CMPri_r32 %R1, 0, %STATUS<imp-def>
	BCC <BB#4>, 0, %STATUS<imp-use>
    Successors according to CFG: BB#4(0x30000000 / 0x80000000 = 37.50%) BB#2(0x50000000 / 0x80000000 = 62.50%)
Merging from BB#0 ('(null)') to BB#1 ('entry')
Selecting best successor for: BB#1 ('entry')
    Not a candidate: BB#4 ('for.end') -> 0x30000000 / 0x80000000 = 37.50% (prob) (non-cold CFG conflict)
    Candidate: BB#2 ('for.body.preheader'), probability: 0x50000000 / 0x80000000 = 62.50%
    Setting it as best candidate
    Selected: BB#2 ('for.body.preheader')
Redoing tail duplication for Succ#2
Merging from BB#1 ('entry') to BB#2 ('for.body.preheader')
Selecting best successor for: BB#2 ('for.body.preheader')
    Candidate: BB#3 ('for.body'), probability: 0x80000000 / 0x80000000 = 100.00%
    Setting it as best candidate
    Selected: BB#3 ('for.body')
Redoing tail duplication for Succ#3
Merging from BB#2 ('for.body.preheader') to BB#3 ('for.body')
Selecting best successor for: BB#3 ('for.body')
    Candidate: BB#4 ('for.end'), probability: 0x80000000 / 0x80000000 = 100.00%
    Setting it as best candidate
    Selected: BB#4 ('for.end')
Redoing tail duplication for Succ#4

<----------------->
Analyzing block 4
BB#4: derived from LLVM BB %for.end
    Predecessors according to CFG: BB#1 BB#3
	%R0<def> = LDRi32_r32 %FP, -4; mem:LD4[FixedStack0]
	GID
	%CONFIG<def> = MOVTS32_core %R0<kill>
	GIE %CONFIG<imp-use,kill>
	%LR<def> = LDRi64 %SP, 8; flags: FrameSetup
	%SP<def> = ADDri_r32 %SP, 8, %STATUS<imp-def>
	JR32 %LR
Merging from BB#3 ('for.body') to BB#4 ('for.end')
Selecting best successor for: BB#4 ('for.end')
Finished forming chain for header block BB#0 ('(null)')
[MBP] Function: matclr
Placing chain BB#0 ('(null)')
          ... BB#1 ('entry')

<----------------->
Analyzing block 0
BB#0: 
    Live Ins: %R0 %R1
	%SP<def,tied2> = STRi64_pmd %LR, %SP<tied0>, -8; flags: FrameSetup
	%FP<def> = ADDri_r32 %SP, 8, %STATUS<imp-def>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	GID %CONFIG<imp-def>
	%R2<def> = MOVFS32_core %CONFIG<kill>, %D1<imp-def>
	%R3<def> = MOVi32rr %R2<kill>, %D1<imp-use,kill>, %D1<imp-def>
	%R3<def,tied1> = MOVTi32ri %R3<kill,tied0>, 72, %D1<imp-use,kill>, %D1<imp-def>
	STRi64 %D1, %FP, -8; mem:ST4[FixedStack1] ST4[FixedStack0]
	%CONFIG<def> = MOVTS32_core %R3<kill>, %D1<imp-use,kill>
	GIE %CONFIG<imp-use,kill>
    Successors according to CFG: BB#1(?%)

<----------------->
Analyzing block 0
BB#0: 
    Live Ins: %R0 %R1
	%SP<def,tied2> = STRi64_pmd %LR, %SP<tied0>, -8; flags: FrameSetup
	%FP<def> = ADDri_r32 %SP, 8, %STATUS<imp-def>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	GID %CONFIG<imp-def>
	%R2<def> = MOVFS32_core %CONFIG<kill>, %D1<imp-def>
	%R3<def> = MOVi32rr %R2<kill>, %D1<imp-use,kill>, %D1<imp-def>
	%R3<def,tied1> = MOVTi32ri %R3<kill,tied0>, 72, %D1<imp-use,kill>, %D1<imp-def>
	STRi64 %D1, %FP, -8; mem:ST4[FixedStack1] ST4[FixedStack0]
	%CONFIG<def> = MOVTS32_core %R3<kill>, %D1<imp-use,kill>
	GIE %CONFIG<imp-use,kill>
    Successors according to CFG: BB#1(?%)

<----------------->
Analyzing block 0
BB#0: 
    Live Ins: %R0 %R1
	%SP<def,tied2> = STRi64_pmd %LR, %SP<tied0>, -8; flags: FrameSetup
	%FP<def> = ADDri_r32 %SP, 8, %STATUS<imp-def>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	GID %CONFIG<imp-def>
	%R2<def> = MOVFS32_core %CONFIG<kill>, %D1<imp-def>
	%R3<def> = MOVi32rr %R2<kill>, %D1<imp-use,kill>, %D1<imp-def>
	%R3<def,tied1> = MOVTi32ri %R3<kill,tied0>, 72, %D1<imp-use,kill>, %D1<imp-def>
	STRi64 %D1, %FP, -8; mem:ST4[FixedStack1] ST4[FixedStack0]
	%CONFIG<def> = MOVTS32_core %R3<kill>, %D1<imp-use,kill>
	GIE %CONFIG<imp-use,kill>
    Successors according to CFG: BB#1(?%)
          ... BB#2 ('for.body.preheader')

<----------------->
Analyzing block 1
BB#1: derived from LLVM BB %entry
    Live Ins: %R0 %R1
    Predecessors according to CFG: BB#0
	%R1<def> = IMULrr_r32 %R1<kill>, %R1, %STATUS<imp-def,dead>
	%R2<def,dead> = CMPri_r32 %R1, 0, %STATUS<imp-def>
	BCC <BB#4>, 0, %STATUS<imp-use>
    Successors according to CFG: BB#4(0x30000000 / 0x80000000 = 37.50%) BB#2(0x50000000 / 0x80000000 = 62.50%)

<----------------->
Analyzing block 1
BB#1: derived from LLVM BB %entry
    Live Ins: %R0 %R1
    Predecessors according to CFG: BB#0
	%R1<def> = IMULrr_r32 %R1<kill>, %R1, %STATUS<imp-def,dead>
	%R2<def,dead> = CMPri_r32 %R1, 0, %STATUS<imp-def>
	BCC <BB#4>, 0, %STATUS<imp-use>
    Successors according to CFG: BB#4(0x30000000 / 0x80000000 = 37.50%) BB#2(0x50000000 / 0x80000000 = 62.50%)

<----------------->
Analyzing block 1
BB#1: derived from LLVM BB %entry
    Live Ins: %R0 %R1
    Predecessors according to CFG: BB#0
	%R1<def> = IMULrr_r32 %R1<kill>, %R1, %STATUS<imp-def,dead>
	%R2<def,dead> = CMPri_r32 %R1, 0, %STATUS<imp-def>
	BCC <BB#4>, 0, %STATUS<imp-use>
    Successors according to CFG: BB#4(0x30000000 / 0x80000000 = 37.50%) BB#2(0x50000000 / 0x80000000 = 62.50%)
          ... BB#3 ('for.body')

<----------------->
Analyzing block 2
BB#2: derived from LLVM BB %for.body.preheader
    Live Ins: %R0 %R1
    Predecessors according to CFG: BB#1
	%R2<def> = MOVi32ri 0
	%R3<def> = MOVi32rr %R2
    Successors according to CFG: BB#3(?%)

<----------------->
Analyzing block 2
BB#2: derived from LLVM BB %for.body.preheader
    Live Ins: %R0 %R1
    Predecessors according to CFG: BB#1
	%R2<def> = MOVi32ri 0
	%R3<def> = MOVi32rr %R2
    Successors according to CFG: BB#3(?%)

<----------------->
Analyzing block 2
BB#2: derived from LLVM BB %for.body.preheader
    Live Ins: %R0 %R1
    Predecessors according to CFG: BB#1
	%R2<def> = MOVi32ri 0
	%R3<def> = MOVi32rr %R2
    Successors according to CFG: BB#3(?%)
          ... BB#4 ('for.end')

<----------------->
Analyzing block 3
BB#3: derived from LLVM BB %for.body
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#2 BB#3
	%R3<def> = ADDri_r32 %R3<kill>, 1, %STATUS<imp-def,dead>
	%IP<def> = ADDri_r32 %R0, 4, %STATUS<imp-def,dead>
	STRi32_r32 %R2, %R0<kill>, 0; mem:Volatile ST4[%lsr.iv](tbaa=!2)
	%R0<def,dead> = CMPrr_r32 %R3, %R1, %STATUS<imp-def>
	%R0<def> = MOVi32rr %IP<kill>
	BCC <BB#3>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#3(0x7c000000 / 0x80000000 = 96.88%) BB#4(0x04000000 / 0x80000000 = 3.12%)

<----------------->
Analyzing block 3
BB#3: derived from LLVM BB %for.body
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#2 BB#3
	%R3<def> = ADDri_r32 %R3<kill>, 1, %STATUS<imp-def,dead>
	%IP<def> = ADDri_r32 %R0, 4, %STATUS<imp-def,dead>
	STRi32_r32 %R2, %R0<kill>, 0; mem:Volatile ST4[%lsr.iv](tbaa=!2)
	%R0<def,dead> = CMPrr_r32 %R3, %R1, %STATUS<imp-def>
	%R0<def> = MOVi32rr %IP<kill>
	BCC <BB#3>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#3(0x7c000000 / 0x80000000 = 96.88%) BB#4(0x04000000 / 0x80000000 = 3.12%)

<----------------->
Analyzing block 3
BB#3: derived from LLVM BB %for.body
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#2 BB#3
	%R3<def> = ADDri_r32 %R3<kill>, 1, %STATUS<imp-def,dead>
	%IP<def> = ADDri_r32 %R0, 4, %STATUS<imp-def,dead>
	STRi32_r32 %R2, %R0<kill>, 0; mem:Volatile ST4[%lsr.iv](tbaa=!2)
	%R0<def,dead> = CMPrr_r32 %R3, %R1, %STATUS<imp-def>
	%R0<def> = MOVi32rr %IP<kill>
	BCC <BB#3>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#3(0x7c000000 / 0x80000000 = 96.88%) BB#4(0x04000000 / 0x80000000 = 3.12%)

<----------------->
Analyzing block 4
BB#4: derived from LLVM BB %for.end
    Predecessors according to CFG: BB#1 BB#3
	%R0<def> = LDRi32_r32 %FP, -4; mem:LD4[FixedStack0]
	GID
	%CONFIG<def> = MOVTS32_core %R0<kill>
	GIE %CONFIG<imp-use,kill>
	%LR<def> = LDRi64 %SP, 8; flags: FrameSetup
	%SP<def> = ADDri_r32 %SP, 8, %STATUS<imp-def>
	JR32 %LR

<----------------->
Analyzing block 0
BB#0: 
    Live Ins: %R0 %R1
	%SP<def,tied2> = STRi64_pmd %LR, %SP<tied0>, -8; flags: FrameSetup
	%FP<def> = ADDri_r32 %SP, 8, %STATUS<imp-def>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	GID %CONFIG<imp-def>
	%R2<def> = MOVFS32_core %CONFIG<kill>, %D1<imp-def>
	%R3<def> = MOVi32rr %R2<kill>, %D1<imp-use,kill>, %D1<imp-def>
	%R3<def,tied1> = MOVTi32ri %R3<kill,tied0>, 72, %D1<imp-use,kill>, %D1<imp-def>
	STRi64 %D1, %FP, -8; mem:ST4[FixedStack1] ST4[FixedStack0]
	%CONFIG<def> = MOVTS32_core %R3<kill>, %D1<imp-use,kill>
	GIE %CONFIG<imp-use,kill>
    Successors according to CFG: BB#1(?%)

<----------------->
Analyzing block 1
BB#1: derived from LLVM BB %entry
    Live Ins: %R0 %R1
    Predecessors according to CFG: BB#0
	%R1<def> = IMULrr_r32 %R1<kill>, %R1, %STATUS<imp-def,dead>
	%R2<def,dead> = CMPri_r32 %R1, 0, %STATUS<imp-def>
	BCC <BB#4>, 0, %STATUS<imp-use>
    Successors according to CFG: BB#4(0x30000000 / 0x80000000 = 37.50%) BB#2(0x50000000 / 0x80000000 = 62.50%)

<----------------->
Analyzing block 2
BB#2: derived from LLVM BB %for.body.preheader
    Live Ins: %R0 %R1
    Predecessors according to CFG: BB#1
	%R2<def> = MOVi32ri 0
	%R3<def> = MOVi32rr %R2
    Successors according to CFG: BB#3(?%)

<----------------->
Analyzing block 3
BB#3: derived from LLVM BB %for.body
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#2 BB#3
	%R3<def> = ADDri_r32 %R3<kill>, 1, %STATUS<imp-def,dead>
	%IP<def> = ADDri_r32 %R0, 4, %STATUS<imp-def,dead>
	STRi32_r32 %R2, %R0<kill>, 0; mem:Volatile ST4[%lsr.iv](tbaa=!2)
	%R0<def,dead> = CMPrr_r32 %R3, %R1, %STATUS<imp-def>
	%R0<def> = MOVi32rr %IP<kill>
	BCC <BB#3>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#3(0x7c000000 / 0x80000000 = 96.88%) BB#4(0x04000000 / 0x80000000 = 3.12%)

<----------------->
Analyzing block 4
BB#4: derived from LLVM BB %for.end
    Predecessors according to CFG: BB#1 BB#3
	%R0<def> = LDRi32_r32 %FP, -4; mem:LD4[FixedStack0]
	GID
	%CONFIG<def> = MOVTS32_core %R0<kill>
	GIE %CONFIG<imp-use,kill>
	%LR<def> = LDRi64 %SP, 8; flags: FrameSetup
	%SP<def> = ADDri_r32 %SP, 8, %STATUS<imp-def>
	JR32 %LR

<----------------->
Analyzing block 1
BB#1: derived from LLVM BB %entry
    Live Ins: %R0 %R1
    Predecessors according to CFG: BB#0
	%R1<def> = IMULrr_r32 %R1<kill>, %R1, %STATUS<imp-def,dead>
	%R2<def,dead> = CMPri_r32 %R1, 0, %STATUS<imp-def>
	BCC <BB#4>, 0, %STATUS<imp-use>
    Successors according to CFG: BB#4(0x30000000 / 0x80000000 = 37.50%) BB#2(0x50000000 / 0x80000000 = 62.50%)

<----------------->
Removing branches out of BB#1
# Machine code for function matclr: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=4, align=4, at location [SP-4]
  fi#1: size=4, align=8, at location [SP-8]
Function Live Ins: %R0, %R1

BB#0: 
    Live Ins: %R0 %R1
	%SP<def,tied2> = STRi64_pmd %LR, %SP<tied0>, -8; flags: FrameSetup
	%FP<def> = ADDri_r32 %SP, 8, %STATUS<imp-def>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	GID %CONFIG<imp-def>
	%R2<def> = MOVFS32_core %CONFIG<kill>, %D1<imp-def>
	%R3<def> = MOVi32rr %R2<kill>, %D1<imp-use,kill>, %D1<imp-def>
	%R3<def,tied1> = MOVTi32ri %R3<kill,tied0>, 72, %D1<imp-use,kill>, %D1<imp-def>
	STRi64 %D1, %FP, -8; mem:ST4[FixedStack1] ST4[FixedStack0]
	%CONFIG<def> = MOVTS32_core %R3<kill>, %D1<imp-use,kill>
	GIE %CONFIG<imp-use,kill>
    Successors according to CFG: BB#1(?%)

BB#1: derived from LLVM BB %entry
    Live Ins: %R0 %R1
    Predecessors according to CFG: BB#0
	%R1<def> = IMULrr_r32 %R1<kill>, %R1, %STATUS<imp-def,dead>
	%R2<def,dead> = CMPri_r32 %R1, 0, %STATUS<imp-def>
    Successors according to CFG: BB#4(0x30000000 / 0x80000000 = 37.50%) BB#2(0x50000000 / 0x80000000 = 62.50%)

BB#2: derived from LLVM BB %for.body.preheader
    Live Ins: %R0 %R1
    Predecessors according to CFG: BB#1
	%R2<def> = MOVi32ri 0
	%R3<def> = MOVi32rr %R2
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %for.body
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#2 BB#3
	%R3<def> = ADDri_r32 %R3<kill>, 1, %STATUS<imp-def,dead>
	%IP<def> = ADDri_r32 %R0, 4, %STATUS<imp-def,dead>
	STRi32_r32 %R2, %R0<kill>, 0; mem:Volatile ST4[%lsr.iv](tbaa=!2)
	%R0<def,dead> = CMPrr_r32 %R3, %R1, %STATUS<imp-def>
	%R0<def> = MOVi32rr %IP<kill>
	BCC <BB#3>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#3(0x7c000000 / 0x80000000 = 96.88%) BB#4(0x04000000 / 0x80000000 = 3.12%)

BB#4: derived from LLVM BB %for.end
    Predecessors according to CFG: BB#1 BB#3
	%R0<def> = LDRi32_r32 %FP, -4; mem:LD4[FixedStack0]
	GID
	%CONFIG<def> = MOVTS32_core %R0<kill>
	GIE %CONFIG<imp-use,kill>
	%LR<def> = LDRi64 %SP, 8; flags: FrameSetup
	%SP<def> = ADDri_r32 %SP, 8, %STATUS<imp-def>
	JR32 %LR

# End machine code for function matclr.


<----------------->
Inserting branch into BB#1
# Machine code for function matclr: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=4, align=4, at location [SP-4]
  fi#1: size=4, align=8, at location [SP-8]
Function Live Ins: %R0, %R1

BB#0: 
    Live Ins: %R0 %R1
	%SP<def,tied2> = STRi64_pmd %LR, %SP<tied0>, -8; flags: FrameSetup
	%FP<def> = ADDri_r32 %SP, 8, %STATUS<imp-def>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	GID %CONFIG<imp-def>
	%R2<def> = MOVFS32_core %CONFIG<kill>, %D1<imp-def>
	%R3<def> = MOVi32rr %R2<kill>, %D1<imp-use,kill>, %D1<imp-def>
	%R3<def,tied1> = MOVTi32ri %R3<kill,tied0>, 72, %D1<imp-use,kill>, %D1<imp-def>
	STRi64 %D1, %FP, -8; mem:ST4[FixedStack1] ST4[FixedStack0]
	%CONFIG<def> = MOVTS32_core %R3<kill>, %D1<imp-use,kill>
	GIE %CONFIG<imp-use,kill>
    Successors according to CFG: BB#1(?%)

BB#1: derived from LLVM BB %entry
    Live Ins: %R0 %R1
    Predecessors according to CFG: BB#0
	%R1<def> = IMULrr_r32 %R1<kill>, %R1, %STATUS<imp-def,dead>
	%R2<def,dead> = CMPri_r32 %R1, 0, %STATUS<imp-def>
	BCC <BB#2>, 1, %STATUS<imp-use>
    Successors according to CFG: BB#4(0x30000000 / 0x80000000 = 37.50%) BB#2(0x50000000 / 0x80000000 = 62.50%)

BB#2: derived from LLVM BB %for.body.preheader
    Live Ins: %R0 %R1
    Predecessors according to CFG: BB#1
	%R2<def> = MOVi32ri 0
	%R3<def> = MOVi32rr %R2
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %for.body
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#2 BB#3
	%R3<def> = ADDri_r32 %R3<kill>, 1, %STATUS<imp-def,dead>
	%IP<def> = ADDri_r32 %R0, 4, %STATUS<imp-def,dead>
	STRi32_r32 %R2, %R0<kill>, 0; mem:Volatile ST4[%lsr.iv](tbaa=!2)
	%R0<def,dead> = CMPrr_r32 %R3, %R1, %STATUS<imp-def>
	%R0<def> = MOVi32rr %IP<kill>
	BCC <BB#3>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#3(0x7c000000 / 0x80000000 = 96.88%) BB#4(0x04000000 / 0x80000000 = 3.12%)

BB#4: derived from LLVM BB %for.end
    Predecessors according to CFG: BB#1 BB#3
	%R0<def> = LDRi32_r32 %FP, -4; mem:LD4[FixedStack0]
	GID
	%CONFIG<def> = MOVTS32_core %R0<kill>
	GIE %CONFIG<imp-use,kill>
	%LR<def> = LDRi64 %SP, 8; flags: FrameSetup
	%SP<def> = ADDri_r32 %SP, 8, %STATUS<imp-def>
	JR32 %LR

# End machine code for function matclr.


<----------------->
Analyzing block 1
BB#1: derived from LLVM BB %entry
    Live Ins: %R0 %R1
    Predecessors according to CFG: BB#0
	%R1<def> = IMULrr_r32 %R1<kill>, %R1, %STATUS<imp-def,dead>
	%R2<def,dead> = CMPri_r32 %R1, 0, %STATUS<imp-def>
	BCC <BB#2>, 1, %STATUS<imp-use>
    Successors according to CFG: BB#4(0x30000000 / 0x80000000 = 37.50%) BB#2(0x50000000 / 0x80000000 = 62.50%)

<----------------->
Removing branches out of BB#1
# Machine code for function matclr: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=4, align=4, at location [SP-4]
  fi#1: size=4, align=8, at location [SP-8]
Function Live Ins: %R0, %R1

BB#0: 
    Live Ins: %R0 %R1
	%SP<def,tied2> = STRi64_pmd %LR, %SP<tied0>, -8; flags: FrameSetup
	%FP<def> = ADDri_r32 %SP, 8, %STATUS<imp-def>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	GID %CONFIG<imp-def>
	%R2<def> = MOVFS32_core %CONFIG<kill>, %D1<imp-def>
	%R3<def> = MOVi32rr %R2<kill>, %D1<imp-use,kill>, %D1<imp-def>
	%R3<def,tied1> = MOVTi32ri %R3<kill,tied0>, 72, %D1<imp-use,kill>, %D1<imp-def>
	STRi64 %D1, %FP, -8; mem:ST4[FixedStack1] ST4[FixedStack0]
	%CONFIG<def> = MOVTS32_core %R3<kill>, %D1<imp-use,kill>
	GIE %CONFIG<imp-use,kill>
    Successors according to CFG: BB#1(?%)

BB#1: derived from LLVM BB %entry
    Live Ins: %R0 %R1
    Predecessors according to CFG: BB#0
	%R1<def> = IMULrr_r32 %R1<kill>, %R1, %STATUS<imp-def,dead>
	%R2<def,dead> = CMPri_r32 %R1, 0, %STATUS<imp-def>
    Successors according to CFG: BB#4(0x30000000 / 0x80000000 = 37.50%) BB#2(0x50000000 / 0x80000000 = 62.50%)

BB#2: derived from LLVM BB %for.body.preheader
    Live Ins: %R0 %R1
    Predecessors according to CFG: BB#1
	%R2<def> = MOVi32ri 0
	%R3<def> = MOVi32rr %R2
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %for.body
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#2 BB#3
	%R3<def> = ADDri_r32 %R3<kill>, 1, %STATUS<imp-def,dead>
	%IP<def> = ADDri_r32 %R0, 4, %STATUS<imp-def,dead>
	STRi32_r32 %R2, %R0<kill>, 0; mem:Volatile ST4[%lsr.iv](tbaa=!2)
	%R0<def,dead> = CMPrr_r32 %R3, %R1, %STATUS<imp-def>
	%R0<def> = MOVi32rr %IP<kill>
	BCC <BB#3>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#3(0x7c000000 / 0x80000000 = 96.88%) BB#4(0x04000000 / 0x80000000 = 3.12%)

BB#4: derived from LLVM BB %for.end
    Predecessors according to CFG: BB#1 BB#3
	%R0<def> = LDRi32_r32 %FP, -4; mem:LD4[FixedStack0]
	GID
	%CONFIG<def> = MOVTS32_core %R0<kill>
	GIE %CONFIG<imp-use,kill>
	%LR<def> = LDRi64 %SP, 8; flags: FrameSetup
	%SP<def> = ADDri_r32 %SP, 8, %STATUS<imp-def>
	JR32 %LR

# End machine code for function matclr.


<----------------->
Inserting branch into BB#1
# Machine code for function matclr: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=4, align=4, at location [SP-4]
  fi#1: size=4, align=8, at location [SP-8]
Function Live Ins: %R0, %R1

BB#0: 
    Live Ins: %R0 %R1
	%SP<def,tied2> = STRi64_pmd %LR, %SP<tied0>, -8; flags: FrameSetup
	%FP<def> = ADDri_r32 %SP, 8, %STATUS<imp-def>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	GID %CONFIG<imp-def>
	%R2<def> = MOVFS32_core %CONFIG<kill>, %D1<imp-def>
	%R3<def> = MOVi32rr %R2<kill>, %D1<imp-use,kill>, %D1<imp-def>
	%R3<def,tied1> = MOVTi32ri %R3<kill,tied0>, 72, %D1<imp-use,kill>, %D1<imp-def>
	STRi64 %D1, %FP, -8; mem:ST4[FixedStack1] ST4[FixedStack0]
	%CONFIG<def> = MOVTS32_core %R3<kill>, %D1<imp-use,kill>
	GIE %CONFIG<imp-use,kill>
    Successors according to CFG: BB#1(?%)

BB#1: derived from LLVM BB %entry
    Live Ins: %R0 %R1
    Predecessors according to CFG: BB#0
	%R1<def> = IMULrr_r32 %R1<kill>, %R1, %STATUS<imp-def,dead>
	%R2<def,dead> = CMPri_r32 %R1, 0, %STATUS<imp-def>
	BCC <BB#4>, 0, %STATUS<imp-use>
    Successors according to CFG: BB#4(0x30000000 / 0x80000000 = 37.50%) BB#2(0x50000000 / 0x80000000 = 62.50%)

BB#2: derived from LLVM BB %for.body.preheader
    Live Ins: %R0 %R1
    Predecessors according to CFG: BB#1
	%R2<def> = MOVi32ri 0
	%R3<def> = MOVi32rr %R2
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %for.body
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#2 BB#3
	%R3<def> = ADDri_r32 %R3<kill>, 1, %STATUS<imp-def,dead>
	%IP<def> = ADDri_r32 %R0, 4, %STATUS<imp-def,dead>
	STRi32_r32 %R2, %R0<kill>, 0; mem:Volatile ST4[%lsr.iv](tbaa=!2)
	%R0<def,dead> = CMPrr_r32 %R3, %R1, %STATUS<imp-def>
	%R0<def> = MOVi32rr %IP<kill>
	BCC <BB#3>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#3(0x7c000000 / 0x80000000 = 96.88%) BB#4(0x04000000 / 0x80000000 = 3.12%)

BB#4: derived from LLVM BB %for.end
    Predecessors according to CFG: BB#1 BB#3
	%R0<def> = LDRi32_r32 %FP, -4; mem:LD4[FixedStack0]
	GID
	%CONFIG<def> = MOVTS32_core %R0<kill>
	GIE %CONFIG<imp-use,kill>
	%LR<def> = LDRi64 %SP, 8; flags: FrameSetup
	%SP<def> = ADDri_r32 %SP, 8, %STATUS<imp-def>
	JR32 %LR

# End machine code for function matclr.


<----------------->
Analyzing block 0
BB#0: 
    Live Ins: %R0 %R1
	%SP<def,tied2> = STRi64_pmd %LR, %SP<tied0>, -8; flags: FrameSetup
	%FP<def> = ADDri_r32 %SP, 8, %STATUS<imp-def>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	GID %CONFIG<imp-def>
	%R2<def> = MOVFS32_core %CONFIG<kill>, %D1<imp-def>
	%R3<def> = MOVi32rr %R2<kill>, %D1<imp-use,kill>, %D1<imp-def>
	%R3<def,tied1> = MOVTi32ri %R3<kill,tied0>, 72, %D1<imp-use,kill>, %D1<imp-def>
	STRi64 %D1, %FP, -8; mem:ST4[FixedStack1] ST4[FixedStack0]
	%CONFIG<def> = MOVTS32_core %R3<kill>, %D1<imp-use,kill>
	GIE %CONFIG<imp-use,kill>
    Successors according to CFG: BB#1(?%)

<----------------->
Analyzing block 1
BB#1: derived from LLVM BB %entry
    Live Ins: %R0 %R1
    Predecessors according to CFG: BB#0
	%R1<def> = IMULrr_r32 %R1<kill>, %R1, %STATUS<imp-def,dead>
	%R2<def,dead> = CMPri_r32 %R1, 0, %STATUS<imp-def>
	BCC <BB#4>, 0, %STATUS<imp-use>
    Successors according to CFG: BB#4(0x30000000 / 0x80000000 = 37.50%) BB#2(0x50000000 / 0x80000000 = 62.50%)

<----------------->
Analyzing block 2
BB#2: derived from LLVM BB %for.body.preheader
    Live Ins: %R0 %R1
    Predecessors according to CFG: BB#1
	%R2<def> = MOVi32ri 0
	%R3<def> = MOVi32rr %R2
    Successors according to CFG: BB#3(?%)

<----------------->
Analyzing block 3
BB#3: derived from LLVM BB %for.body
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#2 BB#3
	%R3<def> = ADDri_r32 %R3<kill>, 1, %STATUS<imp-def,dead>
	%IP<def> = ADDri_r32 %R0, 4, %STATUS<imp-def,dead>
	STRi32_r32 %R2, %R0<kill>, 0; mem:Volatile ST4[%lsr.iv](tbaa=!2)
	%R0<def,dead> = CMPrr_r32 %R3, %R1, %STATUS<imp-def>
	%R0<def> = MOVi32rr %IP<kill>
	BCC <BB#3>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#3(0x7c000000 / 0x80000000 = 96.88%) BB#4(0x04000000 / 0x80000000 = 3.12%)

<----------------->
Analyzing block 4
BB#4: derived from LLVM BB %for.end
    Predecessors according to CFG: BB#1 BB#3
	%R0<def> = LDRi32_r32 %FP, -4; mem:LD4[FixedStack0]
	GID
	%CONFIG<def> = MOVTS32_core %R0<kill>
	GIE %CONFIG<imp-use,kill>
	%LR<def> = LDRi64 %SP, 8; flags: FrameSetup
	%SP<def> = ADDri_r32 %SP, 8, %STATUS<imp-def>
	JR32 %LR
# *** IR Dump After Branch Probability Basic Block Placement ***:
# Machine code for function matclr: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=4, align=4, at location [SP-4]
  fi#1: size=4, align=8, at location [SP-8]
Function Live Ins: %R0, %R1

BB#0: 
    Live Ins: %R0 %R1
	%SP<def,tied2> = STRi64_pmd %LR, %SP<tied0>, -8; flags: FrameSetup
	%FP<def> = ADDri_r32 %SP, 8, %STATUS<imp-def>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	GID %CONFIG<imp-def>
	%R2<def> = MOVFS32_core %CONFIG<kill>, %D1<imp-def>
	%R3<def> = MOVi32rr %R2<kill>, %D1<imp-use,kill>, %D1<imp-def>
	%R3<def,tied1> = MOVTi32ri %R3<kill,tied0>, 72, %D1<imp-use,kill>, %D1<imp-def>
	STRi64 %D1, %FP, -8; mem:ST4[FixedStack1] ST4[FixedStack0]
	%CONFIG<def> = MOVTS32_core %R3<kill>, %D1<imp-use,kill>
	GIE %CONFIG<imp-use,kill>
    Successors according to CFG: BB#1(?%)

BB#1: derived from LLVM BB %entry
    Live Ins: %R0 %R1
    Predecessors according to CFG: BB#0
	%R1<def> = IMULrr_r32 %R1<kill>, %R1, %STATUS<imp-def,dead>
	%R2<def,dead> = CMPri_r32 %R1, 0, %STATUS<imp-def>
	BCC <BB#4>, 0, %STATUS<imp-use>
    Successors according to CFG: BB#4(0x30000000 / 0x80000000 = 37.50%) BB#2(0x50000000 / 0x80000000 = 62.50%)

BB#2: derived from LLVM BB %for.body.preheader
    Live Ins: %R0 %R1
    Predecessors according to CFG: BB#1
	%R2<def> = MOVi32ri 0
	%R3<def> = MOVi32rr %R2
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %for.body
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#2 BB#3
	%R3<def> = ADDri_r32 %R3<kill>, 1, %STATUS<imp-def,dead>
	%IP<def> = ADDri_r32 %R0, 4, %STATUS<imp-def,dead>
	STRi32_r32 %R2, %R0<kill>, 0; mem:Volatile ST4[%lsr.iv](tbaa=!2)
	%R0<def,dead> = CMPrr_r32 %R3, %R1, %STATUS<imp-def>
	%R0<def> = MOVi32rr %IP<kill>
	BCC <BB#3>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#3(0x7c000000 / 0x80000000 = 96.88%) BB#4(0x04000000 / 0x80000000 = 3.12%)

BB#4: derived from LLVM BB %for.end
    Predecessors according to CFG: BB#1 BB#3
	%R0<def> = LDRi32_r32 %FP, -4; mem:LD4[FixedStack0]
	GID
	%CONFIG<def> = MOVTS32_core %R0<kill>
	GIE %CONFIG<imp-use,kill>
	%LR<def> = LDRi64 %SP, 8; flags: FrameSetup
	%SP<def> = ADDri_r32 %SP, 8, %STATUS<imp-def>
	JR32 %LR

# End machine code for function matclr.

# *** IR Dump Before Epiphany Load/Store Optimization Pass ***:
# Machine code for function matclr: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=4, align=4, at location [SP-4]
  fi#1: size=4, align=8, at location [SP-8]
Function Live Ins: %R0, %R1

BB#0: 
    Live Ins: %R0 %R1
	%SP<def,tied2> = STRi64_pmd %LR, %SP<tied0>, -8; flags: FrameSetup
	%FP<def> = ADDri_r32 %SP, 8, %STATUS<imp-def>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	GID %CONFIG<imp-def>
	%R2<def> = MOVFS32_core %CONFIG<kill>, %D1<imp-def>
	%R3<def> = MOVi32rr %R2<kill>, %D1<imp-use,kill>, %D1<imp-def>
	%R3<def,tied1> = MOVTi32ri %R3<kill,tied0>, 72, %D1<imp-use,kill>, %D1<imp-def>
	STRi64 %D1, %FP, -8; mem:ST4[FixedStack1] ST4[FixedStack0]
	%CONFIG<def> = MOVTS32_core %R3<kill>, %D1<imp-use,kill>
	GIE %CONFIG<imp-use,kill>
    Successors according to CFG: BB#1(?%)

BB#1: derived from LLVM BB %entry
    Live Ins: %R0 %R1
    Predecessors according to CFG: BB#0
	%R1<def> = IMULrr_r32 %R1<kill>, %R1, %STATUS<imp-def,dead>
	%R2<def,dead> = CMPri_r32 %R1, 0, %STATUS<imp-def>
	BCC <BB#4>, 0, %STATUS<imp-use>
    Successors according to CFG: BB#4(0x30000000 / 0x80000000 = 37.50%) BB#2(0x50000000 / 0x80000000 = 62.50%)

BB#2: derived from LLVM BB %for.body.preheader
    Live Ins: %R0 %R1
    Predecessors according to CFG: BB#1
	%R2<def> = MOVi32ri 0
	%R3<def> = MOVi32rr %R2
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %for.body
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#2 BB#3
	%R3<def> = ADDri_r32 %R3<kill>, 1, %STATUS<imp-def,dead>
	%IP<def> = ADDri_r32 %R0, 4, %STATUS<imp-def,dead>
	STRi32_r32 %R2, %R0<kill>, 0; mem:Volatile ST4[%lsr.iv](tbaa=!2)
	%R0<def,dead> = CMPrr_r32 %R3, %R1, %STATUS<imp-def>
	%R0<def> = MOVi32rr %IP<kill>
	BCC <BB#3>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#3(0x7c000000 / 0x80000000 = 96.88%) BB#4(0x04000000 / 0x80000000 = 3.12%)

BB#4: derived from LLVM BB %for.end
    Predecessors according to CFG: BB#1 BB#3
	%R0<def> = LDRi32_r32 %FP, -4; mem:LD4[FixedStack0]
	GID
	%CONFIG<def> = MOVTS32_core %R0<kill>
	GIE %CONFIG<imp-use,kill>
	%LR<def> = LDRi64 %SP, 8; flags: FrameSetup
	%SP<def> = ADDri_r32 %SP, 8, %STATUS<imp-def>
	JR32 %LR

# End machine code for function matclr.


Running Epiphany Load/Store Optimization Pass

Trying to pair instruction: STRi32_r32 %R2, %R0<kill>, 0; mem:Volatile ST4[%lsr.iv](tbaa=!2)
Volatile load/store, skipping
Not a candidate for merging

Trying to pair instruction: %R0<def> = LDRi32_r32 %FP, -4; mem:LD4[FixedStack0]
Unable to find matching instruction
# *** IR Dump After Epiphany Load/Store Optimization Pass ***:
# Machine code for function matclr: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=4, align=4, at location [SP-4]
  fi#1: size=4, align=8, at location [SP-8]
Function Live Ins: %R0, %R1

BB#0: 
    Live Ins: %R0 %R1
	%SP<def,tied2> = STRi64_pmd %LR, %SP<tied0>, -8; flags: FrameSetup
	%FP<def> = ADDri_r32 %SP, 8, %STATUS<imp-def>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	GID %CONFIG<imp-def>
	%R2<def> = MOVFS32_core %CONFIG<kill>, %D1<imp-def>
	%R3<def> = MOVi32rr %R2<kill>, %D1<imp-use,kill>, %D1<imp-def>
	%R3<def,tied1> = MOVTi32ri %R3<kill,tied0>, 72, %D1<imp-use,kill>, %D1<imp-def>
	STRi64 %D1, %FP, -8; mem:ST4[FixedStack1] ST4[FixedStack0]
	%CONFIG<def> = MOVTS32_core %R3<kill>, %D1<imp-use,kill>
	GIE %CONFIG<imp-use,kill>
    Successors according to CFG: BB#1(?%)

BB#1: derived from LLVM BB %entry
    Live Ins: %R0 %R1
    Predecessors according to CFG: BB#0
	%R1<def> = IMULrr_r32 %R1<kill>, %R1, %STATUS<imp-def,dead>
	%R2<def,dead> = CMPri_r32 %R1, 0, %STATUS<imp-def>
	BCC <BB#4>, 0, %STATUS<imp-use>
    Successors according to CFG: BB#4(0x30000000 / 0x80000000 = 37.50%) BB#2(0x50000000 / 0x80000000 = 62.50%)

BB#2: derived from LLVM BB %for.body.preheader
    Live Ins: %R0 %R1
    Predecessors according to CFG: BB#1
	%R2<def> = MOVi32ri 0
	%R3<def> = MOVi32rr %R2
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %for.body
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#2 BB#3
	%R3<def> = ADDri_r32 %R3<kill>, 1, %STATUS<imp-def,dead>
	%IP<def> = ADDri_r32 %R0, 4, %STATUS<imp-def,dead>
	STRi32_r32 %R2, %R0<kill>, 0; mem:Volatile ST4[%lsr.iv](tbaa=!2)
	%R0<def,dead> = CMPrr_r32 %R3, %R1, %STATUS<imp-def>
	%R0<def> = MOVi32rr %IP<kill>
	BCC <BB#3>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#3(0x7c000000 / 0x80000000 = 96.88%) BB#4(0x04000000 / 0x80000000 = 3.12%)

BB#4: derived from LLVM BB %for.end
    Predecessors according to CFG: BB#1 BB#3
	%R0<def> = LDRi32_r32 %FP, -4; mem:LD4[FixedStack0]
	GID
	%CONFIG<def> = MOVTS32_core %R0<kill>
	GIE %CONFIG<imp-use,kill>
	%LR<def> = LDRi64 %SP, 8; flags: FrameSetup
	%SP<def> = ADDri_r32 %SP, 8, %STATUS<imp-def>
	JR32 %LR

# End machine code for function matclr.

# *** IR Dump Before Contiguously Lay Out Funclets ***:
# Machine code for function matclr: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=4, align=4, at location [SP-4]
  fi#1: size=4, align=8, at location [SP-8]
Function Live Ins: %R0, %R1

BB#0: 
    Live Ins: %R0 %R1
	%SP<def,tied2> = STRi64_pmd %LR, %SP<tied0>, -8; flags: FrameSetup
	%FP<def> = ADDri_r32 %SP, 8, %STATUS<imp-def>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	GID %CONFIG<imp-def>
	%R2<def> = MOVFS32_core %CONFIG<kill>, %D1<imp-def>
	%R3<def> = MOVi32rr %R2<kill>, %D1<imp-use,kill>, %D1<imp-def>
	%R3<def,tied1> = MOVTi32ri %R3<kill,tied0>, 72, %D1<imp-use,kill>, %D1<imp-def>
	STRi64 %D1, %FP, -8; mem:ST4[FixedStack1] ST4[FixedStack0]
	%CONFIG<def> = MOVTS32_core %R3<kill>, %D1<imp-use,kill>
	GIE %CONFIG<imp-use,kill>
    Successors according to CFG: BB#1(?%)

BB#1: derived from LLVM BB %entry
    Live Ins: %R0 %R1
    Predecessors according to CFG: BB#0
	%R1<def> = IMULrr_r32 %R1<kill>, %R1, %STATUS<imp-def,dead>
	%R2<def,dead> = CMPri_r32 %R1, 0, %STATUS<imp-def>
	BCC <BB#4>, 0, %STATUS<imp-use>
    Successors according to CFG: BB#4(0x30000000 / 0x80000000 = 37.50%) BB#2(0x50000000 / 0x80000000 = 62.50%)

BB#2: derived from LLVM BB %for.body.preheader
    Live Ins: %R0 %R1
    Predecessors according to CFG: BB#1
	%R2<def> = MOVi32ri 0
	%R3<def> = MOVi32rr %R2
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %for.body
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#2 BB#3
	%R3<def> = ADDri_r32 %R3<kill>, 1, %STATUS<imp-def,dead>
	%IP<def> = ADDri_r32 %R0, 4, %STATUS<imp-def,dead>
	STRi32_r32 %R2, %R0<kill>, 0; mem:Volatile ST4[%lsr.iv](tbaa=!2)
	%R0<def,dead> = CMPrr_r32 %R3, %R1, %STATUS<imp-def>
	%R0<def> = MOVi32rr %IP<kill>
	BCC <BB#3>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#3(0x7c000000 / 0x80000000 = 96.88%) BB#4(0x04000000 / 0x80000000 = 3.12%)

BB#4: derived from LLVM BB %for.end
    Predecessors according to CFG: BB#1 BB#3
	%R0<def> = LDRi32_r32 %FP, -4; mem:LD4[FixedStack0]
	GID
	%CONFIG<def> = MOVTS32_core %R0<kill>
	GIE %CONFIG<imp-use,kill>
	%LR<def> = LDRi64 %SP, 8; flags: FrameSetup
	%SP<def> = ADDri_r32 %SP, 8, %STATUS<imp-def>
	JR32 %LR

# End machine code for function matclr.

# *** IR Dump After Contiguously Lay Out Funclets ***:
# Machine code for function matclr: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=4, align=4, at location [SP-4]
  fi#1: size=4, align=8, at location [SP-8]
Function Live Ins: %R0, %R1

BB#0: 
    Live Ins: %R0 %R1
	%SP<def,tied2> = STRi64_pmd %LR, %SP<tied0>, -8; flags: FrameSetup
	%FP<def> = ADDri_r32 %SP, 8, %STATUS<imp-def>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	GID %CONFIG<imp-def>
	%R2<def> = MOVFS32_core %CONFIG<kill>, %D1<imp-def>
	%R3<def> = MOVi32rr %R2<kill>, %D1<imp-use,kill>, %D1<imp-def>
	%R3<def,tied1> = MOVTi32ri %R3<kill,tied0>, 72, %D1<imp-use,kill>, %D1<imp-def>
	STRi64 %D1, %FP, -8; mem:ST4[FixedStack1] ST4[FixedStack0]
	%CONFIG<def> = MOVTS32_core %R3<kill>, %D1<imp-use,kill>
	GIE %CONFIG<imp-use,kill>
    Successors according to CFG: BB#1(?%)

BB#1: derived from LLVM BB %entry
    Live Ins: %R0 %R1
    Predecessors according to CFG: BB#0
	%R1<def> = IMULrr_r32 %R1<kill>, %R1, %STATUS<imp-def,dead>
	%R2<def,dead> = CMPri_r32 %R1, 0, %STATUS<imp-def>
	BCC <BB#4>, 0, %STATUS<imp-use>
    Successors according to CFG: BB#4(0x30000000 / 0x80000000 = 37.50%) BB#2(0x50000000 / 0x80000000 = 62.50%)

BB#2: derived from LLVM BB %for.body.preheader
    Live Ins: %R0 %R1
    Predecessors according to CFG: BB#1
	%R2<def> = MOVi32ri 0
	%R3<def> = MOVi32rr %R2
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %for.body
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#2 BB#3
	%R3<def> = ADDri_r32 %R3<kill>, 1, %STATUS<imp-def,dead>
	%IP<def> = ADDri_r32 %R0, 4, %STATUS<imp-def,dead>
	STRi32_r32 %R2, %R0<kill>, 0; mem:Volatile ST4[%lsr.iv](tbaa=!2)
	%R0<def,dead> = CMPrr_r32 %R3, %R1, %STATUS<imp-def>
	%R0<def> = MOVi32rr %IP<kill>
	BCC <BB#3>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#3(0x7c000000 / 0x80000000 = 96.88%) BB#4(0x04000000 / 0x80000000 = 3.12%)

BB#4: derived from LLVM BB %for.end
    Predecessors according to CFG: BB#1 BB#3
	%R0<def> = LDRi32_r32 %FP, -4; mem:LD4[FixedStack0]
	GID
	%CONFIG<def> = MOVTS32_core %R0<kill>
	GIE %CONFIG<imp-use,kill>
	%LR<def> = LDRi64 %SP, 8; flags: FrameSetup
	%SP<def> = ADDri_r32 %SP, 8, %STATUS<imp-def>
	JR32 %LR

# End machine code for function matclr.

# *** IR Dump Before StackMap Liveness Analysis ***:
# Machine code for function matclr: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=4, align=4, at location [SP-4]
  fi#1: size=4, align=8, at location [SP-8]
Function Live Ins: %R0, %R1

BB#0: 
    Live Ins: %R0 %R1
	%SP<def,tied2> = STRi64_pmd %LR, %SP<tied0>, -8; flags: FrameSetup
	%FP<def> = ADDri_r32 %SP, 8, %STATUS<imp-def>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	GID %CONFIG<imp-def>
	%R2<def> = MOVFS32_core %CONFIG<kill>, %D1<imp-def>
	%R3<def> = MOVi32rr %R2<kill>, %D1<imp-use,kill>, %D1<imp-def>
	%R3<def,tied1> = MOVTi32ri %R3<kill,tied0>, 72, %D1<imp-use,kill>, %D1<imp-def>
	STRi64 %D1, %FP, -8; mem:ST4[FixedStack1] ST4[FixedStack0]
	%CONFIG<def> = MOVTS32_core %R3<kill>, %D1<imp-use,kill>
	GIE %CONFIG<imp-use,kill>
    Successors according to CFG: BB#1(?%)

BB#1: derived from LLVM BB %entry
    Live Ins: %R0 %R1
    Predecessors according to CFG: BB#0
	%R1<def> = IMULrr_r32 %R1<kill>, %R1, %STATUS<imp-def,dead>
	%R2<def,dead> = CMPri_r32 %R1, 0, %STATUS<imp-def>
	BCC <BB#4>, 0, %STATUS<imp-use>
    Successors according to CFG: BB#4(0x30000000 / 0x80000000 = 37.50%) BB#2(0x50000000 / 0x80000000 = 62.50%)

BB#2: derived from LLVM BB %for.body.preheader
    Live Ins: %R0 %R1
    Predecessors according to CFG: BB#1
	%R2<def> = MOVi32ri 0
	%R3<def> = MOVi32rr %R2
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %for.body
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#2 BB#3
	%R3<def> = ADDri_r32 %R3<kill>, 1, %STATUS<imp-def,dead>
	%IP<def> = ADDri_r32 %R0, 4, %STATUS<imp-def,dead>
	STRi32_r32 %R2, %R0<kill>, 0; mem:Volatile ST4[%lsr.iv](tbaa=!2)
	%R0<def,dead> = CMPrr_r32 %R3, %R1, %STATUS<imp-def>
	%R0<def> = MOVi32rr %IP<kill>
	BCC <BB#3>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#3(0x7c000000 / 0x80000000 = 96.88%) BB#4(0x04000000 / 0x80000000 = 3.12%)

BB#4: derived from LLVM BB %for.end
    Predecessors according to CFG: BB#1 BB#3
	%R0<def> = LDRi32_r32 %FP, -4; mem:LD4[FixedStack0]
	GID
	%CONFIG<def> = MOVTS32_core %R0<kill>
	GIE %CONFIG<imp-use,kill>
	%LR<def> = LDRi64 %SP, 8; flags: FrameSetup
	%SP<def> = ADDri_r32 %SP, 8, %STATUS<imp-def>
	JR32 %LR

# End machine code for function matclr.

********** COMPUTING STACKMAP LIVENESS: matclr **********
# *** IR Dump After StackMap Liveness Analysis ***:
# Machine code for function matclr: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=4, align=4, at location [SP-4]
  fi#1: size=4, align=8, at location [SP-8]
Function Live Ins: %R0, %R1

BB#0: 
    Live Ins: %R0 %R1
	%SP<def,tied2> = STRi64_pmd %LR, %SP<tied0>, -8; flags: FrameSetup
	%FP<def> = ADDri_r32 %SP, 8, %STATUS<imp-def>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	GID %CONFIG<imp-def>
	%R2<def> = MOVFS32_core %CONFIG<kill>, %D1<imp-def>
	%R3<def> = MOVi32rr %R2<kill>, %D1<imp-use,kill>, %D1<imp-def>
	%R3<def,tied1> = MOVTi32ri %R3<kill,tied0>, 72, %D1<imp-use,kill>, %D1<imp-def>
	STRi64 %D1, %FP, -8; mem:ST4[FixedStack1] ST4[FixedStack0]
	%CONFIG<def> = MOVTS32_core %R3<kill>, %D1<imp-use,kill>
	GIE %CONFIG<imp-use,kill>
    Successors according to CFG: BB#1(?%)

BB#1: derived from LLVM BB %entry
    Live Ins: %R0 %R1
    Predecessors according to CFG: BB#0
	%R1<def> = IMULrr_r32 %R1<kill>, %R1, %STATUS<imp-def,dead>
	%R2<def,dead> = CMPri_r32 %R1, 0, %STATUS<imp-def>
	BCC <BB#4>, 0, %STATUS<imp-use>
    Successors according to CFG: BB#4(0x30000000 / 0x80000000 = 37.50%) BB#2(0x50000000 / 0x80000000 = 62.50%)

BB#2: derived from LLVM BB %for.body.preheader
    Live Ins: %R0 %R1
    Predecessors according to CFG: BB#1
	%R2<def> = MOVi32ri 0
	%R3<def> = MOVi32rr %R2
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %for.body
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#2 BB#3
	%R3<def> = ADDri_r32 %R3<kill>, 1, %STATUS<imp-def,dead>
	%IP<def> = ADDri_r32 %R0, 4, %STATUS<imp-def,dead>
	STRi32_r32 %R2, %R0<kill>, 0; mem:Volatile ST4[%lsr.iv](tbaa=!2)
	%R0<def,dead> = CMPrr_r32 %R3, %R1, %STATUS<imp-def>
	%R0<def> = MOVi32rr %IP<kill>
	BCC <BB#3>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#3(0x7c000000 / 0x80000000 = 96.88%) BB#4(0x04000000 / 0x80000000 = 3.12%)

BB#4: derived from LLVM BB %for.end
    Predecessors according to CFG: BB#1 BB#3
	%R0<def> = LDRi32_r32 %FP, -4; mem:LD4[FixedStack0]
	GID
	%CONFIG<def> = MOVTS32_core %R0<kill>
	GIE %CONFIG<imp-use,kill>
	%LR<def> = LDRi64 %SP, 8; flags: FrameSetup
	%SP<def> = ADDri_r32 %SP, 8, %STATUS<imp-def>
	JR32 %LR

# End machine code for function matclr.

# *** IR Dump Before Live DEBUG_VALUE analysis ***:
# Machine code for function matclr: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=4, align=4, at location [SP-4]
  fi#1: size=4, align=8, at location [SP-8]
Function Live Ins: %R0, %R1

BB#0: 
    Live Ins: %R0 %R1
	%SP<def,tied2> = STRi64_pmd %LR, %SP<tied0>, -8; flags: FrameSetup
	%FP<def> = ADDri_r32 %SP, 8, %STATUS<imp-def>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	GID %CONFIG<imp-def>
	%R2<def> = MOVFS32_core %CONFIG<kill>, %D1<imp-def>
	%R3<def> = MOVi32rr %R2<kill>, %D1<imp-use,kill>, %D1<imp-def>
	%R3<def,tied1> = MOVTi32ri %R3<kill,tied0>, 72, %D1<imp-use,kill>, %D1<imp-def>
	STRi64 %D1, %FP, -8; mem:ST4[FixedStack1] ST4[FixedStack0]
	%CONFIG<def> = MOVTS32_core %R3<kill>, %D1<imp-use,kill>
	GIE %CONFIG<imp-use,kill>
    Successors according to CFG: BB#1(?%)

BB#1: derived from LLVM BB %entry
    Live Ins: %R0 %R1
    Predecessors according to CFG: BB#0
	%R1<def> = IMULrr_r32 %R1<kill>, %R1, %STATUS<imp-def,dead>
	%R2<def,dead> = CMPri_r32 %R1, 0, %STATUS<imp-def>
	BCC <BB#4>, 0, %STATUS<imp-use>
    Successors according to CFG: BB#4(0x30000000 / 0x80000000 = 37.50%) BB#2(0x50000000 / 0x80000000 = 62.50%)

BB#2: derived from LLVM BB %for.body.preheader
    Live Ins: %R0 %R1
    Predecessors according to CFG: BB#1
	%R2<def> = MOVi32ri 0
	%R3<def> = MOVi32rr %R2
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %for.body
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#2 BB#3
	%R3<def> = ADDri_r32 %R3<kill>, 1, %STATUS<imp-def,dead>
	%IP<def> = ADDri_r32 %R0, 4, %STATUS<imp-def,dead>
	STRi32_r32 %R2, %R0<kill>, 0; mem:Volatile ST4[%lsr.iv](tbaa=!2)
	%R0<def,dead> = CMPrr_r32 %R3, %R1, %STATUS<imp-def>
	%R0<def> = MOVi32rr %IP<kill>
	BCC <BB#3>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#3(0x7c000000 / 0x80000000 = 96.88%) BB#4(0x04000000 / 0x80000000 = 3.12%)

BB#4: derived from LLVM BB %for.end
    Predecessors according to CFG: BB#1 BB#3
	%R0<def> = LDRi32_r32 %FP, -4; mem:LD4[FixedStack0]
	GID
	%CONFIG<def> = MOVTS32_core %R0<kill>
	GIE %CONFIG<imp-use,kill>
	%LR<def> = LDRi64 %SP, 8; flags: FrameSetup
	%SP<def> = ADDri_r32 %SP, 8, %STATUS<imp-def>
	JR32 %LR

# End machine code for function matclr.

# *** IR Dump After Live DEBUG_VALUE analysis ***:
# Machine code for function matclr: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=4, align=4, at location [SP-4]
  fi#1: size=4, align=8, at location [SP-8]
Function Live Ins: %R0, %R1

BB#0: 
    Live Ins: %R0 %R1
	%SP<def,tied2> = STRi64_pmd %LR, %SP<tied0>, -8; flags: FrameSetup
	%FP<def> = ADDri_r32 %SP, 8, %STATUS<imp-def>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	GID %CONFIG<imp-def>
	%R2<def> = MOVFS32_core %CONFIG<kill>, %D1<imp-def>
	%R3<def> = MOVi32rr %R2<kill>, %D1<imp-use,kill>, %D1<imp-def>
	%R3<def,tied1> = MOVTi32ri %R3<kill,tied0>, 72, %D1<imp-use,kill>, %D1<imp-def>
	STRi64 %D1, %FP, -8; mem:ST4[FixedStack1] ST4[FixedStack0]
	%CONFIG<def> = MOVTS32_core %R3<kill>, %D1<imp-use,kill>
	GIE %CONFIG<imp-use,kill>
    Successors according to CFG: BB#1(?%)

BB#1: derived from LLVM BB %entry
    Live Ins: %R0 %R1
    Predecessors according to CFG: BB#0
	%R1<def> = IMULrr_r32 %R1<kill>, %R1, %STATUS<imp-def,dead>
	%R2<def,dead> = CMPri_r32 %R1, 0, %STATUS<imp-def>
	BCC <BB#4>, 0, %STATUS<imp-use>
    Successors according to CFG: BB#4(0x30000000 / 0x80000000 = 37.50%) BB#2(0x50000000 / 0x80000000 = 62.50%)

BB#2: derived from LLVM BB %for.body.preheader
    Live Ins: %R0 %R1
    Predecessors according to CFG: BB#1
	%R2<def> = MOVi32ri 0
	%R3<def> = MOVi32rr %R2
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %for.body
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#2 BB#3
	%R3<def> = ADDri_r32 %R3<kill>, 1, %STATUS<imp-def,dead>
	%IP<def> = ADDri_r32 %R0, 4, %STATUS<imp-def,dead>
	STRi32_r32 %R2, %R0<kill>, 0; mem:Volatile ST4[%lsr.iv](tbaa=!2)
	%R0<def,dead> = CMPrr_r32 %R3, %R1, %STATUS<imp-def>
	%R0<def> = MOVi32rr %IP<kill>
	BCC <BB#3>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#3(0x7c000000 / 0x80000000 = 96.88%) BB#4(0x04000000 / 0x80000000 = 3.12%)

BB#4: derived from LLVM BB %for.end
    Predecessors according to CFG: BB#1 BB#3
	%R0<def> = LDRi32_r32 %FP, -4; mem:LD4[FixedStack0]
	GID
	%CONFIG<def> = MOVTS32_core %R0<kill>
	GIE %CONFIG<imp-use,kill>
	%LR<def> = LDRi64 %SP, 8; flags: FrameSetup
	%SP<def> = ADDri_r32 %SP, 8, %STATUS<imp-def>
	JR32 %LR

# End machine code for function matclr.

# *** IR Dump Before Insert XRay ops ***:
# Machine code for function matclr: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=4, align=4, at location [SP-4]
  fi#1: size=4, align=8, at location [SP-8]
Function Live Ins: %R0, %R1

BB#0: 
    Live Ins: %R0 %R1
	%SP<def,tied2> = STRi64_pmd %LR, %SP<tied0>, -8; flags: FrameSetup
	%FP<def> = ADDri_r32 %SP, 8, %STATUS<imp-def>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	GID %CONFIG<imp-def>
	%R2<def> = MOVFS32_core %CONFIG<kill>, %D1<imp-def>
	%R3<def> = MOVi32rr %R2<kill>, %D1<imp-use,kill>, %D1<imp-def>
	%R3<def,tied1> = MOVTi32ri %R3<kill,tied0>, 72, %D1<imp-use,kill>, %D1<imp-def>
	STRi64 %D1, %FP, -8; mem:ST4[FixedStack1] ST4[FixedStack0]
	%CONFIG<def> = MOVTS32_core %R3<kill>, %D1<imp-use,kill>
	GIE %CONFIG<imp-use,kill>
    Successors according to CFG: BB#1(?%)

BB#1: derived from LLVM BB %entry
    Live Ins: %R0 %R1
    Predecessors according to CFG: BB#0
	%R1<def> = IMULrr_r32 %R1<kill>, %R1, %STATUS<imp-def,dead>
	%R2<def,dead> = CMPri_r32 %R1, 0, %STATUS<imp-def>
	BCC <BB#4>, 0, %STATUS<imp-use>
    Successors according to CFG: BB#4(0x30000000 / 0x80000000 = 37.50%) BB#2(0x50000000 / 0x80000000 = 62.50%)

BB#2: derived from LLVM BB %for.body.preheader
    Live Ins: %R0 %R1
    Predecessors according to CFG: BB#1
	%R2<def> = MOVi32ri 0
	%R3<def> = MOVi32rr %R2
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %for.body
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#2 BB#3
	%R3<def> = ADDri_r32 %R3<kill>, 1, %STATUS<imp-def,dead>
	%IP<def> = ADDri_r32 %R0, 4, %STATUS<imp-def,dead>
	STRi32_r32 %R2, %R0<kill>, 0; mem:Volatile ST4[%lsr.iv](tbaa=!2)
	%R0<def,dead> = CMPrr_r32 %R3, %R1, %STATUS<imp-def>
	%R0<def> = MOVi32rr %IP<kill>
	BCC <BB#3>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#3(0x7c000000 / 0x80000000 = 96.88%) BB#4(0x04000000 / 0x80000000 = 3.12%)

BB#4: derived from LLVM BB %for.end
    Predecessors according to CFG: BB#1 BB#3
	%R0<def> = LDRi32_r32 %FP, -4; mem:LD4[FixedStack0]
	GID
	%CONFIG<def> = MOVTS32_core %R0<kill>
	GIE %CONFIG<imp-use,kill>
	%LR<def> = LDRi64 %SP, 8; flags: FrameSetup
	%SP<def> = ADDri_r32 %SP, 8, %STATUS<imp-def>
	JR32 %LR

# End machine code for function matclr.

# *** IR Dump After Insert XRay ops ***:
# Machine code for function matclr: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=4, align=4, at location [SP-4]
  fi#1: size=4, align=8, at location [SP-8]
Function Live Ins: %R0, %R1

BB#0: 
    Live Ins: %R0 %R1
	%SP<def,tied2> = STRi64_pmd %LR, %SP<tied0>, -8; flags: FrameSetup
	%FP<def> = ADDri_r32 %SP, 8, %STATUS<imp-def>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	GID %CONFIG<imp-def>
	%R2<def> = MOVFS32_core %CONFIG<kill>, %D1<imp-def>
	%R3<def> = MOVi32rr %R2<kill>, %D1<imp-use,kill>, %D1<imp-def>
	%R3<def,tied1> = MOVTi32ri %R3<kill,tied0>, 72, %D1<imp-use,kill>, %D1<imp-def>
	STRi64 %D1, %FP, -8; mem:ST4[FixedStack1] ST4[FixedStack0]
	%CONFIG<def> = MOVTS32_core %R3<kill>, %D1<imp-use,kill>
	GIE %CONFIG<imp-use,kill>
    Successors according to CFG: BB#1(?%)

BB#1: derived from LLVM BB %entry
    Live Ins: %R0 %R1
    Predecessors according to CFG: BB#0
	%R1<def> = IMULrr_r32 %R1<kill>, %R1, %STATUS<imp-def,dead>
	%R2<def,dead> = CMPri_r32 %R1, 0, %STATUS<imp-def>
	BCC <BB#4>, 0, %STATUS<imp-use>
    Successors according to CFG: BB#4(0x30000000 / 0x80000000 = 37.50%) BB#2(0x50000000 / 0x80000000 = 62.50%)

BB#2: derived from LLVM BB %for.body.preheader
    Live Ins: %R0 %R1
    Predecessors according to CFG: BB#1
	%R2<def> = MOVi32ri 0
	%R3<def> = MOVi32rr %R2
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %for.body
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#2 BB#3
	%R3<def> = ADDri_r32 %R3<kill>, 1, %STATUS<imp-def,dead>
	%IP<def> = ADDri_r32 %R0, 4, %STATUS<imp-def,dead>
	STRi32_r32 %R2, %R0<kill>, 0; mem:Volatile ST4[%lsr.iv](tbaa=!2)
	%R0<def,dead> = CMPrr_r32 %R3, %R1, %STATUS<imp-def>
	%R0<def> = MOVi32rr %IP<kill>
	BCC <BB#3>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#3(0x7c000000 / 0x80000000 = 96.88%) BB#4(0x04000000 / 0x80000000 = 3.12%)

BB#4: derived from LLVM BB %for.end
    Predecessors according to CFG: BB#1 BB#3
	%R0<def> = LDRi32_r32 %FP, -4; mem:LD4[FixedStack0]
	GID
	%CONFIG<def> = MOVTS32_core %R0<kill>
	GIE %CONFIG<imp-use,kill>
	%LR<def> = LDRi64 %SP, 8; flags: FrameSetup
	%SP<def> = ADDri_r32 %SP, 8, %STATUS<imp-def>
	JR32 %LR

# End machine code for function matclr.

# *** IR Dump Before Implement the 'patchable-function' attribute ***:
# Machine code for function matclr: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=4, align=4, at location [SP-4]
  fi#1: size=4, align=8, at location [SP-8]
Function Live Ins: %R0, %R1

BB#0: 
    Live Ins: %R0 %R1
	%SP<def,tied2> = STRi64_pmd %LR, %SP<tied0>, -8; flags: FrameSetup
	%FP<def> = ADDri_r32 %SP, 8, %STATUS<imp-def>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	GID %CONFIG<imp-def>
	%R2<def> = MOVFS32_core %CONFIG<kill>, %D1<imp-def>
	%R3<def> = MOVi32rr %R2<kill>, %D1<imp-use,kill>, %D1<imp-def>
	%R3<def,tied1> = MOVTi32ri %R3<kill,tied0>, 72, %D1<imp-use,kill>, %D1<imp-def>
	STRi64 %D1, %FP, -8; mem:ST4[FixedStack1] ST4[FixedStack0]
	%CONFIG<def> = MOVTS32_core %R3<kill>, %D1<imp-use,kill>
	GIE %CONFIG<imp-use,kill>
    Successors according to CFG: BB#1(?%)

BB#1: derived from LLVM BB %entry
    Live Ins: %R0 %R1
    Predecessors according to CFG: BB#0
	%R1<def> = IMULrr_r32 %R1<kill>, %R1, %STATUS<imp-def,dead>
	%R2<def,dead> = CMPri_r32 %R1, 0, %STATUS<imp-def>
	BCC <BB#4>, 0, %STATUS<imp-use>
    Successors according to CFG: BB#4(0x30000000 / 0x80000000 = 37.50%) BB#2(0x50000000 / 0x80000000 = 62.50%)

BB#2: derived from LLVM BB %for.body.preheader
    Live Ins: %R0 %R1
    Predecessors according to CFG: BB#1
	%R2<def> = MOVi32ri 0
	%R3<def> = MOVi32rr %R2
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %for.body
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#2 BB#3
	%R3<def> = ADDri_r32 %R3<kill>, 1, %STATUS<imp-def,dead>
	%IP<def> = ADDri_r32 %R0, 4, %STATUS<imp-def,dead>
	STRi32_r32 %R2, %R0<kill>, 0; mem:Volatile ST4[%lsr.iv](tbaa=!2)
	%R0<def,dead> = CMPrr_r32 %R3, %R1, %STATUS<imp-def>
	%R0<def> = MOVi32rr %IP<kill>
	BCC <BB#3>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#3(0x7c000000 / 0x80000000 = 96.88%) BB#4(0x04000000 / 0x80000000 = 3.12%)

BB#4: derived from LLVM BB %for.end
    Predecessors according to CFG: BB#1 BB#3
	%R0<def> = LDRi32_r32 %FP, -4; mem:LD4[FixedStack0]
	GID
	%CONFIG<def> = MOVTS32_core %R0<kill>
	GIE %CONFIG<imp-use,kill>
	%LR<def> = LDRi64 %SP, 8; flags: FrameSetup
	%SP<def> = ADDri_r32 %SP, 8, %STATUS<imp-def>
	JR32 %LR

# End machine code for function matclr.

# *** IR Dump After Implement the 'patchable-function' attribute ***:
# Machine code for function matclr: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=4, align=4, at location [SP-4]
  fi#1: size=4, align=8, at location [SP-8]
Function Live Ins: %R0, %R1

BB#0: 
    Live Ins: %R0 %R1
	%SP<def,tied2> = STRi64_pmd %LR, %SP<tied0>, -8; flags: FrameSetup
	%FP<def> = ADDri_r32 %SP, 8, %STATUS<imp-def>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	GID %CONFIG<imp-def>
	%R2<def> = MOVFS32_core %CONFIG<kill>, %D1<imp-def>
	%R3<def> = MOVi32rr %R2<kill>, %D1<imp-use,kill>, %D1<imp-def>
	%R3<def,tied1> = MOVTi32ri %R3<kill,tied0>, 72, %D1<imp-use,kill>, %D1<imp-def>
	STRi64 %D1, %FP, -8; mem:ST4[FixedStack1] ST4[FixedStack0]
	%CONFIG<def> = MOVTS32_core %R3<kill>, %D1<imp-use,kill>
	GIE %CONFIG<imp-use,kill>
    Successors according to CFG: BB#1(?%)

BB#1: derived from LLVM BB %entry
    Live Ins: %R0 %R1
    Predecessors according to CFG: BB#0
	%R1<def> = IMULrr_r32 %R1<kill>, %R1, %STATUS<imp-def,dead>
	%R2<def,dead> = CMPri_r32 %R1, 0, %STATUS<imp-def>
	BCC <BB#4>, 0, %STATUS<imp-use>
    Successors according to CFG: BB#4(0x30000000 / 0x80000000 = 37.50%) BB#2(0x50000000 / 0x80000000 = 62.50%)

BB#2: derived from LLVM BB %for.body.preheader
    Live Ins: %R0 %R1
    Predecessors according to CFG: BB#1
	%R2<def> = MOVi32ri 0
	%R3<def> = MOVi32rr %R2
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %for.body
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#2 BB#3
	%R3<def> = ADDri_r32 %R3<kill>, 1, %STATUS<imp-def,dead>
	%IP<def> = ADDri_r32 %R0, 4, %STATUS<imp-def,dead>
	STRi32_r32 %R2, %R0<kill>, 0; mem:Volatile ST4[%lsr.iv](tbaa=!2)
	%R0<def,dead> = CMPrr_r32 %R3, %R1, %STATUS<imp-def>
	%R0<def> = MOVi32rr %IP<kill>
	BCC <BB#3>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#3(0x7c000000 / 0x80000000 = 96.88%) BB#4(0x04000000 / 0x80000000 = 3.12%)

BB#4: derived from LLVM BB %for.end
    Predecessors according to CFG: BB#1 BB#3
	%R0<def> = LDRi32_r32 %FP, -4; mem:LD4[FixedStack0]
	GID
	%CONFIG<def> = MOVTS32_core %R0<kill>
	GIE %CONFIG<imp-use,kill>
	%LR<def> = LDRi64 %SP, 8; flags: FrameSetup
	%SP<def> = ADDri_r32 %SP, 8, %STATUS<imp-def>
	JR32 %LR

# End machine code for function matclr.


Has FP: DisableFramePointerElim set
*** IR Dump Before GPU Load and Store Vectorizer ***
; Function Attrs: nounwind optsize
define hidden void @matmac(float* noalias %aa, float* noalias %bb, float* noalias %cc, i32 %NN) local_unnamed_addr #2 {
entry:
  %tot = alloca [8 x float], align 4
  %cmp143 = icmp sgt i32 %NN, 0
  br i1 %cmp143, label %for.body3.lr.ph.preheader, label %for.end81

for.body3.lr.ph.preheader:                        ; preds = %entry
  %scevgep = getelementptr float, float* %bb, i32 2
  %0 = shl i32 %NN, 2
  %scevgep10 = getelementptr [8 x float], [8 x float]* %tot, i32 0, i32 2
  br label %for.body3.lr.ph

for.body3.lr.ph:                                  ; preds = %for.end78, %for.body3.lr.ph.preheader
  %lsr.iv19 = phi float* [ %19, %for.end78 ], [ %cc, %for.body3.lr.ph.preheader ]
  %i.0144 = phi i32 [ %inc80, %for.end78 ], [ 0, %for.body3.lr.ph.preheader ]
  %mul68 = mul nsw i32 %i.0144, %NN
  %add.ptr = getelementptr inbounds float, float* %aa, i32 %mul68
  br label %for.body9.preheader

for.body9.preheader:                              ; preds = %for.end75, %for.body3.lr.ph
  %lsr.iv22 = phi float* [ %scevgep23, %for.end75 ], [ %lsr.iv19, %for.body3.lr.ph ]
  %lsr.iv = phi float* [ %scevgep1, %for.end75 ], [ %scevgep, %for.body3.lr.ph ]
  %j0.0142 = phi i32 [ 0, %for.body3.lr.ph ], [ %add77, %for.end75 ]
  %1 = bitcast [8 x float]* %tot to i8*
  call void @llvm.lifetime.start(i64 32, i8* nonnull %1) #3
  call void @llvm.memset.p0i8.i32(i8* nonnull %1, i8 0, i32 32, i32 4, i1 false)
  br label %for.body9

for.cond64.preheader:                             ; preds = %for.end60
  br label %for.body66

for.body9:                                        ; preds = %for.end60, %for.body9.preheader
  %lsr.iv2 = phi float* [ %14, %for.end60 ], [ %lsr.iv, %for.body9.preheader ]
  %x.0139 = phi i32 [ %inc62, %for.end60 ], [ 0, %for.body9.preheader ]
  %2 = bitcast float* %scevgep10 to [8 x float]*
  %add.ptr10 = getelementptr inbounds float, float* %add.ptr, i32 %x.0139
  %3 = load volatile float, float* %add.ptr10, align 4, !tbaa !1
  br label %for.body13

for.body13:                                       ; preds = %for.body13, %for.body9
  %lsr.iv12 = phi [8 x float]* [ %12, %for.body13 ], [ %2, %for.body9 ]
  %lsr.iv5 = phi float* [ %scevgep6, %for.body13 ], [ %lsr.iv2, %for.body9 ]
  %j1.1137 = phi i32 [ 0, %for.body9 ], [ %add59, %for.body13 ]
  %lsr.iv1214 = bitcast [8 x float]* %lsr.iv12 to float*
  %scevgep8 = getelementptr float, float* %lsr.iv5, i32 -2
  %4 = load volatile float, float* %scevgep8, align 4, !tbaa !1
  %scevgep9 = getelementptr float, float* %lsr.iv5, i32 -1
  %5 = load volatile float, float* %scevgep9, align 4, !tbaa !1
  %6 = load volatile float, float* %lsr.iv5, align 4, !tbaa !1
  %scevgep7 = getelementptr float, float* %lsr.iv5, i32 1
  %7 = load volatile float, float* %scevgep7, align 4, !tbaa !1
  %mul40 = fmul float %3, %4
  %scevgep15 = getelementptr float, float* %lsr.iv1214, i32 -2
  %8 = load float, float* %scevgep15, align 4, !tbaa !1
  %add42 = fadd float %mul40, %8
  store float %add42, float* %scevgep15, align 4, !tbaa !1
  %mul44 = fmul float %3, %5
  %scevgep17 = getelementptr float, float* %lsr.iv1214, i32 -1
  %9 = load float, float* %scevgep17, align 4, !tbaa !1
  %add47 = fadd float %mul44, %9
  store float %add47, float* %scevgep17, align 4, !tbaa !1
  %mul49 = fmul float %3, %6
  %10 = load float, float* %lsr.iv1214, align 4, !tbaa !1
  %add52 = fadd float %mul49, %10
  store float %add52, float* %lsr.iv1214, align 4, !tbaa !1
  %mul54 = fmul float %3, %7
  %scevgep16 = getelementptr float, float* %lsr.iv1214, i32 1
  %11 = load float, float* %scevgep16, align 4, !tbaa !1
  %add57 = fadd float %mul54, %11
  store float %add57, float* %scevgep16, align 4, !tbaa !1
  %add59 = add nuw nsw i32 %j1.1137, 4
  %scevgep6 = getelementptr float, float* %lsr.iv5, i32 4
  %scevgep13 = getelementptr [8 x float], [8 x float]* %lsr.iv12, i32 0, i32 4
  %12 = bitcast float* %scevgep13 to [8 x float]*
  %cmp12 = icmp slt i32 %add59, 8
  br i1 %cmp12, label %for.body13, label %for.end60

for.end60:                                        ; preds = %for.body13
  %13 = bitcast float* %lsr.iv2 to i1*
  %inc62 = add nuw nsw i32 %x.0139, 1
  %scevgep4 = getelementptr i1, i1* %13, i32 %0
  %14 = bitcast i1* %scevgep4 to float*
  %exitcond = icmp eq i32 %inc62, %NN
  br i1 %exitcond, label %for.cond64.preheader, label %for.body9

for.body66:                                       ; preds = %for.body66, %for.cond64.preheader
  %lsr.iv24 = phi float* [ %scevgep25, %for.body66 ], [ %lsr.iv22, %for.cond64.preheader ]
  %lsr.iv18 = phi i32 [ %lsr.iv.next, %for.body66 ], [ 0, %for.cond64.preheader ]
  %sunkaddr = ptrtoint [8 x float]* %tot to i32
  %sunkaddr29 = add i32 %sunkaddr, %lsr.iv18
  %sunkaddr30 = inttoptr i32 %sunkaddr29 to float*
  %15 = load float, float* %sunkaddr30, align 4, !tbaa !1
  %16 = load volatile float, float* %lsr.iv24, align 4, !tbaa !1
  %add72 = fadd float %15, %16
  store volatile float %add72, float* %lsr.iv24, align 4, !tbaa !1
  %lsr.iv.next = add nuw nsw i32 %lsr.iv18, 4
  %scevgep25 = getelementptr float, float* %lsr.iv24, i32 1
  %exitcond145 = icmp eq i32 %lsr.iv.next, 32
  br i1 %exitcond145, label %for.end75, label %for.body66

for.end75:                                        ; preds = %for.body66
  %17 = bitcast [8 x float]* %tot to i8*
  call void @llvm.lifetime.end(i64 32, i8* nonnull %17) #3
  %add77 = add nuw nsw i32 %j0.0142, 8
  %scevgep1 = getelementptr float, float* %lsr.iv, i32 8
  %scevgep23 = getelementptr float, float* %lsr.iv22, i32 8
  %cmp2 = icmp slt i32 %add77, %NN
  br i1 %cmp2, label %for.body9.preheader, label %for.end78

for.end78:                                        ; preds = %for.end75
  %18 = bitcast float* %lsr.iv19 to i1*
  %inc80 = add nuw nsw i32 %i.0144, 1
  %scevgep21 = getelementptr i1, i1* %18, i32 %0
  %19 = bitcast i1* %scevgep21 to float*
  %exitcond146 = icmp eq i32 %inc80, %NN
  br i1 %exitcond146, label %for.end81, label %for.body3.lr.ph

for.end81:                                        ; preds = %for.end78, %entry
  ret void
}
LSV: Analyzing a chain of length 4.
LSV: Vectorizing 4 instructions.
LSV: Chain doesn't match with the vector factor. Creating two separate arrays.
LSV: Target said misaligned is allowed? 0 and fast? 0
LSV: Target said misaligned is allowed? 0 and fast? 0
LSV: Analyzing a chain of length 4.
LSV: Vectorizing 4 instructions.
LSV: Chain doesn't match with the vector factor. Creating two separate arrays.
LSV: Stores to vectorize:
    store float %add42, float* %scevgep15, align 4, !tbaa !1
    store float %add47, float* %scevgep17, align 4, !tbaa !1
LSV: Target said misaligned is allowed? 0 and fast? 0
LSV: Stores to vectorize:
    store float %add52, float* %lsr.iv1214, align 4, !tbaa !1
    store float %add57, float* %scevgep16, align 4, !tbaa !1
LSV: Target said misaligned is allowed? 0 and fast? 0
*** IR Dump After GPU Load and Store Vectorizer ***
; Function Attrs: nounwind optsize
define hidden void @matmac(float* noalias %aa, float* noalias %bb, float* noalias %cc, i32 %NN) local_unnamed_addr #2 {
entry:
  %tot = alloca [8 x float], align 4
  %cmp143 = icmp sgt i32 %NN, 0
  br i1 %cmp143, label %for.body3.lr.ph.preheader, label %for.end81

for.body3.lr.ph.preheader:                        ; preds = %entry
  %scevgep = getelementptr float, float* %bb, i32 2
  %0 = shl i32 %NN, 2
  %scevgep10 = getelementptr [8 x float], [8 x float]* %tot, i32 0, i32 2
  br label %for.body3.lr.ph

for.body3.lr.ph:                                  ; preds = %for.end78, %for.body3.lr.ph.preheader
  %lsr.iv19 = phi float* [ %19, %for.end78 ], [ %cc, %for.body3.lr.ph.preheader ]
  %i.0144 = phi i32 [ %inc80, %for.end78 ], [ 0, %for.body3.lr.ph.preheader ]
  %mul68 = mul nsw i32 %i.0144, %NN
  %add.ptr = getelementptr inbounds float, float* %aa, i32 %mul68
  br label %for.body9.preheader

for.body9.preheader:                              ; preds = %for.end75, %for.body3.lr.ph
  %lsr.iv22 = phi float* [ %scevgep23, %for.end75 ], [ %lsr.iv19, %for.body3.lr.ph ]
  %lsr.iv = phi float* [ %scevgep1, %for.end75 ], [ %scevgep, %for.body3.lr.ph ]
  %j0.0142 = phi i32 [ 0, %for.body3.lr.ph ], [ %add77, %for.end75 ]
  %1 = bitcast [8 x float]* %tot to i8*
  call void @llvm.lifetime.start(i64 32, i8* nonnull %1) #3
  call void @llvm.memset.p0i8.i32(i8* nonnull %1, i8 0, i32 32, i32 4, i1 false)
  br label %for.body9

for.cond64.preheader:                             ; preds = %for.end60
  br label %for.body66

for.body9:                                        ; preds = %for.end60, %for.body9.preheader
  %lsr.iv2 = phi float* [ %14, %for.end60 ], [ %lsr.iv, %for.body9.preheader ]
  %x.0139 = phi i32 [ %inc62, %for.end60 ], [ 0, %for.body9.preheader ]
  %2 = bitcast float* %scevgep10 to [8 x float]*
  %add.ptr10 = getelementptr inbounds float, float* %add.ptr, i32 %x.0139
  %3 = load volatile float, float* %add.ptr10, align 4, !tbaa !1
  br label %for.body13

for.body13:                                       ; preds = %for.body13, %for.body9
  %lsr.iv12 = phi [8 x float]* [ %12, %for.body13 ], [ %2, %for.body9 ]
  %lsr.iv5 = phi float* [ %scevgep6, %for.body13 ], [ %lsr.iv2, %for.body9 ]
  %j1.1137 = phi i32 [ 0, %for.body9 ], [ %add59, %for.body13 ]
  %lsr.iv1214 = bitcast [8 x float]* %lsr.iv12 to float*
  %scevgep8 = getelementptr float, float* %lsr.iv5, i32 -2
  %4 = load volatile float, float* %scevgep8, align 4, !tbaa !1
  %scevgep9 = getelementptr float, float* %lsr.iv5, i32 -1
  %5 = load volatile float, float* %scevgep9, align 4, !tbaa !1
  %6 = load volatile float, float* %lsr.iv5, align 4, !tbaa !1
  %scevgep7 = getelementptr float, float* %lsr.iv5, i32 1
  %7 = load volatile float, float* %scevgep7, align 4, !tbaa !1
  %mul40 = fmul float %3, %4
  %scevgep15 = getelementptr float, float* %lsr.iv1214, i32 -2
  %8 = load float, float* %scevgep15, align 4, !tbaa !1
  %add42 = fadd float %mul40, %8
  store float %add42, float* %scevgep15, align 4, !tbaa !1
  %mul44 = fmul float %3, %5
  %scevgep17 = getelementptr float, float* %lsr.iv1214, i32 -1
  %9 = load float, float* %scevgep17, align 4, !tbaa !1
  %add47 = fadd float %mul44, %9
  store float %add47, float* %scevgep17, align 4, !tbaa !1
  %mul49 = fmul float %3, %6
  %10 = load float, float* %lsr.iv1214, align 4, !tbaa !1
  %add52 = fadd float %mul49, %10
  store float %add52, float* %lsr.iv1214, align 4, !tbaa !1
  %mul54 = fmul float %3, %7
  %scevgep16 = getelementptr float, float* %lsr.iv1214, i32 1
  %11 = load float, float* %scevgep16, align 4, !tbaa !1
  %add57 = fadd float %mul54, %11
  store float %add57, float* %scevgep16, align 4, !tbaa !1
  %add59 = add nuw nsw i32 %j1.1137, 4
  %scevgep6 = getelementptr float, float* %lsr.iv5, i32 4
  %scevgep13 = getelementptr [8 x float], [8 x float]* %lsr.iv12, i32 0, i32 4
  %12 = bitcast float* %scevgep13 to [8 x float]*
  %cmp12 = icmp slt i32 %add59, 8
  br i1 %cmp12, label %for.body13, label %for.end60

for.end60:                                        ; preds = %for.body13
  %13 = bitcast float* %lsr.iv2 to i1*
  %inc62 = add nuw nsw i32 %x.0139, 1
  %scevgep4 = getelementptr i1, i1* %13, i32 %0
  %14 = bitcast i1* %scevgep4 to float*
  %exitcond = icmp eq i32 %inc62, %NN
  br i1 %exitcond, label %for.cond64.preheader, label %for.body9

for.body66:                                       ; preds = %for.body66, %for.cond64.preheader
  %lsr.iv24 = phi float* [ %scevgep25, %for.body66 ], [ %lsr.iv22, %for.cond64.preheader ]
  %lsr.iv18 = phi i32 [ %lsr.iv.next, %for.body66 ], [ 0, %for.cond64.preheader ]
  %sunkaddr = ptrtoint [8 x float]* %tot to i32
  %sunkaddr29 = add i32 %sunkaddr, %lsr.iv18
  %sunkaddr30 = inttoptr i32 %sunkaddr29 to float*
  %15 = load float, float* %sunkaddr30, align 4, !tbaa !1
  %16 = load volatile float, float* %lsr.iv24, align 4, !tbaa !1
  %add72 = fadd float %15, %16
  store volatile float %add72, float* %lsr.iv24, align 4, !tbaa !1
  %lsr.iv.next = add nuw nsw i32 %lsr.iv18, 4
  %scevgep25 = getelementptr float, float* %lsr.iv24, i32 1
  %exitcond145 = icmp eq i32 %lsr.iv.next, 32
  br i1 %exitcond145, label %for.end75, label %for.body66

for.end75:                                        ; preds = %for.body66
  %17 = bitcast [8 x float]* %tot to i8*
  call void @llvm.lifetime.end(i64 32, i8* nonnull %17) #3
  %add77 = add nuw nsw i32 %j0.0142, 8
  %scevgep1 = getelementptr float, float* %lsr.iv, i32 8
  %scevgep23 = getelementptr float, float* %lsr.iv22, i32 8
  %cmp2 = icmp slt i32 %add77, %NN
  br i1 %cmp2, label %for.body9.preheader, label %for.end78

for.end78:                                        ; preds = %for.end75
  %18 = bitcast float* %lsr.iv19 to i1*
  %inc80 = add nuw nsw i32 %i.0144, 1
  %scevgep21 = getelementptr i1, i1* %18, i32 %0
  %19 = bitcast i1* %scevgep21 to float*
  %exitcond146 = icmp eq i32 %inc80, %NN
  br i1 %exitcond146, label %for.end81, label %for.body3.lr.ph

for.end81:                                        ; preds = %for.end78, %entry
  ret void
}
*** IR Dump Before Exception handling preparation ***
; Function Attrs: nounwind optsize
define hidden void @matmac(float* noalias %aa, float* noalias %bb, float* noalias %cc, i32 %NN) local_unnamed_addr #2 {
entry:
  %tot = alloca [8 x float], align 4
  %cmp143 = icmp sgt i32 %NN, 0
  br i1 %cmp143, label %for.body3.lr.ph.preheader, label %for.end81

for.body3.lr.ph.preheader:                        ; preds = %entry
  %scevgep = getelementptr float, float* %bb, i32 2
  %0 = shl i32 %NN, 2
  %scevgep10 = getelementptr [8 x float], [8 x float]* %tot, i32 0, i32 2
  br label %for.body3.lr.ph

for.body3.lr.ph:                                  ; preds = %for.end78, %for.body3.lr.ph.preheader
  %lsr.iv19 = phi float* [ %19, %for.end78 ], [ %cc, %for.body3.lr.ph.preheader ]
  %i.0144 = phi i32 [ %inc80, %for.end78 ], [ 0, %for.body3.lr.ph.preheader ]
  %mul68 = mul nsw i32 %i.0144, %NN
  %add.ptr = getelementptr inbounds float, float* %aa, i32 %mul68
  br label %for.body9.preheader

for.body9.preheader:                              ; preds = %for.end75, %for.body3.lr.ph
  %lsr.iv22 = phi float* [ %scevgep23, %for.end75 ], [ %lsr.iv19, %for.body3.lr.ph ]
  %lsr.iv = phi float* [ %scevgep1, %for.end75 ], [ %scevgep, %for.body3.lr.ph ]
  %j0.0142 = phi i32 [ 0, %for.body3.lr.ph ], [ %add77, %for.end75 ]
  %1 = bitcast [8 x float]* %tot to i8*
  call void @llvm.lifetime.start(i64 32, i8* nonnull %1) #3
  call void @llvm.memset.p0i8.i32(i8* nonnull %1, i8 0, i32 32, i32 4, i1 false)
  br label %for.body9

for.cond64.preheader:                             ; preds = %for.end60
  br label %for.body66

for.body9:                                        ; preds = %for.end60, %for.body9.preheader
  %lsr.iv2 = phi float* [ %14, %for.end60 ], [ %lsr.iv, %for.body9.preheader ]
  %x.0139 = phi i32 [ %inc62, %for.end60 ], [ 0, %for.body9.preheader ]
  %2 = bitcast float* %scevgep10 to [8 x float]*
  %add.ptr10 = getelementptr inbounds float, float* %add.ptr, i32 %x.0139
  %3 = load volatile float, float* %add.ptr10, align 4, !tbaa !1
  br label %for.body13

for.body13:                                       ; preds = %for.body13, %for.body9
  %lsr.iv12 = phi [8 x float]* [ %12, %for.body13 ], [ %2, %for.body9 ]
  %lsr.iv5 = phi float* [ %scevgep6, %for.body13 ], [ %lsr.iv2, %for.body9 ]
  %j1.1137 = phi i32 [ 0, %for.body9 ], [ %add59, %for.body13 ]
  %lsr.iv1214 = bitcast [8 x float]* %lsr.iv12 to float*
  %scevgep8 = getelementptr float, float* %lsr.iv5, i32 -2
  %4 = load volatile float, float* %scevgep8, align 4, !tbaa !1
  %scevgep9 = getelementptr float, float* %lsr.iv5, i32 -1
  %5 = load volatile float, float* %scevgep9, align 4, !tbaa !1
  %6 = load volatile float, float* %lsr.iv5, align 4, !tbaa !1
  %scevgep7 = getelementptr float, float* %lsr.iv5, i32 1
  %7 = load volatile float, float* %scevgep7, align 4, !tbaa !1
  %mul40 = fmul float %3, %4
  %scevgep15 = getelementptr float, float* %lsr.iv1214, i32 -2
  %8 = load float, float* %scevgep15, align 4, !tbaa !1
  %add42 = fadd float %mul40, %8
  store float %add42, float* %scevgep15, align 4, !tbaa !1
  %mul44 = fmul float %3, %5
  %scevgep17 = getelementptr float, float* %lsr.iv1214, i32 -1
  %9 = load float, float* %scevgep17, align 4, !tbaa !1
  %add47 = fadd float %mul44, %9
  store float %add47, float* %scevgep17, align 4, !tbaa !1
  %mul49 = fmul float %3, %6
  %10 = load float, float* %lsr.iv1214, align 4, !tbaa !1
  %add52 = fadd float %mul49, %10
  store float %add52, float* %lsr.iv1214, align 4, !tbaa !1
  %mul54 = fmul float %3, %7
  %scevgep16 = getelementptr float, float* %lsr.iv1214, i32 1
  %11 = load float, float* %scevgep16, align 4, !tbaa !1
  %add57 = fadd float %mul54, %11
  store float %add57, float* %scevgep16, align 4, !tbaa !1
  %add59 = add nuw nsw i32 %j1.1137, 4
  %scevgep6 = getelementptr float, float* %lsr.iv5, i32 4
  %scevgep13 = getelementptr [8 x float], [8 x float]* %lsr.iv12, i32 0, i32 4
  %12 = bitcast float* %scevgep13 to [8 x float]*
  %cmp12 = icmp slt i32 %add59, 8
  br i1 %cmp12, label %for.body13, label %for.end60

for.end60:                                        ; preds = %for.body13
  %13 = bitcast float* %lsr.iv2 to i1*
  %inc62 = add nuw nsw i32 %x.0139, 1
  %scevgep4 = getelementptr i1, i1* %13, i32 %0
  %14 = bitcast i1* %scevgep4 to float*
  %exitcond = icmp eq i32 %inc62, %NN
  br i1 %exitcond, label %for.cond64.preheader, label %for.body9

for.body66:                                       ; preds = %for.body66, %for.cond64.preheader
  %lsr.iv24 = phi float* [ %scevgep25, %for.body66 ], [ %lsr.iv22, %for.cond64.preheader ]
  %lsr.iv18 = phi i32 [ %lsr.iv.next, %for.body66 ], [ 0, %for.cond64.preheader ]
  %sunkaddr = ptrtoint [8 x float]* %tot to i32
  %sunkaddr29 = add i32 %sunkaddr, %lsr.iv18
  %sunkaddr30 = inttoptr i32 %sunkaddr29 to float*
  %15 = load float, float* %sunkaddr30, align 4, !tbaa !1
  %16 = load volatile float, float* %lsr.iv24, align 4, !tbaa !1
  %add72 = fadd float %15, %16
  store volatile float %add72, float* %lsr.iv24, align 4, !tbaa !1
  %lsr.iv.next = add nuw nsw i32 %lsr.iv18, 4
  %scevgep25 = getelementptr float, float* %lsr.iv24, i32 1
  %exitcond145 = icmp eq i32 %lsr.iv.next, 32
  br i1 %exitcond145, label %for.end75, label %for.body66

for.end75:                                        ; preds = %for.body66
  %17 = bitcast [8 x float]* %tot to i8*
  call void @llvm.lifetime.end(i64 32, i8* nonnull %17) #3
  %add77 = add nuw nsw i32 %j0.0142, 8
  %scevgep1 = getelementptr float, float* %lsr.iv, i32 8
  %scevgep23 = getelementptr float, float* %lsr.iv22, i32 8
  %cmp2 = icmp slt i32 %add77, %NN
  br i1 %cmp2, label %for.body9.preheader, label %for.end78

for.end78:                                        ; preds = %for.end75
  %18 = bitcast float* %lsr.iv19 to i1*
  %inc80 = add nuw nsw i32 %i.0144, 1
  %scevgep21 = getelementptr i1, i1* %18, i32 %0
  %19 = bitcast i1* %scevgep21 to float*
  %exitcond146 = icmp eq i32 %inc80, %NN
  br i1 %exitcond146, label %for.end81, label %for.body3.lr.ph

for.end81:                                        ; preds = %for.end78, %entry
  ret void
}
*** IR Dump After Exception handling preparation ***
; Function Attrs: nounwind optsize
define hidden void @matmac(float* noalias %aa, float* noalias %bb, float* noalias %cc, i32 %NN) local_unnamed_addr #2 {
entry:
  %tot = alloca [8 x float], align 4
  %cmp143 = icmp sgt i32 %NN, 0
  br i1 %cmp143, label %for.body3.lr.ph.preheader, label %for.end81

for.body3.lr.ph.preheader:                        ; preds = %entry
  %scevgep = getelementptr float, float* %bb, i32 2
  %0 = shl i32 %NN, 2
  %scevgep10 = getelementptr [8 x float], [8 x float]* %tot, i32 0, i32 2
  br label %for.body3.lr.ph

for.body3.lr.ph:                                  ; preds = %for.end78, %for.body3.lr.ph.preheader
  %lsr.iv19 = phi float* [ %19, %for.end78 ], [ %cc, %for.body3.lr.ph.preheader ]
  %i.0144 = phi i32 [ %inc80, %for.end78 ], [ 0, %for.body3.lr.ph.preheader ]
  %mul68 = mul nsw i32 %i.0144, %NN
  %add.ptr = getelementptr inbounds float, float* %aa, i32 %mul68
  br label %for.body9.preheader

for.body9.preheader:                              ; preds = %for.end75, %for.body3.lr.ph
  %lsr.iv22 = phi float* [ %scevgep23, %for.end75 ], [ %lsr.iv19, %for.body3.lr.ph ]
  %lsr.iv = phi float* [ %scevgep1, %for.end75 ], [ %scevgep, %for.body3.lr.ph ]
  %j0.0142 = phi i32 [ 0, %for.body3.lr.ph ], [ %add77, %for.end75 ]
  %1 = bitcast [8 x float]* %tot to i8*
  call void @llvm.lifetime.start(i64 32, i8* nonnull %1) #3
  call void @llvm.memset.p0i8.i32(i8* nonnull %1, i8 0, i32 32, i32 4, i1 false)
  br label %for.body9

for.cond64.preheader:                             ; preds = %for.end60
  br label %for.body66

for.body9:                                        ; preds = %for.end60, %for.body9.preheader
  %lsr.iv2 = phi float* [ %14, %for.end60 ], [ %lsr.iv, %for.body9.preheader ]
  %x.0139 = phi i32 [ %inc62, %for.end60 ], [ 0, %for.body9.preheader ]
  %2 = bitcast float* %scevgep10 to [8 x float]*
  %add.ptr10 = getelementptr inbounds float, float* %add.ptr, i32 %x.0139
  %3 = load volatile float, float* %add.ptr10, align 4, !tbaa !1
  br label %for.body13

for.body13:                                       ; preds = %for.body13, %for.body9
  %lsr.iv12 = phi [8 x float]* [ %12, %for.body13 ], [ %2, %for.body9 ]
  %lsr.iv5 = phi float* [ %scevgep6, %for.body13 ], [ %lsr.iv2, %for.body9 ]
  %j1.1137 = phi i32 [ 0, %for.body9 ], [ %add59, %for.body13 ]
  %lsr.iv1214 = bitcast [8 x float]* %lsr.iv12 to float*
  %scevgep8 = getelementptr float, float* %lsr.iv5, i32 -2
  %4 = load volatile float, float* %scevgep8, align 4, !tbaa !1
  %scevgep9 = getelementptr float, float* %lsr.iv5, i32 -1
  %5 = load volatile float, float* %scevgep9, align 4, !tbaa !1
  %6 = load volatile float, float* %lsr.iv5, align 4, !tbaa !1
  %scevgep7 = getelementptr float, float* %lsr.iv5, i32 1
  %7 = load volatile float, float* %scevgep7, align 4, !tbaa !1
  %mul40 = fmul float %3, %4
  %scevgep15 = getelementptr float, float* %lsr.iv1214, i32 -2
  %8 = load float, float* %scevgep15, align 4, !tbaa !1
  %add42 = fadd float %mul40, %8
  store float %add42, float* %scevgep15, align 4, !tbaa !1
  %mul44 = fmul float %3, %5
  %scevgep17 = getelementptr float, float* %lsr.iv1214, i32 -1
  %9 = load float, float* %scevgep17, align 4, !tbaa !1
  %add47 = fadd float %mul44, %9
  store float %add47, float* %scevgep17, align 4, !tbaa !1
  %mul49 = fmul float %3, %6
  %10 = load float, float* %lsr.iv1214, align 4, !tbaa !1
  %add52 = fadd float %mul49, %10
  store float %add52, float* %lsr.iv1214, align 4, !tbaa !1
  %mul54 = fmul float %3, %7
  %scevgep16 = getelementptr float, float* %lsr.iv1214, i32 1
  %11 = load float, float* %scevgep16, align 4, !tbaa !1
  %add57 = fadd float %mul54, %11
  store float %add57, float* %scevgep16, align 4, !tbaa !1
  %add59 = add nuw nsw i32 %j1.1137, 4
  %scevgep6 = getelementptr float, float* %lsr.iv5, i32 4
  %scevgep13 = getelementptr [8 x float], [8 x float]* %lsr.iv12, i32 0, i32 4
  %12 = bitcast float* %scevgep13 to [8 x float]*
  %cmp12 = icmp slt i32 %add59, 8
  br i1 %cmp12, label %for.body13, label %for.end60

for.end60:                                        ; preds = %for.body13
  %13 = bitcast float* %lsr.iv2 to i1*
  %inc62 = add nuw nsw i32 %x.0139, 1
  %scevgep4 = getelementptr i1, i1* %13, i32 %0
  %14 = bitcast i1* %scevgep4 to float*
  %exitcond = icmp eq i32 %inc62, %NN
  br i1 %exitcond, label %for.cond64.preheader, label %for.body9

for.body66:                                       ; preds = %for.body66, %for.cond64.preheader
  %lsr.iv24 = phi float* [ %scevgep25, %for.body66 ], [ %lsr.iv22, %for.cond64.preheader ]
  %lsr.iv18 = phi i32 [ %lsr.iv.next, %for.body66 ], [ 0, %for.cond64.preheader ]
  %sunkaddr = ptrtoint [8 x float]* %tot to i32
  %sunkaddr29 = add i32 %sunkaddr, %lsr.iv18
  %sunkaddr30 = inttoptr i32 %sunkaddr29 to float*
  %15 = load float, float* %sunkaddr30, align 4, !tbaa !1
  %16 = load volatile float, float* %lsr.iv24, align 4, !tbaa !1
  %add72 = fadd float %15, %16
  store volatile float %add72, float* %lsr.iv24, align 4, !tbaa !1
  %lsr.iv.next = add nuw nsw i32 %lsr.iv18, 4
  %scevgep25 = getelementptr float, float* %lsr.iv24, i32 1
  %exitcond145 = icmp eq i32 %lsr.iv.next, 32
  br i1 %exitcond145, label %for.end75, label %for.body66

for.end75:                                        ; preds = %for.body66
  %17 = bitcast [8 x float]* %tot to i8*
  call void @llvm.lifetime.end(i64 32, i8* nonnull %17) #3
  %add77 = add nuw nsw i32 %j0.0142, 8
  %scevgep1 = getelementptr float, float* %lsr.iv, i32 8
  %scevgep23 = getelementptr float, float* %lsr.iv22, i32 8
  %cmp2 = icmp slt i32 %add77, %NN
  br i1 %cmp2, label %for.body9.preheader, label %for.end78

for.end78:                                        ; preds = %for.end75
  %18 = bitcast float* %lsr.iv19 to i1*
  %inc80 = add nuw nsw i32 %i.0144, 1
  %scevgep21 = getelementptr i1, i1* %18, i32 %0
  %19 = bitcast i1* %scevgep21 to float*
  %exitcond146 = icmp eq i32 %inc80, %NN
  br i1 %exitcond146, label %for.end81, label %for.body3.lr.ph

for.end81:                                        ; preds = %for.end78, %entry
  ret void
}
*** IR Dump Before Safe Stack instrumentation pass ***
; Function Attrs: nounwind optsize
define hidden void @matmac(float* noalias %aa, float* noalias %bb, float* noalias %cc, i32 %NN) local_unnamed_addr #2 {
entry:
  %tot = alloca [8 x float], align 4
  %cmp143 = icmp sgt i32 %NN, 0
  br i1 %cmp143, label %for.body3.lr.ph.preheader, label %for.end81

for.body3.lr.ph.preheader:                        ; preds = %entry
  %scevgep = getelementptr float, float* %bb, i32 2
  %0 = shl i32 %NN, 2
  %scevgep10 = getelementptr [8 x float], [8 x float]* %tot, i32 0, i32 2
  br label %for.body3.lr.ph

for.body3.lr.ph:                                  ; preds = %for.end78, %for.body3.lr.ph.preheader
  %lsr.iv19 = phi float* [ %19, %for.end78 ], [ %cc, %for.body3.lr.ph.preheader ]
  %i.0144 = phi i32 [ %inc80, %for.end78 ], [ 0, %for.body3.lr.ph.preheader ]
  %mul68 = mul nsw i32 %i.0144, %NN
  %add.ptr = getelementptr inbounds float, float* %aa, i32 %mul68
  br label %for.body9.preheader

for.body9.preheader:                              ; preds = %for.end75, %for.body3.lr.ph
  %lsr.iv22 = phi float* [ %scevgep23, %for.end75 ], [ %lsr.iv19, %for.body3.lr.ph ]
  %lsr.iv = phi float* [ %scevgep1, %for.end75 ], [ %scevgep, %for.body3.lr.ph ]
  %j0.0142 = phi i32 [ 0, %for.body3.lr.ph ], [ %add77, %for.end75 ]
  %1 = bitcast [8 x float]* %tot to i8*
  call void @llvm.lifetime.start(i64 32, i8* nonnull %1) #3
  call void @llvm.memset.p0i8.i32(i8* nonnull %1, i8 0, i32 32, i32 4, i1 false)
  br label %for.body9

for.cond64.preheader:                             ; preds = %for.end60
  br label %for.body66

for.body9:                                        ; preds = %for.end60, %for.body9.preheader
  %lsr.iv2 = phi float* [ %14, %for.end60 ], [ %lsr.iv, %for.body9.preheader ]
  %x.0139 = phi i32 [ %inc62, %for.end60 ], [ 0, %for.body9.preheader ]
  %2 = bitcast float* %scevgep10 to [8 x float]*
  %add.ptr10 = getelementptr inbounds float, float* %add.ptr, i32 %x.0139
  %3 = load volatile float, float* %add.ptr10, align 4, !tbaa !1
  br label %for.body13

for.body13:                                       ; preds = %for.body13, %for.body9
  %lsr.iv12 = phi [8 x float]* [ %12, %for.body13 ], [ %2, %for.body9 ]
  %lsr.iv5 = phi float* [ %scevgep6, %for.body13 ], [ %lsr.iv2, %for.body9 ]
  %j1.1137 = phi i32 [ 0, %for.body9 ], [ %add59, %for.body13 ]
  %lsr.iv1214 = bitcast [8 x float]* %lsr.iv12 to float*
  %scevgep8 = getelementptr float, float* %lsr.iv5, i32 -2
  %4 = load volatile float, float* %scevgep8, align 4, !tbaa !1
  %scevgep9 = getelementptr float, float* %lsr.iv5, i32 -1
  %5 = load volatile float, float* %scevgep9, align 4, !tbaa !1
  %6 = load volatile float, float* %lsr.iv5, align 4, !tbaa !1
  %scevgep7 = getelementptr float, float* %lsr.iv5, i32 1
  %7 = load volatile float, float* %scevgep7, align 4, !tbaa !1
  %mul40 = fmul float %3, %4
  %scevgep15 = getelementptr float, float* %lsr.iv1214, i32 -2
  %8 = load float, float* %scevgep15, align 4, !tbaa !1
  %add42 = fadd float %mul40, %8
  store float %add42, float* %scevgep15, align 4, !tbaa !1
  %mul44 = fmul float %3, %5
  %scevgep17 = getelementptr float, float* %lsr.iv1214, i32 -1
  %9 = load float, float* %scevgep17, align 4, !tbaa !1
  %add47 = fadd float %mul44, %9
  store float %add47, float* %scevgep17, align 4, !tbaa !1
  %mul49 = fmul float %3, %6
  %10 = load float, float* %lsr.iv1214, align 4, !tbaa !1
  %add52 = fadd float %mul49, %10
  store float %add52, float* %lsr.iv1214, align 4, !tbaa !1
  %mul54 = fmul float %3, %7
  %scevgep16 = getelementptr float, float* %lsr.iv1214, i32 1
  %11 = load float, float* %scevgep16, align 4, !tbaa !1
  %add57 = fadd float %mul54, %11
  store float %add57, float* %scevgep16, align 4, !tbaa !1
  %add59 = add nuw nsw i32 %j1.1137, 4
  %scevgep6 = getelementptr float, float* %lsr.iv5, i32 4
  %scevgep13 = getelementptr [8 x float], [8 x float]* %lsr.iv12, i32 0, i32 4
  %12 = bitcast float* %scevgep13 to [8 x float]*
  %cmp12 = icmp slt i32 %add59, 8
  br i1 %cmp12, label %for.body13, label %for.end60

for.end60:                                        ; preds = %for.body13
  %13 = bitcast float* %lsr.iv2 to i1*
  %inc62 = add nuw nsw i32 %x.0139, 1
  %scevgep4 = getelementptr i1, i1* %13, i32 %0
  %14 = bitcast i1* %scevgep4 to float*
  %exitcond = icmp eq i32 %inc62, %NN
  br i1 %exitcond, label %for.cond64.preheader, label %for.body9

for.body66:                                       ; preds = %for.body66, %for.cond64.preheader
  %lsr.iv24 = phi float* [ %scevgep25, %for.body66 ], [ %lsr.iv22, %for.cond64.preheader ]
  %lsr.iv18 = phi i32 [ %lsr.iv.next, %for.body66 ], [ 0, %for.cond64.preheader ]
  %sunkaddr = ptrtoint [8 x float]* %tot to i32
  %sunkaddr29 = add i32 %sunkaddr, %lsr.iv18
  %sunkaddr30 = inttoptr i32 %sunkaddr29 to float*
  %15 = load float, float* %sunkaddr30, align 4, !tbaa !1
  %16 = load volatile float, float* %lsr.iv24, align 4, !tbaa !1
  %add72 = fadd float %15, %16
  store volatile float %add72, float* %lsr.iv24, align 4, !tbaa !1
  %lsr.iv.next = add nuw nsw i32 %lsr.iv18, 4
  %scevgep25 = getelementptr float, float* %lsr.iv24, i32 1
  %exitcond145 = icmp eq i32 %lsr.iv.next, 32
  br i1 %exitcond145, label %for.end75, label %for.body66

for.end75:                                        ; preds = %for.body66
  %17 = bitcast [8 x float]* %tot to i8*
  call void @llvm.lifetime.end(i64 32, i8* nonnull %17) #3
  %add77 = add nuw nsw i32 %j0.0142, 8
  %scevgep1 = getelementptr float, float* %lsr.iv, i32 8
  %scevgep23 = getelementptr float, float* %lsr.iv22, i32 8
  %cmp2 = icmp slt i32 %add77, %NN
  br i1 %cmp2, label %for.body9.preheader, label %for.end78

for.end78:                                        ; preds = %for.end75
  %18 = bitcast float* %lsr.iv19 to i1*
  %inc80 = add nuw nsw i32 %i.0144, 1
  %scevgep21 = getelementptr i1, i1* %18, i32 %0
  %19 = bitcast i1* %scevgep21 to float*
  %exitcond146 = icmp eq i32 %inc80, %NN
  br i1 %exitcond146, label %for.end81, label %for.body3.lr.ph

for.end81:                                        ; preds = %for.end78, %entry
  ret void
}
[SafeStack] Function: matmac
[SafeStack]     safestack is not requested for this function
*** IR Dump After Safe Stack instrumentation pass ***
; Function Attrs: nounwind optsize
define hidden void @matmac(float* noalias %aa, float* noalias %bb, float* noalias %cc, i32 %NN) local_unnamed_addr #2 {
entry:
  %tot = alloca [8 x float], align 4
  %cmp143 = icmp sgt i32 %NN, 0
  br i1 %cmp143, label %for.body3.lr.ph.preheader, label %for.end81

for.body3.lr.ph.preheader:                        ; preds = %entry
  %scevgep = getelementptr float, float* %bb, i32 2
  %0 = shl i32 %NN, 2
  %scevgep10 = getelementptr [8 x float], [8 x float]* %tot, i32 0, i32 2
  br label %for.body3.lr.ph

for.body3.lr.ph:                                  ; preds = %for.end78, %for.body3.lr.ph.preheader
  %lsr.iv19 = phi float* [ %19, %for.end78 ], [ %cc, %for.body3.lr.ph.preheader ]
  %i.0144 = phi i32 [ %inc80, %for.end78 ], [ 0, %for.body3.lr.ph.preheader ]
  %mul68 = mul nsw i32 %i.0144, %NN
  %add.ptr = getelementptr inbounds float, float* %aa, i32 %mul68
  br label %for.body9.preheader

for.body9.preheader:                              ; preds = %for.end75, %for.body3.lr.ph
  %lsr.iv22 = phi float* [ %scevgep23, %for.end75 ], [ %lsr.iv19, %for.body3.lr.ph ]
  %lsr.iv = phi float* [ %scevgep1, %for.end75 ], [ %scevgep, %for.body3.lr.ph ]
  %j0.0142 = phi i32 [ 0, %for.body3.lr.ph ], [ %add77, %for.end75 ]
  %1 = bitcast [8 x float]* %tot to i8*
  call void @llvm.lifetime.start(i64 32, i8* nonnull %1) #3
  call void @llvm.memset.p0i8.i32(i8* nonnull %1, i8 0, i32 32, i32 4, i1 false)
  br label %for.body9

for.cond64.preheader:                             ; preds = %for.end60
  br label %for.body66

for.body9:                                        ; preds = %for.end60, %for.body9.preheader
  %lsr.iv2 = phi float* [ %14, %for.end60 ], [ %lsr.iv, %for.body9.preheader ]
  %x.0139 = phi i32 [ %inc62, %for.end60 ], [ 0, %for.body9.preheader ]
  %2 = bitcast float* %scevgep10 to [8 x float]*
  %add.ptr10 = getelementptr inbounds float, float* %add.ptr, i32 %x.0139
  %3 = load volatile float, float* %add.ptr10, align 4, !tbaa !1
  br label %for.body13

for.body13:                                       ; preds = %for.body13, %for.body9
  %lsr.iv12 = phi [8 x float]* [ %12, %for.body13 ], [ %2, %for.body9 ]
  %lsr.iv5 = phi float* [ %scevgep6, %for.body13 ], [ %lsr.iv2, %for.body9 ]
  %j1.1137 = phi i32 [ 0, %for.body9 ], [ %add59, %for.body13 ]
  %lsr.iv1214 = bitcast [8 x float]* %lsr.iv12 to float*
  %scevgep8 = getelementptr float, float* %lsr.iv5, i32 -2
  %4 = load volatile float, float* %scevgep8, align 4, !tbaa !1
  %scevgep9 = getelementptr float, float* %lsr.iv5, i32 -1
  %5 = load volatile float, float* %scevgep9, align 4, !tbaa !1
  %6 = load volatile float, float* %lsr.iv5, align 4, !tbaa !1
  %scevgep7 = getelementptr float, float* %lsr.iv5, i32 1
  %7 = load volatile float, float* %scevgep7, align 4, !tbaa !1
  %mul40 = fmul float %3, %4
  %scevgep15 = getelementptr float, float* %lsr.iv1214, i32 -2
  %8 = load float, float* %scevgep15, align 4, !tbaa !1
  %add42 = fadd float %mul40, %8
  store float %add42, float* %scevgep15, align 4, !tbaa !1
  %mul44 = fmul float %3, %5
  %scevgep17 = getelementptr float, float* %lsr.iv1214, i32 -1
  %9 = load float, float* %scevgep17, align 4, !tbaa !1
  %add47 = fadd float %mul44, %9
  store float %add47, float* %scevgep17, align 4, !tbaa !1
  %mul49 = fmul float %3, %6
  %10 = load float, float* %lsr.iv1214, align 4, !tbaa !1
  %add52 = fadd float %mul49, %10
  store float %add52, float* %lsr.iv1214, align 4, !tbaa !1
  %mul54 = fmul float %3, %7
  %scevgep16 = getelementptr float, float* %lsr.iv1214, i32 1
  %11 = load float, float* %scevgep16, align 4, !tbaa !1
  %add57 = fadd float %mul54, %11
  store float %add57, float* %scevgep16, align 4, !tbaa !1
  %add59 = add nuw nsw i32 %j1.1137, 4
  %scevgep6 = getelementptr float, float* %lsr.iv5, i32 4
  %scevgep13 = getelementptr [8 x float], [8 x float]* %lsr.iv12, i32 0, i32 4
  %12 = bitcast float* %scevgep13 to [8 x float]*
  %cmp12 = icmp slt i32 %add59, 8
  br i1 %cmp12, label %for.body13, label %for.end60

for.end60:                                        ; preds = %for.body13
  %13 = bitcast float* %lsr.iv2 to i1*
  %inc62 = add nuw nsw i32 %x.0139, 1
  %scevgep4 = getelementptr i1, i1* %13, i32 %0
  %14 = bitcast i1* %scevgep4 to float*
  %exitcond = icmp eq i32 %inc62, %NN
  br i1 %exitcond, label %for.cond64.preheader, label %for.body9

for.body66:                                       ; preds = %for.body66, %for.cond64.preheader
  %lsr.iv24 = phi float* [ %scevgep25, %for.body66 ], [ %lsr.iv22, %for.cond64.preheader ]
  %lsr.iv18 = phi i32 [ %lsr.iv.next, %for.body66 ], [ 0, %for.cond64.preheader ]
  %sunkaddr = ptrtoint [8 x float]* %tot to i32
  %sunkaddr29 = add i32 %sunkaddr, %lsr.iv18
  %sunkaddr30 = inttoptr i32 %sunkaddr29 to float*
  %15 = load float, float* %sunkaddr30, align 4, !tbaa !1
  %16 = load volatile float, float* %lsr.iv24, align 4, !tbaa !1
  %add72 = fadd float %15, %16
  store volatile float %add72, float* %lsr.iv24, align 4, !tbaa !1
  %lsr.iv.next = add nuw nsw i32 %lsr.iv18, 4
  %scevgep25 = getelementptr float, float* %lsr.iv24, i32 1
  %exitcond145 = icmp eq i32 %lsr.iv.next, 32
  br i1 %exitcond145, label %for.end75, label %for.body66

for.end75:                                        ; preds = %for.body66
  %17 = bitcast [8 x float]* %tot to i8*
  call void @llvm.lifetime.end(i64 32, i8* nonnull %17) #3
  %add77 = add nuw nsw i32 %j0.0142, 8
  %scevgep1 = getelementptr float, float* %lsr.iv, i32 8
  %scevgep23 = getelementptr float, float* %lsr.iv22, i32 8
  %cmp2 = icmp slt i32 %add77, %NN
  br i1 %cmp2, label %for.body9.preheader, label %for.end78

for.end78:                                        ; preds = %for.end75
  %18 = bitcast float* %lsr.iv19 to i1*
  %inc80 = add nuw nsw i32 %i.0144, 1
  %scevgep21 = getelementptr i1, i1* %18, i32 %0
  %19 = bitcast i1* %scevgep21 to float*
  %exitcond146 = icmp eq i32 %inc80, %NN
  br i1 %exitcond146, label %for.end81, label %for.body3.lr.ph

for.end81:                                        ; preds = %for.end78, %entry
  ret void
}
*** IR Dump Before Module Verifier ***
; Function Attrs: nounwind optsize
define hidden void @matmac(float* noalias %aa, float* noalias %bb, float* noalias %cc, i32 %NN) local_unnamed_addr #2 {
entry:
  %tot = alloca [8 x float], align 4
  %cmp143 = icmp sgt i32 %NN, 0
  br i1 %cmp143, label %for.body3.lr.ph.preheader, label %for.end81

for.body3.lr.ph.preheader:                        ; preds = %entry
  %scevgep = getelementptr float, float* %bb, i32 2
  %0 = shl i32 %NN, 2
  %scevgep10 = getelementptr [8 x float], [8 x float]* %tot, i32 0, i32 2
  br label %for.body3.lr.ph

for.body3.lr.ph:                                  ; preds = %for.end78, %for.body3.lr.ph.preheader
  %lsr.iv19 = phi float* [ %19, %for.end78 ], [ %cc, %for.body3.lr.ph.preheader ]
  %i.0144 = phi i32 [ %inc80, %for.end78 ], [ 0, %for.body3.lr.ph.preheader ]
  %mul68 = mul nsw i32 %i.0144, %NN
  %add.ptr = getelementptr inbounds float, float* %aa, i32 %mul68
  br label %for.body9.preheader

for.body9.preheader:                              ; preds = %for.end75, %for.body3.lr.ph
  %lsr.iv22 = phi float* [ %scevgep23, %for.end75 ], [ %lsr.iv19, %for.body3.lr.ph ]
  %lsr.iv = phi float* [ %scevgep1, %for.end75 ], [ %scevgep, %for.body3.lr.ph ]
  %j0.0142 = phi i32 [ 0, %for.body3.lr.ph ], [ %add77, %for.end75 ]
  %1 = bitcast [8 x float]* %tot to i8*
  call void @llvm.lifetime.start(i64 32, i8* nonnull %1) #3
  call void @llvm.memset.p0i8.i32(i8* nonnull %1, i8 0, i32 32, i32 4, i1 false)
  br label %for.body9

for.cond64.preheader:                             ; preds = %for.end60
  br label %for.body66

for.body9:                                        ; preds = %for.end60, %for.body9.preheader
  %lsr.iv2 = phi float* [ %14, %for.end60 ], [ %lsr.iv, %for.body9.preheader ]
  %x.0139 = phi i32 [ %inc62, %for.end60 ], [ 0, %for.body9.preheader ]
  %2 = bitcast float* %scevgep10 to [8 x float]*
  %add.ptr10 = getelementptr inbounds float, float* %add.ptr, i32 %x.0139
  %3 = load volatile float, float* %add.ptr10, align 4, !tbaa !1
  br label %for.body13

for.body13:                                       ; preds = %for.body13, %for.body9
  %lsr.iv12 = phi [8 x float]* [ %12, %for.body13 ], [ %2, %for.body9 ]
  %lsr.iv5 = phi float* [ %scevgep6, %for.body13 ], [ %lsr.iv2, %for.body9 ]
  %j1.1137 = phi i32 [ 0, %for.body9 ], [ %add59, %for.body13 ]
  %lsr.iv1214 = bitcast [8 x float]* %lsr.iv12 to float*
  %scevgep8 = getelementptr float, float* %lsr.iv5, i32 -2
  %4 = load volatile float, float* %scevgep8, align 4, !tbaa !1
  %scevgep9 = getelementptr float, float* %lsr.iv5, i32 -1
  %5 = load volatile float, float* %scevgep9, align 4, !tbaa !1
  %6 = load volatile float, float* %lsr.iv5, align 4, !tbaa !1
  %scevgep7 = getelementptr float, float* %lsr.iv5, i32 1
  %7 = load volatile float, float* %scevgep7, align 4, !tbaa !1
  %mul40 = fmul float %3, %4
  %scevgep15 = getelementptr float, float* %lsr.iv1214, i32 -2
  %8 = load float, float* %scevgep15, align 4, !tbaa !1
  %add42 = fadd float %mul40, %8
  store float %add42, float* %scevgep15, align 4, !tbaa !1
  %mul44 = fmul float %3, %5
  %scevgep17 = getelementptr float, float* %lsr.iv1214, i32 -1
  %9 = load float, float* %scevgep17, align 4, !tbaa !1
  %add47 = fadd float %mul44, %9
  store float %add47, float* %scevgep17, align 4, !tbaa !1
  %mul49 = fmul float %3, %6
  %10 = load float, float* %lsr.iv1214, align 4, !tbaa !1
  %add52 = fadd float %mul49, %10
  store float %add52, float* %lsr.iv1214, align 4, !tbaa !1
  %mul54 = fmul float %3, %7
  %scevgep16 = getelementptr float, float* %lsr.iv1214, i32 1
  %11 = load float, float* %scevgep16, align 4, !tbaa !1
  %add57 = fadd float %mul54, %11
  store float %add57, float* %scevgep16, align 4, !tbaa !1
  %add59 = add nuw nsw i32 %j1.1137, 4
  %scevgep6 = getelementptr float, float* %lsr.iv5, i32 4
  %scevgep13 = getelementptr [8 x float], [8 x float]* %lsr.iv12, i32 0, i32 4
  %12 = bitcast float* %scevgep13 to [8 x float]*
  %cmp12 = icmp slt i32 %add59, 8
  br i1 %cmp12, label %for.body13, label %for.end60

for.end60:                                        ; preds = %for.body13
  %13 = bitcast float* %lsr.iv2 to i1*
  %inc62 = add nuw nsw i32 %x.0139, 1
  %scevgep4 = getelementptr i1, i1* %13, i32 %0
  %14 = bitcast i1* %scevgep4 to float*
  %exitcond = icmp eq i32 %inc62, %NN
  br i1 %exitcond, label %for.cond64.preheader, label %for.body9

for.body66:                                       ; preds = %for.body66, %for.cond64.preheader
  %lsr.iv24 = phi float* [ %scevgep25, %for.body66 ], [ %lsr.iv22, %for.cond64.preheader ]
  %lsr.iv18 = phi i32 [ %lsr.iv.next, %for.body66 ], [ 0, %for.cond64.preheader ]
  %sunkaddr = ptrtoint [8 x float]* %tot to i32
  %sunkaddr29 = add i32 %sunkaddr, %lsr.iv18
  %sunkaddr30 = inttoptr i32 %sunkaddr29 to float*
  %15 = load float, float* %sunkaddr30, align 4, !tbaa !1
  %16 = load volatile float, float* %lsr.iv24, align 4, !tbaa !1
  %add72 = fadd float %15, %16
  store volatile float %add72, float* %lsr.iv24, align 4, !tbaa !1
  %lsr.iv.next = add nuw nsw i32 %lsr.iv18, 4
  %scevgep25 = getelementptr float, float* %lsr.iv24, i32 1
  %exitcond145 = icmp eq i32 %lsr.iv.next, 32
  br i1 %exitcond145, label %for.end75, label %for.body66

for.end75:                                        ; preds = %for.body66
  %17 = bitcast [8 x float]* %tot to i8*
  call void @llvm.lifetime.end(i64 32, i8* nonnull %17) #3
  %add77 = add nuw nsw i32 %j0.0142, 8
  %scevgep1 = getelementptr float, float* %lsr.iv, i32 8
  %scevgep23 = getelementptr float, float* %lsr.iv22, i32 8
  %cmp2 = icmp slt i32 %add77, %NN
  br i1 %cmp2, label %for.body9.preheader, label %for.end78

for.end78:                                        ; preds = %for.end75
  %18 = bitcast float* %lsr.iv19 to i1*
  %inc80 = add nuw nsw i32 %i.0144, 1
  %scevgep21 = getelementptr i1, i1* %18, i32 %0
  %19 = bitcast i1* %scevgep21 to float*
  %exitcond146 = icmp eq i32 %inc80, %NN
  br i1 %exitcond146, label %for.end81, label %for.body3.lr.ph

for.end81:                                        ; preds = %for.end78, %entry
  ret void
}
*** IR Dump After Module Verifier ***
; Function Attrs: nounwind optsize
define hidden void @matmac(float* noalias %aa, float* noalias %bb, float* noalias %cc, i32 %NN) local_unnamed_addr #2 {
entry:
  %tot = alloca [8 x float], align 4
  %cmp143 = icmp sgt i32 %NN, 0
  br i1 %cmp143, label %for.body3.lr.ph.preheader, label %for.end81

for.body3.lr.ph.preheader:                        ; preds = %entry
  %scevgep = getelementptr float, float* %bb, i32 2
  %0 = shl i32 %NN, 2
  %scevgep10 = getelementptr [8 x float], [8 x float]* %tot, i32 0, i32 2
  br label %for.body3.lr.ph

for.body3.lr.ph:                                  ; preds = %for.end78, %for.body3.lr.ph.preheader
  %lsr.iv19 = phi float* [ %19, %for.end78 ], [ %cc, %for.body3.lr.ph.preheader ]
  %i.0144 = phi i32 [ %inc80, %for.end78 ], [ 0, %for.body3.lr.ph.preheader ]
  %mul68 = mul nsw i32 %i.0144, %NN
  %add.ptr = getelementptr inbounds float, float* %aa, i32 %mul68
  br label %for.body9.preheader

for.body9.preheader:                              ; preds = %for.end75, %for.body3.lr.ph
  %lsr.iv22 = phi float* [ %scevgep23, %for.end75 ], [ %lsr.iv19, %for.body3.lr.ph ]
  %lsr.iv = phi float* [ %scevgep1, %for.end75 ], [ %scevgep, %for.body3.lr.ph ]
  %j0.0142 = phi i32 [ 0, %for.body3.lr.ph ], [ %add77, %for.end75 ]
  %1 = bitcast [8 x float]* %tot to i8*
  call void @llvm.lifetime.start(i64 32, i8* nonnull %1) #3
  call void @llvm.memset.p0i8.i32(i8* nonnull %1, i8 0, i32 32, i32 4, i1 false)
  br label %for.body9

for.cond64.preheader:                             ; preds = %for.end60
  br label %for.body66

for.body9:                                        ; preds = %for.end60, %for.body9.preheader
  %lsr.iv2 = phi float* [ %14, %for.end60 ], [ %lsr.iv, %for.body9.preheader ]
  %x.0139 = phi i32 [ %inc62, %for.end60 ], [ 0, %for.body9.preheader ]
  %2 = bitcast float* %scevgep10 to [8 x float]*
  %add.ptr10 = getelementptr inbounds float, float* %add.ptr, i32 %x.0139
  %3 = load volatile float, float* %add.ptr10, align 4, !tbaa !1
  br label %for.body13

for.body13:                                       ; preds = %for.body13, %for.body9
  %lsr.iv12 = phi [8 x float]* [ %12, %for.body13 ], [ %2, %for.body9 ]
  %lsr.iv5 = phi float* [ %scevgep6, %for.body13 ], [ %lsr.iv2, %for.body9 ]
  %j1.1137 = phi i32 [ 0, %for.body9 ], [ %add59, %for.body13 ]
  %lsr.iv1214 = bitcast [8 x float]* %lsr.iv12 to float*
  %scevgep8 = getelementptr float, float* %lsr.iv5, i32 -2
  %4 = load volatile float, float* %scevgep8, align 4, !tbaa !1
  %scevgep9 = getelementptr float, float* %lsr.iv5, i32 -1
  %5 = load volatile float, float* %scevgep9, align 4, !tbaa !1
  %6 = load volatile float, float* %lsr.iv5, align 4, !tbaa !1
  %scevgep7 = getelementptr float, float* %lsr.iv5, i32 1
  %7 = load volatile float, float* %scevgep7, align 4, !tbaa !1
  %mul40 = fmul float %3, %4
  %scevgep15 = getelementptr float, float* %lsr.iv1214, i32 -2
  %8 = load float, float* %scevgep15, align 4, !tbaa !1
  %add42 = fadd float %mul40, %8
  store float %add42, float* %scevgep15, align 4, !tbaa !1
  %mul44 = fmul float %3, %5
  %scevgep17 = getelementptr float, float* %lsr.iv1214, i32 -1
  %9 = load float, float* %scevgep17, align 4, !tbaa !1
  %add47 = fadd float %mul44, %9
  store float %add47, float* %scevgep17, align 4, !tbaa !1
  %mul49 = fmul float %3, %6
  %10 = load float, float* %lsr.iv1214, align 4, !tbaa !1
  %add52 = fadd float %mul49, %10
  store float %add52, float* %lsr.iv1214, align 4, !tbaa !1
  %mul54 = fmul float %3, %7
  %scevgep16 = getelementptr float, float* %lsr.iv1214, i32 1
  %11 = load float, float* %scevgep16, align 4, !tbaa !1
  %add57 = fadd float %mul54, %11
  store float %add57, float* %scevgep16, align 4, !tbaa !1
  %add59 = add nuw nsw i32 %j1.1137, 4
  %scevgep6 = getelementptr float, float* %lsr.iv5, i32 4
  %scevgep13 = getelementptr [8 x float], [8 x float]* %lsr.iv12, i32 0, i32 4
  %12 = bitcast float* %scevgep13 to [8 x float]*
  %cmp12 = icmp slt i32 %add59, 8
  br i1 %cmp12, label %for.body13, label %for.end60

for.end60:                                        ; preds = %for.body13
  %13 = bitcast float* %lsr.iv2 to i1*
  %inc62 = add nuw nsw i32 %x.0139, 1
  %scevgep4 = getelementptr i1, i1* %13, i32 %0
  %14 = bitcast i1* %scevgep4 to float*
  %exitcond = icmp eq i32 %inc62, %NN
  br i1 %exitcond, label %for.cond64.preheader, label %for.body9

for.body66:                                       ; preds = %for.body66, %for.cond64.preheader
  %lsr.iv24 = phi float* [ %scevgep25, %for.body66 ], [ %lsr.iv22, %for.cond64.preheader ]
  %lsr.iv18 = phi i32 [ %lsr.iv.next, %for.body66 ], [ 0, %for.cond64.preheader ]
  %sunkaddr = ptrtoint [8 x float]* %tot to i32
  %sunkaddr29 = add i32 %sunkaddr, %lsr.iv18
  %sunkaddr30 = inttoptr i32 %sunkaddr29 to float*
  %15 = load float, float* %sunkaddr30, align 4, !tbaa !1
  %16 = load volatile float, float* %lsr.iv24, align 4, !tbaa !1
  %add72 = fadd float %15, %16
  store volatile float %add72, float* %lsr.iv24, align 4, !tbaa !1
  %lsr.iv.next = add nuw nsw i32 %lsr.iv18, 4
  %scevgep25 = getelementptr float, float* %lsr.iv24, i32 1
  %exitcond145 = icmp eq i32 %lsr.iv.next, 32
  br i1 %exitcond145, label %for.end75, label %for.body66

for.end75:                                        ; preds = %for.body66
  %17 = bitcast [8 x float]* %tot to i8*
  call void @llvm.lifetime.end(i64 32, i8* nonnull %17) #3
  %add77 = add nuw nsw i32 %j0.0142, 8
  %scevgep1 = getelementptr float, float* %lsr.iv, i32 8
  %scevgep23 = getelementptr float, float* %lsr.iv22, i32 8
  %cmp2 = icmp slt i32 %add77, %NN
  br i1 %cmp2, label %for.body9.preheader, label %for.end78

for.end78:                                        ; preds = %for.end75
  %18 = bitcast float* %lsr.iv19 to i1*
  %inc80 = add nuw nsw i32 %i.0144, 1
  %scevgep21 = getelementptr i1, i1* %18, i32 %0
  %19 = bitcast i1* %scevgep21 to float*
  %exitcond146 = icmp eq i32 %inc80, %NN
  br i1 %exitcond146, label %for.end81, label %for.body3.lr.ph

for.end81:                                        ; preds = %for.end78, %entry
  ret void
}
---- Branch Probability Info : matmac ----

Computing probabilities for for.end81
Computing probabilities for for.end78
set edge for.end78 -> 1 successor probability to 0x7c000000 / 0x80000000 = 96.88%
set edge for.end78 -> 0 successor probability to 0x04000000 / 0x80000000 = 3.12%
Computing probabilities for for.end75
set edge for.end75 -> 0 successor probability to 0x7c000000 / 0x80000000 = 96.88%
set edge for.end75 -> 1 successor probability to 0x04000000 / 0x80000000 = 3.12%
Computing probabilities for for.body66
set edge for.body66 -> 1 successor probability to 0x7c000000 / 0x80000000 = 96.88%
set edge for.body66 -> 0 successor probability to 0x04000000 / 0x80000000 = 3.12%
Computing probabilities for for.cond64.preheader
Computing probabilities for for.end60
set edge for.end60 -> 1 successor probability to 0x7c000000 / 0x80000000 = 96.88%
set edge for.end60 -> 0 successor probability to 0x04000000 / 0x80000000 = 3.12%
Computing probabilities for for.body13
set edge for.body13 -> 0 successor probability to 0x7c000000 / 0x80000000 = 96.88%
set edge for.body13 -> 1 successor probability to 0x04000000 / 0x80000000 = 3.12%
Computing probabilities for for.body9
Computing probabilities for for.body9.preheader
Computing probabilities for for.body3.lr.ph
Computing probabilities for for.body3.lr.ph.preheader
Computing probabilities for entry
set edge entry -> 0 successor probability to 0x50000000 / 0x80000000 = 62.50%
set edge entry -> 1 successor probability to 0x30000000 / 0x80000000 = 37.50%



=== matmac

Lowering formal arguments
Number of args present: 4
Arg 0 assigned to reg 70
Arg 1 assigned to reg 71
Arg 2 assigned to reg 72
Arg 3 assigned to reg 73
Initial selection DAG: BB#0 'matmac:entry'
SelectionDAG has 18 nodes:
  t0: ch = EntryToken
  t2: i32,ch = CopyFromReg t0, Register:i32 %vreg30
  t4: i32,ch = CopyFromReg t0, Register:i32 %vreg31
  t6: i32,ch = CopyFromReg t0, Register:i32 %vreg32
          t8: i32,ch = CopyFromReg t0, Register:i32 %vreg33
        t11: i1 = setcc t8, Constant:i32<0>, setgt:ch
      t13: i1 = xor t11, Constant:i1<-1>
    t15: ch = brcond t0, t13, BasicBlock:ch<for.end81 0x46bbde0>
  t17: ch = br t15, BasicBlock:ch<for.body3.lr.ph.preheader 0x46b4448>



Combining: t17: ch = br t15, BasicBlock:ch<for.body3.lr.ph.preheader 0x46b4448>

Combining: t16: ch = BasicBlock<for.body3.lr.ph.preheader 0x46b4448>

Combining: t15: ch = brcond t0, t13, BasicBlock:ch<for.end81 0x46bbde0>

Combining: t14: ch = BasicBlock<for.end81 0x46bbde0>

Combining: t13: i1 = xor t11, Constant:i1<-1>
 ... into: t19: i1 = setcc t8, Constant:i32<0>, setle:ch

Combining: t15: ch = brcond t0, t19, BasicBlock:ch<for.end81 0x46bbde0>
 ... into: t20: ch = br_cc t0, setle:ch, t8, Constant:i32<0>, BasicBlock:ch<for.end81 0x46bbde0>

Combining: t18: ch = setle

Combining: t14: ch = BasicBlock<for.end81 0x46bbde0>

Combining: t17: ch = br t20, BasicBlock:ch<for.body3.lr.ph.preheader 0x46b4448>

Combining: t20: ch = br_cc t0, setle:ch, t8, Constant:i32<0>, BasicBlock:ch<for.end81 0x46bbde0>
 ... into: t24: ch = br_cc t0, setlt:ch, t8, Constant:i32<1>, BasicBlock:ch<for.end81 0x46bbde0>

Combining: t14: ch = BasicBlock<for.end81 0x46bbde0>

Combining: t17: ch = br t24, BasicBlock:ch<for.body3.lr.ph.preheader 0x46b4448>

Combining: t24: ch = br_cc t0, setlt:ch, t8, Constant:i32<1>, BasicBlock:ch<for.end81 0x46bbde0>

Combining: t21: i32 = Constant<1>

Combining: t22: ch = setlt

Combining: t21: i32 = Constant<1>

Combining: t22: ch = setlt

Combining: t8: i32,ch = CopyFromReg t0, Register:i32 %vreg33

Combining: t7: i32 = Register %vreg33

Combining: t0: ch = EntryToken
Optimized lowered selection DAG: BB#0 'matmac:entry'
SelectionDAG has 9 nodes:
  t0: ch = EntryToken
      t8: i32,ch = CopyFromReg t0, Register:i32 %vreg33
    t24: ch = br_cc t0, setlt:ch, t8, Constant:i32<1>, BasicBlock:ch<for.end81 0x46bbde0>
  t17: ch = br t24, BasicBlock:ch<for.body3.lr.ph.preheader 0x46b4448>


Legally typed node: t22: ch = setlt

Legally typed node: t21: i32 = Constant<1>

Legally typed node: t16: ch = BasicBlock<for.body3.lr.ph.preheader 0x46b4448>

Legally typed node: t14: ch = BasicBlock<for.end81 0x46bbde0>

Legally typed node: t7: i32 = Register %vreg33

Legally typed node: t0: ch = EntryToken

Legally typed node: t8: i32,ch = CopyFromReg t0, Register:i32 %vreg33

Legally typed node: t24: ch = br_cc t0, setlt:ch, t8, Constant:i32<1>, BasicBlock:ch<for.end81 0x46bbde0>

Legally typed node: t17: ch = br t24, BasicBlock:ch<for.body3.lr.ph.preheader 0x46b4448>

Legally typed node: t65535: ch = handlenode t17

Type-legalized selection DAG: BB#0 'matmac:entry'
SelectionDAG has 9 nodes:
  t0: ch = EntryToken
      t8: i32,ch = CopyFromReg t0, Register:i32 %vreg33
    t24: ch = br_cc t0, setlt:ch, t8, Constant:i32<1>, BasicBlock:ch<for.end81 0x46bbde0>
  t17: ch = br t24, BasicBlock:ch<for.body3.lr.ph.preheader 0x46b4448>



Legalizing: t17: ch = br t24, BasicBlock:ch<for.body3.lr.ph.preheader 0x46b4448>

Legalizing: t24: ch = br_cc t0, setlt:ch, t8, Constant:i32<1>, BasicBlock:ch<for.end81 0x46bbde0>
 ... replacing: t24: ch = br_cc t0, setlt:ch, t8, Constant:i32<1>, BasicBlock:ch<for.end81 0x46bbde0>
     with:      t27: ch,glue = EpiphanyISD::BRCC t0, BasicBlock:ch<for.end81 0x46bbde0>, Constant:i32<8>, t25:1

Legalizing: t8: i32,ch = CopyFromReg t0, Register:i32 %vreg33

Legalizing: t21: i32 = Constant<1>

Legalizing: t16: ch = BasicBlock<for.body3.lr.ph.preheader 0x46b4448>

Legalizing: t14: ch = BasicBlock<for.end81 0x46bbde0>

Legalizing: t7: i32 = Register %vreg33

Legalizing: t0: ch = EntryToken

Legalizing: t27: ch,glue = EpiphanyISD::BRCC t0, BasicBlock:ch<for.end81 0x46bbde0>, Constant:i32<8>, t25:1

Legalizing: t26: i32 = Constant<8>

Legalizing: t25: i32,i32 = EpiphanyISD::CMP t8, Constant:i32<1>
Legalized selection DAG: BB#0 'matmac:entry'
SelectionDAG has 10 nodes:
  t0: ch = EntryToken
        t8: i32,ch = CopyFromReg t0, Register:i32 %vreg33
      t25: i32,i32 = EpiphanyISD::CMP t8, Constant:i32<1>
    t27: ch,glue = EpiphanyISD::BRCC t0, BasicBlock:ch<for.end81 0x46bbde0>, Constant:i32<8>, t25:1
  t17: ch = br t27, BasicBlock:ch<for.body3.lr.ph.preheader 0x46b4448>



Legalizing: t27: ch,glue = EpiphanyISD::BRCC t0, BasicBlock:ch<for.end81 0x46bbde0>, Constant:i32<8>, t25:1

Combining: t27: ch,glue = EpiphanyISD::BRCC t0, BasicBlock:ch<for.end81 0x46bbde0>, Constant:i32<8>, t25:1

Legalizing: t26: i32 = Constant<8>

Combining: t26: i32 = Constant<8>

Legalizing: t25: i32,i32 = EpiphanyISD::CMP t8, Constant:i32<1>

Combining: t25: i32,i32 = EpiphanyISD::CMP t8, Constant:i32<1>

Legalizing: t17: ch = br t27, BasicBlock:ch<for.body3.lr.ph.preheader 0x46b4448>

Combining: t17: ch = br t27, BasicBlock:ch<for.body3.lr.ph.preheader 0x46b4448>

Legalizing: t8: i32,ch = CopyFromReg t0, Register:i32 %vreg33

Combining: t8: i32,ch = CopyFromReg t0, Register:i32 %vreg33

Legalizing: t21: i32 = Constant<1>

Combining: t21: i32 = Constant<1>

Legalizing: t16: ch = BasicBlock<for.body3.lr.ph.preheader 0x46b4448>

Combining: t16: ch = BasicBlock<for.body3.lr.ph.preheader 0x46b4448>

Legalizing: t14: ch = BasicBlock<for.end81 0x46bbde0>

Combining: t14: ch = BasicBlock<for.end81 0x46bbde0>

Legalizing: t7: i32 = Register %vreg33

Combining: t7: i32 = Register %vreg33

Legalizing: t0: ch = EntryToken

Combining: t0: ch = EntryToken
Optimized legalized selection DAG: BB#0 'matmac:entry'
SelectionDAG has 10 nodes:
  t0: ch = EntryToken
        t8: i32,ch = CopyFromReg t0, Register:i32 %vreg33
      t25: i32,i32 = EpiphanyISD::CMP t8, Constant:i32<1>
    t27: ch,glue = EpiphanyISD::BRCC t0, BasicBlock:ch<for.end81 0x46bbde0>, Constant:i32<8>, t25:1
  t17: ch = br t27, BasicBlock:ch<for.body3.lr.ph.preheader 0x46b4448>


===== Instruction selection begins: BB#0 'entry'
Selecting: t17: ch = br t27, BasicBlock:ch<for.body3.lr.ph.preheader 0x46b4448>

ISEL: Starting pattern match on root node: t17: ch = br t27, BasicBlock:ch<for.body3.lr.ph.preheader 0x46b4448>

  Initial Opcode index to 4515
  Morphed node: t17: ch = BNONE32 BasicBlock:ch<for.body3.lr.ph.preheader 0x46b4448>, t27

ISEL: Match complete!
Selecting: t27: ch,glue = EpiphanyISD::BRCC t0, BasicBlock:ch<for.end81 0x46bbde0>, Constant:i32<8>, t25:1

ISEL: Starting pattern match on root node: t27: ch,glue = EpiphanyISD::BRCC t0, BasicBlock:ch<for.end81 0x46bbde0>, Constant:i32<8>, t25:1

  Initial Opcode index to 2902
  Morphed node: t27: ch = BCC BasicBlock:ch<for.end81 0x46bbde0>, TargetConstant:i32<8>, t30, t30:1

ISEL: Match complete!
Selecting: t25: i32,i32 = EpiphanyISD::CMP t8, Constant:i32<1>

ISEL: Starting pattern match on root node: t25: i32,i32 = EpiphanyISD::CMP t8, Constant:i32<1>

  Initial Opcode index to 1952
  Morphed node: t25: i32,i32,glue = CMPri_r32 t8, TargetConstant:i32<1>

ISEL: Match complete!
Selecting: t8: i32,ch = CopyFromReg t0, Register:i32 %vreg33

Selecting: t16: ch = BasicBlock<for.body3.lr.ph.preheader 0x46b4448>

Selecting: t14: ch = BasicBlock<for.end81 0x46bbde0>

Selecting: t7: i32 = Register %vreg33

Selecting: t0: ch = EntryToken

===== Instruction selection ends:
Selected selection DAG: BB#0 'matmac:entry'
SelectionDAG has 12 nodes:
  t0: ch = EntryToken
      t8: i32,ch = CopyFromReg t0, Register:i32 %vreg33
    t25: i32,i32,glue = CMPri_r32 t8, TargetConstant:i32<1>
  t30: ch,glue = CopyToReg t0, Register:i32 %STATUS, t25:1
    t27: ch = BCC BasicBlock:ch<for.end81 0x46bbde0>, TargetConstant:i32<8>, t30, t30:1
  t17: ch = BNONE32 BasicBlock:ch<for.body3.lr.ph.preheader 0x46b4448>, t27


********** List Scheduling BB#0 'entry' **********
SU(0): t17: ch = BNONE32 BasicBlock:ch<for.body3.lr.ph.preheader 0x46b4448>, t27

  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 8
  Depth              : 4
  Height             : 0
  Predecessors:
   ord  SU(1): Latency=1
SU(1): t27: ch = BCC BasicBlock:ch<for.end81 0x46bbde0>, TargetConstant:i32<8>, t30, t30:1

    t30: ch,glue = CopyToReg t0, Register:i32 %STATUS, t25:1

  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 8
  Depth              : 3
  Height             : 1
  Predecessors:
   data SU(2): Latency=3 Reg=%STATUS
  Successors:
   ord  SU(0): Latency=1
SU(2): t25: i32,i32,glue = CMPri_r32 t8, TargetConstant:i32<1>

  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 5
  Depth              : 0
  Height             : 4
  Predecessors:
   data SU(3): Latency=0
  Successors:
   data SU(1): Latency=3 Reg=%STATUS
SU(3): t8: i32,ch = CopyFromReg t0, Register:i32 %vreg33

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 0
  Depth              : 0
  Height             : 4
  Successors:
   data SU(2): Latency=0

Examining Available:
Height 0: SU(0): t17: ch = BNONE32 BasicBlock:ch<for.body3.lr.ph.preheader 0x46b4448>, t27


*** Scheduling [0]: SU(0): t17: ch = BNONE32 BasicBlock:ch<for.body3.lr.ph.preheader 0x46b4448>, t27


Examining Available:
Height 1: SU(1): t27: ch = BCC BasicBlock:ch<for.end81 0x46bbde0>, TargetConstant:i32<8>, t30, t30:1

    t30: ch,glue = CopyToReg t0, Register:i32 %STATUS, t25:1


*** Scheduling [1]: SU(1): t27: ch = BCC BasicBlock:ch<for.end81 0x46bbde0>, TargetConstant:i32<8>, t30, t30:1

    t30: ch,glue = CopyToReg t0, Register:i32 %STATUS, t25:1


Examining Available:
Height 4: SU(2): t25: i32,i32,glue = CMPri_r32 t8, TargetConstant:i32<1>


*** Scheduling [4]: SU(2): t25: i32,i32,glue = CMPri_r32 t8, TargetConstant:i32<1>

FPR64_with_isub_lo_in_FPR32: 1 / 26

Examining Available:
Height 4: SU(3): t8: i32,ch = CopyFromReg t0, Register:i32 %vreg33


*** Scheduling [5]: SU(3): t8: i32,ch = CopyFromReg t0, Register:i32 %vreg33

*** Final schedule ***
SU(3): t8: i32,ch = CopyFromReg t0, Register:i32 %vreg33

SU(2): t25: i32,i32,glue = CMPri_r32 t8, TargetConstant:i32<1>

SU(1): t27: ch = BCC BasicBlock:ch<for.end81 0x46bbde0>, TargetConstant:i32<8>, t30, t30:1

    t30: ch,glue = CopyToReg t0, Register:i32 %STATUS, t25:1

SU(0): t17: ch = BNONE32 BasicBlock:ch<for.body3.lr.ph.preheader 0x46b4448>, t27


Total amount of phi nodes to update: 0
Initial selection DAG: BB#1 'matmac:for.body3.lr.ph.preheader'
SelectionDAG has 21 nodes:
  t0: ch = EntryToken
        t2: i32,ch = CopyFromReg t0, Register:i32 %vreg31
      t4: i32 = add t2, Constant:i32<8>
    t6: ch = CopyToReg t0, Register:i32 %vreg0, t4
        t8: i32,ch = CopyFromReg t0, Register:i32 %vreg33
      t10: i32 = shl t8, Constant:i32<2>
    t12: ch = CopyToReg t0, Register:i32 %vreg1, t10
      t14: i32 = add FrameIndex:i32<0>, Constant:i32<8>
    t16: ch = CopyToReg t0, Register:i32 %vreg2, t14
    t19: ch = CopyToReg t0, Register:i32 %vreg35, Constant:i32<0>
  t20: ch = TokenFactor t6, t12, t16, t19



Combining: t20: ch = TokenFactor t6, t12, t16, t19

Combining: t19: ch = CopyToReg t0, Register:i32 %vreg35, Constant:i32<0>

Combining: t18: i32 = Register %vreg35

Combining: t17: i32 = Constant<0>

Combining: t16: ch = CopyToReg t0, Register:i32 %vreg2, t14

Combining: t15: i32 = Register %vreg2

Combining: t14: i32 = add FrameIndex:i32<0>, Constant:i32<8>

Combining: t13: i32 = FrameIndex<0>

Combining: t12: ch = CopyToReg t0, Register:i32 %vreg1, t10

Combining: t11: i32 = Register %vreg1

Combining: t10: i32 = shl t8, Constant:i32<2>

Combining: t9: i32 = Constant<2>

Combining: t8: i32,ch = CopyFromReg t0, Register:i32 %vreg33

Combining: t7: i32 = Register %vreg33

Combining: t6: ch = CopyToReg t0, Register:i32 %vreg0, t4

Combining: t5: i32 = Register %vreg0

Combining: t4: i32 = add t2, Constant:i32<8>

Combining: t3: i32 = Constant<8>

Combining: t2: i32,ch = CopyFromReg t0, Register:i32 %vreg31

Combining: t1: i32 = Register %vreg31

Combining: t0: ch = EntryToken
Optimized lowered selection DAG: BB#1 'matmac:for.body3.lr.ph.preheader'
SelectionDAG has 21 nodes:
  t0: ch = EntryToken
        t2: i32,ch = CopyFromReg t0, Register:i32 %vreg31
      t4: i32 = add t2, Constant:i32<8>
    t6: ch = CopyToReg t0, Register:i32 %vreg0, t4
        t8: i32,ch = CopyFromReg t0, Register:i32 %vreg33
      t10: i32 = shl t8, Constant:i32<2>
    t12: ch = CopyToReg t0, Register:i32 %vreg1, t10
      t14: i32 = add FrameIndex:i32<0>, Constant:i32<8>
    t16: ch = CopyToReg t0, Register:i32 %vreg2, t14
    t19: ch = CopyToReg t0, Register:i32 %vreg35, Constant:i32<0>
  t20: ch = TokenFactor t6, t12, t16, t19


Legally typed node: t18: i32 = Register %vreg35

Legally typed node: t17: i32 = Constant<0>

Legally typed node: t15: i32 = Register %vreg2

Legally typed node: t13: i32 = FrameIndex<0>

Legally typed node: t11: i32 = Register %vreg1

Legally typed node: t9: i32 = Constant<2>

Legally typed node: t7: i32 = Register %vreg33

Legally typed node: t5: i32 = Register %vreg0

Legally typed node: t3: i32 = Constant<8>

Legally typed node: t14: i32 = add FrameIndex:i32<0>, Constant:i32<8>

Legally typed node: t1: i32 = Register %vreg31

Legally typed node: t0: ch = EntryToken

Legally typed node: t2: i32,ch = CopyFromReg t0, Register:i32 %vreg31

Legally typed node: t4: i32 = add t2, Constant:i32<8>

Legally typed node: t6: ch = CopyToReg t0, Register:i32 %vreg0, t4

Legally typed node: t8: i32,ch = CopyFromReg t0, Register:i32 %vreg33

Legally typed node: t10: i32 = shl t8, Constant:i32<2>

Legally typed node: t12: ch = CopyToReg t0, Register:i32 %vreg1, t10

Legally typed node: t16: ch = CopyToReg t0, Register:i32 %vreg2, t14

Legally typed node: t19: ch = CopyToReg t0, Register:i32 %vreg35, Constant:i32<0>

Legally typed node: t20: ch = TokenFactor t6, t12, t16, t19

Legally typed node: t65535: ch = handlenode t20

Type-legalized selection DAG: BB#1 'matmac:for.body3.lr.ph.preheader'
SelectionDAG has 21 nodes:
  t0: ch = EntryToken
        t2: i32,ch = CopyFromReg t0, Register:i32 %vreg31
      t4: i32 = add t2, Constant:i32<8>
    t6: ch = CopyToReg t0, Register:i32 %vreg0, t4
        t8: i32,ch = CopyFromReg t0, Register:i32 %vreg33
      t10: i32 = shl t8, Constant:i32<2>
    t12: ch = CopyToReg t0, Register:i32 %vreg1, t10
      t14: i32 = add FrameIndex:i32<0>, Constant:i32<8>
    t16: ch = CopyToReg t0, Register:i32 %vreg2, t14
    t19: ch = CopyToReg t0, Register:i32 %vreg35, Constant:i32<0>
  t20: ch = TokenFactor t6, t12, t16, t19



Legalizing: t20: ch = TokenFactor t6, t12, t16, t19

Legalizing: t12: ch = CopyToReg t0, Register:i32 %vreg1, t10

Legalizing: t6: ch = CopyToReg t0, Register:i32 %vreg0, t4

Legalizing: t16: ch = CopyToReg t0, Register:i32 %vreg2, t14

Legalizing: t10: i32 = shl t8, Constant:i32<2>

Legalizing: t4: i32 = add t2, Constant:i32<8>

Legalizing: t19: ch = CopyToReg t0, Register:i32 %vreg35, Constant:i32<0>

Legalizing: t14: i32 = add FrameIndex:i32<0>, Constant:i32<8>

Legalizing: t8: i32,ch = CopyFromReg t0, Register:i32 %vreg33

Legalizing: t2: i32,ch = CopyFromReg t0, Register:i32 %vreg31

Legalizing: t18: i32 = Register %vreg35

Legalizing: t17: i32 = Constant<0>

Legalizing: t15: i32 = Register %vreg2

Legalizing: t13: i32 = FrameIndex<0>

Legalizing: t11: i32 = Register %vreg1

Legalizing: t9: i32 = Constant<2>

Legalizing: t7: i32 = Register %vreg33

Legalizing: t5: i32 = Register %vreg0

Legalizing: t3: i32 = Constant<8>

Legalizing: t1: i32 = Register %vreg31

Legalizing: t0: ch = EntryToken
Legalized selection DAG: BB#1 'matmac:for.body3.lr.ph.preheader'
SelectionDAG has 21 nodes:
  t0: ch = EntryToken
        t2: i32,ch = CopyFromReg t0, Register:i32 %vreg31
      t4: i32 = add t2, Constant:i32<8>
    t6: ch = CopyToReg t0, Register:i32 %vreg0, t4
        t8: i32,ch = CopyFromReg t0, Register:i32 %vreg33
      t10: i32 = shl t8, Constant:i32<2>
    t12: ch = CopyToReg t0, Register:i32 %vreg1, t10
      t14: i32 = add FrameIndex:i32<0>, Constant:i32<8>
    t16: ch = CopyToReg t0, Register:i32 %vreg2, t14
    t19: ch = CopyToReg t0, Register:i32 %vreg35, Constant:i32<0>
  t20: ch = TokenFactor t6, t12, t16, t19



Legalizing: t20: ch = TokenFactor t6, t12, t16, t19

Combining: t20: ch = TokenFactor t6, t12, t16, t19

Legalizing: t12: ch = CopyToReg t0, Register:i32 %vreg1, t10

Combining: t12: ch = CopyToReg t0, Register:i32 %vreg1, t10

Legalizing: t6: ch = CopyToReg t0, Register:i32 %vreg0, t4

Combining: t6: ch = CopyToReg t0, Register:i32 %vreg0, t4

Legalizing: t16: ch = CopyToReg t0, Register:i32 %vreg2, t14

Combining: t16: ch = CopyToReg t0, Register:i32 %vreg2, t14

Legalizing: t10: i32 = shl t8, Constant:i32<2>

Combining: t10: i32 = shl t8, Constant:i32<2>

Legalizing: t4: i32 = add t2, Constant:i32<8>

Combining: t4: i32 = add t2, Constant:i32<8>

Legalizing: t19: ch = CopyToReg t0, Register:i32 %vreg35, Constant:i32<0>

Combining: t19: ch = CopyToReg t0, Register:i32 %vreg35, Constant:i32<0>

Legalizing: t14: i32 = add FrameIndex:i32<0>, Constant:i32<8>

Combining: t14: i32 = add FrameIndex:i32<0>, Constant:i32<8>

Legalizing: t8: i32,ch = CopyFromReg t0, Register:i32 %vreg33

Combining: t8: i32,ch = CopyFromReg t0, Register:i32 %vreg33

Legalizing: t2: i32,ch = CopyFromReg t0, Register:i32 %vreg31

Combining: t2: i32,ch = CopyFromReg t0, Register:i32 %vreg31

Legalizing: t18: i32 = Register %vreg35

Combining: t18: i32 = Register %vreg35

Legalizing: t17: i32 = Constant<0>

Combining: t17: i32 = Constant<0>

Legalizing: t15: i32 = Register %vreg2

Combining: t15: i32 = Register %vreg2

Legalizing: t13: i32 = FrameIndex<0>

Combining: t13: i32 = FrameIndex<0>

Legalizing: t11: i32 = Register %vreg1

Combining: t11: i32 = Register %vreg1

Legalizing: t9: i32 = Constant<2>

Combining: t9: i32 = Constant<2>

Legalizing: t7: i32 = Register %vreg33

Combining: t7: i32 = Register %vreg33

Legalizing: t5: i32 = Register %vreg0

Combining: t5: i32 = Register %vreg0

Legalizing: t3: i32 = Constant<8>

Combining: t3: i32 = Constant<8>

Legalizing: t1: i32 = Register %vreg31

Combining: t1: i32 = Register %vreg31

Legalizing: t0: ch = EntryToken

Combining: t0: ch = EntryToken
Optimized legalized selection DAG: BB#1 'matmac:for.body3.lr.ph.preheader'
SelectionDAG has 21 nodes:
  t0: ch = EntryToken
        t2: i32,ch = CopyFromReg t0, Register:i32 %vreg31
      t4: i32 = add t2, Constant:i32<8>
    t6: ch = CopyToReg t0, Register:i32 %vreg0, t4
        t8: i32,ch = CopyFromReg t0, Register:i32 %vreg33
      t10: i32 = shl t8, Constant:i32<2>
    t12: ch = CopyToReg t0, Register:i32 %vreg1, t10
      t14: i32 = add FrameIndex:i32<0>, Constant:i32<8>
    t16: ch = CopyToReg t0, Register:i32 %vreg2, t14
    t19: ch = CopyToReg t0, Register:i32 %vreg35, Constant:i32<0>
  t20: ch = TokenFactor t6, t12, t16, t19


===== Instruction selection begins: BB#1 'for.body3.lr.ph.preheader'
Selecting: t20: ch = TokenFactor t6, t12, t16, t19

Selecting: t12: ch = CopyToReg t0, Register:i32 %vreg1, t10

Selecting: t6: ch = CopyToReg t0, Register:i32 %vreg0, t4

Selecting: t16: ch = CopyToReg t0, Register:i32 %vreg2, t14

Selecting: t10: i32 = shl t8, Constant:i32<2>

ISEL: Starting pattern match on root node: t10: i32 = shl t8, Constant:i32<2>

  Initial Opcode index to 2454
  Morphed node: t10: i32,i32 = LSL32ri t8, TargetConstant:i32<2>

ISEL: Match complete!
Selecting: t4: i32 = add t2, Constant:i32<8>

ISEL: Starting pattern match on root node: t4: i32 = add t2, Constant:i32<8>

  Initial Opcode index to 1567
  Morphed node: t4: i32,i32 = ADDri_r32 t2, TargetConstant:i32<8>

ISEL: Match complete!
Selecting: t19: ch = CopyToReg t0, Register:i32 %vreg35, Constant:i32<0>

Selecting: t14: i32 = add FrameIndex:i32<0>, Constant:i32<8>

ISEL: Starting pattern match on root node: t14: i32 = add FrameIndex:i32<0>, Constant:i32<8>

  Initial Opcode index to 1567
  Morphed node: t14: i32,i32 = ADDri_r32 FrameIndex:i32<0>, TargetConstant:i32<8>

ISEL: Match complete!
Selecting: t8: i32,ch = CopyFromReg t0, Register:i32 %vreg33

Selecting: t2: i32,ch = CopyFromReg t0, Register:i32 %vreg31

Selecting: t18: i32 = Register %vreg35

Selecting: t17: i32 = Constant<0>

ISEL: Starting pattern match on root node: t17: i32 = Constant<0>

  Initial Opcode index to 3685
  TypeSwitch[i32] from 3686 to 3689
  Morphed node: t17: i32 = MOVi32ri TargetConstant:i32<0>

ISEL: Match complete!
Selecting: t15: i32 = Register %vreg2

Selecting: t13: i32 = FrameIndex<0>

ISEL: Starting pattern match on root node: t13: i32 = FrameIndex<0>

  Initial Opcode index to 1524
  Morphed node: t13: i32 = MOViPTR TargetFrameIndex:i32<0>, TargetConstant:i32<0>

ISEL: Match complete!
Selecting: t11: i32 = Register %vreg1

Selecting: t7: i32 = Register %vreg33

Selecting: t5: i32 = Register %vreg0

Selecting: t1: i32 = Register %vreg31

Selecting: t0: ch = EntryToken

===== Instruction selection ends:
Selected selection DAG: BB#1 'matmac:for.body3.lr.ph.preheader'
SelectionDAG has 23 nodes:
  t0: ch = EntryToken
        t2: i32,ch = CopyFromReg t0, Register:i32 %vreg31
      t4: i32,i32 = ADDri_r32 t2, TargetConstant:i32<8>
    t6: ch = CopyToReg t0, Register:i32 %vreg0, t4
        t8: i32,ch = CopyFromReg t0, Register:i32 %vreg33
      t10: i32,i32 = LSL32ri t8, TargetConstant:i32<2>
    t12: ch = CopyToReg t0, Register:i32 %vreg1, t10
        t13: i32 = MOViPTR TargetFrameIndex:i32<0>, TargetConstant:i32<0>
      t14: i32,i32 = ADDri_r32 t13, TargetConstant:i32<8>
    t16: ch = CopyToReg t0, Register:i32 %vreg2, t14
      t17: i32 = MOVi32ri TargetConstant:i32<0>
    t19: ch = CopyToReg t0, Register:i32 %vreg35, t17
  t20: ch = TokenFactor t6, t12, t16, t19


********** List Scheduling BB#1 'for.body3.lr.ph.preheader' **********
SU(0): t20: ch = TokenFactor t6, t12, t16, t19

  # preds left       : 4
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 6
  Height             : 0
  Predecessors:
   ord  SU(9): Latency=1
   ord  SU(6): Latency=1
   ord  SU(3): Latency=1
   ord  SU(1): Latency=1
SU(1): t19: ch = CopyToReg t0, Register:i32 %vreg35, t17

  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 3
  Height             : 1
  Predecessors:
   data SU(2): Latency=3
  Successors:
   ord  SU(0): Latency=1
SU(2): t17: i32 = MOVi32ri TargetConstant:i32<0>

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 5
  Depth              : 0
  Height             : 4
  Successors:
   data SU(1): Latency=3
SU(3): t16: ch = CopyToReg t0, Register:i32 %vreg2, t14

  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 1
  Predecessors:
   data SU(4): Latency=3
  Successors:
   ord  SU(0): Latency=1
SU(4): t14: i32,i32 = ADDri_r32 t13, TargetConstant:i32<8>

  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 5
  Depth              : 2
  Height             : 4
  Predecessors:
   data SU(5): Latency=2
  Successors:
   data SU(3): Latency=3
SU(5): t13: i32 = MOViPTR TargetFrameIndex:i32<0>, TargetConstant:i32<0>

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 5
  Depth              : 0
  Height             : 6
  Successors:
   data SU(4): Latency=2
SU(6): t12: ch = CopyToReg t0, Register:i32 %vreg1, t10

  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 3
  Height             : 1
  Predecessors:
   data SU(7): Latency=3
  Successors:
   ord  SU(0): Latency=1
SU(7): t10: i32,i32 = LSL32ri t8, TargetConstant:i32<2>

  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 5
  Depth              : 0
  Height             : 4
  Predecessors:
   data SU(8): Latency=0
  Successors:
   data SU(6): Latency=3
SU(8): t8: i32,ch = CopyFromReg t0, Register:i32 %vreg33

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 0
  Depth              : 0
  Height             : 4
  Successors:
   data SU(7): Latency=0
SU(9): t6: ch = CopyToReg t0, Register:i32 %vreg0, t4

  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 3
  Height             : 1
  Predecessors:
   data SU(10): Latency=3
  Successors:
   ord  SU(0): Latency=1
SU(10): t4: i32,i32 = ADDri_r32 t2, TargetConstant:i32<8>

  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 5
  Depth              : 0
  Height             : 4
  Predecessors:
   data SU(11): Latency=0
  Successors:
   data SU(9): Latency=3
SU(11): t2: i32,ch = CopyFromReg t0, Register:i32 %vreg31

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 0
  Depth              : 0
  Height             : 4
  Successors:
   data SU(10): Latency=0

Examining Available:
Height 0: SU(0): t20: ch = TokenFactor t6, t12, t16, t19


*** Scheduling [0]: SU(0): t20: ch = TokenFactor t6, t12, t16, t19


Examining Available:
  Comparing latency of SU (9) depth 3 vs SU (3) depth 5
  Comparing latency of SU (3) depth 5 vs SU (1) depth 3
Height 1: SU(3): t16: ch = CopyToReg t0, Register:i32 %vreg2, t14

Height 1: SU(9): t6: ch = CopyToReg t0, Register:i32 %vreg0, t4

Height 1: SU(6): t12: ch = CopyToReg t0, Register:i32 %vreg1, t10

Height 1: SU(1): t19: ch = CopyToReg t0, Register:i32 %vreg35, t17

  Comparing latency of SU (9) depth 3 vs SU (3) depth 5
  Comparing latency of SU (3) depth 5 vs SU (1) depth 3

*** Scheduling [1]: SU(3): t16: ch = CopyToReg t0, Register:i32 %vreg2, t14

FPR64_with_isub_lo_in_FPR32: 1 / 26

Examining Available:
Height 1: SU(9): t6: ch = CopyToReg t0, Register:i32 %vreg0, t4

Height 1: SU(6): t12: ch = CopyToReg t0, Register:i32 %vreg1, t10

Height 1: SU(1): t19: ch = CopyToReg t0, Register:i32 %vreg35, t17

Height 4: SU(4): t14: i32,i32 = ADDri_r32 t13, TargetConstant:i32<8>


*** Scheduling [2]: SU(9): t6: ch = CopyToReg t0, Register:i32 %vreg0, t4

FPR64_with_isub_lo_in_FPR32: 2 / 26

Examining Available:
Height 1: SU(6): t12: ch = CopyToReg t0, Register:i32 %vreg1, t10

Height 1: SU(1): t19: ch = CopyToReg t0, Register:i32 %vreg35, t17

Height 4: SU(4): t14: i32,i32 = ADDri_r32 t13, TargetConstant:i32<8>

Height 5: SU(10): t4: i32,i32 = ADDri_r32 t2, TargetConstant:i32<8>


*** Scheduling [3]: SU(6): t12: ch = CopyToReg t0, Register:i32 %vreg1, t10

FPR64_with_isub_lo_in_FPR32: 3 / 26

Examining Available:
Height 1: SU(1): t19: ch = CopyToReg t0, Register:i32 %vreg35, t17

Height 4: SU(4): t14: i32,i32 = ADDri_r32 t13, TargetConstant:i32<8>

Height 5: SU(10): t4: i32,i32 = ADDri_r32 t2, TargetConstant:i32<8>

Height 6: SU(7): t10: i32,i32 = LSL32ri t8, TargetConstant:i32<2>


*** Scheduling [4]: SU(1): t19: ch = CopyToReg t0, Register:i32 %vreg35, t17

FPR64_with_isub_lo_in_FPR32: 4 / 26

Examining Available:
Height 7: SU(2): t17: i32 = MOVi32ri TargetConstant:i32<0>

Height 4: SU(4): t14: i32,i32 = ADDri_r32 t13, TargetConstant:i32<8>

Height 5: SU(10): t4: i32,i32 = ADDri_r32 t2, TargetConstant:i32<8>

Height 6: SU(7): t10: i32,i32 = LSL32ri t8, TargetConstant:i32<2>


*** Scheduling [7]: SU(2): t17: i32 = MOVi32ri TargetConstant:i32<0>

FPR64_with_isub_lo_in_FPR32: 3 / 26

Examining Available:
Height 4: SU(4): t14: i32,i32 = ADDri_r32 t13, TargetConstant:i32<8>

Height 5: SU(10): t4: i32,i32 = ADDri_r32 t2, TargetConstant:i32<8>

Height 6: SU(7): t10: i32,i32 = LSL32ri t8, TargetConstant:i32<2>


*** Scheduling [8]: SU(4): t14: i32,i32 = ADDri_r32 t13, TargetConstant:i32<8>

FPR64_with_isub_lo_in_FPR32: 3 / 26

Examining Available:
Height 10: SU(5): t13: i32 = MOViPTR TargetFrameIndex:i32<0>, TargetConstant:i32<0>

Height 5: SU(10): t4: i32,i32 = ADDri_r32 t2, TargetConstant:i32<8>

Height 6: SU(7): t10: i32,i32 = LSL32ri t8, TargetConstant:i32<2>


*** Scheduling [10]: SU(5): t13: i32 = MOViPTR TargetFrameIndex:i32<0>, TargetConstant:i32<0>

FPR64_with_isub_lo_in_FPR32: 2 / 26

Examining Available:
Height 5: SU(10): t4: i32,i32 = ADDri_r32 t2, TargetConstant:i32<8>

Height 6: SU(7): t10: i32,i32 = LSL32ri t8, TargetConstant:i32<2>


*** Scheduling [11]: SU(10): t4: i32,i32 = ADDri_r32 t2, TargetConstant:i32<8>

FPR64_with_isub_lo_in_FPR32: 2 / 26

Examining Available:
Height 11: SU(11): t2: i32,ch = CopyFromReg t0, Register:i32 %vreg31

Height 6: SU(7): t10: i32,i32 = LSL32ri t8, TargetConstant:i32<2>


*** Scheduling [12]: SU(11): t2: i32,ch = CopyFromReg t0, Register:i32 %vreg31

FPR64_with_isub_lo_in_FPR32: 1 / 26

Examining Available:
Height 6: SU(7): t10: i32,i32 = LSL32ri t8, TargetConstant:i32<2>


*** Scheduling [13]: SU(7): t10: i32,i32 = LSL32ri t8, TargetConstant:i32<2>

FPR64_with_isub_lo_in_FPR32: 1 / 26

Examining Available:
Height 13: SU(8): t8: i32,ch = CopyFromReg t0, Register:i32 %vreg33


*** Scheduling [14]: SU(8): t8: i32,ch = CopyFromReg t0, Register:i32 %vreg33

*** Final schedule ***
SU(8): t8: i32,ch = CopyFromReg t0, Register:i32 %vreg33

SU(7): t10: i32,i32 = LSL32ri t8, TargetConstant:i32<2>

SU(11): t2: i32,ch = CopyFromReg t0, Register:i32 %vreg31

SU(10): t4: i32,i32 = ADDri_r32 t2, TargetConstant:i32<8>

SU(5): t13: i32 = MOViPTR TargetFrameIndex:i32<0>, TargetConstant:i32<0>

SU(4): t14: i32,i32 = ADDri_r32 t13, TargetConstant:i32<8>

SU(2): t17: i32 = MOVi32ri TargetConstant:i32<0>

SU(1): t19: ch = CopyToReg t0, Register:i32 %vreg35, t17

SU(6): t12: ch = CopyToReg t0, Register:i32 %vreg1, t10

SU(9): t6: ch = CopyToReg t0, Register:i32 %vreg0, t4

SU(3): t16: ch = CopyToReg t0, Register:i32 %vreg2, t14

SU(0): t20: ch = TokenFactor t6, t12, t16, t19


Total amount of phi nodes to update: 2
Node 0 : (0x46b45a8, 2147483680)
Node 1 : (0x46b4608, 2147483683)
Initial selection DAG: BB#2 'matmac:for.body3.lr.ph'
SelectionDAG has 18 nodes:
  t0: ch = EntryToken
  t5: ch = ValueType:i32
        t8: i32,ch = CopyFromReg t0, Register:i32 %vreg30
            t2: i32,ch = CopyFromReg t0, Register:i32 %vreg4
            t4: i32,ch = CopyFromReg t0, Register:i32 %vreg33
          t6: i32 = mul t2, t4
        t10: i32 = shl t6, Constant:i32<2>
      t11: i32 = add t8, t10
    t13: ch = CopyToReg t0, Register:i32 %vreg5, t11
    t16: ch = CopyToReg t0, Register:i32 %vreg37, Constant:i32<0>
  t17: ch = TokenFactor t13, t16



Combining: t17: ch = TokenFactor t13, t16

Combining: t16: ch = CopyToReg t0, Register:i32 %vreg37, Constant:i32<0>

Combining: t15: i32 = Register %vreg37

Combining: t14: i32 = Constant<0>

Combining: t13: ch = CopyToReg t0, Register:i32 %vreg5, t11

Combining: t12: i32 = Register %vreg5

Combining: t11: i32 = add t8, t10

Combining: t10: i32 = shl t6, Constant:i32<2>

Combining: t9: i32 = Constant<2>

Combining: t8: i32,ch = CopyFromReg t0, Register:i32 %vreg30

Combining: t7: i32 = Register %vreg30

Combining: t6: i32 = mul t2, t4

Combining: t4: i32,ch = CopyFromReg t0, Register:i32 %vreg33

Combining: t3: i32 = Register %vreg33

Combining: t2: i32,ch = CopyFromReg t0, Register:i32 %vreg4

Combining: t1: i32 = Register %vreg4

Combining: t0: ch = EntryToken
Optimized lowered selection DAG: BB#2 'matmac:for.body3.lr.ph'
SelectionDAG has 17 nodes:
  t0: ch = EntryToken
        t8: i32,ch = CopyFromReg t0, Register:i32 %vreg30
            t2: i32,ch = CopyFromReg t0, Register:i32 %vreg4
            t4: i32,ch = CopyFromReg t0, Register:i32 %vreg33
          t6: i32 = mul t2, t4
        t10: i32 = shl t6, Constant:i32<2>
      t11: i32 = add t8, t10
    t13: ch = CopyToReg t0, Register:i32 %vreg5, t11
    t16: ch = CopyToReg t0, Register:i32 %vreg37, Constant:i32<0>
  t17: ch = TokenFactor t13, t16


Legally typed node: t15: i32 = Register %vreg37

Legally typed node: t14: i32 = Constant<0>

Legally typed node: t12: i32 = Register %vreg5

Legally typed node: t9: i32 = Constant<2>

Legally typed node: t7: i32 = Register %vreg30

Legally typed node: t3: i32 = Register %vreg33

Legally typed node: t1: i32 = Register %vreg4

Legally typed node: t0: ch = EntryToken

Legally typed node: t2: i32,ch = CopyFromReg t0, Register:i32 %vreg4

Legally typed node: t4: i32,ch = CopyFromReg t0, Register:i32 %vreg33

Legally typed node: t6: i32 = mul t2, t4

Legally typed node: t10: i32 = shl t6, Constant:i32<2>

Legally typed node: t8: i32,ch = CopyFromReg t0, Register:i32 %vreg30

Legally typed node: t11: i32 = add t8, t10

Legally typed node: t13: ch = CopyToReg t0, Register:i32 %vreg5, t11

Legally typed node: t16: ch = CopyToReg t0, Register:i32 %vreg37, Constant:i32<0>

Legally typed node: t17: ch = TokenFactor t13, t16

Legally typed node: t65535: ch = handlenode t17

Type-legalized selection DAG: BB#2 'matmac:for.body3.lr.ph'
SelectionDAG has 17 nodes:
  t0: ch = EntryToken
        t8: i32,ch = CopyFromReg t0, Register:i32 %vreg30
            t2: i32,ch = CopyFromReg t0, Register:i32 %vreg4
            t4: i32,ch = CopyFromReg t0, Register:i32 %vreg33
          t6: i32 = mul t2, t4
        t10: i32 = shl t6, Constant:i32<2>
      t11: i32 = add t8, t10
    t13: ch = CopyToReg t0, Register:i32 %vreg5, t11
    t16: ch = CopyToReg t0, Register:i32 %vreg37, Constant:i32<0>
  t17: ch = TokenFactor t13, t16



Legalizing: t17: ch = TokenFactor t13, t16

Legalizing: t13: ch = CopyToReg t0, Register:i32 %vreg5, t11

Legalizing: t11: i32 = add t8, t10

Legalizing: t10: i32 = shl t6, Constant:i32<2>

Legalizing: t6: i32 = mul t2, t4

Legalizing: t16: ch = CopyToReg t0, Register:i32 %vreg37, Constant:i32<0>

Legalizing: t8: i32,ch = CopyFromReg t0, Register:i32 %vreg30

Legalizing: t4: i32,ch = CopyFromReg t0, Register:i32 %vreg33

Legalizing: t2: i32,ch = CopyFromReg t0, Register:i32 %vreg4

Legalizing: t15: i32 = Register %vreg37

Legalizing: t14: i32 = Constant<0>

Legalizing: t12: i32 = Register %vreg5

Legalizing: t9: i32 = Constant<2>

Legalizing: t7: i32 = Register %vreg30

Legalizing: t3: i32 = Register %vreg33

Legalizing: t1: i32 = Register %vreg4

Legalizing: t0: ch = EntryToken
Legalized selection DAG: BB#2 'matmac:for.body3.lr.ph'
SelectionDAG has 17 nodes:
  t0: ch = EntryToken
        t8: i32,ch = CopyFromReg t0, Register:i32 %vreg30
            t2: i32,ch = CopyFromReg t0, Register:i32 %vreg4
            t4: i32,ch = CopyFromReg t0, Register:i32 %vreg33
          t6: i32 = mul t2, t4
        t10: i32 = shl t6, Constant:i32<2>
      t11: i32 = add t8, t10
    t13: ch = CopyToReg t0, Register:i32 %vreg5, t11
    t16: ch = CopyToReg t0, Register:i32 %vreg37, Constant:i32<0>
  t17: ch = TokenFactor t13, t16



Legalizing: t17: ch = TokenFactor t13, t16

Combining: t17: ch = TokenFactor t13, t16

Legalizing: t13: ch = CopyToReg t0, Register:i32 %vreg5, t11

Combining: t13: ch = CopyToReg t0, Register:i32 %vreg5, t11

Legalizing: t11: i32 = add t8, t10

Combining: t11: i32 = add t8, t10

Legalizing: t10: i32 = shl t6, Constant:i32<2>

Combining: t10: i32 = shl t6, Constant:i32<2>

Legalizing: t6: i32 = mul t2, t4

Combining: t6: i32 = mul t2, t4

Legalizing: t16: ch = CopyToReg t0, Register:i32 %vreg37, Constant:i32<0>

Combining: t16: ch = CopyToReg t0, Register:i32 %vreg37, Constant:i32<0>

Legalizing: t8: i32,ch = CopyFromReg t0, Register:i32 %vreg30

Combining: t8: i32,ch = CopyFromReg t0, Register:i32 %vreg30

Legalizing: t4: i32,ch = CopyFromReg t0, Register:i32 %vreg33

Combining: t4: i32,ch = CopyFromReg t0, Register:i32 %vreg33

Legalizing: t2: i32,ch = CopyFromReg t0, Register:i32 %vreg4

Combining: t2: i32,ch = CopyFromReg t0, Register:i32 %vreg4

Legalizing: t15: i32 = Register %vreg37

Combining: t15: i32 = Register %vreg37

Legalizing: t14: i32 = Constant<0>

Combining: t14: i32 = Constant<0>

Legalizing: t12: i32 = Register %vreg5

Combining: t12: i32 = Register %vreg5

Legalizing: t9: i32 = Constant<2>

Combining: t9: i32 = Constant<2>

Legalizing: t7: i32 = Register %vreg30

Combining: t7: i32 = Register %vreg30

Legalizing: t3: i32 = Register %vreg33

Combining: t3: i32 = Register %vreg33

Legalizing: t1: i32 = Register %vreg4

Combining: t1: i32 = Register %vreg4

Legalizing: t0: ch = EntryToken

Combining: t0: ch = EntryToken
Optimized legalized selection DAG: BB#2 'matmac:for.body3.lr.ph'
SelectionDAG has 17 nodes:
  t0: ch = EntryToken
        t8: i32,ch = CopyFromReg t0, Register:i32 %vreg30
            t2: i32,ch = CopyFromReg t0, Register:i32 %vreg4
            t4: i32,ch = CopyFromReg t0, Register:i32 %vreg33
          t6: i32 = mul t2, t4
        t10: i32 = shl t6, Constant:i32<2>
      t11: i32 = add t8, t10
    t13: ch = CopyToReg t0, Register:i32 %vreg5, t11
    t16: ch = CopyToReg t0, Register:i32 %vreg37, Constant:i32<0>
  t17: ch = TokenFactor t13, t16


===== Instruction selection begins: BB#2 'for.body3.lr.ph'
Selecting: t17: ch = TokenFactor t13, t16

Selecting: t13: ch = CopyToReg t0, Register:i32 %vreg5, t11

Selecting: t11: i32 = add t8, t10

ISEL: Starting pattern match on root node: t11: i32 = add t8, t10

  Initial Opcode index to 1567
  Match failed at index 1572
  Continuing at 1611
  Morphed node: t11: i32,i32 = ADDrr_r32 t8, t10

ISEL: Match complete!
Selecting: t10: i32 = shl t6, Constant:i32<2>

ISEL: Starting pattern match on root node: t10: i32 = shl t6, Constant:i32<2>

  Initial Opcode index to 2454
  Morphed node: t10: i32,i32 = LSL32ri t6, TargetConstant:i32<2>

ISEL: Match complete!
Selecting: t6: i32 = mul t2, t4

ISEL: Starting pattern match on root node: t6: i32 = mul t2, t4

  Initial Opcode index to 2977
  Match failed at index 2981
  Continuing at 3019
  Match failed at index 3021
  Continuing at 3061
  Match failed at index 3064
  Continuing at 3102
  Match failed at index 3104
  Continuing at 3144
  TypeSwitch[i32] from 3147 to 3150
  Morphed node: t6: i32,i32 = IMULrr_r32 t2, t4

ISEL: Match complete!
Selecting: t16: ch = CopyToReg t0, Register:i32 %vreg37, Constant:i32<0>

Selecting: t8: i32,ch = CopyFromReg t0, Register:i32 %vreg30

Selecting: t4: i32,ch = CopyFromReg t0, Register:i32 %vreg33

Selecting: t2: i32,ch = CopyFromReg t0, Register:i32 %vreg4

Selecting: t15: i32 = Register %vreg37

Selecting: t14: i32 = Constant<0>

ISEL: Starting pattern match on root node: t14: i32 = Constant<0>

  Initial Opcode index to 3685
  TypeSwitch[i32] from 3686 to 3689
  Morphed node: t14: i32 = MOVi32ri TargetConstant:i32<0>

ISEL: Match complete!
Selecting: t12: i32 = Register %vreg5

Selecting: t7: i32 = Register %vreg30

Selecting: t3: i32 = Register %vreg33

Selecting: t1: i32 = Register %vreg4

Selecting: t0: ch = EntryToken

===== Instruction selection ends:
Selected selection DAG: BB#2 'matmac:for.body3.lr.ph'
SelectionDAG has 18 nodes:
  t0: ch = EntryToken
        t8: i32,ch = CopyFromReg t0, Register:i32 %vreg30
            t2: i32,ch = CopyFromReg t0, Register:i32 %vreg4
            t4: i32,ch = CopyFromReg t0, Register:i32 %vreg33
          t6: i32,i32 = IMULrr_r32 t2, t4
        t10: i32,i32 = LSL32ri t6, TargetConstant:i32<2>
      t11: i32,i32 = ADDrr_r32 t8, t10
    t13: ch = CopyToReg t0, Register:i32 %vreg5, t11
      t14: i32 = MOVi32ri TargetConstant:i32<0>
    t16: ch = CopyToReg t0, Register:i32 %vreg37, t14
  t17: ch = TokenFactor t13, t16


********** List Scheduling BB#2 'for.body3.lr.ph' **********
SU(0): t17: ch = TokenFactor t13, t16

  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 11
  Height             : 0
  Predecessors:
   ord  SU(3): Latency=1
   ord  SU(1): Latency=1
SU(1): t16: ch = CopyToReg t0, Register:i32 %vreg37, t14

  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 3
  Height             : 1
  Predecessors:
   data SU(2): Latency=3
  Successors:
   ord  SU(0): Latency=1
SU(2): t14: i32 = MOVi32ri TargetConstant:i32<0>

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 5
  Depth              : 0
  Height             : 4
  Successors:
   data SU(1): Latency=3
SU(3): t13: ch = CopyToReg t0, Register:i32 %vreg5, t11

  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 10
  Height             : 1
  Predecessors:
   data SU(4): Latency=3
  Successors:
   ord  SU(0): Latency=1
SU(4): t11: i32,i32 = ADDrr_r32 t8, t10

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 5
  Depth              : 7
  Height             : 4
  Predecessors:
   data SU(9): Latency=0
   data SU(5): Latency=5
  Successors:
   data SU(3): Latency=3
SU(5): t10: i32,i32 = LSL32ri t6, TargetConstant:i32<2>

  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 5
  Depth              : 2
  Height             : 9
  Predecessors:
   data SU(6): Latency=2
  Successors:
   data SU(4): Latency=5
SU(6): t6: i32,i32 = IMULrr_r32 t2, t4

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 5
  Depth              : 0
  Height             : 11
  Predecessors:
   data SU(8): Latency=0
   data SU(7): Latency=0
  Successors:
   data SU(5): Latency=2
SU(7): t4: i32,ch = CopyFromReg t0, Register:i32 %vreg33

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 0
  Depth              : 0
  Height             : 11
  Successors:
   data SU(6): Latency=0
SU(8): t2: i32,ch = CopyFromReg t0, Register:i32 %vreg4

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 0
  Depth              : 0
  Height             : 11
  Successors:
   data SU(6): Latency=0
SU(9): t8: i32,ch = CopyFromReg t0, Register:i32 %vreg30

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 0
  Depth              : 0
  Height             : 4
  Successors:
   data SU(4): Latency=0

Examining Available:
Height 0: SU(0): t17: ch = TokenFactor t13, t16


*** Scheduling [0]: SU(0): t17: ch = TokenFactor t13, t16


Examining Available:
Depth of SU(3): 10 != SU(1): 3
Height 1: SU(3): t13: ch = CopyToReg t0, Register:i32 %vreg5, t11

Height 1: SU(1): t16: ch = CopyToReg t0, Register:i32 %vreg37, t14

Depth of SU(3): 10 != SU(1): 3

*** Scheduling [1]: SU(3): t13: ch = CopyToReg t0, Register:i32 %vreg5, t11

FPR64_with_isub_lo_in_FPR32: 1 / 26

Examining Available:
Height 1: SU(1): t16: ch = CopyToReg t0, Register:i32 %vreg37, t14

Height 4: SU(4): t11: i32,i32 = ADDrr_r32 t8, t10


*** Scheduling [2]: SU(1): t16: ch = CopyToReg t0, Register:i32 %vreg37, t14

FPR64_with_isub_lo_in_FPR32: 2 / 26

Examining Available:
Depth of SU(4): 7 != SU(2): 0
Height 4: SU(4): t11: i32,i32 = ADDrr_r32 t8, t10

Height 5: SU(2): t14: i32 = MOVi32ri TargetConstant:i32<0>

Depth of SU(4): 7 != SU(2): 0

*** Scheduling [4]: SU(4): t11: i32,i32 = ADDrr_r32 t8, t10

FPR64_with_isub_lo_in_FPR32: 3 / 26

Examining Available:
Height 4: SU(9): t8: i32,ch = CopyFromReg t0, Register:i32 %vreg30

Height 5: SU(2): t14: i32 = MOVi32ri TargetConstant:i32<0>

Height 9: SU(5): t10: i32,i32 = LSL32ri t6, TargetConstant:i32<2>


*** Scheduling [5]: SU(9): t8: i32,ch = CopyFromReg t0, Register:i32 %vreg30

FPR64_with_isub_lo_in_FPR32: 2 / 26

Examining Available:
Height 5: SU(2): t14: i32 = MOVi32ri TargetConstant:i32<0>

Height 9: SU(5): t10: i32,i32 = LSL32ri t6, TargetConstant:i32<2>


*** Scheduling [6]: SU(2): t14: i32 = MOVi32ri TargetConstant:i32<0>

FPR64_with_isub_lo_in_FPR32: 1 / 26

Examining Available:
Height 9: SU(5): t10: i32,i32 = LSL32ri t6, TargetConstant:i32<2>


*** Scheduling [9]: SU(5): t10: i32,i32 = LSL32ri t6, TargetConstant:i32<2>

FPR64_with_isub_lo_in_FPR32: 1 / 26

Examining Available:
Height 11: SU(6): t6: i32,i32 = IMULrr_r32 t2, t4


*** Scheduling [11]: SU(6): t6: i32,i32 = IMULrr_r32 t2, t4

FPR64_with_isub_lo_in_FPR32: 2 / 26

Examining Available:
Height 11: SU(8): t2: i32,ch = CopyFromReg t0, Register:i32 %vreg4

Height 11: SU(7): t4: i32,ch = CopyFromReg t0, Register:i32 %vreg33


*** Scheduling [12]: SU(8): t2: i32,ch = CopyFromReg t0, Register:i32 %vreg4

FPR64_with_isub_lo_in_FPR32: 1 / 26

Examining Available:
Height 11: SU(7): t4: i32,ch = CopyFromReg t0, Register:i32 %vreg33


*** Scheduling [13]: SU(7): t4: i32,ch = CopyFromReg t0, Register:i32 %vreg33

*** Final schedule ***
SU(7): t4: i32,ch = CopyFromReg t0, Register:i32 %vreg33

SU(8): t2: i32,ch = CopyFromReg t0, Register:i32 %vreg4

SU(6): t6: i32,i32 = IMULrr_r32 t2, t4

SU(5): t10: i32,i32 = LSL32ri t6, TargetConstant:i32<2>

SU(2): t14: i32 = MOVi32ri TargetConstant:i32<0>

SU(9): t8: i32,ch = CopyFromReg t0, Register:i32 %vreg30

SU(4): t11: i32,i32 = ADDrr_r32 t8, t10

SU(1): t16: ch = CopyToReg t0, Register:i32 %vreg37, t14

SU(3): t13: ch = CopyToReg t0, Register:i32 %vreg5, t11

SU(0): t17: ch = TokenFactor t13, t16


Total amount of phi nodes to update: 3
Node 0 : (0x46b4718, 2147483651)
Node 1 : (0x46b4778, 2147483648)
Node 2 : (0x46b47d8, 2147483685)
Initial selection DAG: BB#3 'matmac:for.body9.preheader'
SelectionDAG has 25 nodes:
  t0: ch = EntryToken
  t3: ch = lifetime.start t0, TargetFrameIndex:i32<0>
  t4: i8 = Constant<0>
  t5: i32 = Constant<32>
      t21: ch = CopyToReg t0, Register:i32 %vreg40, Constant:i32<0>
        t9: ch = store<ST8[%1]> t3, Constant:i64<0>, FrameIndex:i32<0>, undef:i32
          t11: i32 = add FrameIndex:i32<0>, Constant:i32<8>
        t12: ch = store<ST8[%1+8]> t3, Constant:i64<0>, t11, undef:i32
          t14: i32 = add FrameIndex:i32<0>, Constant:i32<16>
        t15: ch = store<ST8[%1+16]> t3, Constant:i64<0>, t14, undef:i32
          t17: i32 = add FrameIndex:i32<0>, Constant:i32<24>
        t18: ch = store<ST8[%1+24]> t3, Constant:i64<0>, t17, undef:i32
      t19: ch = TokenFactor t9, t12, t15, t18
    t23: ch = TokenFactor t21, t19
  t24: ch = br t23, BasicBlock:ch<for.body9 0x46b48e8>



Combining: t24: ch = br t23, BasicBlock:ch<for.body9 0x46b48e8>

Combining: t23: ch = TokenFactor t21, t19

Replacing.1 t23: ch = TokenFactor t21, t19

With: t25: ch = TokenFactor t21, t9, t12, t15, t18
 and 0 other values

Combining: t22: ch = BasicBlock<for.body9 0x46b48e8>

Combining: t21: ch = CopyToReg t0, Register:i32 %vreg40, Constant:i32<0>

Combining: t20: i32 = Register %vreg40

Combining: t18: ch = store<ST8[%1+24]> t3, Constant:i64<0>, t17, undef:i32

Combining: t17: i32 = add FrameIndex:i32<0>, Constant:i32<24>

Combining: t16: i32 = Constant<24>

Combining: t15: ch = store<ST8[%1+16]> t3, Constant:i64<0>, t14, undef:i32

Combining: t14: i32 = add FrameIndex:i32<0>, Constant:i32<16>

Combining: t13: i32 = Constant<16>

Combining: t12: ch = store<ST8[%1+8]> t3, Constant:i64<0>, t11, undef:i32

Combining: t11: i32 = add FrameIndex:i32<0>, Constant:i32<8>

Combining: t10: i32 = Constant<8>

Combining: t9: ch = store<ST8[%1]> t3, Constant:i64<0>, FrameIndex:i32<0>, undef:i32

Combining: t8: i32 = undef

Combining: t7: i32 = Constant<0>

Combining: t6: i64 = Constant<0>

Combining: t3: ch = lifetime.start t0, TargetFrameIndex:i32<0>

Combining: t2: i32 = TargetFrameIndex<0>

Combining: t1: i32 = FrameIndex<0>

Combining: t0: ch = EntryToken
Optimized lowered selection DAG: BB#3 'matmac:for.body9.preheader'
SelectionDAG has 22 nodes:
  t0: ch = EntryToken
  t3: ch = lifetime.start t0, TargetFrameIndex:i32<0>
      t21: ch = CopyToReg t0, Register:i32 %vreg40, Constant:i32<0>
      t9: ch = store<ST8[%1]> t3, Constant:i64<0>, FrameIndex:i32<0>, undef:i32
        t11: i32 = add FrameIndex:i32<0>, Constant:i32<8>
      t12: ch = store<ST8[%1+8]> t3, Constant:i64<0>, t11, undef:i32
        t14: i32 = add FrameIndex:i32<0>, Constant:i32<16>
      t15: ch = store<ST8[%1+16]> t3, Constant:i64<0>, t14, undef:i32
        t17: i32 = add FrameIndex:i32<0>, Constant:i32<24>
      t18: ch = store<ST8[%1+24]> t3, Constant:i64<0>, t17, undef:i32
    t25: ch = TokenFactor t21, t9, t12, t15, t18
  t24: ch = br t25, BasicBlock:ch<for.body9 0x46b48e8>


Legally typed node: t22: ch = BasicBlock<for.body9 0x46b48e8>

Legally typed node: t20: i32 = Register %vreg40

Legally typed node: t16: i32 = Constant<24>

Legally typed node: t13: i32 = Constant<16>

Legally typed node: t10: i32 = Constant<8>

Legally typed node: t8: i32 = undef

Legally typed node: t7: i32 = Constant<0>

Legally typed node: t6: i64 = Constant<0>

Legally typed node: t2: i32 = TargetFrameIndex<0>

Legally typed node: t1: i32 = FrameIndex<0>

Legally typed node: t11: i32 = add FrameIndex:i32<0>, Constant:i32<8>

Legally typed node: t14: i32 = add FrameIndex:i32<0>, Constant:i32<16>

Legally typed node: t17: i32 = add FrameIndex:i32<0>, Constant:i32<24>

Legally typed node: t0: ch = EntryToken

Legally typed node: t3: ch = lifetime.start t0, TargetFrameIndex:i32<0>

Legally typed node: t9: ch = store<ST8[%1]> t3, Constant:i64<0>, FrameIndex:i32<0>, undef:i32

Legally typed node: t12: ch = store<ST8[%1+8]> t3, Constant:i64<0>, t11, undef:i32

Legally typed node: t15: ch = store<ST8[%1+16]> t3, Constant:i64<0>, t14, undef:i32

Legally typed node: t18: ch = store<ST8[%1+24]> t3, Constant:i64<0>, t17, undef:i32

Legally typed node: t21: ch = CopyToReg t0, Register:i32 %vreg40, Constant:i32<0>

Legally typed node: t25: ch = TokenFactor t21, t9, t12, t15, t18

Legally typed node: t24: ch = br t25, BasicBlock:ch<for.body9 0x46b48e8>

Legally typed node: t65535: ch = handlenode t24

Type-legalized selection DAG: BB#3 'matmac:for.body9.preheader'
SelectionDAG has 22 nodes:
  t0: ch = EntryToken
  t3: ch = lifetime.start t0, TargetFrameIndex:i32<0>
      t21: ch = CopyToReg t0, Register:i32 %vreg40, Constant:i32<0>
      t9: ch = store<ST8[%1]> t3, Constant:i64<0>, FrameIndex:i32<0>, undef:i32
        t11: i32 = add FrameIndex:i32<0>, Constant:i32<8>
      t12: ch = store<ST8[%1+8]> t3, Constant:i64<0>, t11, undef:i32
        t14: i32 = add FrameIndex:i32<0>, Constant:i32<16>
      t15: ch = store<ST8[%1+16]> t3, Constant:i64<0>, t14, undef:i32
        t17: i32 = add FrameIndex:i32<0>, Constant:i32<24>
      t18: ch = store<ST8[%1+24]> t3, Constant:i64<0>, t17, undef:i32
    t25: ch = TokenFactor t21, t9, t12, t15, t18
  t24: ch = br t25, BasicBlock:ch<for.body9 0x46b48e8>



Legalizing: t24: ch = br t25, BasicBlock:ch<for.body9 0x46b48e8>

Legalizing: t25: ch = TokenFactor t21, t9, t12, t15, t18

Legalizing: t18: ch = store<ST8[%1+24]> t3, Constant:i64<0>, t17, undef:i32

Legalizing: t15: ch = store<ST8[%1+16]> t3, Constant:i64<0>, t14, undef:i32

Legalizing: t12: ch = store<ST8[%1+8]> t3, Constant:i64<0>, t11, undef:i32

Legalizing: t9: ch = store<ST8[%1]> t3, Constant:i64<0>, FrameIndex:i32<0>, undef:i32

Legalizing: t21: ch = CopyToReg t0, Register:i32 %vreg40, Constant:i32<0>

Legalizing: t17: i32 = add FrameIndex:i32<0>, Constant:i32<24>

Legalizing: t14: i32 = add FrameIndex:i32<0>, Constant:i32<16>

Legalizing: t11: i32 = add FrameIndex:i32<0>, Constant:i32<8>

Legalizing: t3: ch = lifetime.start t0, TargetFrameIndex:i32<0>

Legalizing: t22: ch = BasicBlock<for.body9 0x46b48e8>

Legalizing: t20: i32 = Register %vreg40

Legalizing: t16: i32 = Constant<24>

Legalizing: t13: i32 = Constant<16>

Legalizing: t10: i32 = Constant<8>

Legalizing: t8: i32 = undef

Legalizing: t7: i32 = Constant<0>

Legalizing: t6: i64 = Constant<0>

Legalizing: t2: i32 = TargetFrameIndex<0>

Legalizing: t1: i32 = FrameIndex<0>

Legalizing: t0: ch = EntryToken
Legalized selection DAG: BB#3 'matmac:for.body9.preheader'
SelectionDAG has 22 nodes:
  t0: ch = EntryToken
  t3: ch = lifetime.start t0, TargetFrameIndex:i32<0>
      t21: ch = CopyToReg t0, Register:i32 %vreg40, Constant:i32<0>
      t9: ch = store<ST8[%1]> t3, Constant:i64<0>, FrameIndex:i32<0>, undef:i32
        t11: i32 = add FrameIndex:i32<0>, Constant:i32<8>
      t12: ch = store<ST8[%1+8]> t3, Constant:i64<0>, t11, undef:i32
        t14: i32 = add FrameIndex:i32<0>, Constant:i32<16>
      t15: ch = store<ST8[%1+16]> t3, Constant:i64<0>, t14, undef:i32
        t17: i32 = add FrameIndex:i32<0>, Constant:i32<24>
      t18: ch = store<ST8[%1+24]> t3, Constant:i64<0>, t17, undef:i32
    t25: ch = TokenFactor t21, t9, t12, t15, t18
  t24: ch = br t25, BasicBlock:ch<for.body9 0x46b48e8>



Legalizing: t24: ch = br t25, BasicBlock:ch<for.body9 0x46b48e8>

Combining: t24: ch = br t25, BasicBlock:ch<for.body9 0x46b48e8>

Legalizing: t25: ch = TokenFactor t21, t9, t12, t15, t18

Combining: t25: ch = TokenFactor t21, t9, t12, t15, t18

Legalizing: t18: ch = store<ST8[%1+24]> t3, Constant:i64<0>, t17, undef:i32

Combining: t18: ch = store<ST8[%1+24]> t3, Constant:i64<0>, t17, undef:i32

Legalizing: t15: ch = store<ST8[%1+16]> t3, Constant:i64<0>, t14, undef:i32

Combining: t15: ch = store<ST8[%1+16]> t3, Constant:i64<0>, t14, undef:i32

Legalizing: t12: ch = store<ST8[%1+8]> t3, Constant:i64<0>, t11, undef:i32

Combining: t12: ch = store<ST8[%1+8]> t3, Constant:i64<0>, t11, undef:i32

Legalizing: t9: ch = store<ST8[%1]> t3, Constant:i64<0>, FrameIndex:i32<0>, undef:i32

Combining: t9: ch = store<ST8[%1]> t3, Constant:i64<0>, FrameIndex:i32<0>, undef:i32

Legalizing: t21: ch = CopyToReg t0, Register:i32 %vreg40, Constant:i32<0>

Combining: t21: ch = CopyToReg t0, Register:i32 %vreg40, Constant:i32<0>

Legalizing: t17: i32 = add FrameIndex:i32<0>, Constant:i32<24>

Combining: t17: i32 = add FrameIndex:i32<0>, Constant:i32<24>

Legalizing: t14: i32 = add FrameIndex:i32<0>, Constant:i32<16>

Combining: t14: i32 = add FrameIndex:i32<0>, Constant:i32<16>

Legalizing: t11: i32 = add FrameIndex:i32<0>, Constant:i32<8>

Combining: t11: i32 = add FrameIndex:i32<0>, Constant:i32<8>

Legalizing: t3: ch = lifetime.start t0, TargetFrameIndex:i32<0>

Combining: t3: ch = lifetime.start t0, TargetFrameIndex:i32<0>

Legalizing: t22: ch = BasicBlock<for.body9 0x46b48e8>

Combining: t22: ch = BasicBlock<for.body9 0x46b48e8>

Legalizing: t20: i32 = Register %vreg40

Combining: t20: i32 = Register %vreg40

Legalizing: t16: i32 = Constant<24>

Combining: t16: i32 = Constant<24>

Legalizing: t13: i32 = Constant<16>

Combining: t13: i32 = Constant<16>

Legalizing: t10: i32 = Constant<8>

Combining: t10: i32 = Constant<8>

Legalizing: t8: i32 = undef

Combining: t8: i32 = undef

Legalizing: t7: i32 = Constant<0>

Combining: t7: i32 = Constant<0>

Legalizing: t6: i64 = Constant<0>

Combining: t6: i64 = Constant<0>

Legalizing: t2: i32 = TargetFrameIndex<0>

Combining: t2: i32 = TargetFrameIndex<0>

Legalizing: t1: i32 = FrameIndex<0>

Combining: t1: i32 = FrameIndex<0>

Legalizing: t0: ch = EntryToken

Combining: t0: ch = EntryToken
Optimized legalized selection DAG: BB#3 'matmac:for.body9.preheader'
SelectionDAG has 22 nodes:
  t0: ch = EntryToken
  t3: ch = lifetime.start t0, TargetFrameIndex:i32<0>
      t21: ch = CopyToReg t0, Register:i32 %vreg40, Constant:i32<0>
      t9: ch = store<ST8[%1]> t3, Constant:i64<0>, FrameIndex:i32<0>, undef:i32
        t11: i32 = add FrameIndex:i32<0>, Constant:i32<8>
      t12: ch = store<ST8[%1+8]> t3, Constant:i64<0>, t11, undef:i32
        t14: i32 = add FrameIndex:i32<0>, Constant:i32<16>
      t15: ch = store<ST8[%1+16]> t3, Constant:i64<0>, t14, undef:i32
        t17: i32 = add FrameIndex:i32<0>, Constant:i32<24>
      t18: ch = store<ST8[%1+24]> t3, Constant:i64<0>, t17, undef:i32
    t25: ch = TokenFactor t21, t9, t12, t15, t18
  t24: ch = br t25, BasicBlock:ch<for.body9 0x46b48e8>


===== Instruction selection begins: BB#3 'for.body9.preheader'
Selecting: t24: ch = br t25, BasicBlock:ch<for.body9 0x46b48e8>

ISEL: Starting pattern match on root node: t24: ch = br t25, BasicBlock:ch<for.body9 0x46b48e8>

  Initial Opcode index to 4515
  Morphed node: t24: ch = BNONE32 BasicBlock:ch<for.body9 0x46b48e8>, t25

ISEL: Match complete!
Selecting: t25: ch = TokenFactor t21, t9, t12, t15, t18

Selecting: t18: ch = store<ST8[%1+24]> t3, Constant:i64<0>, t17, undef:i32

ISEL: Starting pattern match on root node: t18: ch = store<ST8[%1+24]> t3, Constant:i64<0>, t17, undef:i32

  Initial Opcode index to 842
  Skipped scope entry (due to false predicate) at index 848, continuing at 1255
  Skipped scope entry (due to false predicate) at index 1256, continuing at 1275
  Morphed node: t18: ch = STRi64<Mem:ST8[%1+24]> Constant:i64<0>, TargetFrameIndex:i32<0>, TargetConstant:i32<24>, t3

ISEL: Match complete!
Selecting: t15: ch = store<ST8[%1+16]> t3, Constant:i64<0>, t14, undef:i32

ISEL: Starting pattern match on root node: t15: ch = store<ST8[%1+16]> t3, Constant:i64<0>, t14, undef:i32

  Initial Opcode index to 842
  Skipped scope entry (due to false predicate) at index 848, continuing at 1255
  Skipped scope entry (due to false predicate) at index 1256, continuing at 1275
  Morphed node: t15: ch = STRi64<Mem:ST8[%1+16]> Constant:i64<0>, TargetFrameIndex:i32<0>, TargetConstant:i32<16>, t3

ISEL: Match complete!
Selecting: t12: ch = store<ST8[%1+8]> t3, Constant:i64<0>, t11, undef:i32

ISEL: Starting pattern match on root node: t12: ch = store<ST8[%1+8]> t3, Constant:i64<0>, t11, undef:i32

  Initial Opcode index to 842
  Skipped scope entry (due to false predicate) at index 848, continuing at 1255
  Skipped scope entry (due to false predicate) at index 1256, continuing at 1275
  Morphed node: t12: ch = STRi64<Mem:ST8[%1+8]> Constant:i64<0>, TargetFrameIndex:i32<0>, TargetConstant:i32<8>, t3

ISEL: Match complete!
Selecting: t9: ch = store<ST8[%1]> t3, Constant:i64<0>, FrameIndex:i32<0>, undef:i32

ISEL: Starting pattern match on root node: t9: ch = store<ST8[%1]> t3, Constant:i64<0>, FrameIndex:i32<0>, undef:i32

  Initial Opcode index to 842
  Skipped scope entry (due to false predicate) at index 848, continuing at 1255
  Skipped scope entry (due to false predicate) at index 1256, continuing at 1275
  Morphed node: t9: ch = STRi64<Mem:ST8[%1]> Constant:i64<0>, TargetFrameIndex:i32<0>, TargetConstant:i32<0>, t3

ISEL: Match complete!
Selecting: t21: ch = CopyToReg t0, Register:i32 %vreg40, Constant:i32<0>

Selecting: t3: ch = lifetime.start t0, TargetFrameIndex:i32<0>

Selecting: t22: ch = BasicBlock<for.body9 0x46b48e8>

Selecting: t20: i32 = Register %vreg40

Selecting: t7: i32 = Constant<0>

ISEL: Starting pattern match on root node: t7: i32 = Constant<0>

  Initial Opcode index to 3685
  TypeSwitch[i32] from 3686 to 3689
  Morphed node: t7: i32 = MOVi32ri TargetConstant:i32<0>

ISEL: Match complete!
Selecting: t6: i64 = Constant<0>

ISEL: Starting pattern match on root node: t6: i64 = Constant<0>

  Initial Opcode index to 3685
  TypeSwitch[i64] from 3686 to 3742
  Created node: t7: i32 = MOVi32ri TargetConstant:i32<0>

  Created node: t33: i32 = MOVi32ri TargetConstant:i64<0>

  Morphed node: t6: i64 = REG_SEQUENCE TargetConstant:i32<11>, t7, TargetConstant:i32<1>, t33, TargetConstant:i32<2>

ISEL: Match complete!
Selecting: t2: i32 = TargetFrameIndex<0>

Selecting: t0: ch = EntryToken

===== Instruction selection ends:
Selected selection DAG: BB#3 'matmac:for.body9.preheader'
SelectionDAG has 23 nodes:
  t0: ch = EntryToken
    t33: i32 = MOVi32ri TargetConstant:i64<0>
  t6: i64 = REG_SEQUENCE TargetConstant:i32<11>, t7, TargetConstant:i32<1>, t33, TargetConstant:i32<2>
  t7: i32 = MOVi32ri TargetConstant:i32<0>
  t3: ch = lifetime.start t0, TargetFrameIndex:i32<0>
      t21: ch = CopyToReg t0, Register:i32 %vreg40, t7
      t9: ch = STRi64<Mem:ST8[%1]> t6, TargetFrameIndex:i32<0>, TargetConstant:i32<0>, t3
      t12: ch = STRi64<Mem:ST8[%1+8]> t6, TargetFrameIndex:i32<0>, TargetConstant:i32<8>, t3
      t15: ch = STRi64<Mem:ST8[%1+16]> t6, TargetFrameIndex:i32<0>, TargetConstant:i32<16>, t3
      t18: ch = STRi64<Mem:ST8[%1+24]> t6, TargetFrameIndex:i32<0>, TargetConstant:i32<24>, t3
    t25: ch = TokenFactor t21, t9, t12, t15, t18
  t24: ch = BNONE32 BasicBlock:ch<for.body9 0x46b48e8>, t25


********** List Scheduling BB#3 'for.body9.preheader' **********
SU(0): t24: ch = BNONE32 BasicBlock:ch<for.body9 0x46b48e8>, t25

  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 8
  Depth              : 6
  Height             : 0
  Predecessors:
   ord  SU(1): Latency=0
SU(1): t25: ch = TokenFactor t21, t9, t12, t15, t18

  # preds left       : 5
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 6
  Height             : 0
  Predecessors:
   ord  SU(10): Latency=1
   ord  SU(9): Latency=1
   ord  SU(8): Latency=1
   ord  SU(7): Latency=1
   ord  SU(2): Latency=1
  Successors:
   ord  SU(0): Latency=0
SU(2): t18: ch = STRi64<Mem:ST8[%1+24]> t6, TargetFrameIndex:i32<0>, TargetConstant:i32<24>, t3

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 5
  Depth              : 5
  Height             : 1
  Predecessors:
   data SU(4): Latency=0
   ord  SU(3): Latency=1
  Successors:
   ord  SU(1): Latency=1
SU(3): t3: ch = lifetime.start t0, TargetFrameIndex:i32<0>

  # preds left       : 0
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 2
  Successors:
   ord  SU(2): Latency=1
   ord  SU(7): Latency=1
   ord  SU(8): Latency=1
   ord  SU(9): Latency=1
SU(4): t6: i64 = REG_SEQUENCE TargetConstant:i32<11>, t7, TargetConstant:i32<1>, t33, TargetConstant:i32<2>

  # preds left       : 2
  # succs left       : 4
  # rdefs left       : 1
  Latency            : 0
  Depth              : 5
  Height             : 1
  Predecessors:
   data SU(6): Latency=5
   data SU(5): Latency=5
  Successors:
   data SU(2): Latency=0
   data SU(7): Latency=0
   data SU(8): Latency=0
   data SU(9): Latency=0
SU(5): t33: i32 = MOVi32ri TargetConstant:i64<0>

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 5
  Depth              : 0
  Height             : 6
  Successors:
   data SU(4): Latency=5
SU(6): t7: i32 = MOVi32ri TargetConstant:i32<0>

  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 1
  Latency            : 5
  Depth              : 0
  Height             : 6
  Successors:
   data SU(4): Latency=5
   data SU(10): Latency=3
SU(7): t15: ch = STRi64<Mem:ST8[%1+16]> t6, TargetFrameIndex:i32<0>, TargetConstant:i32<16>, t3

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 5
  Depth              : 5
  Height             : 1
  Predecessors:
   data SU(4): Latency=0
   ord  SU(3): Latency=1
  Successors:
   ord  SU(1): Latency=1
SU(8): t12: ch = STRi64<Mem:ST8[%1+8]> t6, TargetFrameIndex:i32<0>, TargetConstant:i32<8>, t3

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 5
  Depth              : 5
  Height             : 1
  Predecessors:
   data SU(4): Latency=0
   ord  SU(3): Latency=1
  Successors:
   ord  SU(1): Latency=1
SU(9): t9: ch = STRi64<Mem:ST8[%1]> t6, TargetFrameIndex:i32<0>, TargetConstant:i32<0>, t3

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 5
  Depth              : 5
  Height             : 1
  Predecessors:
   data SU(4): Latency=0
   ord  SU(3): Latency=1
  Successors:
   ord  SU(1): Latency=1
SU(10): t21: ch = CopyToReg t0, Register:i32 %vreg40, t7

  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 3
  Height             : 1
  Predecessors:
   data SU(6): Latency=3
  Successors:
   ord  SU(1): Latency=1

Examining Available:
Height 0: SU(0): t24: ch = BNONE32 BasicBlock:ch<for.body9 0x46b48e8>, t25


*** Scheduling [0]: SU(0): t24: ch = BNONE32 BasicBlock:ch<for.body9 0x46b48e8>, t25


Examining Available:
Height 0: SU(1): t25: ch = TokenFactor t21, t9, t12, t15, t18


*** Scheduling [1]: SU(1): t25: ch = TokenFactor t21, t9, t12, t15, t18


Examining Available:
Height 2: SU(10): t21: ch = CopyToReg t0, Register:i32 %vreg40, t7

Height 2: SU(9): t9: ch = STRi64<Mem:ST8[%1]> t6, TargetFrameIndex:i32<0>, TargetConstant:i32<0>, t3

Height 2: SU(8): t12: ch = STRi64<Mem:ST8[%1+8]> t6, TargetFrameIndex:i32<0>, TargetConstant:i32<8>, t3

Height 2: SU(7): t15: ch = STRi64<Mem:ST8[%1+16]> t6, TargetFrameIndex:i32<0>, TargetConstant:i32<16>, t3

Height 2: SU(2): t18: ch = STRi64<Mem:ST8[%1+24]> t6, TargetFrameIndex:i32<0>, TargetConstant:i32<24>, t3


*** Scheduling [2]: SU(10): t21: ch = CopyToReg t0, Register:i32 %vreg40, t7

FPR64_with_isub_lo_in_FPR32: 1 / 26

Examining Available:
Height 2: SU(9): t9: ch = STRi64<Mem:ST8[%1]> t6, TargetFrameIndex:i32<0>, TargetConstant:i32<0>, t3

Height 2: SU(8): t12: ch = STRi64<Mem:ST8[%1+8]> t6, TargetFrameIndex:i32<0>, TargetConstant:i32<8>, t3

Height 2: SU(7): t15: ch = STRi64<Mem:ST8[%1+16]> t6, TargetFrameIndex:i32<0>, TargetConstant:i32<16>, t3

Height 2: SU(2): t18: ch = STRi64<Mem:ST8[%1+24]> t6, TargetFrameIndex:i32<0>, TargetConstant:i32<24>, t3


*** Scheduling [3]: SU(9): t9: ch = STRi64<Mem:ST8[%1]> t6, TargetFrameIndex:i32<0>, TargetConstant:i32<0>, t3

GPR64: 1 / 26
FPR64_with_isub_lo_in_FPR32: 1 / 26

Examining Available:
Height 2: SU(8): t12: ch = STRi64<Mem:ST8[%1+8]> t6, TargetFrameIndex:i32<0>, TargetConstant:i32<8>, t3

Height 2: SU(7): t15: ch = STRi64<Mem:ST8[%1+16]> t6, TargetFrameIndex:i32<0>, TargetConstant:i32<16>, t3

Height 2: SU(2): t18: ch = STRi64<Mem:ST8[%1+24]> t6, TargetFrameIndex:i32<0>, TargetConstant:i32<24>, t3


*** Scheduling [4]: SU(8): t12: ch = STRi64<Mem:ST8[%1+8]> t6, TargetFrameIndex:i32<0>, TargetConstant:i32<8>, t3

GPR64: 1 / 26
FPR64_with_isub_lo_in_FPR32: 1 / 26

Examining Available:
Height 2: SU(7): t15: ch = STRi64<Mem:ST8[%1+16]> t6, TargetFrameIndex:i32<0>, TargetConstant:i32<16>, t3

Height 2: SU(2): t18: ch = STRi64<Mem:ST8[%1+24]> t6, TargetFrameIndex:i32<0>, TargetConstant:i32<24>, t3


*** Scheduling [5]: SU(7): t15: ch = STRi64<Mem:ST8[%1+16]> t6, TargetFrameIndex:i32<0>, TargetConstant:i32<16>, t3

GPR64: 1 / 26
FPR64_with_isub_lo_in_FPR32: 1 / 26

Examining Available:
Height 2: SU(2): t18: ch = STRi64<Mem:ST8[%1+24]> t6, TargetFrameIndex:i32<0>, TargetConstant:i32<24>, t3


*** Scheduling [6]: SU(2): t18: ch = STRi64<Mem:ST8[%1+24]> t6, TargetFrameIndex:i32<0>, TargetConstant:i32<24>, t3

GPR64: 1 / 26
FPR64_with_isub_lo_in_FPR32: 1 / 26

Examining Available:
Height 7: SU(3): t3: ch = lifetime.start t0, TargetFrameIndex:i32<0>

Height 6: SU(4): t6: i64 = REG_SEQUENCE TargetConstant:i32<11>, t7, TargetConstant:i32<1>, t33, TargetConstant:i32<2>


*** Scheduling [7]: SU(3): t3: ch = lifetime.start t0, TargetFrameIndex:i32<0>

GPR64: 1 / 26
FPR64_with_isub_lo_in_FPR32: 1 / 26

Examining Available:
Height 6: SU(4): t6: i64 = REG_SEQUENCE TargetConstant:i32<11>, t7, TargetConstant:i32<1>, t33, TargetConstant:i32<2>


*** Scheduling [8]: SU(4): t6: i64 = REG_SEQUENCE TargetConstant:i32<11>, t7, TargetConstant:i32<1>, t33, TargetConstant:i32<2>

FPR64_with_isub_lo_in_FPR32: 2 / 26

Examining Available:
Height 13: SU(6): t7: i32 = MOVi32ri TargetConstant:i32<0>

Height 13: SU(5): t33: i32 = MOVi32ri TargetConstant:i64<0>


*** Scheduling [13]: SU(6): t7: i32 = MOVi32ri TargetConstant:i32<0>

FPR64_with_isub_lo_in_FPR32: 1 / 26

Examining Available:
Height 13: SU(5): t33: i32 = MOVi32ri TargetConstant:i64<0>


*** Scheduling [14]: SU(5): t33: i32 = MOVi32ri TargetConstant:i64<0>

*** Final schedule ***
SU(5): t33: i32 = MOVi32ri TargetConstant:i64<0>

SU(6): t7: i32 = MOVi32ri TargetConstant:i32<0>

SU(4): t6: i64 = REG_SEQUENCE TargetConstant:i32<11>, t7, TargetConstant:i32<1>, t33, TargetConstant:i32<2>

SU(3): t3: ch = lifetime.start t0, TargetFrameIndex:i32<0>

SU(2): t18: ch = STRi64<Mem:ST8[%1+24]> t6, TargetFrameIndex:i32<0>, TargetConstant:i32<24>, t3

SU(7): t15: ch = STRi64<Mem:ST8[%1+16]> t6, TargetFrameIndex:i32<0>, TargetConstant:i32<16>, t3

SU(8): t12: ch = STRi64<Mem:ST8[%1+8]> t6, TargetFrameIndex:i32<0>, TargetConstant:i32<8>, t3

SU(9): t9: ch = STRi64<Mem:ST8[%1]> t6, TargetFrameIndex:i32<0>, TargetConstant:i32<0>, t3

SU(10): t21: ch = CopyToReg t0, Register:i32 %vreg40, t7

SU(1): t25: ch = TokenFactor t21, t9, t12, t15, t18

SU(0): t24: ch = BNONE32 BasicBlock:ch<for.body9 0x46b48e8>, t25


Total amount of phi nodes to update: 2
Node 0 : (0x46b4998, 2147483655)
Node 1 : (0x46b49f8, 2147483688)
Initial selection DAG: BB#5 'matmac:for.body9'
SelectionDAG has 21 nodes:
  t0: ch = EntryToken
  t3: ch = ValueType:i32
      t7: i32,ch = CopyFromReg t0, Register:i32 %vreg5
        t9: i32,ch = CopyFromReg t0, Register:i32 %vreg10
      t11: i32 = shl t9, Constant:i32<2>
    t12: i32 = add t7, t11
  t15: f32,ch = load<Volatile LD4[%add.ptr10](tbaa=<0x46205c8>)> t0, t12, undef:i32
      t2: i32,ch = CopyFromReg t0, Register:i32 %vreg2
    t5: ch = CopyToReg t0, Register:i32 %vreg11, t2
    t17: ch = CopyToReg t0, Register:f32 %vreg12, t15
    t19: ch = CopyToReg t0, Register:i32 %vreg43, Constant:i32<0>
  t20: ch = TokenFactor t5, t17, t19, t15:1



Combining: t20: ch = TokenFactor t5, t17, t19, t15:1

Combining: t19: ch = CopyToReg t0, Register:i32 %vreg43, Constant:i32<0>

Combining: t18: i32 = Register %vreg43

Combining: t17: ch = CopyToReg t0, Register:f32 %vreg12, t15

Combining: t16: f32 = Register %vreg12

Combining: t15: f32,ch = load<Volatile LD4[%add.ptr10](tbaa=<0x46205c8>)> t0, t12, undef:i32

Combining: t14: i32 = undef

Combining: t13: i32 = Constant<0>

Combining: t12: i32 = add t7, t11

Combining: t11: i32 = shl t9, Constant:i32<2>

Combining: t10: i32 = Constant<2>

Combining: t9: i32,ch = CopyFromReg t0, Register:i32 %vreg10

Combining: t8: i32 = Register %vreg10

Combining: t7: i32,ch = CopyFromReg t0, Register:i32 %vreg5

Combining: t6: i32 = Register %vreg5

Combining: t5: ch = CopyToReg t0, Register:i32 %vreg11, t2

Combining: t4: i32 = Register %vreg11

Combining: t2: i32,ch = CopyFromReg t0, Register:i32 %vreg2

Combining: t1: i32 = Register %vreg2

Combining: t0: ch = EntryToken
Optimized lowered selection DAG: BB#5 'matmac:for.body9'
SelectionDAG has 20 nodes:
  t0: ch = EntryToken
      t7: i32,ch = CopyFromReg t0, Register:i32 %vreg5
        t9: i32,ch = CopyFromReg t0, Register:i32 %vreg10
      t11: i32 = shl t9, Constant:i32<2>
    t12: i32 = add t7, t11
  t15: f32,ch = load<Volatile LD4[%add.ptr10](tbaa=<0x46205c8>)> t0, t12, undef:i32
      t2: i32,ch = CopyFromReg t0, Register:i32 %vreg2
    t5: ch = CopyToReg t0, Register:i32 %vreg11, t2
    t17: ch = CopyToReg t0, Register:f32 %vreg12, t15
    t19: ch = CopyToReg t0, Register:i32 %vreg43, Constant:i32<0>
  t20: ch = TokenFactor t5, t17, t19, t15:1


Legally typed node: t18: i32 = Register %vreg43

Legally typed node: t16: f32 = Register %vreg12

Legally typed node: t14: i32 = undef

Legally typed node: t13: i32 = Constant<0>

Legally typed node: t10: i32 = Constant<2>

Legally typed node: t8: i32 = Register %vreg10

Legally typed node: t6: i32 = Register %vreg5

Legally typed node: t4: i32 = Register %vreg11

Legally typed node: t1: i32 = Register %vreg2

Legally typed node: t0: ch = EntryToken

Legally typed node: t2: i32,ch = CopyFromReg t0, Register:i32 %vreg2

Legally typed node: t5: ch = CopyToReg t0, Register:i32 %vreg11, t2

Legally typed node: t7: i32,ch = CopyFromReg t0, Register:i32 %vreg5

Legally typed node: t9: i32,ch = CopyFromReg t0, Register:i32 %vreg10

Legally typed node: t11: i32 = shl t9, Constant:i32<2>

Legally typed node: t12: i32 = add t7, t11

Legally typed node: t15: f32,ch = load<Volatile LD4[%add.ptr10](tbaa=<0x46205c8>)> t0, t12, undef:i32

Legally typed node: t17: ch = CopyToReg t0, Register:f32 %vreg12, t15

Legally typed node: t19: ch = CopyToReg t0, Register:i32 %vreg43, Constant:i32<0>

Legally typed node: t20: ch = TokenFactor t5, t17, t19, t15:1

Legally typed node: t65535: ch = handlenode t20

Type-legalized selection DAG: BB#5 'matmac:for.body9'
SelectionDAG has 20 nodes:
  t0: ch = EntryToken
      t7: i32,ch = CopyFromReg t0, Register:i32 %vreg5
        t9: i32,ch = CopyFromReg t0, Register:i32 %vreg10
      t11: i32 = shl t9, Constant:i32<2>
    t12: i32 = add t7, t11
  t15: f32,ch = load<Volatile LD4[%add.ptr10](tbaa=<0x46205c8>)> t0, t12, undef:i32
      t2: i32,ch = CopyFromReg t0, Register:i32 %vreg2
    t5: ch = CopyToReg t0, Register:i32 %vreg11, t2
    t17: ch = CopyToReg t0, Register:f32 %vreg12, t15
    t19: ch = CopyToReg t0, Register:i32 %vreg43, Constant:i32<0>
  t20: ch = TokenFactor t5, t17, t19, t15:1



Legalizing: t20: ch = TokenFactor t5, t17, t19, t15:1

Legalizing: t17: ch = CopyToReg t0, Register:f32 %vreg12, t15

Legalizing: t15: f32,ch = load<Volatile LD4[%add.ptr10](tbaa=<0x46205c8>)> t0, t12, undef:i32

Legalizing: t12: i32 = add t7, t11

Legalizing: t11: i32 = shl t9, Constant:i32<2>

Legalizing: t5: ch = CopyToReg t0, Register:i32 %vreg11, t2

Legalizing: t19: ch = CopyToReg t0, Register:i32 %vreg43, Constant:i32<0>

Legalizing: t9: i32,ch = CopyFromReg t0, Register:i32 %vreg10

Legalizing: t7: i32,ch = CopyFromReg t0, Register:i32 %vreg5

Legalizing: t2: i32,ch = CopyFromReg t0, Register:i32 %vreg2

Legalizing: t18: i32 = Register %vreg43

Legalizing: t16: f32 = Register %vreg12

Legalizing: t14: i32 = undef

Legalizing: t13: i32 = Constant<0>

Legalizing: t10: i32 = Constant<2>

Legalizing: t8: i32 = Register %vreg10

Legalizing: t6: i32 = Register %vreg5

Legalizing: t4: i32 = Register %vreg11

Legalizing: t1: i32 = Register %vreg2

Legalizing: t0: ch = EntryToken
Legalized selection DAG: BB#5 'matmac:for.body9'
SelectionDAG has 20 nodes:
  t0: ch = EntryToken
      t7: i32,ch = CopyFromReg t0, Register:i32 %vreg5
        t9: i32,ch = CopyFromReg t0, Register:i32 %vreg10
      t11: i32 = shl t9, Constant:i32<2>
    t12: i32 = add t7, t11
  t15: f32,ch = load<Volatile LD4[%add.ptr10](tbaa=<0x46205c8>)> t0, t12, undef:i32
      t2: i32,ch = CopyFromReg t0, Register:i32 %vreg2
    t5: ch = CopyToReg t0, Register:i32 %vreg11, t2
    t17: ch = CopyToReg t0, Register:f32 %vreg12, t15
    t19: ch = CopyToReg t0, Register:i32 %vreg43, Constant:i32<0>
  t20: ch = TokenFactor t5, t17, t19, t15:1



Legalizing: t20: ch = TokenFactor t5, t17, t19, t15:1

Combining: t20: ch = TokenFactor t5, t17, t19, t15:1

Legalizing: t17: ch = CopyToReg t0, Register:f32 %vreg12, t15

Combining: t17: ch = CopyToReg t0, Register:f32 %vreg12, t15

Legalizing: t15: f32,ch = load<Volatile LD4[%add.ptr10](tbaa=<0x46205c8>)> t0, t12, undef:i32

Combining: t15: f32,ch = load<Volatile LD4[%add.ptr10](tbaa=<0x46205c8>)> t0, t12, undef:i32

Legalizing: t12: i32 = add t7, t11

Combining: t12: i32 = add t7, t11

Legalizing: t11: i32 = shl t9, Constant:i32<2>

Combining: t11: i32 = shl t9, Constant:i32<2>

Legalizing: t5: ch = CopyToReg t0, Register:i32 %vreg11, t2

Combining: t5: ch = CopyToReg t0, Register:i32 %vreg11, t2

Legalizing: t19: ch = CopyToReg t0, Register:i32 %vreg43, Constant:i32<0>

Combining: t19: ch = CopyToReg t0, Register:i32 %vreg43, Constant:i32<0>

Legalizing: t9: i32,ch = CopyFromReg t0, Register:i32 %vreg10

Combining: t9: i32,ch = CopyFromReg t0, Register:i32 %vreg10

Legalizing: t7: i32,ch = CopyFromReg t0, Register:i32 %vreg5

Combining: t7: i32,ch = CopyFromReg t0, Register:i32 %vreg5

Legalizing: t2: i32,ch = CopyFromReg t0, Register:i32 %vreg2

Combining: t2: i32,ch = CopyFromReg t0, Register:i32 %vreg2

Legalizing: t18: i32 = Register %vreg43

Combining: t18: i32 = Register %vreg43

Legalizing: t16: f32 = Register %vreg12

Combining: t16: f32 = Register %vreg12

Legalizing: t14: i32 = undef

Combining: t14: i32 = undef

Legalizing: t13: i32 = Constant<0>

Combining: t13: i32 = Constant<0>

Legalizing: t10: i32 = Constant<2>

Combining: t10: i32 = Constant<2>

Legalizing: t8: i32 = Register %vreg10

Combining: t8: i32 = Register %vreg10

Legalizing: t6: i32 = Register %vreg5

Combining: t6: i32 = Register %vreg5

Legalizing: t4: i32 = Register %vreg11

Combining: t4: i32 = Register %vreg11

Legalizing: t1: i32 = Register %vreg2

Combining: t1: i32 = Register %vreg2

Legalizing: t0: ch = EntryToken

Combining: t0: ch = EntryToken
Optimized legalized selection DAG: BB#5 'matmac:for.body9'
SelectionDAG has 20 nodes:
  t0: ch = EntryToken
      t7: i32,ch = CopyFromReg t0, Register:i32 %vreg5
        t9: i32,ch = CopyFromReg t0, Register:i32 %vreg10
      t11: i32 = shl t9, Constant:i32<2>
    t12: i32 = add t7, t11
  t15: f32,ch = load<Volatile LD4[%add.ptr10](tbaa=<0x46205c8>)> t0, t12, undef:i32
      t2: i32,ch = CopyFromReg t0, Register:i32 %vreg2
    t5: ch = CopyToReg t0, Register:i32 %vreg11, t2
    t17: ch = CopyToReg t0, Register:f32 %vreg12, t15
    t19: ch = CopyToReg t0, Register:i32 %vreg43, Constant:i32<0>
  t20: ch = TokenFactor t5, t17, t19, t15:1


===== Instruction selection begins: BB#5 'for.body9'
Selecting: t20: ch = TokenFactor t5, t17, t19, t15:1

Selecting: t17: ch = CopyToReg t0, Register:f32 %vreg12, t15

Selecting: t15: f32,ch = load<Volatile LD4[%add.ptr10](tbaa=<0x46205c8>)> t0, t12, undef:i32

ISEL: Starting pattern match on root node: t15: f32,ch = load<Volatile LD4[%add.ptr10](tbaa=<0x46205c8>)> t0, t12, undef:i32

  Initial Opcode index to 497
  Skipped scope entry (due to false predicate) at index 507, continuing at 543
  Match failed at index 546
  Continuing at 576
  Match failed at index 577
  Continuing at 613
  Match failed at index 616
  Continuing at 630
  Continuing at 631
  OpcodeSwitch from 634 to 638
  Match failed at index 645
  Continuing at 787
  TypeSwitch[f32] from 793 to 796
  Morphed node: t15: f32,ch = LDRf32<Mem:Volatile LD4[%add.ptr10](tbaa=<0x46205c8>)> t12, TargetConstant:i32<0>, t0

ISEL: Match complete!
Selecting: t12: i32 = add t7, t11

ISEL: Starting pattern match on root node: t12: i32 = add t7, t11

  Initial Opcode index to 1567
  Match failed at index 1572
  Continuing at 1611
  Morphed node: t12: i32,i32 = ADDrr_r32 t7, t11

ISEL: Match complete!
Selecting: t11: i32 = shl t9, Constant:i32<2>

ISEL: Starting pattern match on root node: t11: i32 = shl t9, Constant:i32<2>

  Initial Opcode index to 2454
  Morphed node: t11: i32,i32 = LSL32ri t9, TargetConstant:i32<2>

ISEL: Match complete!
Selecting: t5: ch = CopyToReg t0, Register:i32 %vreg11, t2

Selecting: t19: ch = CopyToReg t0, Register:i32 %vreg43, Constant:i32<0>

Selecting: t9: i32,ch = CopyFromReg t0, Register:i32 %vreg10

Selecting: t7: i32,ch = CopyFromReg t0, Register:i32 %vreg5

Selecting: t2: i32,ch = CopyFromReg t0, Register:i32 %vreg2

Selecting: t18: i32 = Register %vreg43

Selecting: t16: f32 = Register %vreg12

Selecting: t13: i32 = Constant<0>

ISEL: Starting pattern match on root node: t13: i32 = Constant<0>

  Initial Opcode index to 3685
  TypeSwitch[i32] from 3686 to 3689
  Morphed node: t13: i32 = MOVi32ri TargetConstant:i32<0>

ISEL: Match complete!
Selecting: t8: i32 = Register %vreg10

Selecting: t6: i32 = Register %vreg5

Selecting: t4: i32 = Register %vreg11

Selecting: t1: i32 = Register %vreg2

Selecting: t0: ch = EntryToken

===== Instruction selection ends:
Selected selection DAG: BB#5 'matmac:for.body9'
SelectionDAG has 20 nodes:
  t0: ch = EntryToken
      t7: i32,ch = CopyFromReg t0, Register:i32 %vreg5
        t9: i32,ch = CopyFromReg t0, Register:i32 %vreg10
      t11: i32,i32 = LSL32ri t9, TargetConstant:i32<2>
    t12: i32,i32 = ADDrr_r32 t7, t11
  t15: f32,ch = LDRf32<Mem:Volatile LD4[%add.ptr10](tbaa=<0x46205c8>)> t12, TargetConstant:i32<0>, t0
      t2: i32,ch = CopyFromReg t0, Register:i32 %vreg2
    t5: ch = CopyToReg t0, Register:i32 %vreg11, t2
    t17: ch = CopyToReg t0, Register:f32 %vreg12, t15
      t13: i32 = MOVi32ri TargetConstant:i32<0>
    t19: ch = CopyToReg t0, Register:i32 %vreg43, t13
  t20: ch = TokenFactor t5, t17, t19, t15:1


********** List Scheduling BB#5 'for.body9' **********
SU(0): t20: ch = TokenFactor t5, t17, t19, t15:1

  # preds left       : 4
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 13
  Height             : 0
  Predecessors:
   ord  SU(9): Latency=1
   ord  SU(8): Latency=1
   ord  SU(6): Latency=1
   ord  SU(1): Latency=1
SU(1): t15: f32,ch = LDRf32<Mem:Volatile LD4[%add.ptr10](tbaa=<0x46205c8>)> t12, TargetConstant:i32<0>, t0

  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 1
  Latency            : 6
  Depth              : 7
  Height             : 6
  Predecessors:
   data SU(2): Latency=2
  Successors:
   ord  SU(0): Latency=1
   data SU(8): Latency=5
SU(2): t12: i32,i32 = ADDrr_r32 t7, t11

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 5
  Depth              : 5
  Height             : 8
  Predecessors:
   data SU(5): Latency=0
   data SU(3): Latency=5
  Successors:
   data SU(1): Latency=2
SU(3): t11: i32,i32 = LSL32ri t9, TargetConstant:i32<2>

  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 5
  Depth              : 0
  Height             : 13
  Predecessors:
   data SU(4): Latency=0
  Successors:
   data SU(2): Latency=5
SU(4): t9: i32,ch = CopyFromReg t0, Register:i32 %vreg10

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 0
  Depth              : 0
  Height             : 13
  Successors:
   data SU(3): Latency=0
SU(5): t7: i32,ch = CopyFromReg t0, Register:i32 %vreg5

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 0
  Depth              : 0
  Height             : 8
  Successors:
   data SU(2): Latency=0
SU(6): t19: ch = CopyToReg t0, Register:i32 %vreg43, t13

  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 3
  Height             : 1
  Predecessors:
   data SU(7): Latency=3
  Successors:
   ord  SU(0): Latency=1
SU(7): t13: i32 = MOVi32ri TargetConstant:i32<0>

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 5
  Depth              : 0
  Height             : 4
  Successors:
   data SU(6): Latency=3
SU(8): t17: ch = CopyToReg t0, Register:f32 %vreg12, t15

  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 12
  Height             : 1
  Predecessors:
   data SU(1): Latency=5
  Successors:
   ord  SU(0): Latency=1
SU(9): t5: ch = CopyToReg t0, Register:i32 %vreg11, t2

  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 1
  Predecessors:
   data SU(10): Latency=0
  Successors:
   ord  SU(0): Latency=1
SU(10): t2: i32,ch = CopyFromReg t0, Register:i32 %vreg2

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 0
  Depth              : 0
  Height             : 1
  Successors:
   data SU(9): Latency=0

Examining Available:
Height 0: SU(0): t20: ch = TokenFactor t5, t17, t19, t15:1


*** Scheduling [0]: SU(0): t20: ch = TokenFactor t5, t17, t19, t15:1


Examining Available:
Depth of SU(9): 0 != SU(8): 12
Depth of SU(8): 12 != SU(6): 3
Height 1: SU(8): t17: ch = CopyToReg t0, Register:f32 %vreg12, t15

  Comparing latency of SU (9) depth 0 vs SU (6) depth 3
Height 1: SU(6): t19: ch = CopyToReg t0, Register:i32 %vreg43, t13

Height 1: SU(9): t5: ch = CopyToReg t0, Register:i32 %vreg11, t2

Depth of SU(9): 0 != SU(8): 12
Depth of SU(8): 12 != SU(6): 3

*** Scheduling [1]: SU(8): t17: ch = CopyToReg t0, Register:f32 %vreg12, t15

FPR64_with_isub_lo_in_FPR32: 1 / 26

Examining Available:
  Comparing latency of SU (9) depth 0 vs SU (6) depth 3
Height 1: SU(6): t19: ch = CopyToReg t0, Register:i32 %vreg43, t13

Depth of SU(9): 0 != SU(1): 7
Height 6: SU(1): t15: f32,ch = LDRf32<Mem:Volatile LD4[%add.ptr10](tbaa=<0x46205c8>)> t12, TargetConstant:i32<0>, t0

Height 1: SU(9): t5: ch = CopyToReg t0, Register:i32 %vreg11, t2

  Comparing latency of SU (9) depth 0 vs SU (6) depth 3

*** Scheduling [2]: SU(6): t19: ch = CopyToReg t0, Register:i32 %vreg43, t13

FPR64_with_isub_lo_in_FPR32: 2 / 26

Examining Available:
Depth of SU(9): 0 != SU(1): 7
Depth of SU(1): 7 != SU(7): 0
Height 6: SU(1): t15: f32,ch = LDRf32<Mem:Volatile LD4[%add.ptr10](tbaa=<0x46205c8>)> t12, TargetConstant:i32<0>, t0

Height 5: SU(7): t13: i32 = MOVi32ri TargetConstant:i32<0>

Height 1: SU(9): t5: ch = CopyToReg t0, Register:i32 %vreg11, t2

Depth of SU(9): 0 != SU(1): 7
Depth of SU(1): 7 != SU(7): 0

*** Scheduling [6]: SU(1): t15: f32,ch = LDRf32<Mem:Volatile LD4[%add.ptr10](tbaa=<0x46205c8>)> t12, TargetConstant:i32<0>, t0

FPR64_with_isub_lo_in_FPR32: 2 / 26

Examining Available:
Height 5: SU(7): t13: i32 = MOVi32ri TargetConstant:i32<0>

Height 1: SU(9): t5: ch = CopyToReg t0, Register:i32 %vreg11, t2

Height 8: SU(2): t12: i32,i32 = ADDrr_r32 t7, t11


*** Scheduling [7]: SU(7): t13: i32 = MOVi32ri TargetConstant:i32<0>

FPR64_with_isub_lo_in_FPR32: 1 / 26

Examining Available:
Height 1: SU(9): t5: ch = CopyToReg t0, Register:i32 %vreg11, t2

Height 8: SU(2): t12: i32,i32 = ADDrr_r32 t7, t11


*** Scheduling [8]: SU(9): t5: ch = CopyToReg t0, Register:i32 %vreg11, t2

FPR64_with_isub_lo_in_FPR32: 2 / 26

Examining Available:
Height 8: SU(10): t2: i32,ch = CopyFromReg t0, Register:i32 %vreg2

Height 8: SU(2): t12: i32,i32 = ADDrr_r32 t7, t11


*** Scheduling [9]: SU(10): t2: i32,ch = CopyFromReg t0, Register:i32 %vreg2

FPR64_with_isub_lo_in_FPR32: 1 / 26

Examining Available:
Height 8: SU(2): t12: i32,i32 = ADDrr_r32 t7, t11


*** Scheduling [10]: SU(2): t12: i32,i32 = ADDrr_r32 t7, t11

FPR64_with_isub_lo_in_FPR32: 2 / 26

Examining Available:
Height 10: SU(5): t7: i32,ch = CopyFromReg t0, Register:i32 %vreg5

Height 15: SU(3): t11: i32,i32 = LSL32ri t9, TargetConstant:i32<2>


*** Scheduling [11]: SU(5): t7: i32,ch = CopyFromReg t0, Register:i32 %vreg5

FPR64_with_isub_lo_in_FPR32: 1 / 26

Examining Available:
Height 15: SU(3): t11: i32,i32 = LSL32ri t9, TargetConstant:i32<2>


*** Scheduling [15]: SU(3): t11: i32,i32 = LSL32ri t9, TargetConstant:i32<2>

FPR64_with_isub_lo_in_FPR32: 1 / 26

Examining Available:
Height 15: SU(4): t9: i32,ch = CopyFromReg t0, Register:i32 %vreg10


*** Scheduling [16]: SU(4): t9: i32,ch = CopyFromReg t0, Register:i32 %vreg10

*** Final schedule ***
SU(4): t9: i32,ch = CopyFromReg t0, Register:i32 %vreg10

SU(3): t11: i32,i32 = LSL32ri t9, TargetConstant:i32<2>

SU(5): t7: i32,ch = CopyFromReg t0, Register:i32 %vreg5

SU(2): t12: i32,i32 = ADDrr_r32 t7, t11

SU(10): t2: i32,ch = CopyFromReg t0, Register:i32 %vreg2

SU(9): t5: ch = CopyToReg t0, Register:i32 %vreg11, t2

SU(7): t13: i32 = MOVi32ri TargetConstant:i32<0>

SU(1): t15: f32,ch = LDRf32<Mem:Volatile LD4[%add.ptr10](tbaa=<0x46205c8>)> t12, TargetConstant:i32<0>, t0

SU(6): t19: ch = CopyToReg t0, Register:i32 %vreg43, t13

SU(8): t17: ch = CopyToReg t0, Register:f32 %vreg12, t15

SU(0): t20: ch = TokenFactor t5, t17, t19, t15:1


Total amount of phi nodes to update: 3
Node 0 : (0x46b4b08, 2147483659)
Node 1 : (0x46b4b68, 2147483657)
Node 2 : (0x46b4bc8, 2147483691)
Initial selection DAG: BB#6 'matmac:for.body13'
SelectionDAG has 58 nodes:
  t0: ch = EntryToken
  t2: i32,ch = CopyFromReg t0, Register:i32 %vreg13
  t4: i32,ch = CopyFromReg t0, Register:i32 %vreg14
  t7: i32 = Constant<0>
    t6: i32 = add t4, Constant:i32<-8>
  t9: f32,ch = load<Volatile LD4[%scevgep8](tbaa=<0x46205c8>)> t0, t6, undef:i32
    t11: i32 = add t4, Constant:i32<-4>
  t12: f32,ch = load<Volatile LD4[%scevgep9](tbaa=<0x46205c8>)> t9:1, t11, undef:i32
  t13: f32,ch = load<Volatile LD4[%lsr.iv5](tbaa=<0x46205c8>)> t12:1, t4, undef:i32
    t15: i32 = add t4, Constant:i32<4>
  t16: f32,ch = load<Volatile LD4[%scevgep7](tbaa=<0x46205c8>)> t13:1, t15, undef:i32
  t18: f32,ch = CopyFromReg t0, Register:f32 %vreg12
  t20: i32 = add t2, Constant:i32<-8>
  t21: f32,ch = load<LD4[%scevgep15](tbaa=<0x46205c8>)> t16:1, t20, undef:i32
  t25: i32 = add t2, Constant:i32<-4>
        t19: f32 = fmul t18, t9
      t22: f32 = fadd t19, t21
    t23: ch = store<ST4[%scevgep15](tbaa=<0x46205c8>)> t21:1, t22, t20, undef:i32
  t26: f32,ch = load<LD4[%scevgep17](tbaa=<0x46205c8>)> t23, t25, undef:i32
        t24: f32 = fmul t18, t12
      t27: f32 = fadd t24, t26
    t28: ch = store<ST4[%scevgep17](tbaa=<0x46205c8>)> t26:1, t27, t25, undef:i32
  t30: f32,ch = load<LD4[%lsr.iv1214](tbaa=<0x46205c8>)> t28, t2, undef:i32
  t34: i32 = add t2, Constant:i32<4>
        t29: f32 = fmul t18, t13
      t31: f32 = fadd t29, t30
    t32: ch = store<ST4[%lsr.iv1214](tbaa=<0x46205c8>)> t30:1, t31, t2, undef:i32
  t35: f32,ch = load<LD4[%scevgep16](tbaa=<0x46205c8>)> t32, t34, undef:i32
    t39: i32,ch = CopyFromReg t0, Register:i32 %vreg15
  t40: i32 = add t39, Constant:i32<4>
        t42: ch = CopyToReg t0, Register:i32 %vreg16, t40
          t44: i32 = add t4, Constant:i32<16>
        t46: ch = CopyToReg t0, Register:i32 %vreg17, t44
          t47: i32 = add t2, Constant:i32<16>
        t49: ch = CopyToReg t0, Register:i32 %vreg18, t47
            t33: f32 = fmul t18, t16
          t36: f32 = fadd t33, t35
        t37: ch = store<ST4[%scevgep16](tbaa=<0x46205c8>)> t35:1, t36, t34, undef:i32
      t54: ch = TokenFactor t42, t46, t49, t37
      t52: i1 = setcc t40, Constant:i32<8>, setlt:ch
    t55: ch = brcond t54, t52, BasicBlock:ch<for.body13 0x46b4a58>
  t57: ch = br t55, BasicBlock:ch<for.end60 0x46b4c28>



Combining: t57: ch = br t55, BasicBlock:ch<for.end60 0x46b4c28>

Combining: t56: ch = BasicBlock<for.end60 0x46b4c28>

Combining: t55: ch = brcond t54, t52, BasicBlock:ch<for.body13 0x46b4a58>
 ... into: t58: ch = br_cc t54, setlt:ch, t40, Constant:i32<8>, BasicBlock:ch<for.body13 0x46b4a58>

Combining: t57: ch = br t58, BasicBlock:ch<for.end60 0x46b4c28>

Combining: t58: ch = br_cc t54, setlt:ch, t40, Constant:i32<8>, BasicBlock:ch<for.body13 0x46b4a58>

Combining: t54: ch = TokenFactor t42, t46, t49, t37

Combining: t53: ch = BasicBlock<for.body13 0x46b4a58>

Combining: t51: ch = setlt

Combining: t50: i32 = Constant<8>

Combining: t49: ch = CopyToReg t0, Register:i32 %vreg18, t47

Combining: t48: i32 = Register %vreg18

Combining: t47: i32 = add t2, Constant:i32<16>

Combining: t46: ch = CopyToReg t0, Register:i32 %vreg17, t44

Combining: t45: i32 = Register %vreg17

Combining: t44: i32 = add t4, Constant:i32<16>

Combining: t43: i32 = Constant<16>

Combining: t42: ch = CopyToReg t0, Register:i32 %vreg16, t40

Combining: t41: i32 = Register %vreg16

Combining: t40: i32 = add t39, Constant:i32<4>

Combining: t39: i32,ch = CopyFromReg t0, Register:i32 %vreg15

Combining: t38: i32 = Register %vreg15

Combining: t37: ch = store<ST4[%scevgep16](tbaa=<0x46205c8>)> t35:1, t36, t34, undef:i32

Combining: t36: f32 = fadd t33, t35

Combining: t35: f32,ch = load<LD4[%scevgep16](tbaa=<0x46205c8>)> t32, t34, undef:i32

Combining: t34: i32 = add t2, Constant:i32<4>

Combining: t33: f32 = fmul t18, t16

Combining: t32: ch = store<ST4[%lsr.iv1214](tbaa=<0x46205c8>)> t30:1, t31, t2, undef:i32

Combining: t31: f32 = fadd t29, t30

Combining: t30: f32,ch = load<LD4[%lsr.iv1214](tbaa=<0x46205c8>)> t28, t2, undef:i32

Combining: t29: f32 = fmul t18, t13

Combining: t28: ch = store<ST4[%scevgep17](tbaa=<0x46205c8>)> t26:1, t27, t25, undef:i32

Combining: t27: f32 = fadd t24, t26

Combining: t26: f32,ch = load<LD4[%scevgep17](tbaa=<0x46205c8>)> t23, t25, undef:i32

Combining: t25: i32 = add t2, Constant:i32<-4>

Combining: t24: f32 = fmul t18, t12

Combining: t23: ch = store<ST4[%scevgep15](tbaa=<0x46205c8>)> t21:1, t22, t20, undef:i32

Combining: t22: f32 = fadd t19, t21

Combining: t21: f32,ch = load<LD4[%scevgep15](tbaa=<0x46205c8>)> t16:1, t20, undef:i32

Combining: t20: i32 = add t2, Constant:i32<-8>

Combining: t19: f32 = fmul t18, t9

Combining: t18: f32,ch = CopyFromReg t0, Register:f32 %vreg12

Combining: t17: f32 = Register %vreg12

Combining: t16: f32,ch = load<Volatile LD4[%scevgep7](tbaa=<0x46205c8>)> t13:1, t15, undef:i32

Combining: t15: i32 = add t4, Constant:i32<4>

Combining: t14: i32 = Constant<4>

Combining: t13: f32,ch = load<Volatile LD4[%lsr.iv5](tbaa=<0x46205c8>)> t12:1, t4, undef:i32

Combining: t12: f32,ch = load<Volatile LD4[%scevgep9](tbaa=<0x46205c8>)> t9:1, t11, undef:i32

Combining: t11: i32 = add t4, Constant:i32<-4>

Combining: t10: i32 = Constant<-4>

Combining: t9: f32,ch = load<Volatile LD4[%scevgep8](tbaa=<0x46205c8>)> t0, t6, undef:i32

Combining: t8: i32 = undef

Combining: t6: i32 = add t4, Constant:i32<-8>

Combining: t5: i32 = Constant<-8>

Combining: t4: i32,ch = CopyFromReg t0, Register:i32 %vreg14

Combining: t3: i32 = Register %vreg14

Combining: t2: i32,ch = CopyFromReg t0, Register:i32 %vreg13

Combining: t1: i32 = Register %vreg13

Combining: t0: ch = EntryToken
Optimized lowered selection DAG: BB#6 'matmac:for.body13'
SelectionDAG has 56 nodes:
  t0: ch = EntryToken
  t2: i32,ch = CopyFromReg t0, Register:i32 %vreg13
  t4: i32,ch = CopyFromReg t0, Register:i32 %vreg14
    t6: i32 = add t4, Constant:i32<-8>
  t9: f32,ch = load<Volatile LD4[%scevgep8](tbaa=<0x46205c8>)> t0, t6, undef:i32
    t11: i32 = add t4, Constant:i32<-4>
  t12: f32,ch = load<Volatile LD4[%scevgep9](tbaa=<0x46205c8>)> t9:1, t11, undef:i32
  t13: f32,ch = load<Volatile LD4[%lsr.iv5](tbaa=<0x46205c8>)> t12:1, t4, undef:i32
    t15: i32 = add t4, Constant:i32<4>
  t16: f32,ch = load<Volatile LD4[%scevgep7](tbaa=<0x46205c8>)> t13:1, t15, undef:i32
  t18: f32,ch = CopyFromReg t0, Register:f32 %vreg12
  t20: i32 = add t2, Constant:i32<-8>
  t21: f32,ch = load<LD4[%scevgep15](tbaa=<0x46205c8>)> t16:1, t20, undef:i32
  t25: i32 = add t2, Constant:i32<-4>
        t19: f32 = fmul t18, t9
      t22: f32 = fadd t19, t21
    t23: ch = store<ST4[%scevgep15](tbaa=<0x46205c8>)> t21:1, t22, t20, undef:i32
  t26: f32,ch = load<LD4[%scevgep17](tbaa=<0x46205c8>)> t23, t25, undef:i32
        t24: f32 = fmul t18, t12
      t27: f32 = fadd t24, t26
    t28: ch = store<ST4[%scevgep17](tbaa=<0x46205c8>)> t26:1, t27, t25, undef:i32
  t30: f32,ch = load<LD4[%lsr.iv1214](tbaa=<0x46205c8>)> t28, t2, undef:i32
  t34: i32 = add t2, Constant:i32<4>
        t29: f32 = fmul t18, t13
      t31: f32 = fadd t29, t30
    t32: ch = store<ST4[%lsr.iv1214](tbaa=<0x46205c8>)> t30:1, t31, t2, undef:i32
  t35: f32,ch = load<LD4[%scevgep16](tbaa=<0x46205c8>)> t32, t34, undef:i32
    t39: i32,ch = CopyFromReg t0, Register:i32 %vreg15
  t40: i32 = add t39, Constant:i32<4>
        t42: ch = CopyToReg t0, Register:i32 %vreg16, t40
          t44: i32 = add t4, Constant:i32<16>
        t46: ch = CopyToReg t0, Register:i32 %vreg17, t44
          t47: i32 = add t2, Constant:i32<16>
        t49: ch = CopyToReg t0, Register:i32 %vreg18, t47
            t33: f32 = fmul t18, t16
          t36: f32 = fadd t33, t35
        t37: ch = store<ST4[%scevgep16](tbaa=<0x46205c8>)> t35:1, t36, t34, undef:i32
      t54: ch = TokenFactor t42, t46, t49, t37
    t58: ch = br_cc t54, setlt:ch, t40, Constant:i32<8>, BasicBlock:ch<for.body13 0x46b4a58>
  t57: ch = br t58, BasicBlock:ch<for.end60 0x46b4c28>


Legally typed node: t56: ch = BasicBlock<for.end60 0x46b4c28>

Legally typed node: t53: ch = BasicBlock<for.body13 0x46b4a58>

Legally typed node: t51: ch = setlt

Legally typed node: t50: i32 = Constant<8>

Legally typed node: t48: i32 = Register %vreg18

Legally typed node: t45: i32 = Register %vreg17

Legally typed node: t43: i32 = Constant<16>

Legally typed node: t41: i32 = Register %vreg16

Legally typed node: t38: i32 = Register %vreg15

Legally typed node: t17: f32 = Register %vreg12

Legally typed node: t14: i32 = Constant<4>

Legally typed node: t10: i32 = Constant<-4>

Legally typed node: t8: i32 = undef

Legally typed node: t5: i32 = Constant<-8>

Legally typed node: t3: i32 = Register %vreg14

Legally typed node: t1: i32 = Register %vreg13

Legally typed node: t0: ch = EntryToken

Legally typed node: t2: i32,ch = CopyFromReg t0, Register:i32 %vreg13

Legally typed node: t20: i32 = add t2, Constant:i32<-8>

Legally typed node: t25: i32 = add t2, Constant:i32<-4>

Legally typed node: t34: i32 = add t2, Constant:i32<4>

Legally typed node: t47: i32 = add t2, Constant:i32<16>

Legally typed node: t49: ch = CopyToReg t0, Register:i32 %vreg18, t47

Legally typed node: t4: i32,ch = CopyFromReg t0, Register:i32 %vreg14

Legally typed node: t6: i32 = add t4, Constant:i32<-8>

Legally typed node: t9: f32,ch = load<Volatile LD4[%scevgep8](tbaa=<0x46205c8>)> t0, t6, undef:i32

Legally typed node: t11: i32 = add t4, Constant:i32<-4>

Legally typed node: t12: f32,ch = load<Volatile LD4[%scevgep9](tbaa=<0x46205c8>)> t9:1, t11, undef:i32

Legally typed node: t13: f32,ch = load<Volatile LD4[%lsr.iv5](tbaa=<0x46205c8>)> t12:1, t4, undef:i32

Legally typed node: t15: i32 = add t4, Constant:i32<4>

Legally typed node: t16: f32,ch = load<Volatile LD4[%scevgep7](tbaa=<0x46205c8>)> t13:1, t15, undef:i32

Legally typed node: t21: f32,ch = load<LD4[%scevgep15](tbaa=<0x46205c8>)> t16:1, t20, undef:i32

Legally typed node: t44: i32 = add t4, Constant:i32<16>

Legally typed node: t46: ch = CopyToReg t0, Register:i32 %vreg17, t44

Legally typed node: t18: f32,ch = CopyFromReg t0, Register:f32 %vreg12

Legally typed node: t19: f32 = fmul t18, t9

Legally typed node: t22: f32 = fadd t19, t21

Legally typed node: t23: ch = store<ST4[%scevgep15](tbaa=<0x46205c8>)> t21:1, t22, t20, undef:i32

Legally typed node: t26: f32,ch = load<LD4[%scevgep17](tbaa=<0x46205c8>)> t23, t25, undef:i32

Legally typed node: t24: f32 = fmul t18, t12

Legally typed node: t27: f32 = fadd t24, t26

Legally typed node: t28: ch = store<ST4[%scevgep17](tbaa=<0x46205c8>)> t26:1, t27, t25, undef:i32

Legally typed node: t30: f32,ch = load<LD4[%lsr.iv1214](tbaa=<0x46205c8>)> t28, t2, undef:i32

Legally typed node: t29: f32 = fmul t18, t13

Legally typed node: t31: f32 = fadd t29, t30

Legally typed node: t32: ch = store<ST4[%lsr.iv1214](tbaa=<0x46205c8>)> t30:1, t31, t2, undef:i32

Legally typed node: t35: f32,ch = load<LD4[%scevgep16](tbaa=<0x46205c8>)> t32, t34, undef:i32

Legally typed node: t33: f32 = fmul t18, t16

Legally typed node: t36: f32 = fadd t33, t35

Legally typed node: t37: ch = store<ST4[%scevgep16](tbaa=<0x46205c8>)> t35:1, t36, t34, undef:i32

Legally typed node: t39: i32,ch = CopyFromReg t0, Register:i32 %vreg15

Legally typed node: t40: i32 = add t39, Constant:i32<4>

Legally typed node: t42: ch = CopyToReg t0, Register:i32 %vreg16, t40

Legally typed node: t54: ch = TokenFactor t42, t46, t49, t37

Legally typed node: t58: ch = br_cc t54, setlt:ch, t40, Constant:i32<8>, BasicBlock:ch<for.body13 0x46b4a58>

Legally typed node: t57: ch = br t58, BasicBlock:ch<for.end60 0x46b4c28>

Legally typed node: t65535: ch = handlenode t57

Type-legalized selection DAG: BB#6 'matmac:for.body13'
SelectionDAG has 56 nodes:
  t0: ch = EntryToken
  t2: i32,ch = CopyFromReg t0, Register:i32 %vreg13
  t4: i32,ch = CopyFromReg t0, Register:i32 %vreg14
    t6: i32 = add t4, Constant:i32<-8>
  t9: f32,ch = load<Volatile LD4[%scevgep8](tbaa=<0x46205c8>)> t0, t6, undef:i32
    t11: i32 = add t4, Constant:i32<-4>
  t12: f32,ch = load<Volatile LD4[%scevgep9](tbaa=<0x46205c8>)> t9:1, t11, undef:i32
  t13: f32,ch = load<Volatile LD4[%lsr.iv5](tbaa=<0x46205c8>)> t12:1, t4, undef:i32
    t15: i32 = add t4, Constant:i32<4>
  t16: f32,ch = load<Volatile LD4[%scevgep7](tbaa=<0x46205c8>)> t13:1, t15, undef:i32
  t18: f32,ch = CopyFromReg t0, Register:f32 %vreg12
  t20: i32 = add t2, Constant:i32<-8>
  t21: f32,ch = load<LD4[%scevgep15](tbaa=<0x46205c8>)> t16:1, t20, undef:i32
  t25: i32 = add t2, Constant:i32<-4>
        t19: f32 = fmul t18, t9
      t22: f32 = fadd t19, t21
    t23: ch = store<ST4[%scevgep15](tbaa=<0x46205c8>)> t21:1, t22, t20, undef:i32
  t26: f32,ch = load<LD4[%scevgep17](tbaa=<0x46205c8>)> t23, t25, undef:i32
        t24: f32 = fmul t18, t12
      t27: f32 = fadd t24, t26
    t28: ch = store<ST4[%scevgep17](tbaa=<0x46205c8>)> t26:1, t27, t25, undef:i32
  t30: f32,ch = load<LD4[%lsr.iv1214](tbaa=<0x46205c8>)> t28, t2, undef:i32
  t34: i32 = add t2, Constant:i32<4>
        t29: f32 = fmul t18, t13
      t31: f32 = fadd t29, t30
    t32: ch = store<ST4[%lsr.iv1214](tbaa=<0x46205c8>)> t30:1, t31, t2, undef:i32
  t35: f32,ch = load<LD4[%scevgep16](tbaa=<0x46205c8>)> t32, t34, undef:i32
    t39: i32,ch = CopyFromReg t0, Register:i32 %vreg15
  t40: i32 = add t39, Constant:i32<4>
        t42: ch = CopyToReg t0, Register:i32 %vreg16, t40
          t44: i32 = add t4, Constant:i32<16>
        t46: ch = CopyToReg t0, Register:i32 %vreg17, t44
          t47: i32 = add t2, Constant:i32<16>
        t49: ch = CopyToReg t0, Register:i32 %vreg18, t47
            t33: f32 = fmul t18, t16
          t36: f32 = fadd t33, t35
        t37: ch = store<ST4[%scevgep16](tbaa=<0x46205c8>)> t35:1, t36, t34, undef:i32
      t54: ch = TokenFactor t42, t46, t49, t37
    t58: ch = br_cc t54, setlt:ch, t40, Constant:i32<8>, BasicBlock:ch<for.body13 0x46b4a58>
  t57: ch = br t58, BasicBlock:ch<for.end60 0x46b4c28>



Legalizing: t57: ch = br t58, BasicBlock:ch<for.end60 0x46b4c28>

Legalizing: t58: ch = br_cc t54, setlt:ch, t40, Constant:i32<8>, BasicBlock:ch<for.body13 0x46b4a58>
 ... replacing: t58: ch = br_cc t54, setlt:ch, t40, Constant:i32<8>, BasicBlock:ch<for.body13 0x46b4a58>
     with:      t60: ch,glue = EpiphanyISD::BRCC t54, BasicBlock:ch<for.body13 0x46b4a58>, Constant:i32<8>, t59:1

Legalizing: t54: ch = TokenFactor t42, t46, t49, t37

Legalizing: t37: ch = store<ST4[%scevgep16](tbaa=<0x46205c8>)> t35:1, t36, t34, undef:i32

Legalizing: t36: f32 = fadd t33, t35

Legalizing: t35: f32,ch = load<LD4[%scevgep16](tbaa=<0x46205c8>)> t32, t34, undef:i32

Legalizing: t32: ch = store<ST4[%lsr.iv1214](tbaa=<0x46205c8>)> t30:1, t31, t2, undef:i32

Legalizing: t31: f32 = fadd t29, t30

Legalizing: t30: f32,ch = load<LD4[%lsr.iv1214](tbaa=<0x46205c8>)> t28, t2, undef:i32

Legalizing: t28: ch = store<ST4[%scevgep17](tbaa=<0x46205c8>)> t26:1, t27, t25, undef:i32

Legalizing: t27: f32 = fadd t24, t26

Legalizing: t26: f32,ch = load<LD4[%scevgep17](tbaa=<0x46205c8>)> t23, t25, undef:i32

Legalizing: t23: ch = store<ST4[%scevgep15](tbaa=<0x46205c8>)> t21:1, t22, t20, undef:i32

Legalizing: t22: f32 = fadd t19, t21

Legalizing: t21: f32,ch = load<LD4[%scevgep15](tbaa=<0x46205c8>)> t16:1, t20, undef:i32

Legalizing: t33: f32 = fmul t18, t16

Legalizing: t16: f32,ch = load<Volatile LD4[%scevgep7](tbaa=<0x46205c8>)> t13:1, t15, undef:i32

Legalizing: t29: f32 = fmul t18, t13

Legalizing: t13: f32,ch = load<Volatile LD4[%lsr.iv5](tbaa=<0x46205c8>)> t12:1, t4, undef:i32

Legalizing: t24: f32 = fmul t18, t12

Legalizing: t12: f32,ch = load<Volatile LD4[%scevgep9](tbaa=<0x46205c8>)> t9:1, t11, undef:i32

Legalizing: t19: f32 = fmul t18, t9

Legalizing: t42: ch = CopyToReg t0, Register:i32 %vreg16, t40

Legalizing: t9: f32,ch = load<Volatile LD4[%scevgep8](tbaa=<0x46205c8>)> t0, t6, undef:i32

Legalizing: t46: ch = CopyToReg t0, Register:i32 %vreg17, t44

Legalizing: t49: ch = CopyToReg t0, Register:i32 %vreg18, t47

Legalizing: t40: i32 = add t39, Constant:i32<4>

Legalizing: t6: i32 = add t4, Constant:i32<-8>

Legalizing: t11: i32 = add t4, Constant:i32<-4>

Legalizing: t15: i32 = add t4, Constant:i32<4>

Legalizing: t44: i32 = add t4, Constant:i32<16>

Legalizing: t20: i32 = add t2, Constant:i32<-8>

Legalizing: t25: i32 = add t2, Constant:i32<-4>

Legalizing: t34: i32 = add t2, Constant:i32<4>

Legalizing: t47: i32 = add t2, Constant:i32<16>

Legalizing: t39: i32,ch = CopyFromReg t0, Register:i32 %vreg15

Legalizing: t18: f32,ch = CopyFromReg t0, Register:f32 %vreg12

Legalizing: t4: i32,ch = CopyFromReg t0, Register:i32 %vreg14

Legalizing: t2: i32,ch = CopyFromReg t0, Register:i32 %vreg13

Legalizing: t56: ch = BasicBlock<for.end60 0x46b4c28>

Legalizing: t53: ch = BasicBlock<for.body13 0x46b4a58>

Legalizing: t50: i32 = Constant<8>

Legalizing: t48: i32 = Register %vreg18

Legalizing: t45: i32 = Register %vreg17

Legalizing: t43: i32 = Constant<16>

Legalizing: t41: i32 = Register %vreg16

Legalizing: t38: i32 = Register %vreg15

Legalizing: t17: f32 = Register %vreg12

Legalizing: t14: i32 = Constant<4>

Legalizing: t10: i32 = Constant<-4>

Legalizing: t8: i32 = undef

Legalizing: t5: i32 = Constant<-8>

Legalizing: t3: i32 = Register %vreg14

Legalizing: t1: i32 = Register %vreg13

Legalizing: t0: ch = EntryToken

Legalizing: t60: ch,glue = EpiphanyISD::BRCC t54, BasicBlock:ch<for.body13 0x46b4a58>, Constant:i32<8>, t59:1

Legalizing: t59: i32,i32 = EpiphanyISD::CMP t40, Constant:i32<8>
Legalized selection DAG: BB#6 'matmac:for.body13'
SelectionDAG has 56 nodes:
  t0: ch = EntryToken
  t2: i32,ch = CopyFromReg t0, Register:i32 %vreg13
  t4: i32,ch = CopyFromReg t0, Register:i32 %vreg14
  t18: f32,ch = CopyFromReg t0, Register:f32 %vreg12
  t34: i32 = add t2, Constant:i32<4>
  t25: i32 = add t2, Constant:i32<-4>
  t20: i32 = add t2, Constant:i32<-8>
    t39: i32,ch = CopyFromReg t0, Register:i32 %vreg15
  t40: i32 = add t39, Constant:i32<4>
    t6: i32 = add t4, Constant:i32<-8>
  t9: f32,ch = load<Volatile LD4[%scevgep8](tbaa=<0x46205c8>)> t0, t6, undef:i32
    t11: i32 = add t4, Constant:i32<-4>
  t12: f32,ch = load<Volatile LD4[%scevgep9](tbaa=<0x46205c8>)> t9:1, t11, undef:i32
  t13: f32,ch = load<Volatile LD4[%lsr.iv5](tbaa=<0x46205c8>)> t12:1, t4, undef:i32
    t15: i32 = add t4, Constant:i32<4>
  t16: f32,ch = load<Volatile LD4[%scevgep7](tbaa=<0x46205c8>)> t13:1, t15, undef:i32
  t21: f32,ch = load<LD4[%scevgep15](tbaa=<0x46205c8>)> t16:1, t20, undef:i32
        t19: f32 = fmul t18, t9
      t22: f32 = fadd t19, t21
    t23: ch = store<ST4[%scevgep15](tbaa=<0x46205c8>)> t21:1, t22, t20, undef:i32
  t26: f32,ch = load<LD4[%scevgep17](tbaa=<0x46205c8>)> t23, t25, undef:i32
        t24: f32 = fmul t18, t12
      t27: f32 = fadd t24, t26
    t28: ch = store<ST4[%scevgep17](tbaa=<0x46205c8>)> t26:1, t27, t25, undef:i32
  t30: f32,ch = load<LD4[%lsr.iv1214](tbaa=<0x46205c8>)> t28, t2, undef:i32
        t29: f32 = fmul t18, t13
      t31: f32 = fadd t29, t30
    t32: ch = store<ST4[%lsr.iv1214](tbaa=<0x46205c8>)> t30:1, t31, t2, undef:i32
  t35: f32,ch = load<LD4[%scevgep16](tbaa=<0x46205c8>)> t32, t34, undef:i32
        t42: ch = CopyToReg t0, Register:i32 %vreg16, t40
          t44: i32 = add t4, Constant:i32<16>
        t46: ch = CopyToReg t0, Register:i32 %vreg17, t44
          t47: i32 = add t2, Constant:i32<16>
        t49: ch = CopyToReg t0, Register:i32 %vreg18, t47
            t33: f32 = fmul t18, t16
          t36: f32 = fadd t33, t35
        t37: ch = store<ST4[%scevgep16](tbaa=<0x46205c8>)> t35:1, t36, t34, undef:i32
      t54: ch = TokenFactor t42, t46, t49, t37
      t59: i32,i32 = EpiphanyISD::CMP t40, Constant:i32<8>
    t60: ch,glue = EpiphanyISD::BRCC t54, BasicBlock:ch<for.body13 0x46b4a58>, Constant:i32<8>, t59:1
  t57: ch = br t60, BasicBlock:ch<for.end60 0x46b4c28>



Legalizing: t60: ch,glue = EpiphanyISD::BRCC t54, BasicBlock:ch<for.body13 0x46b4a58>, Constant:i32<8>, t59:1

Combining: t60: ch,glue = EpiphanyISD::BRCC t54, BasicBlock:ch<for.body13 0x46b4a58>, Constant:i32<8>, t59:1

Legalizing: t59: i32,i32 = EpiphanyISD::CMP t40, Constant:i32<8>

Combining: t59: i32,i32 = EpiphanyISD::CMP t40, Constant:i32<8>

Legalizing: t57: ch = br t60, BasicBlock:ch<for.end60 0x46b4c28>

Combining: t57: ch = br t60, BasicBlock:ch<for.end60 0x46b4c28>

Legalizing: t54: ch = TokenFactor t42, t46, t49, t37

Combining: t54: ch = TokenFactor t42, t46, t49, t37

Legalizing: t37: ch = store<ST4[%scevgep16](tbaa=<0x46205c8>)> t35:1, t36, t34, undef:i32

Combining: t37: ch = store<ST4[%scevgep16](tbaa=<0x46205c8>)> t35:1, t36, t34, undef:i32

Legalizing: t36: f32 = fadd t33, t35

Combining: t36: f32 = fadd t33, t35

Legalizing: t35: f32,ch = load<LD4[%scevgep16](tbaa=<0x46205c8>)> t32, t34, undef:i32

Combining: t35: f32,ch = load<LD4[%scevgep16](tbaa=<0x46205c8>)> t32, t34, undef:i32

Legalizing: t32: ch = store<ST4[%lsr.iv1214](tbaa=<0x46205c8>)> t30:1, t31, t2, undef:i32

Combining: t32: ch = store<ST4[%lsr.iv1214](tbaa=<0x46205c8>)> t30:1, t31, t2, undef:i32

Legalizing: t31: f32 = fadd t29, t30

Combining: t31: f32 = fadd t29, t30

Legalizing: t30: f32,ch = load<LD4[%lsr.iv1214](tbaa=<0x46205c8>)> t28, t2, undef:i32

Combining: t30: f32,ch = load<LD4[%lsr.iv1214](tbaa=<0x46205c8>)> t28, t2, undef:i32

Legalizing: t28: ch = store<ST4[%scevgep17](tbaa=<0x46205c8>)> t26:1, t27, t25, undef:i32

Combining: t28: ch = store<ST4[%scevgep17](tbaa=<0x46205c8>)> t26:1, t27, t25, undef:i32

Legalizing: t27: f32 = fadd t24, t26

Combining: t27: f32 = fadd t24, t26

Legalizing: t26: f32,ch = load<LD4[%scevgep17](tbaa=<0x46205c8>)> t23, t25, undef:i32

Combining: t26: f32,ch = load<LD4[%scevgep17](tbaa=<0x46205c8>)> t23, t25, undef:i32

Legalizing: t23: ch = store<ST4[%scevgep15](tbaa=<0x46205c8>)> t21:1, t22, t20, undef:i32

Combining: t23: ch = store<ST4[%scevgep15](tbaa=<0x46205c8>)> t21:1, t22, t20, undef:i32

Legalizing: t22: f32 = fadd t19, t21

Combining: t22: f32 = fadd t19, t21

Legalizing: t21: f32,ch = load<LD4[%scevgep15](tbaa=<0x46205c8>)> t16:1, t20, undef:i32

Combining: t21: f32,ch = load<LD4[%scevgep15](tbaa=<0x46205c8>)> t16:1, t20, undef:i32

Legalizing: t33: f32 = fmul t18, t16

Combining: t33: f32 = fmul t18, t16

Legalizing: t16: f32,ch = load<Volatile LD4[%scevgep7](tbaa=<0x46205c8>)> t13:1, t15, undef:i32

Combining: t16: f32,ch = load<Volatile LD4[%scevgep7](tbaa=<0x46205c8>)> t13:1, t15, undef:i32

Legalizing: t29: f32 = fmul t18, t13

Combining: t29: f32 = fmul t18, t13

Legalizing: t13: f32,ch = load<Volatile LD4[%lsr.iv5](tbaa=<0x46205c8>)> t12:1, t4, undef:i32

Combining: t13: f32,ch = load<Volatile LD4[%lsr.iv5](tbaa=<0x46205c8>)> t12:1, t4, undef:i32

Legalizing: t24: f32 = fmul t18, t12

Combining: t24: f32 = fmul t18, t12

Legalizing: t12: f32,ch = load<Volatile LD4[%scevgep9](tbaa=<0x46205c8>)> t9:1, t11, undef:i32

Combining: t12: f32,ch = load<Volatile LD4[%scevgep9](tbaa=<0x46205c8>)> t9:1, t11, undef:i32

Legalizing: t19: f32 = fmul t18, t9

Combining: t19: f32 = fmul t18, t9

Legalizing: t42: ch = CopyToReg t0, Register:i32 %vreg16, t40

Combining: t42: ch = CopyToReg t0, Register:i32 %vreg16, t40

Legalizing: t9: f32,ch = load<Volatile LD4[%scevgep8](tbaa=<0x46205c8>)> t0, t6, undef:i32

Combining: t9: f32,ch = load<Volatile LD4[%scevgep8](tbaa=<0x46205c8>)> t0, t6, undef:i32

Legalizing: t46: ch = CopyToReg t0, Register:i32 %vreg17, t44

Combining: t46: ch = CopyToReg t0, Register:i32 %vreg17, t44

Legalizing: t49: ch = CopyToReg t0, Register:i32 %vreg18, t47

Combining: t49: ch = CopyToReg t0, Register:i32 %vreg18, t47

Legalizing: t40: i32 = add t39, Constant:i32<4>

Combining: t40: i32 = add t39, Constant:i32<4>

Legalizing: t6: i32 = add t4, Constant:i32<-8>

Combining: t6: i32 = add t4, Constant:i32<-8>

Legalizing: t11: i32 = add t4, Constant:i32<-4>

Combining: t11: i32 = add t4, Constant:i32<-4>

Legalizing: t15: i32 = add t4, Constant:i32<4>

Combining: t15: i32 = add t4, Constant:i32<4>

Legalizing: t44: i32 = add t4, Constant:i32<16>

Combining: t44: i32 = add t4, Constant:i32<16>

Legalizing: t20: i32 = add t2, Constant:i32<-8>

Combining: t20: i32 = add t2, Constant:i32<-8>

Legalizing: t25: i32 = add t2, Constant:i32<-4>

Combining: t25: i32 = add t2, Constant:i32<-4>

Legalizing: t34: i32 = add t2, Constant:i32<4>

Combining: t34: i32 = add t2, Constant:i32<4>

Legalizing: t47: i32 = add t2, Constant:i32<16>

Combining: t47: i32 = add t2, Constant:i32<16>

Legalizing: t39: i32,ch = CopyFromReg t0, Register:i32 %vreg15

Combining: t39: i32,ch = CopyFromReg t0, Register:i32 %vreg15

Legalizing: t18: f32,ch = CopyFromReg t0, Register:f32 %vreg12

Combining: t18: f32,ch = CopyFromReg t0, Register:f32 %vreg12

Legalizing: t4: i32,ch = CopyFromReg t0, Register:i32 %vreg14

Combining: t4: i32,ch = CopyFromReg t0, Register:i32 %vreg14

Legalizing: t2: i32,ch = CopyFromReg t0, Register:i32 %vreg13

Combining: t2: i32,ch = CopyFromReg t0, Register:i32 %vreg13

Legalizing: t56: ch = BasicBlock<for.end60 0x46b4c28>

Combining: t56: ch = BasicBlock<for.end60 0x46b4c28>

Legalizing: t53: ch = BasicBlock<for.body13 0x46b4a58>

Combining: t53: ch = BasicBlock<for.body13 0x46b4a58>

Legalizing: t50: i32 = Constant<8>

Combining: t50: i32 = Constant<8>

Legalizing: t48: i32 = Register %vreg18

Combining: t48: i32 = Register %vreg18

Legalizing: t45: i32 = Register %vreg17

Combining: t45: i32 = Register %vreg17

Legalizing: t43: i32 = Constant<16>

Combining: t43: i32 = Constant<16>

Legalizing: t41: i32 = Register %vreg16

Combining: t41: i32 = Register %vreg16

Legalizing: t38: i32 = Register %vreg15

Combining: t38: i32 = Register %vreg15

Legalizing: t17: f32 = Register %vreg12

Combining: t17: f32 = Register %vreg12

Legalizing: t14: i32 = Constant<4>

Combining: t14: i32 = Constant<4>

Legalizing: t10: i32 = Constant<-4>

Combining: t10: i32 = Constant<-4>

Legalizing: t8: i32 = undef

Combining: t8: i32 = undef

Legalizing: t5: i32 = Constant<-8>

Combining: t5: i32 = Constant<-8>

Legalizing: t3: i32 = Register %vreg14

Combining: t3: i32 = Register %vreg14

Legalizing: t1: i32 = Register %vreg13

Combining: t1: i32 = Register %vreg13

Legalizing: t0: ch = EntryToken

Combining: t0: ch = EntryToken
Optimized legalized selection DAG: BB#6 'matmac:for.body13'
SelectionDAG has 56 nodes:
  t0: ch = EntryToken
  t2: i32,ch = CopyFromReg t0, Register:i32 %vreg13
  t4: i32,ch = CopyFromReg t0, Register:i32 %vreg14
  t18: f32,ch = CopyFromReg t0, Register:f32 %vreg12
  t34: i32 = add t2, Constant:i32<4>
  t25: i32 = add t2, Constant:i32<-4>
  t20: i32 = add t2, Constant:i32<-8>
    t39: i32,ch = CopyFromReg t0, Register:i32 %vreg15
  t40: i32 = add t39, Constant:i32<4>
    t6: i32 = add t4, Constant:i32<-8>
  t9: f32,ch = load<Volatile LD4[%scevgep8](tbaa=<0x46205c8>)> t0, t6, undef:i32
    t11: i32 = add t4, Constant:i32<-4>
  t12: f32,ch = load<Volatile LD4[%scevgep9](tbaa=<0x46205c8>)> t9:1, t11, undef:i32
  t13: f32,ch = load<Volatile LD4[%lsr.iv5](tbaa=<0x46205c8>)> t12:1, t4, undef:i32
    t15: i32 = add t4, Constant:i32<4>
  t16: f32,ch = load<Volatile LD4[%scevgep7](tbaa=<0x46205c8>)> t13:1, t15, undef:i32
  t21: f32,ch = load<LD4[%scevgep15](tbaa=<0x46205c8>)> t16:1, t20, undef:i32
        t19: f32 = fmul t18, t9
      t22: f32 = fadd t19, t21
    t23: ch = store<ST4[%scevgep15](tbaa=<0x46205c8>)> t21:1, t22, t20, undef:i32
  t26: f32,ch = load<LD4[%scevgep17](tbaa=<0x46205c8>)> t23, t25, undef:i32
        t24: f32 = fmul t18, t12
      t27: f32 = fadd t24, t26
    t28: ch = store<ST4[%scevgep17](tbaa=<0x46205c8>)> t26:1, t27, t25, undef:i32
  t30: f32,ch = load<LD4[%lsr.iv1214](tbaa=<0x46205c8>)> t28, t2, undef:i32
        t29: f32 = fmul t18, t13
      t31: f32 = fadd t29, t30
    t32: ch = store<ST4[%lsr.iv1214](tbaa=<0x46205c8>)> t30:1, t31, t2, undef:i32
  t35: f32,ch = load<LD4[%scevgep16](tbaa=<0x46205c8>)> t32, t34, undef:i32
        t42: ch = CopyToReg t0, Register:i32 %vreg16, t40
          t44: i32 = add t4, Constant:i32<16>
        t46: ch = CopyToReg t0, Register:i32 %vreg17, t44
          t47: i32 = add t2, Constant:i32<16>
        t49: ch = CopyToReg t0, Register:i32 %vreg18, t47
            t33: f32 = fmul t18, t16
          t36: f32 = fadd t33, t35
        t37: ch = store<ST4[%scevgep16](tbaa=<0x46205c8>)> t35:1, t36, t34, undef:i32
      t54: ch = TokenFactor t42, t46, t49, t37
      t59: i32,i32 = EpiphanyISD::CMP t40, Constant:i32<8>
    t60: ch,glue = EpiphanyISD::BRCC t54, BasicBlock:ch<for.body13 0x46b4a58>, Constant:i32<8>, t59:1
  t57: ch = br t60, BasicBlock:ch<for.end60 0x46b4c28>


===== Instruction selection begins: BB#6 'for.body13'
Selecting: t57: ch = br t60, BasicBlock:ch<for.end60 0x46b4c28>

ISEL: Starting pattern match on root node: t57: ch = br t60, BasicBlock:ch<for.end60 0x46b4c28>

  Initial Opcode index to 4515
  Morphed node: t57: ch = BNONE32 BasicBlock:ch<for.end60 0x46b4c28>, t60

ISEL: Match complete!
Selecting: t60: ch,glue = EpiphanyISD::BRCC t54, BasicBlock:ch<for.body13 0x46b4a58>, Constant:i32<8>, t59:1

ISEL: Starting pattern match on root node: t60: ch,glue = EpiphanyISD::BRCC t54, BasicBlock:ch<for.body13 0x46b4a58>, Constant:i32<8>, t59:1

  Initial Opcode index to 2902
  Morphed node: t60: ch = BCC BasicBlock:ch<for.body13 0x46b4a58>, TargetConstant:i32<8>, t63, t63:1

ISEL: Match complete!
Selecting: t54: ch = TokenFactor t42, t46, t49, t37

Selecting: t37: ch = store<ST4[%scevgep16](tbaa=<0x46205c8>)> t35:1, t36, t34, undef:i32

ISEL: Starting pattern match on root node: t37: ch = store<ST4[%scevgep16](tbaa=<0x46205c8>)> t35:1, t36, t34, undef:i32

  Initial Opcode index to 842
  Skipped scope entry (due to false predicate) at index 848, continuing at 1255
  Morphed node: t37: ch = STRf32<Mem:ST4[%scevgep16](tbaa=<0x46205c8>)> t36, t2, TargetConstant:i32<4>, t35:1

ISEL: Match complete!
Selecting: t36: f32 = fadd t33, t35

ISEL: Starting pattern match on root node: t36: f32 = fadd t33, t35

  Initial Opcode index to 4733
  Match failed at index 4737
  Continuing at 4755
  Morphed node: t36: f32,i32 = FMADDrr_r32 t35, t18, t16

ISEL: Match complete!
Selecting: t35: f32,ch = load<LD4[%scevgep16](tbaa=<0x46205c8>)> t32, t34, undef:i32

ISEL: Starting pattern match on root node: t35: f32,ch = load<LD4[%scevgep16](tbaa=<0x46205c8>)> t32, t34, undef:i32

  Initial Opcode index to 497
  Skipped scope entry (due to false predicate) at index 507, continuing at 543
  Match failed at index 546
  Continuing at 576
  Match failed at index 577
  Continuing at 613
  Match failed at index 616
  Continuing at 630
  Continuing at 631
  OpcodeSwitch from 634 to 638
  Match failed at index 645
  Continuing at 787
  TypeSwitch[f32] from 793 to 796
  Morphed node: t35: f32,ch = LDRf32<Mem:LD4[%scevgep16](tbaa=<0x46205c8>)> t2, TargetConstant:i32<4>, t32

ISEL: Match complete!
Selecting: t32: ch = store<ST4[%lsr.iv1214](tbaa=<0x46205c8>)> t30:1, t31, t2, undef:i32

ISEL: Starting pattern match on root node: t32: ch = store<ST4[%lsr.iv1214](tbaa=<0x46205c8>)> t30:1, t31, t2, undef:i32

  Initial Opcode index to 842
  Skipped scope entry (due to false predicate) at index 848, continuing at 1255
  Morphed node: t32: ch = STRf32<Mem:ST4[%lsr.iv1214](tbaa=<0x46205c8>)> t31, t2, TargetConstant:i32<0>, t30:1

ISEL: Match complete!
Selecting: t31: f32 = fadd t29, t30

ISEL: Starting pattern match on root node: t31: f32 = fadd t29, t30

  Initial Opcode index to 4733
  Match failed at index 4737
  Continuing at 4755
  Morphed node: t31: f32,i32 = FMADDrr_r32 t30, t18, t13

ISEL: Match complete!
Selecting: t30: f32,ch = load<LD4[%lsr.iv1214](tbaa=<0x46205c8>)> t28, t2, undef:i32

ISEL: Starting pattern match on root node: t30: f32,ch = load<LD4[%lsr.iv1214](tbaa=<0x46205c8>)> t28, t2, undef:i32

  Initial Opcode index to 497
  Skipped scope entry (due to false predicate) at index 507, continuing at 543
  Match failed at index 546
  Continuing at 576
  Match failed at index 577
  Continuing at 613
  Match failed at index 616
  Continuing at 630
  Continuing at 631
  Match failed at index 634
  Continuing at 787
  TypeSwitch[f32] from 793 to 796
  Morphed node: t30: f32,ch = LDRf32<Mem:LD4[%lsr.iv1214](tbaa=<0x46205c8>)> t2, TargetConstant:i32<0>, t28

ISEL: Match complete!
Selecting: t28: ch = store<ST4[%scevgep17](tbaa=<0x46205c8>)> t26:1, t27, t25, undef:i32

ISEL: Starting pattern match on root node: t28: ch = store<ST4[%scevgep17](tbaa=<0x46205c8>)> t26:1, t27, t25, undef:i32

  Initial Opcode index to 842
  Skipped scope entry (due to false predicate) at index 848, continuing at 1255
  Morphed node: t28: ch = STRf32<Mem:ST4[%scevgep17](tbaa=<0x46205c8>)> t27, t2, TargetConstant:i32<-4>, t26:1

ISEL: Match complete!
Selecting: t27: f32 = fadd t24, t26

ISEL: Starting pattern match on root node: t27: f32 = fadd t24, t26

  Initial Opcode index to 4733
  Match failed at index 4737
  Continuing at 4755
  Morphed node: t27: f32,i32 = FMADDrr_r32 t26, t18, t12

ISEL: Match complete!
Selecting: t26: f32,ch = load<LD4[%scevgep17](tbaa=<0x46205c8>)> t23, t25, undef:i32

ISEL: Starting pattern match on root node: t26: f32,ch = load<LD4[%scevgep17](tbaa=<0x46205c8>)> t23, t25, undef:i32

  Initial Opcode index to 497
  Skipped scope entry (due to false predicate) at index 507, continuing at 543
  Match failed at index 546
  Continuing at 576
  Match failed at index 577
  Continuing at 613
  Match failed at index 616
  Continuing at 630
  Continuing at 631
  OpcodeSwitch from 634 to 638
  Match failed at index 645
  Continuing at 787
  TypeSwitch[f32] from 793 to 796
  Morphed node: t26: f32,ch = LDRf32<Mem:LD4[%scevgep17](tbaa=<0x46205c8>)> t2, TargetConstant:i32<-4>, t23

ISEL: Match complete!
Selecting: t23: ch = store<ST4[%scevgep15](tbaa=<0x46205c8>)> t21:1, t22, t20, undef:i32

ISEL: Starting pattern match on root node: t23: ch = store<ST4[%scevgep15](tbaa=<0x46205c8>)> t21:1, t22, t20, undef:i32

  Initial Opcode index to 842
  Skipped scope entry (due to false predicate) at index 848, continuing at 1255
  Morphed node: t23: ch = STRf32<Mem:ST4[%scevgep15](tbaa=<0x46205c8>)> t22, t2, TargetConstant:i32<-8>, t21:1

ISEL: Match complete!
Selecting: t22: f32 = fadd t19, t21

ISEL: Starting pattern match on root node: t22: f32 = fadd t19, t21

  Initial Opcode index to 4733
  Match failed at index 4737
  Continuing at 4755
  Morphed node: t22: f32,i32 = FMADDrr_r32 t21, t18, t9

ISEL: Match complete!
Selecting: t21: f32,ch = load<LD4[%scevgep15](tbaa=<0x46205c8>)> t16:1, t20, undef:i32

ISEL: Starting pattern match on root node: t21: f32,ch = load<LD4[%scevgep15](tbaa=<0x46205c8>)> t16:1, t20, undef:i32

  Initial Opcode index to 497
  Skipped scope entry (due to false predicate) at index 507, continuing at 543
  Match failed at index 546
  Continuing at 576
  Match failed at index 577
  Continuing at 613
  Match failed at index 616
  Continuing at 630
  Continuing at 631
  OpcodeSwitch from 634 to 638
  Match failed at index 645
  Continuing at 787
  TypeSwitch[f32] from 793 to 796
  Morphed node: t21: f32,ch = LDRf32<Mem:LD4[%scevgep15](tbaa=<0x46205c8>)> t2, TargetConstant:i32<-8>, t16:1

ISEL: Match complete!
Selecting: t16: f32,ch = load<Volatile LD4[%scevgep7](tbaa=<0x46205c8>)> t13:1, t15, undef:i32

ISEL: Starting pattern match on root node: t16: f32,ch = load<Volatile LD4[%scevgep7](tbaa=<0x46205c8>)> t13:1, t15, undef:i32

  Initial Opcode index to 497
  Skipped scope entry (due to false predicate) at index 507, continuing at 543
  Match failed at index 546
  Continuing at 576
  Match failed at index 577
  Continuing at 613
  Match failed at index 616
  Continuing at 630
  Continuing at 631
  OpcodeSwitch from 634 to 638
  Match failed at index 645
  Continuing at 787
  TypeSwitch[f32] from 793 to 796
  Morphed node: t16: f32,ch = LDRf32<Mem:Volatile LD4[%scevgep7](tbaa=<0x46205c8>)> t4, TargetConstant:i32<4>, t13:1

ISEL: Match complete!
Selecting: t13: f32,ch = load<Volatile LD4[%lsr.iv5](tbaa=<0x46205c8>)> t12:1, t4, undef:i32

ISEL: Starting pattern match on root node: t13: f32,ch = load<Volatile LD4[%lsr.iv5](tbaa=<0x46205c8>)> t12:1, t4, undef:i32

  Initial Opcode index to 497
  Skipped scope entry (due to false predicate) at index 507, continuing at 543
  Match failed at index 546
  Continuing at 576
  Match failed at index 577
  Continuing at 613
  Match failed at index 616
  Continuing at 630
  Continuing at 631
  Match failed at index 634
  Continuing at 787
  TypeSwitch[f32] from 793 to 796
  Morphed node: t13: f32,ch = LDRf32<Mem:Volatile LD4[%lsr.iv5](tbaa=<0x46205c8>)> t4, TargetConstant:i32<0>, t12:1

ISEL: Match complete!
Selecting: t12: f32,ch = load<Volatile LD4[%scevgep9](tbaa=<0x46205c8>)> t9:1, t11, undef:i32

ISEL: Starting pattern match on root node: t12: f32,ch = load<Volatile LD4[%scevgep9](tbaa=<0x46205c8>)> t9:1, t11, undef:i32

  Initial Opcode index to 497
  Skipped scope entry (due to false predicate) at index 507, continuing at 543
  Match failed at index 546
  Continuing at 576
  Match failed at index 577
  Continuing at 613
  Match failed at index 616
  Continuing at 630
  Continuing at 631
  OpcodeSwitch from 634 to 638
  Match failed at index 645
  Continuing at 787
  TypeSwitch[f32] from 793 to 796
  Morphed node: t12: f32,ch = LDRf32<Mem:Volatile LD4[%scevgep9](tbaa=<0x46205c8>)> t4, TargetConstant:i32<-4>, t9:1

ISEL: Match complete!
Selecting: t42: ch = CopyToReg t0, Register:i32 %vreg16, t40

Selecting: t59: i32,i32 = EpiphanyISD::CMP t40, Constant:i32<8>

ISEL: Starting pattern match on root node: t59: i32,i32 = EpiphanyISD::CMP t40, Constant:i32<8>

  Initial Opcode index to 1952
  Morphed node: t59: i32,i32,glue = CMPri_r32 t40, TargetConstant:i32<8>

ISEL: Match complete!
Selecting: t9: f32,ch = load<Volatile LD4[%scevgep8](tbaa=<0x46205c8>)> t0, t6, undef:i32

ISEL: Starting pattern match on root node: t9: f32,ch = load<Volatile LD4[%scevgep8](tbaa=<0x46205c8>)> t0, t6, undef:i32

  Initial Opcode index to 497
  Skipped scope entry (due to false predicate) at index 507, continuing at 543
  Match failed at index 546
  Continuing at 576
  Match failed at index 577
  Continuing at 613
  Match failed at index 616
  Continuing at 630
  Continuing at 631
  OpcodeSwitch from 634 to 638
  Match failed at index 645
  Continuing at 787
  TypeSwitch[f32] from 793 to 796
  Morphed node: t9: f32,ch = LDRf32<Mem:Volatile LD4[%scevgep8](tbaa=<0x46205c8>)> t4, TargetConstant:i32<-8>, t0

ISEL: Match complete!
Selecting: t46: ch = CopyToReg t0, Register:i32 %vreg17, t44

Selecting: t49: ch = CopyToReg t0, Register:i32 %vreg18, t47

Selecting: t40: i32 = add t39, Constant:i32<4>

ISEL: Starting pattern match on root node: t40: i32 = add t39, Constant:i32<4>

  Initial Opcode index to 1567
  Morphed node: t40: i32,i32 = ADDri_r32 t39, TargetConstant:i32<4>

ISEL: Match complete!
Selecting: t44: i32 = add t4, Constant:i32<16>

ISEL: Starting pattern match on root node: t44: i32 = add t4, Constant:i32<16>

  Initial Opcode index to 1567
  Morphed node: t44: i32,i32 = ADDri_r32 t4, TargetConstant:i32<16>

ISEL: Match complete!
Selecting: t47: i32 = add t2, Constant:i32<16>

ISEL: Starting pattern match on root node: t47: i32 = add t2, Constant:i32<16>

  Initial Opcode index to 1567
  Morphed node: t47: i32,i32 = ADDri_r32 t2, TargetConstant:i32<16>

ISEL: Match complete!
Selecting: t39: i32,ch = CopyFromReg t0, Register:i32 %vreg15

Selecting: t18: f32,ch = CopyFromReg t0, Register:f32 %vreg12

Selecting: t4: i32,ch = CopyFromReg t0, Register:i32 %vreg14

Selecting: t2: i32,ch = CopyFromReg t0, Register:i32 %vreg13

Selecting: t56: ch = BasicBlock<for.end60 0x46b4c28>

Selecting: t53: ch = BasicBlock<for.body13 0x46b4a58>

Selecting: t48: i32 = Register %vreg18

Selecting: t45: i32 = Register %vreg17

Selecting: t41: i32 = Register %vreg16

Selecting: t38: i32 = Register %vreg15

Selecting: t17: f32 = Register %vreg12

Selecting: t3: i32 = Register %vreg14

Selecting: t1: i32 = Register %vreg13

Selecting: t0: ch = EntryToken

===== Instruction selection ends:
Selected selection DAG: BB#6 'matmac:for.body13'
SelectionDAG has 48 nodes:
  t0: ch = EntryToken
  t2: i32,ch = CopyFromReg t0, Register:i32 %vreg13
  t4: i32,ch = CopyFromReg t0, Register:i32 %vreg14
  t18: f32,ch = CopyFromReg t0, Register:f32 %vreg12
    t39: i32,ch = CopyFromReg t0, Register:i32 %vreg15
  t40: i32,i32 = ADDri_r32 t39, TargetConstant:i32<4>
  t9: f32,ch = LDRf32<Mem:Volatile LD4[%scevgep8](tbaa=<0x46205c8>)> t4, TargetConstant:i32<-8>, t0
  t12: f32,ch = LDRf32<Mem:Volatile LD4[%scevgep9](tbaa=<0x46205c8>)> t4, TargetConstant:i32<-4>, t9:1
  t13: f32,ch = LDRf32<Mem:Volatile LD4[%lsr.iv5](tbaa=<0x46205c8>)> t4, TargetConstant:i32<0>, t12:1
  t16: f32,ch = LDRf32<Mem:Volatile LD4[%scevgep7](tbaa=<0x46205c8>)> t4, TargetConstant:i32<4>, t13:1
  t21: f32,ch = LDRf32<Mem:LD4[%scevgep15](tbaa=<0x46205c8>)> t2, TargetConstant:i32<-8>, t16:1
      t22: f32,i32 = FMADDrr_r32 t21, t18, t9
    t23: ch = STRf32<Mem:ST4[%scevgep15](tbaa=<0x46205c8>)> t22, t2, TargetConstant:i32<-8>, t21:1
  t26: f32,ch = LDRf32<Mem:LD4[%scevgep17](tbaa=<0x46205c8>)> t2, TargetConstant:i32<-4>, t23
      t27: f32,i32 = FMADDrr_r32 t26, t18, t12
    t28: ch = STRf32<Mem:ST4[%scevgep17](tbaa=<0x46205c8>)> t27, t2, TargetConstant:i32<-4>, t26:1
  t30: f32,ch = LDRf32<Mem:LD4[%lsr.iv1214](tbaa=<0x46205c8>)> t2, TargetConstant:i32<0>, t28
      t31: f32,i32 = FMADDrr_r32 t30, t18, t13
    t32: ch = STRf32<Mem:ST4[%lsr.iv1214](tbaa=<0x46205c8>)> t31, t2, TargetConstant:i32<0>, t30:1
  t35: f32,ch = LDRf32<Mem:LD4[%scevgep16](tbaa=<0x46205c8>)> t2, TargetConstant:i32<4>, t32
      t42: ch = CopyToReg t0, Register:i32 %vreg16, t40
        t44: i32,i32 = ADDri_r32 t4, TargetConstant:i32<16>
      t46: ch = CopyToReg t0, Register:i32 %vreg17, t44
        t47: i32,i32 = ADDri_r32 t2, TargetConstant:i32<16>
      t49: ch = CopyToReg t0, Register:i32 %vreg18, t47
        t36: f32,i32 = FMADDrr_r32 t35, t18, t16
      t37: ch = STRf32<Mem:ST4[%scevgep16](tbaa=<0x46205c8>)> t36, t2, TargetConstant:i32<4>, t35:1
    t54: ch = TokenFactor t42, t46, t49, t37
    t59: i32,i32,glue = CMPri_r32 t40, TargetConstant:i32<8>
  t63: ch,glue = CopyToReg t54, Register:i32 %STATUS, t59:1
    t60: ch = BCC BasicBlock:ch<for.body13 0x46b4a58>, TargetConstant:i32<8>, t63, t63:1
  t57: ch = BNONE32 BasicBlock:ch<for.end60 0x46b4c28>, t60


********** List Scheduling BB#6 'for.body13' **********
SU(0): t57: ch = BNONE32 BasicBlock:ch<for.end60 0x46b4c28>, t60

  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 8
  Depth              : 41
  Height             : 0
  Predecessors:
   ord  SU(1): Latency=1
SU(1): t60: ch = BCC BasicBlock:ch<for.body13 0x46b4a58>, TargetConstant:i32<8>, t63, t63:1

    t63: ch,glue = CopyToReg t54, Register:i32 %STATUS, t59:1

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 8
  Depth              : 40
  Height             : 1
  Predecessors:
   ord  SU(5): Latency=0
   data SU(2): Latency=3 Reg=%STATUS
  Successors:
   ord  SU(0): Latency=1
SU(2): t59: i32,i32,glue = CMPri_r32 t40, TargetConstant:i32<8>

  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 5
  Depth              : 2
  Height             : 4
  Predecessors:
   data SU(3): Latency=2
  Successors:
   data SU(1): Latency=3 Reg=%STATUS
SU(3): t40: i32,i32 = ADDri_r32 t39, TargetConstant:i32<4>

  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 1
  Latency            : 5
  Depth              : 0
  Height             : 6
  Predecessors:
   data SU(4): Latency=0
  Successors:
   data SU(2): Latency=2
   data SU(29): Latency=3
SU(4): t39: i32,ch = CopyFromReg t0, Register:i32 %vreg15

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 0
  Depth              : 0
  Height             : 6
  Successors:
   data SU(3): Latency=0
SU(5): t54: ch = TokenFactor t42, t46, t49, t37

  # preds left       : 4
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 40
  Height             : 1
  Predecessors:
   ord  SU(29): Latency=1
   ord  SU(27): Latency=1
   ord  SU(25): Latency=1
   ord  SU(6): Latency=1
  Successors:
   ord  SU(1): Latency=0
SU(6): t37: ch = STRf32<Mem:ST4[%scevgep16](tbaa=<0x46205c8>)> t36, t2, TargetConstant:i32<4>, t35:1

  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 5
  Depth              : 39
  Height             : 2
  Predecessors:
   data SU(24): Latency=4
   data SU(23): Latency=0
   ord  SU(7): Latency=1
  Successors:
   ord  SU(5): Latency=1
SU(7): t35: f32,ch = LDRf32<Mem:LD4[%scevgep16](tbaa=<0x46205c8>)> t2, TargetConstant:i32<4>, t32

  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 1
  Latency            : 6
  Depth              : 31
  Height             : 10
  Predecessors:
   data SU(23): Latency=0
   ord  SU(8): Latency=1
  Successors:
   ord  SU(6): Latency=1
   data SU(24): Latency=4
SU(8): t32: ch = STRf32<Mem:ST4[%lsr.iv1214](tbaa=<0x46205c8>)> t31, t2, TargetConstant:i32<0>, t30:1

  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 5
  Depth              : 30
  Height             : 11
  Predecessors:
   data SU(22): Latency=4
   data SU(23): Latency=0
   ord  SU(9): Latency=1
  Successors:
   ord  SU(7): Latency=1
SU(9): t30: f32,ch = LDRf32<Mem:LD4[%lsr.iv1214](tbaa=<0x46205c8>)> t2, TargetConstant:i32<0>, t28

  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 1
  Latency            : 6
  Depth              : 22
  Height             : 19
  Predecessors:
   data SU(23): Latency=0
   ord  SU(10): Latency=1
  Successors:
   ord  SU(8): Latency=1
   data SU(22): Latency=4
SU(10): t28: ch = STRf32<Mem:ST4[%scevgep17](tbaa=<0x46205c8>)> t27, t2, TargetConstant:i32<-4>, t26:1

  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 5
  Depth              : 21
  Height             : 20
  Predecessors:
   data SU(21): Latency=4
   data SU(23): Latency=0
   ord  SU(11): Latency=1
  Successors:
   ord  SU(9): Latency=1
SU(11): t26: f32,ch = LDRf32<Mem:LD4[%scevgep17](tbaa=<0x46205c8>)> t2, TargetConstant:i32<-4>, t23

  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 1
  Latency            : 6
  Depth              : 13
  Height             : 28
  Predecessors:
   data SU(23): Latency=0
   ord  SU(12): Latency=1
  Successors:
   ord  SU(10): Latency=1
   data SU(21): Latency=4
SU(12): t23: ch = STRf32<Mem:ST4[%scevgep15](tbaa=<0x46205c8>)> t22, t2, TargetConstant:i32<-8>, t21:1

  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 5
  Depth              : 12
  Height             : 29
  Predecessors:
   data SU(19): Latency=4
   data SU(23): Latency=0
   ord  SU(13): Latency=1
  Successors:
   ord  SU(11): Latency=1
SU(13): t21: f32,ch = LDRf32<Mem:LD4[%scevgep15](tbaa=<0x46205c8>)> t2, TargetConstant:i32<-8>, t16:1

  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 1
  Latency            : 6
  Depth              : 4
  Height             : 37
  Predecessors:
   data SU(23): Latency=0
   ord  SU(14): Latency=1
  Successors:
   ord  SU(12): Latency=1
   data SU(19): Latency=4
SU(14): t16: f32,ch = LDRf32<Mem:Volatile LD4[%scevgep7](tbaa=<0x46205c8>)> t4, TargetConstant:i32<4>, t13:1

  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 1
  Latency            : 6
  Depth              : 3
  Height             : 38
  Predecessors:
   data SU(18): Latency=0
   ord  SU(15): Latency=1
  Successors:
   ord  SU(13): Latency=1
   data SU(24): Latency=6
SU(15): t13: f32,ch = LDRf32<Mem:Volatile LD4[%lsr.iv5](tbaa=<0x46205c8>)> t4, TargetConstant:i32<0>, t12:1

  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 1
  Latency            : 6
  Depth              : 2
  Height             : 39
  Predecessors:
   data SU(18): Latency=0
   ord  SU(16): Latency=1
  Successors:
   ord  SU(14): Latency=1
   data SU(22): Latency=6
SU(16): t12: f32,ch = LDRf32<Mem:Volatile LD4[%scevgep9](tbaa=<0x46205c8>)> t4, TargetConstant:i32<-4>, t9:1

  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 1
  Latency            : 6
  Depth              : 1
  Height             : 40
  Predecessors:
   data SU(18): Latency=0
   ord  SU(17): Latency=1
  Successors:
   ord  SU(15): Latency=1
   data SU(21): Latency=6
SU(17): t9: f32,ch = LDRf32<Mem:Volatile LD4[%scevgep8](tbaa=<0x46205c8>)> t4, TargetConstant:i32<-8>, t0

  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 1
  Latency            : 6
  Depth              : 0
  Height             : 41
  Predecessors:
   data SU(18): Latency=0
  Successors:
   ord  SU(16): Latency=1
   data SU(19): Latency=6
SU(18): t4: i32,ch = CopyFromReg t0, Register:i32 %vreg14

  # preds left       : 0
  # succs left       : 5
  # rdefs left       : 1
  Latency            : 0
  Depth              : 0
  Height             : 41
  Successors:
   data SU(14): Latency=0
   data SU(15): Latency=0
   data SU(16): Latency=0
   data SU(17): Latency=0
   data SU(28): Latency=0
SU(19): t22: f32,i32 = FMADDrr_r32 t21, t18, t9

  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 8
  Depth              : 8
  Height             : 33
  Predecessors:
   data SU(13): Latency=4
   data SU(20): Latency=0
   data SU(17): Latency=6
  Successors:
   data SU(12): Latency=4
SU(20): t18: f32,ch = CopyFromReg t0, Register:f32 %vreg12

  # preds left       : 0
  # succs left       : 4
  # rdefs left       : 1
  Latency            : 0
  Depth              : 0
  Height             : 33
  Successors:
   data SU(19): Latency=0
   data SU(21): Latency=0
   data SU(22): Latency=0
   data SU(24): Latency=0
SU(21): t27: f32,i32 = FMADDrr_r32 t26, t18, t12

  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 8
  Depth              : 17
  Height             : 24
  Predecessors:
   data SU(11): Latency=4
   data SU(20): Latency=0
   data SU(16): Latency=6
  Successors:
   data SU(10): Latency=4
SU(22): t31: f32,i32 = FMADDrr_r32 t30, t18, t13

  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 8
  Depth              : 26
  Height             : 15
  Predecessors:
   data SU(9): Latency=4
   data SU(20): Latency=0
   data SU(15): Latency=6
  Successors:
   data SU(8): Latency=4
SU(23): t2: i32,ch = CopyFromReg t0, Register:i32 %vreg13

  # preds left       : 0
  # succs left       : 9
  # rdefs left       : 1
  Latency            : 0
  Depth              : 0
  Height             : 37
  Successors:
   data SU(6): Latency=0
   data SU(7): Latency=0
   data SU(8): Latency=0
   data SU(9): Latency=0
   data SU(10): Latency=0
   data SU(11): Latency=0
   data SU(12): Latency=0
   data SU(13): Latency=0
   data SU(26): Latency=0
SU(24): t36: f32,i32 = FMADDrr_r32 t35, t18, t16

  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 8
  Depth              : 35
  Height             : 6
  Predecessors:
   data SU(7): Latency=4
   data SU(20): Latency=0
   data SU(14): Latency=6
  Successors:
   data SU(6): Latency=4
SU(25): t49: ch = CopyToReg t0, Register:i32 %vreg18, t47

  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 3
  Height             : 2
  Predecessors:
   data SU(26): Latency=3
  Successors:
   ord  SU(5): Latency=1
SU(26): t47: i32,i32 = ADDri_r32 t2, TargetConstant:i32<16>

  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 5
  Depth              : 0
  Height             : 5
  Predecessors:
   data SU(23): Latency=0
  Successors:
   data SU(25): Latency=3
SU(27): t46: ch = CopyToReg t0, Register:i32 %vreg17, t44

  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 3
  Height             : 2
  Predecessors:
   data SU(28): Latency=3
  Successors:
   ord  SU(5): Latency=1
SU(28): t44: i32,i32 = ADDri_r32 t4, TargetConstant:i32<16>

  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 5
  Depth              : 0
  Height             : 5
  Predecessors:
   data SU(18): Latency=0
  Successors:
   data SU(27): Latency=3
SU(29): t42: ch = CopyToReg t0, Register:i32 %vreg16, t40

  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 3
  Height             : 2
  Predecessors:
   data SU(3): Latency=3
  Successors:
   ord  SU(5): Latency=1
VRegCycle: SU(26)
VRegCycle: SU(28)

Examining Available:
Height 0: SU(0): t57: ch = BNONE32 BasicBlock:ch<for.end60 0x46b4c28>, t60


*** Scheduling [0]: SU(0): t57: ch = BNONE32 BasicBlock:ch<for.end60 0x46b4c28>, t60


Examining Available:
Height 1: SU(1): t60: ch = BCC BasicBlock:ch<for.body13 0x46b4a58>, TargetConstant:i32<8>, t63, t63:1

    t63: ch,glue = CopyToReg t54, Register:i32 %STATUS, t59:1


*** Scheduling [1]: SU(1): t60: ch = BCC BasicBlock:ch<for.body13 0x46b4a58>, TargetConstant:i32<8>, t63, t63:1

    t63: ch,glue = CopyToReg t54, Register:i32 %STATUS, t59:1


Examining Available:
Height 1: SU(5): t54: ch = TokenFactor t42, t46, t49, t37

Height 4: SU(2): t59: i32,i32,glue = CMPri_r32 t40, TargetConstant:i32<8>


*** Scheduling [2]: SU(5): t54: ch = TokenFactor t42, t46, t49, t37


Examining Available:
  SU (2)  defines a physreg SU(29)  has no physreg
  SU (2)  defines a physreg SU(27)  has no physreg
  SU (2)  defines a physreg SU(25)  has no physreg
Depth of SU(2): 2 != SU(6): 39
Height 3: SU(6): t37: ch = STRf32<Mem:ST4[%scevgep16](tbaa=<0x46205c8>)> t36, t2, TargetConstant:i32<4>, t35:1

  SU (2)  defines a physreg SU(29)  has no physreg
  SU (2)  defines a physreg SU(27)  has no physreg
  SU (2)  defines a physreg SU(25)  has no physreg
Height 4: SU(2): t59: i32,i32,glue = CMPri_r32 t40, TargetConstant:i32<8>

Height 3: SU(29): t42: ch = CopyToReg t0, Register:i32 %vreg16, t40

Height 3: SU(27): t46: ch = CopyToReg t0, Register:i32 %vreg17, t44

Height 3: SU(25): t49: ch = CopyToReg t0, Register:i32 %vreg18, t47

  SU (2)  defines a physreg SU(29)  has no physreg
  SU (2)  defines a physreg SU(27)  has no physreg
  SU (2)  defines a physreg SU(25)  has no physreg
Depth of SU(2): 2 != SU(6): 39

*** Scheduling [3]: SU(6): t37: ch = STRf32<Mem:ST4[%scevgep16](tbaa=<0x46205c8>)> t36, t2, TargetConstant:i32<4>, t35:1

FPR64_with_isub_lo_in_FPR32: 2 / 26

Examining Available:
  SU (2)  defines a physreg SU(29)  has no physreg
  SU (2)  defines a physreg SU(27)  has no physreg
  SU (2)  defines a physreg SU(25)  has no physreg
Depth of SU(2): 2 != SU(24): 35
Height 7: SU(24): t36: f32,i32 = FMADDrr_r32 t35, t18, t16

  SU (2)  defines a physreg SU(29)  has no physreg
  SU (2)  defines a physreg SU(27)  has no physreg
  SU (2)  defines a physreg SU(25)  has no physreg
Height 4: SU(2): t59: i32,i32,glue = CMPri_r32 t40, TargetConstant:i32<8>

Height 3: SU(29): t42: ch = CopyToReg t0, Register:i32 %vreg16, t40

Height 3: SU(27): t46: ch = CopyToReg t0, Register:i32 %vreg17, t44

Height 3: SU(25): t49: ch = CopyToReg t0, Register:i32 %vreg18, t47

  SU (2)  defines a physreg SU(29)  has no physreg
  SU (2)  defines a physreg SU(27)  has no physreg
  SU (2)  defines a physreg SU(25)  has no physreg
Depth of SU(2): 2 != SU(24): 35
    Interfering reg STATUS SU #24
  SU (2)  defines a physreg SU(29)  has no physreg
  SU (2)  defines a physreg SU(27)  has no physreg
  SU (2)  defines a physreg SU(25)  has no physreg

*** Scheduling [4]: SU(2): t59: i32,i32,glue = CMPri_r32 t40, TargetConstant:i32<8>

FPR64_with_isub_lo_in_FPR32: 3 / 26
    Repushing SU #24

Examining Available:
Depth of SU(29): 3 != SU(24): 35
Height 7: SU(24): t36: f32,i32 = FMADDrr_r32 t35, t18, t16

Height 3: SU(29): t42: ch = CopyToReg t0, Register:i32 %vreg16, t40

Height 3: SU(27): t46: ch = CopyToReg t0, Register:i32 %vreg17, t44

Height 3: SU(25): t49: ch = CopyToReg t0, Register:i32 %vreg18, t47

Depth of SU(29): 3 != SU(24): 35

*** Scheduling [7]: SU(24): t36: f32,i32 = FMADDrr_r32 t35, t18, t16

FPR64_with_isub_lo_in_FPR32: 5 / 26

Examining Available:
Depth of SU(29): 3 != SU(7): 31
Height 11: SU(7): t35: f32,ch = LDRf32<Mem:LD4[%scevgep16](tbaa=<0x46205c8>)> t2, TargetConstant:i32<4>, t32

Height 3: SU(29): t42: ch = CopyToReg t0, Register:i32 %vreg16, t40

Height 3: SU(27): t46: ch = CopyToReg t0, Register:i32 %vreg17, t44

Height 3: SU(25): t49: ch = CopyToReg t0, Register:i32 %vreg18, t47

Depth of SU(29): 3 != SU(7): 31

*** Scheduling [11]: SU(7): t35: f32,ch = LDRf32<Mem:LD4[%scevgep16](tbaa=<0x46205c8>)> t2, TargetConstant:i32<4>, t32

FPR64_with_isub_lo_in_FPR32: 4 / 26

Examining Available:
Depth of SU(29): 3 != SU(8): 30
Height 12: SU(8): t32: ch = STRf32<Mem:ST4[%lsr.iv1214](tbaa=<0x46205c8>)> t31, t2, TargetConstant:i32<0>, t30:1

Height 3: SU(29): t42: ch = CopyToReg t0, Register:i32 %vreg16, t40

Height 3: SU(27): t46: ch = CopyToReg t0, Register:i32 %vreg17, t44

Height 3: SU(25): t49: ch = CopyToReg t0, Register:i32 %vreg18, t47

Depth of SU(29): 3 != SU(8): 30

*** Scheduling [12]: SU(8): t32: ch = STRf32<Mem:ST4[%lsr.iv1214](tbaa=<0x46205c8>)> t31, t2, TargetConstant:i32<0>, t30:1

FPR64_with_isub_lo_in_FPR32: 5 / 26

Examining Available:
Depth of SU(29): 3 != SU(22): 26
Height 16: SU(22): t31: f32,i32 = FMADDrr_r32 t30, t18, t13

Height 3: SU(29): t42: ch = CopyToReg t0, Register:i32 %vreg16, t40

Height 3: SU(27): t46: ch = CopyToReg t0, Register:i32 %vreg17, t44

Height 3: SU(25): t49: ch = CopyToReg t0, Register:i32 %vreg18, t47

Depth of SU(29): 3 != SU(22): 26

*** Scheduling [16]: SU(22): t31: f32,i32 = FMADDrr_r32 t30, t18, t13

FPR64_with_isub_lo_in_FPR32: 6 / 26

Examining Available:
Depth of SU(29): 3 != SU(9): 22
Height 20: SU(9): t30: f32,ch = LDRf32<Mem:LD4[%lsr.iv1214](tbaa=<0x46205c8>)> t2, TargetConstant:i32<0>, t28

Height 3: SU(29): t42: ch = CopyToReg t0, Register:i32 %vreg16, t40

Height 3: SU(27): t46: ch = CopyToReg t0, Register:i32 %vreg17, t44

Height 3: SU(25): t49: ch = CopyToReg t0, Register:i32 %vreg18, t47

Depth of SU(29): 3 != SU(9): 22

*** Scheduling [20]: SU(9): t30: f32,ch = LDRf32<Mem:LD4[%lsr.iv1214](tbaa=<0x46205c8>)> t2, TargetConstant:i32<0>, t28

FPR64_with_isub_lo_in_FPR32: 5 / 26

Examining Available:
Depth of SU(29): 3 != SU(10): 21
Height 21: SU(10): t28: ch = STRf32<Mem:ST4[%scevgep17](tbaa=<0x46205c8>)> t27, t2, TargetConstant:i32<-4>, t26:1

Height 3: SU(29): t42: ch = CopyToReg t0, Register:i32 %vreg16, t40

Height 3: SU(27): t46: ch = CopyToReg t0, Register:i32 %vreg17, t44

Height 3: SU(25): t49: ch = CopyToReg t0, Register:i32 %vreg18, t47

Depth of SU(29): 3 != SU(10): 21

*** Scheduling [21]: SU(10): t28: ch = STRf32<Mem:ST4[%scevgep17](tbaa=<0x46205c8>)> t27, t2, TargetConstant:i32<-4>, t26:1

FPR64_with_isub_lo_in_FPR32: 6 / 26

Examining Available:
Depth of SU(29): 3 != SU(21): 17
Height 25: SU(21): t27: f32,i32 = FMADDrr_r32 t26, t18, t12

Height 3: SU(29): t42: ch = CopyToReg t0, Register:i32 %vreg16, t40

Height 3: SU(27): t46: ch = CopyToReg t0, Register:i32 %vreg17, t44

Height 3: SU(25): t49: ch = CopyToReg t0, Register:i32 %vreg18, t47

Depth of SU(29): 3 != SU(21): 17

*** Scheduling [25]: SU(21): t27: f32,i32 = FMADDrr_r32 t26, t18, t12

FPR64_with_isub_lo_in_FPR32: 7 / 26

Examining Available:
Depth of SU(29): 3 != SU(11): 13
Height 29: SU(11): t26: f32,ch = LDRf32<Mem:LD4[%scevgep17](tbaa=<0x46205c8>)> t2, TargetConstant:i32<-4>, t23

Height 3: SU(29): t42: ch = CopyToReg t0, Register:i32 %vreg16, t40

Height 3: SU(27): t46: ch = CopyToReg t0, Register:i32 %vreg17, t44

Height 3: SU(25): t49: ch = CopyToReg t0, Register:i32 %vreg18, t47

Depth of SU(29): 3 != SU(11): 13

*** Scheduling [29]: SU(11): t26: f32,ch = LDRf32<Mem:LD4[%scevgep17](tbaa=<0x46205c8>)> t2, TargetConstant:i32<-4>, t23

FPR64_with_isub_lo_in_FPR32: 6 / 26

Examining Available:
Depth of SU(29): 3 != SU(12): 12
Height 30: SU(12): t23: ch = STRf32<Mem:ST4[%scevgep15](tbaa=<0x46205c8>)> t22, t2, TargetConstant:i32<-8>, t21:1

Height 3: SU(29): t42: ch = CopyToReg t0, Register:i32 %vreg16, t40

Height 3: SU(27): t46: ch = CopyToReg t0, Register:i32 %vreg17, t44

Height 3: SU(25): t49: ch = CopyToReg t0, Register:i32 %vreg18, t47

Depth of SU(29): 3 != SU(12): 12

*** Scheduling [30]: SU(12): t23: ch = STRf32<Mem:ST4[%scevgep15](tbaa=<0x46205c8>)> t22, t2, TargetConstant:i32<-8>, t21:1

FPR64_with_isub_lo_in_FPR32: 7 / 26

Examining Available:
Height 3: SU(29): t42: ch = CopyToReg t0, Register:i32 %vreg16, t40

Height 3: SU(27): t46: ch = CopyToReg t0, Register:i32 %vreg17, t44

Height 3: SU(25): t49: ch = CopyToReg t0, Register:i32 %vreg18, t47

Height 34: SU(19): t22: f32,i32 = FMADDrr_r32 t21, t18, t9


*** Scheduling [31]: SU(29): t42: ch = CopyToReg t0, Register:i32 %vreg16, t40

FPR64_with_isub_lo_in_FPR32: 7 / 26

Examining Available:
Height 3: SU(27): t46: ch = CopyToReg t0, Register:i32 %vreg17, t44

Height 3: SU(25): t49: ch = CopyToReg t0, Register:i32 %vreg18, t47

Depth of SU(3): 0 != SU(19): 8
Height 34: SU(19): t22: f32,i32 = FMADDrr_r32 t21, t18, t9

Height 34: SU(3): t40: i32,i32 = ADDri_r32 t39, TargetConstant:i32<4>


*** Scheduling [32]: SU(27): t46: ch = CopyToReg t0, Register:i32 %vreg17, t44

FPR64_with_isub_lo_in_FPR32: 8 / 26

Examining Available:
Height 3: SU(25): t49: ch = CopyToReg t0, Register:i32 %vreg18, t47

Depth of SU(28): 0 != SU(19): 8
Depth of SU(19): 8 != SU(3): 0
Height 34: SU(19): t22: f32,i32 = FMADDrr_r32 t21, t18, t9

Height 34: SU(3): t40: i32,i32 = ADDri_r32 t39, TargetConstant:i32<4>

Height 35: SU(28): t44: i32,i32 = ADDri_r32 t4, TargetConstant:i32<16>


*** Scheduling [33]: SU(25): t49: ch = CopyToReg t0, Register:i32 %vreg18, t47

FPR64_with_isub_lo_in_FPR32: 9 / 26

Examining Available:
Depth of SU(28): 0 != SU(19): 8
Depth of SU(19): 8 != SU(3): 0
Depth of SU(19): 8 != SU(26): 0
Height 34: SU(19): t22: f32,i32 = FMADDrr_r32 t21, t18, t9

Height 34: SU(3): t40: i32,i32 = ADDri_r32 t39, TargetConstant:i32<4>

Height 35: SU(28): t44: i32,i32 = ADDri_r32 t4, TargetConstant:i32<16>

Height 36: SU(26): t47: i32,i32 = ADDri_r32 t2, TargetConstant:i32<16>

Depth of SU(28): 0 != SU(19): 8
Depth of SU(19): 8 != SU(3): 0
Depth of SU(19): 8 != SU(26): 0

*** Scheduling [34]: SU(19): t22: f32,i32 = FMADDrr_r32 t21, t18, t9

FPR64_with_isub_lo_in_FPR32: 10 / 26

Examining Available:
Height 34: SU(20): t18: f32,ch = CopyFromReg t0, Register:f32 %vreg12

Height 38: SU(13): t21: f32,ch = LDRf32<Mem:LD4[%scevgep15](tbaa=<0x46205c8>)> t2, TargetConstant:i32<-8>, t16:1

Height 34: SU(3): t40: i32,i32 = ADDri_r32 t39, TargetConstant:i32<4>

Height 35: SU(28): t44: i32,i32 = ADDri_r32 t4, TargetConstant:i32<16>

Height 36: SU(26): t47: i32,i32 = ADDri_r32 t2, TargetConstant:i32<16>


*** Scheduling [35]: SU(20): t18: f32,ch = CopyFromReg t0, Register:f32 %vreg12

FPR64_with_isub_lo_in_FPR32: 9 / 26

Examining Available:
Height 38: SU(13): t21: f32,ch = LDRf32<Mem:LD4[%scevgep15](tbaa=<0x46205c8>)> t2, TargetConstant:i32<-8>, t16:1

Height 34: SU(3): t40: i32,i32 = ADDri_r32 t39, TargetConstant:i32<4>

Height 35: SU(28): t44: i32,i32 = ADDri_r32 t4, TargetConstant:i32<16>

Height 36: SU(26): t47: i32,i32 = ADDri_r32 t2, TargetConstant:i32<16>


*** Scheduling [38]: SU(13): t21: f32,ch = LDRf32<Mem:LD4[%scevgep15](tbaa=<0x46205c8>)> t2, TargetConstant:i32<-8>, t16:1

FPR64_with_isub_lo_in_FPR32: 8 / 26

Examining Available:
Height 39: SU(14): t16: f32,ch = LDRf32<Mem:Volatile LD4[%scevgep7](tbaa=<0x46205c8>)> t4, TargetConstant:i32<4>, t13:1

Height 34: SU(3): t40: i32,i32 = ADDri_r32 t39, TargetConstant:i32<4>

Height 35: SU(28): t44: i32,i32 = ADDri_r32 t4, TargetConstant:i32<16>

Height 36: SU(26): t47: i32,i32 = ADDri_r32 t2, TargetConstant:i32<16>


*** Scheduling [39]: SU(14): t16: f32,ch = LDRf32<Mem:Volatile LD4[%scevgep7](tbaa=<0x46205c8>)> t4, TargetConstant:i32<4>, t13:1

FPR64_with_isub_lo_in_FPR32: 8 / 26

Examining Available:
Height 40: SU(15): t13: f32,ch = LDRf32<Mem:Volatile LD4[%lsr.iv5](tbaa=<0x46205c8>)> t4, TargetConstant:i32<0>, t12:1

Height 34: SU(3): t40: i32,i32 = ADDri_r32 t39, TargetConstant:i32<4>

Height 35: SU(28): t44: i32,i32 = ADDri_r32 t4, TargetConstant:i32<16>

Height 36: SU(26): t47: i32,i32 = ADDri_r32 t2, TargetConstant:i32<16>


*** Scheduling [40]: SU(15): t13: f32,ch = LDRf32<Mem:Volatile LD4[%lsr.iv5](tbaa=<0x46205c8>)> t4, TargetConstant:i32<0>, t12:1

FPR64_with_isub_lo_in_FPR32: 7 / 26

Examining Available:
Height 34: SU(3): t40: i32,i32 = ADDri_r32 t39, TargetConstant:i32<4>

Height 41: SU(16): t12: f32,ch = LDRf32<Mem:Volatile LD4[%scevgep9](tbaa=<0x46205c8>)> t4, TargetConstant:i32<-4>, t9:1

Height 35: SU(28): t44: i32,i32 = ADDri_r32 t4, TargetConstant:i32<16>

Height 36: SU(26): t47: i32,i32 = ADDri_r32 t2, TargetConstant:i32<16>


*** Scheduling [41]: SU(3): t40: i32,i32 = ADDri_r32 t39, TargetConstant:i32<4>

FPR64_with_isub_lo_in_FPR32: 7 / 26

Examining Available:
Height 41: SU(4): t39: i32,ch = CopyFromReg t0, Register:i32 %vreg15

Height 41: SU(16): t12: f32,ch = LDRf32<Mem:Volatile LD4[%scevgep9](tbaa=<0x46205c8>)> t4, TargetConstant:i32<-4>, t9:1

Height 35: SU(28): t44: i32,i32 = ADDri_r32 t4, TargetConstant:i32<16>

Height 36: SU(26): t47: i32,i32 = ADDri_r32 t2, TargetConstant:i32<16>


*** Scheduling [42]: SU(4): t39: i32,ch = CopyFromReg t0, Register:i32 %vreg15

FPR64_with_isub_lo_in_FPR32: 6 / 26

Examining Available:
Height 41: SU(16): t12: f32,ch = LDRf32<Mem:Volatile LD4[%scevgep9](tbaa=<0x46205c8>)> t4, TargetConstant:i32<-4>, t9:1

Height 35: SU(28): t44: i32,i32 = ADDri_r32 t4, TargetConstant:i32<16>

Height 36: SU(26): t47: i32,i32 = ADDri_r32 t2, TargetConstant:i32<16>


*** Scheduling [43]: SU(16): t12: f32,ch = LDRf32<Mem:Volatile LD4[%scevgep9](tbaa=<0x46205c8>)> t4, TargetConstant:i32<-4>, t9:1

FPR64_with_isub_lo_in_FPR32: 5 / 26

Examining Available:
Height 35: SU(28): t44: i32,i32 = ADDri_r32 t4, TargetConstant:i32<16>

Height 36: SU(26): t47: i32,i32 = ADDri_r32 t2, TargetConstant:i32<16>

Height 44: SU(17): t9: f32,ch = LDRf32<Mem:Volatile LD4[%scevgep8](tbaa=<0x46205c8>)> t4, TargetConstant:i32<-8>, t0


*** Scheduling [44]: SU(28): t44: i32,i32 = ADDri_r32 t4, TargetConstant:i32<16>

FPR64_with_isub_lo_in_FPR32: 4 / 26

Examining Available:
Height 36: SU(26): t47: i32,i32 = ADDri_r32 t2, TargetConstant:i32<16>

Height 44: SU(17): t9: f32,ch = LDRf32<Mem:Volatile LD4[%scevgep8](tbaa=<0x46205c8>)> t4, TargetConstant:i32<-8>, t0


*** Scheduling [45]: SU(26): t47: i32,i32 = ADDri_r32 t2, TargetConstant:i32<16>

FPR64_with_isub_lo_in_FPR32: 3 / 26

Examining Available:
Height 45: SU(23): t2: i32,ch = CopyFromReg t0, Register:i32 %vreg13

Height 44: SU(17): t9: f32,ch = LDRf32<Mem:Volatile LD4[%scevgep8](tbaa=<0x46205c8>)> t4, TargetConstant:i32<-8>, t0


*** Scheduling [46]: SU(23): t2: i32,ch = CopyFromReg t0, Register:i32 %vreg13

FPR64_with_isub_lo_in_FPR32: 2 / 26

Examining Available:
Height 44: SU(17): t9: f32,ch = LDRf32<Mem:Volatile LD4[%scevgep8](tbaa=<0x46205c8>)> t4, TargetConstant:i32<-8>, t0


*** Scheduling [47]: SU(17): t9: f32,ch = LDRf32<Mem:Volatile LD4[%scevgep8](tbaa=<0x46205c8>)> t4, TargetConstant:i32<-8>, t0

FPR64_with_isub_lo_in_FPR32: 1 / 26

Examining Available:
Height 47: SU(18): t4: i32,ch = CopyFromReg t0, Register:i32 %vreg14


*** Scheduling [48]: SU(18): t4: i32,ch = CopyFromReg t0, Register:i32 %vreg14

*** Final schedule ***
SU(18): t4: i32,ch = CopyFromReg t0, Register:i32 %vreg14

SU(17): t9: f32,ch = LDRf32<Mem:Volatile LD4[%scevgep8](tbaa=<0x46205c8>)> t4, TargetConstant:i32<-8>, t0

SU(23): t2: i32,ch = CopyFromReg t0, Register:i32 %vreg13

SU(26): t47: i32,i32 = ADDri_r32 t2, TargetConstant:i32<16>

SU(28): t44: i32,i32 = ADDri_r32 t4, TargetConstant:i32<16>

SU(16): t12: f32,ch = LDRf32<Mem:Volatile LD4[%scevgep9](tbaa=<0x46205c8>)> t4, TargetConstant:i32<-4>, t9:1

SU(4): t39: i32,ch = CopyFromReg t0, Register:i32 %vreg15

SU(3): t40: i32,i32 = ADDri_r32 t39, TargetConstant:i32<4>

SU(15): t13: f32,ch = LDRf32<Mem:Volatile LD4[%lsr.iv5](tbaa=<0x46205c8>)> t4, TargetConstant:i32<0>, t12:1

SU(14): t16: f32,ch = LDRf32<Mem:Volatile LD4[%scevgep7](tbaa=<0x46205c8>)> t4, TargetConstant:i32<4>, t13:1

SU(13): t21: f32,ch = LDRf32<Mem:LD4[%scevgep15](tbaa=<0x46205c8>)> t2, TargetConstant:i32<-8>, t16:1

SU(20): t18: f32,ch = CopyFromReg t0, Register:f32 %vreg12

SU(19): t22: f32,i32 = FMADDrr_r32 t21, t18, t9

SU(25): t49: ch = CopyToReg t0, Register:i32 %vreg18, t47

SU(27): t46: ch = CopyToReg t0, Register:i32 %vreg17, t44

SU(29): t42: ch = CopyToReg t0, Register:i32 %vreg16, t40

SU(12): t23: ch = STRf32<Mem:ST4[%scevgep15](tbaa=<0x46205c8>)> t22, t2, TargetConstant:i32<-8>, t21:1

SU(11): t26: f32,ch = LDRf32<Mem:LD4[%scevgep17](tbaa=<0x46205c8>)> t2, TargetConstant:i32<-4>, t23

SU(21): t27: f32,i32 = FMADDrr_r32 t26, t18, t12

SU(10): t28: ch = STRf32<Mem:ST4[%scevgep17](tbaa=<0x46205c8>)> t27, t2, TargetConstant:i32<-4>, t26:1

SU(9): t30: f32,ch = LDRf32<Mem:LD4[%lsr.iv1214](tbaa=<0x46205c8>)> t2, TargetConstant:i32<0>, t28

SU(22): t31: f32,i32 = FMADDrr_r32 t30, t18, t13

SU(8): t32: ch = STRf32<Mem:ST4[%lsr.iv1214](tbaa=<0x46205c8>)> t31, t2, TargetConstant:i32<0>, t30:1

SU(7): t35: f32,ch = LDRf32<Mem:LD4[%scevgep16](tbaa=<0x46205c8>)> t2, TargetConstant:i32<4>, t32

SU(24): t36: f32,i32 = FMADDrr_r32 t35, t18, t16

SU(2): t59: i32,i32,glue = CMPri_r32 t40, TargetConstant:i32<8>

SU(6): t37: ch = STRf32<Mem:ST4[%scevgep16](tbaa=<0x46205c8>)> t36, t2, TargetConstant:i32<4>, t35:1

SU(5): t54: ch = TokenFactor t42, t46, t49, t37

SU(1): t60: ch = BCC BasicBlock:ch<for.body13 0x46b4a58>, TargetConstant:i32<8>, t63, t63:1

    t63: ch,glue = CopyToReg t54, Register:i32 %STATUS, t59:1

SU(0): t57: ch = BNONE32 BasicBlock:ch<for.end60 0x46b4c28>, t60


Total amount of phi nodes to update: 3
Node 0 : (0x46b4b08, 2147483666)
Node 1 : (0x46b4b68, 2147483665)
Node 2 : (0x46b4bc8, 2147483664)
Initial selection DAG: BB#7 'matmac:for.end60'
SelectionDAG has 24 nodes:
  t0: ch = EntryToken
    t4: i32,ch = CopyFromReg t0, Register:i32 %vreg10
  t6: i32 = add t4, Constant:i32<1>
  t11: ch = ValueType:i32
        t8: ch = CopyToReg t0, Register:i32 %vreg19, t6
            t2: i32,ch = CopyFromReg t0, Register:i32 %vreg9
            t10: i32,ch = CopyFromReg t0, Register:i32 %vreg1
          t12: i32 = add t2, t10
        t14: ch = CopyToReg t0, Register:i32 %vreg20, t12
      t20: ch = TokenFactor t8, t14
        t16: i32,ch = CopyFromReg t0, Register:i32 %vreg33
      t18: i1 = setcc t6, t16, seteq:ch
    t21: ch = brcond t20, t18, BasicBlock:ch<for.cond64.preheader 0x46b4838>
  t23: ch = br t21, BasicBlock:ch<for.body9 0x46b48e8>



Combining: t23: ch = br t21, BasicBlock:ch<for.body9 0x46b48e8>

Combining: t22: ch = BasicBlock<for.body9 0x46b48e8>

Combining: t21: ch = brcond t20, t18, BasicBlock:ch<for.cond64.preheader 0x46b4838>
 ... into: t24: ch = br_cc t20, seteq:ch, t6, t16, BasicBlock:ch<for.cond64.preheader 0x46b4838>

Combining: t23: ch = br t24, BasicBlock:ch<for.body9 0x46b48e8>

Combining: t24: ch = br_cc t20, seteq:ch, t6, t16, BasicBlock:ch<for.cond64.preheader 0x46b4838>

Combining: t20: ch = TokenFactor t8, t14

Combining: t19: ch = BasicBlock<for.cond64.preheader 0x46b4838>

Combining: t17: ch = seteq

Combining: t16: i32,ch = CopyFromReg t0, Register:i32 %vreg33

Combining: t15: i32 = Register %vreg33

Combining: t14: ch = CopyToReg t0, Register:i32 %vreg20, t12

Combining: t13: i32 = Register %vreg20

Combining: t12: i32 = add t2, t10

Combining: t10: i32,ch = CopyFromReg t0, Register:i32 %vreg1

Combining: t9: i32 = Register %vreg1

Combining: t8: ch = CopyToReg t0, Register:i32 %vreg19, t6

Combining: t7: i32 = Register %vreg19

Combining: t6: i32 = add t4, Constant:i32<1>

Combining: t5: i32 = Constant<1>

Combining: t4: i32,ch = CopyFromReg t0, Register:i32 %vreg10

Combining: t3: i32 = Register %vreg10

Combining: t2: i32,ch = CopyFromReg t0, Register:i32 %vreg9

Combining: t1: i32 = Register %vreg9

Combining: t0: ch = EntryToken
Optimized lowered selection DAG: BB#7 'matmac:for.end60'
SelectionDAG has 22 nodes:
  t0: ch = EntryToken
    t4: i32,ch = CopyFromReg t0, Register:i32 %vreg10
  t6: i32 = add t4, Constant:i32<1>
        t8: ch = CopyToReg t0, Register:i32 %vreg19, t6
            t2: i32,ch = CopyFromReg t0, Register:i32 %vreg9
            t10: i32,ch = CopyFromReg t0, Register:i32 %vreg1
          t12: i32 = add t2, t10
        t14: ch = CopyToReg t0, Register:i32 %vreg20, t12
      t20: ch = TokenFactor t8, t14
      t16: i32,ch = CopyFromReg t0, Register:i32 %vreg33
    t24: ch = br_cc t20, seteq:ch, t6, t16, BasicBlock:ch<for.cond64.preheader 0x46b4838>
  t23: ch = br t24, BasicBlock:ch<for.body9 0x46b48e8>


Legally typed node: t22: ch = BasicBlock<for.body9 0x46b48e8>

Legally typed node: t19: ch = BasicBlock<for.cond64.preheader 0x46b4838>

Legally typed node: t17: ch = seteq

Legally typed node: t15: i32 = Register %vreg33

Legally typed node: t13: i32 = Register %vreg20

Legally typed node: t9: i32 = Register %vreg1

Legally typed node: t7: i32 = Register %vreg19

Legally typed node: t5: i32 = Constant<1>

Legally typed node: t3: i32 = Register %vreg10

Legally typed node: t1: i32 = Register %vreg9

Legally typed node: t0: ch = EntryToken

Legally typed node: t2: i32,ch = CopyFromReg t0, Register:i32 %vreg9

Legally typed node: t4: i32,ch = CopyFromReg t0, Register:i32 %vreg10

Legally typed node: t6: i32 = add t4, Constant:i32<1>

Legally typed node: t8: ch = CopyToReg t0, Register:i32 %vreg19, t6

Legally typed node: t10: i32,ch = CopyFromReg t0, Register:i32 %vreg1

Legally typed node: t12: i32 = add t2, t10

Legally typed node: t14: ch = CopyToReg t0, Register:i32 %vreg20, t12

Legally typed node: t20: ch = TokenFactor t8, t14

Legally typed node: t16: i32,ch = CopyFromReg t0, Register:i32 %vreg33

Legally typed node: t24: ch = br_cc t20, seteq:ch, t6, t16, BasicBlock:ch<for.cond64.preheader 0x46b4838>

Legally typed node: t23: ch = br t24, BasicBlock:ch<for.body9 0x46b48e8>

Legally typed node: t65535: ch = handlenode t23

Type-legalized selection DAG: BB#7 'matmac:for.end60'
SelectionDAG has 22 nodes:
  t0: ch = EntryToken
    t4: i32,ch = CopyFromReg t0, Register:i32 %vreg10
  t6: i32 = add t4, Constant:i32<1>
        t8: ch = CopyToReg t0, Register:i32 %vreg19, t6
            t2: i32,ch = CopyFromReg t0, Register:i32 %vreg9
            t10: i32,ch = CopyFromReg t0, Register:i32 %vreg1
          t12: i32 = add t2, t10
        t14: ch = CopyToReg t0, Register:i32 %vreg20, t12
      t20: ch = TokenFactor t8, t14
      t16: i32,ch = CopyFromReg t0, Register:i32 %vreg33
    t24: ch = br_cc t20, seteq:ch, t6, t16, BasicBlock:ch<for.cond64.preheader 0x46b4838>
  t23: ch = br t24, BasicBlock:ch<for.body9 0x46b48e8>



Legalizing: t23: ch = br t24, BasicBlock:ch<for.body9 0x46b48e8>

Legalizing: t24: ch = br_cc t20, seteq:ch, t6, t16, BasicBlock:ch<for.cond64.preheader 0x46b4838>
 ... replacing: t24: ch = br_cc t20, seteq:ch, t6, t16, BasicBlock:ch<for.cond64.preheader 0x46b4838>
     with:      t27: ch,glue = EpiphanyISD::BRCC t20, BasicBlock:ch<for.cond64.preheader 0x46b4838>, Constant:i32<0>, t25:1

Legalizing: t20: ch = TokenFactor t8, t14

Legalizing: t14: ch = CopyToReg t0, Register:i32 %vreg20, t12

Legalizing: t8: ch = CopyToReg t0, Register:i32 %vreg19, t6

Legalizing: t12: i32 = add t2, t10

Legalizing: t6: i32 = add t4, Constant:i32<1>

Legalizing: t16: i32,ch = CopyFromReg t0, Register:i32 %vreg33

Legalizing: t10: i32,ch = CopyFromReg t0, Register:i32 %vreg1

Legalizing: t4: i32,ch = CopyFromReg t0, Register:i32 %vreg10

Legalizing: t2: i32,ch = CopyFromReg t0, Register:i32 %vreg9

Legalizing: t22: ch = BasicBlock<for.body9 0x46b48e8>

Legalizing: t19: ch = BasicBlock<for.cond64.preheader 0x46b4838>

Legalizing: t15: i32 = Register %vreg33

Legalizing: t13: i32 = Register %vreg20

Legalizing: t9: i32 = Register %vreg1

Legalizing: t7: i32 = Register %vreg19

Legalizing: t5: i32 = Constant<1>

Legalizing: t3: i32 = Register %vreg10

Legalizing: t1: i32 = Register %vreg9

Legalizing: t0: ch = EntryToken

Legalizing: t27: ch,glue = EpiphanyISD::BRCC t20, BasicBlock:ch<for.cond64.preheader 0x46b4838>, Constant:i32<0>, t25:1

Legalizing: t26: i32 = Constant<0>

Legalizing: t25: i32,i32 = EpiphanyISD::CMP t6, t16
Legalized selection DAG: BB#7 'matmac:for.end60'
SelectionDAG has 23 nodes:
  t0: ch = EntryToken
    t4: i32,ch = CopyFromReg t0, Register:i32 %vreg10
  t6: i32 = add t4, Constant:i32<1>
        t8: ch = CopyToReg t0, Register:i32 %vreg19, t6
            t2: i32,ch = CopyFromReg t0, Register:i32 %vreg9
            t10: i32,ch = CopyFromReg t0, Register:i32 %vreg1
          t12: i32 = add t2, t10
        t14: ch = CopyToReg t0, Register:i32 %vreg20, t12
      t20: ch = TokenFactor t8, t14
        t16: i32,ch = CopyFromReg t0, Register:i32 %vreg33
      t25: i32,i32 = EpiphanyISD::CMP t6, t16
    t27: ch,glue = EpiphanyISD::BRCC t20, BasicBlock:ch<for.cond64.preheader 0x46b4838>, Constant:i32<0>, t25:1
  t23: ch = br t27, BasicBlock:ch<for.body9 0x46b48e8>



Legalizing: t27: ch,glue = EpiphanyISD::BRCC t20, BasicBlock:ch<for.cond64.preheader 0x46b4838>, Constant:i32<0>, t25:1

Combining: t27: ch,glue = EpiphanyISD::BRCC t20, BasicBlock:ch<for.cond64.preheader 0x46b4838>, Constant:i32<0>, t25:1

Legalizing: t26: i32 = Constant<0>

Combining: t26: i32 = Constant<0>

Legalizing: t25: i32,i32 = EpiphanyISD::CMP t6, t16

Combining: t25: i32,i32 = EpiphanyISD::CMP t6, t16

Legalizing: t23: ch = br t27, BasicBlock:ch<for.body9 0x46b48e8>

Combining: t23: ch = br t27, BasicBlock:ch<for.body9 0x46b48e8>

Legalizing: t20: ch = TokenFactor t8, t14

Combining: t20: ch = TokenFactor t8, t14

Legalizing: t14: ch = CopyToReg t0, Register:i32 %vreg20, t12

Combining: t14: ch = CopyToReg t0, Register:i32 %vreg20, t12

Legalizing: t8: ch = CopyToReg t0, Register:i32 %vreg19, t6

Combining: t8: ch = CopyToReg t0, Register:i32 %vreg19, t6

Legalizing: t12: i32 = add t2, t10

Combining: t12: i32 = add t2, t10

Legalizing: t6: i32 = add t4, Constant:i32<1>

Combining: t6: i32 = add t4, Constant:i32<1>

Legalizing: t16: i32,ch = CopyFromReg t0, Register:i32 %vreg33

Combining: t16: i32,ch = CopyFromReg t0, Register:i32 %vreg33

Legalizing: t10: i32,ch = CopyFromReg t0, Register:i32 %vreg1

Combining: t10: i32,ch = CopyFromReg t0, Register:i32 %vreg1

Legalizing: t4: i32,ch = CopyFromReg t0, Register:i32 %vreg10

Combining: t4: i32,ch = CopyFromReg t0, Register:i32 %vreg10

Legalizing: t2: i32,ch = CopyFromReg t0, Register:i32 %vreg9

Combining: t2: i32,ch = CopyFromReg t0, Register:i32 %vreg9

Legalizing: t22: ch = BasicBlock<for.body9 0x46b48e8>

Combining: t22: ch = BasicBlock<for.body9 0x46b48e8>

Legalizing: t19: ch = BasicBlock<for.cond64.preheader 0x46b4838>

Combining: t19: ch = BasicBlock<for.cond64.preheader 0x46b4838>

Legalizing: t15: i32 = Register %vreg33

Combining: t15: i32 = Register %vreg33

Legalizing: t13: i32 = Register %vreg20

Combining: t13: i32 = Register %vreg20

Legalizing: t9: i32 = Register %vreg1

Combining: t9: i32 = Register %vreg1

Legalizing: t7: i32 = Register %vreg19

Combining: t7: i32 = Register %vreg19

Legalizing: t5: i32 = Constant<1>

Combining: t5: i32 = Constant<1>

Legalizing: t3: i32 = Register %vreg10

Combining: t3: i32 = Register %vreg10

Legalizing: t1: i32 = Register %vreg9

Combining: t1: i32 = Register %vreg9

Legalizing: t0: ch = EntryToken

Combining: t0: ch = EntryToken
Optimized legalized selection DAG: BB#7 'matmac:for.end60'
SelectionDAG has 23 nodes:
  t0: ch = EntryToken
    t4: i32,ch = CopyFromReg t0, Register:i32 %vreg10
  t6: i32 = add t4, Constant:i32<1>
        t8: ch = CopyToReg t0, Register:i32 %vreg19, t6
            t2: i32,ch = CopyFromReg t0, Register:i32 %vreg9
            t10: i32,ch = CopyFromReg t0, Register:i32 %vreg1
          t12: i32 = add t2, t10
        t14: ch = CopyToReg t0, Register:i32 %vreg20, t12
      t20: ch = TokenFactor t8, t14
        t16: i32,ch = CopyFromReg t0, Register:i32 %vreg33
      t25: i32,i32 = EpiphanyISD::CMP t6, t16
    t27: ch,glue = EpiphanyISD::BRCC t20, BasicBlock:ch<for.cond64.preheader 0x46b4838>, Constant:i32<0>, t25:1
  t23: ch = br t27, BasicBlock:ch<for.body9 0x46b48e8>


===== Instruction selection begins: BB#7 'for.end60'
Selecting: t23: ch = br t27, BasicBlock:ch<for.body9 0x46b48e8>

ISEL: Starting pattern match on root node: t23: ch = br t27, BasicBlock:ch<for.body9 0x46b48e8>

  Initial Opcode index to 4515
  Morphed node: t23: ch = BNONE32 BasicBlock:ch<for.body9 0x46b48e8>, t27

ISEL: Match complete!
Selecting: t27: ch,glue = EpiphanyISD::BRCC t20, BasicBlock:ch<for.cond64.preheader 0x46b4838>, Constant:i32<0>, t25:1

ISEL: Starting pattern match on root node: t27: ch,glue = EpiphanyISD::BRCC t20, BasicBlock:ch<for.cond64.preheader 0x46b4838>, Constant:i32<0>, t25:1

  Initial Opcode index to 2902
  Morphed node: t27: ch = BCC BasicBlock:ch<for.cond64.preheader 0x46b4838>, TargetConstant:i32<0>, t30, t30:1

ISEL: Match complete!
Selecting: t20: ch = TokenFactor t8, t14

Selecting: t14: ch = CopyToReg t0, Register:i32 %vreg20, t12

Selecting: t8: ch = CopyToReg t0, Register:i32 %vreg19, t6

Selecting: t25: i32,i32 = EpiphanyISD::CMP t6, t16

ISEL: Starting pattern match on root node: t25: i32,i32 = EpiphanyISD::CMP t6, t16

  Initial Opcode index to 1952
  Match failed at index 1962
  Continuing at 2003
  Morphed node: t25: i32,i32,glue = CMPrr_r32 t6, t16

ISEL: Match complete!
Selecting: t12: i32 = add t2, t10

ISEL: Starting pattern match on root node: t12: i32 = add t2, t10

  Initial Opcode index to 1567
  Match failed at index 1572
  Continuing at 1611
  Morphed node: t12: i32,i32 = ADDrr_r32 t2, t10

ISEL: Match complete!
Selecting: t6: i32 = add t4, Constant:i32<1>

ISEL: Starting pattern match on root node: t6: i32 = add t4, Constant:i32<1>

  Initial Opcode index to 1567
  Morphed node: t6: i32,i32 = ADDri_r32 t4, TargetConstant:i32<1>

ISEL: Match complete!
Selecting: t16: i32,ch = CopyFromReg t0, Register:i32 %vreg33

Selecting: t10: i32,ch = CopyFromReg t0, Register:i32 %vreg1

Selecting: t4: i32,ch = CopyFromReg t0, Register:i32 %vreg10

Selecting: t2: i32,ch = CopyFromReg t0, Register:i32 %vreg9

Selecting: t22: ch = BasicBlock<for.body9 0x46b48e8>

Selecting: t19: ch = BasicBlock<for.cond64.preheader 0x46b4838>

Selecting: t15: i32 = Register %vreg33

Selecting: t13: i32 = Register %vreg20

Selecting: t9: i32 = Register %vreg1

Selecting: t7: i32 = Register %vreg19

Selecting: t3: i32 = Register %vreg10

Selecting: t1: i32 = Register %vreg9

Selecting: t0: ch = EntryToken

===== Instruction selection ends:
Selected selection DAG: BB#7 'matmac:for.end60'
SelectionDAG has 25 nodes:
  t0: ch = EntryToken
    t4: i32,ch = CopyFromReg t0, Register:i32 %vreg10
  t6: i32,i32 = ADDri_r32 t4, TargetConstant:i32<1>
      t8: ch = CopyToReg t0, Register:i32 %vreg19, t6
          t2: i32,ch = CopyFromReg t0, Register:i32 %vreg9
          t10: i32,ch = CopyFromReg t0, Register:i32 %vreg1
        t12: i32,i32 = ADDrr_r32 t2, t10
      t14: ch = CopyToReg t0, Register:i32 %vreg20, t12
    t20: ch = TokenFactor t8, t14
      t16: i32,ch = CopyFromReg t0, Register:i32 %vreg33
    t25: i32,i32,glue = CMPrr_r32 t6, t16
  t30: ch,glue = CopyToReg t20, Register:i32 %STATUS, t25:1
    t27: ch = BCC BasicBlock:ch<for.cond64.preheader 0x46b4838>, TargetConstant:i32<0>, t30, t30:1
  t23: ch = BNONE32 BasicBlock:ch<for.body9 0x46b48e8>, t27


********** List Scheduling BB#7 'for.end60' **********
SU(0): t23: ch = BNONE32 BasicBlock:ch<for.body9 0x46b48e8>, t27

  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 8
  Depth              : 6
  Height             : 0
  Predecessors:
   ord  SU(1): Latency=1
SU(1): t27: ch = BCC BasicBlock:ch<for.cond64.preheader 0x46b4838>, TargetConstant:i32<0>, t30, t30:1

    t30: ch,glue = CopyToReg t20, Register:i32 %STATUS, t25:1

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 8
  Depth              : 5
  Height             : 1
  Predecessors:
   ord  SU(6): Latency=0
   data SU(2): Latency=3 Reg=%STATUS
  Successors:
   ord  SU(0): Latency=1
SU(2): t25: i32,i32,glue = CMPrr_r32 t6, t16

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 5
  Depth              : 2
  Height             : 4
  Predecessors:
   data SU(4): Latency=2
   data SU(3): Latency=0
  Successors:
   data SU(1): Latency=3 Reg=%STATUS
SU(3): t16: i32,ch = CopyFromReg t0, Register:i32 %vreg33

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 0
  Depth              : 0
  Height             : 4
  Successors:
   data SU(2): Latency=0
SU(4): t6: i32,i32 = ADDri_r32 t4, TargetConstant:i32<1>

  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 1
  Latency            : 5
  Depth              : 0
  Height             : 6
  Predecessors:
   data SU(5): Latency=0
  Successors:
   data SU(2): Latency=2
   data SU(11): Latency=3
SU(5): t4: i32,ch = CopyFromReg t0, Register:i32 %vreg10

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 0
  Depth              : 0
  Height             : 6
  Successors:
   data SU(4): Latency=0
SU(6): t20: ch = TokenFactor t8, t14

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 4
  Height             : 1
  Predecessors:
   ord  SU(11): Latency=1
   ord  SU(7): Latency=1
  Successors:
   ord  SU(1): Latency=0
SU(7): t14: ch = CopyToReg t0, Register:i32 %vreg20, t12

  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 3
  Height             : 2
  Predecessors:
   data SU(8): Latency=3
  Successors:
   ord  SU(6): Latency=1
SU(8): t12: i32,i32 = ADDrr_r32 t2, t10

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 5
  Depth              : 0
  Height             : 5
  Predecessors:
   data SU(10): Latency=0
   data SU(9): Latency=0
  Successors:
   data SU(7): Latency=3
SU(9): t10: i32,ch = CopyFromReg t0, Register:i32 %vreg1

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 0
  Depth              : 0
  Height             : 5
  Successors:
   data SU(8): Latency=0
SU(10): t2: i32,ch = CopyFromReg t0, Register:i32 %vreg9

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 0
  Depth              : 0
  Height             : 5
  Successors:
   data SU(8): Latency=0
SU(11): t8: ch = CopyToReg t0, Register:i32 %vreg19, t6

  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 3
  Height             : 2
  Predecessors:
   data SU(4): Latency=3
  Successors:
   ord  SU(6): Latency=1

Examining Available:
Height 0: SU(0): t23: ch = BNONE32 BasicBlock:ch<for.body9 0x46b48e8>, t27


*** Scheduling [0]: SU(0): t23: ch = BNONE32 BasicBlock:ch<for.body9 0x46b48e8>, t27


Examining Available:
Height 1: SU(1): t27: ch = BCC BasicBlock:ch<for.cond64.preheader 0x46b4838>, TargetConstant:i32<0>, t30, t30:1

    t30: ch,glue = CopyToReg t20, Register:i32 %STATUS, t25:1


*** Scheduling [1]: SU(1): t27: ch = BCC BasicBlock:ch<for.cond64.preheader 0x46b4838>, TargetConstant:i32<0>, t30, t30:1

    t30: ch,glue = CopyToReg t20, Register:i32 %STATUS, t25:1


Examining Available:
Height 1: SU(6): t20: ch = TokenFactor t8, t14

Height 4: SU(2): t25: i32,i32,glue = CMPrr_r32 t6, t16


*** Scheduling [2]: SU(6): t20: ch = TokenFactor t8, t14


Examining Available:
  SU (2)  defines a physreg SU(11)  has no physreg
  SU (2)  defines a physreg SU(7)  has no physreg
Height 4: SU(2): t25: i32,i32,glue = CMPrr_r32 t6, t16

Height 3: SU(11): t8: ch = CopyToReg t0, Register:i32 %vreg19, t6

Height 3: SU(7): t14: ch = CopyToReg t0, Register:i32 %vreg20, t12

  SU (2)  defines a physreg SU(11)  has no physreg
  SU (2)  defines a physreg SU(7)  has no physreg

*** Scheduling [4]: SU(2): t25: i32,i32,glue = CMPrr_r32 t6, t16

FPR64_with_isub_lo_in_FPR32: 2 / 26

Examining Available:
Height 4: SU(3): t16: i32,ch = CopyFromReg t0, Register:i32 %vreg33

Height 3: SU(11): t8: ch = CopyToReg t0, Register:i32 %vreg19, t6

Height 3: SU(7): t14: ch = CopyToReg t0, Register:i32 %vreg20, t12


*** Scheduling [5]: SU(3): t16: i32,ch = CopyFromReg t0, Register:i32 %vreg33

FPR64_with_isub_lo_in_FPR32: 1 / 26

Examining Available:
Height 3: SU(11): t8: ch = CopyToReg t0, Register:i32 %vreg19, t6

Height 3: SU(7): t14: ch = CopyToReg t0, Register:i32 %vreg20, t12


*** Scheduling [6]: SU(11): t8: ch = CopyToReg t0, Register:i32 %vreg19, t6

FPR64_with_isub_lo_in_FPR32: 1 / 26

Examining Available:
Height 3: SU(7): t14: ch = CopyToReg t0, Register:i32 %vreg20, t12

Height 9: SU(4): t6: i32,i32 = ADDri_r32 t4, TargetConstant:i32<1>


*** Scheduling [7]: SU(7): t14: ch = CopyToReg t0, Register:i32 %vreg20, t12

FPR64_with_isub_lo_in_FPR32: 2 / 26

Examining Available:
Height 9: SU(4): t6: i32,i32 = ADDri_r32 t4, TargetConstant:i32<1>

Height 10: SU(8): t12: i32,i32 = ADDrr_r32 t2, t10


*** Scheduling [9]: SU(4): t6: i32,i32 = ADDri_r32 t4, TargetConstant:i32<1>

FPR64_with_isub_lo_in_FPR32: 2 / 26

Examining Available:
Height 9: SU(5): t4: i32,ch = CopyFromReg t0, Register:i32 %vreg10

Height 10: SU(8): t12: i32,i32 = ADDrr_r32 t2, t10


*** Scheduling [10]: SU(5): t4: i32,ch = CopyFromReg t0, Register:i32 %vreg10

FPR64_with_isub_lo_in_FPR32: 1 / 26

Examining Available:
Height 10: SU(8): t12: i32,i32 = ADDrr_r32 t2, t10


*** Scheduling [11]: SU(8): t12: i32,i32 = ADDrr_r32 t2, t10

FPR64_with_isub_lo_in_FPR32: 2 / 26

Examining Available:
Height 11: SU(10): t2: i32,ch = CopyFromReg t0, Register:i32 %vreg9

Height 11: SU(9): t10: i32,ch = CopyFromReg t0, Register:i32 %vreg1


*** Scheduling [12]: SU(10): t2: i32,ch = CopyFromReg t0, Register:i32 %vreg9

FPR64_with_isub_lo_in_FPR32: 1 / 26

Examining Available:
Height 11: SU(9): t10: i32,ch = CopyFromReg t0, Register:i32 %vreg1


*** Scheduling [13]: SU(9): t10: i32,ch = CopyFromReg t0, Register:i32 %vreg1

*** Final schedule ***
SU(9): t10: i32,ch = CopyFromReg t0, Register:i32 %vreg1

SU(10): t2: i32,ch = CopyFromReg t0, Register:i32 %vreg9

SU(8): t12: i32,i32 = ADDrr_r32 t2, t10

SU(5): t4: i32,ch = CopyFromReg t0, Register:i32 %vreg10

SU(4): t6: i32,i32 = ADDri_r32 t4, TargetConstant:i32<1>

SU(7): t14: ch = CopyToReg t0, Register:i32 %vreg20, t12

SU(11): t8: ch = CopyToReg t0, Register:i32 %vreg19, t6

SU(3): t16: i32,ch = CopyFromReg t0, Register:i32 %vreg33

SU(2): t25: i32,i32,glue = CMPrr_r32 t6, t16

SU(6): t20: ch = TokenFactor t8, t14

SU(1): t27: ch = BCC BasicBlock:ch<for.cond64.preheader 0x46b4838>, TargetConstant:i32<0>, t30, t30:1

    t30: ch,glue = CopyToReg t20, Register:i32 %STATUS, t25:1

SU(0): t23: ch = BNONE32 BasicBlock:ch<for.body9 0x46b48e8>, t27


Total amount of phi nodes to update: 2
Node 0 : (0x46b4998, 2147483668)
Node 1 : (0x46b49f8, 2147483667)
Initial selection DAG: BB#4 'matmac:for.cond64.preheader'
SelectionDAG has 6 nodes:
      t0: ch = EntryToken
    t3: ch = CopyToReg t0, Register:i32 %vreg60, Constant:i32<0>
  t5: ch = br t3, BasicBlock:ch<for.body66 0x46b4cd8>



Combining: t5: ch = br t3, BasicBlock:ch<for.body66 0x46b4cd8>

Combining: t4: ch = BasicBlock<for.body66 0x46b4cd8>

Combining: t3: ch = CopyToReg t0, Register:i32 %vreg60, Constant:i32<0>

Combining: t2: i32 = Register %vreg60

Combining: t1: i32 = Constant<0>

Combining: t0: ch = EntryToken
Optimized lowered selection DAG: BB#4 'matmac:for.cond64.preheader'
SelectionDAG has 6 nodes:
      t0: ch = EntryToken
    t3: ch = CopyToReg t0, Register:i32 %vreg60, Constant:i32<0>
  t5: ch = br t3, BasicBlock:ch<for.body66 0x46b4cd8>


Legally typed node: t4: ch = BasicBlock<for.body66 0x46b4cd8>

Legally typed node: t2: i32 = Register %vreg60

Legally typed node: t1: i32 = Constant<0>

Legally typed node: t0: ch = EntryToken

Legally typed node: t3: ch = CopyToReg t0, Register:i32 %vreg60, Constant:i32<0>

Legally typed node: t5: ch = br t3, BasicBlock:ch<for.body66 0x46b4cd8>

Legally typed node: t65535: ch = handlenode t5

Type-legalized selection DAG: BB#4 'matmac:for.cond64.preheader'
SelectionDAG has 6 nodes:
      t0: ch = EntryToken
    t3: ch = CopyToReg t0, Register:i32 %vreg60, Constant:i32<0>
  t5: ch = br t3, BasicBlock:ch<for.body66 0x46b4cd8>



Legalizing: t5: ch = br t3, BasicBlock:ch<for.body66 0x46b4cd8>

Legalizing: t3: ch = CopyToReg t0, Register:i32 %vreg60, Constant:i32<0>

Legalizing: t4: ch = BasicBlock<for.body66 0x46b4cd8>

Legalizing: t2: i32 = Register %vreg60

Legalizing: t1: i32 = Constant<0>

Legalizing: t0: ch = EntryToken
Legalized selection DAG: BB#4 'matmac:for.cond64.preheader'
SelectionDAG has 6 nodes:
      t0: ch = EntryToken
    t3: ch = CopyToReg t0, Register:i32 %vreg60, Constant:i32<0>
  t5: ch = br t3, BasicBlock:ch<for.body66 0x46b4cd8>



Legalizing: t5: ch = br t3, BasicBlock:ch<for.body66 0x46b4cd8>

Combining: t5: ch = br t3, BasicBlock:ch<for.body66 0x46b4cd8>

Legalizing: t3: ch = CopyToReg t0, Register:i32 %vreg60, Constant:i32<0>

Combining: t3: ch = CopyToReg t0, Register:i32 %vreg60, Constant:i32<0>

Legalizing: t4: ch = BasicBlock<for.body66 0x46b4cd8>

Combining: t4: ch = BasicBlock<for.body66 0x46b4cd8>

Legalizing: t2: i32 = Register %vreg60

Combining: t2: i32 = Register %vreg60

Legalizing: t1: i32 = Constant<0>

Combining: t1: i32 = Constant<0>

Legalizing: t0: ch = EntryToken

Combining: t0: ch = EntryToken
Optimized legalized selection DAG: BB#4 'matmac:for.cond64.preheader'
SelectionDAG has 6 nodes:
      t0: ch = EntryToken
    t3: ch = CopyToReg t0, Register:i32 %vreg60, Constant:i32<0>
  t5: ch = br t3, BasicBlock:ch<for.body66 0x46b4cd8>


===== Instruction selection begins: BB#4 'for.cond64.preheader'
Selecting: t5: ch = br t3, BasicBlock:ch<for.body66 0x46b4cd8>

ISEL: Starting pattern match on root node: t5: ch = br t3, BasicBlock:ch<for.body66 0x46b4cd8>

  Initial Opcode index to 4515
  Morphed node: t5: ch = BNONE32 BasicBlock:ch<for.body66 0x46b4cd8>, t3

ISEL: Match complete!
Selecting: t3: ch = CopyToReg t0, Register:i32 %vreg60, Constant:i32<0>

Selecting: t4: ch = BasicBlock<for.body66 0x46b4cd8>

Selecting: t2: i32 = Register %vreg60

Selecting: t1: i32 = Constant<0>

ISEL: Starting pattern match on root node: t1: i32 = Constant<0>

  Initial Opcode index to 3685
  TypeSwitch[i32] from 3686 to 3689
  Morphed node: t1: i32 = MOVi32ri TargetConstant:i32<0>

ISEL: Match complete!
Selecting: t0: ch = EntryToken

===== Instruction selection ends:
Selected selection DAG: BB#4 'matmac:for.cond64.preheader'
SelectionDAG has 7 nodes:
      t0: ch = EntryToken
      t1: i32 = MOVi32ri TargetConstant:i32<0>
    t3: ch = CopyToReg t0, Register:i32 %vreg60, t1
  t5: ch = BNONE32 BasicBlock:ch<for.body66 0x46b4cd8>, t3


********** List Scheduling BB#4 'for.cond64.preheader' **********
SU(0): t5: ch = BNONE32 BasicBlock:ch<for.body66 0x46b4cd8>, t3

  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 8
  Depth              : 4
  Height             : 0
  Predecessors:
   ord  SU(1): Latency=1
SU(1): t3: ch = CopyToReg t0, Register:i32 %vreg60, t1

  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 3
  Height             : 1
  Predecessors:
   data SU(2): Latency=3
  Successors:
   ord  SU(0): Latency=1
SU(2): t1: i32 = MOVi32ri TargetConstant:i32<0>

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 5
  Depth              : 0
  Height             : 4
  Successors:
   data SU(1): Latency=3

Examining Available:
Height 0: SU(0): t5: ch = BNONE32 BasicBlock:ch<for.body66 0x46b4cd8>, t3


*** Scheduling [0]: SU(0): t5: ch = BNONE32 BasicBlock:ch<for.body66 0x46b4cd8>, t3


Examining Available:
Height 1: SU(1): t3: ch = CopyToReg t0, Register:i32 %vreg60, t1


*** Scheduling [1]: SU(1): t3: ch = CopyToReg t0, Register:i32 %vreg60, t1

FPR64_with_isub_lo_in_FPR32: 1 / 26

Examining Available:
Height 4: SU(2): t1: i32 = MOVi32ri TargetConstant:i32<0>


*** Scheduling [4]: SU(2): t1: i32 = MOVi32ri TargetConstant:i32<0>

*** Final schedule ***
SU(2): t1: i32 = MOVi32ri TargetConstant:i32<0>

SU(1): t3: ch = CopyToReg t0, Register:i32 %vreg60, t1

SU(0): t5: ch = BNONE32 BasicBlock:ch<for.body66 0x46b4cd8>, t3


Total amount of phi nodes to update: 2
Node 0 : (0x46b4d88, 2147483654)
Node 1 : (0x46b4de8, 2147483708)
Initial selection DAG: BB#8 'matmac:for.body66'
SelectionDAG has 30 nodes:
  t0: ch = EntryToken
  t3: i32,ch = CopyFromReg t0, Register:i32 %vreg22
  t5: i32 = Constant<0>
    t4: i32 = add FrameIndex:i32<0>, t3
  t7: f32,ch = load<LD4[%sunkaddr30](tbaa=<0x46205c8>)> t0, t4, undef:i32
  t9: i32,ch = CopyFromReg t0, Register:i32 %vreg21
  t10: f32,ch = load<Volatile LD4[%lsr.iv24](tbaa=<0x46205c8>)> t7:1, t9, undef:i32
  t14: i32 = add t3, Constant:i32<4>
        t16: ch = CopyToReg t0, Register:i32 %vreg23, t14
          t17: i32 = add t9, Constant:i32<4>
        t19: ch = CopyToReg t0, Register:i32 %vreg24, t17
          t11: f32 = fadd t7, t10
        t12: ch = store<Volatile ST4[%lsr.iv24](tbaa=<0x46205c8>)> t10:1, t11, t9, undef:i32
      t26: ch = TokenFactor t16, t19, t12
        t22: i1 = setcc t14, Constant:i32<32>, seteq:ch
      t24: i1 = xor t22, Constant:i1<-1>
    t27: ch = brcond t26, t24, BasicBlock:ch<for.body66 0x46b4cd8>
  t29: ch = br t27, BasicBlock:ch<for.end75 0x46b4e48>



Combining: t29: ch = br t27, BasicBlock:ch<for.end75 0x46b4e48>

Combining: t28: ch = BasicBlock<for.end75 0x46b4e48>

Combining: t27: ch = brcond t26, t24, BasicBlock:ch<for.body66 0x46b4cd8>

Combining: t26: ch = TokenFactor t16, t19, t12

Combining: t25: ch = BasicBlock<for.body66 0x46b4cd8>

Combining: t24: i1 = xor t22, Constant:i1<-1>
 ... into: t31: i1 = setcc t14, Constant:i32<32>, setne:ch

Combining: t27: ch = brcond t26, t31, BasicBlock:ch<for.body66 0x46b4cd8>
 ... into: t32: ch = br_cc t26, setne:ch, t14, Constant:i32<32>, BasicBlock:ch<for.body66 0x46b4cd8>

Combining: t26: ch = TokenFactor t16, t19, t12

Combining: t30: ch = setne

Combining: t25: ch = BasicBlock<for.body66 0x46b4cd8>

Combining: t29: ch = br t32, BasicBlock:ch<for.end75 0x46b4e48>

Combining: t32: ch = br_cc t26, setne:ch, t14, Constant:i32<32>, BasicBlock:ch<for.body66 0x46b4cd8>

Combining: t20: i32 = Constant<32>

Combining: t19: ch = CopyToReg t0, Register:i32 %vreg24, t17

Combining: t18: i32 = Register %vreg24

Combining: t17: i32 = add t9, Constant:i32<4>

Combining: t16: ch = CopyToReg t0, Register:i32 %vreg23, t14

Combining: t15: i32 = Register %vreg23

Combining: t14: i32 = add t3, Constant:i32<4>

Combining: t13: i32 = Constant<4>

Combining: t12: ch = store<Volatile ST4[%lsr.iv24](tbaa=<0x46205c8>)> t10:1, t11, t9, undef:i32

Combining: t11: f32 = fadd t7, t10

Combining: t10: f32,ch = load<Volatile LD4[%lsr.iv24](tbaa=<0x46205c8>)> t7:1, t9, undef:i32

Combining: t9: i32,ch = CopyFromReg t0, Register:i32 %vreg21

Combining: t8: i32 = Register %vreg21

Combining: t7: f32,ch = load<LD4[%sunkaddr30](tbaa=<0x46205c8>)> t0, t4, undef:i32

Combining: t6: i32 = undef

Combining: t4: i32 = add FrameIndex:i32<0>, t3

Combining: t3: i32,ch = CopyFromReg t0, Register:i32 %vreg22

Combining: t2: i32 = Register %vreg22

Combining: t1: i32 = FrameIndex<0>

Combining: t0: ch = EntryToken
Optimized lowered selection DAG: BB#8 'matmac:for.body66'
SelectionDAG has 26 nodes:
  t0: ch = EntryToken
  t3: i32,ch = CopyFromReg t0, Register:i32 %vreg22
    t4: i32 = add FrameIndex:i32<0>, t3
  t7: f32,ch = load<LD4[%sunkaddr30](tbaa=<0x46205c8>)> t0, t4, undef:i32
  t9: i32,ch = CopyFromReg t0, Register:i32 %vreg21
  t10: f32,ch = load<Volatile LD4[%lsr.iv24](tbaa=<0x46205c8>)> t7:1, t9, undef:i32
  t14: i32 = add t3, Constant:i32<4>
        t16: ch = CopyToReg t0, Register:i32 %vreg23, t14
          t17: i32 = add t9, Constant:i32<4>
        t19: ch = CopyToReg t0, Register:i32 %vreg24, t17
          t11: f32 = fadd t7, t10
        t12: ch = store<Volatile ST4[%lsr.iv24](tbaa=<0x46205c8>)> t10:1, t11, t9, undef:i32
      t26: ch = TokenFactor t16, t19, t12
    t32: ch = br_cc t26, setne:ch, t14, Constant:i32<32>, BasicBlock:ch<for.body66 0x46b4cd8>
  t29: ch = br t32, BasicBlock:ch<for.end75 0x46b4e48>


Legally typed node: t30: ch = setne

Legally typed node: t28: ch = BasicBlock<for.end75 0x46b4e48>

Legally typed node: t25: ch = BasicBlock<for.body66 0x46b4cd8>

Legally typed node: t20: i32 = Constant<32>

Legally typed node: t18: i32 = Register %vreg24

Legally typed node: t15: i32 = Register %vreg23

Legally typed node: t13: i32 = Constant<4>

Legally typed node: t8: i32 = Register %vreg21

Legally typed node: t6: i32 = undef

Legally typed node: t2: i32 = Register %vreg22

Legally typed node: t1: i32 = FrameIndex<0>

Legally typed node: t0: ch = EntryToken

Legally typed node: t3: i32,ch = CopyFromReg t0, Register:i32 %vreg22

Legally typed node: t4: i32 = add FrameIndex:i32<0>, t3

Legally typed node: t7: f32,ch = load<LD4[%sunkaddr30](tbaa=<0x46205c8>)> t0, t4, undef:i32

Legally typed node: t14: i32 = add t3, Constant:i32<4>

Legally typed node: t16: ch = CopyToReg t0, Register:i32 %vreg23, t14

Legally typed node: t9: i32,ch = CopyFromReg t0, Register:i32 %vreg21

Legally typed node: t10: f32,ch = load<Volatile LD4[%lsr.iv24](tbaa=<0x46205c8>)> t7:1, t9, undef:i32

Legally typed node: t11: f32 = fadd t7, t10

Legally typed node: t12: ch = store<Volatile ST4[%lsr.iv24](tbaa=<0x46205c8>)> t10:1, t11, t9, undef:i32

Legally typed node: t17: i32 = add t9, Constant:i32<4>

Legally typed node: t19: ch = CopyToReg t0, Register:i32 %vreg24, t17

Legally typed node: t26: ch = TokenFactor t16, t19, t12

Legally typed node: t32: ch = br_cc t26, setne:ch, t14, Constant:i32<32>, BasicBlock:ch<for.body66 0x46b4cd8>

Legally typed node: t29: ch = br t32, BasicBlock:ch<for.end75 0x46b4e48>

Legally typed node: t65535: ch = handlenode t29

Type-legalized selection DAG: BB#8 'matmac:for.body66'
SelectionDAG has 26 nodes:
  t0: ch = EntryToken
  t3: i32,ch = CopyFromReg t0, Register:i32 %vreg22
    t4: i32 = add FrameIndex:i32<0>, t3
  t7: f32,ch = load<LD4[%sunkaddr30](tbaa=<0x46205c8>)> t0, t4, undef:i32
  t9: i32,ch = CopyFromReg t0, Register:i32 %vreg21
  t10: f32,ch = load<Volatile LD4[%lsr.iv24](tbaa=<0x46205c8>)> t7:1, t9, undef:i32
  t14: i32 = add t3, Constant:i32<4>
        t16: ch = CopyToReg t0, Register:i32 %vreg23, t14
          t17: i32 = add t9, Constant:i32<4>
        t19: ch = CopyToReg t0, Register:i32 %vreg24, t17
          t11: f32 = fadd t7, t10
        t12: ch = store<Volatile ST4[%lsr.iv24](tbaa=<0x46205c8>)> t10:1, t11, t9, undef:i32
      t26: ch = TokenFactor t16, t19, t12
    t32: ch = br_cc t26, setne:ch, t14, Constant:i32<32>, BasicBlock:ch<for.body66 0x46b4cd8>
  t29: ch = br t32, BasicBlock:ch<for.end75 0x46b4e48>



Legalizing: t29: ch = br t32, BasicBlock:ch<for.end75 0x46b4e48>

Legalizing: t32: ch = br_cc t26, setne:ch, t14, Constant:i32<32>, BasicBlock:ch<for.body66 0x46b4cd8>
 ... replacing: t32: ch = br_cc t26, setne:ch, t14, Constant:i32<32>, BasicBlock:ch<for.body66 0x46b4cd8>
     with:      t35: ch,glue = EpiphanyISD::BRCC t26, BasicBlock:ch<for.body66 0x46b4cd8>, Constant:i32<1>, t33:1

Legalizing: t26: ch = TokenFactor t16, t19, t12

Legalizing: t12: ch = store<Volatile ST4[%lsr.iv24](tbaa=<0x46205c8>)> t10:1, t11, t9, undef:i32

Legalizing: t11: f32 = fadd t7, t10

Legalizing: t10: f32,ch = load<Volatile LD4[%lsr.iv24](tbaa=<0x46205c8>)> t7:1, t9, undef:i32

Legalizing: t19: ch = CopyToReg t0, Register:i32 %vreg24, t17

Legalizing: t7: f32,ch = load<LD4[%sunkaddr30](tbaa=<0x46205c8>)> t0, t4, undef:i32

Legalizing: t16: ch = CopyToReg t0, Register:i32 %vreg23, t14

Legalizing: t17: i32 = add t9, Constant:i32<4>

Legalizing: t4: i32 = add FrameIndex:i32<0>, t3

Legalizing: t14: i32 = add t3, Constant:i32<4>

Legalizing: t9: i32,ch = CopyFromReg t0, Register:i32 %vreg21

Legalizing: t3: i32,ch = CopyFromReg t0, Register:i32 %vreg22

Legalizing: t28: ch = BasicBlock<for.end75 0x46b4e48>

Legalizing: t25: ch = BasicBlock<for.body66 0x46b4cd8>

Legalizing: t20: i32 = Constant<32>

Legalizing: t18: i32 = Register %vreg24

Legalizing: t15: i32 = Register %vreg23

Legalizing: t13: i32 = Constant<4>

Legalizing: t8: i32 = Register %vreg21

Legalizing: t6: i32 = undef

Legalizing: t2: i32 = Register %vreg22

Legalizing: t1: i32 = FrameIndex<0>

Legalizing: t0: ch = EntryToken

Legalizing: t35: ch,glue = EpiphanyISD::BRCC t26, BasicBlock:ch<for.body66 0x46b4cd8>, Constant:i32<1>, t33:1

Legalizing: t34: i32 = Constant<1>

Legalizing: t33: i32,i32 = EpiphanyISD::CMP t14, Constant:i32<32>
Legalized selection DAG: BB#8 'matmac:for.body66'
SelectionDAG has 27 nodes:
  t0: ch = EntryToken
  t3: i32,ch = CopyFromReg t0, Register:i32 %vreg22
  t9: i32,ch = CopyFromReg t0, Register:i32 %vreg21
  t14: i32 = add t3, Constant:i32<4>
    t4: i32 = add FrameIndex:i32<0>, t3
  t7: f32,ch = load<LD4[%sunkaddr30](tbaa=<0x46205c8>)> t0, t4, undef:i32
  t10: f32,ch = load<Volatile LD4[%lsr.iv24](tbaa=<0x46205c8>)> t7:1, t9, undef:i32
        t16: ch = CopyToReg t0, Register:i32 %vreg23, t14
          t17: i32 = add t9, Constant:i32<4>
        t19: ch = CopyToReg t0, Register:i32 %vreg24, t17
          t11: f32 = fadd t7, t10
        t12: ch = store<Volatile ST4[%lsr.iv24](tbaa=<0x46205c8>)> t10:1, t11, t9, undef:i32
      t26: ch = TokenFactor t16, t19, t12
      t33: i32,i32 = EpiphanyISD::CMP t14, Constant:i32<32>
    t35: ch,glue = EpiphanyISD::BRCC t26, BasicBlock:ch<for.body66 0x46b4cd8>, Constant:i32<1>, t33:1
  t29: ch = br t35, BasicBlock:ch<for.end75 0x46b4e48>



Legalizing: t35: ch,glue = EpiphanyISD::BRCC t26, BasicBlock:ch<for.body66 0x46b4cd8>, Constant:i32<1>, t33:1

Combining: t35: ch,glue = EpiphanyISD::BRCC t26, BasicBlock:ch<for.body66 0x46b4cd8>, Constant:i32<1>, t33:1

Legalizing: t34: i32 = Constant<1>

Combining: t34: i32 = Constant<1>

Legalizing: t33: i32,i32 = EpiphanyISD::CMP t14, Constant:i32<32>

Combining: t33: i32,i32 = EpiphanyISD::CMP t14, Constant:i32<32>

Legalizing: t29: ch = br t35, BasicBlock:ch<for.end75 0x46b4e48>

Combining: t29: ch = br t35, BasicBlock:ch<for.end75 0x46b4e48>

Legalizing: t26: ch = TokenFactor t16, t19, t12

Combining: t26: ch = TokenFactor t16, t19, t12

Legalizing: t12: ch = store<Volatile ST4[%lsr.iv24](tbaa=<0x46205c8>)> t10:1, t11, t9, undef:i32

Combining: t12: ch = store<Volatile ST4[%lsr.iv24](tbaa=<0x46205c8>)> t10:1, t11, t9, undef:i32

Legalizing: t11: f32 = fadd t7, t10

Combining: t11: f32 = fadd t7, t10

Legalizing: t10: f32,ch = load<Volatile LD4[%lsr.iv24](tbaa=<0x46205c8>)> t7:1, t9, undef:i32

Combining: t10: f32,ch = load<Volatile LD4[%lsr.iv24](tbaa=<0x46205c8>)> t7:1, t9, undef:i32

Legalizing: t19: ch = CopyToReg t0, Register:i32 %vreg24, t17

Combining: t19: ch = CopyToReg t0, Register:i32 %vreg24, t17

Legalizing: t7: f32,ch = load<LD4[%sunkaddr30](tbaa=<0x46205c8>)> t0, t4, undef:i32

Combining: t7: f32,ch = load<LD4[%sunkaddr30](tbaa=<0x46205c8>)> t0, t4, undef:i32

Legalizing: t16: ch = CopyToReg t0, Register:i32 %vreg23, t14

Combining: t16: ch = CopyToReg t0, Register:i32 %vreg23, t14

Legalizing: t17: i32 = add t9, Constant:i32<4>

Combining: t17: i32 = add t9, Constant:i32<4>

Legalizing: t4: i32 = add FrameIndex:i32<0>, t3

Combining: t4: i32 = add FrameIndex:i32<0>, t3

Legalizing: t14: i32 = add t3, Constant:i32<4>

Combining: t14: i32 = add t3, Constant:i32<4>

Legalizing: t9: i32,ch = CopyFromReg t0, Register:i32 %vreg21

Combining: t9: i32,ch = CopyFromReg t0, Register:i32 %vreg21

Legalizing: t3: i32,ch = CopyFromReg t0, Register:i32 %vreg22

Combining: t3: i32,ch = CopyFromReg t0, Register:i32 %vreg22

Legalizing: t28: ch = BasicBlock<for.end75 0x46b4e48>

Combining: t28: ch = BasicBlock<for.end75 0x46b4e48>

Legalizing: t25: ch = BasicBlock<for.body66 0x46b4cd8>

Combining: t25: ch = BasicBlock<for.body66 0x46b4cd8>

Legalizing: t20: i32 = Constant<32>

Combining: t20: i32 = Constant<32>

Legalizing: t18: i32 = Register %vreg24

Combining: t18: i32 = Register %vreg24

Legalizing: t15: i32 = Register %vreg23

Combining: t15: i32 = Register %vreg23

Legalizing: t13: i32 = Constant<4>

Combining: t13: i32 = Constant<4>

Legalizing: t8: i32 = Register %vreg21

Combining: t8: i32 = Register %vreg21

Legalizing: t6: i32 = undef

Combining: t6: i32 = undef

Legalizing: t2: i32 = Register %vreg22

Combining: t2: i32 = Register %vreg22

Legalizing: t1: i32 = FrameIndex<0>

Combining: t1: i32 = FrameIndex<0>

Legalizing: t0: ch = EntryToken

Combining: t0: ch = EntryToken
Optimized legalized selection DAG: BB#8 'matmac:for.body66'
SelectionDAG has 27 nodes:
  t0: ch = EntryToken
  t3: i32,ch = CopyFromReg t0, Register:i32 %vreg22
  t9: i32,ch = CopyFromReg t0, Register:i32 %vreg21
  t14: i32 = add t3, Constant:i32<4>
    t4: i32 = add FrameIndex:i32<0>, t3
  t7: f32,ch = load<LD4[%sunkaddr30](tbaa=<0x46205c8>)> t0, t4, undef:i32
  t10: f32,ch = load<Volatile LD4[%lsr.iv24](tbaa=<0x46205c8>)> t7:1, t9, undef:i32
        t16: ch = CopyToReg t0, Register:i32 %vreg23, t14
          t17: i32 = add t9, Constant:i32<4>
        t19: ch = CopyToReg t0, Register:i32 %vreg24, t17
          t11: f32 = fadd t7, t10
        t12: ch = store<Volatile ST4[%lsr.iv24](tbaa=<0x46205c8>)> t10:1, t11, t9, undef:i32
      t26: ch = TokenFactor t16, t19, t12
      t33: i32,i32 = EpiphanyISD::CMP t14, Constant:i32<32>
    t35: ch,glue = EpiphanyISD::BRCC t26, BasicBlock:ch<for.body66 0x46b4cd8>, Constant:i32<1>, t33:1
  t29: ch = br t35, BasicBlock:ch<for.end75 0x46b4e48>


===== Instruction selection begins: BB#8 'for.body66'
Selecting: t29: ch = br t35, BasicBlock:ch<for.end75 0x46b4e48>

ISEL: Starting pattern match on root node: t29: ch = br t35, BasicBlock:ch<for.end75 0x46b4e48>

  Initial Opcode index to 4515
  Morphed node: t29: ch = BNONE32 BasicBlock:ch<for.end75 0x46b4e48>, t35

ISEL: Match complete!
Selecting: t35: ch,glue = EpiphanyISD::BRCC t26, BasicBlock:ch<for.body66 0x46b4cd8>, Constant:i32<1>, t33:1

ISEL: Starting pattern match on root node: t35: ch,glue = EpiphanyISD::BRCC t26, BasicBlock:ch<for.body66 0x46b4cd8>, Constant:i32<1>, t33:1

  Initial Opcode index to 2902
  Morphed node: t35: ch = BCC BasicBlock:ch<for.body66 0x46b4cd8>, TargetConstant:i32<1>, t38, t38:1

ISEL: Match complete!
Selecting: t26: ch = TokenFactor t16, t19, t12

Selecting: t12: ch = store<Volatile ST4[%lsr.iv24](tbaa=<0x46205c8>)> t10:1, t11, t9, undef:i32

ISEL: Starting pattern match on root node: t12: ch = store<Volatile ST4[%lsr.iv24](tbaa=<0x46205c8>)> t10:1, t11, t9, undef:i32

  Initial Opcode index to 842
  Skipped scope entry (due to false predicate) at index 848, continuing at 1255
  Morphed node: t12: ch = STRf32<Mem:Volatile ST4[%lsr.iv24](tbaa=<0x46205c8>)> t11, t9, TargetConstant:i32<0>, t10:1

ISEL: Match complete!
Selecting: t11: f32 = fadd t7, t10

ISEL: Starting pattern match on root node: t11: f32 = fadd t7, t10

  Initial Opcode index to 4733
  Match failed at index 4737
  Continuing at 4755
  Match failed at index 4757
  Continuing at 4776
  Match failed at index 4779
  Continuing at 4797
  Match failed at index 4799
  Continuing at 4818
  Morphed node: t11: f32,i32 = FADDrr_r32 t7, t10

ISEL: Match complete!
Selecting: t10: f32,ch = load<Volatile LD4[%lsr.iv24](tbaa=<0x46205c8>)> t7:1, t9, undef:i32

ISEL: Starting pattern match on root node: t10: f32,ch = load<Volatile LD4[%lsr.iv24](tbaa=<0x46205c8>)> t7:1, t9, undef:i32

  Initial Opcode index to 497
  Skipped scope entry (due to false predicate) at index 507, continuing at 543
  Match failed at index 546
  Continuing at 576
  Match failed at index 577
  Continuing at 613
  Match failed at index 616
  Continuing at 630
  Continuing at 631
  Match failed at index 634
  Continuing at 787
  TypeSwitch[f32] from 793 to 796
  Morphed node: t10: f32,ch = LDRf32<Mem:Volatile LD4[%lsr.iv24](tbaa=<0x46205c8>)> t9, TargetConstant:i32<0>, t7:1

ISEL: Match complete!
Selecting: t19: ch = CopyToReg t0, Register:i32 %vreg24, t17

Selecting: t7: f32,ch = load<LD4[%sunkaddr30](tbaa=<0x46205c8>)> t0, t4, undef:i32

ISEL: Starting pattern match on root node: t7: f32,ch = load<LD4[%sunkaddr30](tbaa=<0x46205c8>)> t0, t4, undef:i32

  Initial Opcode index to 497
  Skipped scope entry (due to false predicate) at index 507, continuing at 543
  Match failed at index 546
  Continuing at 576
  Match failed at index 577
  Continuing at 613
  Match failed at index 616
  Continuing at 630
  Continuing at 631
  OpcodeSwitch from 634 to 638
  Match failed at index 645
  Continuing at 787
  TypeSwitch[f32] from 793 to 796
  Morphed node: t7: f32,ch = LDRf32<Mem:LD4[%sunkaddr30](tbaa=<0x46205c8>)> t4, TargetConstant:i32<0>, t0

ISEL: Match complete!
Selecting: t16: ch = CopyToReg t0, Register:i32 %vreg23, t14

Selecting: t33: i32,i32 = EpiphanyISD::CMP t14, Constant:i32<32>

ISEL: Starting pattern match on root node: t33: i32,i32 = EpiphanyISD::CMP t14, Constant:i32<32>

  Initial Opcode index to 1952
  Morphed node: t33: i32,i32,glue = CMPri_r32 t14, TargetConstant:i32<32>

ISEL: Match complete!
Selecting: t17: i32 = add t9, Constant:i32<4>

ISEL: Starting pattern match on root node: t17: i32 = add t9, Constant:i32<4>

  Initial Opcode index to 1567
  Morphed node: t17: i32,i32 = ADDri_r32 t9, TargetConstant:i32<4>

ISEL: Match complete!
Selecting: t4: i32 = add FrameIndex:i32<0>, t3

ISEL: Starting pattern match on root node: t4: i32 = add FrameIndex:i32<0>, t3

  Initial Opcode index to 1567
  Match failed at index 1572
  Continuing at 1611
  Morphed node: t4: i32,i32 = ADDrr_r32 FrameIndex:i32<0>, t3

ISEL: Match complete!
Selecting: t14: i32 = add t3, Constant:i32<4>

ISEL: Starting pattern match on root node: t14: i32 = add t3, Constant:i32<4>

  Initial Opcode index to 1567
  Morphed node: t14: i32,i32 = ADDri_r32 t3, TargetConstant:i32<4>

ISEL: Match complete!
Selecting: t9: i32,ch = CopyFromReg t0, Register:i32 %vreg21

Selecting: t3: i32,ch = CopyFromReg t0, Register:i32 %vreg22

Selecting: t28: ch = BasicBlock<for.end75 0x46b4e48>

Selecting: t25: ch = BasicBlock<for.body66 0x46b4cd8>

Selecting: t18: i32 = Register %vreg24

Selecting: t15: i32 = Register %vreg23

Selecting: t8: i32 = Register %vreg21

Selecting: t2: i32 = Register %vreg22

Selecting: t1: i32 = FrameIndex<0>

ISEL: Starting pattern match on root node: t1: i32 = FrameIndex<0>

  Initial Opcode index to 1524
  Morphed node: t1: i32 = MOViPTR TargetFrameIndex:i32<0>, TargetConstant:i32<0>

ISEL: Match complete!
Selecting: t0: ch = EntryToken

===== Instruction selection ends:
Selected selection DAG: BB#8 'matmac:for.body66'
SelectionDAG has 30 nodes:
  t0: ch = EntryToken
  t3: i32,ch = CopyFromReg t0, Register:i32 %vreg22
  t9: i32,ch = CopyFromReg t0, Register:i32 %vreg21
  t14: i32,i32 = ADDri_r32 t3, TargetConstant:i32<4>
      t1: i32 = MOViPTR TargetFrameIndex:i32<0>, TargetConstant:i32<0>
    t4: i32,i32 = ADDrr_r32 t1, t3
  t7: f32,ch = LDRf32<Mem:LD4[%sunkaddr30](tbaa=<0x46205c8>)> t4, TargetConstant:i32<0>, t0
  t10: f32,ch = LDRf32<Mem:Volatile LD4[%lsr.iv24](tbaa=<0x46205c8>)> t9, TargetConstant:i32<0>, t7:1
      t16: ch = CopyToReg t0, Register:i32 %vreg23, t14
        t17: i32,i32 = ADDri_r32 t9, TargetConstant:i32<4>
      t19: ch = CopyToReg t0, Register:i32 %vreg24, t17
        t11: f32,i32 = FADDrr_r32 t7, t10
      t12: ch = STRf32<Mem:Volatile ST4[%lsr.iv24](tbaa=<0x46205c8>)> t11, t9, TargetConstant:i32<0>, t10:1
    t26: ch = TokenFactor t16, t19, t12
    t33: i32,i32,glue = CMPri_r32 t14, TargetConstant:i32<32>
  t38: ch,glue = CopyToReg t26, Register:i32 %STATUS, t33:1
    t35: ch = BCC BasicBlock:ch<for.body66 0x46b4cd8>, TargetConstant:i32<1>, t38, t38:1
  t29: ch = BNONE32 BasicBlock:ch<for.end75 0x46b4e48>, t35


********** List Scheduling BB#8 'for.body66' **********
SU(0): t29: ch = BNONE32 BasicBlock:ch<for.end75 0x46b4e48>, t35

  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 8
  Depth              : 17
  Height             : 0
  Predecessors:
   ord  SU(1): Latency=1
SU(1): t35: ch = BCC BasicBlock:ch<for.body66 0x46b4cd8>, TargetConstant:i32<1>, t38, t38:1

    t38: ch,glue = CopyToReg t26, Register:i32 %STATUS, t33:1

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 8
  Depth              : 16
  Height             : 1
  Predecessors:
   ord  SU(5): Latency=0
   data SU(2): Latency=3 Reg=%STATUS
  Successors:
   ord  SU(0): Latency=1
SU(2): t33: i32,i32,glue = CMPri_r32 t14, TargetConstant:i32<32>

  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 5
  Depth              : 2
  Height             : 4
  Predecessors:
   data SU(3): Latency=2
  Successors:
   data SU(1): Latency=3 Reg=%STATUS
SU(3): t14: i32,i32 = ADDri_r32 t3, TargetConstant:i32<4>

  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 1
  Latency            : 5
  Depth              : 0
  Height             : 6
  Predecessors:
   data SU(4): Latency=0
  Successors:
   data SU(2): Latency=2
   data SU(15): Latency=3
SU(4): t3: i32,ch = CopyFromReg t0, Register:i32 %vreg22

  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 1
  Latency            : 0
  Depth              : 0
  Height             : 15
  Successors:
   data SU(3): Latency=0
   data SU(9): Latency=0
SU(5): t26: ch = TokenFactor t16, t19, t12

  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 16
  Height             : 1
  Predecessors:
   ord  SU(15): Latency=1
   ord  SU(13): Latency=1
   ord  SU(6): Latency=1
  Successors:
   ord  SU(1): Latency=0
SU(6): t12: ch = STRf32<Mem:Volatile ST4[%lsr.iv24](tbaa=<0x46205c8>)> t11, t9, TargetConstant:i32<0>, t10:1

  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 5
  Depth              : 15
  Height             : 2
  Predecessors:
   data SU(12): Latency=4
   data SU(11): Latency=0
   ord  SU(7): Latency=1
  Successors:
   ord  SU(5): Latency=1
SU(7): t10: f32,ch = LDRf32<Mem:Volatile LD4[%lsr.iv24](tbaa=<0x46205c8>)> t9, TargetConstant:i32<0>, t7:1

  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 1
  Latency            : 6
  Depth              : 5
  Height             : 12
  Predecessors:
   data SU(11): Latency=0
   ord  SU(8): Latency=1
  Successors:
   ord  SU(6): Latency=1
   data SU(12): Latency=6
SU(8): t7: f32,ch = LDRf32<Mem:LD4[%sunkaddr30](tbaa=<0x46205c8>)> t4, TargetConstant:i32<0>, t0

  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 1
  Latency            : 6
  Depth              : 4
  Height             : 13
  Predecessors:
   data SU(9): Latency=2
  Successors:
   ord  SU(7): Latency=1
   data SU(12): Latency=4
SU(9): t4: i32,i32 = ADDrr_r32 t1, t3

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 5
  Depth              : 2
  Height             : 15
  Predecessors:
   data SU(10): Latency=2
   data SU(4): Latency=0
  Successors:
   data SU(8): Latency=2
SU(10): t1: i32 = MOViPTR TargetFrameIndex:i32<0>, TargetConstant:i32<0>

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 5
  Depth              : 0
  Height             : 17
  Successors:
   data SU(9): Latency=2
SU(11): t9: i32,ch = CopyFromReg t0, Register:i32 %vreg21

  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 1
  Latency            : 0
  Depth              : 0
  Height             : 12
  Successors:
   data SU(6): Latency=0
   data SU(7): Latency=0
   data SU(14): Latency=0
SU(12): t11: f32,i32 = FADDrr_r32 t7, t10

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 8
  Depth              : 11
  Height             : 6
  Predecessors:
   data SU(8): Latency=4
   data SU(7): Latency=6
  Successors:
   data SU(6): Latency=4
SU(13): t19: ch = CopyToReg t0, Register:i32 %vreg24, t17

  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 3
  Height             : 2
  Predecessors:
   data SU(14): Latency=3
  Successors:
   ord  SU(5): Latency=1
SU(14): t17: i32,i32 = ADDri_r32 t9, TargetConstant:i32<4>

  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 5
  Depth              : 0
  Height             : 5
  Predecessors:
   data SU(11): Latency=0
  Successors:
   data SU(13): Latency=3
SU(15): t16: ch = CopyToReg t0, Register:i32 %vreg23, t14

  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 3
  Height             : 2
  Predecessors:
   data SU(3): Latency=3
  Successors:
   ord  SU(5): Latency=1
VRegCycle: SU(14)

Examining Available:
Height 0: SU(0): t29: ch = BNONE32 BasicBlock:ch<for.end75 0x46b4e48>, t35


*** Scheduling [0]: SU(0): t29: ch = BNONE32 BasicBlock:ch<for.end75 0x46b4e48>, t35


Examining Available:
Height 1: SU(1): t35: ch = BCC BasicBlock:ch<for.body66 0x46b4cd8>, TargetConstant:i32<1>, t38, t38:1

    t38: ch,glue = CopyToReg t26, Register:i32 %STATUS, t33:1


*** Scheduling [1]: SU(1): t35: ch = BCC BasicBlock:ch<for.body66 0x46b4cd8>, TargetConstant:i32<1>, t38, t38:1

    t38: ch,glue = CopyToReg t26, Register:i32 %STATUS, t33:1


Examining Available:
Height 1: SU(5): t26: ch = TokenFactor t16, t19, t12

Height 4: SU(2): t33: i32,i32,glue = CMPri_r32 t14, TargetConstant:i32<32>


*** Scheduling [2]: SU(5): t26: ch = TokenFactor t16, t19, t12


Examining Available:
  SU (2)  defines a physreg SU(15)  has no physreg
  SU (2)  defines a physreg SU(13)  has no physreg
Depth of SU(2): 2 != SU(6): 15
Height 3: SU(6): t12: ch = STRf32<Mem:Volatile ST4[%lsr.iv24](tbaa=<0x46205c8>)> t11, t9, TargetConstant:i32<0>, t10:1

  SU (2)  defines a physreg SU(15)  has no physreg
  SU (2)  defines a physreg SU(13)  has no physreg
Height 4: SU(2): t33: i32,i32,glue = CMPri_r32 t14, TargetConstant:i32<32>

Height 3: SU(15): t16: ch = CopyToReg t0, Register:i32 %vreg23, t14

Height 3: SU(13): t19: ch = CopyToReg t0, Register:i32 %vreg24, t17

  SU (2)  defines a physreg SU(15)  has no physreg
  SU (2)  defines a physreg SU(13)  has no physreg
Depth of SU(2): 2 != SU(6): 15

*** Scheduling [3]: SU(6): t12: ch = STRf32<Mem:Volatile ST4[%lsr.iv24](tbaa=<0x46205c8>)> t11, t9, TargetConstant:i32<0>, t10:1

FPR64_with_isub_lo_in_FPR32: 2 / 26

Examining Available:
  SU (2)  defines a physreg SU(15)  has no physreg
  SU (2)  defines a physreg SU(13)  has no physreg
Depth of SU(2): 2 != SU(12): 11
Height 7: SU(12): t11: f32,i32 = FADDrr_r32 t7, t10

  SU (2)  defines a physreg SU(15)  has no physreg
  SU (2)  defines a physreg SU(13)  has no physreg
Height 4: SU(2): t33: i32,i32,glue = CMPri_r32 t14, TargetConstant:i32<32>

Height 3: SU(15): t16: ch = CopyToReg t0, Register:i32 %vreg23, t14

Height 3: SU(13): t19: ch = CopyToReg t0, Register:i32 %vreg24, t17

  SU (2)  defines a physreg SU(15)  has no physreg
  SU (2)  defines a physreg SU(13)  has no physreg
Depth of SU(2): 2 != SU(12): 11
    Interfering reg STATUS SU #12
  SU (2)  defines a physreg SU(15)  has no physreg
  SU (2)  defines a physreg SU(13)  has no physreg

*** Scheduling [4]: SU(2): t33: i32,i32,glue = CMPri_r32 t14, TargetConstant:i32<32>

FPR64_with_isub_lo_in_FPR32: 3 / 26
    Repushing SU #12

Examining Available:
Depth of SU(15): 3 != SU(12): 11
Height 7: SU(12): t11: f32,i32 = FADDrr_r32 t7, t10

Height 3: SU(15): t16: ch = CopyToReg t0, Register:i32 %vreg23, t14

Height 3: SU(13): t19: ch = CopyToReg t0, Register:i32 %vreg24, t17

Depth of SU(15): 3 != SU(12): 11

*** Scheduling [7]: SU(12): t11: f32,i32 = FADDrr_r32 t7, t10

FPR64_with_isub_lo_in_FPR32: 4 / 26

Examining Available:
Height 3: SU(15): t16: ch = CopyToReg t0, Register:i32 %vreg23, t14

Height 3: SU(13): t19: ch = CopyToReg t0, Register:i32 %vreg24, t17

Height 13: SU(7): t10: f32,ch = LDRf32<Mem:Volatile LD4[%lsr.iv24](tbaa=<0x46205c8>)> t9, TargetConstant:i32<0>, t7:1


*** Scheduling [8]: SU(15): t16: ch = CopyToReg t0, Register:i32 %vreg23, t14

FPR64_with_isub_lo_in_FPR32: 4 / 26

Examining Available:
Height 3: SU(13): t19: ch = CopyToReg t0, Register:i32 %vreg24, t17

Height 13: SU(7): t10: f32,ch = LDRf32<Mem:Volatile LD4[%lsr.iv24](tbaa=<0x46205c8>)> t9, TargetConstant:i32<0>, t7:1

Height 11: SU(3): t14: i32,i32 = ADDri_r32 t3, TargetConstant:i32<4>


*** Scheduling [9]: SU(13): t19: ch = CopyToReg t0, Register:i32 %vreg24, t17

FPR64_with_isub_lo_in_FPR32: 5 / 26

Examining Available:
Height 13: SU(7): t10: f32,ch = LDRf32<Mem:Volatile LD4[%lsr.iv24](tbaa=<0x46205c8>)> t9, TargetConstant:i32<0>, t7:1

Height 11: SU(3): t14: i32,i32 = ADDri_r32 t3, TargetConstant:i32<4>

Height 12: SU(14): t17: i32,i32 = ADDri_r32 t9, TargetConstant:i32<4>


*** Scheduling [13]: SU(7): t10: f32,ch = LDRf32<Mem:Volatile LD4[%lsr.iv24](tbaa=<0x46205c8>)> t9, TargetConstant:i32<0>, t7:1

FPR64_with_isub_lo_in_FPR32: 4 / 26

Examining Available:
Height 11: SU(3): t14: i32,i32 = ADDri_r32 t3, TargetConstant:i32<4>

Height 12: SU(14): t17: i32,i32 = ADDri_r32 t9, TargetConstant:i32<4>

Height 14: SU(8): t7: f32,ch = LDRf32<Mem:LD4[%sunkaddr30](tbaa=<0x46205c8>)> t4, TargetConstant:i32<0>, t0


*** Scheduling [14]: SU(3): t14: i32,i32 = ADDri_r32 t3, TargetConstant:i32<4>

FPR64_with_isub_lo_in_FPR32: 4 / 26

Examining Available:
Height 12: SU(14): t17: i32,i32 = ADDri_r32 t9, TargetConstant:i32<4>

Height 14: SU(8): t7: f32,ch = LDRf32<Mem:LD4[%sunkaddr30](tbaa=<0x46205c8>)> t4, TargetConstant:i32<0>, t0


*** Scheduling [15]: SU(14): t17: i32,i32 = ADDri_r32 t9, TargetConstant:i32<4>

FPR64_with_isub_lo_in_FPR32: 3 / 26

Examining Available:
Height 15: SU(11): t9: i32,ch = CopyFromReg t0, Register:i32 %vreg21

Height 14: SU(8): t7: f32,ch = LDRf32<Mem:LD4[%sunkaddr30](tbaa=<0x46205c8>)> t4, TargetConstant:i32<0>, t0


*** Scheduling [16]: SU(11): t9: i32,ch = CopyFromReg t0, Register:i32 %vreg21

FPR64_with_isub_lo_in_FPR32: 2 / 26

Examining Available:
Height 14: SU(8): t7: f32,ch = LDRf32<Mem:LD4[%sunkaddr30](tbaa=<0x46205c8>)> t4, TargetConstant:i32<0>, t0


*** Scheduling [17]: SU(8): t7: f32,ch = LDRf32<Mem:LD4[%sunkaddr30](tbaa=<0x46205c8>)> t4, TargetConstant:i32<0>, t0

FPR64_with_isub_lo_in_FPR32: 2 / 26

Examining Available:
Height 19: SU(9): t4: i32,i32 = ADDrr_r32 t1, t3


*** Scheduling [19]: SU(9): t4: i32,i32 = ADDrr_r32 t1, t3

FPR64_with_isub_lo_in_FPR32: 2 / 26

Examining Available:
Height 19: SU(4): t3: i32,ch = CopyFromReg t0, Register:i32 %vreg22

Height 21: SU(10): t1: i32 = MOViPTR TargetFrameIndex:i32<0>, TargetConstant:i32<0>


*** Scheduling [20]: SU(4): t3: i32,ch = CopyFromReg t0, Register:i32 %vreg22

FPR64_with_isub_lo_in_FPR32: 1 / 26

Examining Available:
Height 21: SU(10): t1: i32 = MOViPTR TargetFrameIndex:i32<0>, TargetConstant:i32<0>


*** Scheduling [21]: SU(10): t1: i32 = MOViPTR TargetFrameIndex:i32<0>, TargetConstant:i32<0>

*** Final schedule ***
SU(10): t1: i32 = MOViPTR TargetFrameIndex:i32<0>, TargetConstant:i32<0>

SU(4): t3: i32,ch = CopyFromReg t0, Register:i32 %vreg22

SU(9): t4: i32,i32 = ADDrr_r32 t1, t3

SU(8): t7: f32,ch = LDRf32<Mem:LD4[%sunkaddr30](tbaa=<0x46205c8>)> t4, TargetConstant:i32<0>, t0

SU(11): t9: i32,ch = CopyFromReg t0, Register:i32 %vreg21

SU(14): t17: i32,i32 = ADDri_r32 t9, TargetConstant:i32<4>

SU(3): t14: i32,i32 = ADDri_r32 t3, TargetConstant:i32<4>

SU(7): t10: f32,ch = LDRf32<Mem:Volatile LD4[%lsr.iv24](tbaa=<0x46205c8>)> t9, TargetConstant:i32<0>, t7:1

SU(13): t19: ch = CopyToReg t0, Register:i32 %vreg24, t17

SU(15): t16: ch = CopyToReg t0, Register:i32 %vreg23, t14

SU(12): t11: f32,i32 = FADDrr_r32 t7, t10

SU(2): t33: i32,i32,glue = CMPri_r32 t14, TargetConstant:i32<32>

SU(6): t12: ch = STRf32<Mem:Volatile ST4[%lsr.iv24](tbaa=<0x46205c8>)> t11, t9, TargetConstant:i32<0>, t10:1

SU(5): t26: ch = TokenFactor t16, t19, t12

SU(1): t35: ch = BCC BasicBlock:ch<for.body66 0x46b4cd8>, TargetConstant:i32<1>, t38, t38:1

    t38: ch,glue = CopyToReg t26, Register:i32 %STATUS, t33:1

SU(0): t29: ch = BNONE32 BasicBlock:ch<for.end75 0x46b4e48>, t35


Total amount of phi nodes to update: 2
Node 0 : (0x46b4d88, 2147483672)
Node 1 : (0x46b4de8, 2147483671)
Initial selection DAG: BB#9 'matmac:for.end75'
SelectionDAG has 31 nodes:
  t0: ch = EntryToken
  t1: i32 = FrameIndex<0>
    t5: i32,ch = CopyFromReg t0, Register:i32 %vreg8
  t7: i32 = add t5, Constant:i32<8>
  t23: ch = ValueType:i32
        t9: ch = CopyToReg t0, Register:i32 %vreg25, t7
            t11: i32,ch = CopyFromReg t0, Register:i32 %vreg7
          t13: i32 = add t11, Constant:i32<32>
        t15: ch = CopyToReg t0, Register:i32 %vreg26, t13
            t17: i32,ch = CopyFromReg t0, Register:i32 %vreg6
          t18: i32 = add t17, Constant:i32<32>
        t20: ch = CopyToReg t0, Register:i32 %vreg27, t18
        t3: ch = lifetime.end t0, TargetFrameIndex:i32<0>
      t27: ch = TokenFactor t9, t15, t20, t3
        t22: i32,ch = CopyFromReg t0, Register:i32 %vreg33
      t25: i1 = setcc t7, t22, setlt:ch
    t28: ch = brcond t27, t25, BasicBlock:ch<for.body9.preheader 0x46b4668>
  t30: ch = br t28, BasicBlock:ch<for.end78 0x46b4ef8>



Combining: t30: ch = br t28, BasicBlock:ch<for.end78 0x46b4ef8>

Combining: t29: ch = BasicBlock<for.end78 0x46b4ef8>

Combining: t28: ch = brcond t27, t25, BasicBlock:ch<for.body9.preheader 0x46b4668>
 ... into: t31: ch = br_cc t27, setlt:ch, t7, t22, BasicBlock:ch<for.body9.preheader 0x46b4668>

Combining: t30: ch = br t31, BasicBlock:ch<for.end78 0x46b4ef8>

Combining: t31: ch = br_cc t27, setlt:ch, t7, t22, BasicBlock:ch<for.body9.preheader 0x46b4668>

Combining: t27: ch = TokenFactor t9, t15, t20, t3

Combining: t26: ch = BasicBlock<for.body9.preheader 0x46b4668>

Combining: t24: ch = setlt

Combining: t22: i32,ch = CopyFromReg t0, Register:i32 %vreg33

Combining: t21: i32 = Register %vreg33

Combining: t20: ch = CopyToReg t0, Register:i32 %vreg27, t18

Combining: t19: i32 = Register %vreg27

Combining: t18: i32 = add t17, Constant:i32<32>

Combining: t17: i32,ch = CopyFromReg t0, Register:i32 %vreg6

Combining: t16: i32 = Register %vreg6

Combining: t15: ch = CopyToReg t0, Register:i32 %vreg26, t13

Combining: t14: i32 = Register %vreg26

Combining: t13: i32 = add t11, Constant:i32<32>

Combining: t12: i32 = Constant<32>

Combining: t11: i32,ch = CopyFromReg t0, Register:i32 %vreg7

Combining: t10: i32 = Register %vreg7

Combining: t9: ch = CopyToReg t0, Register:i32 %vreg25, t7

Combining: t8: i32 = Register %vreg25

Combining: t7: i32 = add t5, Constant:i32<8>

Combining: t6: i32 = Constant<8>

Combining: t5: i32,ch = CopyFromReg t0, Register:i32 %vreg8

Combining: t4: i32 = Register %vreg8

Combining: t3: ch = lifetime.end t0, TargetFrameIndex:i32<0>

Combining: t2: i32 = TargetFrameIndex<0>

Combining: t0: ch = EntryToken
Optimized lowered selection DAG: BB#9 'matmac:for.end75'
SelectionDAG has 28 nodes:
  t0: ch = EntryToken
    t5: i32,ch = CopyFromReg t0, Register:i32 %vreg8
  t7: i32 = add t5, Constant:i32<8>
        t9: ch = CopyToReg t0, Register:i32 %vreg25, t7
            t11: i32,ch = CopyFromReg t0, Register:i32 %vreg7
          t13: i32 = add t11, Constant:i32<32>
        t15: ch = CopyToReg t0, Register:i32 %vreg26, t13
            t17: i32,ch = CopyFromReg t0, Register:i32 %vreg6
          t18: i32 = add t17, Constant:i32<32>
        t20: ch = CopyToReg t0, Register:i32 %vreg27, t18
        t3: ch = lifetime.end t0, TargetFrameIndex:i32<0>
      t27: ch = TokenFactor t9, t15, t20, t3
      t22: i32,ch = CopyFromReg t0, Register:i32 %vreg33
    t31: ch = br_cc t27, setlt:ch, t7, t22, BasicBlock:ch<for.body9.preheader 0x46b4668>
  t30: ch = br t31, BasicBlock:ch<for.end78 0x46b4ef8>


Legally typed node: t29: ch = BasicBlock<for.end78 0x46b4ef8>

Legally typed node: t26: ch = BasicBlock<for.body9.preheader 0x46b4668>

Legally typed node: t24: ch = setlt

Legally typed node: t21: i32 = Register %vreg33

Legally typed node: t19: i32 = Register %vreg27

Legally typed node: t16: i32 = Register %vreg6

Legally typed node: t14: i32 = Register %vreg26

Legally typed node: t12: i32 = Constant<32>

Legally typed node: t10: i32 = Register %vreg7

Legally typed node: t8: i32 = Register %vreg25

Legally typed node: t6: i32 = Constant<8>

Legally typed node: t4: i32 = Register %vreg8

Legally typed node: t2: i32 = TargetFrameIndex<0>

Legally typed node: t0: ch = EntryToken

Legally typed node: t3: ch = lifetime.end t0, TargetFrameIndex:i32<0>

Legally typed node: t5: i32,ch = CopyFromReg t0, Register:i32 %vreg8

Legally typed node: t7: i32 = add t5, Constant:i32<8>

Legally typed node: t9: ch = CopyToReg t0, Register:i32 %vreg25, t7

Legally typed node: t11: i32,ch = CopyFromReg t0, Register:i32 %vreg7

Legally typed node: t13: i32 = add t11, Constant:i32<32>

Legally typed node: t15: ch = CopyToReg t0, Register:i32 %vreg26, t13

Legally typed node: t17: i32,ch = CopyFromReg t0, Register:i32 %vreg6

Legally typed node: t18: i32 = add t17, Constant:i32<32>

Legally typed node: t20: ch = CopyToReg t0, Register:i32 %vreg27, t18

Legally typed node: t27: ch = TokenFactor t9, t15, t20, t3

Legally typed node: t22: i32,ch = CopyFromReg t0, Register:i32 %vreg33

Legally typed node: t31: ch = br_cc t27, setlt:ch, t7, t22, BasicBlock:ch<for.body9.preheader 0x46b4668>

Legally typed node: t30: ch = br t31, BasicBlock:ch<for.end78 0x46b4ef8>

Legally typed node: t65535: ch = handlenode t30

Type-legalized selection DAG: BB#9 'matmac:for.end75'
SelectionDAG has 28 nodes:
  t0: ch = EntryToken
    t5: i32,ch = CopyFromReg t0, Register:i32 %vreg8
  t7: i32 = add t5, Constant:i32<8>
        t9: ch = CopyToReg t0, Register:i32 %vreg25, t7
            t11: i32,ch = CopyFromReg t0, Register:i32 %vreg7
          t13: i32 = add t11, Constant:i32<32>
        t15: ch = CopyToReg t0, Register:i32 %vreg26, t13
            t17: i32,ch = CopyFromReg t0, Register:i32 %vreg6
          t18: i32 = add t17, Constant:i32<32>
        t20: ch = CopyToReg t0, Register:i32 %vreg27, t18
        t3: ch = lifetime.end t0, TargetFrameIndex:i32<0>
      t27: ch = TokenFactor t9, t15, t20, t3
      t22: i32,ch = CopyFromReg t0, Register:i32 %vreg33
    t31: ch = br_cc t27, setlt:ch, t7, t22, BasicBlock:ch<for.body9.preheader 0x46b4668>
  t30: ch = br t31, BasicBlock:ch<for.end78 0x46b4ef8>



Legalizing: t30: ch = br t31, BasicBlock:ch<for.end78 0x46b4ef8>

Legalizing: t31: ch = br_cc t27, setlt:ch, t7, t22, BasicBlock:ch<for.body9.preheader 0x46b4668>
 ... replacing: t31: ch = br_cc t27, setlt:ch, t7, t22, BasicBlock:ch<for.body9.preheader 0x46b4668>
     with:      t33: ch,glue = EpiphanyISD::BRCC t27, BasicBlock:ch<for.body9.preheader 0x46b4668>, Constant:i32<8>, t32:1

Legalizing: t27: ch = TokenFactor t9, t15, t20, t3

Legalizing: t20: ch = CopyToReg t0, Register:i32 %vreg27, t18

Legalizing: t15: ch = CopyToReg t0, Register:i32 %vreg26, t13

Legalizing: t9: ch = CopyToReg t0, Register:i32 %vreg25, t7

Legalizing: t18: i32 = add t17, Constant:i32<32>

Legalizing: t13: i32 = add t11, Constant:i32<32>

Legalizing: t7: i32 = add t5, Constant:i32<8>

Legalizing: t22: i32,ch = CopyFromReg t0, Register:i32 %vreg33

Legalizing: t17: i32,ch = CopyFromReg t0, Register:i32 %vreg6

Legalizing: t11: i32,ch = CopyFromReg t0, Register:i32 %vreg7

Legalizing: t5: i32,ch = CopyFromReg t0, Register:i32 %vreg8

Legalizing: t3: ch = lifetime.end t0, TargetFrameIndex:i32<0>

Legalizing: t29: ch = BasicBlock<for.end78 0x46b4ef8>

Legalizing: t26: ch = BasicBlock<for.body9.preheader 0x46b4668>

Legalizing: t21: i32 = Register %vreg33

Legalizing: t19: i32 = Register %vreg27

Legalizing: t16: i32 = Register %vreg6

Legalizing: t14: i32 = Register %vreg26

Legalizing: t12: i32 = Constant<32>

Legalizing: t10: i32 = Register %vreg7

Legalizing: t8: i32 = Register %vreg25

Legalizing: t6: i32 = Constant<8>

Legalizing: t4: i32 = Register %vreg8

Legalizing: t2: i32 = TargetFrameIndex<0>

Legalizing: t0: ch = EntryToken

Legalizing: t33: ch,glue = EpiphanyISD::BRCC t27, BasicBlock:ch<for.body9.preheader 0x46b4668>, Constant:i32<8>, t32:1

Legalizing: t32: i32,i32 = EpiphanyISD::CMP t7, t22
Legalized selection DAG: BB#9 'matmac:for.end75'
SelectionDAG has 28 nodes:
  t0: ch = EntryToken
    t5: i32,ch = CopyFromReg t0, Register:i32 %vreg8
  t7: i32 = add t5, Constant:i32<8>
        t9: ch = CopyToReg t0, Register:i32 %vreg25, t7
            t11: i32,ch = CopyFromReg t0, Register:i32 %vreg7
          t13: i32 = add t11, Constant:i32<32>
        t15: ch = CopyToReg t0, Register:i32 %vreg26, t13
            t17: i32,ch = CopyFromReg t0, Register:i32 %vreg6
          t18: i32 = add t17, Constant:i32<32>
        t20: ch = CopyToReg t0, Register:i32 %vreg27, t18
        t3: ch = lifetime.end t0, TargetFrameIndex:i32<0>
      t27: ch = TokenFactor t9, t15, t20, t3
        t22: i32,ch = CopyFromReg t0, Register:i32 %vreg33
      t32: i32,i32 = EpiphanyISD::CMP t7, t22
    t33: ch,glue = EpiphanyISD::BRCC t27, BasicBlock:ch<for.body9.preheader 0x46b4668>, Constant:i32<8>, t32:1
  t30: ch = br t33, BasicBlock:ch<for.end78 0x46b4ef8>



Legalizing: t33: ch,glue = EpiphanyISD::BRCC t27, BasicBlock:ch<for.body9.preheader 0x46b4668>, Constant:i32<8>, t32:1

Combining: t33: ch,glue = EpiphanyISD::BRCC t27, BasicBlock:ch<for.body9.preheader 0x46b4668>, Constant:i32<8>, t32:1

Legalizing: t32: i32,i32 = EpiphanyISD::CMP t7, t22

Combining: t32: i32,i32 = EpiphanyISD::CMP t7, t22

Legalizing: t30: ch = br t33, BasicBlock:ch<for.end78 0x46b4ef8>

Combining: t30: ch = br t33, BasicBlock:ch<for.end78 0x46b4ef8>

Legalizing: t27: ch = TokenFactor t9, t15, t20, t3

Combining: t27: ch = TokenFactor t9, t15, t20, t3

Legalizing: t20: ch = CopyToReg t0, Register:i32 %vreg27, t18

Combining: t20: ch = CopyToReg t0, Register:i32 %vreg27, t18

Legalizing: t15: ch = CopyToReg t0, Register:i32 %vreg26, t13

Combining: t15: ch = CopyToReg t0, Register:i32 %vreg26, t13

Legalizing: t9: ch = CopyToReg t0, Register:i32 %vreg25, t7

Combining: t9: ch = CopyToReg t0, Register:i32 %vreg25, t7

Legalizing: t18: i32 = add t17, Constant:i32<32>

Combining: t18: i32 = add t17, Constant:i32<32>

Legalizing: t13: i32 = add t11, Constant:i32<32>

Combining: t13: i32 = add t11, Constant:i32<32>

Legalizing: t7: i32 = add t5, Constant:i32<8>

Combining: t7: i32 = add t5, Constant:i32<8>

Legalizing: t22: i32,ch = CopyFromReg t0, Register:i32 %vreg33

Combining: t22: i32,ch = CopyFromReg t0, Register:i32 %vreg33

Legalizing: t17: i32,ch = CopyFromReg t0, Register:i32 %vreg6

Combining: t17: i32,ch = CopyFromReg t0, Register:i32 %vreg6

Legalizing: t11: i32,ch = CopyFromReg t0, Register:i32 %vreg7

Combining: t11: i32,ch = CopyFromReg t0, Register:i32 %vreg7

Legalizing: t5: i32,ch = CopyFromReg t0, Register:i32 %vreg8

Combining: t5: i32,ch = CopyFromReg t0, Register:i32 %vreg8

Legalizing: t3: ch = lifetime.end t0, TargetFrameIndex:i32<0>

Combining: t3: ch = lifetime.end t0, TargetFrameIndex:i32<0>

Legalizing: t29: ch = BasicBlock<for.end78 0x46b4ef8>

Combining: t29: ch = BasicBlock<for.end78 0x46b4ef8>

Legalizing: t26: ch = BasicBlock<for.body9.preheader 0x46b4668>

Combining: t26: ch = BasicBlock<for.body9.preheader 0x46b4668>

Legalizing: t21: i32 = Register %vreg33

Combining: t21: i32 = Register %vreg33

Legalizing: t19: i32 = Register %vreg27

Combining: t19: i32 = Register %vreg27

Legalizing: t16: i32 = Register %vreg6

Combining: t16: i32 = Register %vreg6

Legalizing: t14: i32 = Register %vreg26

Combining: t14: i32 = Register %vreg26

Legalizing: t12: i32 = Constant<32>

Combining: t12: i32 = Constant<32>

Legalizing: t10: i32 = Register %vreg7

Combining: t10: i32 = Register %vreg7

Legalizing: t8: i32 = Register %vreg25

Combining: t8: i32 = Register %vreg25

Legalizing: t6: i32 = Constant<8>

Combining: t6: i32 = Constant<8>

Legalizing: t4: i32 = Register %vreg8

Combining: t4: i32 = Register %vreg8

Legalizing: t2: i32 = TargetFrameIndex<0>

Combining: t2: i32 = TargetFrameIndex<0>

Legalizing: t0: ch = EntryToken

Combining: t0: ch = EntryToken
Optimized legalized selection DAG: BB#9 'matmac:for.end75'
SelectionDAG has 28 nodes:
  t0: ch = EntryToken
    t5: i32,ch = CopyFromReg t0, Register:i32 %vreg8
  t7: i32 = add t5, Constant:i32<8>
        t9: ch = CopyToReg t0, Register:i32 %vreg25, t7
            t11: i32,ch = CopyFromReg t0, Register:i32 %vreg7
          t13: i32 = add t11, Constant:i32<32>
        t15: ch = CopyToReg t0, Register:i32 %vreg26, t13
            t17: i32,ch = CopyFromReg t0, Register:i32 %vreg6
          t18: i32 = add t17, Constant:i32<32>
        t20: ch = CopyToReg t0, Register:i32 %vreg27, t18
        t3: ch = lifetime.end t0, TargetFrameIndex:i32<0>
      t27: ch = TokenFactor t9, t15, t20, t3
        t22: i32,ch = CopyFromReg t0, Register:i32 %vreg33
      t32: i32,i32 = EpiphanyISD::CMP t7, t22
    t33: ch,glue = EpiphanyISD::BRCC t27, BasicBlock:ch<for.body9.preheader 0x46b4668>, Constant:i32<8>, t32:1
  t30: ch = br t33, BasicBlock:ch<for.end78 0x46b4ef8>


===== Instruction selection begins: BB#9 'for.end75'
Selecting: t30: ch = br t33, BasicBlock:ch<for.end78 0x46b4ef8>

ISEL: Starting pattern match on root node: t30: ch = br t33, BasicBlock:ch<for.end78 0x46b4ef8>

  Initial Opcode index to 4515
  Morphed node: t30: ch = BNONE32 BasicBlock:ch<for.end78 0x46b4ef8>, t33

ISEL: Match complete!
Selecting: t33: ch,glue = EpiphanyISD::BRCC t27, BasicBlock:ch<for.body9.preheader 0x46b4668>, Constant:i32<8>, t32:1

ISEL: Starting pattern match on root node: t33: ch,glue = EpiphanyISD::BRCC t27, BasicBlock:ch<for.body9.preheader 0x46b4668>, Constant:i32<8>, t32:1

  Initial Opcode index to 2902
  Morphed node: t33: ch = BCC BasicBlock:ch<for.body9.preheader 0x46b4668>, TargetConstant:i32<8>, t36, t36:1

ISEL: Match complete!
Selecting: t27: ch = TokenFactor t9, t15, t20, t3

Selecting: t20: ch = CopyToReg t0, Register:i32 %vreg27, t18

Selecting: t15: ch = CopyToReg t0, Register:i32 %vreg26, t13

Selecting: t9: ch = CopyToReg t0, Register:i32 %vreg25, t7

Selecting: t32: i32,i32 = EpiphanyISD::CMP t7, t22

ISEL: Starting pattern match on root node: t32: i32,i32 = EpiphanyISD::CMP t7, t22

  Initial Opcode index to 1952
  Match failed at index 1962
  Continuing at 2003
  Morphed node: t32: i32,i32,glue = CMPrr_r32 t7, t22

ISEL: Match complete!
Selecting: t18: i32 = add t17, Constant:i32<32>

ISEL: Starting pattern match on root node: t18: i32 = add t17, Constant:i32<32>

  Initial Opcode index to 1567
  Morphed node: t18: i32,i32 = ADDri_r32 t17, TargetConstant:i32<32>

ISEL: Match complete!
Selecting: t13: i32 = add t11, Constant:i32<32>

ISEL: Starting pattern match on root node: t13: i32 = add t11, Constant:i32<32>

  Initial Opcode index to 1567
  Morphed node: t13: i32,i32 = ADDri_r32 t11, TargetConstant:i32<32>

ISEL: Match complete!
Selecting: t7: i32 = add t5, Constant:i32<8>

ISEL: Starting pattern match on root node: t7: i32 = add t5, Constant:i32<8>

  Initial Opcode index to 1567
  Morphed node: t7: i32,i32 = ADDri_r32 t5, TargetConstant:i32<8>

ISEL: Match complete!
Selecting: t22: i32,ch = CopyFromReg t0, Register:i32 %vreg33

Selecting: t17: i32,ch = CopyFromReg t0, Register:i32 %vreg6

Selecting: t11: i32,ch = CopyFromReg t0, Register:i32 %vreg7

Selecting: t5: i32,ch = CopyFromReg t0, Register:i32 %vreg8

Selecting: t3: ch = lifetime.end t0, TargetFrameIndex:i32<0>

Selecting: t29: ch = BasicBlock<for.end78 0x46b4ef8>

Selecting: t26: ch = BasicBlock<for.body9.preheader 0x46b4668>

Selecting: t21: i32 = Register %vreg33

Selecting: t19: i32 = Register %vreg27

Selecting: t16: i32 = Register %vreg6

Selecting: t14: i32 = Register %vreg26

Selecting: t10: i32 = Register %vreg7

Selecting: t8: i32 = Register %vreg25

Selecting: t4: i32 = Register %vreg8

Selecting: t2: i32 = TargetFrameIndex<0>

Selecting: t0: ch = EntryToken

===== Instruction selection ends:
Selected selection DAG: BB#9 'matmac:for.end75'
SelectionDAG has 30 nodes:
  t0: ch = EntryToken
    t5: i32,ch = CopyFromReg t0, Register:i32 %vreg8
  t7: i32,i32 = ADDri_r32 t5, TargetConstant:i32<8>
      t9: ch = CopyToReg t0, Register:i32 %vreg25, t7
          t11: i32,ch = CopyFromReg t0, Register:i32 %vreg7
        t13: i32,i32 = ADDri_r32 t11, TargetConstant:i32<32>
      t15: ch = CopyToReg t0, Register:i32 %vreg26, t13
          t17: i32,ch = CopyFromReg t0, Register:i32 %vreg6
        t18: i32,i32 = ADDri_r32 t17, TargetConstant:i32<32>
      t20: ch = CopyToReg t0, Register:i32 %vreg27, t18
      t3: ch = lifetime.end t0, TargetFrameIndex:i32<0>
    t27: ch = TokenFactor t9, t15, t20, t3
      t22: i32,ch = CopyFromReg t0, Register:i32 %vreg33
    t32: i32,i32,glue = CMPrr_r32 t7, t22
  t36: ch,glue = CopyToReg t27, Register:i32 %STATUS, t32:1
    t33: ch = BCC BasicBlock:ch<for.body9.preheader 0x46b4668>, TargetConstant:i32<8>, t36, t36:1
  t30: ch = BNONE32 BasicBlock:ch<for.end78 0x46b4ef8>, t33


********** List Scheduling BB#9 'for.end75' **********
SU(0): t30: ch = BNONE32 BasicBlock:ch<for.end78 0x46b4ef8>, t33

  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 8
  Depth              : 6
  Height             : 0
  Predecessors:
   ord  SU(1): Latency=1
SU(1): t33: ch = BCC BasicBlock:ch<for.body9.preheader 0x46b4668>, TargetConstant:i32<8>, t36, t36:1

    t36: ch,glue = CopyToReg t27, Register:i32 %STATUS, t32:1

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 8
  Depth              : 5
  Height             : 1
  Predecessors:
   ord  SU(6): Latency=0
   data SU(2): Latency=3 Reg=%STATUS
  Successors:
   ord  SU(0): Latency=1
SU(2): t32: i32,i32,glue = CMPrr_r32 t7, t22

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 5
  Depth              : 2
  Height             : 4
  Predecessors:
   data SU(4): Latency=2
   data SU(3): Latency=0
  Successors:
   data SU(1): Latency=3 Reg=%STATUS
SU(3): t22: i32,ch = CopyFromReg t0, Register:i32 %vreg33

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 0
  Depth              : 0
  Height             : 4
  Successors:
   data SU(2): Latency=0
SU(4): t7: i32,i32 = ADDri_r32 t5, TargetConstant:i32<8>

  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 1
  Latency            : 5
  Depth              : 0
  Height             : 6
  Predecessors:
   data SU(5): Latency=0
  Successors:
   data SU(2): Latency=2
   data SU(14): Latency=3
SU(5): t5: i32,ch = CopyFromReg t0, Register:i32 %vreg8

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 0
  Depth              : 0
  Height             : 6
  Successors:
   data SU(4): Latency=0
SU(6): t27: ch = TokenFactor t9, t15, t20, t3

  # preds left       : 4
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 4
  Height             : 1
  Predecessors:
   ord  SU(14): Latency=1
   ord  SU(11): Latency=1
   ord  SU(8): Latency=1
   ord  SU(7): Latency=1
  Successors:
   ord  SU(1): Latency=0
SU(7): t3: ch = lifetime.end t0, TargetFrameIndex:i32<0>

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 2
  Successors:
   ord  SU(6): Latency=1
SU(8): t20: ch = CopyToReg t0, Register:i32 %vreg27, t18

  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 3
  Height             : 2
  Predecessors:
   data SU(9): Latency=3
  Successors:
   ord  SU(6): Latency=1
SU(9): t18: i32,i32 = ADDri_r32 t17, TargetConstant:i32<32>

  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 5
  Depth              : 0
  Height             : 5
  Predecessors:
   data SU(10): Latency=0
  Successors:
   data SU(8): Latency=3
SU(10): t17: i32,ch = CopyFromReg t0, Register:i32 %vreg6

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 0
  Depth              : 0
  Height             : 5
  Successors:
   data SU(9): Latency=0
SU(11): t15: ch = CopyToReg t0, Register:i32 %vreg26, t13

  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 3
  Height             : 2
  Predecessors:
   data SU(12): Latency=3
  Successors:
   ord  SU(6): Latency=1
SU(12): t13: i32,i32 = ADDri_r32 t11, TargetConstant:i32<32>

  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 5
  Depth              : 0
  Height             : 5
  Predecessors:
   data SU(13): Latency=0
  Successors:
   data SU(11): Latency=3
SU(13): t11: i32,ch = CopyFromReg t0, Register:i32 %vreg7

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 0
  Depth              : 0
  Height             : 5
  Successors:
   data SU(12): Latency=0
SU(14): t9: ch = CopyToReg t0, Register:i32 %vreg25, t7

  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 3
  Height             : 2
  Predecessors:
   data SU(4): Latency=3
  Successors:
   ord  SU(6): Latency=1

Examining Available:
Height 0: SU(0): t30: ch = BNONE32 BasicBlock:ch<for.end78 0x46b4ef8>, t33


*** Scheduling [0]: SU(0): t30: ch = BNONE32 BasicBlock:ch<for.end78 0x46b4ef8>, t33


Examining Available:
Height 1: SU(1): t33: ch = BCC BasicBlock:ch<for.body9.preheader 0x46b4668>, TargetConstant:i32<8>, t36, t36:1

    t36: ch,glue = CopyToReg t27, Register:i32 %STATUS, t32:1


*** Scheduling [1]: SU(1): t33: ch = BCC BasicBlock:ch<for.body9.preheader 0x46b4668>, TargetConstant:i32<8>, t36, t36:1

    t36: ch,glue = CopyToReg t27, Register:i32 %STATUS, t32:1


Examining Available:
Height 1: SU(6): t27: ch = TokenFactor t9, t15, t20, t3

Height 4: SU(2): t32: i32,i32,glue = CMPrr_r32 t7, t22


*** Scheduling [2]: SU(6): t27: ch = TokenFactor t9, t15, t20, t3


Examining Available:
  SU (2)  defines a physreg SU(14)  has no physreg
  SU (2)  defines a physreg SU(11)  has no physreg
  SU (2)  defines a physreg SU(8)  has no physreg
  SU (2)  defines a physreg SU(7)  has no physreg
Height 4: SU(2): t32: i32,i32,glue = CMPrr_r32 t7, t22

Height 3: SU(14): t9: ch = CopyToReg t0, Register:i32 %vreg25, t7

Height 3: SU(11): t15: ch = CopyToReg t0, Register:i32 %vreg26, t13

Height 3: SU(8): t20: ch = CopyToReg t0, Register:i32 %vreg27, t18

Height 3: SU(7): t3: ch = lifetime.end t0, TargetFrameIndex:i32<0>

  SU (2)  defines a physreg SU(14)  has no physreg
  SU (2)  defines a physreg SU(11)  has no physreg
  SU (2)  defines a physreg SU(8)  has no physreg
  SU (2)  defines a physreg SU(7)  has no physreg

*** Scheduling [4]: SU(2): t32: i32,i32,glue = CMPrr_r32 t7, t22

FPR64_with_isub_lo_in_FPR32: 2 / 26

Examining Available:
Height 4: SU(3): t22: i32,ch = CopyFromReg t0, Register:i32 %vreg33

Height 3: SU(14): t9: ch = CopyToReg t0, Register:i32 %vreg25, t7

Height 3: SU(11): t15: ch = CopyToReg t0, Register:i32 %vreg26, t13

Height 3: SU(8): t20: ch = CopyToReg t0, Register:i32 %vreg27, t18

Height 3: SU(7): t3: ch = lifetime.end t0, TargetFrameIndex:i32<0>


*** Scheduling [5]: SU(3): t22: i32,ch = CopyFromReg t0, Register:i32 %vreg33

FPR64_with_isub_lo_in_FPR32: 1 / 26

Examining Available:
Height 3: SU(14): t9: ch = CopyToReg t0, Register:i32 %vreg25, t7

Height 3: SU(11): t15: ch = CopyToReg t0, Register:i32 %vreg26, t13

Height 3: SU(8): t20: ch = CopyToReg t0, Register:i32 %vreg27, t18

Height 3: SU(7): t3: ch = lifetime.end t0, TargetFrameIndex:i32<0>


*** Scheduling [6]: SU(14): t9: ch = CopyToReg t0, Register:i32 %vreg25, t7

FPR64_with_isub_lo_in_FPR32: 1 / 26

Examining Available:
Height 3: SU(11): t15: ch = CopyToReg t0, Register:i32 %vreg26, t13

Height 3: SU(8): t20: ch = CopyToReg t0, Register:i32 %vreg27, t18

Height 9: SU(4): t7: i32,i32 = ADDri_r32 t5, TargetConstant:i32<8>

Height 3: SU(7): t3: ch = lifetime.end t0, TargetFrameIndex:i32<0>


*** Scheduling [7]: SU(11): t15: ch = CopyToReg t0, Register:i32 %vreg26, t13

FPR64_with_isub_lo_in_FPR32: 2 / 26

Examining Available:
Height 3: SU(8): t20: ch = CopyToReg t0, Register:i32 %vreg27, t18

Height 9: SU(4): t7: i32,i32 = ADDri_r32 t5, TargetConstant:i32<8>

Height 3: SU(7): t3: ch = lifetime.end t0, TargetFrameIndex:i32<0>

Height 10: SU(12): t13: i32,i32 = ADDri_r32 t11, TargetConstant:i32<32>


*** Scheduling [8]: SU(8): t20: ch = CopyToReg t0, Register:i32 %vreg27, t18

FPR64_with_isub_lo_in_FPR32: 3 / 26

Examining Available:
Height 9: SU(4): t7: i32,i32 = ADDri_r32 t5, TargetConstant:i32<8>

Height 3: SU(7): t3: ch = lifetime.end t0, TargetFrameIndex:i32<0>

Height 10: SU(12): t13: i32,i32 = ADDri_r32 t11, TargetConstant:i32<32>

Height 11: SU(9): t18: i32,i32 = ADDri_r32 t17, TargetConstant:i32<32>


*** Scheduling [9]: SU(4): t7: i32,i32 = ADDri_r32 t5, TargetConstant:i32<8>

FPR64_with_isub_lo_in_FPR32: 3 / 26

Examining Available:
Height 9: SU(5): t5: i32,ch = CopyFromReg t0, Register:i32 %vreg8

Height 3: SU(7): t3: ch = lifetime.end t0, TargetFrameIndex:i32<0>

Height 10: SU(12): t13: i32,i32 = ADDri_r32 t11, TargetConstant:i32<32>

Height 11: SU(9): t18: i32,i32 = ADDri_r32 t17, TargetConstant:i32<32>


*** Scheduling [10]: SU(5): t5: i32,ch = CopyFromReg t0, Register:i32 %vreg8

FPR64_with_isub_lo_in_FPR32: 2 / 26

Examining Available:
Height 3: SU(7): t3: ch = lifetime.end t0, TargetFrameIndex:i32<0>

Height 10: SU(12): t13: i32,i32 = ADDri_r32 t11, TargetConstant:i32<32>

Height 11: SU(9): t18: i32,i32 = ADDri_r32 t17, TargetConstant:i32<32>


*** Scheduling [11]: SU(7): t3: ch = lifetime.end t0, TargetFrameIndex:i32<0>

FPR64_with_isub_lo_in_FPR32: 2 / 26

Examining Available:
Height 10: SU(12): t13: i32,i32 = ADDri_r32 t11, TargetConstant:i32<32>

Height 11: SU(9): t18: i32,i32 = ADDri_r32 t17, TargetConstant:i32<32>


*** Scheduling [12]: SU(12): t13: i32,i32 = ADDri_r32 t11, TargetConstant:i32<32>

FPR64_with_isub_lo_in_FPR32: 2 / 26

Examining Available:
Height 12: SU(13): t11: i32,ch = CopyFromReg t0, Register:i32 %vreg7

Height 11: SU(9): t18: i32,i32 = ADDri_r32 t17, TargetConstant:i32<32>


*** Scheduling [13]: SU(13): t11: i32,ch = CopyFromReg t0, Register:i32 %vreg7

FPR64_with_isub_lo_in_FPR32: 1 / 26

Examining Available:
Height 11: SU(9): t18: i32,i32 = ADDri_r32 t17, TargetConstant:i32<32>


*** Scheduling [14]: SU(9): t18: i32,i32 = ADDri_r32 t17, TargetConstant:i32<32>

FPR64_with_isub_lo_in_FPR32: 1 / 26

Examining Available:
Height 14: SU(10): t17: i32,ch = CopyFromReg t0, Register:i32 %vreg6


*** Scheduling [15]: SU(10): t17: i32,ch = CopyFromReg t0, Register:i32 %vreg6

*** Final schedule ***
SU(10): t17: i32,ch = CopyFromReg t0, Register:i32 %vreg6

SU(9): t18: i32,i32 = ADDri_r32 t17, TargetConstant:i32<32>

SU(13): t11: i32,ch = CopyFromReg t0, Register:i32 %vreg7

SU(12): t13: i32,i32 = ADDri_r32 t11, TargetConstant:i32<32>

SU(7): t3: ch = lifetime.end t0, TargetFrameIndex:i32<0>

SU(5): t5: i32,ch = CopyFromReg t0, Register:i32 %vreg8

SU(4): t7: i32,i32 = ADDri_r32 t5, TargetConstant:i32<8>

SU(8): t20: ch = CopyToReg t0, Register:i32 %vreg27, t18

SU(11): t15: ch = CopyToReg t0, Register:i32 %vreg26, t13

SU(14): t9: ch = CopyToReg t0, Register:i32 %vreg25, t7

SU(3): t22: i32,ch = CopyFromReg t0, Register:i32 %vreg33

SU(2): t32: i32,i32,glue = CMPrr_r32 t7, t22

SU(6): t27: ch = TokenFactor t9, t15, t20, t3

SU(1): t33: ch = BCC BasicBlock:ch<for.body9.preheader 0x46b4668>, TargetConstant:i32<8>, t36, t36:1

    t36: ch,glue = CopyToReg t27, Register:i32 %STATUS, t32:1

SU(0): t30: ch = BNONE32 BasicBlock:ch<for.end78 0x46b4ef8>, t33


Total amount of phi nodes to update: 3
Node 0 : (0x46b4718, 2147483675)
Node 1 : (0x46b4778, 2147483674)
Node 2 : (0x46b47d8, 2147483673)
Initial selection DAG: BB#10 'matmac:for.end78'
SelectionDAG has 26 nodes:
  t0: ch = EntryToken
    t4: i32,ch = CopyFromReg t0, Register:i32 %vreg4
  t6: i32 = add t4, Constant:i32<1>
  t11: ch = ValueType:i32
        t8: ch = CopyToReg t0, Register:i32 %vreg28, t6
            t2: i32,ch = CopyFromReg t0, Register:i32 %vreg3
            t10: i32,ch = CopyFromReg t0, Register:i32 %vreg1
          t12: i32 = add t2, t10
        t14: ch = CopyToReg t0, Register:i32 %vreg29, t12
      t22: ch = TokenFactor t8, t14
          t16: i32,ch = CopyFromReg t0, Register:i32 %vreg33
        t18: i1 = setcc t6, t16, seteq:ch
      t20: i1 = xor t18, Constant:i1<-1>
    t23: ch = brcond t22, t20, BasicBlock:ch<for.body3.lr.ph 0x46b44f8>
  t25: ch = br t23, BasicBlock:ch<for.end81 0x46bbde0>



Combining: t25: ch = br t23, BasicBlock:ch<for.end81 0x46bbde0>

Combining: t24: ch = BasicBlock<for.end81 0x46bbde0>

Combining: t23: ch = brcond t22, t20, BasicBlock:ch<for.body3.lr.ph 0x46b44f8>

Combining: t22: ch = TokenFactor t8, t14

Combining: t21: ch = BasicBlock<for.body3.lr.ph 0x46b44f8>

Combining: t20: i1 = xor t18, Constant:i1<-1>
 ... into: t27: i1 = setcc t6, t16, setne:ch

Combining: t23: ch = brcond t22, t27, BasicBlock:ch<for.body3.lr.ph 0x46b44f8>
 ... into: t28: ch = br_cc t22, setne:ch, t6, t16, BasicBlock:ch<for.body3.lr.ph 0x46b44f8>

Combining: t22: ch = TokenFactor t8, t14

Combining: t26: ch = setne

Combining: t21: ch = BasicBlock<for.body3.lr.ph 0x46b44f8>

Combining: t25: ch = br t28, BasicBlock:ch<for.end81 0x46bbde0>

Combining: t28: ch = br_cc t22, setne:ch, t6, t16, BasicBlock:ch<for.body3.lr.ph 0x46b44f8>

Combining: t16: i32,ch = CopyFromReg t0, Register:i32 %vreg33

Combining: t15: i32 = Register %vreg33

Combining: t14: ch = CopyToReg t0, Register:i32 %vreg29, t12

Combining: t13: i32 = Register %vreg29

Combining: t12: i32 = add t2, t10

Combining: t10: i32,ch = CopyFromReg t0, Register:i32 %vreg1

Combining: t9: i32 = Register %vreg1

Combining: t8: ch = CopyToReg t0, Register:i32 %vreg28, t6

Combining: t7: i32 = Register %vreg28

Combining: t6: i32 = add t4, Constant:i32<1>

Combining: t5: i32 = Constant<1>

Combining: t4: i32,ch = CopyFromReg t0, Register:i32 %vreg4

Combining: t3: i32 = Register %vreg4

Combining: t2: i32,ch = CopyFromReg t0, Register:i32 %vreg3

Combining: t1: i32 = Register %vreg3

Combining: t0: ch = EntryToken
Optimized lowered selection DAG: BB#10 'matmac:for.end78'
SelectionDAG has 22 nodes:
  t0: ch = EntryToken
    t4: i32,ch = CopyFromReg t0, Register:i32 %vreg4
  t6: i32 = add t4, Constant:i32<1>
        t8: ch = CopyToReg t0, Register:i32 %vreg28, t6
            t2: i32,ch = CopyFromReg t0, Register:i32 %vreg3
            t10: i32,ch = CopyFromReg t0, Register:i32 %vreg1
          t12: i32 = add t2, t10
        t14: ch = CopyToReg t0, Register:i32 %vreg29, t12
      t22: ch = TokenFactor t8, t14
      t16: i32,ch = CopyFromReg t0, Register:i32 %vreg33
    t28: ch = br_cc t22, setne:ch, t6, t16, BasicBlock:ch<for.body3.lr.ph 0x46b44f8>
  t25: ch = br t28, BasicBlock:ch<for.end81 0x46bbde0>


Legally typed node: t26: ch = setne

Legally typed node: t24: ch = BasicBlock<for.end81 0x46bbde0>

Legally typed node: t21: ch = BasicBlock<for.body3.lr.ph 0x46b44f8>

Legally typed node: t15: i32 = Register %vreg33

Legally typed node: t13: i32 = Register %vreg29

Legally typed node: t9: i32 = Register %vreg1

Legally typed node: t7: i32 = Register %vreg28

Legally typed node: t5: i32 = Constant<1>

Legally typed node: t3: i32 = Register %vreg4

Legally typed node: t1: i32 = Register %vreg3

Legally typed node: t0: ch = EntryToken

Legally typed node: t2: i32,ch = CopyFromReg t0, Register:i32 %vreg3

Legally typed node: t4: i32,ch = CopyFromReg t0, Register:i32 %vreg4

Legally typed node: t6: i32 = add t4, Constant:i32<1>

Legally typed node: t8: ch = CopyToReg t0, Register:i32 %vreg28, t6

Legally typed node: t10: i32,ch = CopyFromReg t0, Register:i32 %vreg1

Legally typed node: t12: i32 = add t2, t10

Legally typed node: t14: ch = CopyToReg t0, Register:i32 %vreg29, t12

Legally typed node: t22: ch = TokenFactor t8, t14

Legally typed node: t16: i32,ch = CopyFromReg t0, Register:i32 %vreg33

Legally typed node: t28: ch = br_cc t22, setne:ch, t6, t16, BasicBlock:ch<for.body3.lr.ph 0x46b44f8>

Legally typed node: t25: ch = br t28, BasicBlock:ch<for.end81 0x46bbde0>

Legally typed node: t65535: ch = handlenode t25

Type-legalized selection DAG: BB#10 'matmac:for.end78'
SelectionDAG has 22 nodes:
  t0: ch = EntryToken
    t4: i32,ch = CopyFromReg t0, Register:i32 %vreg4
  t6: i32 = add t4, Constant:i32<1>
        t8: ch = CopyToReg t0, Register:i32 %vreg28, t6
            t2: i32,ch = CopyFromReg t0, Register:i32 %vreg3
            t10: i32,ch = CopyFromReg t0, Register:i32 %vreg1
          t12: i32 = add t2, t10
        t14: ch = CopyToReg t0, Register:i32 %vreg29, t12
      t22: ch = TokenFactor t8, t14
      t16: i32,ch = CopyFromReg t0, Register:i32 %vreg33
    t28: ch = br_cc t22, setne:ch, t6, t16, BasicBlock:ch<for.body3.lr.ph 0x46b44f8>
  t25: ch = br t28, BasicBlock:ch<for.end81 0x46bbde0>



Legalizing: t25: ch = br t28, BasicBlock:ch<for.end81 0x46bbde0>

Legalizing: t28: ch = br_cc t22, setne:ch, t6, t16, BasicBlock:ch<for.body3.lr.ph 0x46b44f8>
 ... replacing: t28: ch = br_cc t22, setne:ch, t6, t16, BasicBlock:ch<for.body3.lr.ph 0x46b44f8>
     with:      t30: ch,glue = EpiphanyISD::BRCC t22, BasicBlock:ch<for.body3.lr.ph 0x46b44f8>, Constant:i32<1>, t29:1

Legalizing: t22: ch = TokenFactor t8, t14

Legalizing: t14: ch = CopyToReg t0, Register:i32 %vreg29, t12

Legalizing: t8: ch = CopyToReg t0, Register:i32 %vreg28, t6

Legalizing: t12: i32 = add t2, t10

Legalizing: t6: i32 = add t4, Constant:i32<1>

Legalizing: t16: i32,ch = CopyFromReg t0, Register:i32 %vreg33

Legalizing: t10: i32,ch = CopyFromReg t0, Register:i32 %vreg1

Legalizing: t4: i32,ch = CopyFromReg t0, Register:i32 %vreg4

Legalizing: t2: i32,ch = CopyFromReg t0, Register:i32 %vreg3

Legalizing: t24: ch = BasicBlock<for.end81 0x46bbde0>

Legalizing: t21: ch = BasicBlock<for.body3.lr.ph 0x46b44f8>

Legalizing: t15: i32 = Register %vreg33

Legalizing: t13: i32 = Register %vreg29

Legalizing: t9: i32 = Register %vreg1

Legalizing: t7: i32 = Register %vreg28

Legalizing: t5: i32 = Constant<1>

Legalizing: t3: i32 = Register %vreg4

Legalizing: t1: i32 = Register %vreg3

Legalizing: t0: ch = EntryToken

Legalizing: t30: ch,glue = EpiphanyISD::BRCC t22, BasicBlock:ch<for.body3.lr.ph 0x46b44f8>, Constant:i32<1>, t29:1

Legalizing: t29: i32,i32 = EpiphanyISD::CMP t6, t16
Legalized selection DAG: BB#10 'matmac:for.end78'
SelectionDAG has 22 nodes:
  t0: ch = EntryToken
    t4: i32,ch = CopyFromReg t0, Register:i32 %vreg4
  t6: i32 = add t4, Constant:i32<1>
        t8: ch = CopyToReg t0, Register:i32 %vreg28, t6
            t2: i32,ch = CopyFromReg t0, Register:i32 %vreg3
            t10: i32,ch = CopyFromReg t0, Register:i32 %vreg1
          t12: i32 = add t2, t10
        t14: ch = CopyToReg t0, Register:i32 %vreg29, t12
      t22: ch = TokenFactor t8, t14
        t16: i32,ch = CopyFromReg t0, Register:i32 %vreg33
      t29: i32,i32 = EpiphanyISD::CMP t6, t16
    t30: ch,glue = EpiphanyISD::BRCC t22, BasicBlock:ch<for.body3.lr.ph 0x46b44f8>, Constant:i32<1>, t29:1
  t25: ch = br t30, BasicBlock:ch<for.end81 0x46bbde0>



Legalizing: t30: ch,glue = EpiphanyISD::BRCC t22, BasicBlock:ch<for.body3.lr.ph 0x46b44f8>, Constant:i32<1>, t29:1

Combining: t30: ch,glue = EpiphanyISD::BRCC t22, BasicBlock:ch<for.body3.lr.ph 0x46b44f8>, Constant:i32<1>, t29:1

Legalizing: t29: i32,i32 = EpiphanyISD::CMP t6, t16

Combining: t29: i32,i32 = EpiphanyISD::CMP t6, t16

Legalizing: t25: ch = br t30, BasicBlock:ch<for.end81 0x46bbde0>

Combining: t25: ch = br t30, BasicBlock:ch<for.end81 0x46bbde0>

Legalizing: t22: ch = TokenFactor t8, t14

Combining: t22: ch = TokenFactor t8, t14

Legalizing: t14: ch = CopyToReg t0, Register:i32 %vreg29, t12

Combining: t14: ch = CopyToReg t0, Register:i32 %vreg29, t12

Legalizing: t8: ch = CopyToReg t0, Register:i32 %vreg28, t6

Combining: t8: ch = CopyToReg t0, Register:i32 %vreg28, t6

Legalizing: t12: i32 = add t2, t10

Combining: t12: i32 = add t2, t10

Legalizing: t6: i32 = add t4, Constant:i32<1>

Combining: t6: i32 = add t4, Constant:i32<1>

Legalizing: t16: i32,ch = CopyFromReg t0, Register:i32 %vreg33

Combining: t16: i32,ch = CopyFromReg t0, Register:i32 %vreg33

Legalizing: t10: i32,ch = CopyFromReg t0, Register:i32 %vreg1

Combining: t10: i32,ch = CopyFromReg t0, Register:i32 %vreg1

Legalizing: t4: i32,ch = CopyFromReg t0, Register:i32 %vreg4

Combining: t4: i32,ch = CopyFromReg t0, Register:i32 %vreg4

Legalizing: t2: i32,ch = CopyFromReg t0, Register:i32 %vreg3

Combining: t2: i32,ch = CopyFromReg t0, Register:i32 %vreg3

Legalizing: t24: ch = BasicBlock<for.end81 0x46bbde0>

Combining: t24: ch = BasicBlock<for.end81 0x46bbde0>

Legalizing: t21: ch = BasicBlock<for.body3.lr.ph 0x46b44f8>

Combining: t21: ch = BasicBlock<for.body3.lr.ph 0x46b44f8>

Legalizing: t15: i32 = Register %vreg33

Combining: t15: i32 = Register %vreg33

Legalizing: t13: i32 = Register %vreg29

Combining: t13: i32 = Register %vreg29

Legalizing: t9: i32 = Register %vreg1

Combining: t9: i32 = Register %vreg1

Legalizing: t7: i32 = Register %vreg28

Combining: t7: i32 = Register %vreg28

Legalizing: t5: i32 = Constant<1>

Combining: t5: i32 = Constant<1>

Legalizing: t3: i32 = Register %vreg4

Combining: t3: i32 = Register %vreg4

Legalizing: t1: i32 = Register %vreg3

Combining: t1: i32 = Register %vreg3

Legalizing: t0: ch = EntryToken

Combining: t0: ch = EntryToken
Optimized legalized selection DAG: BB#10 'matmac:for.end78'
SelectionDAG has 22 nodes:
  t0: ch = EntryToken
    t4: i32,ch = CopyFromReg t0, Register:i32 %vreg4
  t6: i32 = add t4, Constant:i32<1>
        t8: ch = CopyToReg t0, Register:i32 %vreg28, t6
            t2: i32,ch = CopyFromReg t0, Register:i32 %vreg3
            t10: i32,ch = CopyFromReg t0, Register:i32 %vreg1
          t12: i32 = add t2, t10
        t14: ch = CopyToReg t0, Register:i32 %vreg29, t12
      t22: ch = TokenFactor t8, t14
        t16: i32,ch = CopyFromReg t0, Register:i32 %vreg33
      t29: i32,i32 = EpiphanyISD::CMP t6, t16
    t30: ch,glue = EpiphanyISD::BRCC t22, BasicBlock:ch<for.body3.lr.ph 0x46b44f8>, Constant:i32<1>, t29:1
  t25: ch = br t30, BasicBlock:ch<for.end81 0x46bbde0>


===== Instruction selection begins: BB#10 'for.end78'
Selecting: t25: ch = br t30, BasicBlock:ch<for.end81 0x46bbde0>

ISEL: Starting pattern match on root node: t25: ch = br t30, BasicBlock:ch<for.end81 0x46bbde0>

  Initial Opcode index to 4515
  Morphed node: t25: ch = BNONE32 BasicBlock:ch<for.end81 0x46bbde0>, t30

ISEL: Match complete!
Selecting: t30: ch,glue = EpiphanyISD::BRCC t22, BasicBlock:ch<for.body3.lr.ph 0x46b44f8>, Constant:i32<1>, t29:1

ISEL: Starting pattern match on root node: t30: ch,glue = EpiphanyISD::BRCC t22, BasicBlock:ch<for.body3.lr.ph 0x46b44f8>, Constant:i32<1>, t29:1

  Initial Opcode index to 2902
  Morphed node: t30: ch = BCC BasicBlock:ch<for.body3.lr.ph 0x46b44f8>, TargetConstant:i32<1>, t33, t33:1

ISEL: Match complete!
Selecting: t22: ch = TokenFactor t8, t14

Selecting: t14: ch = CopyToReg t0, Register:i32 %vreg29, t12

Selecting: t8: ch = CopyToReg t0, Register:i32 %vreg28, t6

Selecting: t29: i32,i32 = EpiphanyISD::CMP t6, t16

ISEL: Starting pattern match on root node: t29: i32,i32 = EpiphanyISD::CMP t6, t16

  Initial Opcode index to 1952
  Match failed at index 1962
  Continuing at 2003
  Morphed node: t29: i32,i32,glue = CMPrr_r32 t6, t16

ISEL: Match complete!
Selecting: t12: i32 = add t2, t10

ISEL: Starting pattern match on root node: t12: i32 = add t2, t10

  Initial Opcode index to 1567
  Match failed at index 1572
  Continuing at 1611
  Morphed node: t12: i32,i32 = ADDrr_r32 t2, t10

ISEL: Match complete!
Selecting: t6: i32 = add t4, Constant:i32<1>

ISEL: Starting pattern match on root node: t6: i32 = add t4, Constant:i32<1>

  Initial Opcode index to 1567
  Morphed node: t6: i32,i32 = ADDri_r32 t4, TargetConstant:i32<1>

ISEL: Match complete!
Selecting: t16: i32,ch = CopyFromReg t0, Register:i32 %vreg33

Selecting: t10: i32,ch = CopyFromReg t0, Register:i32 %vreg1

Selecting: t4: i32,ch = CopyFromReg t0, Register:i32 %vreg4

Selecting: t2: i32,ch = CopyFromReg t0, Register:i32 %vreg3

Selecting: t24: ch = BasicBlock<for.end81 0x46bbde0>

Selecting: t21: ch = BasicBlock<for.body3.lr.ph 0x46b44f8>

Selecting: t15: i32 = Register %vreg33

Selecting: t13: i32 = Register %vreg29

Selecting: t9: i32 = Register %vreg1

Selecting: t7: i32 = Register %vreg28

Selecting: t3: i32 = Register %vreg4

Selecting: t1: i32 = Register %vreg3

Selecting: t0: ch = EntryToken

===== Instruction selection ends:
Selected selection DAG: BB#10 'matmac:for.end78'
SelectionDAG has 24 nodes:
  t0: ch = EntryToken
    t4: i32,ch = CopyFromReg t0, Register:i32 %vreg4
  t6: i32,i32 = ADDri_r32 t4, TargetConstant:i32<1>
      t8: ch = CopyToReg t0, Register:i32 %vreg28, t6
          t2: i32,ch = CopyFromReg t0, Register:i32 %vreg3
          t10: i32,ch = CopyFromReg t0, Register:i32 %vreg1
        t12: i32,i32 = ADDrr_r32 t2, t10
      t14: ch = CopyToReg t0, Register:i32 %vreg29, t12
    t22: ch = TokenFactor t8, t14
      t16: i32,ch = CopyFromReg t0, Register:i32 %vreg33
    t29: i32,i32,glue = CMPrr_r32 t6, t16
  t33: ch,glue = CopyToReg t22, Register:i32 %STATUS, t29:1
    t30: ch = BCC BasicBlock:ch<for.body3.lr.ph 0x46b44f8>, TargetConstant:i32<1>, t33, t33:1
  t25: ch = BNONE32 BasicBlock:ch<for.end81 0x46bbde0>, t30


********** List Scheduling BB#10 'for.end78' **********
SU(0): t25: ch = BNONE32 BasicBlock:ch<for.end81 0x46bbde0>, t30

  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 8
  Depth              : 6
  Height             : 0
  Predecessors:
   ord  SU(1): Latency=1
SU(1): t30: ch = BCC BasicBlock:ch<for.body3.lr.ph 0x46b44f8>, TargetConstant:i32<1>, t33, t33:1

    t33: ch,glue = CopyToReg t22, Register:i32 %STATUS, t29:1

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 8
  Depth              : 5
  Height             : 1
  Predecessors:
   ord  SU(6): Latency=0
   data SU(2): Latency=3 Reg=%STATUS
  Successors:
   ord  SU(0): Latency=1
SU(2): t29: i32,i32,glue = CMPrr_r32 t6, t16

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 5
  Depth              : 2
  Height             : 4
  Predecessors:
   data SU(4): Latency=2
   data SU(3): Latency=0
  Successors:
   data SU(1): Latency=3 Reg=%STATUS
SU(3): t16: i32,ch = CopyFromReg t0, Register:i32 %vreg33

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 0
  Depth              : 0
  Height             : 4
  Successors:
   data SU(2): Latency=0
SU(4): t6: i32,i32 = ADDri_r32 t4, TargetConstant:i32<1>

  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 1
  Latency            : 5
  Depth              : 0
  Height             : 6
  Predecessors:
   data SU(5): Latency=0
  Successors:
   data SU(2): Latency=2
   data SU(11): Latency=3
SU(5): t4: i32,ch = CopyFromReg t0, Register:i32 %vreg4

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 0
  Depth              : 0
  Height             : 6
  Successors:
   data SU(4): Latency=0
SU(6): t22: ch = TokenFactor t8, t14

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 4
  Height             : 1
  Predecessors:
   ord  SU(11): Latency=1
   ord  SU(7): Latency=1
  Successors:
   ord  SU(1): Latency=0
SU(7): t14: ch = CopyToReg t0, Register:i32 %vreg29, t12

  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 3
  Height             : 2
  Predecessors:
   data SU(8): Latency=3
  Successors:
   ord  SU(6): Latency=1
SU(8): t12: i32,i32 = ADDrr_r32 t2, t10

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 5
  Depth              : 0
  Height             : 5
  Predecessors:
   data SU(10): Latency=0
   data SU(9): Latency=0
  Successors:
   data SU(7): Latency=3
SU(9): t10: i32,ch = CopyFromReg t0, Register:i32 %vreg1

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 0
  Depth              : 0
  Height             : 5
  Successors:
   data SU(8): Latency=0
SU(10): t2: i32,ch = CopyFromReg t0, Register:i32 %vreg3

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 0
  Depth              : 0
  Height             : 5
  Successors:
   data SU(8): Latency=0
SU(11): t8: ch = CopyToReg t0, Register:i32 %vreg28, t6

  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 3
  Height             : 2
  Predecessors:
   data SU(4): Latency=3
  Successors:
   ord  SU(6): Latency=1

Examining Available:
Height 0: SU(0): t25: ch = BNONE32 BasicBlock:ch<for.end81 0x46bbde0>, t30


*** Scheduling [0]: SU(0): t25: ch = BNONE32 BasicBlock:ch<for.end81 0x46bbde0>, t30


Examining Available:
Height 1: SU(1): t30: ch = BCC BasicBlock:ch<for.body3.lr.ph 0x46b44f8>, TargetConstant:i32<1>, t33, t33:1

    t33: ch,glue = CopyToReg t22, Register:i32 %STATUS, t29:1


*** Scheduling [1]: SU(1): t30: ch = BCC BasicBlock:ch<for.body3.lr.ph 0x46b44f8>, TargetConstant:i32<1>, t33, t33:1

    t33: ch,glue = CopyToReg t22, Register:i32 %STATUS, t29:1


Examining Available:
Height 1: SU(6): t22: ch = TokenFactor t8, t14

Height 4: SU(2): t29: i32,i32,glue = CMPrr_r32 t6, t16


*** Scheduling [2]: SU(6): t22: ch = TokenFactor t8, t14


Examining Available:
  SU (2)  defines a physreg SU(11)  has no physreg
  SU (2)  defines a physreg SU(7)  has no physreg
Height 4: SU(2): t29: i32,i32,glue = CMPrr_r32 t6, t16

Height 3: SU(11): t8: ch = CopyToReg t0, Register:i32 %vreg28, t6

Height 3: SU(7): t14: ch = CopyToReg t0, Register:i32 %vreg29, t12

  SU (2)  defines a physreg SU(11)  has no physreg
  SU (2)  defines a physreg SU(7)  has no physreg

*** Scheduling [4]: SU(2): t29: i32,i32,glue = CMPrr_r32 t6, t16

FPR64_with_isub_lo_in_FPR32: 2 / 26

Examining Available:
Height 4: SU(3): t16: i32,ch = CopyFromReg t0, Register:i32 %vreg33

Height 3: SU(11): t8: ch = CopyToReg t0, Register:i32 %vreg28, t6

Height 3: SU(7): t14: ch = CopyToReg t0, Register:i32 %vreg29, t12


*** Scheduling [5]: SU(3): t16: i32,ch = CopyFromReg t0, Register:i32 %vreg33

FPR64_with_isub_lo_in_FPR32: 1 / 26

Examining Available:
Height 3: SU(11): t8: ch = CopyToReg t0, Register:i32 %vreg28, t6

Height 3: SU(7): t14: ch = CopyToReg t0, Register:i32 %vreg29, t12


*** Scheduling [6]: SU(11): t8: ch = CopyToReg t0, Register:i32 %vreg28, t6

FPR64_with_isub_lo_in_FPR32: 1 / 26

Examining Available:
Height 3: SU(7): t14: ch = CopyToReg t0, Register:i32 %vreg29, t12

Height 9: SU(4): t6: i32,i32 = ADDri_r32 t4, TargetConstant:i32<1>


*** Scheduling [7]: SU(7): t14: ch = CopyToReg t0, Register:i32 %vreg29, t12

FPR64_with_isub_lo_in_FPR32: 2 / 26

Examining Available:
Height 9: SU(4): t6: i32,i32 = ADDri_r32 t4, TargetConstant:i32<1>

Height 10: SU(8): t12: i32,i32 = ADDrr_r32 t2, t10


*** Scheduling [9]: SU(4): t6: i32,i32 = ADDri_r32 t4, TargetConstant:i32<1>

FPR64_with_isub_lo_in_FPR32: 2 / 26

Examining Available:
Height 9: SU(5): t4: i32,ch = CopyFromReg t0, Register:i32 %vreg4

Height 10: SU(8): t12: i32,i32 = ADDrr_r32 t2, t10


*** Scheduling [10]: SU(5): t4: i32,ch = CopyFromReg t0, Register:i32 %vreg4

FPR64_with_isub_lo_in_FPR32: 1 / 26

Examining Available:
Height 10: SU(8): t12: i32,i32 = ADDrr_r32 t2, t10


*** Scheduling [11]: SU(8): t12: i32,i32 = ADDrr_r32 t2, t10

FPR64_with_isub_lo_in_FPR32: 2 / 26

Examining Available:
Height 11: SU(10): t2: i32,ch = CopyFromReg t0, Register:i32 %vreg3

Height 11: SU(9): t10: i32,ch = CopyFromReg t0, Register:i32 %vreg1


*** Scheduling [12]: SU(10): t2: i32,ch = CopyFromReg t0, Register:i32 %vreg3

FPR64_with_isub_lo_in_FPR32: 1 / 26

Examining Available:
Height 11: SU(9): t10: i32,ch = CopyFromReg t0, Register:i32 %vreg1


*** Scheduling [13]: SU(9): t10: i32,ch = CopyFromReg t0, Register:i32 %vreg1

*** Final schedule ***
SU(9): t10: i32,ch = CopyFromReg t0, Register:i32 %vreg1

SU(10): t2: i32,ch = CopyFromReg t0, Register:i32 %vreg3

SU(8): t12: i32,i32 = ADDrr_r32 t2, t10

SU(5): t4: i32,ch = CopyFromReg t0, Register:i32 %vreg4

SU(4): t6: i32,i32 = ADDri_r32 t4, TargetConstant:i32<1>

SU(7): t14: ch = CopyToReg t0, Register:i32 %vreg29, t12

SU(11): t8: ch = CopyToReg t0, Register:i32 %vreg28, t6

SU(3): t16: i32,ch = CopyFromReg t0, Register:i32 %vreg33

SU(2): t29: i32,i32,glue = CMPrr_r32 t6, t16

SU(6): t22: ch = TokenFactor t8, t14

SU(1): t30: ch = BCC BasicBlock:ch<for.body3.lr.ph 0x46b44f8>, TargetConstant:i32<1>, t33, t33:1

    t33: ch,glue = CopyToReg t22, Register:i32 %STATUS, t29:1

SU(0): t25: ch = BNONE32 BasicBlock:ch<for.end81 0x46bbde0>, t30


Total amount of phi nodes to update: 2
Node 0 : (0x46b45a8, 2147483677)
Node 1 : (0x46b4608, 2147483676)
Initial selection DAG: BB#11 'matmac:for.end81'
SelectionDAG has 2 nodes:
    t0: ch = EntryToken
  t1: ch = EpiphanyISD::RTS t0



Combining: t1: ch = EpiphanyISD::RTS t0

Combining: t0: ch = EntryToken
Optimized lowered selection DAG: BB#11 'matmac:for.end81'
SelectionDAG has 2 nodes:
    t0: ch = EntryToken
  t1: ch = EpiphanyISD::RTS t0


Legally typed node: t0: ch = EntryToken

Legally typed node: t1: ch = EpiphanyISD::RTS t0

Legally typed node: t65535: ch = handlenode t1

Type-legalized selection DAG: BB#11 'matmac:for.end81'
SelectionDAG has 2 nodes:
    t0: ch = EntryToken
  t1: ch = EpiphanyISD::RTS t0



Legalizing: t1: ch = EpiphanyISD::RTS t0

Legalizing: t0: ch = EntryToken
Legalized selection DAG: BB#11 'matmac:for.end81'
SelectionDAG has 2 nodes:
    t0: ch = EntryToken
  t1: ch = EpiphanyISD::RTS t0



Legalizing: t1: ch = EpiphanyISD::RTS t0

Combining: t1: ch = EpiphanyISD::RTS t0

Legalizing: t0: ch = EntryToken

Combining: t0: ch = EntryToken
Optimized legalized selection DAG: BB#11 'matmac:for.end81'
SelectionDAG has 2 nodes:
    t0: ch = EntryToken
  t1: ch = EpiphanyISD::RTS t0


===== Instruction selection begins: BB#11 'for.end81'
Selecting: t1: ch = EpiphanyISD::RTS t0

ISEL: Starting pattern match on root node: t1: ch = EpiphanyISD::RTS t0

  Initial Opcode index to 4480
  Morphed node: t1: ch = RTS t0

ISEL: Match complete!
Selecting: t0: ch = EntryToken

===== Instruction selection ends:
Selected selection DAG: BB#11 'matmac:for.end81'
SelectionDAG has 2 nodes:
    t0: ch = EntryToken
  t1: ch = RTS t0


********** List Scheduling BB#11 'for.end81' **********
SU(0): t1: ch = RTS t0

  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0

Examining Available:
Height 0: SU(0): t1: ch = RTS t0


*** Scheduling [0]: SU(0): t1: ch = RTS t0

*** Final schedule ***
SU(0): t1: ch = RTS t0


Total amount of phi nodes to update: 0
*** MachineFunction at end of ISel ***
# Machine code for function matmac: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=32, align=8, at location [SP]
Function Live Ins: %R0 in %vreg30, %R1 in %vreg31, %R2 in %vreg32, %R3 in %vreg33

BB#0: derived from LLVM BB %entry
    Live Ins: %R0 %R1 %R2 %R3
	%vreg33<def> = COPY %R3; GPR32:%vreg33
	%vreg32<def> = COPY %R2; GPR32:%vreg32
	%vreg31<def> = COPY %R1; GPR32:%vreg31
	%vreg30<def> = COPY %R0; GPR32:%vreg30
	%vreg34<def> = CMPri_r32 %vreg33, 1, %STATUS<imp-def>; GPR32:%vreg34,%vreg33
	BCC <BB#11>, 8, %STATUS<imp-use>
	BNONE32 <BB#1>, %STATUS<imp-use>
    Successors according to CFG: BB#1(0x50000000 / 0x80000000 = 62.50%) BB#11(0x30000000 / 0x80000000 = 37.50%)

BB#1: derived from LLVM BB %for.body3.lr.ph.preheader
    Predecessors according to CFG: BB#0
	%vreg1<def> = LSL32ri %vreg33, 2, %STATUS<imp-def,dead>; GPR32:%vreg1,%vreg33
	%vreg0<def> = ADDri_r32 %vreg31, 8, %STATUS<imp-def,dead>; GPR32:%vreg0,%vreg31
	%vreg36<def> = MOViPTR <fi#0>, 0; GPR32:%vreg36
	%vreg2<def> = ADDri_r32 %vreg36<kill>, 8, %STATUS<imp-def,dead>; GPR32:%vreg2,%vreg36
	%vreg35<def> = MOVi32ri 0; GPR32:%vreg35
    Successors according to CFG: BB#2(?%)

BB#2: derived from LLVM BB %for.body3.lr.ph
    Predecessors according to CFG: BB#1 BB#10
	%vreg3<def> = PHI %vreg32, <BB#1>, %vreg29, <BB#10>; GPR32:%vreg3,%vreg32,%vreg29
	%vreg4<def> = PHI %vreg35, <BB#1>, %vreg28, <BB#10>; GPR32:%vreg4,%vreg35,%vreg28
	%vreg38<def> = IMULrr_r32 %vreg4, %vreg33, %STATUS<imp-def,dead>; GPR32:%vreg38,%vreg4,%vreg33
	%vreg39<def> = LSL32ri %vreg38<kill>, 2, %STATUS<imp-def,dead>; GPR32:%vreg39,%vreg38
	%vreg37<def> = MOVi32ri 0; GPR32:%vreg37
	%vreg5<def> = ADDrr_r32 %vreg30, %vreg39<kill>, %STATUS<imp-def,dead>; GPR32:%vreg5,%vreg30,%vreg39
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %for.body9.preheader
    Predecessors according to CFG: BB#2 BB#9
	%vreg6<def> = PHI %vreg3, <BB#2>, %vreg27, <BB#9>; GPR32:%vreg6,%vreg3,%vreg27
	%vreg7<def> = PHI %vreg0, <BB#2>, %vreg26, <BB#9>; GPR32:%vreg7,%vreg0,%vreg26
	%vreg8<def> = PHI %vreg37, <BB#2>, %vreg25, <BB#9>; GPR32:%vreg8,%vreg37,%vreg25
	%vreg41<def> = MOVi32ri 0; GPR32:%vreg41
	%vreg40<def> = MOVi32ri 0; GPR32:%vreg40
	%vreg42<def> = REG_SEQUENCE %vreg40, isub_hi, %vreg41<kill>, isub_lo; FPR64_with_isub_hi_in_FPR32:%vreg42 GPR32:%vreg40,%vreg41
	LIFETIME_START <fi#0>
	STRi64 %vreg42, <fi#0>, 24; mem:ST8[%1+24] FPR64_with_isub_hi_in_FPR32:%vreg42
	STRi64 %vreg42, <fi#0>, 16; mem:ST8[%1+16] FPR64_with_isub_hi_in_FPR32:%vreg42
	STRi64 %vreg42, <fi#0>, 8; mem:ST8[%1+8] FPR64_with_isub_hi_in_FPR32:%vreg42
	STRi64 %vreg42, <fi#0>, 0; mem:ST8[%1] FPR64_with_isub_hi_in_FPR32:%vreg42
	BNONE32 <BB#5>, %STATUS<imp-use>
    Successors according to CFG: BB#5(?%)

BB#4: derived from LLVM BB %for.cond64.preheader
    Predecessors according to CFG: BB#7
	%vreg60<def> = MOVi32ri 0; GPR32:%vreg60
	BNONE32 <BB#8>, %STATUS<imp-use>
    Successors according to CFG: BB#8(?%)

BB#5: derived from LLVM BB %for.body9
    Predecessors according to CFG: BB#3 BB#7
	%vreg9<def> = PHI %vreg7, <BB#3>, %vreg20, <BB#7>; GPR32:%vreg9,%vreg7,%vreg20
	%vreg10<def> = PHI %vreg40, <BB#3>, %vreg19, <BB#7>; GPR32:%vreg10,%vreg40,%vreg19
	%vreg44<def> = LSL32ri %vreg10, 2, %STATUS<imp-def,dead>; GPR32:%vreg44,%vreg10
	%vreg45<def> = ADDrr_r32 %vreg5, %vreg44<kill>, %STATUS<imp-def,dead>; GPR32:%vreg45,%vreg5,%vreg44
	%vreg11<def> = COPY %vreg2; GPR32:%vreg11,%vreg2
	%vreg43<def> = MOVi32ri 0; GPR32:%vreg43
	%vreg12<def> = LDRf32 %vreg45<kill>, 0; mem:Volatile LD4[%add.ptr10](tbaa=!2) FPR32:%vreg12 GPR32:%vreg45
    Successors according to CFG: BB#6(?%)

BB#6: derived from LLVM BB %for.body13
    Predecessors according to CFG: BB#5 BB#6
	%vreg13<def> = PHI %vreg11, <BB#5>, %vreg18, <BB#6>; GPR32:%vreg13,%vreg11,%vreg18
	%vreg14<def> = PHI %vreg9, <BB#5>, %vreg17, <BB#6>; GPR32:%vreg14,%vreg9,%vreg17
	%vreg15<def> = PHI %vreg43, <BB#5>, %vreg16, <BB#6>; GPR32:%vreg15,%vreg43,%vreg16
	%vreg46<def> = LDRf32 %vreg14, -8; mem:Volatile LD4[%scevgep8](tbaa=!2) FPR32:%vreg46 GPR32:%vreg14
	%vreg18<def> = ADDri_r32 %vreg13, 16, %STATUS<imp-def,dead>; GPR32:%vreg18,%vreg13
	%vreg17<def> = ADDri_r32 %vreg14, 16, %STATUS<imp-def,dead>; GPR32:%vreg17,%vreg14
	%vreg47<def> = LDRf32 %vreg14, -4; mem:Volatile LD4[%scevgep9](tbaa=!2) FPR32:%vreg47 GPR32:%vreg14
	%vreg16<def> = ADDri_r32 %vreg15, 4, %STATUS<imp-def,dead>; GPR32:%vreg16,%vreg15
	%vreg48<def> = LDRf32 %vreg14, 0; mem:Volatile LD4[%lsr.iv5](tbaa=!2) FPR32:%vreg48 GPR32:%vreg14
	%vreg49<def> = LDRf32 %vreg14, 4; mem:Volatile LD4[%scevgep7](tbaa=!2) FPR32:%vreg49 GPR32:%vreg14
	%vreg50<def> = LDRf32 %vreg13, -8; mem:LD4[%scevgep15](tbaa=!2) FPR32:%vreg50 GPR32:%vreg13
	%vreg51<def,tied1> = FMADDrr_r32 %vreg50<tied0>, %vreg12, %vreg46<kill>, %STATUS<imp-def,dead>; FPR32:%vreg51,%vreg50,%vreg12,%vreg46
	STRf32 %vreg51<kill>, %vreg13, -8; mem:ST4[%scevgep15](tbaa=!2) FPR32:%vreg51 GPR32:%vreg13
	%vreg52<def> = LDRf32 %vreg13, -4; mem:LD4[%scevgep17](tbaa=!2) FPR32:%vreg52 GPR32:%vreg13
	%vreg53<def,tied1> = FMADDrr_r32 %vreg52<tied0>, %vreg12, %vreg47<kill>, %STATUS<imp-def,dead>; FPR32:%vreg53,%vreg52,%vreg12,%vreg47
	STRf32 %vreg53<kill>, %vreg13, -4; mem:ST4[%scevgep17](tbaa=!2) FPR32:%vreg53 GPR32:%vreg13
	%vreg54<def> = LDRf32 %vreg13, 0; mem:LD4[%lsr.iv1214](tbaa=!2) FPR32:%vreg54 GPR32:%vreg13
	%vreg55<def,tied1> = FMADDrr_r32 %vreg54<tied0>, %vreg12, %vreg48<kill>, %STATUS<imp-def,dead>; FPR32:%vreg55,%vreg54,%vreg12,%vreg48
	STRf32 %vreg55<kill>, %vreg13, 0; mem:ST4[%lsr.iv1214](tbaa=!2) FPR32:%vreg55 GPR32:%vreg13
	%vreg56<def> = LDRf32 %vreg13, 4; mem:LD4[%scevgep16](tbaa=!2) FPR32:%vreg56 GPR32:%vreg13
	%vreg57<def,tied1> = FMADDrr_r32 %vreg56<tied0>, %vreg12, %vreg49<kill>, %STATUS<imp-def,dead>; FPR32:%vreg57,%vreg56,%vreg12,%vreg49
	%vreg58<def> = CMPri_r32 %vreg16, 8, %STATUS<imp-def>; GPR32:%vreg58,%vreg16
	STRf32 %vreg57<kill>, %vreg13, 4; mem:ST4[%scevgep16](tbaa=!2) FPR32:%vreg57 GPR32:%vreg13
	BCC <BB#6>, 8, %STATUS<imp-use>
	BNONE32 <BB#7>, %STATUS<imp-use>
    Successors according to CFG: BB#6(0x7c000000 / 0x80000000 = 96.88%) BB#7(0x04000000 / 0x80000000 = 3.12%)

BB#7: derived from LLVM BB %for.end60
    Predecessors according to CFG: BB#6
	%vreg20<def> = ADDrr_r32 %vreg9, %vreg1, %STATUS<imp-def,dead>; GPR32:%vreg20,%vreg9,%vreg1
	%vreg19<def> = ADDri_r32 %vreg10, 1, %STATUS<imp-def,dead>; GPR32:%vreg19,%vreg10
	%vreg59<def> = CMPrr_r32 %vreg19, %vreg33, %STATUS<imp-def>; GPR32:%vreg59,%vreg19,%vreg33
	BCC <BB#4>, 0, %STATUS<imp-use>
	BNONE32 <BB#5>, %STATUS<imp-use>
    Successors according to CFG: BB#4(0x04000000 / 0x80000000 = 3.12%) BB#5(0x7c000000 / 0x80000000 = 96.88%)

BB#8: derived from LLVM BB %for.body66
    Predecessors according to CFG: BB#4 BB#8
	%vreg21<def> = PHI %vreg6, <BB#4>, %vreg24, <BB#8>; GPR32:%vreg21,%vreg6,%vreg24
	%vreg22<def> = PHI %vreg60, <BB#4>, %vreg23, <BB#8>; GPR32:%vreg22,%vreg60,%vreg23
	%vreg61<def> = MOViPTR <fi#0>, 0; GPR32:%vreg61
	%vreg62<def> = ADDrr_r32 %vreg61<kill>, %vreg22, %STATUS<imp-def,dead>; GPR32:%vreg62,%vreg61,%vreg22
	%vreg63<def> = LDRf32 %vreg62<kill>, 0; mem:LD4[%sunkaddr30](tbaa=!2) FPR32:%vreg63 GPR32:%vreg62
	%vreg24<def> = ADDri_r32 %vreg21, 4, %STATUS<imp-def,dead>; GPR32:%vreg24,%vreg21
	%vreg23<def> = ADDri_r32 %vreg22, 4, %STATUS<imp-def,dead>; GPR32:%vreg23,%vreg22
	%vreg64<def> = LDRf32 %vreg21, 0; mem:Volatile LD4[%lsr.iv24](tbaa=!2) FPR32:%vreg64 GPR32:%vreg21
	%vreg65<def> = FADDrr_r32 %vreg63<kill>, %vreg64<kill>, %STATUS<imp-def,dead>; FPR32:%vreg65,%vreg63,%vreg64
	%vreg66<def> = CMPri_r32 %vreg23, 32, %STATUS<imp-def>; GPR32:%vreg66,%vreg23
	STRf32 %vreg65<kill>, %vreg21, 0; mem:Volatile ST4[%lsr.iv24](tbaa=!2) FPR32:%vreg65 GPR32:%vreg21
	BCC <BB#8>, 1, %STATUS<imp-use>
	BNONE32 <BB#9>, %STATUS<imp-use>
    Successors according to CFG: BB#9(0x04000000 / 0x80000000 = 3.12%) BB#8(0x7c000000 / 0x80000000 = 96.88%)

BB#9: derived from LLVM BB %for.end75
    Predecessors according to CFG: BB#8
	%vreg27<def> = ADDri_r32 %vreg6, 32, %STATUS<imp-def,dead>; GPR32:%vreg27,%vreg6
	%vreg26<def> = ADDri_r32 %vreg7, 32, %STATUS<imp-def,dead>; GPR32:%vreg26,%vreg7
	LIFETIME_END <fi#0>
	%vreg25<def> = ADDri_r32 %vreg8, 8, %STATUS<imp-def,dead>; GPR32:%vreg25,%vreg8
	%vreg67<def> = CMPrr_r32 %vreg25, %vreg33, %STATUS<imp-def>; GPR32:%vreg67,%vreg25,%vreg33
	BCC <BB#3>, 8, %STATUS<imp-use>
	BNONE32 <BB#10>, %STATUS<imp-use>
    Successors according to CFG: BB#3(0x7c000000 / 0x80000000 = 96.88%) BB#10(0x04000000 / 0x80000000 = 3.12%)

BB#10: derived from LLVM BB %for.end78
    Predecessors according to CFG: BB#9
	%vreg29<def> = ADDrr_r32 %vreg3, %vreg1, %STATUS<imp-def,dead>; GPR32:%vreg29,%vreg3,%vreg1
	%vreg28<def> = ADDri_r32 %vreg4, 1, %STATUS<imp-def,dead>; GPR32:%vreg28,%vreg4
	%vreg68<def> = CMPrr_r32 %vreg28, %vreg33, %STATUS<imp-def>; GPR32:%vreg68,%vreg28,%vreg33
	BCC <BB#2>, 1, %STATUS<imp-use>
	BNONE32 <BB#11>, %STATUS<imp-use>
    Successors according to CFG: BB#11(0x04000000 / 0x80000000 = 3.12%) BB#2(0x7c000000 / 0x80000000 = 96.88%)

BB#11: derived from LLVM BB %for.end81
    Predecessors according to CFG: BB#0 BB#10
	RTS

# End machine code for function matmac.

# *** IR Dump Before Epiphany FPU/IALU2 config flag optimization pass ***:
# Machine code for function matmac: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=32, align=8, at location [SP]
Function Live Ins: %R0 in %vreg30, %R1 in %vreg31, %R2 in %vreg32, %R3 in %vreg33

BB#0: derived from LLVM BB %entry
    Live Ins: %R0 %R1 %R2 %R3
	%vreg33<def> = COPY %R3; GPR32:%vreg33
	%vreg32<def> = COPY %R2; GPR32:%vreg32
	%vreg31<def> = COPY %R1; GPR32:%vreg31
	%vreg30<def> = COPY %R0; GPR32:%vreg30
	%vreg34<def> = CMPri_r32 %vreg33, 1, %STATUS<imp-def>; GPR32:%vreg34,%vreg33
	BCC <BB#11>, 8, %STATUS<imp-use>
	BNONE32 <BB#1>, %STATUS<imp-use>
    Successors according to CFG: BB#1(0x50000000 / 0x80000000 = 62.50%) BB#11(0x30000000 / 0x80000000 = 37.50%)

BB#1: derived from LLVM BB %for.body3.lr.ph.preheader
    Predecessors according to CFG: BB#0
	%vreg1<def> = LSL32ri %vreg33, 2, %STATUS<imp-def,dead>; GPR32:%vreg1,%vreg33
	%vreg0<def> = ADDri_r32 %vreg31, 8, %STATUS<imp-def,dead>; GPR32:%vreg0,%vreg31
	%vreg36<def> = MOViPTR <fi#0>, 0; GPR32:%vreg36
	%vreg2<def> = ADDri_r32 %vreg36<kill>, 8, %STATUS<imp-def,dead>; GPR32:%vreg2,%vreg36
	%vreg35<def> = MOVi32ri 0; GPR32:%vreg35
    Successors according to CFG: BB#2(?%)

BB#2: derived from LLVM BB %for.body3.lr.ph
    Predecessors according to CFG: BB#1 BB#10
	%vreg3<def> = PHI %vreg32, <BB#1>, %vreg29, <BB#10>; GPR32:%vreg3,%vreg32,%vreg29
	%vreg4<def> = PHI %vreg35, <BB#1>, %vreg28, <BB#10>; GPR32:%vreg4,%vreg35,%vreg28
	%vreg38<def> = IMULrr_r32 %vreg4, %vreg33, %STATUS<imp-def,dead>; GPR32:%vreg38,%vreg4,%vreg33
	%vreg39<def> = LSL32ri %vreg38<kill>, 2, %STATUS<imp-def,dead>; GPR32:%vreg39,%vreg38
	%vreg37<def> = MOVi32ri 0; GPR32:%vreg37
	%vreg5<def> = ADDrr_r32 %vreg30, %vreg39<kill>, %STATUS<imp-def,dead>; GPR32:%vreg5,%vreg30,%vreg39
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %for.body9.preheader
    Predecessors according to CFG: BB#2 BB#9
	%vreg6<def> = PHI %vreg3, <BB#2>, %vreg27, <BB#9>; GPR32:%vreg6,%vreg3,%vreg27
	%vreg7<def> = PHI %vreg0, <BB#2>, %vreg26, <BB#9>; GPR32:%vreg7,%vreg0,%vreg26
	%vreg8<def> = PHI %vreg37, <BB#2>, %vreg25, <BB#9>; GPR32:%vreg8,%vreg37,%vreg25
	%vreg41<def> = MOVi32ri 0; GPR32:%vreg41
	%vreg40<def> = MOVi32ri 0; GPR32:%vreg40
	%vreg42<def> = REG_SEQUENCE %vreg40, isub_hi, %vreg41<kill>, isub_lo; FPR64_with_isub_hi_in_FPR32:%vreg42 GPR32:%vreg40,%vreg41
	LIFETIME_START <fi#0>
	STRi64 %vreg42, <fi#0>, 24; mem:ST8[%1+24] FPR64_with_isub_hi_in_FPR32:%vreg42
	STRi64 %vreg42, <fi#0>, 16; mem:ST8[%1+16] FPR64_with_isub_hi_in_FPR32:%vreg42
	STRi64 %vreg42, <fi#0>, 8; mem:ST8[%1+8] FPR64_with_isub_hi_in_FPR32:%vreg42
	STRi64 %vreg42, <fi#0>, 0; mem:ST8[%1] FPR64_with_isub_hi_in_FPR32:%vreg42
	BNONE32 <BB#5>, %STATUS<imp-use>
    Successors according to CFG: BB#5(?%)

BB#4: derived from LLVM BB %for.cond64.preheader
    Predecessors according to CFG: BB#7
	%vreg60<def> = MOVi32ri 0; GPR32:%vreg60
	BNONE32 <BB#8>, %STATUS<imp-use>
    Successors according to CFG: BB#8(?%)

BB#5: derived from LLVM BB %for.body9
    Predecessors according to CFG: BB#3 BB#7
	%vreg9<def> = PHI %vreg7, <BB#3>, %vreg20, <BB#7>; GPR32:%vreg9,%vreg7,%vreg20
	%vreg10<def> = PHI %vreg40, <BB#3>, %vreg19, <BB#7>; GPR32:%vreg10,%vreg40,%vreg19
	%vreg44<def> = LSL32ri %vreg10, 2, %STATUS<imp-def,dead>; GPR32:%vreg44,%vreg10
	%vreg45<def> = ADDrr_r32 %vreg5, %vreg44<kill>, %STATUS<imp-def,dead>; GPR32:%vreg45,%vreg5,%vreg44
	%vreg11<def> = COPY %vreg2; GPR32:%vreg11,%vreg2
	%vreg43<def> = MOVi32ri 0; GPR32:%vreg43
	%vreg12<def> = LDRf32 %vreg45<kill>, 0; mem:Volatile LD4[%add.ptr10](tbaa=!2) FPR32:%vreg12 GPR32:%vreg45
    Successors according to CFG: BB#6(?%)

BB#6: derived from LLVM BB %for.body13
    Predecessors according to CFG: BB#5 BB#6
	%vreg13<def> = PHI %vreg11, <BB#5>, %vreg18, <BB#6>; GPR32:%vreg13,%vreg11,%vreg18
	%vreg14<def> = PHI %vreg9, <BB#5>, %vreg17, <BB#6>; GPR32:%vreg14,%vreg9,%vreg17
	%vreg15<def> = PHI %vreg43, <BB#5>, %vreg16, <BB#6>; GPR32:%vreg15,%vreg43,%vreg16
	%vreg46<def> = LDRf32 %vreg14, -8; mem:Volatile LD4[%scevgep8](tbaa=!2) FPR32:%vreg46 GPR32:%vreg14
	%vreg18<def> = ADDri_r32 %vreg13, 16, %STATUS<imp-def,dead>; GPR32:%vreg18,%vreg13
	%vreg17<def> = ADDri_r32 %vreg14, 16, %STATUS<imp-def,dead>; GPR32:%vreg17,%vreg14
	%vreg47<def> = LDRf32 %vreg14, -4; mem:Volatile LD4[%scevgep9](tbaa=!2) FPR32:%vreg47 GPR32:%vreg14
	%vreg16<def> = ADDri_r32 %vreg15, 4, %STATUS<imp-def,dead>; GPR32:%vreg16,%vreg15
	%vreg48<def> = LDRf32 %vreg14, 0; mem:Volatile LD4[%lsr.iv5](tbaa=!2) FPR32:%vreg48 GPR32:%vreg14
	%vreg49<def> = LDRf32 %vreg14, 4; mem:Volatile LD4[%scevgep7](tbaa=!2) FPR32:%vreg49 GPR32:%vreg14
	%vreg50<def> = LDRf32 %vreg13, -8; mem:LD4[%scevgep15](tbaa=!2) FPR32:%vreg50 GPR32:%vreg13
	%vreg51<def,tied1> = FMADDrr_r32 %vreg50<tied0>, %vreg12, %vreg46<kill>, %STATUS<imp-def,dead>; FPR32:%vreg51,%vreg50,%vreg12,%vreg46
	STRf32 %vreg51<kill>, %vreg13, -8; mem:ST4[%scevgep15](tbaa=!2) FPR32:%vreg51 GPR32:%vreg13
	%vreg52<def> = LDRf32 %vreg13, -4; mem:LD4[%scevgep17](tbaa=!2) FPR32:%vreg52 GPR32:%vreg13
	%vreg53<def,tied1> = FMADDrr_r32 %vreg52<tied0>, %vreg12, %vreg47<kill>, %STATUS<imp-def,dead>; FPR32:%vreg53,%vreg52,%vreg12,%vreg47
	STRf32 %vreg53<kill>, %vreg13, -4; mem:ST4[%scevgep17](tbaa=!2) FPR32:%vreg53 GPR32:%vreg13
	%vreg54<def> = LDRf32 %vreg13, 0; mem:LD4[%lsr.iv1214](tbaa=!2) FPR32:%vreg54 GPR32:%vreg13
	%vreg55<def,tied1> = FMADDrr_r32 %vreg54<tied0>, %vreg12, %vreg48<kill>, %STATUS<imp-def,dead>; FPR32:%vreg55,%vreg54,%vreg12,%vreg48
	STRf32 %vreg55<kill>, %vreg13, 0; mem:ST4[%lsr.iv1214](tbaa=!2) FPR32:%vreg55 GPR32:%vreg13
	%vreg56<def> = LDRf32 %vreg13, 4; mem:LD4[%scevgep16](tbaa=!2) FPR32:%vreg56 GPR32:%vreg13
	%vreg57<def,tied1> = FMADDrr_r32 %vreg56<tied0>, %vreg12, %vreg49<kill>, %STATUS<imp-def,dead>; FPR32:%vreg57,%vreg56,%vreg12,%vreg49
	%vreg58<def> = CMPri_r32 %vreg16, 8, %STATUS<imp-def>; GPR32:%vreg58,%vreg16
	STRf32 %vreg57<kill>, %vreg13, 4; mem:ST4[%scevgep16](tbaa=!2) FPR32:%vreg57 GPR32:%vreg13
	BCC <BB#6>, 8, %STATUS<imp-use>
	BNONE32 <BB#7>, %STATUS<imp-use>
    Successors according to CFG: BB#6(0x7c000000 / 0x80000000 = 96.88%) BB#7(0x04000000 / 0x80000000 = 3.12%)

BB#7: derived from LLVM BB %for.end60
    Predecessors according to CFG: BB#6
	%vreg20<def> = ADDrr_r32 %vreg9, %vreg1, %STATUS<imp-def,dead>; GPR32:%vreg20,%vreg9,%vreg1
	%vreg19<def> = ADDri_r32 %vreg10, 1, %STATUS<imp-def,dead>; GPR32:%vreg19,%vreg10
	%vreg59<def> = CMPrr_r32 %vreg19, %vreg33, %STATUS<imp-def>; GPR32:%vreg59,%vreg19,%vreg33
	BCC <BB#4>, 0, %STATUS<imp-use>
	BNONE32 <BB#5>, %STATUS<imp-use>
    Successors according to CFG: BB#4(0x04000000 / 0x80000000 = 3.12%) BB#5(0x7c000000 / 0x80000000 = 96.88%)

BB#8: derived from LLVM BB %for.body66
    Predecessors according to CFG: BB#4 BB#8
	%vreg21<def> = PHI %vreg6, <BB#4>, %vreg24, <BB#8>; GPR32:%vreg21,%vreg6,%vreg24
	%vreg22<def> = PHI %vreg60, <BB#4>, %vreg23, <BB#8>; GPR32:%vreg22,%vreg60,%vreg23
	%vreg61<def> = MOViPTR <fi#0>, 0; GPR32:%vreg61
	%vreg62<def> = ADDrr_r32 %vreg61<kill>, %vreg22, %STATUS<imp-def,dead>; GPR32:%vreg62,%vreg61,%vreg22
	%vreg63<def> = LDRf32 %vreg62<kill>, 0; mem:LD4[%sunkaddr30](tbaa=!2) FPR32:%vreg63 GPR32:%vreg62
	%vreg24<def> = ADDri_r32 %vreg21, 4, %STATUS<imp-def,dead>; GPR32:%vreg24,%vreg21
	%vreg23<def> = ADDri_r32 %vreg22, 4, %STATUS<imp-def,dead>; GPR32:%vreg23,%vreg22
	%vreg64<def> = LDRf32 %vreg21, 0; mem:Volatile LD4[%lsr.iv24](tbaa=!2) FPR32:%vreg64 GPR32:%vreg21
	%vreg65<def> = FADDrr_r32 %vreg63<kill>, %vreg64<kill>, %STATUS<imp-def,dead>; FPR32:%vreg65,%vreg63,%vreg64
	%vreg66<def> = CMPri_r32 %vreg23, 32, %STATUS<imp-def>; GPR32:%vreg66,%vreg23
	STRf32 %vreg65<kill>, %vreg21, 0; mem:Volatile ST4[%lsr.iv24](tbaa=!2) FPR32:%vreg65 GPR32:%vreg21
	BCC <BB#8>, 1, %STATUS<imp-use>
	BNONE32 <BB#9>, %STATUS<imp-use>
    Successors according to CFG: BB#9(0x04000000 / 0x80000000 = 3.12%) BB#8(0x7c000000 / 0x80000000 = 96.88%)

BB#9: derived from LLVM BB %for.end75
    Predecessors according to CFG: BB#8
	%vreg27<def> = ADDri_r32 %vreg6, 32, %STATUS<imp-def,dead>; GPR32:%vreg27,%vreg6
	%vreg26<def> = ADDri_r32 %vreg7, 32, %STATUS<imp-def,dead>; GPR32:%vreg26,%vreg7
	LIFETIME_END <fi#0>
	%vreg25<def> = ADDri_r32 %vreg8, 8, %STATUS<imp-def,dead>; GPR32:%vreg25,%vreg8
	%vreg67<def> = CMPrr_r32 %vreg25, %vreg33, %STATUS<imp-def>; GPR32:%vreg67,%vreg25,%vreg33
	BCC <BB#3>, 8, %STATUS<imp-use>
	BNONE32 <BB#10>, %STATUS<imp-use>
    Successors according to CFG: BB#3(0x7c000000 / 0x80000000 = 96.88%) BB#10(0x04000000 / 0x80000000 = 3.12%)

BB#10: derived from LLVM BB %for.end78
    Predecessors according to CFG: BB#9
	%vreg29<def> = ADDrr_r32 %vreg3, %vreg1, %STATUS<imp-def,dead>; GPR32:%vreg29,%vreg3,%vreg1
	%vreg28<def> = ADDri_r32 %vreg4, 1, %STATUS<imp-def,dead>; GPR32:%vreg28,%vreg4
	%vreg68<def> = CMPrr_r32 %vreg28, %vreg33, %STATUS<imp-def>; GPR32:%vreg68,%vreg28,%vreg33
	BCC <BB#2>, 1, %STATUS<imp-use>
	BNONE32 <BB#11>, %STATUS<imp-use>
    Successors according to CFG: BB#11(0x04000000 / 0x80000000 = 3.12%) BB#2(0x7c000000 / 0x80000000 = 96.88%)

BB#11: derived from LLVM BB %for.end81
    Predecessors according to CFG: BB#0 BB#10
	RTS

# End machine code for function matmac.


Running Epiphany FPU/IALU2 config pass
# *** IR Dump After Epiphany FPU/IALU2 config flag optimization pass ***:
# Machine code for function matmac: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=32, align=8, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=4, align=4, at location [SP]
Function Live Ins: %R0 in %vreg30, %R1 in %vreg31, %R2 in %vreg32, %R3 in %vreg33

BB#12: 
    Live Ins: %R0 %R1 %R2 %R3
	GID %CONFIG<imp-def>
	%vreg71<def> = MOVFS32_core %CONFIG<kill>; GPR32:%vreg71
	STRi32_r32 %vreg71, <fi#1>, 0; mem:ST4[FixedStack1] GPR32:%vreg71
	%vreg72<def> = MOVi32ri 65535; GPR32:%vreg72
	%vreg73<def,tied1> = MOVTi32ri %vreg72<tied0>, 65521; GPR32:%vreg73,%vreg72
	%vreg69<def> = ANDrr_r32 %vreg71<kill>, %vreg73<kill>, %STATUS<imp-def>; GPR32:%vreg69,%vreg71,%vreg73
	STRi32_r32 %vreg69, <fi#2>, 0; mem:ST4[FixedStack2] GPR32:%vreg69
	%vreg70<def,tied1> = MOVTi32ri %vreg71<kill,tied0>, 72; GPR32:%vreg70,%vreg71
	STRi32_r32 %vreg70, <fi#3>, 0; mem:ST4[FixedStack3] GPR32:%vreg70
	GIE %CONFIG<imp-use,kill>
    Successors according to CFG: BB#0(?%)

BB#0: derived from LLVM BB %entry
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#12
	%vreg33<def> = COPY %R3; GPR32:%vreg33
	%vreg32<def> = COPY %R2; GPR32:%vreg32
	%vreg31<def> = COPY %R1; GPR32:%vreg31
	%vreg30<def> = COPY %R0; GPR32:%vreg30
	%vreg34<def> = CMPri_r32 %vreg33, 1, %STATUS<imp-def>; GPR32:%vreg34,%vreg33
	BCC <BB#11>, 8, %STATUS<imp-use>
	BNONE32 <BB#1>, %STATUS<imp-use>
    Successors according to CFG: BB#1(0x50000000 / 0x80000000 = 62.50%) BB#11(0x30000000 / 0x80000000 = 37.50%)

BB#1: derived from LLVM BB %for.body3.lr.ph.preheader
    Predecessors according to CFG: BB#0
	%vreg1<def> = LSL32ri %vreg33, 2, %STATUS<imp-def,dead>; GPR32:%vreg1,%vreg33
	%vreg0<def> = ADDri_r32 %vreg31, 8, %STATUS<imp-def,dead>; GPR32:%vreg0,%vreg31
	%vreg36<def> = MOViPTR <fi#0>, 0; GPR32:%vreg36
	%vreg2<def> = ADDri_r32 %vreg36<kill>, 8, %STATUS<imp-def,dead>; GPR32:%vreg2,%vreg36
	%vreg35<def> = MOVi32ri 0; GPR32:%vreg35
    Successors according to CFG: BB#2(?%)

BB#2: derived from LLVM BB %for.body3.lr.ph
    Predecessors according to CFG: BB#1 BB#10
	%vreg3<def> = PHI %vreg32, <BB#1>, %vreg29, <BB#10>; GPR32:%vreg3,%vreg32,%vreg29
	%vreg4<def> = PHI %vreg35, <BB#1>, %vreg28, <BB#10>; GPR32:%vreg4,%vreg35,%vreg28
	%vreg74<def> = LDRi32_r32 <fi#3>, 0; mem:LD4[FixedStack3] GPR32:%vreg74
	GID %CONFIG<imp-def>
	%CONFIG<def> = MOVTS32_core %vreg74<kill>; GPR32:%vreg74
	GIE %CONFIG<imp-def>
	%vreg38<def> = IMULrr_r32 %vreg4, %vreg33, %STATUS<imp-def,dead>; GPR32:%vreg38,%vreg4,%vreg33
	%vreg39<def> = LSL32ri %vreg38<kill>, 2, %STATUS<imp-def,dead>; GPR32:%vreg39,%vreg38
	%vreg37<def> = MOVi32ri 0; GPR32:%vreg37
	%vreg5<def> = ADDrr_r32 %vreg30, %vreg39<kill>, %STATUS<imp-def,dead>; GPR32:%vreg5,%vreg30,%vreg39
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %for.body9.preheader
    Predecessors according to CFG: BB#2 BB#9
	%vreg6<def> = PHI %vreg3, <BB#2>, %vreg27, <BB#9>; GPR32:%vreg6,%vreg3,%vreg27
	%vreg7<def> = PHI %vreg0, <BB#2>, %vreg26, <BB#9>; GPR32:%vreg7,%vreg0,%vreg26
	%vreg8<def> = PHI %vreg37, <BB#2>, %vreg25, <BB#9>; GPR32:%vreg8,%vreg37,%vreg25
	%vreg41<def> = MOVi32ri 0; GPR32:%vreg41
	%vreg40<def> = MOVi32ri 0; GPR32:%vreg40
	%vreg42<def> = REG_SEQUENCE %vreg40, isub_hi, %vreg41<kill>, isub_lo; FPR64_with_isub_hi_in_FPR32:%vreg42 GPR32:%vreg40,%vreg41
	LIFETIME_START <fi#0>
	STRi64 %vreg42, <fi#0>, 24; mem:ST8[%1+24] FPR64_with_isub_hi_in_FPR32:%vreg42
	STRi64 %vreg42, <fi#0>, 16; mem:ST8[%1+16] FPR64_with_isub_hi_in_FPR32:%vreg42
	STRi64 %vreg42, <fi#0>, 8; mem:ST8[%1+8] FPR64_with_isub_hi_in_FPR32:%vreg42
	STRi64 %vreg42, <fi#0>, 0; mem:ST8[%1] FPR64_with_isub_hi_in_FPR32:%vreg42
	BNONE32 <BB#5>, %STATUS<imp-use>
    Successors according to CFG: BB#5(?%)

BB#4: derived from LLVM BB %for.cond64.preheader
    Predecessors according to CFG: BB#7
	%vreg60<def> = MOVi32ri 0; GPR32:%vreg60
	BNONE32 <BB#8>, %STATUS<imp-use>
    Successors according to CFG: BB#8(?%)

BB#5: derived from LLVM BB %for.body9
    Predecessors according to CFG: BB#3 BB#7
	%vreg9<def> = PHI %vreg7, <BB#3>, %vreg20, <BB#7>; GPR32:%vreg9,%vreg7,%vreg20
	%vreg10<def> = PHI %vreg40, <BB#3>, %vreg19, <BB#7>; GPR32:%vreg10,%vreg40,%vreg19
	%vreg44<def> = LSL32ri %vreg10, 2, %STATUS<imp-def,dead>; GPR32:%vreg44,%vreg10
	%vreg45<def> = ADDrr_r32 %vreg5, %vreg44<kill>, %STATUS<imp-def,dead>; GPR32:%vreg45,%vreg5,%vreg44
	%vreg11<def> = COPY %vreg2; GPR32:%vreg11,%vreg2
	%vreg43<def> = MOVi32ri 0; GPR32:%vreg43
	%vreg12<def> = LDRf32 %vreg45<kill>, 0; mem:Volatile LD4[%add.ptr10](tbaa=!2) FPR32:%vreg12 GPR32:%vreg45
    Successors according to CFG: BB#6(?%)

BB#6: derived from LLVM BB %for.body13
    Predecessors according to CFG: BB#5 BB#6
	%vreg13<def> = PHI %vreg11, <BB#5>, %vreg18, <BB#6>; GPR32:%vreg13,%vreg11,%vreg18
	%vreg14<def> = PHI %vreg9, <BB#5>, %vreg17, <BB#6>; GPR32:%vreg14,%vreg9,%vreg17
	%vreg15<def> = PHI %vreg43, <BB#5>, %vreg16, <BB#6>; GPR32:%vreg15,%vreg43,%vreg16
	%vreg46<def> = LDRf32 %vreg14, -8; mem:Volatile LD4[%scevgep8](tbaa=!2) FPR32:%vreg46 GPR32:%vreg14
	%vreg18<def> = ADDri_r32 %vreg13, 16, %STATUS<imp-def,dead>; GPR32:%vreg18,%vreg13
	%vreg17<def> = ADDri_r32 %vreg14, 16, %STATUS<imp-def,dead>; GPR32:%vreg17,%vreg14
	%vreg47<def> = LDRf32 %vreg14, -4; mem:Volatile LD4[%scevgep9](tbaa=!2) FPR32:%vreg47 GPR32:%vreg14
	%vreg16<def> = ADDri_r32 %vreg15, 4, %STATUS<imp-def,dead>; GPR32:%vreg16,%vreg15
	%vreg48<def> = LDRf32 %vreg14, 0; mem:Volatile LD4[%lsr.iv5](tbaa=!2) FPR32:%vreg48 GPR32:%vreg14
	%vreg49<def> = LDRf32 %vreg14, 4; mem:Volatile LD4[%scevgep7](tbaa=!2) FPR32:%vreg49 GPR32:%vreg14
	%vreg50<def> = LDRf32 %vreg13, -8; mem:LD4[%scevgep15](tbaa=!2) FPR32:%vreg50 GPR32:%vreg13
	%vreg75<def> = LDRi32_r32 <fi#2>, 0; mem:LD4[FixedStack2] GPR32:%vreg75
	GID %CONFIG<imp-def>
	%CONFIG<def> = MOVTS32_core %vreg75<kill>; GPR32:%vreg75
	GIE %CONFIG<imp-def>
	%vreg51<def,tied1> = FMADDrr_r32 %vreg50<tied0>, %vreg12, %vreg46<kill>, %STATUS<imp-def,dead>; FPR32:%vreg51,%vreg50,%vreg12,%vreg46
	STRf32 %vreg51<kill>, %vreg13, -8; mem:ST4[%scevgep15](tbaa=!2) FPR32:%vreg51 GPR32:%vreg13
	%vreg52<def> = LDRf32 %vreg13, -4; mem:LD4[%scevgep17](tbaa=!2) FPR32:%vreg52 GPR32:%vreg13
	%vreg53<def,tied1> = FMADDrr_r32 %vreg52<tied0>, %vreg12, %vreg47<kill>, %STATUS<imp-def,dead>; FPR32:%vreg53,%vreg52,%vreg12,%vreg47
	STRf32 %vreg53<kill>, %vreg13, -4; mem:ST4[%scevgep17](tbaa=!2) FPR32:%vreg53 GPR32:%vreg13
	%vreg54<def> = LDRf32 %vreg13, 0; mem:LD4[%lsr.iv1214](tbaa=!2) FPR32:%vreg54 GPR32:%vreg13
	%vreg55<def,tied1> = FMADDrr_r32 %vreg54<tied0>, %vreg12, %vreg48<kill>, %STATUS<imp-def,dead>; FPR32:%vreg55,%vreg54,%vreg12,%vreg48
	STRf32 %vreg55<kill>, %vreg13, 0; mem:ST4[%lsr.iv1214](tbaa=!2) FPR32:%vreg55 GPR32:%vreg13
	%vreg56<def> = LDRf32 %vreg13, 4; mem:LD4[%scevgep16](tbaa=!2) FPR32:%vreg56 GPR32:%vreg13
	%vreg57<def,tied1> = FMADDrr_r32 %vreg56<tied0>, %vreg12, %vreg49<kill>, %STATUS<imp-def,dead>; FPR32:%vreg57,%vreg56,%vreg12,%vreg49
	%vreg58<def> = CMPri_r32 %vreg16, 8, %STATUS<imp-def>; GPR32:%vreg58,%vreg16
	STRf32 %vreg57<kill>, %vreg13, 4; mem:ST4[%scevgep16](tbaa=!2) FPR32:%vreg57 GPR32:%vreg13
	BCC <BB#6>, 8, %STATUS<imp-use>
	BNONE32 <BB#7>, %STATUS<imp-use>
    Successors according to CFG: BB#6(0x7c000000 / 0x80000000 = 96.88%) BB#7(0x04000000 / 0x80000000 = 3.12%)

BB#7: derived from LLVM BB %for.end60
    Predecessors according to CFG: BB#6
	%vreg20<def> = ADDrr_r32 %vreg9, %vreg1, %STATUS<imp-def,dead>; GPR32:%vreg20,%vreg9,%vreg1
	%vreg19<def> = ADDri_r32 %vreg10, 1, %STATUS<imp-def,dead>; GPR32:%vreg19,%vreg10
	%vreg59<def> = CMPrr_r32 %vreg19, %vreg33, %STATUS<imp-def>; GPR32:%vreg59,%vreg19,%vreg33
	BCC <BB#4>, 0, %STATUS<imp-use>
	BNONE32 <BB#5>, %STATUS<imp-use>
    Successors according to CFG: BB#4(0x04000000 / 0x80000000 = 3.12%) BB#5(0x7c000000 / 0x80000000 = 96.88%)

BB#8: derived from LLVM BB %for.body66
    Predecessors according to CFG: BB#4 BB#8
	%vreg21<def> = PHI %vreg6, <BB#4>, %vreg24, <BB#8>; GPR32:%vreg21,%vreg6,%vreg24
	%vreg22<def> = PHI %vreg60, <BB#4>, %vreg23, <BB#8>; GPR32:%vreg22,%vreg60,%vreg23
	%vreg61<def> = MOViPTR <fi#0>, 0; GPR32:%vreg61
	%vreg62<def> = ADDrr_r32 %vreg61<kill>, %vreg22, %STATUS<imp-def,dead>; GPR32:%vreg62,%vreg61,%vreg22
	%vreg63<def> = LDRf32 %vreg62<kill>, 0; mem:LD4[%sunkaddr30](tbaa=!2) FPR32:%vreg63 GPR32:%vreg62
	%vreg24<def> = ADDri_r32 %vreg21, 4, %STATUS<imp-def,dead>; GPR32:%vreg24,%vreg21
	%vreg23<def> = ADDri_r32 %vreg22, 4, %STATUS<imp-def,dead>; GPR32:%vreg23,%vreg22
	%vreg64<def> = LDRf32 %vreg21, 0; mem:Volatile LD4[%lsr.iv24](tbaa=!2) FPR32:%vreg64 GPR32:%vreg21
	%vreg76<def> = LDRi32_r32 <fi#2>, 0; mem:LD4[FixedStack2] GPR32:%vreg76
	GID %CONFIG<imp-def>
	%CONFIG<def> = MOVTS32_core %vreg76<kill>; GPR32:%vreg76
	GIE %CONFIG<imp-def>
	%vreg65<def> = FADDrr_r32 %vreg63<kill>, %vreg64<kill>, %STATUS<imp-def,dead>; FPR32:%vreg65,%vreg63,%vreg64
	%vreg66<def> = CMPri_r32 %vreg23, 32, %STATUS<imp-def>; GPR32:%vreg66,%vreg23
	STRf32 %vreg65<kill>, %vreg21, 0; mem:Volatile ST4[%lsr.iv24](tbaa=!2) FPR32:%vreg65 GPR32:%vreg21
	BCC <BB#8>, 1, %STATUS<imp-use>
	BNONE32 <BB#9>, %STATUS<imp-use>
    Successors according to CFG: BB#9(0x04000000 / 0x80000000 = 3.12%) BB#8(0x7c000000 / 0x80000000 = 96.88%)

BB#9: derived from LLVM BB %for.end75
    Predecessors according to CFG: BB#8
	%vreg27<def> = ADDri_r32 %vreg6, 32, %STATUS<imp-def,dead>; GPR32:%vreg27,%vreg6
	%vreg26<def> = ADDri_r32 %vreg7, 32, %STATUS<imp-def,dead>; GPR32:%vreg26,%vreg7
	LIFETIME_END <fi#0>
	%vreg25<def> = ADDri_r32 %vreg8, 8, %STATUS<imp-def,dead>; GPR32:%vreg25,%vreg8
	%vreg67<def> = CMPrr_r32 %vreg25, %vreg33, %STATUS<imp-def>; GPR32:%vreg67,%vreg25,%vreg33
	BCC <BB#3>, 8, %STATUS<imp-use>
	BNONE32 <BB#10>, %STATUS<imp-use>
    Successors according to CFG: BB#3(0x7c000000 / 0x80000000 = 96.88%) BB#10(0x04000000 / 0x80000000 = 3.12%)

BB#10: derived from LLVM BB %for.end78
    Predecessors according to CFG: BB#9
	%vreg29<def> = ADDrr_r32 %vreg3, %vreg1, %STATUS<imp-def,dead>; GPR32:%vreg29,%vreg3,%vreg1
	%vreg28<def> = ADDri_r32 %vreg4, 1, %STATUS<imp-def,dead>; GPR32:%vreg28,%vreg4
	%vreg68<def> = CMPrr_r32 %vreg28, %vreg33, %STATUS<imp-def>; GPR32:%vreg68,%vreg28,%vreg33
	BCC <BB#2>, 1, %STATUS<imp-use>
	BNONE32 <BB#11>, %STATUS<imp-use>
    Successors according to CFG: BB#11(0x04000000 / 0x80000000 = 3.12%) BB#2(0x7c000000 / 0x80000000 = 96.88%)

BB#11: derived from LLVM BB %for.end81
    Predecessors according to CFG: BB#0 BB#10
	%vreg77<def> = LDRi32_r32 <fi#1>, 0; mem:LD4[FixedStack1] GPR32:%vreg77
	GID
	%CONFIG<def> = MOVTS32_core %vreg77<kill>; GPR32:%vreg77
	GIE %CONFIG<imp-use,kill>
	RTS

# End machine code for function matmac.

# *** IR Dump Before Expand ISel Pseudo-instructions ***:
# Machine code for function matmac: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=32, align=8, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=4, align=4, at location [SP]
Function Live Ins: %R0 in %vreg30, %R1 in %vreg31, %R2 in %vreg32, %R3 in %vreg33

BB#12: 
    Live Ins: %R0 %R1 %R2 %R3
	GID %CONFIG<imp-def>
	%vreg71<def> = MOVFS32_core %CONFIG<kill>; GPR32:%vreg71
	STRi32_r32 %vreg71, <fi#1>, 0; mem:ST4[FixedStack1] GPR32:%vreg71
	%vreg72<def> = MOVi32ri 65535; GPR32:%vreg72
	%vreg73<def,tied1> = MOVTi32ri %vreg72<tied0>, 65521; GPR32:%vreg73,%vreg72
	%vreg69<def> = ANDrr_r32 %vreg71<kill>, %vreg73<kill>, %STATUS<imp-def>; GPR32:%vreg69,%vreg71,%vreg73
	STRi32_r32 %vreg69, <fi#2>, 0; mem:ST4[FixedStack2] GPR32:%vreg69
	%vreg70<def,tied1> = MOVTi32ri %vreg71<kill,tied0>, 72; GPR32:%vreg70,%vreg71
	STRi32_r32 %vreg70, <fi#3>, 0; mem:ST4[FixedStack3] GPR32:%vreg70
	GIE %CONFIG<imp-use,kill>
    Successors according to CFG: BB#0(?%)

BB#0: derived from LLVM BB %entry
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#12
	%vreg33<def> = COPY %R3; GPR32:%vreg33
	%vreg32<def> = COPY %R2; GPR32:%vreg32
	%vreg31<def> = COPY %R1; GPR32:%vreg31
	%vreg30<def> = COPY %R0; GPR32:%vreg30
	%vreg34<def> = CMPri_r32 %vreg33, 1, %STATUS<imp-def>; GPR32:%vreg34,%vreg33
	BCC <BB#11>, 8, %STATUS<imp-use>
	BNONE32 <BB#1>, %STATUS<imp-use>
    Successors according to CFG: BB#1(0x50000000 / 0x80000000 = 62.50%) BB#11(0x30000000 / 0x80000000 = 37.50%)

BB#1: derived from LLVM BB %for.body3.lr.ph.preheader
    Predecessors according to CFG: BB#0
	%vreg1<def> = LSL32ri %vreg33, 2, %STATUS<imp-def,dead>; GPR32:%vreg1,%vreg33
	%vreg0<def> = ADDri_r32 %vreg31, 8, %STATUS<imp-def,dead>; GPR32:%vreg0,%vreg31
	%vreg36<def> = MOViPTR <fi#0>, 0; GPR32:%vreg36
	%vreg2<def> = ADDri_r32 %vreg36<kill>, 8, %STATUS<imp-def,dead>; GPR32:%vreg2,%vreg36
	%vreg35<def> = MOVi32ri 0; GPR32:%vreg35
    Successors according to CFG: BB#2(?%)

BB#2: derived from LLVM BB %for.body3.lr.ph
    Predecessors according to CFG: BB#1 BB#10
	%vreg3<def> = PHI %vreg32, <BB#1>, %vreg29, <BB#10>; GPR32:%vreg3,%vreg32,%vreg29
	%vreg4<def> = PHI %vreg35, <BB#1>, %vreg28, <BB#10>; GPR32:%vreg4,%vreg35,%vreg28
	%vreg74<def> = LDRi32_r32 <fi#3>, 0; mem:LD4[FixedStack3] GPR32:%vreg74
	GID %CONFIG<imp-def>
	%CONFIG<def> = MOVTS32_core %vreg74<kill>; GPR32:%vreg74
	GIE %CONFIG<imp-def>
	%vreg38<def> = IMULrr_r32 %vreg4, %vreg33, %STATUS<imp-def,dead>; GPR32:%vreg38,%vreg4,%vreg33
	%vreg39<def> = LSL32ri %vreg38<kill>, 2, %STATUS<imp-def,dead>; GPR32:%vreg39,%vreg38
	%vreg37<def> = MOVi32ri 0; GPR32:%vreg37
	%vreg5<def> = ADDrr_r32 %vreg30, %vreg39<kill>, %STATUS<imp-def,dead>; GPR32:%vreg5,%vreg30,%vreg39
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %for.body9.preheader
    Predecessors according to CFG: BB#2 BB#9
	%vreg6<def> = PHI %vreg3, <BB#2>, %vreg27, <BB#9>; GPR32:%vreg6,%vreg3,%vreg27
	%vreg7<def> = PHI %vreg0, <BB#2>, %vreg26, <BB#9>; GPR32:%vreg7,%vreg0,%vreg26
	%vreg8<def> = PHI %vreg37, <BB#2>, %vreg25, <BB#9>; GPR32:%vreg8,%vreg37,%vreg25
	%vreg41<def> = MOVi32ri 0; GPR32:%vreg41
	%vreg40<def> = MOVi32ri 0; GPR32:%vreg40
	%vreg42<def> = REG_SEQUENCE %vreg40, isub_hi, %vreg41<kill>, isub_lo; FPR64_with_isub_hi_in_FPR32:%vreg42 GPR32:%vreg40,%vreg41
	LIFETIME_START <fi#0>
	STRi64 %vreg42, <fi#0>, 24; mem:ST8[%1+24] FPR64_with_isub_hi_in_FPR32:%vreg42
	STRi64 %vreg42, <fi#0>, 16; mem:ST8[%1+16] FPR64_with_isub_hi_in_FPR32:%vreg42
	STRi64 %vreg42, <fi#0>, 8; mem:ST8[%1+8] FPR64_with_isub_hi_in_FPR32:%vreg42
	STRi64 %vreg42, <fi#0>, 0; mem:ST8[%1] FPR64_with_isub_hi_in_FPR32:%vreg42
	BNONE32 <BB#5>, %STATUS<imp-use>
    Successors according to CFG: BB#5(?%)

BB#4: derived from LLVM BB %for.cond64.preheader
    Predecessors according to CFG: BB#7
	%vreg60<def> = MOVi32ri 0; GPR32:%vreg60
	BNONE32 <BB#8>, %STATUS<imp-use>
    Successors according to CFG: BB#8(?%)

BB#5: derived from LLVM BB %for.body9
    Predecessors according to CFG: BB#3 BB#7
	%vreg9<def> = PHI %vreg7, <BB#3>, %vreg20, <BB#7>; GPR32:%vreg9,%vreg7,%vreg20
	%vreg10<def> = PHI %vreg40, <BB#3>, %vreg19, <BB#7>; GPR32:%vreg10,%vreg40,%vreg19
	%vreg44<def> = LSL32ri %vreg10, 2, %STATUS<imp-def,dead>; GPR32:%vreg44,%vreg10
	%vreg45<def> = ADDrr_r32 %vreg5, %vreg44<kill>, %STATUS<imp-def,dead>; GPR32:%vreg45,%vreg5,%vreg44
	%vreg11<def> = COPY %vreg2; GPR32:%vreg11,%vreg2
	%vreg43<def> = MOVi32ri 0; GPR32:%vreg43
	%vreg12<def> = LDRf32 %vreg45<kill>, 0; mem:Volatile LD4[%add.ptr10](tbaa=!2) FPR32:%vreg12 GPR32:%vreg45
    Successors according to CFG: BB#6(?%)

BB#6: derived from LLVM BB %for.body13
    Predecessors according to CFG: BB#5 BB#6
	%vreg13<def> = PHI %vreg11, <BB#5>, %vreg18, <BB#6>; GPR32:%vreg13,%vreg11,%vreg18
	%vreg14<def> = PHI %vreg9, <BB#5>, %vreg17, <BB#6>; GPR32:%vreg14,%vreg9,%vreg17
	%vreg15<def> = PHI %vreg43, <BB#5>, %vreg16, <BB#6>; GPR32:%vreg15,%vreg43,%vreg16
	%vreg46<def> = LDRf32 %vreg14, -8; mem:Volatile LD4[%scevgep8](tbaa=!2) FPR32:%vreg46 GPR32:%vreg14
	%vreg18<def> = ADDri_r32 %vreg13, 16, %STATUS<imp-def,dead>; GPR32:%vreg18,%vreg13
	%vreg17<def> = ADDri_r32 %vreg14, 16, %STATUS<imp-def,dead>; GPR32:%vreg17,%vreg14
	%vreg47<def> = LDRf32 %vreg14, -4; mem:Volatile LD4[%scevgep9](tbaa=!2) FPR32:%vreg47 GPR32:%vreg14
	%vreg16<def> = ADDri_r32 %vreg15, 4, %STATUS<imp-def,dead>; GPR32:%vreg16,%vreg15
	%vreg48<def> = LDRf32 %vreg14, 0; mem:Volatile LD4[%lsr.iv5](tbaa=!2) FPR32:%vreg48 GPR32:%vreg14
	%vreg49<def> = LDRf32 %vreg14, 4; mem:Volatile LD4[%scevgep7](tbaa=!2) FPR32:%vreg49 GPR32:%vreg14
	%vreg50<def> = LDRf32 %vreg13, -8; mem:LD4[%scevgep15](tbaa=!2) FPR32:%vreg50 GPR32:%vreg13
	%vreg75<def> = LDRi32_r32 <fi#2>, 0; mem:LD4[FixedStack2] GPR32:%vreg75
	GID %CONFIG<imp-def>
	%CONFIG<def> = MOVTS32_core %vreg75<kill>; GPR32:%vreg75
	GIE %CONFIG<imp-def>
	%vreg51<def,tied1> = FMADDrr_r32 %vreg50<tied0>, %vreg12, %vreg46<kill>, %STATUS<imp-def,dead>; FPR32:%vreg51,%vreg50,%vreg12,%vreg46
	STRf32 %vreg51<kill>, %vreg13, -8; mem:ST4[%scevgep15](tbaa=!2) FPR32:%vreg51 GPR32:%vreg13
	%vreg52<def> = LDRf32 %vreg13, -4; mem:LD4[%scevgep17](tbaa=!2) FPR32:%vreg52 GPR32:%vreg13
	%vreg53<def,tied1> = FMADDrr_r32 %vreg52<tied0>, %vreg12, %vreg47<kill>, %STATUS<imp-def,dead>; FPR32:%vreg53,%vreg52,%vreg12,%vreg47
	STRf32 %vreg53<kill>, %vreg13, -4; mem:ST4[%scevgep17](tbaa=!2) FPR32:%vreg53 GPR32:%vreg13
	%vreg54<def> = LDRf32 %vreg13, 0; mem:LD4[%lsr.iv1214](tbaa=!2) FPR32:%vreg54 GPR32:%vreg13
	%vreg55<def,tied1> = FMADDrr_r32 %vreg54<tied0>, %vreg12, %vreg48<kill>, %STATUS<imp-def,dead>; FPR32:%vreg55,%vreg54,%vreg12,%vreg48
	STRf32 %vreg55<kill>, %vreg13, 0; mem:ST4[%lsr.iv1214](tbaa=!2) FPR32:%vreg55 GPR32:%vreg13
	%vreg56<def> = LDRf32 %vreg13, 4; mem:LD4[%scevgep16](tbaa=!2) FPR32:%vreg56 GPR32:%vreg13
	%vreg57<def,tied1> = FMADDrr_r32 %vreg56<tied0>, %vreg12, %vreg49<kill>, %STATUS<imp-def,dead>; FPR32:%vreg57,%vreg56,%vreg12,%vreg49
	%vreg58<def> = CMPri_r32 %vreg16, 8, %STATUS<imp-def>; GPR32:%vreg58,%vreg16
	STRf32 %vreg57<kill>, %vreg13, 4; mem:ST4[%scevgep16](tbaa=!2) FPR32:%vreg57 GPR32:%vreg13
	BCC <BB#6>, 8, %STATUS<imp-use>
	BNONE32 <BB#7>, %STATUS<imp-use>
    Successors according to CFG: BB#6(0x7c000000 / 0x80000000 = 96.88%) BB#7(0x04000000 / 0x80000000 = 3.12%)

BB#7: derived from LLVM BB %for.end60
    Predecessors according to CFG: BB#6
	%vreg20<def> = ADDrr_r32 %vreg9, %vreg1, %STATUS<imp-def,dead>; GPR32:%vreg20,%vreg9,%vreg1
	%vreg19<def> = ADDri_r32 %vreg10, 1, %STATUS<imp-def,dead>; GPR32:%vreg19,%vreg10
	%vreg59<def> = CMPrr_r32 %vreg19, %vreg33, %STATUS<imp-def>; GPR32:%vreg59,%vreg19,%vreg33
	BCC <BB#4>, 0, %STATUS<imp-use>
	BNONE32 <BB#5>, %STATUS<imp-use>
    Successors according to CFG: BB#4(0x04000000 / 0x80000000 = 3.12%) BB#5(0x7c000000 / 0x80000000 = 96.88%)

BB#8: derived from LLVM BB %for.body66
    Predecessors according to CFG: BB#4 BB#8
	%vreg21<def> = PHI %vreg6, <BB#4>, %vreg24, <BB#8>; GPR32:%vreg21,%vreg6,%vreg24
	%vreg22<def> = PHI %vreg60, <BB#4>, %vreg23, <BB#8>; GPR32:%vreg22,%vreg60,%vreg23
	%vreg61<def> = MOViPTR <fi#0>, 0; GPR32:%vreg61
	%vreg62<def> = ADDrr_r32 %vreg61<kill>, %vreg22, %STATUS<imp-def,dead>; GPR32:%vreg62,%vreg61,%vreg22
	%vreg63<def> = LDRf32 %vreg62<kill>, 0; mem:LD4[%sunkaddr30](tbaa=!2) FPR32:%vreg63 GPR32:%vreg62
	%vreg24<def> = ADDri_r32 %vreg21, 4, %STATUS<imp-def,dead>; GPR32:%vreg24,%vreg21
	%vreg23<def> = ADDri_r32 %vreg22, 4, %STATUS<imp-def,dead>; GPR32:%vreg23,%vreg22
	%vreg64<def> = LDRf32 %vreg21, 0; mem:Volatile LD4[%lsr.iv24](tbaa=!2) FPR32:%vreg64 GPR32:%vreg21
	%vreg76<def> = LDRi32_r32 <fi#2>, 0; mem:LD4[FixedStack2] GPR32:%vreg76
	GID %CONFIG<imp-def>
	%CONFIG<def> = MOVTS32_core %vreg76<kill>; GPR32:%vreg76
	GIE %CONFIG<imp-def>
	%vreg65<def> = FADDrr_r32 %vreg63<kill>, %vreg64<kill>, %STATUS<imp-def,dead>; FPR32:%vreg65,%vreg63,%vreg64
	%vreg66<def> = CMPri_r32 %vreg23, 32, %STATUS<imp-def>; GPR32:%vreg66,%vreg23
	STRf32 %vreg65<kill>, %vreg21, 0; mem:Volatile ST4[%lsr.iv24](tbaa=!2) FPR32:%vreg65 GPR32:%vreg21
	BCC <BB#8>, 1, %STATUS<imp-use>
	BNONE32 <BB#9>, %STATUS<imp-use>
    Successors according to CFG: BB#9(0x04000000 / 0x80000000 = 3.12%) BB#8(0x7c000000 / 0x80000000 = 96.88%)

BB#9: derived from LLVM BB %for.end75
    Predecessors according to CFG: BB#8
	%vreg27<def> = ADDri_r32 %vreg6, 32, %STATUS<imp-def,dead>; GPR32:%vreg27,%vreg6
	%vreg26<def> = ADDri_r32 %vreg7, 32, %STATUS<imp-def,dead>; GPR32:%vreg26,%vreg7
	LIFETIME_END <fi#0>
	%vreg25<def> = ADDri_r32 %vreg8, 8, %STATUS<imp-def,dead>; GPR32:%vreg25,%vreg8
	%vreg67<def> = CMPrr_r32 %vreg25, %vreg33, %STATUS<imp-def>; GPR32:%vreg67,%vreg25,%vreg33
	BCC <BB#3>, 8, %STATUS<imp-use>
	BNONE32 <BB#10>, %STATUS<imp-use>
    Successors according to CFG: BB#3(0x7c000000 / 0x80000000 = 96.88%) BB#10(0x04000000 / 0x80000000 = 3.12%)

BB#10: derived from LLVM BB %for.end78
    Predecessors according to CFG: BB#9
	%vreg29<def> = ADDrr_r32 %vreg3, %vreg1, %STATUS<imp-def,dead>; GPR32:%vreg29,%vreg3,%vreg1
	%vreg28<def> = ADDri_r32 %vreg4, 1, %STATUS<imp-def,dead>; GPR32:%vreg28,%vreg4
	%vreg68<def> = CMPrr_r32 %vreg28, %vreg33, %STATUS<imp-def>; GPR32:%vreg68,%vreg28,%vreg33
	BCC <BB#2>, 1, %STATUS<imp-use>
	BNONE32 <BB#11>, %STATUS<imp-use>
    Successors according to CFG: BB#11(0x04000000 / 0x80000000 = 3.12%) BB#2(0x7c000000 / 0x80000000 = 96.88%)

BB#11: derived from LLVM BB %for.end81
    Predecessors according to CFG: BB#0 BB#10
	%vreg77<def> = LDRi32_r32 <fi#1>, 0; mem:LD4[FixedStack1] GPR32:%vreg77
	GID
	%CONFIG<def> = MOVTS32_core %vreg77<kill>; GPR32:%vreg77
	GIE %CONFIG<imp-use,kill>
	RTS

# End machine code for function matmac.

# *** IR Dump After Expand ISel Pseudo-instructions ***:
# Machine code for function matmac: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=32, align=8, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=4, align=4, at location [SP]
Function Live Ins: %R0 in %vreg30, %R1 in %vreg31, %R2 in %vreg32, %R3 in %vreg33

BB#12: 
    Live Ins: %R0 %R1 %R2 %R3
	GID %CONFIG<imp-def>
	%vreg71<def> = MOVFS32_core %CONFIG<kill>; GPR32:%vreg71
	STRi32_r32 %vreg71, <fi#1>, 0; mem:ST4[FixedStack1] GPR32:%vreg71
	%vreg72<def> = MOVi32ri 65535; GPR32:%vreg72
	%vreg73<def,tied1> = MOVTi32ri %vreg72<tied0>, 65521; GPR32:%vreg73,%vreg72
	%vreg69<def> = ANDrr_r32 %vreg71<kill>, %vreg73<kill>, %STATUS<imp-def>; GPR32:%vreg69,%vreg71,%vreg73
	STRi32_r32 %vreg69, <fi#2>, 0; mem:ST4[FixedStack2] GPR32:%vreg69
	%vreg70<def,tied1> = MOVTi32ri %vreg71<kill,tied0>, 72; GPR32:%vreg70,%vreg71
	STRi32_r32 %vreg70, <fi#3>, 0; mem:ST4[FixedStack3] GPR32:%vreg70
	GIE %CONFIG<imp-use,kill>
    Successors according to CFG: BB#0(?%)

BB#0: derived from LLVM BB %entry
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#12
	%vreg33<def> = COPY %R3; GPR32:%vreg33
	%vreg32<def> = COPY %R2; GPR32:%vreg32
	%vreg31<def> = COPY %R1; GPR32:%vreg31
	%vreg30<def> = COPY %R0; GPR32:%vreg30
	%vreg34<def> = CMPri_r32 %vreg33, 1, %STATUS<imp-def>; GPR32:%vreg34,%vreg33
	BCC <BB#11>, 8, %STATUS<imp-use>
	BNONE32 <BB#1>, %STATUS<imp-use>
    Successors according to CFG: BB#1(0x50000000 / 0x80000000 = 62.50%) BB#11(0x30000000 / 0x80000000 = 37.50%)

BB#1: derived from LLVM BB %for.body3.lr.ph.preheader
    Predecessors according to CFG: BB#0
	%vreg1<def> = LSL32ri %vreg33, 2, %STATUS<imp-def,dead>; GPR32:%vreg1,%vreg33
	%vreg0<def> = ADDri_r32 %vreg31, 8, %STATUS<imp-def,dead>; GPR32:%vreg0,%vreg31
	%vreg36<def> = MOViPTR <fi#0>, 0; GPR32:%vreg36
	%vreg2<def> = ADDri_r32 %vreg36<kill>, 8, %STATUS<imp-def,dead>; GPR32:%vreg2,%vreg36
	%vreg35<def> = MOVi32ri 0; GPR32:%vreg35
    Successors according to CFG: BB#2(?%)

BB#2: derived from LLVM BB %for.body3.lr.ph
    Predecessors according to CFG: BB#1 BB#10
	%vreg3<def> = PHI %vreg32, <BB#1>, %vreg29, <BB#10>; GPR32:%vreg3,%vreg32,%vreg29
	%vreg4<def> = PHI %vreg35, <BB#1>, %vreg28, <BB#10>; GPR32:%vreg4,%vreg35,%vreg28
	%vreg74<def> = LDRi32_r32 <fi#3>, 0; mem:LD4[FixedStack3] GPR32:%vreg74
	GID %CONFIG<imp-def>
	%CONFIG<def> = MOVTS32_core %vreg74<kill>; GPR32:%vreg74
	GIE %CONFIG<imp-def>
	%vreg38<def> = IMULrr_r32 %vreg4, %vreg33, %STATUS<imp-def,dead>; GPR32:%vreg38,%vreg4,%vreg33
	%vreg39<def> = LSL32ri %vreg38<kill>, 2, %STATUS<imp-def,dead>; GPR32:%vreg39,%vreg38
	%vreg37<def> = MOVi32ri 0; GPR32:%vreg37
	%vreg5<def> = ADDrr_r32 %vreg30, %vreg39<kill>, %STATUS<imp-def,dead>; GPR32:%vreg5,%vreg30,%vreg39
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %for.body9.preheader
    Predecessors according to CFG: BB#2 BB#9
	%vreg6<def> = PHI %vreg3, <BB#2>, %vreg27, <BB#9>; GPR32:%vreg6,%vreg3,%vreg27
	%vreg7<def> = PHI %vreg0, <BB#2>, %vreg26, <BB#9>; GPR32:%vreg7,%vreg0,%vreg26
	%vreg8<def> = PHI %vreg37, <BB#2>, %vreg25, <BB#9>; GPR32:%vreg8,%vreg37,%vreg25
	%vreg41<def> = MOVi32ri 0; GPR32:%vreg41
	%vreg40<def> = MOVi32ri 0; GPR32:%vreg40
	%vreg42<def> = REG_SEQUENCE %vreg40, isub_hi, %vreg41<kill>, isub_lo; FPR64_with_isub_hi_in_FPR32:%vreg42 GPR32:%vreg40,%vreg41
	LIFETIME_START <fi#0>
	STRi64 %vreg42, <fi#0>, 24; mem:ST8[%1+24] FPR64_with_isub_hi_in_FPR32:%vreg42
	STRi64 %vreg42, <fi#0>, 16; mem:ST8[%1+16] FPR64_with_isub_hi_in_FPR32:%vreg42
	STRi64 %vreg42, <fi#0>, 8; mem:ST8[%1+8] FPR64_with_isub_hi_in_FPR32:%vreg42
	STRi64 %vreg42, <fi#0>, 0; mem:ST8[%1] FPR64_with_isub_hi_in_FPR32:%vreg42
	BNONE32 <BB#5>, %STATUS<imp-use>
    Successors according to CFG: BB#5(?%)

BB#4: derived from LLVM BB %for.cond64.preheader
    Predecessors according to CFG: BB#7
	%vreg60<def> = MOVi32ri 0; GPR32:%vreg60
	BNONE32 <BB#8>, %STATUS<imp-use>
    Successors according to CFG: BB#8(?%)

BB#5: derived from LLVM BB %for.body9
    Predecessors according to CFG: BB#3 BB#7
	%vreg9<def> = PHI %vreg7, <BB#3>, %vreg20, <BB#7>; GPR32:%vreg9,%vreg7,%vreg20
	%vreg10<def> = PHI %vreg40, <BB#3>, %vreg19, <BB#7>; GPR32:%vreg10,%vreg40,%vreg19
	%vreg44<def> = LSL32ri %vreg10, 2, %STATUS<imp-def,dead>; GPR32:%vreg44,%vreg10
	%vreg45<def> = ADDrr_r32 %vreg5, %vreg44<kill>, %STATUS<imp-def,dead>; GPR32:%vreg45,%vreg5,%vreg44
	%vreg11<def> = COPY %vreg2; GPR32:%vreg11,%vreg2
	%vreg43<def> = MOVi32ri 0; GPR32:%vreg43
	%vreg12<def> = LDRf32 %vreg45<kill>, 0; mem:Volatile LD4[%add.ptr10](tbaa=!2) FPR32:%vreg12 GPR32:%vreg45
    Successors according to CFG: BB#6(?%)

BB#6: derived from LLVM BB %for.body13
    Predecessors according to CFG: BB#5 BB#6
	%vreg13<def> = PHI %vreg11, <BB#5>, %vreg18, <BB#6>; GPR32:%vreg13,%vreg11,%vreg18
	%vreg14<def> = PHI %vreg9, <BB#5>, %vreg17, <BB#6>; GPR32:%vreg14,%vreg9,%vreg17
	%vreg15<def> = PHI %vreg43, <BB#5>, %vreg16, <BB#6>; GPR32:%vreg15,%vreg43,%vreg16
	%vreg46<def> = LDRf32 %vreg14, -8; mem:Volatile LD4[%scevgep8](tbaa=!2) FPR32:%vreg46 GPR32:%vreg14
	%vreg18<def> = ADDri_r32 %vreg13, 16, %STATUS<imp-def,dead>; GPR32:%vreg18,%vreg13
	%vreg17<def> = ADDri_r32 %vreg14, 16, %STATUS<imp-def,dead>; GPR32:%vreg17,%vreg14
	%vreg47<def> = LDRf32 %vreg14, -4; mem:Volatile LD4[%scevgep9](tbaa=!2) FPR32:%vreg47 GPR32:%vreg14
	%vreg16<def> = ADDri_r32 %vreg15, 4, %STATUS<imp-def,dead>; GPR32:%vreg16,%vreg15
	%vreg48<def> = LDRf32 %vreg14, 0; mem:Volatile LD4[%lsr.iv5](tbaa=!2) FPR32:%vreg48 GPR32:%vreg14
	%vreg49<def> = LDRf32 %vreg14, 4; mem:Volatile LD4[%scevgep7](tbaa=!2) FPR32:%vreg49 GPR32:%vreg14
	%vreg50<def> = LDRf32 %vreg13, -8; mem:LD4[%scevgep15](tbaa=!2) FPR32:%vreg50 GPR32:%vreg13
	%vreg75<def> = LDRi32_r32 <fi#2>, 0; mem:LD4[FixedStack2] GPR32:%vreg75
	GID %CONFIG<imp-def>
	%CONFIG<def> = MOVTS32_core %vreg75<kill>; GPR32:%vreg75
	GIE %CONFIG<imp-def>
	%vreg51<def,tied1> = FMADDrr_r32 %vreg50<tied0>, %vreg12, %vreg46<kill>, %STATUS<imp-def,dead>; FPR32:%vreg51,%vreg50,%vreg12,%vreg46
	STRf32 %vreg51<kill>, %vreg13, -8; mem:ST4[%scevgep15](tbaa=!2) FPR32:%vreg51 GPR32:%vreg13
	%vreg52<def> = LDRf32 %vreg13, -4; mem:LD4[%scevgep17](tbaa=!2) FPR32:%vreg52 GPR32:%vreg13
	%vreg53<def,tied1> = FMADDrr_r32 %vreg52<tied0>, %vreg12, %vreg47<kill>, %STATUS<imp-def,dead>; FPR32:%vreg53,%vreg52,%vreg12,%vreg47
	STRf32 %vreg53<kill>, %vreg13, -4; mem:ST4[%scevgep17](tbaa=!2) FPR32:%vreg53 GPR32:%vreg13
	%vreg54<def> = LDRf32 %vreg13, 0; mem:LD4[%lsr.iv1214](tbaa=!2) FPR32:%vreg54 GPR32:%vreg13
	%vreg55<def,tied1> = FMADDrr_r32 %vreg54<tied0>, %vreg12, %vreg48<kill>, %STATUS<imp-def,dead>; FPR32:%vreg55,%vreg54,%vreg12,%vreg48
	STRf32 %vreg55<kill>, %vreg13, 0; mem:ST4[%lsr.iv1214](tbaa=!2) FPR32:%vreg55 GPR32:%vreg13
	%vreg56<def> = LDRf32 %vreg13, 4; mem:LD4[%scevgep16](tbaa=!2) FPR32:%vreg56 GPR32:%vreg13
	%vreg57<def,tied1> = FMADDrr_r32 %vreg56<tied0>, %vreg12, %vreg49<kill>, %STATUS<imp-def,dead>; FPR32:%vreg57,%vreg56,%vreg12,%vreg49
	%vreg58<def> = CMPri_r32 %vreg16, 8, %STATUS<imp-def>; GPR32:%vreg58,%vreg16
	STRf32 %vreg57<kill>, %vreg13, 4; mem:ST4[%scevgep16](tbaa=!2) FPR32:%vreg57 GPR32:%vreg13
	BCC <BB#6>, 8, %STATUS<imp-use>
	BNONE32 <BB#7>, %STATUS<imp-use>
    Successors according to CFG: BB#6(0x7c000000 / 0x80000000 = 96.88%) BB#7(0x04000000 / 0x80000000 = 3.12%)

BB#7: derived from LLVM BB %for.end60
    Predecessors according to CFG: BB#6
	%vreg20<def> = ADDrr_r32 %vreg9, %vreg1, %STATUS<imp-def,dead>; GPR32:%vreg20,%vreg9,%vreg1
	%vreg19<def> = ADDri_r32 %vreg10, 1, %STATUS<imp-def,dead>; GPR32:%vreg19,%vreg10
	%vreg59<def> = CMPrr_r32 %vreg19, %vreg33, %STATUS<imp-def>; GPR32:%vreg59,%vreg19,%vreg33
	BCC <BB#4>, 0, %STATUS<imp-use>
	BNONE32 <BB#5>, %STATUS<imp-use>
    Successors according to CFG: BB#4(0x04000000 / 0x80000000 = 3.12%) BB#5(0x7c000000 / 0x80000000 = 96.88%)

BB#8: derived from LLVM BB %for.body66
    Predecessors according to CFG: BB#4 BB#8
	%vreg21<def> = PHI %vreg6, <BB#4>, %vreg24, <BB#8>; GPR32:%vreg21,%vreg6,%vreg24
	%vreg22<def> = PHI %vreg60, <BB#4>, %vreg23, <BB#8>; GPR32:%vreg22,%vreg60,%vreg23
	%vreg61<def> = MOViPTR <fi#0>, 0; GPR32:%vreg61
	%vreg62<def> = ADDrr_r32 %vreg61<kill>, %vreg22, %STATUS<imp-def,dead>; GPR32:%vreg62,%vreg61,%vreg22
	%vreg63<def> = LDRf32 %vreg62<kill>, 0; mem:LD4[%sunkaddr30](tbaa=!2) FPR32:%vreg63 GPR32:%vreg62
	%vreg24<def> = ADDri_r32 %vreg21, 4, %STATUS<imp-def,dead>; GPR32:%vreg24,%vreg21
	%vreg23<def> = ADDri_r32 %vreg22, 4, %STATUS<imp-def,dead>; GPR32:%vreg23,%vreg22
	%vreg64<def> = LDRf32 %vreg21, 0; mem:Volatile LD4[%lsr.iv24](tbaa=!2) FPR32:%vreg64 GPR32:%vreg21
	%vreg76<def> = LDRi32_r32 <fi#2>, 0; mem:LD4[FixedStack2] GPR32:%vreg76
	GID %CONFIG<imp-def>
	%CONFIG<def> = MOVTS32_core %vreg76<kill>; GPR32:%vreg76
	GIE %CONFIG<imp-def>
	%vreg65<def> = FADDrr_r32 %vreg63<kill>, %vreg64<kill>, %STATUS<imp-def,dead>; FPR32:%vreg65,%vreg63,%vreg64
	%vreg66<def> = CMPri_r32 %vreg23, 32, %STATUS<imp-def>; GPR32:%vreg66,%vreg23
	STRf32 %vreg65<kill>, %vreg21, 0; mem:Volatile ST4[%lsr.iv24](tbaa=!2) FPR32:%vreg65 GPR32:%vreg21
	BCC <BB#8>, 1, %STATUS<imp-use>
	BNONE32 <BB#9>, %STATUS<imp-use>
    Successors according to CFG: BB#9(0x04000000 / 0x80000000 = 3.12%) BB#8(0x7c000000 / 0x80000000 = 96.88%)

BB#9: derived from LLVM BB %for.end75
    Predecessors according to CFG: BB#8
	%vreg27<def> = ADDri_r32 %vreg6, 32, %STATUS<imp-def,dead>; GPR32:%vreg27,%vreg6
	%vreg26<def> = ADDri_r32 %vreg7, 32, %STATUS<imp-def,dead>; GPR32:%vreg26,%vreg7
	LIFETIME_END <fi#0>
	%vreg25<def> = ADDri_r32 %vreg8, 8, %STATUS<imp-def,dead>; GPR32:%vreg25,%vreg8
	%vreg67<def> = CMPrr_r32 %vreg25, %vreg33, %STATUS<imp-def>; GPR32:%vreg67,%vreg25,%vreg33
	BCC <BB#3>, 8, %STATUS<imp-use>
	BNONE32 <BB#10>, %STATUS<imp-use>
    Successors according to CFG: BB#3(0x7c000000 / 0x80000000 = 96.88%) BB#10(0x04000000 / 0x80000000 = 3.12%)

BB#10: derived from LLVM BB %for.end78
    Predecessors according to CFG: BB#9
	%vreg29<def> = ADDrr_r32 %vreg3, %vreg1, %STATUS<imp-def,dead>; GPR32:%vreg29,%vreg3,%vreg1
	%vreg28<def> = ADDri_r32 %vreg4, 1, %STATUS<imp-def,dead>; GPR32:%vreg28,%vreg4
	%vreg68<def> = CMPrr_r32 %vreg28, %vreg33, %STATUS<imp-def>; GPR32:%vreg68,%vreg28,%vreg33
	BCC <BB#2>, 1, %STATUS<imp-use>
	BNONE32 <BB#11>, %STATUS<imp-use>
    Successors according to CFG: BB#11(0x04000000 / 0x80000000 = 3.12%) BB#2(0x7c000000 / 0x80000000 = 96.88%)

BB#11: derived from LLVM BB %for.end81
    Predecessors according to CFG: BB#0 BB#10
	%vreg77<def> = LDRi32_r32 <fi#1>, 0; mem:LD4[FixedStack1] GPR32:%vreg77
	GID
	%CONFIG<def> = MOVTS32_core %vreg77<kill>; GPR32:%vreg77
	GIE %CONFIG<imp-use,kill>
	RTS

# End machine code for function matmac.

# *** IR Dump Before Tail Duplication ***:
# Machine code for function matmac: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=32, align=8, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=4, align=4, at location [SP]
Function Live Ins: %R0 in %vreg30, %R1 in %vreg31, %R2 in %vreg32, %R3 in %vreg33

BB#12: 
    Live Ins: %R0 %R1 %R2 %R3
	GID %CONFIG<imp-def>
	%vreg71<def> = MOVFS32_core %CONFIG<kill>; GPR32:%vreg71
	STRi32_r32 %vreg71, <fi#1>, 0; mem:ST4[FixedStack1] GPR32:%vreg71
	%vreg72<def> = MOVi32ri 65535; GPR32:%vreg72
	%vreg73<def,tied1> = MOVTi32ri %vreg72<tied0>, 65521; GPR32:%vreg73,%vreg72
	%vreg69<def> = ANDrr_r32 %vreg71<kill>, %vreg73<kill>, %STATUS<imp-def>; GPR32:%vreg69,%vreg71,%vreg73
	STRi32_r32 %vreg69, <fi#2>, 0; mem:ST4[FixedStack2] GPR32:%vreg69
	%vreg70<def,tied1> = MOVTi32ri %vreg71<kill,tied0>, 72; GPR32:%vreg70,%vreg71
	STRi32_r32 %vreg70, <fi#3>, 0; mem:ST4[FixedStack3] GPR32:%vreg70
	GIE %CONFIG<imp-use,kill>
    Successors according to CFG: BB#0(?%)

BB#0: derived from LLVM BB %entry
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#12
	%vreg33<def> = COPY %R3; GPR32:%vreg33
	%vreg32<def> = COPY %R2; GPR32:%vreg32
	%vreg31<def> = COPY %R1; GPR32:%vreg31
	%vreg30<def> = COPY %R0; GPR32:%vreg30
	%vreg34<def> = CMPri_r32 %vreg33, 1, %STATUS<imp-def>; GPR32:%vreg34,%vreg33
	BCC <BB#11>, 8, %STATUS<imp-use>
	BNONE32 <BB#1>, %STATUS<imp-use>
    Successors according to CFG: BB#1(0x50000000 / 0x80000000 = 62.50%) BB#11(0x30000000 / 0x80000000 = 37.50%)

BB#1: derived from LLVM BB %for.body3.lr.ph.preheader
    Predecessors according to CFG: BB#0
	%vreg1<def> = LSL32ri %vreg33, 2, %STATUS<imp-def,dead>; GPR32:%vreg1,%vreg33
	%vreg0<def> = ADDri_r32 %vreg31, 8, %STATUS<imp-def,dead>; GPR32:%vreg0,%vreg31
	%vreg36<def> = MOViPTR <fi#0>, 0; GPR32:%vreg36
	%vreg2<def> = ADDri_r32 %vreg36<kill>, 8, %STATUS<imp-def,dead>; GPR32:%vreg2,%vreg36
	%vreg35<def> = MOVi32ri 0; GPR32:%vreg35
    Successors according to CFG: BB#2(?%)

BB#2: derived from LLVM BB %for.body3.lr.ph
    Predecessors according to CFG: BB#1 BB#10
	%vreg3<def> = PHI %vreg32, <BB#1>, %vreg29, <BB#10>; GPR32:%vreg3,%vreg32,%vreg29
	%vreg4<def> = PHI %vreg35, <BB#1>, %vreg28, <BB#10>; GPR32:%vreg4,%vreg35,%vreg28
	%vreg74<def> = LDRi32_r32 <fi#3>, 0; mem:LD4[FixedStack3] GPR32:%vreg74
	GID %CONFIG<imp-def>
	%CONFIG<def> = MOVTS32_core %vreg74<kill>; GPR32:%vreg74
	GIE %CONFIG<imp-def>
	%vreg38<def> = IMULrr_r32 %vreg4, %vreg33, %STATUS<imp-def,dead>; GPR32:%vreg38,%vreg4,%vreg33
	%vreg39<def> = LSL32ri %vreg38<kill>, 2, %STATUS<imp-def,dead>; GPR32:%vreg39,%vreg38
	%vreg37<def> = MOVi32ri 0; GPR32:%vreg37
	%vreg5<def> = ADDrr_r32 %vreg30, %vreg39<kill>, %STATUS<imp-def,dead>; GPR32:%vreg5,%vreg30,%vreg39
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %for.body9.preheader
    Predecessors according to CFG: BB#2 BB#9
	%vreg6<def> = PHI %vreg3, <BB#2>, %vreg27, <BB#9>; GPR32:%vreg6,%vreg3,%vreg27
	%vreg7<def> = PHI %vreg0, <BB#2>, %vreg26, <BB#9>; GPR32:%vreg7,%vreg0,%vreg26
	%vreg8<def> = PHI %vreg37, <BB#2>, %vreg25, <BB#9>; GPR32:%vreg8,%vreg37,%vreg25
	%vreg41<def> = MOVi32ri 0; GPR32:%vreg41
	%vreg40<def> = MOVi32ri 0; GPR32:%vreg40
	%vreg42<def> = REG_SEQUENCE %vreg40, isub_hi, %vreg41<kill>, isub_lo; FPR64_with_isub_hi_in_FPR32:%vreg42 GPR32:%vreg40,%vreg41
	LIFETIME_START <fi#0>
	STRi64 %vreg42, <fi#0>, 24; mem:ST8[%1+24] FPR64_with_isub_hi_in_FPR32:%vreg42
	STRi64 %vreg42, <fi#0>, 16; mem:ST8[%1+16] FPR64_with_isub_hi_in_FPR32:%vreg42
	STRi64 %vreg42, <fi#0>, 8; mem:ST8[%1+8] FPR64_with_isub_hi_in_FPR32:%vreg42
	STRi64 %vreg42, <fi#0>, 0; mem:ST8[%1] FPR64_with_isub_hi_in_FPR32:%vreg42
	BNONE32 <BB#5>, %STATUS<imp-use>
    Successors according to CFG: BB#5(?%)

BB#4: derived from LLVM BB %for.cond64.preheader
    Predecessors according to CFG: BB#7
	%vreg60<def> = MOVi32ri 0; GPR32:%vreg60
	BNONE32 <BB#8>, %STATUS<imp-use>
    Successors according to CFG: BB#8(?%)

BB#5: derived from LLVM BB %for.body9
    Predecessors according to CFG: BB#3 BB#7
	%vreg9<def> = PHI %vreg7, <BB#3>, %vreg20, <BB#7>; GPR32:%vreg9,%vreg7,%vreg20
	%vreg10<def> = PHI %vreg40, <BB#3>, %vreg19, <BB#7>; GPR32:%vreg10,%vreg40,%vreg19
	%vreg44<def> = LSL32ri %vreg10, 2, %STATUS<imp-def,dead>; GPR32:%vreg44,%vreg10
	%vreg45<def> = ADDrr_r32 %vreg5, %vreg44<kill>, %STATUS<imp-def,dead>; GPR32:%vreg45,%vreg5,%vreg44
	%vreg11<def> = COPY %vreg2; GPR32:%vreg11,%vreg2
	%vreg43<def> = MOVi32ri 0; GPR32:%vreg43
	%vreg12<def> = LDRf32 %vreg45<kill>, 0; mem:Volatile LD4[%add.ptr10](tbaa=!2) FPR32:%vreg12 GPR32:%vreg45
    Successors according to CFG: BB#6(?%)

BB#6: derived from LLVM BB %for.body13
    Predecessors according to CFG: BB#5 BB#6
	%vreg13<def> = PHI %vreg11, <BB#5>, %vreg18, <BB#6>; GPR32:%vreg13,%vreg11,%vreg18
	%vreg14<def> = PHI %vreg9, <BB#5>, %vreg17, <BB#6>; GPR32:%vreg14,%vreg9,%vreg17
	%vreg15<def> = PHI %vreg43, <BB#5>, %vreg16, <BB#6>; GPR32:%vreg15,%vreg43,%vreg16
	%vreg46<def> = LDRf32 %vreg14, -8; mem:Volatile LD4[%scevgep8](tbaa=!2) FPR32:%vreg46 GPR32:%vreg14
	%vreg18<def> = ADDri_r32 %vreg13, 16, %STATUS<imp-def,dead>; GPR32:%vreg18,%vreg13
	%vreg17<def> = ADDri_r32 %vreg14, 16, %STATUS<imp-def,dead>; GPR32:%vreg17,%vreg14
	%vreg47<def> = LDRf32 %vreg14, -4; mem:Volatile LD4[%scevgep9](tbaa=!2) FPR32:%vreg47 GPR32:%vreg14
	%vreg16<def> = ADDri_r32 %vreg15, 4, %STATUS<imp-def,dead>; GPR32:%vreg16,%vreg15
	%vreg48<def> = LDRf32 %vreg14, 0; mem:Volatile LD4[%lsr.iv5](tbaa=!2) FPR32:%vreg48 GPR32:%vreg14
	%vreg49<def> = LDRf32 %vreg14, 4; mem:Volatile LD4[%scevgep7](tbaa=!2) FPR32:%vreg49 GPR32:%vreg14
	%vreg50<def> = LDRf32 %vreg13, -8; mem:LD4[%scevgep15](tbaa=!2) FPR32:%vreg50 GPR32:%vreg13
	%vreg75<def> = LDRi32_r32 <fi#2>, 0; mem:LD4[FixedStack2] GPR32:%vreg75
	GID %CONFIG<imp-def>
	%CONFIG<def> = MOVTS32_core %vreg75<kill>; GPR32:%vreg75
	GIE %CONFIG<imp-def>
	%vreg51<def,tied1> = FMADDrr_r32 %vreg50<tied0>, %vreg12, %vreg46<kill>, %STATUS<imp-def,dead>; FPR32:%vreg51,%vreg50,%vreg12,%vreg46
	STRf32 %vreg51<kill>, %vreg13, -8; mem:ST4[%scevgep15](tbaa=!2) FPR32:%vreg51 GPR32:%vreg13
	%vreg52<def> = LDRf32 %vreg13, -4; mem:LD4[%scevgep17](tbaa=!2) FPR32:%vreg52 GPR32:%vreg13
	%vreg53<def,tied1> = FMADDrr_r32 %vreg52<tied0>, %vreg12, %vreg47<kill>, %STATUS<imp-def,dead>; FPR32:%vreg53,%vreg52,%vreg12,%vreg47
	STRf32 %vreg53<kill>, %vreg13, -4; mem:ST4[%scevgep17](tbaa=!2) FPR32:%vreg53 GPR32:%vreg13
	%vreg54<def> = LDRf32 %vreg13, 0; mem:LD4[%lsr.iv1214](tbaa=!2) FPR32:%vreg54 GPR32:%vreg13
	%vreg55<def,tied1> = FMADDrr_r32 %vreg54<tied0>, %vreg12, %vreg48<kill>, %STATUS<imp-def,dead>; FPR32:%vreg55,%vreg54,%vreg12,%vreg48
	STRf32 %vreg55<kill>, %vreg13, 0; mem:ST4[%lsr.iv1214](tbaa=!2) FPR32:%vreg55 GPR32:%vreg13
	%vreg56<def> = LDRf32 %vreg13, 4; mem:LD4[%scevgep16](tbaa=!2) FPR32:%vreg56 GPR32:%vreg13
	%vreg57<def,tied1> = FMADDrr_r32 %vreg56<tied0>, %vreg12, %vreg49<kill>, %STATUS<imp-def,dead>; FPR32:%vreg57,%vreg56,%vreg12,%vreg49
	%vreg58<def> = CMPri_r32 %vreg16, 8, %STATUS<imp-def>; GPR32:%vreg58,%vreg16
	STRf32 %vreg57<kill>, %vreg13, 4; mem:ST4[%scevgep16](tbaa=!2) FPR32:%vreg57 GPR32:%vreg13
	BCC <BB#6>, 8, %STATUS<imp-use>
	BNONE32 <BB#7>, %STATUS<imp-use>
    Successors according to CFG: BB#6(0x7c000000 / 0x80000000 = 96.88%) BB#7(0x04000000 / 0x80000000 = 3.12%)

BB#7: derived from LLVM BB %for.end60
    Predecessors according to CFG: BB#6
	%vreg20<def> = ADDrr_r32 %vreg9, %vreg1, %STATUS<imp-def,dead>; GPR32:%vreg20,%vreg9,%vreg1
	%vreg19<def> = ADDri_r32 %vreg10, 1, %STATUS<imp-def,dead>; GPR32:%vreg19,%vreg10
	%vreg59<def> = CMPrr_r32 %vreg19, %vreg33, %STATUS<imp-def>; GPR32:%vreg59,%vreg19,%vreg33
	BCC <BB#4>, 0, %STATUS<imp-use>
	BNONE32 <BB#5>, %STATUS<imp-use>
    Successors according to CFG: BB#4(0x04000000 / 0x80000000 = 3.12%) BB#5(0x7c000000 / 0x80000000 = 96.88%)

BB#8: derived from LLVM BB %for.body66
    Predecessors according to CFG: BB#4 BB#8
	%vreg21<def> = PHI %vreg6, <BB#4>, %vreg24, <BB#8>; GPR32:%vreg21,%vreg6,%vreg24
	%vreg22<def> = PHI %vreg60, <BB#4>, %vreg23, <BB#8>; GPR32:%vreg22,%vreg60,%vreg23
	%vreg61<def> = MOViPTR <fi#0>, 0; GPR32:%vreg61
	%vreg62<def> = ADDrr_r32 %vreg61<kill>, %vreg22, %STATUS<imp-def,dead>; GPR32:%vreg62,%vreg61,%vreg22
	%vreg63<def> = LDRf32 %vreg62<kill>, 0; mem:LD4[%sunkaddr30](tbaa=!2) FPR32:%vreg63 GPR32:%vreg62
	%vreg24<def> = ADDri_r32 %vreg21, 4, %STATUS<imp-def,dead>; GPR32:%vreg24,%vreg21
	%vreg23<def> = ADDri_r32 %vreg22, 4, %STATUS<imp-def,dead>; GPR32:%vreg23,%vreg22
	%vreg64<def> = LDRf32 %vreg21, 0; mem:Volatile LD4[%lsr.iv24](tbaa=!2) FPR32:%vreg64 GPR32:%vreg21
	%vreg76<def> = LDRi32_r32 <fi#2>, 0; mem:LD4[FixedStack2] GPR32:%vreg76
	GID %CONFIG<imp-def>
	%CONFIG<def> = MOVTS32_core %vreg76<kill>; GPR32:%vreg76
	GIE %CONFIG<imp-def>
	%vreg65<def> = FADDrr_r32 %vreg63<kill>, %vreg64<kill>, %STATUS<imp-def,dead>; FPR32:%vreg65,%vreg63,%vreg64
	%vreg66<def> = CMPri_r32 %vreg23, 32, %STATUS<imp-def>; GPR32:%vreg66,%vreg23
	STRf32 %vreg65<kill>, %vreg21, 0; mem:Volatile ST4[%lsr.iv24](tbaa=!2) FPR32:%vreg65 GPR32:%vreg21
	BCC <BB#8>, 1, %STATUS<imp-use>
	BNONE32 <BB#9>, %STATUS<imp-use>
    Successors according to CFG: BB#9(0x04000000 / 0x80000000 = 3.12%) BB#8(0x7c000000 / 0x80000000 = 96.88%)

BB#9: derived from LLVM BB %for.end75
    Predecessors according to CFG: BB#8
	%vreg27<def> = ADDri_r32 %vreg6, 32, %STATUS<imp-def,dead>; GPR32:%vreg27,%vreg6
	%vreg26<def> = ADDri_r32 %vreg7, 32, %STATUS<imp-def,dead>; GPR32:%vreg26,%vreg7
	LIFETIME_END <fi#0>
	%vreg25<def> = ADDri_r32 %vreg8, 8, %STATUS<imp-def,dead>; GPR32:%vreg25,%vreg8
	%vreg67<def> = CMPrr_r32 %vreg25, %vreg33, %STATUS<imp-def>; GPR32:%vreg67,%vreg25,%vreg33
	BCC <BB#3>, 8, %STATUS<imp-use>
	BNONE32 <BB#10>, %STATUS<imp-use>
    Successors according to CFG: BB#3(0x7c000000 / 0x80000000 = 96.88%) BB#10(0x04000000 / 0x80000000 = 3.12%)

BB#10: derived from LLVM BB %for.end78
    Predecessors according to CFG: BB#9
	%vreg29<def> = ADDrr_r32 %vreg3, %vreg1, %STATUS<imp-def,dead>; GPR32:%vreg29,%vreg3,%vreg1
	%vreg28<def> = ADDri_r32 %vreg4, 1, %STATUS<imp-def,dead>; GPR32:%vreg28,%vreg4
	%vreg68<def> = CMPrr_r32 %vreg28, %vreg33, %STATUS<imp-def>; GPR32:%vreg68,%vreg28,%vreg33
	BCC <BB#2>, 1, %STATUS<imp-use>
	BNONE32 <BB#11>, %STATUS<imp-use>
    Successors according to CFG: BB#11(0x04000000 / 0x80000000 = 3.12%) BB#2(0x7c000000 / 0x80000000 = 96.88%)

BB#11: derived from LLVM BB %for.end81
    Predecessors according to CFG: BB#0 BB#10
	%vreg77<def> = LDRi32_r32 <fi#1>, 0; mem:LD4[FixedStack1] GPR32:%vreg77
	GID
	%CONFIG<def> = MOVTS32_core %vreg77<kill>; GPR32:%vreg77
	GIE %CONFIG<imp-use,kill>
	RTS

# End machine code for function matmac.


<----------------->
Analyzing block 0
BB#0: derived from LLVM BB %entry
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#12
	%vreg33<def> = COPY %R3; GPR32:%vreg33
	%vreg32<def> = COPY %R2; GPR32:%vreg32
	%vreg31<def> = COPY %R1; GPR32:%vreg31
	%vreg30<def> = COPY %R0; GPR32:%vreg30
	%vreg34<def> = CMPri_r32 %vreg33, 1, %STATUS<imp-def>; GPR32:%vreg34,%vreg33
	BCC <BB#11>, 8, %STATUS<imp-use>
	BNONE32 <BB#1>, %STATUS<imp-use>
    Successors according to CFG: BB#1(0x50000000 / 0x80000000 = 62.50%) BB#11(0x30000000 / 0x80000000 = 37.50%)

<----------------->
Analyzing block 1
BB#1: derived from LLVM BB %for.body3.lr.ph.preheader
    Predecessors according to CFG: BB#0
	%vreg1<def> = LSL32ri %vreg33, 2, %STATUS<imp-def,dead>; GPR32:%vreg1,%vreg33
	%vreg0<def> = ADDri_r32 %vreg31, 8, %STATUS<imp-def,dead>; GPR32:%vreg0,%vreg31
	%vreg36<def> = MOViPTR <fi#0>, 0; GPR32:%vreg36
	%vreg2<def> = ADDri_r32 %vreg36<kill>, 8, %STATUS<imp-def,dead>; GPR32:%vreg2,%vreg36
	%vreg35<def> = MOVi32ri 0; GPR32:%vreg35
    Successors according to CFG: BB#2(?%)

<----------------->
Analyzing block 2
BB#2: derived from LLVM BB %for.body3.lr.ph
    Predecessors according to CFG: BB#1 BB#10
	%vreg3<def> = PHI %vreg32, <BB#1>, %vreg29, <BB#10>; GPR32:%vreg3,%vreg32,%vreg29
	%vreg4<def> = PHI %vreg35, <BB#1>, %vreg28, <BB#10>; GPR32:%vreg4,%vreg35,%vreg28
	%vreg74<def> = LDRi32_r32 <fi#3>, 0; mem:LD4[FixedStack3] GPR32:%vreg74
	GID %CONFIG<imp-def>
	%CONFIG<def> = MOVTS32_core %vreg74<kill>; GPR32:%vreg74
	GIE %CONFIG<imp-def>
	%vreg38<def> = IMULrr_r32 %vreg4, %vreg33, %STATUS<imp-def,dead>; GPR32:%vreg38,%vreg4,%vreg33
	%vreg39<def> = LSL32ri %vreg38<kill>, 2, %STATUS<imp-def,dead>; GPR32:%vreg39,%vreg38
	%vreg37<def> = MOVi32ri 0; GPR32:%vreg37
	%vreg5<def> = ADDrr_r32 %vreg30, %vreg39<kill>, %STATUS<imp-def,dead>; GPR32:%vreg5,%vreg30,%vreg39
    Successors according to CFG: BB#3(?%)

<----------------->
Analyzing block 3
BB#3: derived from LLVM BB %for.body9.preheader
    Predecessors according to CFG: BB#2 BB#9
	%vreg6<def> = PHI %vreg3, <BB#2>, %vreg27, <BB#9>; GPR32:%vreg6,%vreg3,%vreg27
	%vreg7<def> = PHI %vreg0, <BB#2>, %vreg26, <BB#9>; GPR32:%vreg7,%vreg0,%vreg26
	%vreg8<def> = PHI %vreg37, <BB#2>, %vreg25, <BB#9>; GPR32:%vreg8,%vreg37,%vreg25
	%vreg41<def> = MOVi32ri 0; GPR32:%vreg41
	%vreg40<def> = MOVi32ri 0; GPR32:%vreg40
	%vreg42<def> = REG_SEQUENCE %vreg40, isub_hi, %vreg41<kill>, isub_lo; FPR64_with_isub_hi_in_FPR32:%vreg42 GPR32:%vreg40,%vreg41
	LIFETIME_START <fi#0>
	STRi64 %vreg42, <fi#0>, 24; mem:ST8[%1+24] FPR64_with_isub_hi_in_FPR32:%vreg42
	STRi64 %vreg42, <fi#0>, 16; mem:ST8[%1+16] FPR64_with_isub_hi_in_FPR32:%vreg42
	STRi64 %vreg42, <fi#0>, 8; mem:ST8[%1+8] FPR64_with_isub_hi_in_FPR32:%vreg42
	STRi64 %vreg42, <fi#0>, 0; mem:ST8[%1] FPR64_with_isub_hi_in_FPR32:%vreg42
	BNONE32 <BB#5>, %STATUS<imp-use>
    Successors according to CFG: BB#5(?%)

<----------------->
Analyzing block 4
BB#4: derived from LLVM BB %for.cond64.preheader
    Predecessors according to CFG: BB#7
	%vreg60<def> = MOVi32ri 0; GPR32:%vreg60
	BNONE32 <BB#8>, %STATUS<imp-use>
    Successors according to CFG: BB#8(?%)

<----------------->
Analyzing block 5
BB#5: derived from LLVM BB %for.body9
    Predecessors according to CFG: BB#3 BB#7
	%vreg9<def> = PHI %vreg7, <BB#3>, %vreg20, <BB#7>; GPR32:%vreg9,%vreg7,%vreg20
	%vreg10<def> = PHI %vreg40, <BB#3>, %vreg19, <BB#7>; GPR32:%vreg10,%vreg40,%vreg19
	%vreg44<def> = LSL32ri %vreg10, 2, %STATUS<imp-def,dead>; GPR32:%vreg44,%vreg10
	%vreg45<def> = ADDrr_r32 %vreg5, %vreg44<kill>, %STATUS<imp-def,dead>; GPR32:%vreg45,%vreg5,%vreg44
	%vreg11<def> = COPY %vreg2; GPR32:%vreg11,%vreg2
	%vreg43<def> = MOVi32ri 0; GPR32:%vreg43
	%vreg12<def> = LDRf32 %vreg45<kill>, 0; mem:Volatile LD4[%add.ptr10](tbaa=!2) FPR32:%vreg12 GPR32:%vreg45
    Successors according to CFG: BB#6(?%)

<----------------->
Analyzing block 6
BB#6: derived from LLVM BB %for.body13
    Predecessors according to CFG: BB#5 BB#6
	%vreg13<def> = PHI %vreg11, <BB#5>, %vreg18, <BB#6>; GPR32:%vreg13,%vreg11,%vreg18
	%vreg14<def> = PHI %vreg9, <BB#5>, %vreg17, <BB#6>; GPR32:%vreg14,%vreg9,%vreg17
	%vreg15<def> = PHI %vreg43, <BB#5>, %vreg16, <BB#6>; GPR32:%vreg15,%vreg43,%vreg16
	%vreg46<def> = LDRf32 %vreg14, -8; mem:Volatile LD4[%scevgep8](tbaa=!2) FPR32:%vreg46 GPR32:%vreg14
	%vreg18<def> = ADDri_r32 %vreg13, 16, %STATUS<imp-def,dead>; GPR32:%vreg18,%vreg13
	%vreg17<def> = ADDri_r32 %vreg14, 16, %STATUS<imp-def,dead>; GPR32:%vreg17,%vreg14
	%vreg47<def> = LDRf32 %vreg14, -4; mem:Volatile LD4[%scevgep9](tbaa=!2) FPR32:%vreg47 GPR32:%vreg14
	%vreg16<def> = ADDri_r32 %vreg15, 4, %STATUS<imp-def,dead>; GPR32:%vreg16,%vreg15
	%vreg48<def> = LDRf32 %vreg14, 0; mem:Volatile LD4[%lsr.iv5](tbaa=!2) FPR32:%vreg48 GPR32:%vreg14
	%vreg49<def> = LDRf32 %vreg14, 4; mem:Volatile LD4[%scevgep7](tbaa=!2) FPR32:%vreg49 GPR32:%vreg14
	%vreg50<def> = LDRf32 %vreg13, -8; mem:LD4[%scevgep15](tbaa=!2) FPR32:%vreg50 GPR32:%vreg13
	%vreg75<def> = LDRi32_r32 <fi#2>, 0; mem:LD4[FixedStack2] GPR32:%vreg75
	GID %CONFIG<imp-def>
	%CONFIG<def> = MOVTS32_core %vreg75<kill>; GPR32:%vreg75
	GIE %CONFIG<imp-def>
	%vreg51<def,tied1> = FMADDrr_r32 %vreg50<tied0>, %vreg12, %vreg46<kill>, %STATUS<imp-def,dead>; FPR32:%vreg51,%vreg50,%vreg12,%vreg46
	STRf32 %vreg51<kill>, %vreg13, -8; mem:ST4[%scevgep15](tbaa=!2) FPR32:%vreg51 GPR32:%vreg13
	%vreg52<def> = LDRf32 %vreg13, -4; mem:LD4[%scevgep17](tbaa=!2) FPR32:%vreg52 GPR32:%vreg13
	%vreg53<def,tied1> = FMADDrr_r32 %vreg52<tied0>, %vreg12, %vreg47<kill>, %STATUS<imp-def,dead>; FPR32:%vreg53,%vreg52,%vreg12,%vreg47
	STRf32 %vreg53<kill>, %vreg13, -4; mem:ST4[%scevgep17](tbaa=!2) FPR32:%vreg53 GPR32:%vreg13
	%vreg54<def> = LDRf32 %vreg13, 0; mem:LD4[%lsr.iv1214](tbaa=!2) FPR32:%vreg54 GPR32:%vreg13
	%vreg55<def,tied1> = FMADDrr_r32 %vreg54<tied0>, %vreg12, %vreg48<kill>, %STATUS<imp-def,dead>; FPR32:%vreg55,%vreg54,%vreg12,%vreg48
	STRf32 %vreg55<kill>, %vreg13, 0; mem:ST4[%lsr.iv1214](tbaa=!2) FPR32:%vreg55 GPR32:%vreg13
	%vreg56<def> = LDRf32 %vreg13, 4; mem:LD4[%scevgep16](tbaa=!2) FPR32:%vreg56 GPR32:%vreg13
	%vreg57<def,tied1> = FMADDrr_r32 %vreg56<tied0>, %vreg12, %vreg49<kill>, %STATUS<imp-def,dead>; FPR32:%vreg57,%vreg56,%vreg12,%vreg49
	%vreg58<def> = CMPri_r32 %vreg16, 8, %STATUS<imp-def>; GPR32:%vreg58,%vreg16
	STRf32 %vreg57<kill>, %vreg13, 4; mem:ST4[%scevgep16](tbaa=!2) FPR32:%vreg57 GPR32:%vreg13
	BCC <BB#6>, 8, %STATUS<imp-use>
	BNONE32 <BB#7>, %STATUS<imp-use>
    Successors according to CFG: BB#6(0x7c000000 / 0x80000000 = 96.88%) BB#7(0x04000000 / 0x80000000 = 3.12%)

<----------------->
Analyzing block 7
BB#7: derived from LLVM BB %for.end60
    Predecessors according to CFG: BB#6
	%vreg20<def> = ADDrr_r32 %vreg9, %vreg1, %STATUS<imp-def,dead>; GPR32:%vreg20,%vreg9,%vreg1
	%vreg19<def> = ADDri_r32 %vreg10, 1, %STATUS<imp-def,dead>; GPR32:%vreg19,%vreg10
	%vreg59<def> = CMPrr_r32 %vreg19, %vreg33, %STATUS<imp-def>; GPR32:%vreg59,%vreg19,%vreg33
	BCC <BB#4>, 0, %STATUS<imp-use>
	BNONE32 <BB#5>, %STATUS<imp-use>
    Successors according to CFG: BB#4(0x04000000 / 0x80000000 = 3.12%) BB#5(0x7c000000 / 0x80000000 = 96.88%)

<----------------->
Analyzing block 8
BB#8: derived from LLVM BB %for.body66
    Predecessors according to CFG: BB#4 BB#8
	%vreg21<def> = PHI %vreg6, <BB#4>, %vreg24, <BB#8>; GPR32:%vreg21,%vreg6,%vreg24
	%vreg22<def> = PHI %vreg60, <BB#4>, %vreg23, <BB#8>; GPR32:%vreg22,%vreg60,%vreg23
	%vreg61<def> = MOViPTR <fi#0>, 0; GPR32:%vreg61
	%vreg62<def> = ADDrr_r32 %vreg61<kill>, %vreg22, %STATUS<imp-def,dead>; GPR32:%vreg62,%vreg61,%vreg22
	%vreg63<def> = LDRf32 %vreg62<kill>, 0; mem:LD4[%sunkaddr30](tbaa=!2) FPR32:%vreg63 GPR32:%vreg62
	%vreg24<def> = ADDri_r32 %vreg21, 4, %STATUS<imp-def,dead>; GPR32:%vreg24,%vreg21
	%vreg23<def> = ADDri_r32 %vreg22, 4, %STATUS<imp-def,dead>; GPR32:%vreg23,%vreg22
	%vreg64<def> = LDRf32 %vreg21, 0; mem:Volatile LD4[%lsr.iv24](tbaa=!2) FPR32:%vreg64 GPR32:%vreg21
	%vreg76<def> = LDRi32_r32 <fi#2>, 0; mem:LD4[FixedStack2] GPR32:%vreg76
	GID %CONFIG<imp-def>
	%CONFIG<def> = MOVTS32_core %vreg76<kill>; GPR32:%vreg76
	GIE %CONFIG<imp-def>
	%vreg65<def> = FADDrr_r32 %vreg63<kill>, %vreg64<kill>, %STATUS<imp-def,dead>; FPR32:%vreg65,%vreg63,%vreg64
	%vreg66<def> = CMPri_r32 %vreg23, 32, %STATUS<imp-def>; GPR32:%vreg66,%vreg23
	STRf32 %vreg65<kill>, %vreg21, 0; mem:Volatile ST4[%lsr.iv24](tbaa=!2) FPR32:%vreg65 GPR32:%vreg21
	BCC <BB#8>, 1, %STATUS<imp-use>
	BNONE32 <BB#9>, %STATUS<imp-use>
    Successors according to CFG: BB#9(0x04000000 / 0x80000000 = 3.12%) BB#8(0x7c000000 / 0x80000000 = 96.88%)

<----------------->
Analyzing block 9
BB#9: derived from LLVM BB %for.end75
    Predecessors according to CFG: BB#8
	%vreg27<def> = ADDri_r32 %vreg6, 32, %STATUS<imp-def,dead>; GPR32:%vreg27,%vreg6
	%vreg26<def> = ADDri_r32 %vreg7, 32, %STATUS<imp-def,dead>; GPR32:%vreg26,%vreg7
	LIFETIME_END <fi#0>
	%vreg25<def> = ADDri_r32 %vreg8, 8, %STATUS<imp-def,dead>; GPR32:%vreg25,%vreg8
	%vreg67<def> = CMPrr_r32 %vreg25, %vreg33, %STATUS<imp-def>; GPR32:%vreg67,%vreg25,%vreg33
	BCC <BB#3>, 8, %STATUS<imp-use>
	BNONE32 <BB#10>, %STATUS<imp-use>
    Successors according to CFG: BB#3(0x7c000000 / 0x80000000 = 96.88%) BB#10(0x04000000 / 0x80000000 = 3.12%)

<----------------->
Analyzing block 10
BB#10: derived from LLVM BB %for.end78
    Predecessors according to CFG: BB#9
	%vreg29<def> = ADDrr_r32 %vreg3, %vreg1, %STATUS<imp-def,dead>; GPR32:%vreg29,%vreg3,%vreg1
	%vreg28<def> = ADDri_r32 %vreg4, 1, %STATUS<imp-def,dead>; GPR32:%vreg28,%vreg4
	%vreg68<def> = CMPrr_r32 %vreg28, %vreg33, %STATUS<imp-def>; GPR32:%vreg68,%vreg28,%vreg33
	BCC <BB#2>, 1, %STATUS<imp-use>
	BNONE32 <BB#11>, %STATUS<imp-use>
    Successors according to CFG: BB#11(0x04000000 / 0x80000000 = 3.12%) BB#2(0x7c000000 / 0x80000000 = 96.88%)

<----------------->
Analyzing block 11
BB#11: derived from LLVM BB %for.end81
    Predecessors according to CFG: BB#0 BB#10
	%vreg77<def> = LDRi32_r32 <fi#1>, 0; mem:LD4[FixedStack1] GPR32:%vreg77
	GID
	%CONFIG<def> = MOVTS32_core %vreg77<kill>; GPR32:%vreg77
	GIE %CONFIG<imp-use,kill>
	RTS
# *** IR Dump After Tail Duplication ***:
# Machine code for function matmac: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=32, align=8, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=4, align=4, at location [SP]
Function Live Ins: %R0 in %vreg30, %R1 in %vreg31, %R2 in %vreg32, %R3 in %vreg33

BB#12: 
    Live Ins: %R0 %R1 %R2 %R3
	GID %CONFIG<imp-def>
	%vreg71<def> = MOVFS32_core %CONFIG<kill>; GPR32:%vreg71
	STRi32_r32 %vreg71, <fi#1>, 0; mem:ST4[FixedStack1] GPR32:%vreg71
	%vreg72<def> = MOVi32ri 65535; GPR32:%vreg72
	%vreg73<def,tied1> = MOVTi32ri %vreg72<tied0>, 65521; GPR32:%vreg73,%vreg72
	%vreg69<def> = ANDrr_r32 %vreg71<kill>, %vreg73<kill>, %STATUS<imp-def>; GPR32:%vreg69,%vreg71,%vreg73
	STRi32_r32 %vreg69, <fi#2>, 0; mem:ST4[FixedStack2] GPR32:%vreg69
	%vreg70<def,tied1> = MOVTi32ri %vreg71<kill,tied0>, 72; GPR32:%vreg70,%vreg71
	STRi32_r32 %vreg70, <fi#3>, 0; mem:ST4[FixedStack3] GPR32:%vreg70
	GIE %CONFIG<imp-use,kill>
    Successors according to CFG: BB#0(?%)

BB#0: derived from LLVM BB %entry
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#12
	%vreg33<def> = COPY %R3; GPR32:%vreg33
	%vreg32<def> = COPY %R2; GPR32:%vreg32
	%vreg31<def> = COPY %R1; GPR32:%vreg31
	%vreg30<def> = COPY %R0; GPR32:%vreg30
	%vreg34<def> = CMPri_r32 %vreg33, 1, %STATUS<imp-def>; GPR32:%vreg34,%vreg33
	BCC <BB#11>, 8, %STATUS<imp-use>
	BNONE32 <BB#1>, %STATUS<imp-use>
    Successors according to CFG: BB#1(0x50000000 / 0x80000000 = 62.50%) BB#11(0x30000000 / 0x80000000 = 37.50%)

BB#1: derived from LLVM BB %for.body3.lr.ph.preheader
    Predecessors according to CFG: BB#0
	%vreg1<def> = LSL32ri %vreg33, 2, %STATUS<imp-def,dead>; GPR32:%vreg1,%vreg33
	%vreg0<def> = ADDri_r32 %vreg31, 8, %STATUS<imp-def,dead>; GPR32:%vreg0,%vreg31
	%vreg36<def> = MOViPTR <fi#0>, 0; GPR32:%vreg36
	%vreg2<def> = ADDri_r32 %vreg36<kill>, 8, %STATUS<imp-def,dead>; GPR32:%vreg2,%vreg36
	%vreg35<def> = MOVi32ri 0; GPR32:%vreg35
    Successors according to CFG: BB#2(?%)

BB#2: derived from LLVM BB %for.body3.lr.ph
    Predecessors according to CFG: BB#1 BB#10
	%vreg3<def> = PHI %vreg32, <BB#1>, %vreg29, <BB#10>; GPR32:%vreg3,%vreg32,%vreg29
	%vreg4<def> = PHI %vreg35, <BB#1>, %vreg28, <BB#10>; GPR32:%vreg4,%vreg35,%vreg28
	%vreg74<def> = LDRi32_r32 <fi#3>, 0; mem:LD4[FixedStack3] GPR32:%vreg74
	GID %CONFIG<imp-def>
	%CONFIG<def> = MOVTS32_core %vreg74<kill>; GPR32:%vreg74
	GIE %CONFIG<imp-def>
	%vreg38<def> = IMULrr_r32 %vreg4, %vreg33, %STATUS<imp-def,dead>; GPR32:%vreg38,%vreg4,%vreg33
	%vreg39<def> = LSL32ri %vreg38<kill>, 2, %STATUS<imp-def,dead>; GPR32:%vreg39,%vreg38
	%vreg37<def> = MOVi32ri 0; GPR32:%vreg37
	%vreg5<def> = ADDrr_r32 %vreg30, %vreg39<kill>, %STATUS<imp-def,dead>; GPR32:%vreg5,%vreg30,%vreg39
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %for.body9.preheader
    Predecessors according to CFG: BB#2 BB#9
	%vreg6<def> = PHI %vreg3, <BB#2>, %vreg27, <BB#9>; GPR32:%vreg6,%vreg3,%vreg27
	%vreg7<def> = PHI %vreg0, <BB#2>, %vreg26, <BB#9>; GPR32:%vreg7,%vreg0,%vreg26
	%vreg8<def> = PHI %vreg37, <BB#2>, %vreg25, <BB#9>; GPR32:%vreg8,%vreg37,%vreg25
	%vreg41<def> = MOVi32ri 0; GPR32:%vreg41
	%vreg40<def> = MOVi32ri 0; GPR32:%vreg40
	%vreg42<def> = REG_SEQUENCE %vreg40, isub_hi, %vreg41<kill>, isub_lo; FPR64_with_isub_hi_in_FPR32:%vreg42 GPR32:%vreg40,%vreg41
	LIFETIME_START <fi#0>
	STRi64 %vreg42, <fi#0>, 24; mem:ST8[%1+24] FPR64_with_isub_hi_in_FPR32:%vreg42
	STRi64 %vreg42, <fi#0>, 16; mem:ST8[%1+16] FPR64_with_isub_hi_in_FPR32:%vreg42
	STRi64 %vreg42, <fi#0>, 8; mem:ST8[%1+8] FPR64_with_isub_hi_in_FPR32:%vreg42
	STRi64 %vreg42, <fi#0>, 0; mem:ST8[%1] FPR64_with_isub_hi_in_FPR32:%vreg42
	BNONE32 <BB#5>, %STATUS<imp-use>
    Successors according to CFG: BB#5(?%)

BB#4: derived from LLVM BB %for.cond64.preheader
    Predecessors according to CFG: BB#7
	%vreg60<def> = MOVi32ri 0; GPR32:%vreg60
	BNONE32 <BB#8>, %STATUS<imp-use>
    Successors according to CFG: BB#8(?%)

BB#5: derived from LLVM BB %for.body9
    Predecessors according to CFG: BB#3 BB#7
	%vreg9<def> = PHI %vreg7, <BB#3>, %vreg20, <BB#7>; GPR32:%vreg9,%vreg7,%vreg20
	%vreg10<def> = PHI %vreg40, <BB#3>, %vreg19, <BB#7>; GPR32:%vreg10,%vreg40,%vreg19
	%vreg44<def> = LSL32ri %vreg10, 2, %STATUS<imp-def,dead>; GPR32:%vreg44,%vreg10
	%vreg45<def> = ADDrr_r32 %vreg5, %vreg44<kill>, %STATUS<imp-def,dead>; GPR32:%vreg45,%vreg5,%vreg44
	%vreg11<def> = COPY %vreg2; GPR32:%vreg11,%vreg2
	%vreg43<def> = MOVi32ri 0; GPR32:%vreg43
	%vreg12<def> = LDRf32 %vreg45<kill>, 0; mem:Volatile LD4[%add.ptr10](tbaa=!2) FPR32:%vreg12 GPR32:%vreg45
    Successors according to CFG: BB#6(?%)

BB#6: derived from LLVM BB %for.body13
    Predecessors according to CFG: BB#5 BB#6
	%vreg13<def> = PHI %vreg11, <BB#5>, %vreg18, <BB#6>; GPR32:%vreg13,%vreg11,%vreg18
	%vreg14<def> = PHI %vreg9, <BB#5>, %vreg17, <BB#6>; GPR32:%vreg14,%vreg9,%vreg17
	%vreg15<def> = PHI %vreg43, <BB#5>, %vreg16, <BB#6>; GPR32:%vreg15,%vreg43,%vreg16
	%vreg46<def> = LDRf32 %vreg14, -8; mem:Volatile LD4[%scevgep8](tbaa=!2) FPR32:%vreg46 GPR32:%vreg14
	%vreg18<def> = ADDri_r32 %vreg13, 16, %STATUS<imp-def,dead>; GPR32:%vreg18,%vreg13
	%vreg17<def> = ADDri_r32 %vreg14, 16, %STATUS<imp-def,dead>; GPR32:%vreg17,%vreg14
	%vreg47<def> = LDRf32 %vreg14, -4; mem:Volatile LD4[%scevgep9](tbaa=!2) FPR32:%vreg47 GPR32:%vreg14
	%vreg16<def> = ADDri_r32 %vreg15, 4, %STATUS<imp-def,dead>; GPR32:%vreg16,%vreg15
	%vreg48<def> = LDRf32 %vreg14, 0; mem:Volatile LD4[%lsr.iv5](tbaa=!2) FPR32:%vreg48 GPR32:%vreg14
	%vreg49<def> = LDRf32 %vreg14, 4; mem:Volatile LD4[%scevgep7](tbaa=!2) FPR32:%vreg49 GPR32:%vreg14
	%vreg50<def> = LDRf32 %vreg13, -8; mem:LD4[%scevgep15](tbaa=!2) FPR32:%vreg50 GPR32:%vreg13
	%vreg75<def> = LDRi32_r32 <fi#2>, 0; mem:LD4[FixedStack2] GPR32:%vreg75
	GID %CONFIG<imp-def>
	%CONFIG<def> = MOVTS32_core %vreg75<kill>; GPR32:%vreg75
	GIE %CONFIG<imp-def>
	%vreg51<def,tied1> = FMADDrr_r32 %vreg50<tied0>, %vreg12, %vreg46<kill>, %STATUS<imp-def,dead>; FPR32:%vreg51,%vreg50,%vreg12,%vreg46
	STRf32 %vreg51<kill>, %vreg13, -8; mem:ST4[%scevgep15](tbaa=!2) FPR32:%vreg51 GPR32:%vreg13
	%vreg52<def> = LDRf32 %vreg13, -4; mem:LD4[%scevgep17](tbaa=!2) FPR32:%vreg52 GPR32:%vreg13
	%vreg53<def,tied1> = FMADDrr_r32 %vreg52<tied0>, %vreg12, %vreg47<kill>, %STATUS<imp-def,dead>; FPR32:%vreg53,%vreg52,%vreg12,%vreg47
	STRf32 %vreg53<kill>, %vreg13, -4; mem:ST4[%scevgep17](tbaa=!2) FPR32:%vreg53 GPR32:%vreg13
	%vreg54<def> = LDRf32 %vreg13, 0; mem:LD4[%lsr.iv1214](tbaa=!2) FPR32:%vreg54 GPR32:%vreg13
	%vreg55<def,tied1> = FMADDrr_r32 %vreg54<tied0>, %vreg12, %vreg48<kill>, %STATUS<imp-def,dead>; FPR32:%vreg55,%vreg54,%vreg12,%vreg48
	STRf32 %vreg55<kill>, %vreg13, 0; mem:ST4[%lsr.iv1214](tbaa=!2) FPR32:%vreg55 GPR32:%vreg13
	%vreg56<def> = LDRf32 %vreg13, 4; mem:LD4[%scevgep16](tbaa=!2) FPR32:%vreg56 GPR32:%vreg13
	%vreg57<def,tied1> = FMADDrr_r32 %vreg56<tied0>, %vreg12, %vreg49<kill>, %STATUS<imp-def,dead>; FPR32:%vreg57,%vreg56,%vreg12,%vreg49
	%vreg58<def> = CMPri_r32 %vreg16, 8, %STATUS<imp-def>; GPR32:%vreg58,%vreg16
	STRf32 %vreg57<kill>, %vreg13, 4; mem:ST4[%scevgep16](tbaa=!2) FPR32:%vreg57 GPR32:%vreg13
	BCC <BB#6>, 8, %STATUS<imp-use>
	BNONE32 <BB#7>, %STATUS<imp-use>
    Successors according to CFG: BB#6(0x7c000000 / 0x80000000 = 96.88%) BB#7(0x04000000 / 0x80000000 = 3.12%)

BB#7: derived from LLVM BB %for.end60
    Predecessors according to CFG: BB#6
	%vreg20<def> = ADDrr_r32 %vreg9, %vreg1, %STATUS<imp-def,dead>; GPR32:%vreg20,%vreg9,%vreg1
	%vreg19<def> = ADDri_r32 %vreg10, 1, %STATUS<imp-def,dead>; GPR32:%vreg19,%vreg10
	%vreg59<def> = CMPrr_r32 %vreg19, %vreg33, %STATUS<imp-def>; GPR32:%vreg59,%vreg19,%vreg33
	BCC <BB#4>, 0, %STATUS<imp-use>
	BNONE32 <BB#5>, %STATUS<imp-use>
    Successors according to CFG: BB#4(0x04000000 / 0x80000000 = 3.12%) BB#5(0x7c000000 / 0x80000000 = 96.88%)

BB#8: derived from LLVM BB %for.body66
    Predecessors according to CFG: BB#4 BB#8
	%vreg21<def> = PHI %vreg6, <BB#4>, %vreg24, <BB#8>; GPR32:%vreg21,%vreg6,%vreg24
	%vreg22<def> = PHI %vreg60, <BB#4>, %vreg23, <BB#8>; GPR32:%vreg22,%vreg60,%vreg23
	%vreg61<def> = MOViPTR <fi#0>, 0; GPR32:%vreg61
	%vreg62<def> = ADDrr_r32 %vreg61<kill>, %vreg22, %STATUS<imp-def,dead>; GPR32:%vreg62,%vreg61,%vreg22
	%vreg63<def> = LDRf32 %vreg62<kill>, 0; mem:LD4[%sunkaddr30](tbaa=!2) FPR32:%vreg63 GPR32:%vreg62
	%vreg24<def> = ADDri_r32 %vreg21, 4, %STATUS<imp-def,dead>; GPR32:%vreg24,%vreg21
	%vreg23<def> = ADDri_r32 %vreg22, 4, %STATUS<imp-def,dead>; GPR32:%vreg23,%vreg22
	%vreg64<def> = LDRf32 %vreg21, 0; mem:Volatile LD4[%lsr.iv24](tbaa=!2) FPR32:%vreg64 GPR32:%vreg21
	%vreg76<def> = LDRi32_r32 <fi#2>, 0; mem:LD4[FixedStack2] GPR32:%vreg76
	GID %CONFIG<imp-def>
	%CONFIG<def> = MOVTS32_core %vreg76<kill>; GPR32:%vreg76
	GIE %CONFIG<imp-def>
	%vreg65<def> = FADDrr_r32 %vreg63<kill>, %vreg64<kill>, %STATUS<imp-def,dead>; FPR32:%vreg65,%vreg63,%vreg64
	%vreg66<def> = CMPri_r32 %vreg23, 32, %STATUS<imp-def>; GPR32:%vreg66,%vreg23
	STRf32 %vreg65<kill>, %vreg21, 0; mem:Volatile ST4[%lsr.iv24](tbaa=!2) FPR32:%vreg65 GPR32:%vreg21
	BCC <BB#8>, 1, %STATUS<imp-use>
	BNONE32 <BB#9>, %STATUS<imp-use>
    Successors according to CFG: BB#9(0x04000000 / 0x80000000 = 3.12%) BB#8(0x7c000000 / 0x80000000 = 96.88%)

BB#9: derived from LLVM BB %for.end75
    Predecessors according to CFG: BB#8
	%vreg27<def> = ADDri_r32 %vreg6, 32, %STATUS<imp-def,dead>; GPR32:%vreg27,%vreg6
	%vreg26<def> = ADDri_r32 %vreg7, 32, %STATUS<imp-def,dead>; GPR32:%vreg26,%vreg7
	LIFETIME_END <fi#0>
	%vreg25<def> = ADDri_r32 %vreg8, 8, %STATUS<imp-def,dead>; GPR32:%vreg25,%vreg8
	%vreg67<def> = CMPrr_r32 %vreg25, %vreg33, %STATUS<imp-def>; GPR32:%vreg67,%vreg25,%vreg33
	BCC <BB#3>, 8, %STATUS<imp-use>
	BNONE32 <BB#10>, %STATUS<imp-use>
    Successors according to CFG: BB#3(0x7c000000 / 0x80000000 = 96.88%) BB#10(0x04000000 / 0x80000000 = 3.12%)

BB#10: derived from LLVM BB %for.end78
    Predecessors according to CFG: BB#9
	%vreg29<def> = ADDrr_r32 %vreg3, %vreg1, %STATUS<imp-def,dead>; GPR32:%vreg29,%vreg3,%vreg1
	%vreg28<def> = ADDri_r32 %vreg4, 1, %STATUS<imp-def,dead>; GPR32:%vreg28,%vreg4
	%vreg68<def> = CMPrr_r32 %vreg28, %vreg33, %STATUS<imp-def>; GPR32:%vreg68,%vreg28,%vreg33
	BCC <BB#2>, 1, %STATUS<imp-use>
	BNONE32 <BB#11>, %STATUS<imp-use>
    Successors according to CFG: BB#11(0x04000000 / 0x80000000 = 3.12%) BB#2(0x7c000000 / 0x80000000 = 96.88%)

BB#11: derived from LLVM BB %for.end81
    Predecessors according to CFG: BB#0 BB#10
	%vreg77<def> = LDRi32_r32 <fi#1>, 0; mem:LD4[FixedStack1] GPR32:%vreg77
	GID
	%CONFIG<def> = MOVTS32_core %vreg77<kill>; GPR32:%vreg77
	GIE %CONFIG<imp-use,kill>
	RTS

# End machine code for function matmac.

# *** IR Dump Before Optimize machine instruction PHIs ***:
# Machine code for function matmac: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=32, align=8, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=4, align=4, at location [SP]
Function Live Ins: %R0 in %vreg30, %R1 in %vreg31, %R2 in %vreg32, %R3 in %vreg33

BB#12: 
    Live Ins: %R0 %R1 %R2 %R3
	GID %CONFIG<imp-def>
	%vreg71<def> = MOVFS32_core %CONFIG<kill>; GPR32:%vreg71
	STRi32_r32 %vreg71, <fi#1>, 0; mem:ST4[FixedStack1] GPR32:%vreg71
	%vreg72<def> = MOVi32ri 65535; GPR32:%vreg72
	%vreg73<def,tied1> = MOVTi32ri %vreg72<tied0>, 65521; GPR32:%vreg73,%vreg72
	%vreg69<def> = ANDrr_r32 %vreg71<kill>, %vreg73<kill>, %STATUS<imp-def>; GPR32:%vreg69,%vreg71,%vreg73
	STRi32_r32 %vreg69, <fi#2>, 0; mem:ST4[FixedStack2] GPR32:%vreg69
	%vreg70<def,tied1> = MOVTi32ri %vreg71<kill,tied0>, 72; GPR32:%vreg70,%vreg71
	STRi32_r32 %vreg70, <fi#3>, 0; mem:ST4[FixedStack3] GPR32:%vreg70
	GIE %CONFIG<imp-use,kill>
    Successors according to CFG: BB#0(?%)

BB#0: derived from LLVM BB %entry
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#12
	%vreg33<def> = COPY %R3; GPR32:%vreg33
	%vreg32<def> = COPY %R2; GPR32:%vreg32
	%vreg31<def> = COPY %R1; GPR32:%vreg31
	%vreg30<def> = COPY %R0; GPR32:%vreg30
	%vreg34<def> = CMPri_r32 %vreg33, 1, %STATUS<imp-def>; GPR32:%vreg34,%vreg33
	BCC <BB#11>, 8, %STATUS<imp-use>
	BNONE32 <BB#1>, %STATUS<imp-use>
    Successors according to CFG: BB#1(0x50000000 / 0x80000000 = 62.50%) BB#11(0x30000000 / 0x80000000 = 37.50%)

BB#1: derived from LLVM BB %for.body3.lr.ph.preheader
    Predecessors according to CFG: BB#0
	%vreg1<def> = LSL32ri %vreg33, 2, %STATUS<imp-def,dead>; GPR32:%vreg1,%vreg33
	%vreg0<def> = ADDri_r32 %vreg31, 8, %STATUS<imp-def,dead>; GPR32:%vreg0,%vreg31
	%vreg36<def> = MOViPTR <fi#0>, 0; GPR32:%vreg36
	%vreg2<def> = ADDri_r32 %vreg36<kill>, 8, %STATUS<imp-def,dead>; GPR32:%vreg2,%vreg36
	%vreg35<def> = MOVi32ri 0; GPR32:%vreg35
    Successors according to CFG: BB#2(?%)

BB#2: derived from LLVM BB %for.body3.lr.ph
    Predecessors according to CFG: BB#1 BB#10
	%vreg3<def> = PHI %vreg32, <BB#1>, %vreg29, <BB#10>; GPR32:%vreg3,%vreg32,%vreg29
	%vreg4<def> = PHI %vreg35, <BB#1>, %vreg28, <BB#10>; GPR32:%vreg4,%vreg35,%vreg28
	%vreg74<def> = LDRi32_r32 <fi#3>, 0; mem:LD4[FixedStack3] GPR32:%vreg74
	GID %CONFIG<imp-def>
	%CONFIG<def> = MOVTS32_core %vreg74<kill>; GPR32:%vreg74
	GIE %CONFIG<imp-def>
	%vreg38<def> = IMULrr_r32 %vreg4, %vreg33, %STATUS<imp-def,dead>; GPR32:%vreg38,%vreg4,%vreg33
	%vreg39<def> = LSL32ri %vreg38<kill>, 2, %STATUS<imp-def,dead>; GPR32:%vreg39,%vreg38
	%vreg37<def> = MOVi32ri 0; GPR32:%vreg37
	%vreg5<def> = ADDrr_r32 %vreg30, %vreg39<kill>, %STATUS<imp-def,dead>; GPR32:%vreg5,%vreg30,%vreg39
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %for.body9.preheader
    Predecessors according to CFG: BB#2 BB#9
	%vreg6<def> = PHI %vreg3, <BB#2>, %vreg27, <BB#9>; GPR32:%vreg6,%vreg3,%vreg27
	%vreg7<def> = PHI %vreg0, <BB#2>, %vreg26, <BB#9>; GPR32:%vreg7,%vreg0,%vreg26
	%vreg8<def> = PHI %vreg37, <BB#2>, %vreg25, <BB#9>; GPR32:%vreg8,%vreg37,%vreg25
	%vreg41<def> = MOVi32ri 0; GPR32:%vreg41
	%vreg40<def> = MOVi32ri 0; GPR32:%vreg40
	%vreg42<def> = REG_SEQUENCE %vreg40, isub_hi, %vreg41<kill>, isub_lo; FPR64_with_isub_hi_in_FPR32:%vreg42 GPR32:%vreg40,%vreg41
	LIFETIME_START <fi#0>
	STRi64 %vreg42, <fi#0>, 24; mem:ST8[%1+24] FPR64_with_isub_hi_in_FPR32:%vreg42
	STRi64 %vreg42, <fi#0>, 16; mem:ST8[%1+16] FPR64_with_isub_hi_in_FPR32:%vreg42
	STRi64 %vreg42, <fi#0>, 8; mem:ST8[%1+8] FPR64_with_isub_hi_in_FPR32:%vreg42
	STRi64 %vreg42, <fi#0>, 0; mem:ST8[%1] FPR64_with_isub_hi_in_FPR32:%vreg42
	BNONE32 <BB#5>, %STATUS<imp-use>
    Successors according to CFG: BB#5(?%)

BB#4: derived from LLVM BB %for.cond64.preheader
    Predecessors according to CFG: BB#7
	%vreg60<def> = MOVi32ri 0; GPR32:%vreg60
	BNONE32 <BB#8>, %STATUS<imp-use>
    Successors according to CFG: BB#8(?%)

BB#5: derived from LLVM BB %for.body9
    Predecessors according to CFG: BB#3 BB#7
	%vreg9<def> = PHI %vreg7, <BB#3>, %vreg20, <BB#7>; GPR32:%vreg9,%vreg7,%vreg20
	%vreg10<def> = PHI %vreg40, <BB#3>, %vreg19, <BB#7>; GPR32:%vreg10,%vreg40,%vreg19
	%vreg44<def> = LSL32ri %vreg10, 2, %STATUS<imp-def,dead>; GPR32:%vreg44,%vreg10
	%vreg45<def> = ADDrr_r32 %vreg5, %vreg44<kill>, %STATUS<imp-def,dead>; GPR32:%vreg45,%vreg5,%vreg44
	%vreg11<def> = COPY %vreg2; GPR32:%vreg11,%vreg2
	%vreg43<def> = MOVi32ri 0; GPR32:%vreg43
	%vreg12<def> = LDRf32 %vreg45<kill>, 0; mem:Volatile LD4[%add.ptr10](tbaa=!2) FPR32:%vreg12 GPR32:%vreg45
    Successors according to CFG: BB#6(?%)

BB#6: derived from LLVM BB %for.body13
    Predecessors according to CFG: BB#5 BB#6
	%vreg13<def> = PHI %vreg11, <BB#5>, %vreg18, <BB#6>; GPR32:%vreg13,%vreg11,%vreg18
	%vreg14<def> = PHI %vreg9, <BB#5>, %vreg17, <BB#6>; GPR32:%vreg14,%vreg9,%vreg17
	%vreg15<def> = PHI %vreg43, <BB#5>, %vreg16, <BB#6>; GPR32:%vreg15,%vreg43,%vreg16
	%vreg46<def> = LDRf32 %vreg14, -8; mem:Volatile LD4[%scevgep8](tbaa=!2) FPR32:%vreg46 GPR32:%vreg14
	%vreg18<def> = ADDri_r32 %vreg13, 16, %STATUS<imp-def,dead>; GPR32:%vreg18,%vreg13
	%vreg17<def> = ADDri_r32 %vreg14, 16, %STATUS<imp-def,dead>; GPR32:%vreg17,%vreg14
	%vreg47<def> = LDRf32 %vreg14, -4; mem:Volatile LD4[%scevgep9](tbaa=!2) FPR32:%vreg47 GPR32:%vreg14
	%vreg16<def> = ADDri_r32 %vreg15, 4, %STATUS<imp-def,dead>; GPR32:%vreg16,%vreg15
	%vreg48<def> = LDRf32 %vreg14, 0; mem:Volatile LD4[%lsr.iv5](tbaa=!2) FPR32:%vreg48 GPR32:%vreg14
	%vreg49<def> = LDRf32 %vreg14, 4; mem:Volatile LD4[%scevgep7](tbaa=!2) FPR32:%vreg49 GPR32:%vreg14
	%vreg50<def> = LDRf32 %vreg13, -8; mem:LD4[%scevgep15](tbaa=!2) FPR32:%vreg50 GPR32:%vreg13
	%vreg75<def> = LDRi32_r32 <fi#2>, 0; mem:LD4[FixedStack2] GPR32:%vreg75
	GID %CONFIG<imp-def>
	%CONFIG<def> = MOVTS32_core %vreg75<kill>; GPR32:%vreg75
	GIE %CONFIG<imp-def>
	%vreg51<def,tied1> = FMADDrr_r32 %vreg50<tied0>, %vreg12, %vreg46<kill>, %STATUS<imp-def,dead>; FPR32:%vreg51,%vreg50,%vreg12,%vreg46
	STRf32 %vreg51<kill>, %vreg13, -8; mem:ST4[%scevgep15](tbaa=!2) FPR32:%vreg51 GPR32:%vreg13
	%vreg52<def> = LDRf32 %vreg13, -4; mem:LD4[%scevgep17](tbaa=!2) FPR32:%vreg52 GPR32:%vreg13
	%vreg53<def,tied1> = FMADDrr_r32 %vreg52<tied0>, %vreg12, %vreg47<kill>, %STATUS<imp-def,dead>; FPR32:%vreg53,%vreg52,%vreg12,%vreg47
	STRf32 %vreg53<kill>, %vreg13, -4; mem:ST4[%scevgep17](tbaa=!2) FPR32:%vreg53 GPR32:%vreg13
	%vreg54<def> = LDRf32 %vreg13, 0; mem:LD4[%lsr.iv1214](tbaa=!2) FPR32:%vreg54 GPR32:%vreg13
	%vreg55<def,tied1> = FMADDrr_r32 %vreg54<tied0>, %vreg12, %vreg48<kill>, %STATUS<imp-def,dead>; FPR32:%vreg55,%vreg54,%vreg12,%vreg48
	STRf32 %vreg55<kill>, %vreg13, 0; mem:ST4[%lsr.iv1214](tbaa=!2) FPR32:%vreg55 GPR32:%vreg13
	%vreg56<def> = LDRf32 %vreg13, 4; mem:LD4[%scevgep16](tbaa=!2) FPR32:%vreg56 GPR32:%vreg13
	%vreg57<def,tied1> = FMADDrr_r32 %vreg56<tied0>, %vreg12, %vreg49<kill>, %STATUS<imp-def,dead>; FPR32:%vreg57,%vreg56,%vreg12,%vreg49
	%vreg58<def> = CMPri_r32 %vreg16, 8, %STATUS<imp-def>; GPR32:%vreg58,%vreg16
	STRf32 %vreg57<kill>, %vreg13, 4; mem:ST4[%scevgep16](tbaa=!2) FPR32:%vreg57 GPR32:%vreg13
	BCC <BB#6>, 8, %STATUS<imp-use>
	BNONE32 <BB#7>, %STATUS<imp-use>
    Successors according to CFG: BB#6(0x7c000000 / 0x80000000 = 96.88%) BB#7(0x04000000 / 0x80000000 = 3.12%)

BB#7: derived from LLVM BB %for.end60
    Predecessors according to CFG: BB#6
	%vreg20<def> = ADDrr_r32 %vreg9, %vreg1, %STATUS<imp-def,dead>; GPR32:%vreg20,%vreg9,%vreg1
	%vreg19<def> = ADDri_r32 %vreg10, 1, %STATUS<imp-def,dead>; GPR32:%vreg19,%vreg10
	%vreg59<def> = CMPrr_r32 %vreg19, %vreg33, %STATUS<imp-def>; GPR32:%vreg59,%vreg19,%vreg33
	BCC <BB#4>, 0, %STATUS<imp-use>
	BNONE32 <BB#5>, %STATUS<imp-use>
    Successors according to CFG: BB#4(0x04000000 / 0x80000000 = 3.12%) BB#5(0x7c000000 / 0x80000000 = 96.88%)

BB#8: derived from LLVM BB %for.body66
    Predecessors according to CFG: BB#4 BB#8
	%vreg21<def> = PHI %vreg6, <BB#4>, %vreg24, <BB#8>; GPR32:%vreg21,%vreg6,%vreg24
	%vreg22<def> = PHI %vreg60, <BB#4>, %vreg23, <BB#8>; GPR32:%vreg22,%vreg60,%vreg23
	%vreg61<def> = MOViPTR <fi#0>, 0; GPR32:%vreg61
	%vreg62<def> = ADDrr_r32 %vreg61<kill>, %vreg22, %STATUS<imp-def,dead>; GPR32:%vreg62,%vreg61,%vreg22
	%vreg63<def> = LDRf32 %vreg62<kill>, 0; mem:LD4[%sunkaddr30](tbaa=!2) FPR32:%vreg63 GPR32:%vreg62
	%vreg24<def> = ADDri_r32 %vreg21, 4, %STATUS<imp-def,dead>; GPR32:%vreg24,%vreg21
	%vreg23<def> = ADDri_r32 %vreg22, 4, %STATUS<imp-def,dead>; GPR32:%vreg23,%vreg22
	%vreg64<def> = LDRf32 %vreg21, 0; mem:Volatile LD4[%lsr.iv24](tbaa=!2) FPR32:%vreg64 GPR32:%vreg21
	%vreg76<def> = LDRi32_r32 <fi#2>, 0; mem:LD4[FixedStack2] GPR32:%vreg76
	GID %CONFIG<imp-def>
	%CONFIG<def> = MOVTS32_core %vreg76<kill>; GPR32:%vreg76
	GIE %CONFIG<imp-def>
	%vreg65<def> = FADDrr_r32 %vreg63<kill>, %vreg64<kill>, %STATUS<imp-def,dead>; FPR32:%vreg65,%vreg63,%vreg64
	%vreg66<def> = CMPri_r32 %vreg23, 32, %STATUS<imp-def>; GPR32:%vreg66,%vreg23
	STRf32 %vreg65<kill>, %vreg21, 0; mem:Volatile ST4[%lsr.iv24](tbaa=!2) FPR32:%vreg65 GPR32:%vreg21
	BCC <BB#8>, 1, %STATUS<imp-use>
	BNONE32 <BB#9>, %STATUS<imp-use>
    Successors according to CFG: BB#9(0x04000000 / 0x80000000 = 3.12%) BB#8(0x7c000000 / 0x80000000 = 96.88%)

BB#9: derived from LLVM BB %for.end75
    Predecessors according to CFG: BB#8
	%vreg27<def> = ADDri_r32 %vreg6, 32, %STATUS<imp-def,dead>; GPR32:%vreg27,%vreg6
	%vreg26<def> = ADDri_r32 %vreg7, 32, %STATUS<imp-def,dead>; GPR32:%vreg26,%vreg7
	LIFETIME_END <fi#0>
	%vreg25<def> = ADDri_r32 %vreg8, 8, %STATUS<imp-def,dead>; GPR32:%vreg25,%vreg8
	%vreg67<def> = CMPrr_r32 %vreg25, %vreg33, %STATUS<imp-def>; GPR32:%vreg67,%vreg25,%vreg33
	BCC <BB#3>, 8, %STATUS<imp-use>
	BNONE32 <BB#10>, %STATUS<imp-use>
    Successors according to CFG: BB#3(0x7c000000 / 0x80000000 = 96.88%) BB#10(0x04000000 / 0x80000000 = 3.12%)

BB#10: derived from LLVM BB %for.end78
    Predecessors according to CFG: BB#9
	%vreg29<def> = ADDrr_r32 %vreg3, %vreg1, %STATUS<imp-def,dead>; GPR32:%vreg29,%vreg3,%vreg1
	%vreg28<def> = ADDri_r32 %vreg4, 1, %STATUS<imp-def,dead>; GPR32:%vreg28,%vreg4
	%vreg68<def> = CMPrr_r32 %vreg28, %vreg33, %STATUS<imp-def>; GPR32:%vreg68,%vreg28,%vreg33
	BCC <BB#2>, 1, %STATUS<imp-use>
	BNONE32 <BB#11>, %STATUS<imp-use>
    Successors according to CFG: BB#11(0x04000000 / 0x80000000 = 3.12%) BB#2(0x7c000000 / 0x80000000 = 96.88%)

BB#11: derived from LLVM BB %for.end81
    Predecessors according to CFG: BB#0 BB#10
	%vreg77<def> = LDRi32_r32 <fi#1>, 0; mem:LD4[FixedStack1] GPR32:%vreg77
	GID
	%CONFIG<def> = MOVTS32_core %vreg77<kill>; GPR32:%vreg77
	GIE %CONFIG<imp-use,kill>
	RTS

# End machine code for function matmac.

# *** IR Dump After Optimize machine instruction PHIs ***:
# Machine code for function matmac: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=32, align=8, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=4, align=4, at location [SP]
Function Live Ins: %R0 in %vreg30, %R1 in %vreg31, %R2 in %vreg32, %R3 in %vreg33

BB#12: 
    Live Ins: %R0 %R1 %R2 %R3
	GID %CONFIG<imp-def>
	%vreg71<def> = MOVFS32_core %CONFIG<kill>; GPR32:%vreg71
	STRi32_r32 %vreg71, <fi#1>, 0; mem:ST4[FixedStack1] GPR32:%vreg71
	%vreg72<def> = MOVi32ri 65535; GPR32:%vreg72
	%vreg73<def,tied1> = MOVTi32ri %vreg72<tied0>, 65521; GPR32:%vreg73,%vreg72
	%vreg69<def> = ANDrr_r32 %vreg71<kill>, %vreg73<kill>, %STATUS<imp-def>; GPR32:%vreg69,%vreg71,%vreg73
	STRi32_r32 %vreg69, <fi#2>, 0; mem:ST4[FixedStack2] GPR32:%vreg69
	%vreg70<def,tied1> = MOVTi32ri %vreg71<kill,tied0>, 72; GPR32:%vreg70,%vreg71
	STRi32_r32 %vreg70, <fi#3>, 0; mem:ST4[FixedStack3] GPR32:%vreg70
	GIE %CONFIG<imp-use,kill>
    Successors according to CFG: BB#0(?%)

BB#0: derived from LLVM BB %entry
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#12
	%vreg33<def> = COPY %R3; GPR32:%vreg33
	%vreg32<def> = COPY %R2; GPR32:%vreg32
	%vreg31<def> = COPY %R1; GPR32:%vreg31
	%vreg30<def> = COPY %R0; GPR32:%vreg30
	%vreg34<def> = CMPri_r32 %vreg33, 1, %STATUS<imp-def>; GPR32:%vreg34,%vreg33
	BCC <BB#11>, 8, %STATUS<imp-use>
	BNONE32 <BB#1>, %STATUS<imp-use>
    Successors according to CFG: BB#1(0x50000000 / 0x80000000 = 62.50%) BB#11(0x30000000 / 0x80000000 = 37.50%)

BB#1: derived from LLVM BB %for.body3.lr.ph.preheader
    Predecessors according to CFG: BB#0
	%vreg1<def> = LSL32ri %vreg33, 2, %STATUS<imp-def,dead>; GPR32:%vreg1,%vreg33
	%vreg0<def> = ADDri_r32 %vreg31, 8, %STATUS<imp-def,dead>; GPR32:%vreg0,%vreg31
	%vreg36<def> = MOViPTR <fi#0>, 0; GPR32:%vreg36
	%vreg2<def> = ADDri_r32 %vreg36<kill>, 8, %STATUS<imp-def,dead>; GPR32:%vreg2,%vreg36
	%vreg35<def> = MOVi32ri 0; GPR32:%vreg35
    Successors according to CFG: BB#2(?%)

BB#2: derived from LLVM BB %for.body3.lr.ph
    Predecessors according to CFG: BB#1 BB#10
	%vreg3<def> = PHI %vreg32, <BB#1>, %vreg29, <BB#10>; GPR32:%vreg3,%vreg32,%vreg29
	%vreg4<def> = PHI %vreg35, <BB#1>, %vreg28, <BB#10>; GPR32:%vreg4,%vreg35,%vreg28
	%vreg74<def> = LDRi32_r32 <fi#3>, 0; mem:LD4[FixedStack3] GPR32:%vreg74
	GID %CONFIG<imp-def>
	%CONFIG<def> = MOVTS32_core %vreg74<kill>; GPR32:%vreg74
	GIE %CONFIG<imp-def>
	%vreg38<def> = IMULrr_r32 %vreg4, %vreg33, %STATUS<imp-def,dead>; GPR32:%vreg38,%vreg4,%vreg33
	%vreg39<def> = LSL32ri %vreg38<kill>, 2, %STATUS<imp-def,dead>; GPR32:%vreg39,%vreg38
	%vreg37<def> = MOVi32ri 0; GPR32:%vreg37
	%vreg5<def> = ADDrr_r32 %vreg30, %vreg39<kill>, %STATUS<imp-def,dead>; GPR32:%vreg5,%vreg30,%vreg39
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %for.body9.preheader
    Predecessors according to CFG: BB#2 BB#9
	%vreg6<def> = PHI %vreg3, <BB#2>, %vreg27, <BB#9>; GPR32:%vreg6,%vreg3,%vreg27
	%vreg7<def> = PHI %vreg0, <BB#2>, %vreg26, <BB#9>; GPR32:%vreg7,%vreg0,%vreg26
	%vreg8<def> = PHI %vreg37, <BB#2>, %vreg25, <BB#9>; GPR32:%vreg8,%vreg37,%vreg25
	%vreg41<def> = MOVi32ri 0; GPR32:%vreg41
	%vreg40<def> = MOVi32ri 0; GPR32:%vreg40
	%vreg42<def> = REG_SEQUENCE %vreg40, isub_hi, %vreg41<kill>, isub_lo; FPR64_with_isub_hi_in_FPR32:%vreg42 GPR32:%vreg40,%vreg41
	LIFETIME_START <fi#0>
	STRi64 %vreg42, <fi#0>, 24; mem:ST8[%1+24] FPR64_with_isub_hi_in_FPR32:%vreg42
	STRi64 %vreg42, <fi#0>, 16; mem:ST8[%1+16] FPR64_with_isub_hi_in_FPR32:%vreg42
	STRi64 %vreg42, <fi#0>, 8; mem:ST8[%1+8] FPR64_with_isub_hi_in_FPR32:%vreg42
	STRi64 %vreg42, <fi#0>, 0; mem:ST8[%1] FPR64_with_isub_hi_in_FPR32:%vreg42
	BNONE32 <BB#5>, %STATUS<imp-use>
    Successors according to CFG: BB#5(?%)

BB#4: derived from LLVM BB %for.cond64.preheader
    Predecessors according to CFG: BB#7
	%vreg60<def> = MOVi32ri 0; GPR32:%vreg60
	BNONE32 <BB#8>, %STATUS<imp-use>
    Successors according to CFG: BB#8(?%)

BB#5: derived from LLVM BB %for.body9
    Predecessors according to CFG: BB#3 BB#7
	%vreg9<def> = PHI %vreg7, <BB#3>, %vreg20, <BB#7>; GPR32:%vreg9,%vreg7,%vreg20
	%vreg10<def> = PHI %vreg40, <BB#3>, %vreg19, <BB#7>; GPR32:%vreg10,%vreg40,%vreg19
	%vreg44<def> = LSL32ri %vreg10, 2, %STATUS<imp-def,dead>; GPR32:%vreg44,%vreg10
	%vreg45<def> = ADDrr_r32 %vreg5, %vreg44<kill>, %STATUS<imp-def,dead>; GPR32:%vreg45,%vreg5,%vreg44
	%vreg11<def> = COPY %vreg2; GPR32:%vreg11,%vreg2
	%vreg43<def> = MOVi32ri 0; GPR32:%vreg43
	%vreg12<def> = LDRf32 %vreg45<kill>, 0; mem:Volatile LD4[%add.ptr10](tbaa=!2) FPR32:%vreg12 GPR32:%vreg45
    Successors according to CFG: BB#6(?%)

BB#6: derived from LLVM BB %for.body13
    Predecessors according to CFG: BB#5 BB#6
	%vreg13<def> = PHI %vreg11, <BB#5>, %vreg18, <BB#6>; GPR32:%vreg13,%vreg11,%vreg18
	%vreg14<def> = PHI %vreg9, <BB#5>, %vreg17, <BB#6>; GPR32:%vreg14,%vreg9,%vreg17
	%vreg15<def> = PHI %vreg43, <BB#5>, %vreg16, <BB#6>; GPR32:%vreg15,%vreg43,%vreg16
	%vreg46<def> = LDRf32 %vreg14, -8; mem:Volatile LD4[%scevgep8](tbaa=!2) FPR32:%vreg46 GPR32:%vreg14
	%vreg18<def> = ADDri_r32 %vreg13, 16, %STATUS<imp-def,dead>; GPR32:%vreg18,%vreg13
	%vreg17<def> = ADDri_r32 %vreg14, 16, %STATUS<imp-def,dead>; GPR32:%vreg17,%vreg14
	%vreg47<def> = LDRf32 %vreg14, -4; mem:Volatile LD4[%scevgep9](tbaa=!2) FPR32:%vreg47 GPR32:%vreg14
	%vreg16<def> = ADDri_r32 %vreg15, 4, %STATUS<imp-def,dead>; GPR32:%vreg16,%vreg15
	%vreg48<def> = LDRf32 %vreg14, 0; mem:Volatile LD4[%lsr.iv5](tbaa=!2) FPR32:%vreg48 GPR32:%vreg14
	%vreg49<def> = LDRf32 %vreg14, 4; mem:Volatile LD4[%scevgep7](tbaa=!2) FPR32:%vreg49 GPR32:%vreg14
	%vreg50<def> = LDRf32 %vreg13, -8; mem:LD4[%scevgep15](tbaa=!2) FPR32:%vreg50 GPR32:%vreg13
	%vreg75<def> = LDRi32_r32 <fi#2>, 0; mem:LD4[FixedStack2] GPR32:%vreg75
	GID %CONFIG<imp-def>
	%CONFIG<def> = MOVTS32_core %vreg75<kill>; GPR32:%vreg75
	GIE %CONFIG<imp-def>
	%vreg51<def,tied1> = FMADDrr_r32 %vreg50<tied0>, %vreg12, %vreg46<kill>, %STATUS<imp-def,dead>; FPR32:%vreg51,%vreg50,%vreg12,%vreg46
	STRf32 %vreg51<kill>, %vreg13, -8; mem:ST4[%scevgep15](tbaa=!2) FPR32:%vreg51 GPR32:%vreg13
	%vreg52<def> = LDRf32 %vreg13, -4; mem:LD4[%scevgep17](tbaa=!2) FPR32:%vreg52 GPR32:%vreg13
	%vreg53<def,tied1> = FMADDrr_r32 %vreg52<tied0>, %vreg12, %vreg47<kill>, %STATUS<imp-def,dead>; FPR32:%vreg53,%vreg52,%vreg12,%vreg47
	STRf32 %vreg53<kill>, %vreg13, -4; mem:ST4[%scevgep17](tbaa=!2) FPR32:%vreg53 GPR32:%vreg13
	%vreg54<def> = LDRf32 %vreg13, 0; mem:LD4[%lsr.iv1214](tbaa=!2) FPR32:%vreg54 GPR32:%vreg13
	%vreg55<def,tied1> = FMADDrr_r32 %vreg54<tied0>, %vreg12, %vreg48<kill>, %STATUS<imp-def,dead>; FPR32:%vreg55,%vreg54,%vreg12,%vreg48
	STRf32 %vreg55<kill>, %vreg13, 0; mem:ST4[%lsr.iv1214](tbaa=!2) FPR32:%vreg55 GPR32:%vreg13
	%vreg56<def> = LDRf32 %vreg13, 4; mem:LD4[%scevgep16](tbaa=!2) FPR32:%vreg56 GPR32:%vreg13
	%vreg57<def,tied1> = FMADDrr_r32 %vreg56<tied0>, %vreg12, %vreg49<kill>, %STATUS<imp-def,dead>; FPR32:%vreg57,%vreg56,%vreg12,%vreg49
	%vreg58<def> = CMPri_r32 %vreg16, 8, %STATUS<imp-def>; GPR32:%vreg58,%vreg16
	STRf32 %vreg57<kill>, %vreg13, 4; mem:ST4[%scevgep16](tbaa=!2) FPR32:%vreg57 GPR32:%vreg13
	BCC <BB#6>, 8, %STATUS<imp-use>
	BNONE32 <BB#7>, %STATUS<imp-use>
    Successors according to CFG: BB#6(0x7c000000 / 0x80000000 = 96.88%) BB#7(0x04000000 / 0x80000000 = 3.12%)

BB#7: derived from LLVM BB %for.end60
    Predecessors according to CFG: BB#6
	%vreg20<def> = ADDrr_r32 %vreg9, %vreg1, %STATUS<imp-def,dead>; GPR32:%vreg20,%vreg9,%vreg1
	%vreg19<def> = ADDri_r32 %vreg10, 1, %STATUS<imp-def,dead>; GPR32:%vreg19,%vreg10
	%vreg59<def> = CMPrr_r32 %vreg19, %vreg33, %STATUS<imp-def>; GPR32:%vreg59,%vreg19,%vreg33
	BCC <BB#4>, 0, %STATUS<imp-use>
	BNONE32 <BB#5>, %STATUS<imp-use>
    Successors according to CFG: BB#4(0x04000000 / 0x80000000 = 3.12%) BB#5(0x7c000000 / 0x80000000 = 96.88%)

BB#8: derived from LLVM BB %for.body66
    Predecessors according to CFG: BB#4 BB#8
	%vreg21<def> = PHI %vreg6, <BB#4>, %vreg24, <BB#8>; GPR32:%vreg21,%vreg6,%vreg24
	%vreg22<def> = PHI %vreg60, <BB#4>, %vreg23, <BB#8>; GPR32:%vreg22,%vreg60,%vreg23
	%vreg61<def> = MOViPTR <fi#0>, 0; GPR32:%vreg61
	%vreg62<def> = ADDrr_r32 %vreg61<kill>, %vreg22, %STATUS<imp-def,dead>; GPR32:%vreg62,%vreg61,%vreg22
	%vreg63<def> = LDRf32 %vreg62<kill>, 0; mem:LD4[%sunkaddr30](tbaa=!2) FPR32:%vreg63 GPR32:%vreg62
	%vreg24<def> = ADDri_r32 %vreg21, 4, %STATUS<imp-def,dead>; GPR32:%vreg24,%vreg21
	%vreg23<def> = ADDri_r32 %vreg22, 4, %STATUS<imp-def,dead>; GPR32:%vreg23,%vreg22
	%vreg64<def> = LDRf32 %vreg21, 0; mem:Volatile LD4[%lsr.iv24](tbaa=!2) FPR32:%vreg64 GPR32:%vreg21
	%vreg76<def> = LDRi32_r32 <fi#2>, 0; mem:LD4[FixedStack2] GPR32:%vreg76
	GID %CONFIG<imp-def>
	%CONFIG<def> = MOVTS32_core %vreg76<kill>; GPR32:%vreg76
	GIE %CONFIG<imp-def>
	%vreg65<def> = FADDrr_r32 %vreg63<kill>, %vreg64<kill>, %STATUS<imp-def,dead>; FPR32:%vreg65,%vreg63,%vreg64
	%vreg66<def> = CMPri_r32 %vreg23, 32, %STATUS<imp-def>; GPR32:%vreg66,%vreg23
	STRf32 %vreg65<kill>, %vreg21, 0; mem:Volatile ST4[%lsr.iv24](tbaa=!2) FPR32:%vreg65 GPR32:%vreg21
	BCC <BB#8>, 1, %STATUS<imp-use>
	BNONE32 <BB#9>, %STATUS<imp-use>
    Successors according to CFG: BB#9(0x04000000 / 0x80000000 = 3.12%) BB#8(0x7c000000 / 0x80000000 = 96.88%)

BB#9: derived from LLVM BB %for.end75
    Predecessors according to CFG: BB#8
	%vreg27<def> = ADDri_r32 %vreg6, 32, %STATUS<imp-def,dead>; GPR32:%vreg27,%vreg6
	%vreg26<def> = ADDri_r32 %vreg7, 32, %STATUS<imp-def,dead>; GPR32:%vreg26,%vreg7
	LIFETIME_END <fi#0>
	%vreg25<def> = ADDri_r32 %vreg8, 8, %STATUS<imp-def,dead>; GPR32:%vreg25,%vreg8
	%vreg67<def> = CMPrr_r32 %vreg25, %vreg33, %STATUS<imp-def>; GPR32:%vreg67,%vreg25,%vreg33
	BCC <BB#3>, 8, %STATUS<imp-use>
	BNONE32 <BB#10>, %STATUS<imp-use>
    Successors according to CFG: BB#3(0x7c000000 / 0x80000000 = 96.88%) BB#10(0x04000000 / 0x80000000 = 3.12%)

BB#10: derived from LLVM BB %for.end78
    Predecessors according to CFG: BB#9
	%vreg29<def> = ADDrr_r32 %vreg3, %vreg1, %STATUS<imp-def,dead>; GPR32:%vreg29,%vreg3,%vreg1
	%vreg28<def> = ADDri_r32 %vreg4, 1, %STATUS<imp-def,dead>; GPR32:%vreg28,%vreg4
	%vreg68<def> = CMPrr_r32 %vreg28, %vreg33, %STATUS<imp-def>; GPR32:%vreg68,%vreg28,%vreg33
	BCC <BB#2>, 1, %STATUS<imp-use>
	BNONE32 <BB#11>, %STATUS<imp-use>
    Successors according to CFG: BB#11(0x04000000 / 0x80000000 = 3.12%) BB#2(0x7c000000 / 0x80000000 = 96.88%)

BB#11: derived from LLVM BB %for.end81
    Predecessors according to CFG: BB#0 BB#10
	%vreg77<def> = LDRi32_r32 <fi#1>, 0; mem:LD4[FixedStack1] GPR32:%vreg77
	GID
	%CONFIG<def> = MOVTS32_core %vreg77<kill>; GPR32:%vreg77
	GIE %CONFIG<imp-use,kill>
	RTS

# End machine code for function matmac.

# *** IR Dump Before Slot index numbering ***:
# Machine code for function matmac: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=32, align=8, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=4, align=4, at location [SP]
Function Live Ins: %R0 in %vreg30, %R1 in %vreg31, %R2 in %vreg32, %R3 in %vreg33

BB#12: 
    Live Ins: %R0 %R1 %R2 %R3
	GID %CONFIG<imp-def>
	%vreg71<def> = MOVFS32_core %CONFIG<kill>; GPR32:%vreg71
	STRi32_r32 %vreg71, <fi#1>, 0; mem:ST4[FixedStack1] GPR32:%vreg71
	%vreg72<def> = MOVi32ri 65535; GPR32:%vreg72
	%vreg73<def,tied1> = MOVTi32ri %vreg72<tied0>, 65521; GPR32:%vreg73,%vreg72
	%vreg69<def> = ANDrr_r32 %vreg71<kill>, %vreg73<kill>, %STATUS<imp-def>; GPR32:%vreg69,%vreg71,%vreg73
	STRi32_r32 %vreg69, <fi#2>, 0; mem:ST4[FixedStack2] GPR32:%vreg69
	%vreg70<def,tied1> = MOVTi32ri %vreg71<kill,tied0>, 72; GPR32:%vreg70,%vreg71
	STRi32_r32 %vreg70, <fi#3>, 0; mem:ST4[FixedStack3] GPR32:%vreg70
	GIE %CONFIG<imp-use,kill>
    Successors according to CFG: BB#0(?%)

BB#0: derived from LLVM BB %entry
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#12
	%vreg33<def> = COPY %R3; GPR32:%vreg33
	%vreg32<def> = COPY %R2; GPR32:%vreg32
	%vreg31<def> = COPY %R1; GPR32:%vreg31
	%vreg30<def> = COPY %R0; GPR32:%vreg30
	%vreg34<def> = CMPri_r32 %vreg33, 1, %STATUS<imp-def>; GPR32:%vreg34,%vreg33
	BCC <BB#11>, 8, %STATUS<imp-use>
	BNONE32 <BB#1>, %STATUS<imp-use>
    Successors according to CFG: BB#1(0x50000000 / 0x80000000 = 62.50%) BB#11(0x30000000 / 0x80000000 = 37.50%)

BB#1: derived from LLVM BB %for.body3.lr.ph.preheader
    Predecessors according to CFG: BB#0
	%vreg1<def> = LSL32ri %vreg33, 2, %STATUS<imp-def,dead>; GPR32:%vreg1,%vreg33
	%vreg0<def> = ADDri_r32 %vreg31, 8, %STATUS<imp-def,dead>; GPR32:%vreg0,%vreg31
	%vreg36<def> = MOViPTR <fi#0>, 0; GPR32:%vreg36
	%vreg2<def> = ADDri_r32 %vreg36<kill>, 8, %STATUS<imp-def,dead>; GPR32:%vreg2,%vreg36
	%vreg35<def> = MOVi32ri 0; GPR32:%vreg35
    Successors according to CFG: BB#2(?%)

BB#2: derived from LLVM BB %for.body3.lr.ph
    Predecessors according to CFG: BB#1 BB#10
	%vreg3<def> = PHI %vreg32, <BB#1>, %vreg29, <BB#10>; GPR32:%vreg3,%vreg32,%vreg29
	%vreg4<def> = PHI %vreg35, <BB#1>, %vreg28, <BB#10>; GPR32:%vreg4,%vreg35,%vreg28
	%vreg74<def> = LDRi32_r32 <fi#3>, 0; mem:LD4[FixedStack3] GPR32:%vreg74
	GID %CONFIG<imp-def>
	%CONFIG<def> = MOVTS32_core %vreg74<kill>; GPR32:%vreg74
	GIE %CONFIG<imp-def>
	%vreg38<def> = IMULrr_r32 %vreg4, %vreg33, %STATUS<imp-def,dead>; GPR32:%vreg38,%vreg4,%vreg33
	%vreg39<def> = LSL32ri %vreg38<kill>, 2, %STATUS<imp-def,dead>; GPR32:%vreg39,%vreg38
	%vreg37<def> = MOVi32ri 0; GPR32:%vreg37
	%vreg5<def> = ADDrr_r32 %vreg30, %vreg39<kill>, %STATUS<imp-def,dead>; GPR32:%vreg5,%vreg30,%vreg39
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %for.body9.preheader
    Predecessors according to CFG: BB#2 BB#9
	%vreg6<def> = PHI %vreg3, <BB#2>, %vreg27, <BB#9>; GPR32:%vreg6,%vreg3,%vreg27
	%vreg7<def> = PHI %vreg0, <BB#2>, %vreg26, <BB#9>; GPR32:%vreg7,%vreg0,%vreg26
	%vreg8<def> = PHI %vreg37, <BB#2>, %vreg25, <BB#9>; GPR32:%vreg8,%vreg37,%vreg25
	%vreg41<def> = MOVi32ri 0; GPR32:%vreg41
	%vreg40<def> = MOVi32ri 0; GPR32:%vreg40
	%vreg42<def> = REG_SEQUENCE %vreg40, isub_hi, %vreg41<kill>, isub_lo; FPR64_with_isub_hi_in_FPR32:%vreg42 GPR32:%vreg40,%vreg41
	LIFETIME_START <fi#0>
	STRi64 %vreg42, <fi#0>, 24; mem:ST8[%1+24] FPR64_with_isub_hi_in_FPR32:%vreg42
	STRi64 %vreg42, <fi#0>, 16; mem:ST8[%1+16] FPR64_with_isub_hi_in_FPR32:%vreg42
	STRi64 %vreg42, <fi#0>, 8; mem:ST8[%1+8] FPR64_with_isub_hi_in_FPR32:%vreg42
	STRi64 %vreg42, <fi#0>, 0; mem:ST8[%1] FPR64_with_isub_hi_in_FPR32:%vreg42
	BNONE32 <BB#5>, %STATUS<imp-use>
    Successors according to CFG: BB#5(?%)

BB#4: derived from LLVM BB %for.cond64.preheader
    Predecessors according to CFG: BB#7
	%vreg60<def> = MOVi32ri 0; GPR32:%vreg60
	BNONE32 <BB#8>, %STATUS<imp-use>
    Successors according to CFG: BB#8(?%)

BB#5: derived from LLVM BB %for.body9
    Predecessors according to CFG: BB#3 BB#7
	%vreg9<def> = PHI %vreg7, <BB#3>, %vreg20, <BB#7>; GPR32:%vreg9,%vreg7,%vreg20
	%vreg10<def> = PHI %vreg40, <BB#3>, %vreg19, <BB#7>; GPR32:%vreg10,%vreg40,%vreg19
	%vreg44<def> = LSL32ri %vreg10, 2, %STATUS<imp-def,dead>; GPR32:%vreg44,%vreg10
	%vreg45<def> = ADDrr_r32 %vreg5, %vreg44<kill>, %STATUS<imp-def,dead>; GPR32:%vreg45,%vreg5,%vreg44
	%vreg11<def> = COPY %vreg2; GPR32:%vreg11,%vreg2
	%vreg43<def> = MOVi32ri 0; GPR32:%vreg43
	%vreg12<def> = LDRf32 %vreg45<kill>, 0; mem:Volatile LD4[%add.ptr10](tbaa=!2) FPR32:%vreg12 GPR32:%vreg45
    Successors according to CFG: BB#6(?%)

BB#6: derived from LLVM BB %for.body13
    Predecessors according to CFG: BB#5 BB#6
	%vreg13<def> = PHI %vreg11, <BB#5>, %vreg18, <BB#6>; GPR32:%vreg13,%vreg11,%vreg18
	%vreg14<def> = PHI %vreg9, <BB#5>, %vreg17, <BB#6>; GPR32:%vreg14,%vreg9,%vreg17
	%vreg15<def> = PHI %vreg43, <BB#5>, %vreg16, <BB#6>; GPR32:%vreg15,%vreg43,%vreg16
	%vreg46<def> = LDRf32 %vreg14, -8; mem:Volatile LD4[%scevgep8](tbaa=!2) FPR32:%vreg46 GPR32:%vreg14
	%vreg18<def> = ADDri_r32 %vreg13, 16, %STATUS<imp-def,dead>; GPR32:%vreg18,%vreg13
	%vreg17<def> = ADDri_r32 %vreg14, 16, %STATUS<imp-def,dead>; GPR32:%vreg17,%vreg14
	%vreg47<def> = LDRf32 %vreg14, -4; mem:Volatile LD4[%scevgep9](tbaa=!2) FPR32:%vreg47 GPR32:%vreg14
	%vreg16<def> = ADDri_r32 %vreg15, 4, %STATUS<imp-def,dead>; GPR32:%vreg16,%vreg15
	%vreg48<def> = LDRf32 %vreg14, 0; mem:Volatile LD4[%lsr.iv5](tbaa=!2) FPR32:%vreg48 GPR32:%vreg14
	%vreg49<def> = LDRf32 %vreg14, 4; mem:Volatile LD4[%scevgep7](tbaa=!2) FPR32:%vreg49 GPR32:%vreg14
	%vreg50<def> = LDRf32 %vreg13, -8; mem:LD4[%scevgep15](tbaa=!2) FPR32:%vreg50 GPR32:%vreg13
	%vreg75<def> = LDRi32_r32 <fi#2>, 0; mem:LD4[FixedStack2] GPR32:%vreg75
	GID %CONFIG<imp-def>
	%CONFIG<def> = MOVTS32_core %vreg75<kill>; GPR32:%vreg75
	GIE %CONFIG<imp-def>
	%vreg51<def,tied1> = FMADDrr_r32 %vreg50<tied0>, %vreg12, %vreg46<kill>, %STATUS<imp-def,dead>; FPR32:%vreg51,%vreg50,%vreg12,%vreg46
	STRf32 %vreg51<kill>, %vreg13, -8; mem:ST4[%scevgep15](tbaa=!2) FPR32:%vreg51 GPR32:%vreg13
	%vreg52<def> = LDRf32 %vreg13, -4; mem:LD4[%scevgep17](tbaa=!2) FPR32:%vreg52 GPR32:%vreg13
	%vreg53<def,tied1> = FMADDrr_r32 %vreg52<tied0>, %vreg12, %vreg47<kill>, %STATUS<imp-def,dead>; FPR32:%vreg53,%vreg52,%vreg12,%vreg47
	STRf32 %vreg53<kill>, %vreg13, -4; mem:ST4[%scevgep17](tbaa=!2) FPR32:%vreg53 GPR32:%vreg13
	%vreg54<def> = LDRf32 %vreg13, 0; mem:LD4[%lsr.iv1214](tbaa=!2) FPR32:%vreg54 GPR32:%vreg13
	%vreg55<def,tied1> = FMADDrr_r32 %vreg54<tied0>, %vreg12, %vreg48<kill>, %STATUS<imp-def,dead>; FPR32:%vreg55,%vreg54,%vreg12,%vreg48
	STRf32 %vreg55<kill>, %vreg13, 0; mem:ST4[%lsr.iv1214](tbaa=!2) FPR32:%vreg55 GPR32:%vreg13
	%vreg56<def> = LDRf32 %vreg13, 4; mem:LD4[%scevgep16](tbaa=!2) FPR32:%vreg56 GPR32:%vreg13
	%vreg57<def,tied1> = FMADDrr_r32 %vreg56<tied0>, %vreg12, %vreg49<kill>, %STATUS<imp-def,dead>; FPR32:%vreg57,%vreg56,%vreg12,%vreg49
	%vreg58<def> = CMPri_r32 %vreg16, 8, %STATUS<imp-def>; GPR32:%vreg58,%vreg16
	STRf32 %vreg57<kill>, %vreg13, 4; mem:ST4[%scevgep16](tbaa=!2) FPR32:%vreg57 GPR32:%vreg13
	BCC <BB#6>, 8, %STATUS<imp-use>
	BNONE32 <BB#7>, %STATUS<imp-use>
    Successors according to CFG: BB#6(0x7c000000 / 0x80000000 = 96.88%) BB#7(0x04000000 / 0x80000000 = 3.12%)

BB#7: derived from LLVM BB %for.end60
    Predecessors according to CFG: BB#6
	%vreg20<def> = ADDrr_r32 %vreg9, %vreg1, %STATUS<imp-def,dead>; GPR32:%vreg20,%vreg9,%vreg1
	%vreg19<def> = ADDri_r32 %vreg10, 1, %STATUS<imp-def,dead>; GPR32:%vreg19,%vreg10
	%vreg59<def> = CMPrr_r32 %vreg19, %vreg33, %STATUS<imp-def>; GPR32:%vreg59,%vreg19,%vreg33
	BCC <BB#4>, 0, %STATUS<imp-use>
	BNONE32 <BB#5>, %STATUS<imp-use>
    Successors according to CFG: BB#4(0x04000000 / 0x80000000 = 3.12%) BB#5(0x7c000000 / 0x80000000 = 96.88%)

BB#8: derived from LLVM BB %for.body66
    Predecessors according to CFG: BB#4 BB#8
	%vreg21<def> = PHI %vreg6, <BB#4>, %vreg24, <BB#8>; GPR32:%vreg21,%vreg6,%vreg24
	%vreg22<def> = PHI %vreg60, <BB#4>, %vreg23, <BB#8>; GPR32:%vreg22,%vreg60,%vreg23
	%vreg61<def> = MOViPTR <fi#0>, 0; GPR32:%vreg61
	%vreg62<def> = ADDrr_r32 %vreg61<kill>, %vreg22, %STATUS<imp-def,dead>; GPR32:%vreg62,%vreg61,%vreg22
	%vreg63<def> = LDRf32 %vreg62<kill>, 0; mem:LD4[%sunkaddr30](tbaa=!2) FPR32:%vreg63 GPR32:%vreg62
	%vreg24<def> = ADDri_r32 %vreg21, 4, %STATUS<imp-def,dead>; GPR32:%vreg24,%vreg21
	%vreg23<def> = ADDri_r32 %vreg22, 4, %STATUS<imp-def,dead>; GPR32:%vreg23,%vreg22
	%vreg64<def> = LDRf32 %vreg21, 0; mem:Volatile LD4[%lsr.iv24](tbaa=!2) FPR32:%vreg64 GPR32:%vreg21
	%vreg76<def> = LDRi32_r32 <fi#2>, 0; mem:LD4[FixedStack2] GPR32:%vreg76
	GID %CONFIG<imp-def>
	%CONFIG<def> = MOVTS32_core %vreg76<kill>; GPR32:%vreg76
	GIE %CONFIG<imp-def>
	%vreg65<def> = FADDrr_r32 %vreg63<kill>, %vreg64<kill>, %STATUS<imp-def,dead>; FPR32:%vreg65,%vreg63,%vreg64
	%vreg66<def> = CMPri_r32 %vreg23, 32, %STATUS<imp-def>; GPR32:%vreg66,%vreg23
	STRf32 %vreg65<kill>, %vreg21, 0; mem:Volatile ST4[%lsr.iv24](tbaa=!2) FPR32:%vreg65 GPR32:%vreg21
	BCC <BB#8>, 1, %STATUS<imp-use>
	BNONE32 <BB#9>, %STATUS<imp-use>
    Successors according to CFG: BB#9(0x04000000 / 0x80000000 = 3.12%) BB#8(0x7c000000 / 0x80000000 = 96.88%)

BB#9: derived from LLVM BB %for.end75
    Predecessors according to CFG: BB#8
	%vreg27<def> = ADDri_r32 %vreg6, 32, %STATUS<imp-def,dead>; GPR32:%vreg27,%vreg6
	%vreg26<def> = ADDri_r32 %vreg7, 32, %STATUS<imp-def,dead>; GPR32:%vreg26,%vreg7
	LIFETIME_END <fi#0>
	%vreg25<def> = ADDri_r32 %vreg8, 8, %STATUS<imp-def,dead>; GPR32:%vreg25,%vreg8
	%vreg67<def> = CMPrr_r32 %vreg25, %vreg33, %STATUS<imp-def>; GPR32:%vreg67,%vreg25,%vreg33
	BCC <BB#3>, 8, %STATUS<imp-use>
	BNONE32 <BB#10>, %STATUS<imp-use>
    Successors according to CFG: BB#3(0x7c000000 / 0x80000000 = 96.88%) BB#10(0x04000000 / 0x80000000 = 3.12%)

BB#10: derived from LLVM BB %for.end78
    Predecessors according to CFG: BB#9
	%vreg29<def> = ADDrr_r32 %vreg3, %vreg1, %STATUS<imp-def,dead>; GPR32:%vreg29,%vreg3,%vreg1
	%vreg28<def> = ADDri_r32 %vreg4, 1, %STATUS<imp-def,dead>; GPR32:%vreg28,%vreg4
	%vreg68<def> = CMPrr_r32 %vreg28, %vreg33, %STATUS<imp-def>; GPR32:%vreg68,%vreg28,%vreg33
	BCC <BB#2>, 1, %STATUS<imp-use>
	BNONE32 <BB#11>, %STATUS<imp-use>
    Successors according to CFG: BB#11(0x04000000 / 0x80000000 = 3.12%) BB#2(0x7c000000 / 0x80000000 = 96.88%)

BB#11: derived from LLVM BB %for.end81
    Predecessors according to CFG: BB#0 BB#10
	%vreg77<def> = LDRi32_r32 <fi#1>, 0; mem:LD4[FixedStack1] GPR32:%vreg77
	GID
	%CONFIG<def> = MOVTS32_core %vreg77<kill>; GPR32:%vreg77
	GIE %CONFIG<imp-use,kill>
	RTS

# End machine code for function matmac.

# Machine code for function matmac: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=32, align=8, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=4, align=4, at location [SP]
Function Live Ins: %R0 in %vreg30, %R1 in %vreg31, %R2 in %vreg32, %R3 in %vreg33

0B	BB#12: 
	    Live Ins: %R0 %R1 %R2 %R3
16B		GID %CONFIG<imp-def>
32B		%vreg71<def> = MOVFS32_core %CONFIG<kill>; GPR32:%vreg71
48B		STRi32_r32 %vreg71, <fi#1>, 0; mem:ST4[FixedStack1] GPR32:%vreg71
64B		%vreg72<def> = MOVi32ri 65535; GPR32:%vreg72
80B		%vreg73<def,tied1> = MOVTi32ri %vreg72<tied0>, 65521; GPR32:%vreg73,%vreg72
96B		%vreg69<def> = ANDrr_r32 %vreg71<kill>, %vreg73<kill>, %STATUS<imp-def>; GPR32:%vreg69,%vreg71,%vreg73
112B		STRi32_r32 %vreg69, <fi#2>, 0; mem:ST4[FixedStack2] GPR32:%vreg69
128B		%vreg70<def,tied1> = MOVTi32ri %vreg71<kill,tied0>, 72; GPR32:%vreg70,%vreg71
144B		STRi32_r32 %vreg70, <fi#3>, 0; mem:ST4[FixedStack3] GPR32:%vreg70
160B		GIE %CONFIG<imp-use,kill>
	    Successors according to CFG: BB#0(?%)

176B	BB#0: derived from LLVM BB %entry
	    Live Ins: %R0 %R1 %R2 %R3
	    Predecessors according to CFG: BB#12
192B		%vreg33<def> = COPY %R3; GPR32:%vreg33
208B		%vreg32<def> = COPY %R2; GPR32:%vreg32
224B		%vreg31<def> = COPY %R1; GPR32:%vreg31
240B		%vreg30<def> = COPY %R0; GPR32:%vreg30
256B		%vreg34<def> = CMPri_r32 %vreg33, 1, %STATUS<imp-def>; GPR32:%vreg34,%vreg33
272B		BCC <BB#11>, 8, %STATUS<imp-use>
288B		BNONE32 <BB#1>, %STATUS<imp-use>
	    Successors according to CFG: BB#1(0x50000000 / 0x80000000 = 62.50%) BB#11(0x30000000 / 0x80000000 = 37.50%)

304B	BB#1: derived from LLVM BB %for.body3.lr.ph.preheader
	    Predecessors according to CFG: BB#0
320B		%vreg1<def> = LSL32ri %vreg33, 2, %STATUS<imp-def,dead>; GPR32:%vreg1,%vreg33
336B		%vreg0<def> = ADDri_r32 %vreg31, 8, %STATUS<imp-def,dead>; GPR32:%vreg0,%vreg31
352B		%vreg36<def> = MOViPTR <fi#0>, 0; GPR32:%vreg36
368B		%vreg2<def> = ADDri_r32 %vreg36<kill>, 8, %STATUS<imp-def,dead>; GPR32:%vreg2,%vreg36
384B		%vreg35<def> = MOVi32ri 0; GPR32:%vreg35
	    Successors according to CFG: BB#2(?%)

400B	BB#2: derived from LLVM BB %for.body3.lr.ph
	    Predecessors according to CFG: BB#1 BB#10
416B		%vreg3<def> = PHI %vreg32, <BB#1>, %vreg29, <BB#10>; GPR32:%vreg3,%vreg32,%vreg29
432B		%vreg4<def> = PHI %vreg35, <BB#1>, %vreg28, <BB#10>; GPR32:%vreg4,%vreg35,%vreg28
448B		%vreg74<def> = LDRi32_r32 <fi#3>, 0; mem:LD4[FixedStack3] GPR32:%vreg74
464B		GID %CONFIG<imp-def>
480B		%CONFIG<def> = MOVTS32_core %vreg74<kill>; GPR32:%vreg74
496B		GIE %CONFIG<imp-def>
512B		%vreg38<def> = IMULrr_r32 %vreg4, %vreg33, %STATUS<imp-def,dead>; GPR32:%vreg38,%vreg4,%vreg33
528B		%vreg39<def> = LSL32ri %vreg38<kill>, 2, %STATUS<imp-def,dead>; GPR32:%vreg39,%vreg38
544B		%vreg37<def> = MOVi32ri 0; GPR32:%vreg37
560B		%vreg5<def> = ADDrr_r32 %vreg30, %vreg39<kill>, %STATUS<imp-def,dead>; GPR32:%vreg5,%vreg30,%vreg39
	    Successors according to CFG: BB#3(?%)

576B	BB#3: derived from LLVM BB %for.body9.preheader
	    Predecessors according to CFG: BB#2 BB#9
592B		%vreg6<def> = PHI %vreg3, <BB#2>, %vreg27, <BB#9>; GPR32:%vreg6,%vreg3,%vreg27
608B		%vreg7<def> = PHI %vreg0, <BB#2>, %vreg26, <BB#9>; GPR32:%vreg7,%vreg0,%vreg26
624B		%vreg8<def> = PHI %vreg37, <BB#2>, %vreg25, <BB#9>; GPR32:%vreg8,%vreg37,%vreg25
640B		%vreg41<def> = MOVi32ri 0; GPR32:%vreg41
656B		%vreg40<def> = MOVi32ri 0; GPR32:%vreg40
672B		%vreg42<def> = REG_SEQUENCE %vreg40, isub_hi, %vreg41<kill>, isub_lo; FPR64_with_isub_hi_in_FPR32:%vreg42 GPR32:%vreg40,%vreg41
688B		LIFETIME_START <fi#0>
704B		STRi64 %vreg42, <fi#0>, 24; mem:ST8[%1+24] FPR64_with_isub_hi_in_FPR32:%vreg42
720B		STRi64 %vreg42, <fi#0>, 16; mem:ST8[%1+16] FPR64_with_isub_hi_in_FPR32:%vreg42
736B		STRi64 %vreg42, <fi#0>, 8; mem:ST8[%1+8] FPR64_with_isub_hi_in_FPR32:%vreg42
752B		STRi64 %vreg42, <fi#0>, 0; mem:ST8[%1] FPR64_with_isub_hi_in_FPR32:%vreg42
768B		BNONE32 <BB#5>, %STATUS<imp-use>
	    Successors according to CFG: BB#5(?%)

784B	BB#4: derived from LLVM BB %for.cond64.preheader
	    Predecessors according to CFG: BB#7
800B		%vreg60<def> = MOVi32ri 0; GPR32:%vreg60
816B		BNONE32 <BB#8>, %STATUS<imp-use>
	    Successors according to CFG: BB#8(?%)

832B	BB#5: derived from LLVM BB %for.body9
	    Predecessors according to CFG: BB#3 BB#7
848B		%vreg9<def> = PHI %vreg7, <BB#3>, %vreg20, <BB#7>; GPR32:%vreg9,%vreg7,%vreg20
864B		%vreg10<def> = PHI %vreg40, <BB#3>, %vreg19, <BB#7>; GPR32:%vreg10,%vreg40,%vreg19
880B		%vreg44<def> = LSL32ri %vreg10, 2, %STATUS<imp-def,dead>; GPR32:%vreg44,%vreg10
896B		%vreg45<def> = ADDrr_r32 %vreg5, %vreg44<kill>, %STATUS<imp-def,dead>; GPR32:%vreg45,%vreg5,%vreg44
912B		%vreg11<def> = COPY %vreg2; GPR32:%vreg11,%vreg2
928B		%vreg43<def> = MOVi32ri 0; GPR32:%vreg43
944B		%vreg12<def> = LDRf32 %vreg45<kill>, 0; mem:Volatile LD4[%add.ptr10](tbaa=!2) FPR32:%vreg12 GPR32:%vreg45
	    Successors according to CFG: BB#6(?%)

960B	BB#6: derived from LLVM BB %for.body13
	    Predecessors according to CFG: BB#5 BB#6
976B		%vreg13<def> = PHI %vreg11, <BB#5>, %vreg18, <BB#6>; GPR32:%vreg13,%vreg11,%vreg18
992B		%vreg14<def> = PHI %vreg9, <BB#5>, %vreg17, <BB#6>; GPR32:%vreg14,%vreg9,%vreg17
1008B		%vreg15<def> = PHI %vreg43, <BB#5>, %vreg16, <BB#6>; GPR32:%vreg15,%vreg43,%vreg16
1024B		%vreg46<def> = LDRf32 %vreg14, -8; mem:Volatile LD4[%scevgep8](tbaa=!2) FPR32:%vreg46 GPR32:%vreg14
1040B		%vreg18<def> = ADDri_r32 %vreg13, 16, %STATUS<imp-def,dead>; GPR32:%vreg18,%vreg13
1056B		%vreg17<def> = ADDri_r32 %vreg14, 16, %STATUS<imp-def,dead>; GPR32:%vreg17,%vreg14
1072B		%vreg47<def> = LDRf32 %vreg14, -4; mem:Volatile LD4[%scevgep9](tbaa=!2) FPR32:%vreg47 GPR32:%vreg14
1088B		%vreg16<def> = ADDri_r32 %vreg15, 4, %STATUS<imp-def,dead>; GPR32:%vreg16,%vreg15
1104B		%vreg48<def> = LDRf32 %vreg14, 0; mem:Volatile LD4[%lsr.iv5](tbaa=!2) FPR32:%vreg48 GPR32:%vreg14
1120B		%vreg49<def> = LDRf32 %vreg14, 4; mem:Volatile LD4[%scevgep7](tbaa=!2) FPR32:%vreg49 GPR32:%vreg14
1136B		%vreg50<def> = LDRf32 %vreg13, -8; mem:LD4[%scevgep15](tbaa=!2) FPR32:%vreg50 GPR32:%vreg13
1152B		%vreg75<def> = LDRi32_r32 <fi#2>, 0; mem:LD4[FixedStack2] GPR32:%vreg75
1168B		GID %CONFIG<imp-def>
1184B		%CONFIG<def> = MOVTS32_core %vreg75<kill>; GPR32:%vreg75
1200B		GIE %CONFIG<imp-def>
1216B		%vreg51<def,tied1> = FMADDrr_r32 %vreg50<tied0>, %vreg12, %vreg46<kill>, %STATUS<imp-def,dead>; FPR32:%vreg51,%vreg50,%vreg12,%vreg46
1232B		STRf32 %vreg51<kill>, %vreg13, -8; mem:ST4[%scevgep15](tbaa=!2) FPR32:%vreg51 GPR32:%vreg13
1248B		%vreg52<def> = LDRf32 %vreg13, -4; mem:LD4[%scevgep17](tbaa=!2) FPR32:%vreg52 GPR32:%vreg13
1264B		%vreg53<def,tied1> = FMADDrr_r32 %vreg52<tied0>, %vreg12, %vreg47<kill>, %STATUS<imp-def,dead>; FPR32:%vreg53,%vreg52,%vreg12,%vreg47
1280B		STRf32 %vreg53<kill>, %vreg13, -4; mem:ST4[%scevgep17](tbaa=!2) FPR32:%vreg53 GPR32:%vreg13
1296B		%vreg54<def> = LDRf32 %vreg13, 0; mem:LD4[%lsr.iv1214](tbaa=!2) FPR32:%vreg54 GPR32:%vreg13
1312B		%vreg55<def,tied1> = FMADDrr_r32 %vreg54<tied0>, %vreg12, %vreg48<kill>, %STATUS<imp-def,dead>; FPR32:%vreg55,%vreg54,%vreg12,%vreg48
1328B		STRf32 %vreg55<kill>, %vreg13, 0; mem:ST4[%lsr.iv1214](tbaa=!2) FPR32:%vreg55 GPR32:%vreg13
1344B		%vreg56<def> = LDRf32 %vreg13, 4; mem:LD4[%scevgep16](tbaa=!2) FPR32:%vreg56 GPR32:%vreg13
1360B		%vreg57<def,tied1> = FMADDrr_r32 %vreg56<tied0>, %vreg12, %vreg49<kill>, %STATUS<imp-def,dead>; FPR32:%vreg57,%vreg56,%vreg12,%vreg49
1376B		%vreg58<def> = CMPri_r32 %vreg16, 8, %STATUS<imp-def>; GPR32:%vreg58,%vreg16
1392B		STRf32 %vreg57<kill>, %vreg13, 4; mem:ST4[%scevgep16](tbaa=!2) FPR32:%vreg57 GPR32:%vreg13
1408B		BCC <BB#6>, 8, %STATUS<imp-use>
1424B		BNONE32 <BB#7>, %STATUS<imp-use>
	    Successors according to CFG: BB#6(0x7c000000 / 0x80000000 = 96.88%) BB#7(0x04000000 / 0x80000000 = 3.12%)

1440B	BB#7: derived from LLVM BB %for.end60
	    Predecessors according to CFG: BB#6
1456B		%vreg20<def> = ADDrr_r32 %vreg9, %vreg1, %STATUS<imp-def,dead>; GPR32:%vreg20,%vreg9,%vreg1
1472B		%vreg19<def> = ADDri_r32 %vreg10, 1, %STATUS<imp-def,dead>; GPR32:%vreg19,%vreg10
1488B		%vreg59<def> = CMPrr_r32 %vreg19, %vreg33, %STATUS<imp-def>; GPR32:%vreg59,%vreg19,%vreg33
1504B		BCC <BB#4>, 0, %STATUS<imp-use>
1520B		BNONE32 <BB#5>, %STATUS<imp-use>
	    Successors according to CFG: BB#4(0x04000000 / 0x80000000 = 3.12%) BB#5(0x7c000000 / 0x80000000 = 96.88%)

1536B	BB#8: derived from LLVM BB %for.body66
	    Predecessors according to CFG: BB#4 BB#8
1552B		%vreg21<def> = PHI %vreg6, <BB#4>, %vreg24, <BB#8>; GPR32:%vreg21,%vreg6,%vreg24
1568B		%vreg22<def> = PHI %vreg60, <BB#4>, %vreg23, <BB#8>; GPR32:%vreg22,%vreg60,%vreg23
1584B		%vreg61<def> = MOViPTR <fi#0>, 0; GPR32:%vreg61
1600B		%vreg62<def> = ADDrr_r32 %vreg61<kill>, %vreg22, %STATUS<imp-def,dead>; GPR32:%vreg62,%vreg61,%vreg22
1616B		%vreg63<def> = LDRf32 %vreg62<kill>, 0; mem:LD4[%sunkaddr30](tbaa=!2) FPR32:%vreg63 GPR32:%vreg62
1632B		%vreg24<def> = ADDri_r32 %vreg21, 4, %STATUS<imp-def,dead>; GPR32:%vreg24,%vreg21
1648B		%vreg23<def> = ADDri_r32 %vreg22, 4, %STATUS<imp-def,dead>; GPR32:%vreg23,%vreg22
1664B		%vreg64<def> = LDRf32 %vreg21, 0; mem:Volatile LD4[%lsr.iv24](tbaa=!2) FPR32:%vreg64 GPR32:%vreg21
1680B		%vreg76<def> = LDRi32_r32 <fi#2>, 0; mem:LD4[FixedStack2] GPR32:%vreg76
1696B		GID %CONFIG<imp-def>
1712B		%CONFIG<def> = MOVTS32_core %vreg76<kill>; GPR32:%vreg76
1728B		GIE %CONFIG<imp-def>
1744B		%vreg65<def> = FADDrr_r32 %vreg63<kill>, %vreg64<kill>, %STATUS<imp-def,dead>; FPR32:%vreg65,%vreg63,%vreg64
1760B		%vreg66<def> = CMPri_r32 %vreg23, 32, %STATUS<imp-def>; GPR32:%vreg66,%vreg23
1776B		STRf32 %vreg65<kill>, %vreg21, 0; mem:Volatile ST4[%lsr.iv24](tbaa=!2) FPR32:%vreg65 GPR32:%vreg21
1792B		BCC <BB#8>, 1, %STATUS<imp-use>
1808B		BNONE32 <BB#9>, %STATUS<imp-use>
	    Successors according to CFG: BB#9(0x04000000 / 0x80000000 = 3.12%) BB#8(0x7c000000 / 0x80000000 = 96.88%)

1824B	BB#9: derived from LLVM BB %for.end75
	    Predecessors according to CFG: BB#8
1840B		%vreg27<def> = ADDri_r32 %vreg6, 32, %STATUS<imp-def,dead>; GPR32:%vreg27,%vreg6
1856B		%vreg26<def> = ADDri_r32 %vreg7, 32, %STATUS<imp-def,dead>; GPR32:%vreg26,%vreg7
1872B		LIFETIME_END <fi#0>
1888B		%vreg25<def> = ADDri_r32 %vreg8, 8, %STATUS<imp-def,dead>; GPR32:%vreg25,%vreg8
1904B		%vreg67<def> = CMPrr_r32 %vreg25, %vreg33, %STATUS<imp-def>; GPR32:%vreg67,%vreg25,%vreg33
1920B		BCC <BB#3>, 8, %STATUS<imp-use>
1936B		BNONE32 <BB#10>, %STATUS<imp-use>
	    Successors according to CFG: BB#3(0x7c000000 / 0x80000000 = 96.88%) BB#10(0x04000000 / 0x80000000 = 3.12%)

1952B	BB#10: derived from LLVM BB %for.end78
	    Predecessors according to CFG: BB#9
1968B		%vreg29<def> = ADDrr_r32 %vreg3, %vreg1, %STATUS<imp-def,dead>; GPR32:%vreg29,%vreg3,%vreg1
1984B		%vreg28<def> = ADDri_r32 %vreg4, 1, %STATUS<imp-def,dead>; GPR32:%vreg28,%vreg4
2000B		%vreg68<def> = CMPrr_r32 %vreg28, %vreg33, %STATUS<imp-def>; GPR32:%vreg68,%vreg28,%vreg33
2016B		BCC <BB#2>, 1, %STATUS<imp-use>
2032B		BNONE32 <BB#11>, %STATUS<imp-use>
	    Successors according to CFG: BB#11(0x04000000 / 0x80000000 = 3.12%) BB#2(0x7c000000 / 0x80000000 = 96.88%)

2048B	BB#11: derived from LLVM BB %for.end81
	    Predecessors according to CFG: BB#0 BB#10
2064B		%vreg77<def> = LDRi32_r32 <fi#1>, 0; mem:LD4[FixedStack1] GPR32:%vreg77
2080B		GID
2096B		%CONFIG<def> = MOVTS32_core %vreg77<kill>; GPR32:%vreg77
2112B		GIE %CONFIG<imp-use,kill>
2128B		RTS

# End machine code for function matmac.

# *** IR Dump After Slot index numbering ***:
# Machine code for function matmac: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=32, align=8, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=4, align=4, at location [SP]
Function Live Ins: %R0 in %vreg30, %R1 in %vreg31, %R2 in %vreg32, %R3 in %vreg33

0B	BB#12: 
	    Live Ins: %R0 %R1 %R2 %R3
16B		GID %CONFIG<imp-def>
32B		%vreg71<def> = MOVFS32_core %CONFIG<kill>; GPR32:%vreg71
48B		STRi32_r32 %vreg71, <fi#1>, 0; mem:ST4[FixedStack1] GPR32:%vreg71
64B		%vreg72<def> = MOVi32ri 65535; GPR32:%vreg72
80B		%vreg73<def,tied1> = MOVTi32ri %vreg72<tied0>, 65521; GPR32:%vreg73,%vreg72
96B		%vreg69<def> = ANDrr_r32 %vreg71<kill>, %vreg73<kill>, %STATUS<imp-def>; GPR32:%vreg69,%vreg71,%vreg73
112B		STRi32_r32 %vreg69, <fi#2>, 0; mem:ST4[FixedStack2] GPR32:%vreg69
128B		%vreg70<def,tied1> = MOVTi32ri %vreg71<kill,tied0>, 72; GPR32:%vreg70,%vreg71
144B		STRi32_r32 %vreg70, <fi#3>, 0; mem:ST4[FixedStack3] GPR32:%vreg70
160B		GIE %CONFIG<imp-use,kill>
	    Successors according to CFG: BB#0(?%)

176B	BB#0: derived from LLVM BB %entry
	    Live Ins: %R0 %R1 %R2 %R3
	    Predecessors according to CFG: BB#12
192B		%vreg33<def> = COPY %R3; GPR32:%vreg33
208B		%vreg32<def> = COPY %R2; GPR32:%vreg32
224B		%vreg31<def> = COPY %R1; GPR32:%vreg31
240B		%vreg30<def> = COPY %R0; GPR32:%vreg30
256B		%vreg34<def> = CMPri_r32 %vreg33, 1, %STATUS<imp-def>; GPR32:%vreg34,%vreg33
272B		BCC <BB#11>, 8, %STATUS<imp-use>
288B		BNONE32 <BB#1>, %STATUS<imp-use>
	    Successors according to CFG: BB#1(0x50000000 / 0x80000000 = 62.50%) BB#11(0x30000000 / 0x80000000 = 37.50%)

304B	BB#1: derived from LLVM BB %for.body3.lr.ph.preheader
	    Predecessors according to CFG: BB#0
320B		%vreg1<def> = LSL32ri %vreg33, 2, %STATUS<imp-def,dead>; GPR32:%vreg1,%vreg33
336B		%vreg0<def> = ADDri_r32 %vreg31, 8, %STATUS<imp-def,dead>; GPR32:%vreg0,%vreg31
352B		%vreg36<def> = MOViPTR <fi#0>, 0; GPR32:%vreg36
368B		%vreg2<def> = ADDri_r32 %vreg36<kill>, 8, %STATUS<imp-def,dead>; GPR32:%vreg2,%vreg36
384B		%vreg35<def> = MOVi32ri 0; GPR32:%vreg35
	    Successors according to CFG: BB#2(?%)

400B	BB#2: derived from LLVM BB %for.body3.lr.ph
	    Predecessors according to CFG: BB#1 BB#10
416B		%vreg3<def> = PHI %vreg32, <BB#1>, %vreg29, <BB#10>; GPR32:%vreg3,%vreg32,%vreg29
432B		%vreg4<def> = PHI %vreg35, <BB#1>, %vreg28, <BB#10>; GPR32:%vreg4,%vreg35,%vreg28
448B		%vreg74<def> = LDRi32_r32 <fi#3>, 0; mem:LD4[FixedStack3] GPR32:%vreg74
464B		GID %CONFIG<imp-def>
480B		%CONFIG<def> = MOVTS32_core %vreg74<kill>; GPR32:%vreg74
496B		GIE %CONFIG<imp-def>
512B		%vreg38<def> = IMULrr_r32 %vreg4, %vreg33, %STATUS<imp-def,dead>; GPR32:%vreg38,%vreg4,%vreg33
528B		%vreg39<def> = LSL32ri %vreg38<kill>, 2, %STATUS<imp-def,dead>; GPR32:%vreg39,%vreg38
544B		%vreg37<def> = MOVi32ri 0; GPR32:%vreg37
560B		%vreg5<def> = ADDrr_r32 %vreg30, %vreg39<kill>, %STATUS<imp-def,dead>; GPR32:%vreg5,%vreg30,%vreg39
	    Successors according to CFG: BB#3(?%)

576B	BB#3: derived from LLVM BB %for.body9.preheader
	    Predecessors according to CFG: BB#2 BB#9
592B		%vreg6<def> = PHI %vreg3, <BB#2>, %vreg27, <BB#9>; GPR32:%vreg6,%vreg3,%vreg27
608B		%vreg7<def> = PHI %vreg0, <BB#2>, %vreg26, <BB#9>; GPR32:%vreg7,%vreg0,%vreg26
624B		%vreg8<def> = PHI %vreg37, <BB#2>, %vreg25, <BB#9>; GPR32:%vreg8,%vreg37,%vreg25
640B		%vreg41<def> = MOVi32ri 0; GPR32:%vreg41
656B		%vreg40<def> = MOVi32ri 0; GPR32:%vreg40
672B		%vreg42<def> = REG_SEQUENCE %vreg40, isub_hi, %vreg41<kill>, isub_lo; FPR64_with_isub_hi_in_FPR32:%vreg42 GPR32:%vreg40,%vreg41
688B		LIFETIME_START <fi#0>
704B		STRi64 %vreg42, <fi#0>, 24; mem:ST8[%1+24] FPR64_with_isub_hi_in_FPR32:%vreg42
720B		STRi64 %vreg42, <fi#0>, 16; mem:ST8[%1+16] FPR64_with_isub_hi_in_FPR32:%vreg42
736B		STRi64 %vreg42, <fi#0>, 8; mem:ST8[%1+8] FPR64_with_isub_hi_in_FPR32:%vreg42
752B		STRi64 %vreg42, <fi#0>, 0; mem:ST8[%1] FPR64_with_isub_hi_in_FPR32:%vreg42
768B		BNONE32 <BB#5>, %STATUS<imp-use>
	    Successors according to CFG: BB#5(?%)

784B	BB#4: derived from LLVM BB %for.cond64.preheader
	    Predecessors according to CFG: BB#7
800B		%vreg60<def> = MOVi32ri 0; GPR32:%vreg60
816B		BNONE32 <BB#8>, %STATUS<imp-use>
	    Successors according to CFG: BB#8(?%)

832B	BB#5: derived from LLVM BB %for.body9
	    Predecessors according to CFG: BB#3 BB#7
848B		%vreg9<def> = PHI %vreg7, <BB#3>, %vreg20, <BB#7>; GPR32:%vreg9,%vreg7,%vreg20
864B		%vreg10<def> = PHI %vreg40, <BB#3>, %vreg19, <BB#7>; GPR32:%vreg10,%vreg40,%vreg19
880B		%vreg44<def> = LSL32ri %vreg10, 2, %STATUS<imp-def,dead>; GPR32:%vreg44,%vreg10
896B		%vreg45<def> = ADDrr_r32 %vreg5, %vreg44<kill>, %STATUS<imp-def,dead>; GPR32:%vreg45,%vreg5,%vreg44
912B		%vreg11<def> = COPY %vreg2; GPR32:%vreg11,%vreg2
928B		%vreg43<def> = MOVi32ri 0; GPR32:%vreg43
944B		%vreg12<def> = LDRf32 %vreg45<kill>, 0; mem:Volatile LD4[%add.ptr10](tbaa=!2) FPR32:%vreg12 GPR32:%vreg45
	    Successors according to CFG: BB#6(?%)

960B	BB#6: derived from LLVM BB %for.body13
	    Predecessors according to CFG: BB#5 BB#6
976B		%vreg13<def> = PHI %vreg11, <BB#5>, %vreg18, <BB#6>; GPR32:%vreg13,%vreg11,%vreg18
992B		%vreg14<def> = PHI %vreg9, <BB#5>, %vreg17, <BB#6>; GPR32:%vreg14,%vreg9,%vreg17
1008B		%vreg15<def> = PHI %vreg43, <BB#5>, %vreg16, <BB#6>; GPR32:%vreg15,%vreg43,%vreg16
1024B		%vreg46<def> = LDRf32 %vreg14, -8; mem:Volatile LD4[%scevgep8](tbaa=!2) FPR32:%vreg46 GPR32:%vreg14
1040B		%vreg18<def> = ADDri_r32 %vreg13, 16, %STATUS<imp-def,dead>; GPR32:%vreg18,%vreg13
1056B		%vreg17<def> = ADDri_r32 %vreg14, 16, %STATUS<imp-def,dead>; GPR32:%vreg17,%vreg14
1072B		%vreg47<def> = LDRf32 %vreg14, -4; mem:Volatile LD4[%scevgep9](tbaa=!2) FPR32:%vreg47 GPR32:%vreg14
1088B		%vreg16<def> = ADDri_r32 %vreg15, 4, %STATUS<imp-def,dead>; GPR32:%vreg16,%vreg15
1104B		%vreg48<def> = LDRf32 %vreg14, 0; mem:Volatile LD4[%lsr.iv5](tbaa=!2) FPR32:%vreg48 GPR32:%vreg14
1120B		%vreg49<def> = LDRf32 %vreg14, 4; mem:Volatile LD4[%scevgep7](tbaa=!2) FPR32:%vreg49 GPR32:%vreg14
1136B		%vreg50<def> = LDRf32 %vreg13, -8; mem:LD4[%scevgep15](tbaa=!2) FPR32:%vreg50 GPR32:%vreg13
1152B		%vreg75<def> = LDRi32_r32 <fi#2>, 0; mem:LD4[FixedStack2] GPR32:%vreg75
1168B		GID %CONFIG<imp-def>
1184B		%CONFIG<def> = MOVTS32_core %vreg75<kill>; GPR32:%vreg75
1200B		GIE %CONFIG<imp-def>
1216B		%vreg51<def,tied1> = FMADDrr_r32 %vreg50<tied0>, %vreg12, %vreg46<kill>, %STATUS<imp-def,dead>; FPR32:%vreg51,%vreg50,%vreg12,%vreg46
1232B		STRf32 %vreg51<kill>, %vreg13, -8; mem:ST4[%scevgep15](tbaa=!2) FPR32:%vreg51 GPR32:%vreg13
1248B		%vreg52<def> = LDRf32 %vreg13, -4; mem:LD4[%scevgep17](tbaa=!2) FPR32:%vreg52 GPR32:%vreg13
1264B		%vreg53<def,tied1> = FMADDrr_r32 %vreg52<tied0>, %vreg12, %vreg47<kill>, %STATUS<imp-def,dead>; FPR32:%vreg53,%vreg52,%vreg12,%vreg47
1280B		STRf32 %vreg53<kill>, %vreg13, -4; mem:ST4[%scevgep17](tbaa=!2) FPR32:%vreg53 GPR32:%vreg13
1296B		%vreg54<def> = LDRf32 %vreg13, 0; mem:LD4[%lsr.iv1214](tbaa=!2) FPR32:%vreg54 GPR32:%vreg13
1312B		%vreg55<def,tied1> = FMADDrr_r32 %vreg54<tied0>, %vreg12, %vreg48<kill>, %STATUS<imp-def,dead>; FPR32:%vreg55,%vreg54,%vreg12,%vreg48
1328B		STRf32 %vreg55<kill>, %vreg13, 0; mem:ST4[%lsr.iv1214](tbaa=!2) FPR32:%vreg55 GPR32:%vreg13
1344B		%vreg56<def> = LDRf32 %vreg13, 4; mem:LD4[%scevgep16](tbaa=!2) FPR32:%vreg56 GPR32:%vreg13
1360B		%vreg57<def,tied1> = FMADDrr_r32 %vreg56<tied0>, %vreg12, %vreg49<kill>, %STATUS<imp-def,dead>; FPR32:%vreg57,%vreg56,%vreg12,%vreg49
1376B		%vreg58<def> = CMPri_r32 %vreg16, 8, %STATUS<imp-def>; GPR32:%vreg58,%vreg16
1392B		STRf32 %vreg57<kill>, %vreg13, 4; mem:ST4[%scevgep16](tbaa=!2) FPR32:%vreg57 GPR32:%vreg13
1408B		BCC <BB#6>, 8, %STATUS<imp-use>
1424B		BNONE32 <BB#7>, %STATUS<imp-use>
	    Successors according to CFG: BB#6(0x7c000000 / 0x80000000 = 96.88%) BB#7(0x04000000 / 0x80000000 = 3.12%)

1440B	BB#7: derived from LLVM BB %for.end60
	    Predecessors according to CFG: BB#6
1456B		%vreg20<def> = ADDrr_r32 %vreg9, %vreg1, %STATUS<imp-def,dead>; GPR32:%vreg20,%vreg9,%vreg1
1472B		%vreg19<def> = ADDri_r32 %vreg10, 1, %STATUS<imp-def,dead>; GPR32:%vreg19,%vreg10
1488B		%vreg59<def> = CMPrr_r32 %vreg19, %vreg33, %STATUS<imp-def>; GPR32:%vreg59,%vreg19,%vreg33
1504B		BCC <BB#4>, 0, %STATUS<imp-use>
1520B		BNONE32 <BB#5>, %STATUS<imp-use>
	    Successors according to CFG: BB#4(0x04000000 / 0x80000000 = 3.12%) BB#5(0x7c000000 / 0x80000000 = 96.88%)

1536B	BB#8: derived from LLVM BB %for.body66
	    Predecessors according to CFG: BB#4 BB#8
1552B		%vreg21<def> = PHI %vreg6, <BB#4>, %vreg24, <BB#8>; GPR32:%vreg21,%vreg6,%vreg24
1568B		%vreg22<def> = PHI %vreg60, <BB#4>, %vreg23, <BB#8>; GPR32:%vreg22,%vreg60,%vreg23
1584B		%vreg61<def> = MOViPTR <fi#0>, 0; GPR32:%vreg61
1600B		%vreg62<def> = ADDrr_r32 %vreg61<kill>, %vreg22, %STATUS<imp-def,dead>; GPR32:%vreg62,%vreg61,%vreg22
1616B		%vreg63<def> = LDRf32 %vreg62<kill>, 0; mem:LD4[%sunkaddr30](tbaa=!2) FPR32:%vreg63 GPR32:%vreg62
1632B		%vreg24<def> = ADDri_r32 %vreg21, 4, %STATUS<imp-def,dead>; GPR32:%vreg24,%vreg21
1648B		%vreg23<def> = ADDri_r32 %vreg22, 4, %STATUS<imp-def,dead>; GPR32:%vreg23,%vreg22
1664B		%vreg64<def> = LDRf32 %vreg21, 0; mem:Volatile LD4[%lsr.iv24](tbaa=!2) FPR32:%vreg64 GPR32:%vreg21
1680B		%vreg76<def> = LDRi32_r32 <fi#2>, 0; mem:LD4[FixedStack2] GPR32:%vreg76
1696B		GID %CONFIG<imp-def>
1712B		%CONFIG<def> = MOVTS32_core %vreg76<kill>; GPR32:%vreg76
1728B		GIE %CONFIG<imp-def>
1744B		%vreg65<def> = FADDrr_r32 %vreg63<kill>, %vreg64<kill>, %STATUS<imp-def,dead>; FPR32:%vreg65,%vreg63,%vreg64
1760B		%vreg66<def> = CMPri_r32 %vreg23, 32, %STATUS<imp-def>; GPR32:%vreg66,%vreg23
1776B		STRf32 %vreg65<kill>, %vreg21, 0; mem:Volatile ST4[%lsr.iv24](tbaa=!2) FPR32:%vreg65 GPR32:%vreg21
1792B		BCC <BB#8>, 1, %STATUS<imp-use>
1808B		BNONE32 <BB#9>, %STATUS<imp-use>
	    Successors according to CFG: BB#9(0x04000000 / 0x80000000 = 3.12%) BB#8(0x7c000000 / 0x80000000 = 96.88%)

1824B	BB#9: derived from LLVM BB %for.end75
	    Predecessors according to CFG: BB#8
1840B		%vreg27<def> = ADDri_r32 %vreg6, 32, %STATUS<imp-def,dead>; GPR32:%vreg27,%vreg6
1856B		%vreg26<def> = ADDri_r32 %vreg7, 32, %STATUS<imp-def,dead>; GPR32:%vreg26,%vreg7
1872B		LIFETIME_END <fi#0>
1888B		%vreg25<def> = ADDri_r32 %vreg8, 8, %STATUS<imp-def,dead>; GPR32:%vreg25,%vreg8
1904B		%vreg67<def> = CMPrr_r32 %vreg25, %vreg33, %STATUS<imp-def>; GPR32:%vreg67,%vreg25,%vreg33
1920B		BCC <BB#3>, 8, %STATUS<imp-use>
1936B		BNONE32 <BB#10>, %STATUS<imp-use>
	    Successors according to CFG: BB#3(0x7c000000 / 0x80000000 = 96.88%) BB#10(0x04000000 / 0x80000000 = 3.12%)

1952B	BB#10: derived from LLVM BB %for.end78
	    Predecessors according to CFG: BB#9
1968B		%vreg29<def> = ADDrr_r32 %vreg3, %vreg1, %STATUS<imp-def,dead>; GPR32:%vreg29,%vreg3,%vreg1
1984B		%vreg28<def> = ADDri_r32 %vreg4, 1, %STATUS<imp-def,dead>; GPR32:%vreg28,%vreg4
2000B		%vreg68<def> = CMPrr_r32 %vreg28, %vreg33, %STATUS<imp-def>; GPR32:%vreg68,%vreg28,%vreg33
2016B		BCC <BB#2>, 1, %STATUS<imp-use>
2032B		BNONE32 <BB#11>, %STATUS<imp-use>
	    Successors according to CFG: BB#11(0x04000000 / 0x80000000 = 3.12%) BB#2(0x7c000000 / 0x80000000 = 96.88%)

2048B	BB#11: derived from LLVM BB %for.end81
	    Predecessors according to CFG: BB#0 BB#10
2064B		%vreg77<def> = LDRi32_r32 <fi#1>, 0; mem:LD4[FixedStack1] GPR32:%vreg77
2080B		GID
2096B		%CONFIG<def> = MOVTS32_core %vreg77<kill>; GPR32:%vreg77
2112B		GIE %CONFIG<imp-use,kill>
2128B		RTS

# End machine code for function matmac.

# *** IR Dump Before Merge disjoint stack slots ***:
# Machine code for function matmac: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=32, align=8, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=4, align=4, at location [SP]
Function Live Ins: %R0 in %vreg30, %R1 in %vreg31, %R2 in %vreg32, %R3 in %vreg33

0B	BB#12: 
	    Live Ins: %R0 %R1 %R2 %R3
16B		GID %CONFIG<imp-def>
32B		%vreg71<def> = MOVFS32_core %CONFIG<kill>; GPR32:%vreg71
48B		STRi32_r32 %vreg71, <fi#1>, 0; mem:ST4[FixedStack1] GPR32:%vreg71
64B		%vreg72<def> = MOVi32ri 65535; GPR32:%vreg72
80B		%vreg73<def,tied1> = MOVTi32ri %vreg72<tied0>, 65521; GPR32:%vreg73,%vreg72
96B		%vreg69<def> = ANDrr_r32 %vreg71<kill>, %vreg73<kill>, %STATUS<imp-def>; GPR32:%vreg69,%vreg71,%vreg73
112B		STRi32_r32 %vreg69, <fi#2>, 0; mem:ST4[FixedStack2] GPR32:%vreg69
128B		%vreg70<def,tied1> = MOVTi32ri %vreg71<kill,tied0>, 72; GPR32:%vreg70,%vreg71
144B		STRi32_r32 %vreg70, <fi#3>, 0; mem:ST4[FixedStack3] GPR32:%vreg70
160B		GIE %CONFIG<imp-use,kill>
	    Successors according to CFG: BB#0(?%)

176B	BB#0: derived from LLVM BB %entry
	    Live Ins: %R0 %R1 %R2 %R3
	    Predecessors according to CFG: BB#12
192B		%vreg33<def> = COPY %R3; GPR32:%vreg33
208B		%vreg32<def> = COPY %R2; GPR32:%vreg32
224B		%vreg31<def> = COPY %R1; GPR32:%vreg31
240B		%vreg30<def> = COPY %R0; GPR32:%vreg30
256B		%vreg34<def> = CMPri_r32 %vreg33, 1, %STATUS<imp-def>; GPR32:%vreg34,%vreg33
272B		BCC <BB#11>, 8, %STATUS<imp-use>
288B		BNONE32 <BB#1>, %STATUS<imp-use>
	    Successors according to CFG: BB#1(0x50000000 / 0x80000000 = 62.50%) BB#11(0x30000000 / 0x80000000 = 37.50%)

304B	BB#1: derived from LLVM BB %for.body3.lr.ph.preheader
	    Predecessors according to CFG: BB#0
320B		%vreg1<def> = LSL32ri %vreg33, 2, %STATUS<imp-def,dead>; GPR32:%vreg1,%vreg33
336B		%vreg0<def> = ADDri_r32 %vreg31, 8, %STATUS<imp-def,dead>; GPR32:%vreg0,%vreg31
352B		%vreg36<def> = MOViPTR <fi#0>, 0; GPR32:%vreg36
368B		%vreg2<def> = ADDri_r32 %vreg36<kill>, 8, %STATUS<imp-def,dead>; GPR32:%vreg2,%vreg36
384B		%vreg35<def> = MOVi32ri 0; GPR32:%vreg35
	    Successors according to CFG: BB#2(?%)

400B	BB#2: derived from LLVM BB %for.body3.lr.ph
	    Predecessors according to CFG: BB#1 BB#10
416B		%vreg3<def> = PHI %vreg32, <BB#1>, %vreg29, <BB#10>; GPR32:%vreg3,%vreg32,%vreg29
432B		%vreg4<def> = PHI %vreg35, <BB#1>, %vreg28, <BB#10>; GPR32:%vreg4,%vreg35,%vreg28
448B		%vreg74<def> = LDRi32_r32 <fi#3>, 0; mem:LD4[FixedStack3] GPR32:%vreg74
464B		GID %CONFIG<imp-def>
480B		%CONFIG<def> = MOVTS32_core %vreg74<kill>; GPR32:%vreg74
496B		GIE %CONFIG<imp-def>
512B		%vreg38<def> = IMULrr_r32 %vreg4, %vreg33, %STATUS<imp-def,dead>; GPR32:%vreg38,%vreg4,%vreg33
528B		%vreg39<def> = LSL32ri %vreg38<kill>, 2, %STATUS<imp-def,dead>; GPR32:%vreg39,%vreg38
544B		%vreg37<def> = MOVi32ri 0; GPR32:%vreg37
560B		%vreg5<def> = ADDrr_r32 %vreg30, %vreg39<kill>, %STATUS<imp-def,dead>; GPR32:%vreg5,%vreg30,%vreg39
	    Successors according to CFG: BB#3(?%)

576B	BB#3: derived from LLVM BB %for.body9.preheader
	    Predecessors according to CFG: BB#2 BB#9
592B		%vreg6<def> = PHI %vreg3, <BB#2>, %vreg27, <BB#9>; GPR32:%vreg6,%vreg3,%vreg27
608B		%vreg7<def> = PHI %vreg0, <BB#2>, %vreg26, <BB#9>; GPR32:%vreg7,%vreg0,%vreg26
624B		%vreg8<def> = PHI %vreg37, <BB#2>, %vreg25, <BB#9>; GPR32:%vreg8,%vreg37,%vreg25
640B		%vreg41<def> = MOVi32ri 0; GPR32:%vreg41
656B		%vreg40<def> = MOVi32ri 0; GPR32:%vreg40
672B		%vreg42<def> = REG_SEQUENCE %vreg40, isub_hi, %vreg41<kill>, isub_lo; FPR64_with_isub_hi_in_FPR32:%vreg42 GPR32:%vreg40,%vreg41
688B		LIFETIME_START <fi#0>
704B		STRi64 %vreg42, <fi#0>, 24; mem:ST8[%1+24] FPR64_with_isub_hi_in_FPR32:%vreg42
720B		STRi64 %vreg42, <fi#0>, 16; mem:ST8[%1+16] FPR64_with_isub_hi_in_FPR32:%vreg42
736B		STRi64 %vreg42, <fi#0>, 8; mem:ST8[%1+8] FPR64_with_isub_hi_in_FPR32:%vreg42
752B		STRi64 %vreg42, <fi#0>, 0; mem:ST8[%1] FPR64_with_isub_hi_in_FPR32:%vreg42
768B		BNONE32 <BB#5>, %STATUS<imp-use>
	    Successors according to CFG: BB#5(?%)

784B	BB#4: derived from LLVM BB %for.cond64.preheader
	    Predecessors according to CFG: BB#7
800B		%vreg60<def> = MOVi32ri 0; GPR32:%vreg60
816B		BNONE32 <BB#8>, %STATUS<imp-use>
	    Successors according to CFG: BB#8(?%)

832B	BB#5: derived from LLVM BB %for.body9
	    Predecessors according to CFG: BB#3 BB#7
848B		%vreg9<def> = PHI %vreg7, <BB#3>, %vreg20, <BB#7>; GPR32:%vreg9,%vreg7,%vreg20
864B		%vreg10<def> = PHI %vreg40, <BB#3>, %vreg19, <BB#7>; GPR32:%vreg10,%vreg40,%vreg19
880B		%vreg44<def> = LSL32ri %vreg10, 2, %STATUS<imp-def,dead>; GPR32:%vreg44,%vreg10
896B		%vreg45<def> = ADDrr_r32 %vreg5, %vreg44<kill>, %STATUS<imp-def,dead>; GPR32:%vreg45,%vreg5,%vreg44
912B		%vreg11<def> = COPY %vreg2; GPR32:%vreg11,%vreg2
928B		%vreg43<def> = MOVi32ri 0; GPR32:%vreg43
944B		%vreg12<def> = LDRf32 %vreg45<kill>, 0; mem:Volatile LD4[%add.ptr10](tbaa=!2) FPR32:%vreg12 GPR32:%vreg45
	    Successors according to CFG: BB#6(?%)

960B	BB#6: derived from LLVM BB %for.body13
	    Predecessors according to CFG: BB#5 BB#6
976B		%vreg13<def> = PHI %vreg11, <BB#5>, %vreg18, <BB#6>; GPR32:%vreg13,%vreg11,%vreg18
992B		%vreg14<def> = PHI %vreg9, <BB#5>, %vreg17, <BB#6>; GPR32:%vreg14,%vreg9,%vreg17
1008B		%vreg15<def> = PHI %vreg43, <BB#5>, %vreg16, <BB#6>; GPR32:%vreg15,%vreg43,%vreg16
1024B		%vreg46<def> = LDRf32 %vreg14, -8; mem:Volatile LD4[%scevgep8](tbaa=!2) FPR32:%vreg46 GPR32:%vreg14
1040B		%vreg18<def> = ADDri_r32 %vreg13, 16, %STATUS<imp-def,dead>; GPR32:%vreg18,%vreg13
1056B		%vreg17<def> = ADDri_r32 %vreg14, 16, %STATUS<imp-def,dead>; GPR32:%vreg17,%vreg14
1072B		%vreg47<def> = LDRf32 %vreg14, -4; mem:Volatile LD4[%scevgep9](tbaa=!2) FPR32:%vreg47 GPR32:%vreg14
1088B		%vreg16<def> = ADDri_r32 %vreg15, 4, %STATUS<imp-def,dead>; GPR32:%vreg16,%vreg15
1104B		%vreg48<def> = LDRf32 %vreg14, 0; mem:Volatile LD4[%lsr.iv5](tbaa=!2) FPR32:%vreg48 GPR32:%vreg14
1120B		%vreg49<def> = LDRf32 %vreg14, 4; mem:Volatile LD4[%scevgep7](tbaa=!2) FPR32:%vreg49 GPR32:%vreg14
1136B		%vreg50<def> = LDRf32 %vreg13, -8; mem:LD4[%scevgep15](tbaa=!2) FPR32:%vreg50 GPR32:%vreg13
1152B		%vreg75<def> = LDRi32_r32 <fi#2>, 0; mem:LD4[FixedStack2] GPR32:%vreg75
1168B		GID %CONFIG<imp-def>
1184B		%CONFIG<def> = MOVTS32_core %vreg75<kill>; GPR32:%vreg75
1200B		GIE %CONFIG<imp-def>
1216B		%vreg51<def,tied1> = FMADDrr_r32 %vreg50<tied0>, %vreg12, %vreg46<kill>, %STATUS<imp-def,dead>; FPR32:%vreg51,%vreg50,%vreg12,%vreg46
1232B		STRf32 %vreg51<kill>, %vreg13, -8; mem:ST4[%scevgep15](tbaa=!2) FPR32:%vreg51 GPR32:%vreg13
1248B		%vreg52<def> = LDRf32 %vreg13, -4; mem:LD4[%scevgep17](tbaa=!2) FPR32:%vreg52 GPR32:%vreg13
1264B		%vreg53<def,tied1> = FMADDrr_r32 %vreg52<tied0>, %vreg12, %vreg47<kill>, %STATUS<imp-def,dead>; FPR32:%vreg53,%vreg52,%vreg12,%vreg47
1280B		STRf32 %vreg53<kill>, %vreg13, -4; mem:ST4[%scevgep17](tbaa=!2) FPR32:%vreg53 GPR32:%vreg13
1296B		%vreg54<def> = LDRf32 %vreg13, 0; mem:LD4[%lsr.iv1214](tbaa=!2) FPR32:%vreg54 GPR32:%vreg13
1312B		%vreg55<def,tied1> = FMADDrr_r32 %vreg54<tied0>, %vreg12, %vreg48<kill>, %STATUS<imp-def,dead>; FPR32:%vreg55,%vreg54,%vreg12,%vreg48
1328B		STRf32 %vreg55<kill>, %vreg13, 0; mem:ST4[%lsr.iv1214](tbaa=!2) FPR32:%vreg55 GPR32:%vreg13
1344B		%vreg56<def> = LDRf32 %vreg13, 4; mem:LD4[%scevgep16](tbaa=!2) FPR32:%vreg56 GPR32:%vreg13
1360B		%vreg57<def,tied1> = FMADDrr_r32 %vreg56<tied0>, %vreg12, %vreg49<kill>, %STATUS<imp-def,dead>; FPR32:%vreg57,%vreg56,%vreg12,%vreg49
1376B		%vreg58<def> = CMPri_r32 %vreg16, 8, %STATUS<imp-def>; GPR32:%vreg58,%vreg16
1392B		STRf32 %vreg57<kill>, %vreg13, 4; mem:ST4[%scevgep16](tbaa=!2) FPR32:%vreg57 GPR32:%vreg13
1408B		BCC <BB#6>, 8, %STATUS<imp-use>
1424B		BNONE32 <BB#7>, %STATUS<imp-use>
	    Successors according to CFG: BB#6(0x7c000000 / 0x80000000 = 96.88%) BB#7(0x04000000 / 0x80000000 = 3.12%)

1440B	BB#7: derived from LLVM BB %for.end60
	    Predecessors according to CFG: BB#6
1456B		%vreg20<def> = ADDrr_r32 %vreg9, %vreg1, %STATUS<imp-def,dead>; GPR32:%vreg20,%vreg9,%vreg1
1472B		%vreg19<def> = ADDri_r32 %vreg10, 1, %STATUS<imp-def,dead>; GPR32:%vreg19,%vreg10
1488B		%vreg59<def> = CMPrr_r32 %vreg19, %vreg33, %STATUS<imp-def>; GPR32:%vreg59,%vreg19,%vreg33
1504B		BCC <BB#4>, 0, %STATUS<imp-use>
1520B		BNONE32 <BB#5>, %STATUS<imp-use>
	    Successors according to CFG: BB#4(0x04000000 / 0x80000000 = 3.12%) BB#5(0x7c000000 / 0x80000000 = 96.88%)

1536B	BB#8: derived from LLVM BB %for.body66
	    Predecessors according to CFG: BB#4 BB#8
1552B		%vreg21<def> = PHI %vreg6, <BB#4>, %vreg24, <BB#8>; GPR32:%vreg21,%vreg6,%vreg24
1568B		%vreg22<def> = PHI %vreg60, <BB#4>, %vreg23, <BB#8>; GPR32:%vreg22,%vreg60,%vreg23
1584B		%vreg61<def> = MOViPTR <fi#0>, 0; GPR32:%vreg61
1600B		%vreg62<def> = ADDrr_r32 %vreg61<kill>, %vreg22, %STATUS<imp-def,dead>; GPR32:%vreg62,%vreg61,%vreg22
1616B		%vreg63<def> = LDRf32 %vreg62<kill>, 0; mem:LD4[%sunkaddr30](tbaa=!2) FPR32:%vreg63 GPR32:%vreg62
1632B		%vreg24<def> = ADDri_r32 %vreg21, 4, %STATUS<imp-def,dead>; GPR32:%vreg24,%vreg21
1648B		%vreg23<def> = ADDri_r32 %vreg22, 4, %STATUS<imp-def,dead>; GPR32:%vreg23,%vreg22
1664B		%vreg64<def> = LDRf32 %vreg21, 0; mem:Volatile LD4[%lsr.iv24](tbaa=!2) FPR32:%vreg64 GPR32:%vreg21
1680B		%vreg76<def> = LDRi32_r32 <fi#2>, 0; mem:LD4[FixedStack2] GPR32:%vreg76
1696B		GID %CONFIG<imp-def>
1712B		%CONFIG<def> = MOVTS32_core %vreg76<kill>; GPR32:%vreg76
1728B		GIE %CONFIG<imp-def>
1744B		%vreg65<def> = FADDrr_r32 %vreg63<kill>, %vreg64<kill>, %STATUS<imp-def,dead>; FPR32:%vreg65,%vreg63,%vreg64
1760B		%vreg66<def> = CMPri_r32 %vreg23, 32, %STATUS<imp-def>; GPR32:%vreg66,%vreg23
1776B		STRf32 %vreg65<kill>, %vreg21, 0; mem:Volatile ST4[%lsr.iv24](tbaa=!2) FPR32:%vreg65 GPR32:%vreg21
1792B		BCC <BB#8>, 1, %STATUS<imp-use>
1808B		BNONE32 <BB#9>, %STATUS<imp-use>
	    Successors according to CFG: BB#9(0x04000000 / 0x80000000 = 3.12%) BB#8(0x7c000000 / 0x80000000 = 96.88%)

1824B	BB#9: derived from LLVM BB %for.end75
	    Predecessors according to CFG: BB#8
1840B		%vreg27<def> = ADDri_r32 %vreg6, 32, %STATUS<imp-def,dead>; GPR32:%vreg27,%vreg6
1856B		%vreg26<def> = ADDri_r32 %vreg7, 32, %STATUS<imp-def,dead>; GPR32:%vreg26,%vreg7
1872B		LIFETIME_END <fi#0>
1888B		%vreg25<def> = ADDri_r32 %vreg8, 8, %STATUS<imp-def,dead>; GPR32:%vreg25,%vreg8
1904B		%vreg67<def> = CMPrr_r32 %vreg25, %vreg33, %STATUS<imp-def>; GPR32:%vreg67,%vreg25,%vreg33
1920B		BCC <BB#3>, 8, %STATUS<imp-use>
1936B		BNONE32 <BB#10>, %STATUS<imp-use>
	    Successors according to CFG: BB#3(0x7c000000 / 0x80000000 = 96.88%) BB#10(0x04000000 / 0x80000000 = 3.12%)

1952B	BB#10: derived from LLVM BB %for.end78
	    Predecessors according to CFG: BB#9
1968B		%vreg29<def> = ADDrr_r32 %vreg3, %vreg1, %STATUS<imp-def,dead>; GPR32:%vreg29,%vreg3,%vreg1
1984B		%vreg28<def> = ADDri_r32 %vreg4, 1, %STATUS<imp-def,dead>; GPR32:%vreg28,%vreg4
2000B		%vreg68<def> = CMPrr_r32 %vreg28, %vreg33, %STATUS<imp-def>; GPR32:%vreg68,%vreg28,%vreg33
2016B		BCC <BB#2>, 1, %STATUS<imp-use>
2032B		BNONE32 <BB#11>, %STATUS<imp-use>
	    Successors according to CFG: BB#11(0x04000000 / 0x80000000 = 3.12%) BB#2(0x7c000000 / 0x80000000 = 96.88%)

2048B	BB#11: derived from LLVM BB %for.end81
	    Predecessors according to CFG: BB#0 BB#10
2064B		%vreg77<def> = LDRi32_r32 <fi#1>, 0; mem:LD4[FixedStack1] GPR32:%vreg77
2080B		GID
2096B		%CONFIG<def> = MOVTS32_core %vreg77<kill>; GPR32:%vreg77
2112B		GIE %CONFIG<imp-use,kill>
2128B		RTS

# End machine code for function matmac.

********** Stack Coloring **********
********** Function: matmac
Found a lifetime start marker for slot #0 with allocation: tot
Found a lifetime end marker for slot #0 with allocation: tot
Conservative slots : { 1 1 1 1 }
Found a use of slot #0 at BB#3 index 688B with allocation: tot
Found 2 markers and 4 slots
Slot structure:
Slot #0 - 32 bytes.
Slot #1 - 4 bytes.
Slot #2 - 4 bytes.
Slot #3 - 4 bytes.
Total Stack size: 44 bytes

Dataflow iterations: 2
Inspecting block #12 [(null)]
BEGIN : { 0 0 0 0 }
END : { 0 0 0 0 }
LIVE_IN : { }
LIVE_OUT : { }
Inspecting block #0 [entry]
BEGIN : { 0 0 0 0 }
END : { 0 0 0 0 }
LIVE_IN : { }
LIVE_OUT : { }
Inspecting block #1 [for.body3.lr.ph.preheader]
BEGIN : { 0 0 0 0 }
END : { 0 0 0 0 }
LIVE_IN : { }
LIVE_OUT : { }
Inspecting block #2 [for.body3.lr.ph]
BEGIN : { 0 0 0 0 }
END : { 0 0 0 0 }
LIVE_IN : { }
LIVE_OUT : { }
Inspecting block #3 [for.body9.preheader]
BEGIN : { 1 0 0 0 }
END : { 0 0 0 0 }
LIVE_IN : { }
LIVE_OUT : { 1 0 0 0 }
Inspecting block #5 [for.body9]
BEGIN : { 0 0 0 0 }
END : { 0 0 0 0 }
LIVE_IN : { 1 0 0 0 }
LIVE_OUT : { 1 0 0 0 }
Inspecting block #6 [for.body13]
BEGIN : { 0 0 0 0 }
END : { 0 0 0 0 }
LIVE_IN : { 1 0 0 0 }
LIVE_OUT : { 1 0 0 0 }
Inspecting block #7 [for.end60]
BEGIN : { 0 0 0 0 }
END : { 0 0 0 0 }
LIVE_IN : { 1 0 0 0 }
LIVE_OUT : { 1 0 0 0 }
Inspecting block #4 [for.cond64.preheader]
BEGIN : { 0 0 0 0 }
END : { 0 0 0 0 }
LIVE_IN : { 1 0 0 0 }
LIVE_OUT : { 1 0 0 0 }
Inspecting block #8 [for.body66]
BEGIN : { 0 0 0 0 }
END : { 0 0 0 0 }
LIVE_IN : { 1 0 0 0 }
LIVE_OUT : { 1 0 0 0 }
Inspecting block #9 [for.end75]
BEGIN : { 0 0 0 0 }
END : { 1 0 0 0 }
LIVE_IN : { 1 0 0 0 }
LIVE_OUT : { }
Inspecting block #10 [for.end78]
BEGIN : { 0 0 0 0 }
END : { 0 0 0 0 }
LIVE_IN : { }
LIVE_OUT : { }
Inspecting block #11 [for.end81]
BEGIN : { 0 0 0 0 }
END : { 0 0 0 0 }
LIVE_IN : { }
LIVE_OUT : { }
Interval[0]:
%noreg [688B,1872B:0)  0@0B-phi
Interval[1]:
%physreg1 EMPTY  0@0B-phi
Interval[2]:
%physreg2 EMPTY  0@0B-phi
Interval[3]:
%physreg3 EMPTY  0@0B-phi
Merge 0 slots. Saved 0 bytes
Fixed 0 machine memory operands.
Fixed 0 debug locations.
Fixed 0 machine instructions.
Removed 2 markers.
# *** IR Dump After Merge disjoint stack slots ***:
# Machine code for function matmac: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=32, align=8, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=4, align=4, at location [SP]
Function Live Ins: %R0 in %vreg30, %R1 in %vreg31, %R2 in %vreg32, %R3 in %vreg33

BB#12: 
    Live Ins: %R0 %R1 %R2 %R3
	GID %CONFIG<imp-def>
	%vreg71<def> = MOVFS32_core %CONFIG<kill>; GPR32:%vreg71
	STRi32_r32 %vreg71, <fi#1>, 0; mem:ST4[FixedStack1] GPR32:%vreg71
	%vreg72<def> = MOVi32ri 65535; GPR32:%vreg72
	%vreg73<def,tied1> = MOVTi32ri %vreg72<tied0>, 65521; GPR32:%vreg73,%vreg72
	%vreg69<def> = ANDrr_r32 %vreg71<kill>, %vreg73<kill>, %STATUS<imp-def>; GPR32:%vreg69,%vreg71,%vreg73
	STRi32_r32 %vreg69, <fi#2>, 0; mem:ST4[FixedStack2] GPR32:%vreg69
	%vreg70<def,tied1> = MOVTi32ri %vreg71<kill,tied0>, 72; GPR32:%vreg70,%vreg71
	STRi32_r32 %vreg70, <fi#3>, 0; mem:ST4[FixedStack3] GPR32:%vreg70
	GIE %CONFIG<imp-use,kill>
    Successors according to CFG: BB#0(?%)

BB#0: derived from LLVM BB %entry
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#12
	%vreg33<def> = COPY %R3; GPR32:%vreg33
	%vreg32<def> = COPY %R2; GPR32:%vreg32
	%vreg31<def> = COPY %R1; GPR32:%vreg31
	%vreg30<def> = COPY %R0; GPR32:%vreg30
	%vreg34<def> = CMPri_r32 %vreg33, 1, %STATUS<imp-def>; GPR32:%vreg34,%vreg33
	BCC <BB#11>, 8, %STATUS<imp-use>
	BNONE32 <BB#1>, %STATUS<imp-use>
    Successors according to CFG: BB#1(0x50000000 / 0x80000000 = 62.50%) BB#11(0x30000000 / 0x80000000 = 37.50%)

BB#1: derived from LLVM BB %for.body3.lr.ph.preheader
    Predecessors according to CFG: BB#0
	%vreg1<def> = LSL32ri %vreg33, 2, %STATUS<imp-def,dead>; GPR32:%vreg1,%vreg33
	%vreg0<def> = ADDri_r32 %vreg31, 8, %STATUS<imp-def,dead>; GPR32:%vreg0,%vreg31
	%vreg36<def> = MOViPTR <fi#0>, 0; GPR32:%vreg36
	%vreg2<def> = ADDri_r32 %vreg36<kill>, 8, %STATUS<imp-def,dead>; GPR32:%vreg2,%vreg36
	%vreg35<def> = MOVi32ri 0; GPR32:%vreg35
    Successors according to CFG: BB#2(?%)

BB#2: derived from LLVM BB %for.body3.lr.ph
    Predecessors according to CFG: BB#1 BB#10
	%vreg3<def> = PHI %vreg32, <BB#1>, %vreg29, <BB#10>; GPR32:%vreg3,%vreg32,%vreg29
	%vreg4<def> = PHI %vreg35, <BB#1>, %vreg28, <BB#10>; GPR32:%vreg4,%vreg35,%vreg28
	%vreg74<def> = LDRi32_r32 <fi#3>, 0; mem:LD4[FixedStack3] GPR32:%vreg74
	GID %CONFIG<imp-def>
	%CONFIG<def> = MOVTS32_core %vreg74<kill>; GPR32:%vreg74
	GIE %CONFIG<imp-def>
	%vreg38<def> = IMULrr_r32 %vreg4, %vreg33, %STATUS<imp-def,dead>; GPR32:%vreg38,%vreg4,%vreg33
	%vreg39<def> = LSL32ri %vreg38<kill>, 2, %STATUS<imp-def,dead>; GPR32:%vreg39,%vreg38
	%vreg37<def> = MOVi32ri 0; GPR32:%vreg37
	%vreg5<def> = ADDrr_r32 %vreg30, %vreg39<kill>, %STATUS<imp-def,dead>; GPR32:%vreg5,%vreg30,%vreg39
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %for.body9.preheader
    Predecessors according to CFG: BB#2 BB#9
	%vreg6<def> = PHI %vreg3, <BB#2>, %vreg27, <BB#9>; GPR32:%vreg6,%vreg3,%vreg27
	%vreg7<def> = PHI %vreg0, <BB#2>, %vreg26, <BB#9>; GPR32:%vreg7,%vreg0,%vreg26
	%vreg8<def> = PHI %vreg37, <BB#2>, %vreg25, <BB#9>; GPR32:%vreg8,%vreg37,%vreg25
	%vreg41<def> = MOVi32ri 0; GPR32:%vreg41
	%vreg40<def> = MOVi32ri 0; GPR32:%vreg40
	%vreg42<def> = REG_SEQUENCE %vreg40, isub_hi, %vreg41<kill>, isub_lo; FPR64_with_isub_hi_in_FPR32:%vreg42 GPR32:%vreg40,%vreg41
	STRi64 %vreg42, <fi#0>, 24; mem:ST8[%1+24] FPR64_with_isub_hi_in_FPR32:%vreg42
	STRi64 %vreg42, <fi#0>, 16; mem:ST8[%1+16] FPR64_with_isub_hi_in_FPR32:%vreg42
	STRi64 %vreg42, <fi#0>, 8; mem:ST8[%1+8] FPR64_with_isub_hi_in_FPR32:%vreg42
	STRi64 %vreg42, <fi#0>, 0; mem:ST8[%1] FPR64_with_isub_hi_in_FPR32:%vreg42
	BNONE32 <BB#5>, %STATUS<imp-use>
    Successors according to CFG: BB#5(?%)

BB#4: derived from LLVM BB %for.cond64.preheader
    Predecessors according to CFG: BB#7
	%vreg60<def> = MOVi32ri 0; GPR32:%vreg60
	BNONE32 <BB#8>, %STATUS<imp-use>
    Successors according to CFG: BB#8(?%)

BB#5: derived from LLVM BB %for.body9
    Predecessors according to CFG: BB#3 BB#7
	%vreg9<def> = PHI %vreg7, <BB#3>, %vreg20, <BB#7>; GPR32:%vreg9,%vreg7,%vreg20
	%vreg10<def> = PHI %vreg40, <BB#3>, %vreg19, <BB#7>; GPR32:%vreg10,%vreg40,%vreg19
	%vreg44<def> = LSL32ri %vreg10, 2, %STATUS<imp-def,dead>; GPR32:%vreg44,%vreg10
	%vreg45<def> = ADDrr_r32 %vreg5, %vreg44<kill>, %STATUS<imp-def,dead>; GPR32:%vreg45,%vreg5,%vreg44
	%vreg11<def> = COPY %vreg2; GPR32:%vreg11,%vreg2
	%vreg43<def> = MOVi32ri 0; GPR32:%vreg43
	%vreg12<def> = LDRf32 %vreg45<kill>, 0; mem:Volatile LD4[%add.ptr10](tbaa=!2) FPR32:%vreg12 GPR32:%vreg45
    Successors according to CFG: BB#6(?%)

BB#6: derived from LLVM BB %for.body13
    Predecessors according to CFG: BB#5 BB#6
	%vreg13<def> = PHI %vreg11, <BB#5>, %vreg18, <BB#6>; GPR32:%vreg13,%vreg11,%vreg18
	%vreg14<def> = PHI %vreg9, <BB#5>, %vreg17, <BB#6>; GPR32:%vreg14,%vreg9,%vreg17
	%vreg15<def> = PHI %vreg43, <BB#5>, %vreg16, <BB#6>; GPR32:%vreg15,%vreg43,%vreg16
	%vreg46<def> = LDRf32 %vreg14, -8; mem:Volatile LD4[%scevgep8](tbaa=!2) FPR32:%vreg46 GPR32:%vreg14
	%vreg18<def> = ADDri_r32 %vreg13, 16, %STATUS<imp-def,dead>; GPR32:%vreg18,%vreg13
	%vreg17<def> = ADDri_r32 %vreg14, 16, %STATUS<imp-def,dead>; GPR32:%vreg17,%vreg14
	%vreg47<def> = LDRf32 %vreg14, -4; mem:Volatile LD4[%scevgep9](tbaa=!2) FPR32:%vreg47 GPR32:%vreg14
	%vreg16<def> = ADDri_r32 %vreg15, 4, %STATUS<imp-def,dead>; GPR32:%vreg16,%vreg15
	%vreg48<def> = LDRf32 %vreg14, 0; mem:Volatile LD4[%lsr.iv5](tbaa=!2) FPR32:%vreg48 GPR32:%vreg14
	%vreg49<def> = LDRf32 %vreg14, 4; mem:Volatile LD4[%scevgep7](tbaa=!2) FPR32:%vreg49 GPR32:%vreg14
	%vreg50<def> = LDRf32 %vreg13, -8; mem:LD4[%scevgep15](tbaa=!2) FPR32:%vreg50 GPR32:%vreg13
	%vreg75<def> = LDRi32_r32 <fi#2>, 0; mem:LD4[FixedStack2] GPR32:%vreg75
	GID %CONFIG<imp-def>
	%CONFIG<def> = MOVTS32_core %vreg75<kill>; GPR32:%vreg75
	GIE %CONFIG<imp-def>
	%vreg51<def,tied1> = FMADDrr_r32 %vreg50<tied0>, %vreg12, %vreg46<kill>, %STATUS<imp-def,dead>; FPR32:%vreg51,%vreg50,%vreg12,%vreg46
	STRf32 %vreg51<kill>, %vreg13, -8; mem:ST4[%scevgep15](tbaa=!2) FPR32:%vreg51 GPR32:%vreg13
	%vreg52<def> = LDRf32 %vreg13, -4; mem:LD4[%scevgep17](tbaa=!2) FPR32:%vreg52 GPR32:%vreg13
	%vreg53<def,tied1> = FMADDrr_r32 %vreg52<tied0>, %vreg12, %vreg47<kill>, %STATUS<imp-def,dead>; FPR32:%vreg53,%vreg52,%vreg12,%vreg47
	STRf32 %vreg53<kill>, %vreg13, -4; mem:ST4[%scevgep17](tbaa=!2) FPR32:%vreg53 GPR32:%vreg13
	%vreg54<def> = LDRf32 %vreg13, 0; mem:LD4[%lsr.iv1214](tbaa=!2) FPR32:%vreg54 GPR32:%vreg13
	%vreg55<def,tied1> = FMADDrr_r32 %vreg54<tied0>, %vreg12, %vreg48<kill>, %STATUS<imp-def,dead>; FPR32:%vreg55,%vreg54,%vreg12,%vreg48
	STRf32 %vreg55<kill>, %vreg13, 0; mem:ST4[%lsr.iv1214](tbaa=!2) FPR32:%vreg55 GPR32:%vreg13
	%vreg56<def> = LDRf32 %vreg13, 4; mem:LD4[%scevgep16](tbaa=!2) FPR32:%vreg56 GPR32:%vreg13
	%vreg57<def,tied1> = FMADDrr_r32 %vreg56<tied0>, %vreg12, %vreg49<kill>, %STATUS<imp-def,dead>; FPR32:%vreg57,%vreg56,%vreg12,%vreg49
	%vreg58<def> = CMPri_r32 %vreg16, 8, %STATUS<imp-def>; GPR32:%vreg58,%vreg16
	STRf32 %vreg57<kill>, %vreg13, 4; mem:ST4[%scevgep16](tbaa=!2) FPR32:%vreg57 GPR32:%vreg13
	BCC <BB#6>, 8, %STATUS<imp-use>
	BNONE32 <BB#7>, %STATUS<imp-use>
    Successors according to CFG: BB#6(0x7c000000 / 0x80000000 = 96.88%) BB#7(0x04000000 / 0x80000000 = 3.12%)

BB#7: derived from LLVM BB %for.end60
    Predecessors according to CFG: BB#6
	%vreg20<def> = ADDrr_r32 %vreg9, %vreg1, %STATUS<imp-def,dead>; GPR32:%vreg20,%vreg9,%vreg1
	%vreg19<def> = ADDri_r32 %vreg10, 1, %STATUS<imp-def,dead>; GPR32:%vreg19,%vreg10
	%vreg59<def> = CMPrr_r32 %vreg19, %vreg33, %STATUS<imp-def>; GPR32:%vreg59,%vreg19,%vreg33
	BCC <BB#4>, 0, %STATUS<imp-use>
	BNONE32 <BB#5>, %STATUS<imp-use>
    Successors according to CFG: BB#4(0x04000000 / 0x80000000 = 3.12%) BB#5(0x7c000000 / 0x80000000 = 96.88%)

BB#8: derived from LLVM BB %for.body66
    Predecessors according to CFG: BB#4 BB#8
	%vreg21<def> = PHI %vreg6, <BB#4>, %vreg24, <BB#8>; GPR32:%vreg21,%vreg6,%vreg24
	%vreg22<def> = PHI %vreg60, <BB#4>, %vreg23, <BB#8>; GPR32:%vreg22,%vreg60,%vreg23
	%vreg61<def> = MOViPTR <fi#0>, 0; GPR32:%vreg61
	%vreg62<def> = ADDrr_r32 %vreg61<kill>, %vreg22, %STATUS<imp-def,dead>; GPR32:%vreg62,%vreg61,%vreg22
	%vreg63<def> = LDRf32 %vreg62<kill>, 0; mem:LD4[%sunkaddr30](tbaa=!2) FPR32:%vreg63 GPR32:%vreg62
	%vreg24<def> = ADDri_r32 %vreg21, 4, %STATUS<imp-def,dead>; GPR32:%vreg24,%vreg21
	%vreg23<def> = ADDri_r32 %vreg22, 4, %STATUS<imp-def,dead>; GPR32:%vreg23,%vreg22
	%vreg64<def> = LDRf32 %vreg21, 0; mem:Volatile LD4[%lsr.iv24](tbaa=!2) FPR32:%vreg64 GPR32:%vreg21
	%vreg76<def> = LDRi32_r32 <fi#2>, 0; mem:LD4[FixedStack2] GPR32:%vreg76
	GID %CONFIG<imp-def>
	%CONFIG<def> = MOVTS32_core %vreg76<kill>; GPR32:%vreg76
	GIE %CONFIG<imp-def>
	%vreg65<def> = FADDrr_r32 %vreg63<kill>, %vreg64<kill>, %STATUS<imp-def,dead>; FPR32:%vreg65,%vreg63,%vreg64
	%vreg66<def> = CMPri_r32 %vreg23, 32, %STATUS<imp-def>; GPR32:%vreg66,%vreg23
	STRf32 %vreg65<kill>, %vreg21, 0; mem:Volatile ST4[%lsr.iv24](tbaa=!2) FPR32:%vreg65 GPR32:%vreg21
	BCC <BB#8>, 1, %STATUS<imp-use>
	BNONE32 <BB#9>, %STATUS<imp-use>
    Successors according to CFG: BB#9(0x04000000 / 0x80000000 = 3.12%) BB#8(0x7c000000 / 0x80000000 = 96.88%)

BB#9: derived from LLVM BB %for.end75
    Predecessors according to CFG: BB#8
	%vreg27<def> = ADDri_r32 %vreg6, 32, %STATUS<imp-def,dead>; GPR32:%vreg27,%vreg6
	%vreg26<def> = ADDri_r32 %vreg7, 32, %STATUS<imp-def,dead>; GPR32:%vreg26,%vreg7
	%vreg25<def> = ADDri_r32 %vreg8, 8, %STATUS<imp-def,dead>; GPR32:%vreg25,%vreg8
	%vreg67<def> = CMPrr_r32 %vreg25, %vreg33, %STATUS<imp-def>; GPR32:%vreg67,%vreg25,%vreg33
	BCC <BB#3>, 8, %STATUS<imp-use>
	BNONE32 <BB#10>, %STATUS<imp-use>
    Successors according to CFG: BB#3(0x7c000000 / 0x80000000 = 96.88%) BB#10(0x04000000 / 0x80000000 = 3.12%)

BB#10: derived from LLVM BB %for.end78
    Predecessors according to CFG: BB#9
	%vreg29<def> = ADDrr_r32 %vreg3, %vreg1, %STATUS<imp-def,dead>; GPR32:%vreg29,%vreg3,%vreg1
	%vreg28<def> = ADDri_r32 %vreg4, 1, %STATUS<imp-def,dead>; GPR32:%vreg28,%vreg4
	%vreg68<def> = CMPrr_r32 %vreg28, %vreg33, %STATUS<imp-def>; GPR32:%vreg68,%vreg28,%vreg33
	BCC <BB#2>, 1, %STATUS<imp-use>
	BNONE32 <BB#11>, %STATUS<imp-use>
    Successors according to CFG: BB#11(0x04000000 / 0x80000000 = 3.12%) BB#2(0x7c000000 / 0x80000000 = 96.88%)

BB#11: derived from LLVM BB %for.end81
    Predecessors according to CFG: BB#0 BB#10
	%vreg77<def> = LDRi32_r32 <fi#1>, 0; mem:LD4[FixedStack1] GPR32:%vreg77
	GID
	%CONFIG<def> = MOVTS32_core %vreg77<kill>; GPR32:%vreg77
	GIE %CONFIG<imp-use,kill>
	RTS

# End machine code for function matmac.

# *** IR Dump Before Local Stack Slot Allocation ***:
# Machine code for function matmac: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=32, align=8, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=4, align=4, at location [SP]
Function Live Ins: %R0 in %vreg30, %R1 in %vreg31, %R2 in %vreg32, %R3 in %vreg33

BB#12: 
    Live Ins: %R0 %R1 %R2 %R3
	GID %CONFIG<imp-def>
	%vreg71<def> = MOVFS32_core %CONFIG<kill>; GPR32:%vreg71
	STRi32_r32 %vreg71, <fi#1>, 0; mem:ST4[FixedStack1] GPR32:%vreg71
	%vreg72<def> = MOVi32ri 65535; GPR32:%vreg72
	%vreg73<def,tied1> = MOVTi32ri %vreg72<tied0>, 65521; GPR32:%vreg73,%vreg72
	%vreg69<def> = ANDrr_r32 %vreg71<kill>, %vreg73<kill>, %STATUS<imp-def>; GPR32:%vreg69,%vreg71,%vreg73
	STRi32_r32 %vreg69, <fi#2>, 0; mem:ST4[FixedStack2] GPR32:%vreg69
	%vreg70<def,tied1> = MOVTi32ri %vreg71<kill,tied0>, 72; GPR32:%vreg70,%vreg71
	STRi32_r32 %vreg70, <fi#3>, 0; mem:ST4[FixedStack3] GPR32:%vreg70
	GIE %CONFIG<imp-use,kill>
    Successors according to CFG: BB#0(?%)

BB#0: derived from LLVM BB %entry
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#12
	%vreg33<def> = COPY %R3; GPR32:%vreg33
	%vreg32<def> = COPY %R2; GPR32:%vreg32
	%vreg31<def> = COPY %R1; GPR32:%vreg31
	%vreg30<def> = COPY %R0; GPR32:%vreg30
	%vreg34<def> = CMPri_r32 %vreg33, 1, %STATUS<imp-def>; GPR32:%vreg34,%vreg33
	BCC <BB#11>, 8, %STATUS<imp-use>
	BNONE32 <BB#1>, %STATUS<imp-use>
    Successors according to CFG: BB#1(0x50000000 / 0x80000000 = 62.50%) BB#11(0x30000000 / 0x80000000 = 37.50%)

BB#1: derived from LLVM BB %for.body3.lr.ph.preheader
    Predecessors according to CFG: BB#0
	%vreg1<def> = LSL32ri %vreg33, 2, %STATUS<imp-def,dead>; GPR32:%vreg1,%vreg33
	%vreg0<def> = ADDri_r32 %vreg31, 8, %STATUS<imp-def,dead>; GPR32:%vreg0,%vreg31
	%vreg36<def> = MOViPTR <fi#0>, 0; GPR32:%vreg36
	%vreg2<def> = ADDri_r32 %vreg36<kill>, 8, %STATUS<imp-def,dead>; GPR32:%vreg2,%vreg36
	%vreg35<def> = MOVi32ri 0; GPR32:%vreg35
    Successors according to CFG: BB#2(?%)

BB#2: derived from LLVM BB %for.body3.lr.ph
    Predecessors according to CFG: BB#1 BB#10
	%vreg3<def> = PHI %vreg32, <BB#1>, %vreg29, <BB#10>; GPR32:%vreg3,%vreg32,%vreg29
	%vreg4<def> = PHI %vreg35, <BB#1>, %vreg28, <BB#10>; GPR32:%vreg4,%vreg35,%vreg28
	%vreg74<def> = LDRi32_r32 <fi#3>, 0; mem:LD4[FixedStack3] GPR32:%vreg74
	GID %CONFIG<imp-def>
	%CONFIG<def> = MOVTS32_core %vreg74<kill>; GPR32:%vreg74
	GIE %CONFIG<imp-def>
	%vreg38<def> = IMULrr_r32 %vreg4, %vreg33, %STATUS<imp-def,dead>; GPR32:%vreg38,%vreg4,%vreg33
	%vreg39<def> = LSL32ri %vreg38<kill>, 2, %STATUS<imp-def,dead>; GPR32:%vreg39,%vreg38
	%vreg37<def> = MOVi32ri 0; GPR32:%vreg37
	%vreg5<def> = ADDrr_r32 %vreg30, %vreg39<kill>, %STATUS<imp-def,dead>; GPR32:%vreg5,%vreg30,%vreg39
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %for.body9.preheader
    Predecessors according to CFG: BB#2 BB#9
	%vreg6<def> = PHI %vreg3, <BB#2>, %vreg27, <BB#9>; GPR32:%vreg6,%vreg3,%vreg27
	%vreg7<def> = PHI %vreg0, <BB#2>, %vreg26, <BB#9>; GPR32:%vreg7,%vreg0,%vreg26
	%vreg8<def> = PHI %vreg37, <BB#2>, %vreg25, <BB#9>; GPR32:%vreg8,%vreg37,%vreg25
	%vreg41<def> = MOVi32ri 0; GPR32:%vreg41
	%vreg40<def> = MOVi32ri 0; GPR32:%vreg40
	%vreg42<def> = REG_SEQUENCE %vreg40, isub_hi, %vreg41<kill>, isub_lo; FPR64_with_isub_hi_in_FPR32:%vreg42 GPR32:%vreg40,%vreg41
	STRi64 %vreg42, <fi#0>, 24; mem:ST8[%1+24] FPR64_with_isub_hi_in_FPR32:%vreg42
	STRi64 %vreg42, <fi#0>, 16; mem:ST8[%1+16] FPR64_with_isub_hi_in_FPR32:%vreg42
	STRi64 %vreg42, <fi#0>, 8; mem:ST8[%1+8] FPR64_with_isub_hi_in_FPR32:%vreg42
	STRi64 %vreg42, <fi#0>, 0; mem:ST8[%1] FPR64_with_isub_hi_in_FPR32:%vreg42
	BNONE32 <BB#5>, %STATUS<imp-use>
    Successors according to CFG: BB#5(?%)

BB#4: derived from LLVM BB %for.cond64.preheader
    Predecessors according to CFG: BB#7
	%vreg60<def> = MOVi32ri 0; GPR32:%vreg60
	BNONE32 <BB#8>, %STATUS<imp-use>
    Successors according to CFG: BB#8(?%)

BB#5: derived from LLVM BB %for.body9
    Predecessors according to CFG: BB#3 BB#7
	%vreg9<def> = PHI %vreg7, <BB#3>, %vreg20, <BB#7>; GPR32:%vreg9,%vreg7,%vreg20
	%vreg10<def> = PHI %vreg40, <BB#3>, %vreg19, <BB#7>; GPR32:%vreg10,%vreg40,%vreg19
	%vreg44<def> = LSL32ri %vreg10, 2, %STATUS<imp-def,dead>; GPR32:%vreg44,%vreg10
	%vreg45<def> = ADDrr_r32 %vreg5, %vreg44<kill>, %STATUS<imp-def,dead>; GPR32:%vreg45,%vreg5,%vreg44
	%vreg11<def> = COPY %vreg2; GPR32:%vreg11,%vreg2
	%vreg43<def> = MOVi32ri 0; GPR32:%vreg43
	%vreg12<def> = LDRf32 %vreg45<kill>, 0; mem:Volatile LD4[%add.ptr10](tbaa=!2) FPR32:%vreg12 GPR32:%vreg45
    Successors according to CFG: BB#6(?%)

BB#6: derived from LLVM BB %for.body13
    Predecessors according to CFG: BB#5 BB#6
	%vreg13<def> = PHI %vreg11, <BB#5>, %vreg18, <BB#6>; GPR32:%vreg13,%vreg11,%vreg18
	%vreg14<def> = PHI %vreg9, <BB#5>, %vreg17, <BB#6>; GPR32:%vreg14,%vreg9,%vreg17
	%vreg15<def> = PHI %vreg43, <BB#5>, %vreg16, <BB#6>; GPR32:%vreg15,%vreg43,%vreg16
	%vreg46<def> = LDRf32 %vreg14, -8; mem:Volatile LD4[%scevgep8](tbaa=!2) FPR32:%vreg46 GPR32:%vreg14
	%vreg18<def> = ADDri_r32 %vreg13, 16, %STATUS<imp-def,dead>; GPR32:%vreg18,%vreg13
	%vreg17<def> = ADDri_r32 %vreg14, 16, %STATUS<imp-def,dead>; GPR32:%vreg17,%vreg14
	%vreg47<def> = LDRf32 %vreg14, -4; mem:Volatile LD4[%scevgep9](tbaa=!2) FPR32:%vreg47 GPR32:%vreg14
	%vreg16<def> = ADDri_r32 %vreg15, 4, %STATUS<imp-def,dead>; GPR32:%vreg16,%vreg15
	%vreg48<def> = LDRf32 %vreg14, 0; mem:Volatile LD4[%lsr.iv5](tbaa=!2) FPR32:%vreg48 GPR32:%vreg14
	%vreg49<def> = LDRf32 %vreg14, 4; mem:Volatile LD4[%scevgep7](tbaa=!2) FPR32:%vreg49 GPR32:%vreg14
	%vreg50<def> = LDRf32 %vreg13, -8; mem:LD4[%scevgep15](tbaa=!2) FPR32:%vreg50 GPR32:%vreg13
	%vreg75<def> = LDRi32_r32 <fi#2>, 0; mem:LD4[FixedStack2] GPR32:%vreg75
	GID %CONFIG<imp-def>
	%CONFIG<def> = MOVTS32_core %vreg75<kill>; GPR32:%vreg75
	GIE %CONFIG<imp-def>
	%vreg51<def,tied1> = FMADDrr_r32 %vreg50<tied0>, %vreg12, %vreg46<kill>, %STATUS<imp-def,dead>; FPR32:%vreg51,%vreg50,%vreg12,%vreg46
	STRf32 %vreg51<kill>, %vreg13, -8; mem:ST4[%scevgep15](tbaa=!2) FPR32:%vreg51 GPR32:%vreg13
	%vreg52<def> = LDRf32 %vreg13, -4; mem:LD4[%scevgep17](tbaa=!2) FPR32:%vreg52 GPR32:%vreg13
	%vreg53<def,tied1> = FMADDrr_r32 %vreg52<tied0>, %vreg12, %vreg47<kill>, %STATUS<imp-def,dead>; FPR32:%vreg53,%vreg52,%vreg12,%vreg47
	STRf32 %vreg53<kill>, %vreg13, -4; mem:ST4[%scevgep17](tbaa=!2) FPR32:%vreg53 GPR32:%vreg13
	%vreg54<def> = LDRf32 %vreg13, 0; mem:LD4[%lsr.iv1214](tbaa=!2) FPR32:%vreg54 GPR32:%vreg13
	%vreg55<def,tied1> = FMADDrr_r32 %vreg54<tied0>, %vreg12, %vreg48<kill>, %STATUS<imp-def,dead>; FPR32:%vreg55,%vreg54,%vreg12,%vreg48
	STRf32 %vreg55<kill>, %vreg13, 0; mem:ST4[%lsr.iv1214](tbaa=!2) FPR32:%vreg55 GPR32:%vreg13
	%vreg56<def> = LDRf32 %vreg13, 4; mem:LD4[%scevgep16](tbaa=!2) FPR32:%vreg56 GPR32:%vreg13
	%vreg57<def,tied1> = FMADDrr_r32 %vreg56<tied0>, %vreg12, %vreg49<kill>, %STATUS<imp-def,dead>; FPR32:%vreg57,%vreg56,%vreg12,%vreg49
	%vreg58<def> = CMPri_r32 %vreg16, 8, %STATUS<imp-def>; GPR32:%vreg58,%vreg16
	STRf32 %vreg57<kill>, %vreg13, 4; mem:ST4[%scevgep16](tbaa=!2) FPR32:%vreg57 GPR32:%vreg13
	BCC <BB#6>, 8, %STATUS<imp-use>
	BNONE32 <BB#7>, %STATUS<imp-use>
    Successors according to CFG: BB#6(0x7c000000 / 0x80000000 = 96.88%) BB#7(0x04000000 / 0x80000000 = 3.12%)

BB#7: derived from LLVM BB %for.end60
    Predecessors according to CFG: BB#6
	%vreg20<def> = ADDrr_r32 %vreg9, %vreg1, %STATUS<imp-def,dead>; GPR32:%vreg20,%vreg9,%vreg1
	%vreg19<def> = ADDri_r32 %vreg10, 1, %STATUS<imp-def,dead>; GPR32:%vreg19,%vreg10
	%vreg59<def> = CMPrr_r32 %vreg19, %vreg33, %STATUS<imp-def>; GPR32:%vreg59,%vreg19,%vreg33
	BCC <BB#4>, 0, %STATUS<imp-use>
	BNONE32 <BB#5>, %STATUS<imp-use>
    Successors according to CFG: BB#4(0x04000000 / 0x80000000 = 3.12%) BB#5(0x7c000000 / 0x80000000 = 96.88%)

BB#8: derived from LLVM BB %for.body66
    Predecessors according to CFG: BB#4 BB#8
	%vreg21<def> = PHI %vreg6, <BB#4>, %vreg24, <BB#8>; GPR32:%vreg21,%vreg6,%vreg24
	%vreg22<def> = PHI %vreg60, <BB#4>, %vreg23, <BB#8>; GPR32:%vreg22,%vreg60,%vreg23
	%vreg61<def> = MOViPTR <fi#0>, 0; GPR32:%vreg61
	%vreg62<def> = ADDrr_r32 %vreg61<kill>, %vreg22, %STATUS<imp-def,dead>; GPR32:%vreg62,%vreg61,%vreg22
	%vreg63<def> = LDRf32 %vreg62<kill>, 0; mem:LD4[%sunkaddr30](tbaa=!2) FPR32:%vreg63 GPR32:%vreg62
	%vreg24<def> = ADDri_r32 %vreg21, 4, %STATUS<imp-def,dead>; GPR32:%vreg24,%vreg21
	%vreg23<def> = ADDri_r32 %vreg22, 4, %STATUS<imp-def,dead>; GPR32:%vreg23,%vreg22
	%vreg64<def> = LDRf32 %vreg21, 0; mem:Volatile LD4[%lsr.iv24](tbaa=!2) FPR32:%vreg64 GPR32:%vreg21
	%vreg76<def> = LDRi32_r32 <fi#2>, 0; mem:LD4[FixedStack2] GPR32:%vreg76
	GID %CONFIG<imp-def>
	%CONFIG<def> = MOVTS32_core %vreg76<kill>; GPR32:%vreg76
	GIE %CONFIG<imp-def>
	%vreg65<def> = FADDrr_r32 %vreg63<kill>, %vreg64<kill>, %STATUS<imp-def,dead>; FPR32:%vreg65,%vreg63,%vreg64
	%vreg66<def> = CMPri_r32 %vreg23, 32, %STATUS<imp-def>; GPR32:%vreg66,%vreg23
	STRf32 %vreg65<kill>, %vreg21, 0; mem:Volatile ST4[%lsr.iv24](tbaa=!2) FPR32:%vreg65 GPR32:%vreg21
	BCC <BB#8>, 1, %STATUS<imp-use>
	BNONE32 <BB#9>, %STATUS<imp-use>
    Successors according to CFG: BB#9(0x04000000 / 0x80000000 = 3.12%) BB#8(0x7c000000 / 0x80000000 = 96.88%)

BB#9: derived from LLVM BB %for.end75
    Predecessors according to CFG: BB#8
	%vreg27<def> = ADDri_r32 %vreg6, 32, %STATUS<imp-def,dead>; GPR32:%vreg27,%vreg6
	%vreg26<def> = ADDri_r32 %vreg7, 32, %STATUS<imp-def,dead>; GPR32:%vreg26,%vreg7
	%vreg25<def> = ADDri_r32 %vreg8, 8, %STATUS<imp-def,dead>; GPR32:%vreg25,%vreg8
	%vreg67<def> = CMPrr_r32 %vreg25, %vreg33, %STATUS<imp-def>; GPR32:%vreg67,%vreg25,%vreg33
	BCC <BB#3>, 8, %STATUS<imp-use>
	BNONE32 <BB#10>, %STATUS<imp-use>
    Successors according to CFG: BB#3(0x7c000000 / 0x80000000 = 96.88%) BB#10(0x04000000 / 0x80000000 = 3.12%)

BB#10: derived from LLVM BB %for.end78
    Predecessors according to CFG: BB#9
	%vreg29<def> = ADDrr_r32 %vreg3, %vreg1, %STATUS<imp-def,dead>; GPR32:%vreg29,%vreg3,%vreg1
	%vreg28<def> = ADDri_r32 %vreg4, 1, %STATUS<imp-def,dead>; GPR32:%vreg28,%vreg4
	%vreg68<def> = CMPrr_r32 %vreg28, %vreg33, %STATUS<imp-def>; GPR32:%vreg68,%vreg28,%vreg33
	BCC <BB#2>, 1, %STATUS<imp-use>
	BNONE32 <BB#11>, %STATUS<imp-use>
    Successors according to CFG: BB#11(0x04000000 / 0x80000000 = 3.12%) BB#2(0x7c000000 / 0x80000000 = 96.88%)

BB#11: derived from LLVM BB %for.end81
    Predecessors according to CFG: BB#0 BB#10
	%vreg77<def> = LDRi32_r32 <fi#1>, 0; mem:LD4[FixedStack1] GPR32:%vreg77
	GID
	%CONFIG<def> = MOVTS32_core %vreg77<kill>; GPR32:%vreg77
	GIE %CONFIG<imp-use,kill>
	RTS

# End machine code for function matmac.

# *** IR Dump After Local Stack Slot Allocation ***:
# Machine code for function matmac: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=32, align=8, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=4, align=4, at location [SP]
Function Live Ins: %R0 in %vreg30, %R1 in %vreg31, %R2 in %vreg32, %R3 in %vreg33

BB#12: 
    Live Ins: %R0 %R1 %R2 %R3
	GID %CONFIG<imp-def>
	%vreg71<def> = MOVFS32_core %CONFIG<kill>; GPR32:%vreg71
	STRi32_r32 %vreg71, <fi#1>, 0; mem:ST4[FixedStack1] GPR32:%vreg71
	%vreg72<def> = MOVi32ri 65535; GPR32:%vreg72
	%vreg73<def,tied1> = MOVTi32ri %vreg72<tied0>, 65521; GPR32:%vreg73,%vreg72
	%vreg69<def> = ANDrr_r32 %vreg71<kill>, %vreg73<kill>, %STATUS<imp-def>; GPR32:%vreg69,%vreg71,%vreg73
	STRi32_r32 %vreg69, <fi#2>, 0; mem:ST4[FixedStack2] GPR32:%vreg69
	%vreg70<def,tied1> = MOVTi32ri %vreg71<kill,tied0>, 72; GPR32:%vreg70,%vreg71
	STRi32_r32 %vreg70, <fi#3>, 0; mem:ST4[FixedStack3] GPR32:%vreg70
	GIE %CONFIG<imp-use,kill>
    Successors according to CFG: BB#0(?%)

BB#0: derived from LLVM BB %entry
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#12
	%vreg33<def> = COPY %R3; GPR32:%vreg33
	%vreg32<def> = COPY %R2; GPR32:%vreg32
	%vreg31<def> = COPY %R1; GPR32:%vreg31
	%vreg30<def> = COPY %R0; GPR32:%vreg30
	%vreg34<def> = CMPri_r32 %vreg33, 1, %STATUS<imp-def>; GPR32:%vreg34,%vreg33
	BCC <BB#11>, 8, %STATUS<imp-use>
	BNONE32 <BB#1>, %STATUS<imp-use>
    Successors according to CFG: BB#1(0x50000000 / 0x80000000 = 62.50%) BB#11(0x30000000 / 0x80000000 = 37.50%)

BB#1: derived from LLVM BB %for.body3.lr.ph.preheader
    Predecessors according to CFG: BB#0
	%vreg1<def> = LSL32ri %vreg33, 2, %STATUS<imp-def,dead>; GPR32:%vreg1,%vreg33
	%vreg0<def> = ADDri_r32 %vreg31, 8, %STATUS<imp-def,dead>; GPR32:%vreg0,%vreg31
	%vreg36<def> = MOViPTR <fi#0>, 0; GPR32:%vreg36
	%vreg2<def> = ADDri_r32 %vreg36<kill>, 8, %STATUS<imp-def,dead>; GPR32:%vreg2,%vreg36
	%vreg35<def> = MOVi32ri 0; GPR32:%vreg35
    Successors according to CFG: BB#2(?%)

BB#2: derived from LLVM BB %for.body3.lr.ph
    Predecessors according to CFG: BB#1 BB#10
	%vreg3<def> = PHI %vreg32, <BB#1>, %vreg29, <BB#10>; GPR32:%vreg3,%vreg32,%vreg29
	%vreg4<def> = PHI %vreg35, <BB#1>, %vreg28, <BB#10>; GPR32:%vreg4,%vreg35,%vreg28
	%vreg74<def> = LDRi32_r32 <fi#3>, 0; mem:LD4[FixedStack3] GPR32:%vreg74
	GID %CONFIG<imp-def>
	%CONFIG<def> = MOVTS32_core %vreg74<kill>; GPR32:%vreg74
	GIE %CONFIG<imp-def>
	%vreg38<def> = IMULrr_r32 %vreg4, %vreg33, %STATUS<imp-def,dead>; GPR32:%vreg38,%vreg4,%vreg33
	%vreg39<def> = LSL32ri %vreg38<kill>, 2, %STATUS<imp-def,dead>; GPR32:%vreg39,%vreg38
	%vreg37<def> = MOVi32ri 0; GPR32:%vreg37
	%vreg5<def> = ADDrr_r32 %vreg30, %vreg39<kill>, %STATUS<imp-def,dead>; GPR32:%vreg5,%vreg30,%vreg39
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %for.body9.preheader
    Predecessors according to CFG: BB#2 BB#9
	%vreg6<def> = PHI %vreg3, <BB#2>, %vreg27, <BB#9>; GPR32:%vreg6,%vreg3,%vreg27
	%vreg7<def> = PHI %vreg0, <BB#2>, %vreg26, <BB#9>; GPR32:%vreg7,%vreg0,%vreg26
	%vreg8<def> = PHI %vreg37, <BB#2>, %vreg25, <BB#9>; GPR32:%vreg8,%vreg37,%vreg25
	%vreg41<def> = MOVi32ri 0; GPR32:%vreg41
	%vreg40<def> = MOVi32ri 0; GPR32:%vreg40
	%vreg42<def> = REG_SEQUENCE %vreg40, isub_hi, %vreg41<kill>, isub_lo; FPR64_with_isub_hi_in_FPR32:%vreg42 GPR32:%vreg40,%vreg41
	STRi64 %vreg42, <fi#0>, 24; mem:ST8[%1+24] FPR64_with_isub_hi_in_FPR32:%vreg42
	STRi64 %vreg42, <fi#0>, 16; mem:ST8[%1+16] FPR64_with_isub_hi_in_FPR32:%vreg42
	STRi64 %vreg42, <fi#0>, 8; mem:ST8[%1+8] FPR64_with_isub_hi_in_FPR32:%vreg42
	STRi64 %vreg42, <fi#0>, 0; mem:ST8[%1] FPR64_with_isub_hi_in_FPR32:%vreg42
	BNONE32 <BB#5>, %STATUS<imp-use>
    Successors according to CFG: BB#5(?%)

BB#4: derived from LLVM BB %for.cond64.preheader
    Predecessors according to CFG: BB#7
	%vreg60<def> = MOVi32ri 0; GPR32:%vreg60
	BNONE32 <BB#8>, %STATUS<imp-use>
    Successors according to CFG: BB#8(?%)

BB#5: derived from LLVM BB %for.body9
    Predecessors according to CFG: BB#3 BB#7
	%vreg9<def> = PHI %vreg7, <BB#3>, %vreg20, <BB#7>; GPR32:%vreg9,%vreg7,%vreg20
	%vreg10<def> = PHI %vreg40, <BB#3>, %vreg19, <BB#7>; GPR32:%vreg10,%vreg40,%vreg19
	%vreg44<def> = LSL32ri %vreg10, 2, %STATUS<imp-def,dead>; GPR32:%vreg44,%vreg10
	%vreg45<def> = ADDrr_r32 %vreg5, %vreg44<kill>, %STATUS<imp-def,dead>; GPR32:%vreg45,%vreg5,%vreg44
	%vreg11<def> = COPY %vreg2; GPR32:%vreg11,%vreg2
	%vreg43<def> = MOVi32ri 0; GPR32:%vreg43
	%vreg12<def> = LDRf32 %vreg45<kill>, 0; mem:Volatile LD4[%add.ptr10](tbaa=!2) FPR32:%vreg12 GPR32:%vreg45
    Successors according to CFG: BB#6(?%)

BB#6: derived from LLVM BB %for.body13
    Predecessors according to CFG: BB#5 BB#6
	%vreg13<def> = PHI %vreg11, <BB#5>, %vreg18, <BB#6>; GPR32:%vreg13,%vreg11,%vreg18
	%vreg14<def> = PHI %vreg9, <BB#5>, %vreg17, <BB#6>; GPR32:%vreg14,%vreg9,%vreg17
	%vreg15<def> = PHI %vreg43, <BB#5>, %vreg16, <BB#6>; GPR32:%vreg15,%vreg43,%vreg16
	%vreg46<def> = LDRf32 %vreg14, -8; mem:Volatile LD4[%scevgep8](tbaa=!2) FPR32:%vreg46 GPR32:%vreg14
	%vreg18<def> = ADDri_r32 %vreg13, 16, %STATUS<imp-def,dead>; GPR32:%vreg18,%vreg13
	%vreg17<def> = ADDri_r32 %vreg14, 16, %STATUS<imp-def,dead>; GPR32:%vreg17,%vreg14
	%vreg47<def> = LDRf32 %vreg14, -4; mem:Volatile LD4[%scevgep9](tbaa=!2) FPR32:%vreg47 GPR32:%vreg14
	%vreg16<def> = ADDri_r32 %vreg15, 4, %STATUS<imp-def,dead>; GPR32:%vreg16,%vreg15
	%vreg48<def> = LDRf32 %vreg14, 0; mem:Volatile LD4[%lsr.iv5](tbaa=!2) FPR32:%vreg48 GPR32:%vreg14
	%vreg49<def> = LDRf32 %vreg14, 4; mem:Volatile LD4[%scevgep7](tbaa=!2) FPR32:%vreg49 GPR32:%vreg14
	%vreg50<def> = LDRf32 %vreg13, -8; mem:LD4[%scevgep15](tbaa=!2) FPR32:%vreg50 GPR32:%vreg13
	%vreg75<def> = LDRi32_r32 <fi#2>, 0; mem:LD4[FixedStack2] GPR32:%vreg75
	GID %CONFIG<imp-def>
	%CONFIG<def> = MOVTS32_core %vreg75<kill>; GPR32:%vreg75
	GIE %CONFIG<imp-def>
	%vreg51<def,tied1> = FMADDrr_r32 %vreg50<tied0>, %vreg12, %vreg46<kill>, %STATUS<imp-def,dead>; FPR32:%vreg51,%vreg50,%vreg12,%vreg46
	STRf32 %vreg51<kill>, %vreg13, -8; mem:ST4[%scevgep15](tbaa=!2) FPR32:%vreg51 GPR32:%vreg13
	%vreg52<def> = LDRf32 %vreg13, -4; mem:LD4[%scevgep17](tbaa=!2) FPR32:%vreg52 GPR32:%vreg13
	%vreg53<def,tied1> = FMADDrr_r32 %vreg52<tied0>, %vreg12, %vreg47<kill>, %STATUS<imp-def,dead>; FPR32:%vreg53,%vreg52,%vreg12,%vreg47
	STRf32 %vreg53<kill>, %vreg13, -4; mem:ST4[%scevgep17](tbaa=!2) FPR32:%vreg53 GPR32:%vreg13
	%vreg54<def> = LDRf32 %vreg13, 0; mem:LD4[%lsr.iv1214](tbaa=!2) FPR32:%vreg54 GPR32:%vreg13
	%vreg55<def,tied1> = FMADDrr_r32 %vreg54<tied0>, %vreg12, %vreg48<kill>, %STATUS<imp-def,dead>; FPR32:%vreg55,%vreg54,%vreg12,%vreg48
	STRf32 %vreg55<kill>, %vreg13, 0; mem:ST4[%lsr.iv1214](tbaa=!2) FPR32:%vreg55 GPR32:%vreg13
	%vreg56<def> = LDRf32 %vreg13, 4; mem:LD4[%scevgep16](tbaa=!2) FPR32:%vreg56 GPR32:%vreg13
	%vreg57<def,tied1> = FMADDrr_r32 %vreg56<tied0>, %vreg12, %vreg49<kill>, %STATUS<imp-def,dead>; FPR32:%vreg57,%vreg56,%vreg12,%vreg49
	%vreg58<def> = CMPri_r32 %vreg16, 8, %STATUS<imp-def>; GPR32:%vreg58,%vreg16
	STRf32 %vreg57<kill>, %vreg13, 4; mem:ST4[%scevgep16](tbaa=!2) FPR32:%vreg57 GPR32:%vreg13
	BCC <BB#6>, 8, %STATUS<imp-use>
	BNONE32 <BB#7>, %STATUS<imp-use>
    Successors according to CFG: BB#6(0x7c000000 / 0x80000000 = 96.88%) BB#7(0x04000000 / 0x80000000 = 3.12%)

BB#7: derived from LLVM BB %for.end60
    Predecessors according to CFG: BB#6
	%vreg20<def> = ADDrr_r32 %vreg9, %vreg1, %STATUS<imp-def,dead>; GPR32:%vreg20,%vreg9,%vreg1
	%vreg19<def> = ADDri_r32 %vreg10, 1, %STATUS<imp-def,dead>; GPR32:%vreg19,%vreg10
	%vreg59<def> = CMPrr_r32 %vreg19, %vreg33, %STATUS<imp-def>; GPR32:%vreg59,%vreg19,%vreg33
	BCC <BB#4>, 0, %STATUS<imp-use>
	BNONE32 <BB#5>, %STATUS<imp-use>
    Successors according to CFG: BB#4(0x04000000 / 0x80000000 = 3.12%) BB#5(0x7c000000 / 0x80000000 = 96.88%)

BB#8: derived from LLVM BB %for.body66
    Predecessors according to CFG: BB#4 BB#8
	%vreg21<def> = PHI %vreg6, <BB#4>, %vreg24, <BB#8>; GPR32:%vreg21,%vreg6,%vreg24
	%vreg22<def> = PHI %vreg60, <BB#4>, %vreg23, <BB#8>; GPR32:%vreg22,%vreg60,%vreg23
	%vreg61<def> = MOViPTR <fi#0>, 0; GPR32:%vreg61
	%vreg62<def> = ADDrr_r32 %vreg61<kill>, %vreg22, %STATUS<imp-def,dead>; GPR32:%vreg62,%vreg61,%vreg22
	%vreg63<def> = LDRf32 %vreg62<kill>, 0; mem:LD4[%sunkaddr30](tbaa=!2) FPR32:%vreg63 GPR32:%vreg62
	%vreg24<def> = ADDri_r32 %vreg21, 4, %STATUS<imp-def,dead>; GPR32:%vreg24,%vreg21
	%vreg23<def> = ADDri_r32 %vreg22, 4, %STATUS<imp-def,dead>; GPR32:%vreg23,%vreg22
	%vreg64<def> = LDRf32 %vreg21, 0; mem:Volatile LD4[%lsr.iv24](tbaa=!2) FPR32:%vreg64 GPR32:%vreg21
	%vreg76<def> = LDRi32_r32 <fi#2>, 0; mem:LD4[FixedStack2] GPR32:%vreg76
	GID %CONFIG<imp-def>
	%CONFIG<def> = MOVTS32_core %vreg76<kill>; GPR32:%vreg76
	GIE %CONFIG<imp-def>
	%vreg65<def> = FADDrr_r32 %vreg63<kill>, %vreg64<kill>, %STATUS<imp-def,dead>; FPR32:%vreg65,%vreg63,%vreg64
	%vreg66<def> = CMPri_r32 %vreg23, 32, %STATUS<imp-def>; GPR32:%vreg66,%vreg23
	STRf32 %vreg65<kill>, %vreg21, 0; mem:Volatile ST4[%lsr.iv24](tbaa=!2) FPR32:%vreg65 GPR32:%vreg21
	BCC <BB#8>, 1, %STATUS<imp-use>
	BNONE32 <BB#9>, %STATUS<imp-use>
    Successors according to CFG: BB#9(0x04000000 / 0x80000000 = 3.12%) BB#8(0x7c000000 / 0x80000000 = 96.88%)

BB#9: derived from LLVM BB %for.end75
    Predecessors according to CFG: BB#8
	%vreg27<def> = ADDri_r32 %vreg6, 32, %STATUS<imp-def,dead>; GPR32:%vreg27,%vreg6
	%vreg26<def> = ADDri_r32 %vreg7, 32, %STATUS<imp-def,dead>; GPR32:%vreg26,%vreg7
	%vreg25<def> = ADDri_r32 %vreg8, 8, %STATUS<imp-def,dead>; GPR32:%vreg25,%vreg8
	%vreg67<def> = CMPrr_r32 %vreg25, %vreg33, %STATUS<imp-def>; GPR32:%vreg67,%vreg25,%vreg33
	BCC <BB#3>, 8, %STATUS<imp-use>
	BNONE32 <BB#10>, %STATUS<imp-use>
    Successors according to CFG: BB#3(0x7c000000 / 0x80000000 = 96.88%) BB#10(0x04000000 / 0x80000000 = 3.12%)

BB#10: derived from LLVM BB %for.end78
    Predecessors according to CFG: BB#9
	%vreg29<def> = ADDrr_r32 %vreg3, %vreg1, %STATUS<imp-def,dead>; GPR32:%vreg29,%vreg3,%vreg1
	%vreg28<def> = ADDri_r32 %vreg4, 1, %STATUS<imp-def,dead>; GPR32:%vreg28,%vreg4
	%vreg68<def> = CMPrr_r32 %vreg28, %vreg33, %STATUS<imp-def>; GPR32:%vreg68,%vreg28,%vreg33
	BCC <BB#2>, 1, %STATUS<imp-use>
	BNONE32 <BB#11>, %STATUS<imp-use>
    Successors according to CFG: BB#11(0x04000000 / 0x80000000 = 3.12%) BB#2(0x7c000000 / 0x80000000 = 96.88%)

BB#11: derived from LLVM BB %for.end81
    Predecessors according to CFG: BB#0 BB#10
	%vreg77<def> = LDRi32_r32 <fi#1>, 0; mem:LD4[FixedStack1] GPR32:%vreg77
	GID
	%CONFIG<def> = MOVTS32_core %vreg77<kill>; GPR32:%vreg77
	GIE %CONFIG<imp-use,kill>
	RTS

# End machine code for function matmac.

# *** IR Dump Before Remove dead machine instructions ***:
# Machine code for function matmac: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=32, align=8, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=4, align=4, at location [SP]
Function Live Ins: %R0 in %vreg30, %R1 in %vreg31, %R2 in %vreg32, %R3 in %vreg33

BB#12: 
    Live Ins: %R0 %R1 %R2 %R3
	GID %CONFIG<imp-def>
	%vreg71<def> = MOVFS32_core %CONFIG<kill>; GPR32:%vreg71
	STRi32_r32 %vreg71, <fi#1>, 0; mem:ST4[FixedStack1] GPR32:%vreg71
	%vreg72<def> = MOVi32ri 65535; GPR32:%vreg72
	%vreg73<def,tied1> = MOVTi32ri %vreg72<tied0>, 65521; GPR32:%vreg73,%vreg72
	%vreg69<def> = ANDrr_r32 %vreg71<kill>, %vreg73<kill>, %STATUS<imp-def>; GPR32:%vreg69,%vreg71,%vreg73
	STRi32_r32 %vreg69, <fi#2>, 0; mem:ST4[FixedStack2] GPR32:%vreg69
	%vreg70<def,tied1> = MOVTi32ri %vreg71<kill,tied0>, 72; GPR32:%vreg70,%vreg71
	STRi32_r32 %vreg70, <fi#3>, 0; mem:ST4[FixedStack3] GPR32:%vreg70
	GIE %CONFIG<imp-use,kill>
    Successors according to CFG: BB#0(?%)

BB#0: derived from LLVM BB %entry
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#12
	%vreg33<def> = COPY %R3; GPR32:%vreg33
	%vreg32<def> = COPY %R2; GPR32:%vreg32
	%vreg31<def> = COPY %R1; GPR32:%vreg31
	%vreg30<def> = COPY %R0; GPR32:%vreg30
	%vreg34<def> = CMPri_r32 %vreg33, 1, %STATUS<imp-def>; GPR32:%vreg34,%vreg33
	BCC <BB#11>, 8, %STATUS<imp-use>
	BNONE32 <BB#1>, %STATUS<imp-use>
    Successors according to CFG: BB#1(0x50000000 / 0x80000000 = 62.50%) BB#11(0x30000000 / 0x80000000 = 37.50%)

BB#1: derived from LLVM BB %for.body3.lr.ph.preheader
    Predecessors according to CFG: BB#0
	%vreg1<def> = LSL32ri %vreg33, 2, %STATUS<imp-def,dead>; GPR32:%vreg1,%vreg33
	%vreg0<def> = ADDri_r32 %vreg31, 8, %STATUS<imp-def,dead>; GPR32:%vreg0,%vreg31
	%vreg36<def> = MOViPTR <fi#0>, 0; GPR32:%vreg36
	%vreg2<def> = ADDri_r32 %vreg36<kill>, 8, %STATUS<imp-def,dead>; GPR32:%vreg2,%vreg36
	%vreg35<def> = MOVi32ri 0; GPR32:%vreg35
    Successors according to CFG: BB#2(?%)

BB#2: derived from LLVM BB %for.body3.lr.ph
    Predecessors according to CFG: BB#1 BB#10
	%vreg3<def> = PHI %vreg32, <BB#1>, %vreg29, <BB#10>; GPR32:%vreg3,%vreg32,%vreg29
	%vreg4<def> = PHI %vreg35, <BB#1>, %vreg28, <BB#10>; GPR32:%vreg4,%vreg35,%vreg28
	%vreg74<def> = LDRi32_r32 <fi#3>, 0; mem:LD4[FixedStack3] GPR32:%vreg74
	GID %CONFIG<imp-def>
	%CONFIG<def> = MOVTS32_core %vreg74<kill>; GPR32:%vreg74
	GIE %CONFIG<imp-def>
	%vreg38<def> = IMULrr_r32 %vreg4, %vreg33, %STATUS<imp-def,dead>; GPR32:%vreg38,%vreg4,%vreg33
	%vreg39<def> = LSL32ri %vreg38<kill>, 2, %STATUS<imp-def,dead>; GPR32:%vreg39,%vreg38
	%vreg37<def> = MOVi32ri 0; GPR32:%vreg37
	%vreg5<def> = ADDrr_r32 %vreg30, %vreg39<kill>, %STATUS<imp-def,dead>; GPR32:%vreg5,%vreg30,%vreg39
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %for.body9.preheader
    Predecessors according to CFG: BB#2 BB#9
	%vreg6<def> = PHI %vreg3, <BB#2>, %vreg27, <BB#9>; GPR32:%vreg6,%vreg3,%vreg27
	%vreg7<def> = PHI %vreg0, <BB#2>, %vreg26, <BB#9>; GPR32:%vreg7,%vreg0,%vreg26
	%vreg8<def> = PHI %vreg37, <BB#2>, %vreg25, <BB#9>; GPR32:%vreg8,%vreg37,%vreg25
	%vreg41<def> = MOVi32ri 0; GPR32:%vreg41
	%vreg40<def> = MOVi32ri 0; GPR32:%vreg40
	%vreg42<def> = REG_SEQUENCE %vreg40, isub_hi, %vreg41<kill>, isub_lo; FPR64_with_isub_hi_in_FPR32:%vreg42 GPR32:%vreg40,%vreg41
	STRi64 %vreg42, <fi#0>, 24; mem:ST8[%1+24] FPR64_with_isub_hi_in_FPR32:%vreg42
	STRi64 %vreg42, <fi#0>, 16; mem:ST8[%1+16] FPR64_with_isub_hi_in_FPR32:%vreg42
	STRi64 %vreg42, <fi#0>, 8; mem:ST8[%1+8] FPR64_with_isub_hi_in_FPR32:%vreg42
	STRi64 %vreg42, <fi#0>, 0; mem:ST8[%1] FPR64_with_isub_hi_in_FPR32:%vreg42
	BNONE32 <BB#5>, %STATUS<imp-use>
    Successors according to CFG: BB#5(?%)

BB#4: derived from LLVM BB %for.cond64.preheader
    Predecessors according to CFG: BB#7
	%vreg60<def> = MOVi32ri 0; GPR32:%vreg60
	BNONE32 <BB#8>, %STATUS<imp-use>
    Successors according to CFG: BB#8(?%)

BB#5: derived from LLVM BB %for.body9
    Predecessors according to CFG: BB#3 BB#7
	%vreg9<def> = PHI %vreg7, <BB#3>, %vreg20, <BB#7>; GPR32:%vreg9,%vreg7,%vreg20
	%vreg10<def> = PHI %vreg40, <BB#3>, %vreg19, <BB#7>; GPR32:%vreg10,%vreg40,%vreg19
	%vreg44<def> = LSL32ri %vreg10, 2, %STATUS<imp-def,dead>; GPR32:%vreg44,%vreg10
	%vreg45<def> = ADDrr_r32 %vreg5, %vreg44<kill>, %STATUS<imp-def,dead>; GPR32:%vreg45,%vreg5,%vreg44
	%vreg11<def> = COPY %vreg2; GPR32:%vreg11,%vreg2
	%vreg43<def> = MOVi32ri 0; GPR32:%vreg43
	%vreg12<def> = LDRf32 %vreg45<kill>, 0; mem:Volatile LD4[%add.ptr10](tbaa=!2) FPR32:%vreg12 GPR32:%vreg45
    Successors according to CFG: BB#6(?%)

BB#6: derived from LLVM BB %for.body13
    Predecessors according to CFG: BB#5 BB#6
	%vreg13<def> = PHI %vreg11, <BB#5>, %vreg18, <BB#6>; GPR32:%vreg13,%vreg11,%vreg18
	%vreg14<def> = PHI %vreg9, <BB#5>, %vreg17, <BB#6>; GPR32:%vreg14,%vreg9,%vreg17
	%vreg15<def> = PHI %vreg43, <BB#5>, %vreg16, <BB#6>; GPR32:%vreg15,%vreg43,%vreg16
	%vreg46<def> = LDRf32 %vreg14, -8; mem:Volatile LD4[%scevgep8](tbaa=!2) FPR32:%vreg46 GPR32:%vreg14
	%vreg18<def> = ADDri_r32 %vreg13, 16, %STATUS<imp-def,dead>; GPR32:%vreg18,%vreg13
	%vreg17<def> = ADDri_r32 %vreg14, 16, %STATUS<imp-def,dead>; GPR32:%vreg17,%vreg14
	%vreg47<def> = LDRf32 %vreg14, -4; mem:Volatile LD4[%scevgep9](tbaa=!2) FPR32:%vreg47 GPR32:%vreg14
	%vreg16<def> = ADDri_r32 %vreg15, 4, %STATUS<imp-def,dead>; GPR32:%vreg16,%vreg15
	%vreg48<def> = LDRf32 %vreg14, 0; mem:Volatile LD4[%lsr.iv5](tbaa=!2) FPR32:%vreg48 GPR32:%vreg14
	%vreg49<def> = LDRf32 %vreg14, 4; mem:Volatile LD4[%scevgep7](tbaa=!2) FPR32:%vreg49 GPR32:%vreg14
	%vreg50<def> = LDRf32 %vreg13, -8; mem:LD4[%scevgep15](tbaa=!2) FPR32:%vreg50 GPR32:%vreg13
	%vreg75<def> = LDRi32_r32 <fi#2>, 0; mem:LD4[FixedStack2] GPR32:%vreg75
	GID %CONFIG<imp-def>
	%CONFIG<def> = MOVTS32_core %vreg75<kill>; GPR32:%vreg75
	GIE %CONFIG<imp-def>
	%vreg51<def,tied1> = FMADDrr_r32 %vreg50<tied0>, %vreg12, %vreg46<kill>, %STATUS<imp-def,dead>; FPR32:%vreg51,%vreg50,%vreg12,%vreg46
	STRf32 %vreg51<kill>, %vreg13, -8; mem:ST4[%scevgep15](tbaa=!2) FPR32:%vreg51 GPR32:%vreg13
	%vreg52<def> = LDRf32 %vreg13, -4; mem:LD4[%scevgep17](tbaa=!2) FPR32:%vreg52 GPR32:%vreg13
	%vreg53<def,tied1> = FMADDrr_r32 %vreg52<tied0>, %vreg12, %vreg47<kill>, %STATUS<imp-def,dead>; FPR32:%vreg53,%vreg52,%vreg12,%vreg47
	STRf32 %vreg53<kill>, %vreg13, -4; mem:ST4[%scevgep17](tbaa=!2) FPR32:%vreg53 GPR32:%vreg13
	%vreg54<def> = LDRf32 %vreg13, 0; mem:LD4[%lsr.iv1214](tbaa=!2) FPR32:%vreg54 GPR32:%vreg13
	%vreg55<def,tied1> = FMADDrr_r32 %vreg54<tied0>, %vreg12, %vreg48<kill>, %STATUS<imp-def,dead>; FPR32:%vreg55,%vreg54,%vreg12,%vreg48
	STRf32 %vreg55<kill>, %vreg13, 0; mem:ST4[%lsr.iv1214](tbaa=!2) FPR32:%vreg55 GPR32:%vreg13
	%vreg56<def> = LDRf32 %vreg13, 4; mem:LD4[%scevgep16](tbaa=!2) FPR32:%vreg56 GPR32:%vreg13
	%vreg57<def,tied1> = FMADDrr_r32 %vreg56<tied0>, %vreg12, %vreg49<kill>, %STATUS<imp-def,dead>; FPR32:%vreg57,%vreg56,%vreg12,%vreg49
	%vreg58<def> = CMPri_r32 %vreg16, 8, %STATUS<imp-def>; GPR32:%vreg58,%vreg16
	STRf32 %vreg57<kill>, %vreg13, 4; mem:ST4[%scevgep16](tbaa=!2) FPR32:%vreg57 GPR32:%vreg13
	BCC <BB#6>, 8, %STATUS<imp-use>
	BNONE32 <BB#7>, %STATUS<imp-use>
    Successors according to CFG: BB#6(0x7c000000 / 0x80000000 = 96.88%) BB#7(0x04000000 / 0x80000000 = 3.12%)

BB#7: derived from LLVM BB %for.end60
    Predecessors according to CFG: BB#6
	%vreg20<def> = ADDrr_r32 %vreg9, %vreg1, %STATUS<imp-def,dead>; GPR32:%vreg20,%vreg9,%vreg1
	%vreg19<def> = ADDri_r32 %vreg10, 1, %STATUS<imp-def,dead>; GPR32:%vreg19,%vreg10
	%vreg59<def> = CMPrr_r32 %vreg19, %vreg33, %STATUS<imp-def>; GPR32:%vreg59,%vreg19,%vreg33
	BCC <BB#4>, 0, %STATUS<imp-use>
	BNONE32 <BB#5>, %STATUS<imp-use>
    Successors according to CFG: BB#4(0x04000000 / 0x80000000 = 3.12%) BB#5(0x7c000000 / 0x80000000 = 96.88%)

BB#8: derived from LLVM BB %for.body66
    Predecessors according to CFG: BB#4 BB#8
	%vreg21<def> = PHI %vreg6, <BB#4>, %vreg24, <BB#8>; GPR32:%vreg21,%vreg6,%vreg24
	%vreg22<def> = PHI %vreg60, <BB#4>, %vreg23, <BB#8>; GPR32:%vreg22,%vreg60,%vreg23
	%vreg61<def> = MOViPTR <fi#0>, 0; GPR32:%vreg61
	%vreg62<def> = ADDrr_r32 %vreg61<kill>, %vreg22, %STATUS<imp-def,dead>; GPR32:%vreg62,%vreg61,%vreg22
	%vreg63<def> = LDRf32 %vreg62<kill>, 0; mem:LD4[%sunkaddr30](tbaa=!2) FPR32:%vreg63 GPR32:%vreg62
	%vreg24<def> = ADDri_r32 %vreg21, 4, %STATUS<imp-def,dead>; GPR32:%vreg24,%vreg21
	%vreg23<def> = ADDri_r32 %vreg22, 4, %STATUS<imp-def,dead>; GPR32:%vreg23,%vreg22
	%vreg64<def> = LDRf32 %vreg21, 0; mem:Volatile LD4[%lsr.iv24](tbaa=!2) FPR32:%vreg64 GPR32:%vreg21
	%vreg76<def> = LDRi32_r32 <fi#2>, 0; mem:LD4[FixedStack2] GPR32:%vreg76
	GID %CONFIG<imp-def>
	%CONFIG<def> = MOVTS32_core %vreg76<kill>; GPR32:%vreg76
	GIE %CONFIG<imp-def>
	%vreg65<def> = FADDrr_r32 %vreg63<kill>, %vreg64<kill>, %STATUS<imp-def,dead>; FPR32:%vreg65,%vreg63,%vreg64
	%vreg66<def> = CMPri_r32 %vreg23, 32, %STATUS<imp-def>; GPR32:%vreg66,%vreg23
	STRf32 %vreg65<kill>, %vreg21, 0; mem:Volatile ST4[%lsr.iv24](tbaa=!2) FPR32:%vreg65 GPR32:%vreg21
	BCC <BB#8>, 1, %STATUS<imp-use>
	BNONE32 <BB#9>, %STATUS<imp-use>
    Successors according to CFG: BB#9(0x04000000 / 0x80000000 = 3.12%) BB#8(0x7c000000 / 0x80000000 = 96.88%)

BB#9: derived from LLVM BB %for.end75
    Predecessors according to CFG: BB#8
	%vreg27<def> = ADDri_r32 %vreg6, 32, %STATUS<imp-def,dead>; GPR32:%vreg27,%vreg6
	%vreg26<def> = ADDri_r32 %vreg7, 32, %STATUS<imp-def,dead>; GPR32:%vreg26,%vreg7
	%vreg25<def> = ADDri_r32 %vreg8, 8, %STATUS<imp-def,dead>; GPR32:%vreg25,%vreg8
	%vreg67<def> = CMPrr_r32 %vreg25, %vreg33, %STATUS<imp-def>; GPR32:%vreg67,%vreg25,%vreg33
	BCC <BB#3>, 8, %STATUS<imp-use>
	BNONE32 <BB#10>, %STATUS<imp-use>
    Successors according to CFG: BB#3(0x7c000000 / 0x80000000 = 96.88%) BB#10(0x04000000 / 0x80000000 = 3.12%)

BB#10: derived from LLVM BB %for.end78
    Predecessors according to CFG: BB#9
	%vreg29<def> = ADDrr_r32 %vreg3, %vreg1, %STATUS<imp-def,dead>; GPR32:%vreg29,%vreg3,%vreg1
	%vreg28<def> = ADDri_r32 %vreg4, 1, %STATUS<imp-def,dead>; GPR32:%vreg28,%vreg4
	%vreg68<def> = CMPrr_r32 %vreg28, %vreg33, %STATUS<imp-def>; GPR32:%vreg68,%vreg28,%vreg33
	BCC <BB#2>, 1, %STATUS<imp-use>
	BNONE32 <BB#11>, %STATUS<imp-use>
    Successors according to CFG: BB#11(0x04000000 / 0x80000000 = 3.12%) BB#2(0x7c000000 / 0x80000000 = 96.88%)

BB#11: derived from LLVM BB %for.end81
    Predecessors according to CFG: BB#0 BB#10
	%vreg77<def> = LDRi32_r32 <fi#1>, 0; mem:LD4[FixedStack1] GPR32:%vreg77
	GID
	%CONFIG<def> = MOVTS32_core %vreg77<kill>; GPR32:%vreg77
	GIE %CONFIG<imp-use,kill>
	RTS

# End machine code for function matmac.

# *** IR Dump After Remove dead machine instructions ***:
# Machine code for function matmac: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=32, align=8, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=4, align=4, at location [SP]
Function Live Ins: %R0 in %vreg30, %R1 in %vreg31, %R2 in %vreg32, %R3 in %vreg33

BB#12: 
    Live Ins: %R0 %R1 %R2 %R3
	GID %CONFIG<imp-def>
	%vreg71<def> = MOVFS32_core %CONFIG<kill>; GPR32:%vreg71
	STRi32_r32 %vreg71, <fi#1>, 0; mem:ST4[FixedStack1] GPR32:%vreg71
	%vreg72<def> = MOVi32ri 65535; GPR32:%vreg72
	%vreg73<def,tied1> = MOVTi32ri %vreg72<tied0>, 65521; GPR32:%vreg73,%vreg72
	%vreg69<def> = ANDrr_r32 %vreg71<kill>, %vreg73<kill>, %STATUS<imp-def>; GPR32:%vreg69,%vreg71,%vreg73
	STRi32_r32 %vreg69, <fi#2>, 0; mem:ST4[FixedStack2] GPR32:%vreg69
	%vreg70<def,tied1> = MOVTi32ri %vreg71<kill,tied0>, 72; GPR32:%vreg70,%vreg71
	STRi32_r32 %vreg70, <fi#3>, 0; mem:ST4[FixedStack3] GPR32:%vreg70
	GIE %CONFIG<imp-use,kill>
    Successors according to CFG: BB#0(?%)

BB#0: derived from LLVM BB %entry
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#12
	%vreg33<def> = COPY %R3; GPR32:%vreg33
	%vreg32<def> = COPY %R2; GPR32:%vreg32
	%vreg31<def> = COPY %R1; GPR32:%vreg31
	%vreg30<def> = COPY %R0; GPR32:%vreg30
	%vreg34<def> = CMPri_r32 %vreg33, 1, %STATUS<imp-def>; GPR32:%vreg34,%vreg33
	BCC <BB#11>, 8, %STATUS<imp-use>
	BNONE32 <BB#1>, %STATUS<imp-use>
    Successors according to CFG: BB#1(0x50000000 / 0x80000000 = 62.50%) BB#11(0x30000000 / 0x80000000 = 37.50%)

BB#1: derived from LLVM BB %for.body3.lr.ph.preheader
    Predecessors according to CFG: BB#0
	%vreg1<def> = LSL32ri %vreg33, 2, %STATUS<imp-def,dead>; GPR32:%vreg1,%vreg33
	%vreg0<def> = ADDri_r32 %vreg31, 8, %STATUS<imp-def,dead>; GPR32:%vreg0,%vreg31
	%vreg36<def> = MOViPTR <fi#0>, 0; GPR32:%vreg36
	%vreg2<def> = ADDri_r32 %vreg36<kill>, 8, %STATUS<imp-def,dead>; GPR32:%vreg2,%vreg36
	%vreg35<def> = MOVi32ri 0; GPR32:%vreg35
    Successors according to CFG: BB#2(?%)

BB#2: derived from LLVM BB %for.body3.lr.ph
    Predecessors according to CFG: BB#1 BB#10
	%vreg3<def> = PHI %vreg32, <BB#1>, %vreg29, <BB#10>; GPR32:%vreg3,%vreg32,%vreg29
	%vreg4<def> = PHI %vreg35, <BB#1>, %vreg28, <BB#10>; GPR32:%vreg4,%vreg35,%vreg28
	%vreg74<def> = LDRi32_r32 <fi#3>, 0; mem:LD4[FixedStack3] GPR32:%vreg74
	GID %CONFIG<imp-def>
	%CONFIG<def> = MOVTS32_core %vreg74<kill>; GPR32:%vreg74
	GIE %CONFIG<imp-def>
	%vreg38<def> = IMULrr_r32 %vreg4, %vreg33, %STATUS<imp-def,dead>; GPR32:%vreg38,%vreg4,%vreg33
	%vreg39<def> = LSL32ri %vreg38<kill>, 2, %STATUS<imp-def,dead>; GPR32:%vreg39,%vreg38
	%vreg37<def> = MOVi32ri 0; GPR32:%vreg37
	%vreg5<def> = ADDrr_r32 %vreg30, %vreg39<kill>, %STATUS<imp-def,dead>; GPR32:%vreg5,%vreg30,%vreg39
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %for.body9.preheader
    Predecessors according to CFG: BB#2 BB#9
	%vreg6<def> = PHI %vreg3, <BB#2>, %vreg27, <BB#9>; GPR32:%vreg6,%vreg3,%vreg27
	%vreg7<def> = PHI %vreg0, <BB#2>, %vreg26, <BB#9>; GPR32:%vreg7,%vreg0,%vreg26
	%vreg8<def> = PHI %vreg37, <BB#2>, %vreg25, <BB#9>; GPR32:%vreg8,%vreg37,%vreg25
	%vreg41<def> = MOVi32ri 0; GPR32:%vreg41
	%vreg40<def> = MOVi32ri 0; GPR32:%vreg40
	%vreg42<def> = REG_SEQUENCE %vreg40, isub_hi, %vreg41<kill>, isub_lo; FPR64_with_isub_hi_in_FPR32:%vreg42 GPR32:%vreg40,%vreg41
	STRi64 %vreg42, <fi#0>, 24; mem:ST8[%1+24] FPR64_with_isub_hi_in_FPR32:%vreg42
	STRi64 %vreg42, <fi#0>, 16; mem:ST8[%1+16] FPR64_with_isub_hi_in_FPR32:%vreg42
	STRi64 %vreg42, <fi#0>, 8; mem:ST8[%1+8] FPR64_with_isub_hi_in_FPR32:%vreg42
	STRi64 %vreg42, <fi#0>, 0; mem:ST8[%1] FPR64_with_isub_hi_in_FPR32:%vreg42
	BNONE32 <BB#5>, %STATUS<imp-use>
    Successors according to CFG: BB#5(?%)

BB#4: derived from LLVM BB %for.cond64.preheader
    Predecessors according to CFG: BB#7
	%vreg60<def> = MOVi32ri 0; GPR32:%vreg60
	BNONE32 <BB#8>, %STATUS<imp-use>
    Successors according to CFG: BB#8(?%)

BB#5: derived from LLVM BB %for.body9
    Predecessors according to CFG: BB#3 BB#7
	%vreg9<def> = PHI %vreg7, <BB#3>, %vreg20, <BB#7>; GPR32:%vreg9,%vreg7,%vreg20
	%vreg10<def> = PHI %vreg40, <BB#3>, %vreg19, <BB#7>; GPR32:%vreg10,%vreg40,%vreg19
	%vreg44<def> = LSL32ri %vreg10, 2, %STATUS<imp-def,dead>; GPR32:%vreg44,%vreg10
	%vreg45<def> = ADDrr_r32 %vreg5, %vreg44<kill>, %STATUS<imp-def,dead>; GPR32:%vreg45,%vreg5,%vreg44
	%vreg11<def> = COPY %vreg2; GPR32:%vreg11,%vreg2
	%vreg43<def> = MOVi32ri 0; GPR32:%vreg43
	%vreg12<def> = LDRf32 %vreg45<kill>, 0; mem:Volatile LD4[%add.ptr10](tbaa=!2) FPR32:%vreg12 GPR32:%vreg45
    Successors according to CFG: BB#6(?%)

BB#6: derived from LLVM BB %for.body13
    Predecessors according to CFG: BB#5 BB#6
	%vreg13<def> = PHI %vreg11, <BB#5>, %vreg18, <BB#6>; GPR32:%vreg13,%vreg11,%vreg18
	%vreg14<def> = PHI %vreg9, <BB#5>, %vreg17, <BB#6>; GPR32:%vreg14,%vreg9,%vreg17
	%vreg15<def> = PHI %vreg43, <BB#5>, %vreg16, <BB#6>; GPR32:%vreg15,%vreg43,%vreg16
	%vreg46<def> = LDRf32 %vreg14, -8; mem:Volatile LD4[%scevgep8](tbaa=!2) FPR32:%vreg46 GPR32:%vreg14
	%vreg18<def> = ADDri_r32 %vreg13, 16, %STATUS<imp-def,dead>; GPR32:%vreg18,%vreg13
	%vreg17<def> = ADDri_r32 %vreg14, 16, %STATUS<imp-def,dead>; GPR32:%vreg17,%vreg14
	%vreg47<def> = LDRf32 %vreg14, -4; mem:Volatile LD4[%scevgep9](tbaa=!2) FPR32:%vreg47 GPR32:%vreg14
	%vreg16<def> = ADDri_r32 %vreg15, 4, %STATUS<imp-def,dead>; GPR32:%vreg16,%vreg15
	%vreg48<def> = LDRf32 %vreg14, 0; mem:Volatile LD4[%lsr.iv5](tbaa=!2) FPR32:%vreg48 GPR32:%vreg14
	%vreg49<def> = LDRf32 %vreg14, 4; mem:Volatile LD4[%scevgep7](tbaa=!2) FPR32:%vreg49 GPR32:%vreg14
	%vreg50<def> = LDRf32 %vreg13, -8; mem:LD4[%scevgep15](tbaa=!2) FPR32:%vreg50 GPR32:%vreg13
	%vreg75<def> = LDRi32_r32 <fi#2>, 0; mem:LD4[FixedStack2] GPR32:%vreg75
	GID %CONFIG<imp-def>
	%CONFIG<def> = MOVTS32_core %vreg75<kill>; GPR32:%vreg75
	GIE %CONFIG<imp-def>
	%vreg51<def,tied1> = FMADDrr_r32 %vreg50<tied0>, %vreg12, %vreg46<kill>, %STATUS<imp-def,dead>; FPR32:%vreg51,%vreg50,%vreg12,%vreg46
	STRf32 %vreg51<kill>, %vreg13, -8; mem:ST4[%scevgep15](tbaa=!2) FPR32:%vreg51 GPR32:%vreg13
	%vreg52<def> = LDRf32 %vreg13, -4; mem:LD4[%scevgep17](tbaa=!2) FPR32:%vreg52 GPR32:%vreg13
	%vreg53<def,tied1> = FMADDrr_r32 %vreg52<tied0>, %vreg12, %vreg47<kill>, %STATUS<imp-def,dead>; FPR32:%vreg53,%vreg52,%vreg12,%vreg47
	STRf32 %vreg53<kill>, %vreg13, -4; mem:ST4[%scevgep17](tbaa=!2) FPR32:%vreg53 GPR32:%vreg13
	%vreg54<def> = LDRf32 %vreg13, 0; mem:LD4[%lsr.iv1214](tbaa=!2) FPR32:%vreg54 GPR32:%vreg13
	%vreg55<def,tied1> = FMADDrr_r32 %vreg54<tied0>, %vreg12, %vreg48<kill>, %STATUS<imp-def,dead>; FPR32:%vreg55,%vreg54,%vreg12,%vreg48
	STRf32 %vreg55<kill>, %vreg13, 0; mem:ST4[%lsr.iv1214](tbaa=!2) FPR32:%vreg55 GPR32:%vreg13
	%vreg56<def> = LDRf32 %vreg13, 4; mem:LD4[%scevgep16](tbaa=!2) FPR32:%vreg56 GPR32:%vreg13
	%vreg57<def,tied1> = FMADDrr_r32 %vreg56<tied0>, %vreg12, %vreg49<kill>, %STATUS<imp-def,dead>; FPR32:%vreg57,%vreg56,%vreg12,%vreg49
	%vreg58<def> = CMPri_r32 %vreg16, 8, %STATUS<imp-def>; GPR32:%vreg58,%vreg16
	STRf32 %vreg57<kill>, %vreg13, 4; mem:ST4[%scevgep16](tbaa=!2) FPR32:%vreg57 GPR32:%vreg13
	BCC <BB#6>, 8, %STATUS<imp-use>
	BNONE32 <BB#7>, %STATUS<imp-use>
    Successors according to CFG: BB#6(0x7c000000 / 0x80000000 = 96.88%) BB#7(0x04000000 / 0x80000000 = 3.12%)

BB#7: derived from LLVM BB %for.end60
    Predecessors according to CFG: BB#6
	%vreg20<def> = ADDrr_r32 %vreg9, %vreg1, %STATUS<imp-def,dead>; GPR32:%vreg20,%vreg9,%vreg1
	%vreg19<def> = ADDri_r32 %vreg10, 1, %STATUS<imp-def,dead>; GPR32:%vreg19,%vreg10
	%vreg59<def> = CMPrr_r32 %vreg19, %vreg33, %STATUS<imp-def>; GPR32:%vreg59,%vreg19,%vreg33
	BCC <BB#4>, 0, %STATUS<imp-use>
	BNONE32 <BB#5>, %STATUS<imp-use>
    Successors according to CFG: BB#4(0x04000000 / 0x80000000 = 3.12%) BB#5(0x7c000000 / 0x80000000 = 96.88%)

BB#8: derived from LLVM BB %for.body66
    Predecessors according to CFG: BB#4 BB#8
	%vreg21<def> = PHI %vreg6, <BB#4>, %vreg24, <BB#8>; GPR32:%vreg21,%vreg6,%vreg24
	%vreg22<def> = PHI %vreg60, <BB#4>, %vreg23, <BB#8>; GPR32:%vreg22,%vreg60,%vreg23
	%vreg61<def> = MOViPTR <fi#0>, 0; GPR32:%vreg61
	%vreg62<def> = ADDrr_r32 %vreg61<kill>, %vreg22, %STATUS<imp-def,dead>; GPR32:%vreg62,%vreg61,%vreg22
	%vreg63<def> = LDRf32 %vreg62<kill>, 0; mem:LD4[%sunkaddr30](tbaa=!2) FPR32:%vreg63 GPR32:%vreg62
	%vreg24<def> = ADDri_r32 %vreg21, 4, %STATUS<imp-def,dead>; GPR32:%vreg24,%vreg21
	%vreg23<def> = ADDri_r32 %vreg22, 4, %STATUS<imp-def,dead>; GPR32:%vreg23,%vreg22
	%vreg64<def> = LDRf32 %vreg21, 0; mem:Volatile LD4[%lsr.iv24](tbaa=!2) FPR32:%vreg64 GPR32:%vreg21
	%vreg76<def> = LDRi32_r32 <fi#2>, 0; mem:LD4[FixedStack2] GPR32:%vreg76
	GID %CONFIG<imp-def>
	%CONFIG<def> = MOVTS32_core %vreg76<kill>; GPR32:%vreg76
	GIE %CONFIG<imp-def>
	%vreg65<def> = FADDrr_r32 %vreg63<kill>, %vreg64<kill>, %STATUS<imp-def,dead>; FPR32:%vreg65,%vreg63,%vreg64
	%vreg66<def> = CMPri_r32 %vreg23, 32, %STATUS<imp-def>; GPR32:%vreg66,%vreg23
	STRf32 %vreg65<kill>, %vreg21, 0; mem:Volatile ST4[%lsr.iv24](tbaa=!2) FPR32:%vreg65 GPR32:%vreg21
	BCC <BB#8>, 1, %STATUS<imp-use>
	BNONE32 <BB#9>, %STATUS<imp-use>
    Successors according to CFG: BB#9(0x04000000 / 0x80000000 = 3.12%) BB#8(0x7c000000 / 0x80000000 = 96.88%)

BB#9: derived from LLVM BB %for.end75
    Predecessors according to CFG: BB#8
	%vreg27<def> = ADDri_r32 %vreg6, 32, %STATUS<imp-def,dead>; GPR32:%vreg27,%vreg6
	%vreg26<def> = ADDri_r32 %vreg7, 32, %STATUS<imp-def,dead>; GPR32:%vreg26,%vreg7
	%vreg25<def> = ADDri_r32 %vreg8, 8, %STATUS<imp-def,dead>; GPR32:%vreg25,%vreg8
	%vreg67<def> = CMPrr_r32 %vreg25, %vreg33, %STATUS<imp-def>; GPR32:%vreg67,%vreg25,%vreg33
	BCC <BB#3>, 8, %STATUS<imp-use>
	BNONE32 <BB#10>, %STATUS<imp-use>
    Successors according to CFG: BB#3(0x7c000000 / 0x80000000 = 96.88%) BB#10(0x04000000 / 0x80000000 = 3.12%)

BB#10: derived from LLVM BB %for.end78
    Predecessors according to CFG: BB#9
	%vreg29<def> = ADDrr_r32 %vreg3, %vreg1, %STATUS<imp-def,dead>; GPR32:%vreg29,%vreg3,%vreg1
	%vreg28<def> = ADDri_r32 %vreg4, 1, %STATUS<imp-def,dead>; GPR32:%vreg28,%vreg4
	%vreg68<def> = CMPrr_r32 %vreg28, %vreg33, %STATUS<imp-def>; GPR32:%vreg68,%vreg28,%vreg33
	BCC <BB#2>, 1, %STATUS<imp-use>
	BNONE32 <BB#11>, %STATUS<imp-use>
    Successors according to CFG: BB#11(0x04000000 / 0x80000000 = 3.12%) BB#2(0x7c000000 / 0x80000000 = 96.88%)

BB#11: derived from LLVM BB %for.end81
    Predecessors according to CFG: BB#0 BB#10
	%vreg77<def> = LDRi32_r32 <fi#1>, 0; mem:LD4[FixedStack1] GPR32:%vreg77
	GID
	%CONFIG<def> = MOVTS32_core %vreg77<kill>; GPR32:%vreg77
	GIE %CONFIG<imp-use,kill>
	RTS

# End machine code for function matmac.

# *** IR Dump Before Early If-Conversion ***:
# Machine code for function matmac: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=32, align=8, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=4, align=4, at location [SP]
Function Live Ins: %R0 in %vreg30, %R1 in %vreg31, %R2 in %vreg32, %R3 in %vreg33

BB#12: 
    Live Ins: %R0 %R1 %R2 %R3
	GID %CONFIG<imp-def>
	%vreg71<def> = MOVFS32_core %CONFIG<kill>; GPR32:%vreg71
	STRi32_r32 %vreg71, <fi#1>, 0; mem:ST4[FixedStack1] GPR32:%vreg71
	%vreg72<def> = MOVi32ri 65535; GPR32:%vreg72
	%vreg73<def,tied1> = MOVTi32ri %vreg72<tied0>, 65521; GPR32:%vreg73,%vreg72
	%vreg69<def> = ANDrr_r32 %vreg71<kill>, %vreg73<kill>, %STATUS<imp-def>; GPR32:%vreg69,%vreg71,%vreg73
	STRi32_r32 %vreg69, <fi#2>, 0; mem:ST4[FixedStack2] GPR32:%vreg69
	%vreg70<def,tied1> = MOVTi32ri %vreg71<kill,tied0>, 72; GPR32:%vreg70,%vreg71
	STRi32_r32 %vreg70, <fi#3>, 0; mem:ST4[FixedStack3] GPR32:%vreg70
	GIE %CONFIG<imp-use,kill>
    Successors according to CFG: BB#0(?%)

BB#0: derived from LLVM BB %entry
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#12
	%vreg33<def> = COPY %R3; GPR32:%vreg33
	%vreg32<def> = COPY %R2; GPR32:%vreg32
	%vreg31<def> = COPY %R1; GPR32:%vreg31
	%vreg30<def> = COPY %R0; GPR32:%vreg30
	%vreg34<def> = CMPri_r32 %vreg33, 1, %STATUS<imp-def>; GPR32:%vreg34,%vreg33
	BCC <BB#11>, 8, %STATUS<imp-use>
	BNONE32 <BB#1>, %STATUS<imp-use>
    Successors according to CFG: BB#1(0x50000000 / 0x80000000 = 62.50%) BB#11(0x30000000 / 0x80000000 = 37.50%)

BB#1: derived from LLVM BB %for.body3.lr.ph.preheader
    Predecessors according to CFG: BB#0
	%vreg1<def> = LSL32ri %vreg33, 2, %STATUS<imp-def,dead>; GPR32:%vreg1,%vreg33
	%vreg0<def> = ADDri_r32 %vreg31, 8, %STATUS<imp-def,dead>; GPR32:%vreg0,%vreg31
	%vreg36<def> = MOViPTR <fi#0>, 0; GPR32:%vreg36
	%vreg2<def> = ADDri_r32 %vreg36<kill>, 8, %STATUS<imp-def,dead>; GPR32:%vreg2,%vreg36
	%vreg35<def> = MOVi32ri 0; GPR32:%vreg35
    Successors according to CFG: BB#2(?%)

BB#2: derived from LLVM BB %for.body3.lr.ph
    Predecessors according to CFG: BB#1 BB#10
	%vreg3<def> = PHI %vreg32, <BB#1>, %vreg29, <BB#10>; GPR32:%vreg3,%vreg32,%vreg29
	%vreg4<def> = PHI %vreg35, <BB#1>, %vreg28, <BB#10>; GPR32:%vreg4,%vreg35,%vreg28
	%vreg74<def> = LDRi32_r32 <fi#3>, 0; mem:LD4[FixedStack3] GPR32:%vreg74
	GID %CONFIG<imp-def>
	%CONFIG<def> = MOVTS32_core %vreg74<kill>; GPR32:%vreg74
	GIE %CONFIG<imp-def>
	%vreg38<def> = IMULrr_r32 %vreg4, %vreg33, %STATUS<imp-def,dead>; GPR32:%vreg38,%vreg4,%vreg33
	%vreg39<def> = LSL32ri %vreg38<kill>, 2, %STATUS<imp-def,dead>; GPR32:%vreg39,%vreg38
	%vreg37<def> = MOVi32ri 0; GPR32:%vreg37
	%vreg5<def> = ADDrr_r32 %vreg30, %vreg39<kill>, %STATUS<imp-def,dead>; GPR32:%vreg5,%vreg30,%vreg39
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %for.body9.preheader
    Predecessors according to CFG: BB#2 BB#9
	%vreg6<def> = PHI %vreg3, <BB#2>, %vreg27, <BB#9>; GPR32:%vreg6,%vreg3,%vreg27
	%vreg7<def> = PHI %vreg0, <BB#2>, %vreg26, <BB#9>; GPR32:%vreg7,%vreg0,%vreg26
	%vreg8<def> = PHI %vreg37, <BB#2>, %vreg25, <BB#9>; GPR32:%vreg8,%vreg37,%vreg25
	%vreg41<def> = MOVi32ri 0; GPR32:%vreg41
	%vreg40<def> = MOVi32ri 0; GPR32:%vreg40
	%vreg42<def> = REG_SEQUENCE %vreg40, isub_hi, %vreg41<kill>, isub_lo; FPR64_with_isub_hi_in_FPR32:%vreg42 GPR32:%vreg40,%vreg41
	STRi64 %vreg42, <fi#0>, 24; mem:ST8[%1+24] FPR64_with_isub_hi_in_FPR32:%vreg42
	STRi64 %vreg42, <fi#0>, 16; mem:ST8[%1+16] FPR64_with_isub_hi_in_FPR32:%vreg42
	STRi64 %vreg42, <fi#0>, 8; mem:ST8[%1+8] FPR64_with_isub_hi_in_FPR32:%vreg42
	STRi64 %vreg42, <fi#0>, 0; mem:ST8[%1] FPR64_with_isub_hi_in_FPR32:%vreg42
	BNONE32 <BB#5>, %STATUS<imp-use>
    Successors according to CFG: BB#5(?%)

BB#4: derived from LLVM BB %for.cond64.preheader
    Predecessors according to CFG: BB#7
	%vreg60<def> = MOVi32ri 0; GPR32:%vreg60
	BNONE32 <BB#8>, %STATUS<imp-use>
    Successors according to CFG: BB#8(?%)

BB#5: derived from LLVM BB %for.body9
    Predecessors according to CFG: BB#3 BB#7
	%vreg9<def> = PHI %vreg7, <BB#3>, %vreg20, <BB#7>; GPR32:%vreg9,%vreg7,%vreg20
	%vreg10<def> = PHI %vreg40, <BB#3>, %vreg19, <BB#7>; GPR32:%vreg10,%vreg40,%vreg19
	%vreg44<def> = LSL32ri %vreg10, 2, %STATUS<imp-def,dead>; GPR32:%vreg44,%vreg10
	%vreg45<def> = ADDrr_r32 %vreg5, %vreg44<kill>, %STATUS<imp-def,dead>; GPR32:%vreg45,%vreg5,%vreg44
	%vreg11<def> = COPY %vreg2; GPR32:%vreg11,%vreg2
	%vreg43<def> = MOVi32ri 0; GPR32:%vreg43
	%vreg12<def> = LDRf32 %vreg45<kill>, 0; mem:Volatile LD4[%add.ptr10](tbaa=!2) FPR32:%vreg12 GPR32:%vreg45
    Successors according to CFG: BB#6(?%)

BB#6: derived from LLVM BB %for.body13
    Predecessors according to CFG: BB#5 BB#6
	%vreg13<def> = PHI %vreg11, <BB#5>, %vreg18, <BB#6>; GPR32:%vreg13,%vreg11,%vreg18
	%vreg14<def> = PHI %vreg9, <BB#5>, %vreg17, <BB#6>; GPR32:%vreg14,%vreg9,%vreg17
	%vreg15<def> = PHI %vreg43, <BB#5>, %vreg16, <BB#6>; GPR32:%vreg15,%vreg43,%vreg16
	%vreg46<def> = LDRf32 %vreg14, -8; mem:Volatile LD4[%scevgep8](tbaa=!2) FPR32:%vreg46 GPR32:%vreg14
	%vreg18<def> = ADDri_r32 %vreg13, 16, %STATUS<imp-def,dead>; GPR32:%vreg18,%vreg13
	%vreg17<def> = ADDri_r32 %vreg14, 16, %STATUS<imp-def,dead>; GPR32:%vreg17,%vreg14
	%vreg47<def> = LDRf32 %vreg14, -4; mem:Volatile LD4[%scevgep9](tbaa=!2) FPR32:%vreg47 GPR32:%vreg14
	%vreg16<def> = ADDri_r32 %vreg15, 4, %STATUS<imp-def,dead>; GPR32:%vreg16,%vreg15
	%vreg48<def> = LDRf32 %vreg14, 0; mem:Volatile LD4[%lsr.iv5](tbaa=!2) FPR32:%vreg48 GPR32:%vreg14
	%vreg49<def> = LDRf32 %vreg14, 4; mem:Volatile LD4[%scevgep7](tbaa=!2) FPR32:%vreg49 GPR32:%vreg14
	%vreg50<def> = LDRf32 %vreg13, -8; mem:LD4[%scevgep15](tbaa=!2) FPR32:%vreg50 GPR32:%vreg13
	%vreg75<def> = LDRi32_r32 <fi#2>, 0; mem:LD4[FixedStack2] GPR32:%vreg75
	GID %CONFIG<imp-def>
	%CONFIG<def> = MOVTS32_core %vreg75<kill>; GPR32:%vreg75
	GIE %CONFIG<imp-def>
	%vreg51<def,tied1> = FMADDrr_r32 %vreg50<tied0>, %vreg12, %vreg46<kill>, %STATUS<imp-def,dead>; FPR32:%vreg51,%vreg50,%vreg12,%vreg46
	STRf32 %vreg51<kill>, %vreg13, -8; mem:ST4[%scevgep15](tbaa=!2) FPR32:%vreg51 GPR32:%vreg13
	%vreg52<def> = LDRf32 %vreg13, -4; mem:LD4[%scevgep17](tbaa=!2) FPR32:%vreg52 GPR32:%vreg13
	%vreg53<def,tied1> = FMADDrr_r32 %vreg52<tied0>, %vreg12, %vreg47<kill>, %STATUS<imp-def,dead>; FPR32:%vreg53,%vreg52,%vreg12,%vreg47
	STRf32 %vreg53<kill>, %vreg13, -4; mem:ST4[%scevgep17](tbaa=!2) FPR32:%vreg53 GPR32:%vreg13
	%vreg54<def> = LDRf32 %vreg13, 0; mem:LD4[%lsr.iv1214](tbaa=!2) FPR32:%vreg54 GPR32:%vreg13
	%vreg55<def,tied1> = FMADDrr_r32 %vreg54<tied0>, %vreg12, %vreg48<kill>, %STATUS<imp-def,dead>; FPR32:%vreg55,%vreg54,%vreg12,%vreg48
	STRf32 %vreg55<kill>, %vreg13, 0; mem:ST4[%lsr.iv1214](tbaa=!2) FPR32:%vreg55 GPR32:%vreg13
	%vreg56<def> = LDRf32 %vreg13, 4; mem:LD4[%scevgep16](tbaa=!2) FPR32:%vreg56 GPR32:%vreg13
	%vreg57<def,tied1> = FMADDrr_r32 %vreg56<tied0>, %vreg12, %vreg49<kill>, %STATUS<imp-def,dead>; FPR32:%vreg57,%vreg56,%vreg12,%vreg49
	%vreg58<def> = CMPri_r32 %vreg16, 8, %STATUS<imp-def>; GPR32:%vreg58,%vreg16
	STRf32 %vreg57<kill>, %vreg13, 4; mem:ST4[%scevgep16](tbaa=!2) FPR32:%vreg57 GPR32:%vreg13
	BCC <BB#6>, 8, %STATUS<imp-use>
	BNONE32 <BB#7>, %STATUS<imp-use>
    Successors according to CFG: BB#6(0x7c000000 / 0x80000000 = 96.88%) BB#7(0x04000000 / 0x80000000 = 3.12%)

BB#7: derived from LLVM BB %for.end60
    Predecessors according to CFG: BB#6
	%vreg20<def> = ADDrr_r32 %vreg9, %vreg1, %STATUS<imp-def,dead>; GPR32:%vreg20,%vreg9,%vreg1
	%vreg19<def> = ADDri_r32 %vreg10, 1, %STATUS<imp-def,dead>; GPR32:%vreg19,%vreg10
	%vreg59<def> = CMPrr_r32 %vreg19, %vreg33, %STATUS<imp-def>; GPR32:%vreg59,%vreg19,%vreg33
	BCC <BB#4>, 0, %STATUS<imp-use>
	BNONE32 <BB#5>, %STATUS<imp-use>
    Successors according to CFG: BB#4(0x04000000 / 0x80000000 = 3.12%) BB#5(0x7c000000 / 0x80000000 = 96.88%)

BB#8: derived from LLVM BB %for.body66
    Predecessors according to CFG: BB#4 BB#8
	%vreg21<def> = PHI %vreg6, <BB#4>, %vreg24, <BB#8>; GPR32:%vreg21,%vreg6,%vreg24
	%vreg22<def> = PHI %vreg60, <BB#4>, %vreg23, <BB#8>; GPR32:%vreg22,%vreg60,%vreg23
	%vreg61<def> = MOViPTR <fi#0>, 0; GPR32:%vreg61
	%vreg62<def> = ADDrr_r32 %vreg61<kill>, %vreg22, %STATUS<imp-def,dead>; GPR32:%vreg62,%vreg61,%vreg22
	%vreg63<def> = LDRf32 %vreg62<kill>, 0; mem:LD4[%sunkaddr30](tbaa=!2) FPR32:%vreg63 GPR32:%vreg62
	%vreg24<def> = ADDri_r32 %vreg21, 4, %STATUS<imp-def,dead>; GPR32:%vreg24,%vreg21
	%vreg23<def> = ADDri_r32 %vreg22, 4, %STATUS<imp-def,dead>; GPR32:%vreg23,%vreg22
	%vreg64<def> = LDRf32 %vreg21, 0; mem:Volatile LD4[%lsr.iv24](tbaa=!2) FPR32:%vreg64 GPR32:%vreg21
	%vreg76<def> = LDRi32_r32 <fi#2>, 0; mem:LD4[FixedStack2] GPR32:%vreg76
	GID %CONFIG<imp-def>
	%CONFIG<def> = MOVTS32_core %vreg76<kill>; GPR32:%vreg76
	GIE %CONFIG<imp-def>
	%vreg65<def> = FADDrr_r32 %vreg63<kill>, %vreg64<kill>, %STATUS<imp-def,dead>; FPR32:%vreg65,%vreg63,%vreg64
	%vreg66<def> = CMPri_r32 %vreg23, 32, %STATUS<imp-def>; GPR32:%vreg66,%vreg23
	STRf32 %vreg65<kill>, %vreg21, 0; mem:Volatile ST4[%lsr.iv24](tbaa=!2) FPR32:%vreg65 GPR32:%vreg21
	BCC <BB#8>, 1, %STATUS<imp-use>
	BNONE32 <BB#9>, %STATUS<imp-use>
    Successors according to CFG: BB#9(0x04000000 / 0x80000000 = 3.12%) BB#8(0x7c000000 / 0x80000000 = 96.88%)

BB#9: derived from LLVM BB %for.end75
    Predecessors according to CFG: BB#8
	%vreg27<def> = ADDri_r32 %vreg6, 32, %STATUS<imp-def,dead>; GPR32:%vreg27,%vreg6
	%vreg26<def> = ADDri_r32 %vreg7, 32, %STATUS<imp-def,dead>; GPR32:%vreg26,%vreg7
	%vreg25<def> = ADDri_r32 %vreg8, 8, %STATUS<imp-def,dead>; GPR32:%vreg25,%vreg8
	%vreg67<def> = CMPrr_r32 %vreg25, %vreg33, %STATUS<imp-def>; GPR32:%vreg67,%vreg25,%vreg33
	BCC <BB#3>, 8, %STATUS<imp-use>
	BNONE32 <BB#10>, %STATUS<imp-use>
    Successors according to CFG: BB#3(0x7c000000 / 0x80000000 = 96.88%) BB#10(0x04000000 / 0x80000000 = 3.12%)

BB#10: derived from LLVM BB %for.end78
    Predecessors according to CFG: BB#9
	%vreg29<def> = ADDrr_r32 %vreg3, %vreg1, %STATUS<imp-def,dead>; GPR32:%vreg29,%vreg3,%vreg1
	%vreg28<def> = ADDri_r32 %vreg4, 1, %STATUS<imp-def,dead>; GPR32:%vreg28,%vreg4
	%vreg68<def> = CMPrr_r32 %vreg28, %vreg33, %STATUS<imp-def>; GPR32:%vreg68,%vreg28,%vreg33
	BCC <BB#2>, 1, %STATUS<imp-use>
	BNONE32 <BB#11>, %STATUS<imp-use>
    Successors according to CFG: BB#11(0x04000000 / 0x80000000 = 3.12%) BB#2(0x7c000000 / 0x80000000 = 96.88%)

BB#11: derived from LLVM BB %for.end81
    Predecessors according to CFG: BB#0 BB#10
	%vreg77<def> = LDRi32_r32 <fi#1>, 0; mem:LD4[FixedStack1] GPR32:%vreg77
	GID
	%CONFIG<def> = MOVTS32_core %vreg77<kill>; GPR32:%vreg77
	GIE %CONFIG<imp-use,kill>
	RTS

# End machine code for function matmac.

********** EARLY IF-CONVERSION **********
********** Function: matmac
# *** IR Dump After Early If-Conversion ***:
# Machine code for function matmac: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=32, align=8, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=4, align=4, at location [SP]
Function Live Ins: %R0 in %vreg30, %R1 in %vreg31, %R2 in %vreg32, %R3 in %vreg33

BB#12: 
    Live Ins: %R0 %R1 %R2 %R3
	GID %CONFIG<imp-def>
	%vreg71<def> = MOVFS32_core %CONFIG<kill>; GPR32:%vreg71
	STRi32_r32 %vreg71, <fi#1>, 0; mem:ST4[FixedStack1] GPR32:%vreg71
	%vreg72<def> = MOVi32ri 65535; GPR32:%vreg72
	%vreg73<def,tied1> = MOVTi32ri %vreg72<tied0>, 65521; GPR32:%vreg73,%vreg72
	%vreg69<def> = ANDrr_r32 %vreg71<kill>, %vreg73<kill>, %STATUS<imp-def>; GPR32:%vreg69,%vreg71,%vreg73
	STRi32_r32 %vreg69, <fi#2>, 0; mem:ST4[FixedStack2] GPR32:%vreg69
	%vreg70<def,tied1> = MOVTi32ri %vreg71<kill,tied0>, 72; GPR32:%vreg70,%vreg71
	STRi32_r32 %vreg70, <fi#3>, 0; mem:ST4[FixedStack3] GPR32:%vreg70
	GIE %CONFIG<imp-use,kill>
    Successors according to CFG: BB#0(?%)

BB#0: derived from LLVM BB %entry
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#12
	%vreg33<def> = COPY %R3; GPR32:%vreg33
	%vreg32<def> = COPY %R2; GPR32:%vreg32
	%vreg31<def> = COPY %R1; GPR32:%vreg31
	%vreg30<def> = COPY %R0; GPR32:%vreg30
	%vreg34<def> = CMPri_r32 %vreg33, 1, %STATUS<imp-def>; GPR32:%vreg34,%vreg33
	BCC <BB#11>, 8, %STATUS<imp-use>
	BNONE32 <BB#1>, %STATUS<imp-use>
    Successors according to CFG: BB#1(0x50000000 / 0x80000000 = 62.50%) BB#11(0x30000000 / 0x80000000 = 37.50%)

BB#1: derived from LLVM BB %for.body3.lr.ph.preheader
    Predecessors according to CFG: BB#0
	%vreg1<def> = LSL32ri %vreg33, 2, %STATUS<imp-def,dead>; GPR32:%vreg1,%vreg33
	%vreg0<def> = ADDri_r32 %vreg31, 8, %STATUS<imp-def,dead>; GPR32:%vreg0,%vreg31
	%vreg36<def> = MOViPTR <fi#0>, 0; GPR32:%vreg36
	%vreg2<def> = ADDri_r32 %vreg36<kill>, 8, %STATUS<imp-def,dead>; GPR32:%vreg2,%vreg36
	%vreg35<def> = MOVi32ri 0; GPR32:%vreg35
    Successors according to CFG: BB#2(?%)

BB#2: derived from LLVM BB %for.body3.lr.ph
    Predecessors according to CFG: BB#1 BB#10
	%vreg3<def> = PHI %vreg32, <BB#1>, %vreg29, <BB#10>; GPR32:%vreg3,%vreg32,%vreg29
	%vreg4<def> = PHI %vreg35, <BB#1>, %vreg28, <BB#10>; GPR32:%vreg4,%vreg35,%vreg28
	%vreg74<def> = LDRi32_r32 <fi#3>, 0; mem:LD4[FixedStack3] GPR32:%vreg74
	GID %CONFIG<imp-def>
	%CONFIG<def> = MOVTS32_core %vreg74<kill>; GPR32:%vreg74
	GIE %CONFIG<imp-def>
	%vreg38<def> = IMULrr_r32 %vreg4, %vreg33, %STATUS<imp-def,dead>; GPR32:%vreg38,%vreg4,%vreg33
	%vreg39<def> = LSL32ri %vreg38<kill>, 2, %STATUS<imp-def,dead>; GPR32:%vreg39,%vreg38
	%vreg37<def> = MOVi32ri 0; GPR32:%vreg37
	%vreg5<def> = ADDrr_r32 %vreg30, %vreg39<kill>, %STATUS<imp-def,dead>; GPR32:%vreg5,%vreg30,%vreg39
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %for.body9.preheader
    Predecessors according to CFG: BB#2 BB#9
	%vreg6<def> = PHI %vreg3, <BB#2>, %vreg27, <BB#9>; GPR32:%vreg6,%vreg3,%vreg27
	%vreg7<def> = PHI %vreg0, <BB#2>, %vreg26, <BB#9>; GPR32:%vreg7,%vreg0,%vreg26
	%vreg8<def> = PHI %vreg37, <BB#2>, %vreg25, <BB#9>; GPR32:%vreg8,%vreg37,%vreg25
	%vreg41<def> = MOVi32ri 0; GPR32:%vreg41
	%vreg40<def> = MOVi32ri 0; GPR32:%vreg40
	%vreg42<def> = REG_SEQUENCE %vreg40, isub_hi, %vreg41<kill>, isub_lo; FPR64_with_isub_hi_in_FPR32:%vreg42 GPR32:%vreg40,%vreg41
	STRi64 %vreg42, <fi#0>, 24; mem:ST8[%1+24] FPR64_with_isub_hi_in_FPR32:%vreg42
	STRi64 %vreg42, <fi#0>, 16; mem:ST8[%1+16] FPR64_with_isub_hi_in_FPR32:%vreg42
	STRi64 %vreg42, <fi#0>, 8; mem:ST8[%1+8] FPR64_with_isub_hi_in_FPR32:%vreg42
	STRi64 %vreg42, <fi#0>, 0; mem:ST8[%1] FPR64_with_isub_hi_in_FPR32:%vreg42
	BNONE32 <BB#5>, %STATUS<imp-use>
    Successors according to CFG: BB#5(?%)

BB#4: derived from LLVM BB %for.cond64.preheader
    Predecessors according to CFG: BB#7
	%vreg60<def> = MOVi32ri 0; GPR32:%vreg60
	BNONE32 <BB#8>, %STATUS<imp-use>
    Successors according to CFG: BB#8(?%)

BB#5: derived from LLVM BB %for.body9
    Predecessors according to CFG: BB#3 BB#7
	%vreg9<def> = PHI %vreg7, <BB#3>, %vreg20, <BB#7>; GPR32:%vreg9,%vreg7,%vreg20
	%vreg10<def> = PHI %vreg40, <BB#3>, %vreg19, <BB#7>; GPR32:%vreg10,%vreg40,%vreg19
	%vreg44<def> = LSL32ri %vreg10, 2, %STATUS<imp-def,dead>; GPR32:%vreg44,%vreg10
	%vreg45<def> = ADDrr_r32 %vreg5, %vreg44<kill>, %STATUS<imp-def,dead>; GPR32:%vreg45,%vreg5,%vreg44
	%vreg11<def> = COPY %vreg2; GPR32:%vreg11,%vreg2
	%vreg43<def> = MOVi32ri 0; GPR32:%vreg43
	%vreg12<def> = LDRf32 %vreg45<kill>, 0; mem:Volatile LD4[%add.ptr10](tbaa=!2) FPR32:%vreg12 GPR32:%vreg45
    Successors according to CFG: BB#6(?%)

BB#6: derived from LLVM BB %for.body13
    Predecessors according to CFG: BB#5 BB#6
	%vreg13<def> = PHI %vreg11, <BB#5>, %vreg18, <BB#6>; GPR32:%vreg13,%vreg11,%vreg18
	%vreg14<def> = PHI %vreg9, <BB#5>, %vreg17, <BB#6>; GPR32:%vreg14,%vreg9,%vreg17
	%vreg15<def> = PHI %vreg43, <BB#5>, %vreg16, <BB#6>; GPR32:%vreg15,%vreg43,%vreg16
	%vreg46<def> = LDRf32 %vreg14, -8; mem:Volatile LD4[%scevgep8](tbaa=!2) FPR32:%vreg46 GPR32:%vreg14
	%vreg18<def> = ADDri_r32 %vreg13, 16, %STATUS<imp-def,dead>; GPR32:%vreg18,%vreg13
	%vreg17<def> = ADDri_r32 %vreg14, 16, %STATUS<imp-def,dead>; GPR32:%vreg17,%vreg14
	%vreg47<def> = LDRf32 %vreg14, -4; mem:Volatile LD4[%scevgep9](tbaa=!2) FPR32:%vreg47 GPR32:%vreg14
	%vreg16<def> = ADDri_r32 %vreg15, 4, %STATUS<imp-def,dead>; GPR32:%vreg16,%vreg15
	%vreg48<def> = LDRf32 %vreg14, 0; mem:Volatile LD4[%lsr.iv5](tbaa=!2) FPR32:%vreg48 GPR32:%vreg14
	%vreg49<def> = LDRf32 %vreg14, 4; mem:Volatile LD4[%scevgep7](tbaa=!2) FPR32:%vreg49 GPR32:%vreg14
	%vreg50<def> = LDRf32 %vreg13, -8; mem:LD4[%scevgep15](tbaa=!2) FPR32:%vreg50 GPR32:%vreg13
	%vreg75<def> = LDRi32_r32 <fi#2>, 0; mem:LD4[FixedStack2] GPR32:%vreg75
	GID %CONFIG<imp-def>
	%CONFIG<def> = MOVTS32_core %vreg75<kill>; GPR32:%vreg75
	GIE %CONFIG<imp-def>
	%vreg51<def,tied1> = FMADDrr_r32 %vreg50<tied0>, %vreg12, %vreg46<kill>, %STATUS<imp-def,dead>; FPR32:%vreg51,%vreg50,%vreg12,%vreg46
	STRf32 %vreg51<kill>, %vreg13, -8; mem:ST4[%scevgep15](tbaa=!2) FPR32:%vreg51 GPR32:%vreg13
	%vreg52<def> = LDRf32 %vreg13, -4; mem:LD4[%scevgep17](tbaa=!2) FPR32:%vreg52 GPR32:%vreg13
	%vreg53<def,tied1> = FMADDrr_r32 %vreg52<tied0>, %vreg12, %vreg47<kill>, %STATUS<imp-def,dead>; FPR32:%vreg53,%vreg52,%vreg12,%vreg47
	STRf32 %vreg53<kill>, %vreg13, -4; mem:ST4[%scevgep17](tbaa=!2) FPR32:%vreg53 GPR32:%vreg13
	%vreg54<def> = LDRf32 %vreg13, 0; mem:LD4[%lsr.iv1214](tbaa=!2) FPR32:%vreg54 GPR32:%vreg13
	%vreg55<def,tied1> = FMADDrr_r32 %vreg54<tied0>, %vreg12, %vreg48<kill>, %STATUS<imp-def,dead>; FPR32:%vreg55,%vreg54,%vreg12,%vreg48
	STRf32 %vreg55<kill>, %vreg13, 0; mem:ST4[%lsr.iv1214](tbaa=!2) FPR32:%vreg55 GPR32:%vreg13
	%vreg56<def> = LDRf32 %vreg13, 4; mem:LD4[%scevgep16](tbaa=!2) FPR32:%vreg56 GPR32:%vreg13
	%vreg57<def,tied1> = FMADDrr_r32 %vreg56<tied0>, %vreg12, %vreg49<kill>, %STATUS<imp-def,dead>; FPR32:%vreg57,%vreg56,%vreg12,%vreg49
	%vreg58<def> = CMPri_r32 %vreg16, 8, %STATUS<imp-def>; GPR32:%vreg58,%vreg16
	STRf32 %vreg57<kill>, %vreg13, 4; mem:ST4[%scevgep16](tbaa=!2) FPR32:%vreg57 GPR32:%vreg13
	BCC <BB#6>, 8, %STATUS<imp-use>
	BNONE32 <BB#7>, %STATUS<imp-use>
    Successors according to CFG: BB#6(0x7c000000 / 0x80000000 = 96.88%) BB#7(0x04000000 / 0x80000000 = 3.12%)

BB#7: derived from LLVM BB %for.end60
    Predecessors according to CFG: BB#6
	%vreg20<def> = ADDrr_r32 %vreg9, %vreg1, %STATUS<imp-def,dead>; GPR32:%vreg20,%vreg9,%vreg1
	%vreg19<def> = ADDri_r32 %vreg10, 1, %STATUS<imp-def,dead>; GPR32:%vreg19,%vreg10
	%vreg59<def> = CMPrr_r32 %vreg19, %vreg33, %STATUS<imp-def>; GPR32:%vreg59,%vreg19,%vreg33
	BCC <BB#4>, 0, %STATUS<imp-use>
	BNONE32 <BB#5>, %STATUS<imp-use>
    Successors according to CFG: BB#4(0x04000000 / 0x80000000 = 3.12%) BB#5(0x7c000000 / 0x80000000 = 96.88%)

BB#8: derived from LLVM BB %for.body66
    Predecessors according to CFG: BB#4 BB#8
	%vreg21<def> = PHI %vreg6, <BB#4>, %vreg24, <BB#8>; GPR32:%vreg21,%vreg6,%vreg24
	%vreg22<def> = PHI %vreg60, <BB#4>, %vreg23, <BB#8>; GPR32:%vreg22,%vreg60,%vreg23
	%vreg61<def> = MOViPTR <fi#0>, 0; GPR32:%vreg61
	%vreg62<def> = ADDrr_r32 %vreg61<kill>, %vreg22, %STATUS<imp-def,dead>; GPR32:%vreg62,%vreg61,%vreg22
	%vreg63<def> = LDRf32 %vreg62<kill>, 0; mem:LD4[%sunkaddr30](tbaa=!2) FPR32:%vreg63 GPR32:%vreg62
	%vreg24<def> = ADDri_r32 %vreg21, 4, %STATUS<imp-def,dead>; GPR32:%vreg24,%vreg21
	%vreg23<def> = ADDri_r32 %vreg22, 4, %STATUS<imp-def,dead>; GPR32:%vreg23,%vreg22
	%vreg64<def> = LDRf32 %vreg21, 0; mem:Volatile LD4[%lsr.iv24](tbaa=!2) FPR32:%vreg64 GPR32:%vreg21
	%vreg76<def> = LDRi32_r32 <fi#2>, 0; mem:LD4[FixedStack2] GPR32:%vreg76
	GID %CONFIG<imp-def>
	%CONFIG<def> = MOVTS32_core %vreg76<kill>; GPR32:%vreg76
	GIE %CONFIG<imp-def>
	%vreg65<def> = FADDrr_r32 %vreg63<kill>, %vreg64<kill>, %STATUS<imp-def,dead>; FPR32:%vreg65,%vreg63,%vreg64
	%vreg66<def> = CMPri_r32 %vreg23, 32, %STATUS<imp-def>; GPR32:%vreg66,%vreg23
	STRf32 %vreg65<kill>, %vreg21, 0; mem:Volatile ST4[%lsr.iv24](tbaa=!2) FPR32:%vreg65 GPR32:%vreg21
	BCC <BB#8>, 1, %STATUS<imp-use>
	BNONE32 <BB#9>, %STATUS<imp-use>
    Successors according to CFG: BB#9(0x04000000 / 0x80000000 = 3.12%) BB#8(0x7c000000 / 0x80000000 = 96.88%)

BB#9: derived from LLVM BB %for.end75
    Predecessors according to CFG: BB#8
	%vreg27<def> = ADDri_r32 %vreg6, 32, %STATUS<imp-def,dead>; GPR32:%vreg27,%vreg6
	%vreg26<def> = ADDri_r32 %vreg7, 32, %STATUS<imp-def,dead>; GPR32:%vreg26,%vreg7
	%vreg25<def> = ADDri_r32 %vreg8, 8, %STATUS<imp-def,dead>; GPR32:%vreg25,%vreg8
	%vreg67<def> = CMPrr_r32 %vreg25, %vreg33, %STATUS<imp-def>; GPR32:%vreg67,%vreg25,%vreg33
	BCC <BB#3>, 8, %STATUS<imp-use>
	BNONE32 <BB#10>, %STATUS<imp-use>
    Successors according to CFG: BB#3(0x7c000000 / 0x80000000 = 96.88%) BB#10(0x04000000 / 0x80000000 = 3.12%)

BB#10: derived from LLVM BB %for.end78
    Predecessors according to CFG: BB#9
	%vreg29<def> = ADDrr_r32 %vreg3, %vreg1, %STATUS<imp-def,dead>; GPR32:%vreg29,%vreg3,%vreg1
	%vreg28<def> = ADDri_r32 %vreg4, 1, %STATUS<imp-def,dead>; GPR32:%vreg28,%vreg4
	%vreg68<def> = CMPrr_r32 %vreg28, %vreg33, %STATUS<imp-def>; GPR32:%vreg68,%vreg28,%vreg33
	BCC <BB#2>, 1, %STATUS<imp-use>
	BNONE32 <BB#11>, %STATUS<imp-use>
    Successors according to CFG: BB#11(0x04000000 / 0x80000000 = 3.12%) BB#2(0x7c000000 / 0x80000000 = 96.88%)

BB#11: derived from LLVM BB %for.end81
    Predecessors according to CFG: BB#0 BB#10
	%vreg77<def> = LDRi32_r32 <fi#1>, 0; mem:LD4[FixedStack1] GPR32:%vreg77
	GID
	%CONFIG<def> = MOVTS32_core %vreg77<kill>; GPR32:%vreg77
	GIE %CONFIG<imp-use,kill>
	RTS

# End machine code for function matmac.

# *** IR Dump Before Machine Loop Invariant Code Motion ***:
# Machine code for function matmac: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=32, align=8, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=4, align=4, at location [SP]
Function Live Ins: %R0 in %vreg30, %R1 in %vreg31, %R2 in %vreg32, %R3 in %vreg33

BB#12: 
    Live Ins: %R0 %R1 %R2 %R3
	GID %CONFIG<imp-def>
	%vreg71<def> = MOVFS32_core %CONFIG<kill>; GPR32:%vreg71
	STRi32_r32 %vreg71, <fi#1>, 0; mem:ST4[FixedStack1] GPR32:%vreg71
	%vreg72<def> = MOVi32ri 65535; GPR32:%vreg72
	%vreg73<def,tied1> = MOVTi32ri %vreg72<tied0>, 65521; GPR32:%vreg73,%vreg72
	%vreg69<def> = ANDrr_r32 %vreg71<kill>, %vreg73<kill>, %STATUS<imp-def>; GPR32:%vreg69,%vreg71,%vreg73
	STRi32_r32 %vreg69, <fi#2>, 0; mem:ST4[FixedStack2] GPR32:%vreg69
	%vreg70<def,tied1> = MOVTi32ri %vreg71<kill,tied0>, 72; GPR32:%vreg70,%vreg71
	STRi32_r32 %vreg70, <fi#3>, 0; mem:ST4[FixedStack3] GPR32:%vreg70
	GIE %CONFIG<imp-use,kill>
    Successors according to CFG: BB#0(?%)

BB#0: derived from LLVM BB %entry
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#12
	%vreg33<def> = COPY %R3; GPR32:%vreg33
	%vreg32<def> = COPY %R2; GPR32:%vreg32
	%vreg31<def> = COPY %R1; GPR32:%vreg31
	%vreg30<def> = COPY %R0; GPR32:%vreg30
	%vreg34<def> = CMPri_r32 %vreg33, 1, %STATUS<imp-def>; GPR32:%vreg34,%vreg33
	BCC <BB#11>, 8, %STATUS<imp-use>
	BNONE32 <BB#1>, %STATUS<imp-use>
    Successors according to CFG: BB#1(0x50000000 / 0x80000000 = 62.50%) BB#11(0x30000000 / 0x80000000 = 37.50%)

BB#1: derived from LLVM BB %for.body3.lr.ph.preheader
    Predecessors according to CFG: BB#0
	%vreg1<def> = LSL32ri %vreg33, 2, %STATUS<imp-def,dead>; GPR32:%vreg1,%vreg33
	%vreg0<def> = ADDri_r32 %vreg31, 8, %STATUS<imp-def,dead>; GPR32:%vreg0,%vreg31
	%vreg36<def> = MOViPTR <fi#0>, 0; GPR32:%vreg36
	%vreg2<def> = ADDri_r32 %vreg36<kill>, 8, %STATUS<imp-def,dead>; GPR32:%vreg2,%vreg36
	%vreg35<def> = MOVi32ri 0; GPR32:%vreg35
    Successors according to CFG: BB#2(?%)

BB#2: derived from LLVM BB %for.body3.lr.ph
    Predecessors according to CFG: BB#1 BB#10
	%vreg3<def> = PHI %vreg32, <BB#1>, %vreg29, <BB#10>; GPR32:%vreg3,%vreg32,%vreg29
	%vreg4<def> = PHI %vreg35, <BB#1>, %vreg28, <BB#10>; GPR32:%vreg4,%vreg35,%vreg28
	%vreg74<def> = LDRi32_r32 <fi#3>, 0; mem:LD4[FixedStack3] GPR32:%vreg74
	GID %CONFIG<imp-def>
	%CONFIG<def> = MOVTS32_core %vreg74<kill>; GPR32:%vreg74
	GIE %CONFIG<imp-def>
	%vreg38<def> = IMULrr_r32 %vreg4, %vreg33, %STATUS<imp-def,dead>; GPR32:%vreg38,%vreg4,%vreg33
	%vreg39<def> = LSL32ri %vreg38<kill>, 2, %STATUS<imp-def,dead>; GPR32:%vreg39,%vreg38
	%vreg37<def> = MOVi32ri 0; GPR32:%vreg37
	%vreg5<def> = ADDrr_r32 %vreg30, %vreg39<kill>, %STATUS<imp-def,dead>; GPR32:%vreg5,%vreg30,%vreg39
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %for.body9.preheader
    Predecessors according to CFG: BB#2 BB#9
	%vreg6<def> = PHI %vreg3, <BB#2>, %vreg27, <BB#9>; GPR32:%vreg6,%vreg3,%vreg27
	%vreg7<def> = PHI %vreg0, <BB#2>, %vreg26, <BB#9>; GPR32:%vreg7,%vreg0,%vreg26
	%vreg8<def> = PHI %vreg37, <BB#2>, %vreg25, <BB#9>; GPR32:%vreg8,%vreg37,%vreg25
	%vreg41<def> = MOVi32ri 0; GPR32:%vreg41
	%vreg40<def> = MOVi32ri 0; GPR32:%vreg40
	%vreg42<def> = REG_SEQUENCE %vreg40, isub_hi, %vreg41<kill>, isub_lo; FPR64_with_isub_hi_in_FPR32:%vreg42 GPR32:%vreg40,%vreg41
	STRi64 %vreg42, <fi#0>, 24; mem:ST8[%1+24] FPR64_with_isub_hi_in_FPR32:%vreg42
	STRi64 %vreg42, <fi#0>, 16; mem:ST8[%1+16] FPR64_with_isub_hi_in_FPR32:%vreg42
	STRi64 %vreg42, <fi#0>, 8; mem:ST8[%1+8] FPR64_with_isub_hi_in_FPR32:%vreg42
	STRi64 %vreg42, <fi#0>, 0; mem:ST8[%1] FPR64_with_isub_hi_in_FPR32:%vreg42
	BNONE32 <BB#5>, %STATUS<imp-use>
    Successors according to CFG: BB#5(?%)

BB#4: derived from LLVM BB %for.cond64.preheader
    Predecessors according to CFG: BB#7
	%vreg60<def> = MOVi32ri 0; GPR32:%vreg60
	BNONE32 <BB#8>, %STATUS<imp-use>
    Successors according to CFG: BB#8(?%)

BB#5: derived from LLVM BB %for.body9
    Predecessors according to CFG: BB#3 BB#7
	%vreg9<def> = PHI %vreg7, <BB#3>, %vreg20, <BB#7>; GPR32:%vreg9,%vreg7,%vreg20
	%vreg10<def> = PHI %vreg40, <BB#3>, %vreg19, <BB#7>; GPR32:%vreg10,%vreg40,%vreg19
	%vreg44<def> = LSL32ri %vreg10, 2, %STATUS<imp-def,dead>; GPR32:%vreg44,%vreg10
	%vreg45<def> = ADDrr_r32 %vreg5, %vreg44<kill>, %STATUS<imp-def,dead>; GPR32:%vreg45,%vreg5,%vreg44
	%vreg11<def> = COPY %vreg2; GPR32:%vreg11,%vreg2
	%vreg43<def> = MOVi32ri 0; GPR32:%vreg43
	%vreg12<def> = LDRf32 %vreg45<kill>, 0; mem:Volatile LD4[%add.ptr10](tbaa=!2) FPR32:%vreg12 GPR32:%vreg45
    Successors according to CFG: BB#6(?%)

BB#6: derived from LLVM BB %for.body13
    Predecessors according to CFG: BB#5 BB#6
	%vreg13<def> = PHI %vreg11, <BB#5>, %vreg18, <BB#6>; GPR32:%vreg13,%vreg11,%vreg18
	%vreg14<def> = PHI %vreg9, <BB#5>, %vreg17, <BB#6>; GPR32:%vreg14,%vreg9,%vreg17
	%vreg15<def> = PHI %vreg43, <BB#5>, %vreg16, <BB#6>; GPR32:%vreg15,%vreg43,%vreg16
	%vreg46<def> = LDRf32 %vreg14, -8; mem:Volatile LD4[%scevgep8](tbaa=!2) FPR32:%vreg46 GPR32:%vreg14
	%vreg18<def> = ADDri_r32 %vreg13, 16, %STATUS<imp-def,dead>; GPR32:%vreg18,%vreg13
	%vreg17<def> = ADDri_r32 %vreg14, 16, %STATUS<imp-def,dead>; GPR32:%vreg17,%vreg14
	%vreg47<def> = LDRf32 %vreg14, -4; mem:Volatile LD4[%scevgep9](tbaa=!2) FPR32:%vreg47 GPR32:%vreg14
	%vreg16<def> = ADDri_r32 %vreg15, 4, %STATUS<imp-def,dead>; GPR32:%vreg16,%vreg15
	%vreg48<def> = LDRf32 %vreg14, 0; mem:Volatile LD4[%lsr.iv5](tbaa=!2) FPR32:%vreg48 GPR32:%vreg14
	%vreg49<def> = LDRf32 %vreg14, 4; mem:Volatile LD4[%scevgep7](tbaa=!2) FPR32:%vreg49 GPR32:%vreg14
	%vreg50<def> = LDRf32 %vreg13, -8; mem:LD4[%scevgep15](tbaa=!2) FPR32:%vreg50 GPR32:%vreg13
	%vreg75<def> = LDRi32_r32 <fi#2>, 0; mem:LD4[FixedStack2] GPR32:%vreg75
	GID %CONFIG<imp-def>
	%CONFIG<def> = MOVTS32_core %vreg75<kill>; GPR32:%vreg75
	GIE %CONFIG<imp-def>
	%vreg51<def,tied1> = FMADDrr_r32 %vreg50<tied0>, %vreg12, %vreg46<kill>, %STATUS<imp-def,dead>; FPR32:%vreg51,%vreg50,%vreg12,%vreg46
	STRf32 %vreg51<kill>, %vreg13, -8; mem:ST4[%scevgep15](tbaa=!2) FPR32:%vreg51 GPR32:%vreg13
	%vreg52<def> = LDRf32 %vreg13, -4; mem:LD4[%scevgep17](tbaa=!2) FPR32:%vreg52 GPR32:%vreg13
	%vreg53<def,tied1> = FMADDrr_r32 %vreg52<tied0>, %vreg12, %vreg47<kill>, %STATUS<imp-def,dead>; FPR32:%vreg53,%vreg52,%vreg12,%vreg47
	STRf32 %vreg53<kill>, %vreg13, -4; mem:ST4[%scevgep17](tbaa=!2) FPR32:%vreg53 GPR32:%vreg13
	%vreg54<def> = LDRf32 %vreg13, 0; mem:LD4[%lsr.iv1214](tbaa=!2) FPR32:%vreg54 GPR32:%vreg13
	%vreg55<def,tied1> = FMADDrr_r32 %vreg54<tied0>, %vreg12, %vreg48<kill>, %STATUS<imp-def,dead>; FPR32:%vreg55,%vreg54,%vreg12,%vreg48
	STRf32 %vreg55<kill>, %vreg13, 0; mem:ST4[%lsr.iv1214](tbaa=!2) FPR32:%vreg55 GPR32:%vreg13
	%vreg56<def> = LDRf32 %vreg13, 4; mem:LD4[%scevgep16](tbaa=!2) FPR32:%vreg56 GPR32:%vreg13
	%vreg57<def,tied1> = FMADDrr_r32 %vreg56<tied0>, %vreg12, %vreg49<kill>, %STATUS<imp-def,dead>; FPR32:%vreg57,%vreg56,%vreg12,%vreg49
	%vreg58<def> = CMPri_r32 %vreg16, 8, %STATUS<imp-def>; GPR32:%vreg58,%vreg16
	STRf32 %vreg57<kill>, %vreg13, 4; mem:ST4[%scevgep16](tbaa=!2) FPR32:%vreg57 GPR32:%vreg13
	BCC <BB#6>, 8, %STATUS<imp-use>
	BNONE32 <BB#7>, %STATUS<imp-use>
    Successors according to CFG: BB#6(0x7c000000 / 0x80000000 = 96.88%) BB#7(0x04000000 / 0x80000000 = 3.12%)

BB#7: derived from LLVM BB %for.end60
    Predecessors according to CFG: BB#6
	%vreg20<def> = ADDrr_r32 %vreg9, %vreg1, %STATUS<imp-def,dead>; GPR32:%vreg20,%vreg9,%vreg1
	%vreg19<def> = ADDri_r32 %vreg10, 1, %STATUS<imp-def,dead>; GPR32:%vreg19,%vreg10
	%vreg59<def> = CMPrr_r32 %vreg19, %vreg33, %STATUS<imp-def>; GPR32:%vreg59,%vreg19,%vreg33
	BCC <BB#4>, 0, %STATUS<imp-use>
	BNONE32 <BB#5>, %STATUS<imp-use>
    Successors according to CFG: BB#4(0x04000000 / 0x80000000 = 3.12%) BB#5(0x7c000000 / 0x80000000 = 96.88%)

BB#8: derived from LLVM BB %for.body66
    Predecessors according to CFG: BB#4 BB#8
	%vreg21<def> = PHI %vreg6, <BB#4>, %vreg24, <BB#8>; GPR32:%vreg21,%vreg6,%vreg24
	%vreg22<def> = PHI %vreg60, <BB#4>, %vreg23, <BB#8>; GPR32:%vreg22,%vreg60,%vreg23
	%vreg61<def> = MOViPTR <fi#0>, 0; GPR32:%vreg61
	%vreg62<def> = ADDrr_r32 %vreg61<kill>, %vreg22, %STATUS<imp-def,dead>; GPR32:%vreg62,%vreg61,%vreg22
	%vreg63<def> = LDRf32 %vreg62<kill>, 0; mem:LD4[%sunkaddr30](tbaa=!2) FPR32:%vreg63 GPR32:%vreg62
	%vreg24<def> = ADDri_r32 %vreg21, 4, %STATUS<imp-def,dead>; GPR32:%vreg24,%vreg21
	%vreg23<def> = ADDri_r32 %vreg22, 4, %STATUS<imp-def,dead>; GPR32:%vreg23,%vreg22
	%vreg64<def> = LDRf32 %vreg21, 0; mem:Volatile LD4[%lsr.iv24](tbaa=!2) FPR32:%vreg64 GPR32:%vreg21
	%vreg76<def> = LDRi32_r32 <fi#2>, 0; mem:LD4[FixedStack2] GPR32:%vreg76
	GID %CONFIG<imp-def>
	%CONFIG<def> = MOVTS32_core %vreg76<kill>; GPR32:%vreg76
	GIE %CONFIG<imp-def>
	%vreg65<def> = FADDrr_r32 %vreg63<kill>, %vreg64<kill>, %STATUS<imp-def,dead>; FPR32:%vreg65,%vreg63,%vreg64
	%vreg66<def> = CMPri_r32 %vreg23, 32, %STATUS<imp-def>; GPR32:%vreg66,%vreg23
	STRf32 %vreg65<kill>, %vreg21, 0; mem:Volatile ST4[%lsr.iv24](tbaa=!2) FPR32:%vreg65 GPR32:%vreg21
	BCC <BB#8>, 1, %STATUS<imp-use>
	BNONE32 <BB#9>, %STATUS<imp-use>
    Successors according to CFG: BB#9(0x04000000 / 0x80000000 = 3.12%) BB#8(0x7c000000 / 0x80000000 = 96.88%)

BB#9: derived from LLVM BB %for.end75
    Predecessors according to CFG: BB#8
	%vreg27<def> = ADDri_r32 %vreg6, 32, %STATUS<imp-def,dead>; GPR32:%vreg27,%vreg6
	%vreg26<def> = ADDri_r32 %vreg7, 32, %STATUS<imp-def,dead>; GPR32:%vreg26,%vreg7
	%vreg25<def> = ADDri_r32 %vreg8, 8, %STATUS<imp-def,dead>; GPR32:%vreg25,%vreg8
	%vreg67<def> = CMPrr_r32 %vreg25, %vreg33, %STATUS<imp-def>; GPR32:%vreg67,%vreg25,%vreg33
	BCC <BB#3>, 8, %STATUS<imp-use>
	BNONE32 <BB#10>, %STATUS<imp-use>
    Successors according to CFG: BB#3(0x7c000000 / 0x80000000 = 96.88%) BB#10(0x04000000 / 0x80000000 = 3.12%)

BB#10: derived from LLVM BB %for.end78
    Predecessors according to CFG: BB#9
	%vreg29<def> = ADDrr_r32 %vreg3, %vreg1, %STATUS<imp-def,dead>; GPR32:%vreg29,%vreg3,%vreg1
	%vreg28<def> = ADDri_r32 %vreg4, 1, %STATUS<imp-def,dead>; GPR32:%vreg28,%vreg4
	%vreg68<def> = CMPrr_r32 %vreg28, %vreg33, %STATUS<imp-def>; GPR32:%vreg68,%vreg28,%vreg33
	BCC <BB#2>, 1, %STATUS<imp-use>
	BNONE32 <BB#11>, %STATUS<imp-use>
    Successors according to CFG: BB#11(0x04000000 / 0x80000000 = 3.12%) BB#2(0x7c000000 / 0x80000000 = 96.88%)

BB#11: derived from LLVM BB %for.end81
    Predecessors according to CFG: BB#0 BB#10
	%vreg77<def> = LDRi32_r32 <fi#1>, 0; mem:LD4[FixedStack1] GPR32:%vreg77
	GID
	%CONFIG<def> = MOVTS32_core %vreg77<kill>; GPR32:%vreg77
	GIE %CONFIG<imp-use,kill>
	RTS

# End machine code for function matmac.

******** Pre-regalloc Machine LICM: matmac ********

<----------------->
Analyzing block 1
BB#1: derived from LLVM BB %for.body3.lr.ph.preheader
    Predecessors according to CFG: BB#0
	%vreg1<def> = LSL32ri %vreg33, 2, %STATUS<imp-def,dead>; GPR32:%vreg1,%vreg33
	%vreg0<def> = ADDri_r32 %vreg31, 8, %STATUS<imp-def,dead>; GPR32:%vreg0,%vreg31
	%vreg36<def> = MOViPTR <fi#0>, 0; GPR32:%vreg36
	%vreg2<def> = ADDri_r32 %vreg36<kill>, 8, %STATUS<imp-def,dead>; GPR32:%vreg2,%vreg36
	%vreg35<def> = MOVi32ri 0; GPR32:%vreg35
    Successors according to CFG: BB#2(?%)

<----------------->
Analyzing block 0
BB#0: derived from LLVM BB %entry
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#12
	%vreg33<def> = COPY %R3; GPR32:%vreg33
	%vreg32<def> = COPY %R2; GPR32:%vreg32
	%vreg31<def> = COPY %R1; GPR32:%vreg31
	%vreg30<def> = COPY %R0; GPR32:%vreg30
	%vreg34<def> = CMPri_r32 %vreg33, 1, %STATUS<imp-def>; GPR32:%vreg34,%vreg33
	BCC <BB#11>, 8, %STATUS<imp-use>
	BNONE32 <BB#1>, %STATUS<imp-use>
    Successors according to CFG: BB#1(0x50000000 / 0x80000000 = 62.50%) BB#11(0x30000000 / 0x80000000 = 37.50%)
Entering BB#2
Hoist non-reg-pressure: %vreg37<def> = MOVi32ri 0; GPR32:%vreg37
Hoisting %vreg37<def> = MOVi32ri 0; GPR32:%vreg37
 from BB#2 to BB#1
CSEing %vreg37<def> = MOVi32ri 0; GPR32:%vreg37
 with %vreg35<def> = MOVi32ri 0; GPR32:%vreg35
Entering BB#3
Hoist non-reg-pressure: %vreg41<def> = MOVi32ri 0; GPR32:%vreg41
Hoisting %vreg41<def> = MOVi32ri 0; GPR32:%vreg41
 from BB#3 to BB#1
CSEing %vreg41<def> = MOVi32ri 0; GPR32:%vreg41
 with %vreg35<def> = MOVi32ri 0; GPR32:%vreg35
Hoist non-reg-pressure: %vreg40<def> = MOVi32ri 0; GPR32:%vreg40
Hoisting %vreg40<def> = MOVi32ri 0; GPR32:%vreg40
 from BB#3 to BB#1
CSEing %vreg40<def> = MOVi32ri 0; GPR32:%vreg40
 with %vreg35<def> = MOVi32ri 0; GPR32:%vreg35
Can't remat / high reg-pressure: %vreg42<def> = REG_SEQUENCE %vreg35, isub_hi, %vreg35, isub_lo; FPR64_with_isub_hi_in_FPR32:%vreg42 GPR32:%vreg35
Entering BB#5
Won't hoist cheap instr with loop PHI use: %vreg11<def> = COPY %vreg2; GPR32:%vreg11,%vreg2
Hoist non-reg-pressure: %vreg43<def> = MOVi32ri 0; GPR32:%vreg43
Hoisting %vreg43<def> = MOVi32ri 0; GPR32:%vreg43
 from BB#5 to BB#1
CSEing %vreg43<def> = MOVi32ri 0; GPR32:%vreg43
 with %vreg35<def> = MOVi32ri 0; GPR32:%vreg35
Entering BB#6
Entering BB#7
Entering BB#4
Hoist non-reg-pressure: %vreg60<def> = MOVi32ri 0; GPR32:%vreg60
Hoisting %vreg60<def> = MOVi32ri 0; GPR32:%vreg60
 from BB#4 to BB#1
CSEing %vreg60<def> = MOVi32ri 0; GPR32:%vreg60
 with %vreg35<def> = MOVi32ri 0; GPR32:%vreg35
Entering BB#8

isLoadToStackSlot for %vreg61<def> = MOViPTR <fi#0>, 0; GPR32:%vreg61
Hoisting %vreg61<def> = MOViPTR <fi#0>, 0; GPR32:%vreg61
 from BB#8 to BB#1
CSEing %vreg61<def> = MOViPTR <fi#0>, 0; GPR32:%vreg61
 with %vreg36<def> = MOViPTR <fi#0>, 0; GPR32:%vreg36
Entering BB#9
Entering BB#10
Exiting BB#10
Exiting BB#9
Exiting BB#8
Exiting BB#4
Exiting BB#7
Exiting BB#6
Exiting BB#5
Exiting BB#3
Exiting BB#2
# *** IR Dump After Machine Loop Invariant Code Motion ***:
# Machine code for function matmac: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=32, align=8, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=4, align=4, at location [SP]
Function Live Ins: %R0 in %vreg30, %R1 in %vreg31, %R2 in %vreg32, %R3 in %vreg33

BB#12: 
    Live Ins: %R0 %R1 %R2 %R3
	GID %CONFIG<imp-def>
	%vreg71<def> = MOVFS32_core %CONFIG<kill>; GPR32:%vreg71
	STRi32_r32 %vreg71, <fi#1>, 0; mem:ST4[FixedStack1] GPR32:%vreg71
	%vreg72<def> = MOVi32ri 65535; GPR32:%vreg72
	%vreg73<def,tied1> = MOVTi32ri %vreg72<tied0>, 65521; GPR32:%vreg73,%vreg72
	%vreg69<def> = ANDrr_r32 %vreg71<kill>, %vreg73<kill>, %STATUS<imp-def>; GPR32:%vreg69,%vreg71,%vreg73
	STRi32_r32 %vreg69, <fi#2>, 0; mem:ST4[FixedStack2] GPR32:%vreg69
	%vreg70<def,tied1> = MOVTi32ri %vreg71<kill,tied0>, 72; GPR32:%vreg70,%vreg71
	STRi32_r32 %vreg70, <fi#3>, 0; mem:ST4[FixedStack3] GPR32:%vreg70
	GIE %CONFIG<imp-use,kill>
    Successors according to CFG: BB#0(?%)

BB#0: derived from LLVM BB %entry
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#12
	%vreg33<def> = COPY %R3; GPR32:%vreg33
	%vreg32<def> = COPY %R2; GPR32:%vreg32
	%vreg31<def> = COPY %R1; GPR32:%vreg31
	%vreg30<def> = COPY %R0; GPR32:%vreg30
	%vreg34<def> = CMPri_r32 %vreg33, 1, %STATUS<imp-def>; GPR32:%vreg34,%vreg33
	BCC <BB#11>, 8, %STATUS<imp-use>
	BNONE32 <BB#1>, %STATUS<imp-use>
    Successors according to CFG: BB#1(0x50000000 / 0x80000000 = 62.50%) BB#11(0x30000000 / 0x80000000 = 37.50%)

BB#1: derived from LLVM BB %for.body3.lr.ph.preheader
    Predecessors according to CFG: BB#0
	%vreg1<def> = LSL32ri %vreg33, 2, %STATUS<imp-def,dead>; GPR32:%vreg1,%vreg33
	%vreg0<def> = ADDri_r32 %vreg31, 8, %STATUS<imp-def,dead>; GPR32:%vreg0,%vreg31
	%vreg36<def> = MOViPTR <fi#0>, 0; GPR32:%vreg36
	%vreg2<def> = ADDri_r32 %vreg36, 8, %STATUS<imp-def,dead>; GPR32:%vreg2,%vreg36
	%vreg35<def> = MOVi32ri 0; GPR32:%vreg35
    Successors according to CFG: BB#2(?%)

BB#2: derived from LLVM BB %for.body3.lr.ph
    Predecessors according to CFG: BB#1 BB#10
	%vreg3<def> = PHI %vreg32, <BB#1>, %vreg29, <BB#10>; GPR32:%vreg3,%vreg32,%vreg29
	%vreg4<def> = PHI %vreg35, <BB#1>, %vreg28, <BB#10>; GPR32:%vreg4,%vreg35,%vreg28
	%vreg74<def> = LDRi32_r32 <fi#3>, 0; mem:LD4[FixedStack3] GPR32:%vreg74
	GID %CONFIG<imp-def>
	%CONFIG<def> = MOVTS32_core %vreg74<kill>; GPR32:%vreg74
	GIE %CONFIG<imp-def>
	%vreg38<def> = IMULrr_r32 %vreg4, %vreg33, %STATUS<imp-def,dead>; GPR32:%vreg38,%vreg4,%vreg33
	%vreg39<def> = LSL32ri %vreg38<kill>, 2, %STATUS<imp-def,dead>; GPR32:%vreg39,%vreg38
	%vreg5<def> = ADDrr_r32 %vreg30, %vreg39<kill>, %STATUS<imp-def,dead>; GPR32:%vreg5,%vreg30,%vreg39
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %for.body9.preheader
    Predecessors according to CFG: BB#2 BB#9
	%vreg6<def> = PHI %vreg3, <BB#2>, %vreg27, <BB#9>; GPR32:%vreg6,%vreg3,%vreg27
	%vreg7<def> = PHI %vreg0, <BB#2>, %vreg26, <BB#9>; GPR32:%vreg7,%vreg0,%vreg26
	%vreg8<def> = PHI %vreg35, <BB#2>, %vreg25, <BB#9>; GPR32:%vreg8,%vreg35,%vreg25
	%vreg42<def> = REG_SEQUENCE %vreg35, isub_hi, %vreg35, isub_lo; FPR64_with_isub_hi_in_FPR32:%vreg42 GPR32:%vreg35
	STRi64 %vreg42, <fi#0>, 24; mem:ST8[%1+24] FPR64_with_isub_hi_in_FPR32:%vreg42
	STRi64 %vreg42, <fi#0>, 16; mem:ST8[%1+16] FPR64_with_isub_hi_in_FPR32:%vreg42
	STRi64 %vreg42, <fi#0>, 8; mem:ST8[%1+8] FPR64_with_isub_hi_in_FPR32:%vreg42
	STRi64 %vreg42, <fi#0>, 0; mem:ST8[%1] FPR64_with_isub_hi_in_FPR32:%vreg42
	BNONE32 <BB#5>, %STATUS<imp-use>
    Successors according to CFG: BB#5(?%)

BB#4: derived from LLVM BB %for.cond64.preheader
    Predecessors according to CFG: BB#7
	BNONE32 <BB#8>, %STATUS<imp-use>
    Successors according to CFG: BB#8(?%)

BB#5: derived from LLVM BB %for.body9
    Predecessors according to CFG: BB#3 BB#7
	%vreg9<def> = PHI %vreg7, <BB#3>, %vreg20, <BB#7>; GPR32:%vreg9,%vreg7,%vreg20
	%vreg10<def> = PHI %vreg35, <BB#3>, %vreg19, <BB#7>; GPR32:%vreg10,%vreg35,%vreg19
	%vreg44<def> = LSL32ri %vreg10, 2, %STATUS<imp-def,dead>; GPR32:%vreg44,%vreg10
	%vreg45<def> = ADDrr_r32 %vreg5, %vreg44<kill>, %STATUS<imp-def,dead>; GPR32:%vreg45,%vreg5,%vreg44
	%vreg11<def> = COPY %vreg2; GPR32:%vreg11,%vreg2
	%vreg12<def> = LDRf32 %vreg45<kill>, 0; mem:Volatile LD4[%add.ptr10](tbaa=!2) FPR32:%vreg12 GPR32:%vreg45
    Successors according to CFG: BB#6(?%)

BB#6: derived from LLVM BB %for.body13
    Predecessors according to CFG: BB#5 BB#6
	%vreg13<def> = PHI %vreg11, <BB#5>, %vreg18, <BB#6>; GPR32:%vreg13,%vreg11,%vreg18
	%vreg14<def> = PHI %vreg9, <BB#5>, %vreg17, <BB#6>; GPR32:%vreg14,%vreg9,%vreg17
	%vreg15<def> = PHI %vreg35, <BB#5>, %vreg16, <BB#6>; GPR32:%vreg15,%vreg35,%vreg16
	%vreg46<def> = LDRf32 %vreg14, -8; mem:Volatile LD4[%scevgep8](tbaa=!2) FPR32:%vreg46 GPR32:%vreg14
	%vreg18<def> = ADDri_r32 %vreg13, 16, %STATUS<imp-def,dead>; GPR32:%vreg18,%vreg13
	%vreg17<def> = ADDri_r32 %vreg14, 16, %STATUS<imp-def,dead>; GPR32:%vreg17,%vreg14
	%vreg47<def> = LDRf32 %vreg14, -4; mem:Volatile LD4[%scevgep9](tbaa=!2) FPR32:%vreg47 GPR32:%vreg14
	%vreg16<def> = ADDri_r32 %vreg15, 4, %STATUS<imp-def,dead>; GPR32:%vreg16,%vreg15
	%vreg48<def> = LDRf32 %vreg14, 0; mem:Volatile LD4[%lsr.iv5](tbaa=!2) FPR32:%vreg48 GPR32:%vreg14
	%vreg49<def> = LDRf32 %vreg14, 4; mem:Volatile LD4[%scevgep7](tbaa=!2) FPR32:%vreg49 GPR32:%vreg14
	%vreg50<def> = LDRf32 %vreg13, -8; mem:LD4[%scevgep15](tbaa=!2) FPR32:%vreg50 GPR32:%vreg13
	%vreg75<def> = LDRi32_r32 <fi#2>, 0; mem:LD4[FixedStack2] GPR32:%vreg75
	GID %CONFIG<imp-def>
	%CONFIG<def> = MOVTS32_core %vreg75<kill>; GPR32:%vreg75
	GIE %CONFIG<imp-def>
	%vreg51<def,tied1> = FMADDrr_r32 %vreg50<tied0>, %vreg12, %vreg46<kill>, %STATUS<imp-def,dead>; FPR32:%vreg51,%vreg50,%vreg12,%vreg46
	STRf32 %vreg51<kill>, %vreg13, -8; mem:ST4[%scevgep15](tbaa=!2) FPR32:%vreg51 GPR32:%vreg13
	%vreg52<def> = LDRf32 %vreg13, -4; mem:LD4[%scevgep17](tbaa=!2) FPR32:%vreg52 GPR32:%vreg13
	%vreg53<def,tied1> = FMADDrr_r32 %vreg52<tied0>, %vreg12, %vreg47<kill>, %STATUS<imp-def,dead>; FPR32:%vreg53,%vreg52,%vreg12,%vreg47
	STRf32 %vreg53<kill>, %vreg13, -4; mem:ST4[%scevgep17](tbaa=!2) FPR32:%vreg53 GPR32:%vreg13
	%vreg54<def> = LDRf32 %vreg13, 0; mem:LD4[%lsr.iv1214](tbaa=!2) FPR32:%vreg54 GPR32:%vreg13
	%vreg55<def,tied1> = FMADDrr_r32 %vreg54<tied0>, %vreg12, %vreg48<kill>, %STATUS<imp-def,dead>; FPR32:%vreg55,%vreg54,%vreg12,%vreg48
	STRf32 %vreg55<kill>, %vreg13, 0; mem:ST4[%lsr.iv1214](tbaa=!2) FPR32:%vreg55 GPR32:%vreg13
	%vreg56<def> = LDRf32 %vreg13, 4; mem:LD4[%scevgep16](tbaa=!2) FPR32:%vreg56 GPR32:%vreg13
	%vreg57<def,tied1> = FMADDrr_r32 %vreg56<tied0>, %vreg12, %vreg49<kill>, %STATUS<imp-def,dead>; FPR32:%vreg57,%vreg56,%vreg12,%vreg49
	%vreg58<def> = CMPri_r32 %vreg16, 8, %STATUS<imp-def>; GPR32:%vreg58,%vreg16
	STRf32 %vreg57<kill>, %vreg13, 4; mem:ST4[%scevgep16](tbaa=!2) FPR32:%vreg57 GPR32:%vreg13
	BCC <BB#6>, 8, %STATUS<imp-use>
	BNONE32 <BB#7>, %STATUS<imp-use>
    Successors according to CFG: BB#6(0x7c000000 / 0x80000000 = 96.88%) BB#7(0x04000000 / 0x80000000 = 3.12%)

BB#7: derived from LLVM BB %for.end60
    Predecessors according to CFG: BB#6
	%vreg20<def> = ADDrr_r32 %vreg9, %vreg1, %STATUS<imp-def,dead>; GPR32:%vreg20,%vreg9,%vreg1
	%vreg19<def> = ADDri_r32 %vreg10, 1, %STATUS<imp-def,dead>; GPR32:%vreg19,%vreg10
	%vreg59<def> = CMPrr_r32 %vreg19, %vreg33, %STATUS<imp-def>; GPR32:%vreg59,%vreg19,%vreg33
	BCC <BB#4>, 0, %STATUS<imp-use>
	BNONE32 <BB#5>, %STATUS<imp-use>
    Successors according to CFG: BB#4(0x04000000 / 0x80000000 = 3.12%) BB#5(0x7c000000 / 0x80000000 = 96.88%)

BB#8: derived from LLVM BB %for.body66
    Predecessors according to CFG: BB#4 BB#8
	%vreg21<def> = PHI %vreg6, <BB#4>, %vreg24, <BB#8>; GPR32:%vreg21,%vreg6,%vreg24
	%vreg22<def> = PHI %vreg35, <BB#4>, %vreg23, <BB#8>; GPR32:%vreg22,%vreg35,%vreg23
	%vreg62<def> = ADDrr_r32 %vreg36, %vreg22, %STATUS<imp-def,dead>; GPR32:%vreg62,%vreg36,%vreg22
	%vreg63<def> = LDRf32 %vreg62<kill>, 0; mem:LD4[%sunkaddr30](tbaa=!2) FPR32:%vreg63 GPR32:%vreg62
	%vreg24<def> = ADDri_r32 %vreg21, 4, %STATUS<imp-def,dead>; GPR32:%vreg24,%vreg21
	%vreg23<def> = ADDri_r32 %vreg22, 4, %STATUS<imp-def,dead>; GPR32:%vreg23,%vreg22
	%vreg64<def> = LDRf32 %vreg21, 0; mem:Volatile LD4[%lsr.iv24](tbaa=!2) FPR32:%vreg64 GPR32:%vreg21
	%vreg76<def> = LDRi32_r32 <fi#2>, 0; mem:LD4[FixedStack2] GPR32:%vreg76
	GID %CONFIG<imp-def>
	%CONFIG<def> = MOVTS32_core %vreg76<kill>; GPR32:%vreg76
	GIE %CONFIG<imp-def>
	%vreg65<def> = FADDrr_r32 %vreg63<kill>, %vreg64<kill>, %STATUS<imp-def,dead>; FPR32:%vreg65,%vreg63,%vreg64
	%vreg66<def> = CMPri_r32 %vreg23, 32, %STATUS<imp-def>; GPR32:%vreg66,%vreg23
	STRf32 %vreg65<kill>, %vreg21, 0; mem:Volatile ST4[%lsr.iv24](tbaa=!2) FPR32:%vreg65 GPR32:%vreg21
	BCC <BB#8>, 1, %STATUS<imp-use>
	BNONE32 <BB#9>, %STATUS<imp-use>
    Successors according to CFG: BB#9(0x04000000 / 0x80000000 = 3.12%) BB#8(0x7c000000 / 0x80000000 = 96.88%)

BB#9: derived from LLVM BB %for.end75
    Predecessors according to CFG: BB#8
	%vreg27<def> = ADDri_r32 %vreg6, 32, %STATUS<imp-def,dead>; GPR32:%vreg27,%vreg6
	%vreg26<def> = ADDri_r32 %vreg7, 32, %STATUS<imp-def,dead>; GPR32:%vreg26,%vreg7
	%vreg25<def> = ADDri_r32 %vreg8, 8, %STATUS<imp-def,dead>; GPR32:%vreg25,%vreg8
	%vreg67<def> = CMPrr_r32 %vreg25, %vreg33, %STATUS<imp-def>; GPR32:%vreg67,%vreg25,%vreg33
	BCC <BB#3>, 8, %STATUS<imp-use>
	BNONE32 <BB#10>, %STATUS<imp-use>
    Successors according to CFG: BB#3(0x7c000000 / 0x80000000 = 96.88%) BB#10(0x04000000 / 0x80000000 = 3.12%)

BB#10: derived from LLVM BB %for.end78
    Predecessors according to CFG: BB#9
	%vreg29<def> = ADDrr_r32 %vreg3, %vreg1, %STATUS<imp-def,dead>; GPR32:%vreg29,%vreg3,%vreg1
	%vreg28<def> = ADDri_r32 %vreg4, 1, %STATUS<imp-def,dead>; GPR32:%vreg28,%vreg4
	%vreg68<def> = CMPrr_r32 %vreg28, %vreg33, %STATUS<imp-def>; GPR32:%vreg68,%vreg28,%vreg33
	BCC <BB#2>, 1, %STATUS<imp-use>
	BNONE32 <BB#11>, %STATUS<imp-use>
    Successors according to CFG: BB#11(0x04000000 / 0x80000000 = 3.12%) BB#2(0x7c000000 / 0x80000000 = 96.88%)

BB#11: derived from LLVM BB %for.end81
    Predecessors according to CFG: BB#0 BB#10
	%vreg77<def> = LDRi32_r32 <fi#1>, 0; mem:LD4[FixedStack1] GPR32:%vreg77
	GID
	%CONFIG<def> = MOVTS32_core %vreg77<kill>; GPR32:%vreg77
	GIE %CONFIG<imp-use,kill>
	RTS

# End machine code for function matmac.

# *** IR Dump Before Machine Common Subexpression Elimination ***:
# Machine code for function matmac: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=32, align=8, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=4, align=4, at location [SP]
Function Live Ins: %R0 in %vreg30, %R1 in %vreg31, %R2 in %vreg32, %R3 in %vreg33

BB#12: 
    Live Ins: %R0 %R1 %R2 %R3
	GID %CONFIG<imp-def>
	%vreg71<def> = MOVFS32_core %CONFIG<kill>; GPR32:%vreg71
	STRi32_r32 %vreg71, <fi#1>, 0; mem:ST4[FixedStack1] GPR32:%vreg71
	%vreg72<def> = MOVi32ri 65535; GPR32:%vreg72
	%vreg73<def,tied1> = MOVTi32ri %vreg72<tied0>, 65521; GPR32:%vreg73,%vreg72
	%vreg69<def> = ANDrr_r32 %vreg71<kill>, %vreg73<kill>, %STATUS<imp-def>; GPR32:%vreg69,%vreg71,%vreg73
	STRi32_r32 %vreg69, <fi#2>, 0; mem:ST4[FixedStack2] GPR32:%vreg69
	%vreg70<def,tied1> = MOVTi32ri %vreg71<kill,tied0>, 72; GPR32:%vreg70,%vreg71
	STRi32_r32 %vreg70, <fi#3>, 0; mem:ST4[FixedStack3] GPR32:%vreg70
	GIE %CONFIG<imp-use,kill>
    Successors according to CFG: BB#0(?%)

BB#0: derived from LLVM BB %entry
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#12
	%vreg33<def> = COPY %R3; GPR32:%vreg33
	%vreg32<def> = COPY %R2; GPR32:%vreg32
	%vreg31<def> = COPY %R1; GPR32:%vreg31
	%vreg30<def> = COPY %R0; GPR32:%vreg30
	%vreg34<def> = CMPri_r32 %vreg33, 1, %STATUS<imp-def>; GPR32:%vreg34,%vreg33
	BCC <BB#11>, 8, %STATUS<imp-use>
	BNONE32 <BB#1>, %STATUS<imp-use>
    Successors according to CFG: BB#1(0x50000000 / 0x80000000 = 62.50%) BB#11(0x30000000 / 0x80000000 = 37.50%)

BB#1: derived from LLVM BB %for.body3.lr.ph.preheader
    Predecessors according to CFG: BB#0
	%vreg1<def> = LSL32ri %vreg33, 2, %STATUS<imp-def,dead>; GPR32:%vreg1,%vreg33
	%vreg0<def> = ADDri_r32 %vreg31, 8, %STATUS<imp-def,dead>; GPR32:%vreg0,%vreg31
	%vreg36<def> = MOViPTR <fi#0>, 0; GPR32:%vreg36
	%vreg2<def> = ADDri_r32 %vreg36, 8, %STATUS<imp-def,dead>; GPR32:%vreg2,%vreg36
	%vreg35<def> = MOVi32ri 0; GPR32:%vreg35
    Successors according to CFG: BB#2(?%)

BB#2: derived from LLVM BB %for.body3.lr.ph
    Predecessors according to CFG: BB#1 BB#10
	%vreg3<def> = PHI %vreg32, <BB#1>, %vreg29, <BB#10>; GPR32:%vreg3,%vreg32,%vreg29
	%vreg4<def> = PHI %vreg35, <BB#1>, %vreg28, <BB#10>; GPR32:%vreg4,%vreg35,%vreg28
	%vreg74<def> = LDRi32_r32 <fi#3>, 0; mem:LD4[FixedStack3] GPR32:%vreg74
	GID %CONFIG<imp-def>
	%CONFIG<def> = MOVTS32_core %vreg74<kill>; GPR32:%vreg74
	GIE %CONFIG<imp-def>
	%vreg38<def> = IMULrr_r32 %vreg4, %vreg33, %STATUS<imp-def,dead>; GPR32:%vreg38,%vreg4,%vreg33
	%vreg39<def> = LSL32ri %vreg38<kill>, 2, %STATUS<imp-def,dead>; GPR32:%vreg39,%vreg38
	%vreg5<def> = ADDrr_r32 %vreg30, %vreg39<kill>, %STATUS<imp-def,dead>; GPR32:%vreg5,%vreg30,%vreg39
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %for.body9.preheader
    Predecessors according to CFG: BB#2 BB#9
	%vreg6<def> = PHI %vreg3, <BB#2>, %vreg27, <BB#9>; GPR32:%vreg6,%vreg3,%vreg27
	%vreg7<def> = PHI %vreg0, <BB#2>, %vreg26, <BB#9>; GPR32:%vreg7,%vreg0,%vreg26
	%vreg8<def> = PHI %vreg35, <BB#2>, %vreg25, <BB#9>; GPR32:%vreg8,%vreg35,%vreg25
	%vreg42<def> = REG_SEQUENCE %vreg35, isub_hi, %vreg35, isub_lo; FPR64_with_isub_hi_in_FPR32:%vreg42 GPR32:%vreg35
	STRi64 %vreg42, <fi#0>, 24; mem:ST8[%1+24] FPR64_with_isub_hi_in_FPR32:%vreg42
	STRi64 %vreg42, <fi#0>, 16; mem:ST8[%1+16] FPR64_with_isub_hi_in_FPR32:%vreg42
	STRi64 %vreg42, <fi#0>, 8; mem:ST8[%1+8] FPR64_with_isub_hi_in_FPR32:%vreg42
	STRi64 %vreg42, <fi#0>, 0; mem:ST8[%1] FPR64_with_isub_hi_in_FPR32:%vreg42
	BNONE32 <BB#5>, %STATUS<imp-use>
    Successors according to CFG: BB#5(?%)

BB#4: derived from LLVM BB %for.cond64.preheader
    Predecessors according to CFG: BB#7
	BNONE32 <BB#8>, %STATUS<imp-use>
    Successors according to CFG: BB#8(?%)

BB#5: derived from LLVM BB %for.body9
    Predecessors according to CFG: BB#3 BB#7
	%vreg9<def> = PHI %vreg7, <BB#3>, %vreg20, <BB#7>; GPR32:%vreg9,%vreg7,%vreg20
	%vreg10<def> = PHI %vreg35, <BB#3>, %vreg19, <BB#7>; GPR32:%vreg10,%vreg35,%vreg19
	%vreg44<def> = LSL32ri %vreg10, 2, %STATUS<imp-def,dead>; GPR32:%vreg44,%vreg10
	%vreg45<def> = ADDrr_r32 %vreg5, %vreg44<kill>, %STATUS<imp-def,dead>; GPR32:%vreg45,%vreg5,%vreg44
	%vreg11<def> = COPY %vreg2; GPR32:%vreg11,%vreg2
	%vreg12<def> = LDRf32 %vreg45<kill>, 0; mem:Volatile LD4[%add.ptr10](tbaa=!2) FPR32:%vreg12 GPR32:%vreg45
    Successors according to CFG: BB#6(?%)

BB#6: derived from LLVM BB %for.body13
    Predecessors according to CFG: BB#5 BB#6
	%vreg13<def> = PHI %vreg11, <BB#5>, %vreg18, <BB#6>; GPR32:%vreg13,%vreg11,%vreg18
	%vreg14<def> = PHI %vreg9, <BB#5>, %vreg17, <BB#6>; GPR32:%vreg14,%vreg9,%vreg17
	%vreg15<def> = PHI %vreg35, <BB#5>, %vreg16, <BB#6>; GPR32:%vreg15,%vreg35,%vreg16
	%vreg46<def> = LDRf32 %vreg14, -8; mem:Volatile LD4[%scevgep8](tbaa=!2) FPR32:%vreg46 GPR32:%vreg14
	%vreg18<def> = ADDri_r32 %vreg13, 16, %STATUS<imp-def,dead>; GPR32:%vreg18,%vreg13
	%vreg17<def> = ADDri_r32 %vreg14, 16, %STATUS<imp-def,dead>; GPR32:%vreg17,%vreg14
	%vreg47<def> = LDRf32 %vreg14, -4; mem:Volatile LD4[%scevgep9](tbaa=!2) FPR32:%vreg47 GPR32:%vreg14
	%vreg16<def> = ADDri_r32 %vreg15, 4, %STATUS<imp-def,dead>; GPR32:%vreg16,%vreg15
	%vreg48<def> = LDRf32 %vreg14, 0; mem:Volatile LD4[%lsr.iv5](tbaa=!2) FPR32:%vreg48 GPR32:%vreg14
	%vreg49<def> = LDRf32 %vreg14, 4; mem:Volatile LD4[%scevgep7](tbaa=!2) FPR32:%vreg49 GPR32:%vreg14
	%vreg50<def> = LDRf32 %vreg13, -8; mem:LD4[%scevgep15](tbaa=!2) FPR32:%vreg50 GPR32:%vreg13
	%vreg75<def> = LDRi32_r32 <fi#2>, 0; mem:LD4[FixedStack2] GPR32:%vreg75
	GID %CONFIG<imp-def>
	%CONFIG<def> = MOVTS32_core %vreg75<kill>; GPR32:%vreg75
	GIE %CONFIG<imp-def>
	%vreg51<def,tied1> = FMADDrr_r32 %vreg50<tied0>, %vreg12, %vreg46<kill>, %STATUS<imp-def,dead>; FPR32:%vreg51,%vreg50,%vreg12,%vreg46
	STRf32 %vreg51<kill>, %vreg13, -8; mem:ST4[%scevgep15](tbaa=!2) FPR32:%vreg51 GPR32:%vreg13
	%vreg52<def> = LDRf32 %vreg13, -4; mem:LD4[%scevgep17](tbaa=!2) FPR32:%vreg52 GPR32:%vreg13
	%vreg53<def,tied1> = FMADDrr_r32 %vreg52<tied0>, %vreg12, %vreg47<kill>, %STATUS<imp-def,dead>; FPR32:%vreg53,%vreg52,%vreg12,%vreg47
	STRf32 %vreg53<kill>, %vreg13, -4; mem:ST4[%scevgep17](tbaa=!2) FPR32:%vreg53 GPR32:%vreg13
	%vreg54<def> = LDRf32 %vreg13, 0; mem:LD4[%lsr.iv1214](tbaa=!2) FPR32:%vreg54 GPR32:%vreg13
	%vreg55<def,tied1> = FMADDrr_r32 %vreg54<tied0>, %vreg12, %vreg48<kill>, %STATUS<imp-def,dead>; FPR32:%vreg55,%vreg54,%vreg12,%vreg48
	STRf32 %vreg55<kill>, %vreg13, 0; mem:ST4[%lsr.iv1214](tbaa=!2) FPR32:%vreg55 GPR32:%vreg13
	%vreg56<def> = LDRf32 %vreg13, 4; mem:LD4[%scevgep16](tbaa=!2) FPR32:%vreg56 GPR32:%vreg13
	%vreg57<def,tied1> = FMADDrr_r32 %vreg56<tied0>, %vreg12, %vreg49<kill>, %STATUS<imp-def,dead>; FPR32:%vreg57,%vreg56,%vreg12,%vreg49
	%vreg58<def> = CMPri_r32 %vreg16, 8, %STATUS<imp-def>; GPR32:%vreg58,%vreg16
	STRf32 %vreg57<kill>, %vreg13, 4; mem:ST4[%scevgep16](tbaa=!2) FPR32:%vreg57 GPR32:%vreg13
	BCC <BB#6>, 8, %STATUS<imp-use>
	BNONE32 <BB#7>, %STATUS<imp-use>
    Successors according to CFG: BB#6(0x7c000000 / 0x80000000 = 96.88%) BB#7(0x04000000 / 0x80000000 = 3.12%)

BB#7: derived from LLVM BB %for.end60
    Predecessors according to CFG: BB#6
	%vreg20<def> = ADDrr_r32 %vreg9, %vreg1, %STATUS<imp-def,dead>; GPR32:%vreg20,%vreg9,%vreg1
	%vreg19<def> = ADDri_r32 %vreg10, 1, %STATUS<imp-def,dead>; GPR32:%vreg19,%vreg10
	%vreg59<def> = CMPrr_r32 %vreg19, %vreg33, %STATUS<imp-def>; GPR32:%vreg59,%vreg19,%vreg33
	BCC <BB#4>, 0, %STATUS<imp-use>
	BNONE32 <BB#5>, %STATUS<imp-use>
    Successors according to CFG: BB#4(0x04000000 / 0x80000000 = 3.12%) BB#5(0x7c000000 / 0x80000000 = 96.88%)

BB#8: derived from LLVM BB %for.body66
    Predecessors according to CFG: BB#4 BB#8
	%vreg21<def> = PHI %vreg6, <BB#4>, %vreg24, <BB#8>; GPR32:%vreg21,%vreg6,%vreg24
	%vreg22<def> = PHI %vreg35, <BB#4>, %vreg23, <BB#8>; GPR32:%vreg22,%vreg35,%vreg23
	%vreg62<def> = ADDrr_r32 %vreg36, %vreg22, %STATUS<imp-def,dead>; GPR32:%vreg62,%vreg36,%vreg22
	%vreg63<def> = LDRf32 %vreg62<kill>, 0; mem:LD4[%sunkaddr30](tbaa=!2) FPR32:%vreg63 GPR32:%vreg62
	%vreg24<def> = ADDri_r32 %vreg21, 4, %STATUS<imp-def,dead>; GPR32:%vreg24,%vreg21
	%vreg23<def> = ADDri_r32 %vreg22, 4, %STATUS<imp-def,dead>; GPR32:%vreg23,%vreg22
	%vreg64<def> = LDRf32 %vreg21, 0; mem:Volatile LD4[%lsr.iv24](tbaa=!2) FPR32:%vreg64 GPR32:%vreg21
	%vreg76<def> = LDRi32_r32 <fi#2>, 0; mem:LD4[FixedStack2] GPR32:%vreg76
	GID %CONFIG<imp-def>
	%CONFIG<def> = MOVTS32_core %vreg76<kill>; GPR32:%vreg76
	GIE %CONFIG<imp-def>
	%vreg65<def> = FADDrr_r32 %vreg63<kill>, %vreg64<kill>, %STATUS<imp-def,dead>; FPR32:%vreg65,%vreg63,%vreg64
	%vreg66<def> = CMPri_r32 %vreg23, 32, %STATUS<imp-def>; GPR32:%vreg66,%vreg23
	STRf32 %vreg65<kill>, %vreg21, 0; mem:Volatile ST4[%lsr.iv24](tbaa=!2) FPR32:%vreg65 GPR32:%vreg21
	BCC <BB#8>, 1, %STATUS<imp-use>
	BNONE32 <BB#9>, %STATUS<imp-use>
    Successors according to CFG: BB#9(0x04000000 / 0x80000000 = 3.12%) BB#8(0x7c000000 / 0x80000000 = 96.88%)

BB#9: derived from LLVM BB %for.end75
    Predecessors according to CFG: BB#8
	%vreg27<def> = ADDri_r32 %vreg6, 32, %STATUS<imp-def,dead>; GPR32:%vreg27,%vreg6
	%vreg26<def> = ADDri_r32 %vreg7, 32, %STATUS<imp-def,dead>; GPR32:%vreg26,%vreg7
	%vreg25<def> = ADDri_r32 %vreg8, 8, %STATUS<imp-def,dead>; GPR32:%vreg25,%vreg8
	%vreg67<def> = CMPrr_r32 %vreg25, %vreg33, %STATUS<imp-def>; GPR32:%vreg67,%vreg25,%vreg33
	BCC <BB#3>, 8, %STATUS<imp-use>
	BNONE32 <BB#10>, %STATUS<imp-use>
    Successors according to CFG: BB#3(0x7c000000 / 0x80000000 = 96.88%) BB#10(0x04000000 / 0x80000000 = 3.12%)

BB#10: derived from LLVM BB %for.end78
    Predecessors according to CFG: BB#9
	%vreg29<def> = ADDrr_r32 %vreg3, %vreg1, %STATUS<imp-def,dead>; GPR32:%vreg29,%vreg3,%vreg1
	%vreg28<def> = ADDri_r32 %vreg4, 1, %STATUS<imp-def,dead>; GPR32:%vreg28,%vreg4
	%vreg68<def> = CMPrr_r32 %vreg28, %vreg33, %STATUS<imp-def>; GPR32:%vreg68,%vreg28,%vreg33
	BCC <BB#2>, 1, %STATUS<imp-use>
	BNONE32 <BB#11>, %STATUS<imp-use>
    Successors according to CFG: BB#11(0x04000000 / 0x80000000 = 3.12%) BB#2(0x7c000000 / 0x80000000 = 96.88%)

BB#11: derived from LLVM BB %for.end81
    Predecessors according to CFG: BB#0 BB#10
	%vreg77<def> = LDRi32_r32 <fi#1>, 0; mem:LD4[FixedStack1] GPR32:%vreg77
	GID
	%CONFIG<def> = MOVTS32_core %vreg77<kill>; GPR32:%vreg77
	GIE %CONFIG<imp-use,kill>
	RTS

# End machine code for function matmac.

Entering: (null)
Entering: entry
Entering: for.end81
Exiting: for.end81
Entering: for.body3.lr.ph.preheader
Entering: for.body3.lr.ph
Entering: for.body9.preheader
Entering: for.body9
Entering: for.body13
Entering: for.end60
Entering: for.cond64.preheader
Entering: for.body66
Entering: for.end75
Entering: for.end78
Exiting: for.end78
Exiting: for.end75
Exiting: for.body66
Exiting: for.cond64.preheader
Exiting: for.end60
Exiting: for.body13
Exiting: for.body9
Exiting: for.body9.preheader
Exiting: for.body3.lr.ph
Exiting: for.body3.lr.ph.preheader
Exiting: entry
Exiting: (null)
# *** IR Dump After Machine Common Subexpression Elimination ***:
# Machine code for function matmac: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=32, align=8, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=4, align=4, at location [SP]
Function Live Ins: %R0 in %vreg30, %R1 in %vreg31, %R2 in %vreg32, %R3 in %vreg33

BB#12: 
    Live Ins: %R0 %R1 %R2 %R3
	GID %CONFIG<imp-def>
	%vreg71<def> = MOVFS32_core %CONFIG<kill>; GPR32:%vreg71
	STRi32_r32 %vreg71, <fi#1>, 0; mem:ST4[FixedStack1] GPR32:%vreg71
	%vreg72<def> = MOVi32ri 65535; GPR32:%vreg72
	%vreg73<def,tied1> = MOVTi32ri %vreg72<tied0>, 65521; GPR32:%vreg73,%vreg72
	%vreg69<def> = ANDrr_r32 %vreg71<kill>, %vreg73<kill>, %STATUS<imp-def>; GPR32:%vreg69,%vreg71,%vreg73
	STRi32_r32 %vreg69, <fi#2>, 0; mem:ST4[FixedStack2] GPR32:%vreg69
	%vreg70<def,tied1> = MOVTi32ri %vreg71<kill,tied0>, 72; GPR32:%vreg70,%vreg71
	STRi32_r32 %vreg70, <fi#3>, 0; mem:ST4[FixedStack3] GPR32:%vreg70
	GIE %CONFIG<imp-use,kill>
    Successors according to CFG: BB#0(?%)

BB#0: derived from LLVM BB %entry
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#12
	%vreg33<def> = COPY %R3; GPR32:%vreg33
	%vreg32<def> = COPY %R2; GPR32:%vreg32
	%vreg31<def> = COPY %R1; GPR32:%vreg31
	%vreg30<def> = COPY %R0; GPR32:%vreg30
	%vreg34<def> = CMPri_r32 %vreg33, 1, %STATUS<imp-def>; GPR32:%vreg34,%vreg33
	BCC <BB#11>, 8, %STATUS<imp-use>
	BNONE32 <BB#1>, %STATUS<imp-use>
    Successors according to CFG: BB#1(0x50000000 / 0x80000000 = 62.50%) BB#11(0x30000000 / 0x80000000 = 37.50%)

BB#1: derived from LLVM BB %for.body3.lr.ph.preheader
    Predecessors according to CFG: BB#0
	%vreg1<def> = LSL32ri %vreg33, 2, %STATUS<imp-def,dead>; GPR32:%vreg1,%vreg33
	%vreg0<def> = ADDri_r32 %vreg31, 8, %STATUS<imp-def,dead>; GPR32:%vreg0,%vreg31
	%vreg36<def> = MOViPTR <fi#0>, 0; GPR32:%vreg36
	%vreg2<def> = ADDri_r32 %vreg36, 8, %STATUS<imp-def,dead>; GPR32:%vreg2,%vreg36
	%vreg35<def> = MOVi32ri 0; GPR32:%vreg35
    Successors according to CFG: BB#2(?%)

BB#2: derived from LLVM BB %for.body3.lr.ph
    Predecessors according to CFG: BB#1 BB#10
	%vreg3<def> = PHI %vreg32, <BB#1>, %vreg29, <BB#10>; GPR32:%vreg3,%vreg32,%vreg29
	%vreg4<def> = PHI %vreg35, <BB#1>, %vreg28, <BB#10>; GPR32:%vreg4,%vreg35,%vreg28
	%vreg74<def> = LDRi32_r32 <fi#3>, 0; mem:LD4[FixedStack3] GPR32:%vreg74
	GID %CONFIG<imp-def>
	%CONFIG<def> = MOVTS32_core %vreg74<kill>; GPR32:%vreg74
	GIE %CONFIG<imp-def>
	%vreg38<def> = IMULrr_r32 %vreg4, %vreg33, %STATUS<imp-def,dead>; GPR32:%vreg38,%vreg4,%vreg33
	%vreg39<def> = LSL32ri %vreg38<kill>, 2, %STATUS<imp-def,dead>; GPR32:%vreg39,%vreg38
	%vreg5<def> = ADDrr_r32 %vreg30, %vreg39<kill>, %STATUS<imp-def,dead>; GPR32:%vreg5,%vreg30,%vreg39
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %for.body9.preheader
    Predecessors according to CFG: BB#2 BB#9
	%vreg6<def> = PHI %vreg3, <BB#2>, %vreg27, <BB#9>; GPR32:%vreg6,%vreg3,%vreg27
	%vreg7<def> = PHI %vreg0, <BB#2>, %vreg26, <BB#9>; GPR32:%vreg7,%vreg0,%vreg26
	%vreg8<def> = PHI %vreg35, <BB#2>, %vreg25, <BB#9>; GPR32:%vreg8,%vreg35,%vreg25
	%vreg42<def> = REG_SEQUENCE %vreg35, isub_hi, %vreg35, isub_lo; FPR64_with_isub_hi_in_FPR32:%vreg42 GPR32:%vreg35
	STRi64 %vreg42, <fi#0>, 24; mem:ST8[%1+24] FPR64_with_isub_hi_in_FPR32:%vreg42
	STRi64 %vreg42, <fi#0>, 16; mem:ST8[%1+16] FPR64_with_isub_hi_in_FPR32:%vreg42
	STRi64 %vreg42, <fi#0>, 8; mem:ST8[%1+8] FPR64_with_isub_hi_in_FPR32:%vreg42
	STRi64 %vreg42, <fi#0>, 0; mem:ST8[%1] FPR64_with_isub_hi_in_FPR32:%vreg42
	BNONE32 <BB#5>, %STATUS<imp-use>
    Successors according to CFG: BB#5(?%)

BB#4: derived from LLVM BB %for.cond64.preheader
    Predecessors according to CFG: BB#7
	BNONE32 <BB#8>, %STATUS<imp-use>
    Successors according to CFG: BB#8(?%)

BB#5: derived from LLVM BB %for.body9
    Predecessors according to CFG: BB#3 BB#7
	%vreg9<def> = PHI %vreg7, <BB#3>, %vreg20, <BB#7>; GPR32:%vreg9,%vreg7,%vreg20
	%vreg10<def> = PHI %vreg35, <BB#3>, %vreg19, <BB#7>; GPR32:%vreg10,%vreg35,%vreg19
	%vreg44<def> = LSL32ri %vreg10, 2, %STATUS<imp-def,dead>; GPR32:%vreg44,%vreg10
	%vreg45<def> = ADDrr_r32 %vreg5, %vreg44<kill>, %STATUS<imp-def,dead>; GPR32:%vreg45,%vreg5,%vreg44
	%vreg11<def> = COPY %vreg2; GPR32:%vreg11,%vreg2
	%vreg12<def> = LDRf32 %vreg45<kill>, 0; mem:Volatile LD4[%add.ptr10](tbaa=!2) FPR32:%vreg12 GPR32:%vreg45
    Successors according to CFG: BB#6(?%)

BB#6: derived from LLVM BB %for.body13
    Predecessors according to CFG: BB#5 BB#6
	%vreg13<def> = PHI %vreg11, <BB#5>, %vreg18, <BB#6>; GPR32:%vreg13,%vreg11,%vreg18
	%vreg14<def> = PHI %vreg9, <BB#5>, %vreg17, <BB#6>; GPR32:%vreg14,%vreg9,%vreg17
	%vreg15<def> = PHI %vreg35, <BB#5>, %vreg16, <BB#6>; GPR32:%vreg15,%vreg35,%vreg16
	%vreg46<def> = LDRf32 %vreg14, -8; mem:Volatile LD4[%scevgep8](tbaa=!2) FPR32:%vreg46 GPR32:%vreg14
	%vreg18<def> = ADDri_r32 %vreg13, 16, %STATUS<imp-def,dead>; GPR32:%vreg18,%vreg13
	%vreg17<def> = ADDri_r32 %vreg14, 16, %STATUS<imp-def,dead>; GPR32:%vreg17,%vreg14
	%vreg47<def> = LDRf32 %vreg14, -4; mem:Volatile LD4[%scevgep9](tbaa=!2) FPR32:%vreg47 GPR32:%vreg14
	%vreg16<def> = ADDri_r32 %vreg15, 4, %STATUS<imp-def,dead>; GPR32:%vreg16,%vreg15
	%vreg48<def> = LDRf32 %vreg14, 0; mem:Volatile LD4[%lsr.iv5](tbaa=!2) FPR32:%vreg48 GPR32:%vreg14
	%vreg49<def> = LDRf32 %vreg14, 4; mem:Volatile LD4[%scevgep7](tbaa=!2) FPR32:%vreg49 GPR32:%vreg14
	%vreg50<def> = LDRf32 %vreg13, -8; mem:LD4[%scevgep15](tbaa=!2) FPR32:%vreg50 GPR32:%vreg13
	%vreg75<def> = LDRi32_r32 <fi#2>, 0; mem:LD4[FixedStack2] GPR32:%vreg75
	GID %CONFIG<imp-def>
	%CONFIG<def> = MOVTS32_core %vreg75<kill>; GPR32:%vreg75
	GIE %CONFIG<imp-def>
	%vreg51<def,tied1> = FMADDrr_r32 %vreg50<tied0>, %vreg12, %vreg46<kill>, %STATUS<imp-def,dead>; FPR32:%vreg51,%vreg50,%vreg12,%vreg46
	STRf32 %vreg51<kill>, %vreg13, -8; mem:ST4[%scevgep15](tbaa=!2) FPR32:%vreg51 GPR32:%vreg13
	%vreg52<def> = LDRf32 %vreg13, -4; mem:LD4[%scevgep17](tbaa=!2) FPR32:%vreg52 GPR32:%vreg13
	%vreg53<def,tied1> = FMADDrr_r32 %vreg52<tied0>, %vreg12, %vreg47<kill>, %STATUS<imp-def,dead>; FPR32:%vreg53,%vreg52,%vreg12,%vreg47
	STRf32 %vreg53<kill>, %vreg13, -4; mem:ST4[%scevgep17](tbaa=!2) FPR32:%vreg53 GPR32:%vreg13
	%vreg54<def> = LDRf32 %vreg13, 0; mem:LD4[%lsr.iv1214](tbaa=!2) FPR32:%vreg54 GPR32:%vreg13
	%vreg55<def,tied1> = FMADDrr_r32 %vreg54<tied0>, %vreg12, %vreg48<kill>, %STATUS<imp-def,dead>; FPR32:%vreg55,%vreg54,%vreg12,%vreg48
	STRf32 %vreg55<kill>, %vreg13, 0; mem:ST4[%lsr.iv1214](tbaa=!2) FPR32:%vreg55 GPR32:%vreg13
	%vreg56<def> = LDRf32 %vreg13, 4; mem:LD4[%scevgep16](tbaa=!2) FPR32:%vreg56 GPR32:%vreg13
	%vreg57<def,tied1> = FMADDrr_r32 %vreg56<tied0>, %vreg12, %vreg49<kill>, %STATUS<imp-def,dead>; FPR32:%vreg57,%vreg56,%vreg12,%vreg49
	%vreg58<def> = CMPri_r32 %vreg16, 8, %STATUS<imp-def>; GPR32:%vreg58,%vreg16
	STRf32 %vreg57<kill>, %vreg13, 4; mem:ST4[%scevgep16](tbaa=!2) FPR32:%vreg57 GPR32:%vreg13
	BCC <BB#6>, 8, %STATUS<imp-use>
	BNONE32 <BB#7>, %STATUS<imp-use>
    Successors according to CFG: BB#6(0x7c000000 / 0x80000000 = 96.88%) BB#7(0x04000000 / 0x80000000 = 3.12%)

BB#7: derived from LLVM BB %for.end60
    Predecessors according to CFG: BB#6
	%vreg20<def> = ADDrr_r32 %vreg9, %vreg1, %STATUS<imp-def,dead>; GPR32:%vreg20,%vreg9,%vreg1
	%vreg19<def> = ADDri_r32 %vreg10, 1, %STATUS<imp-def,dead>; GPR32:%vreg19,%vreg10
	%vreg59<def> = CMPrr_r32 %vreg19, %vreg33, %STATUS<imp-def>; GPR32:%vreg59,%vreg19,%vreg33
	BCC <BB#4>, 0, %STATUS<imp-use>
	BNONE32 <BB#5>, %STATUS<imp-use>
    Successors according to CFG: BB#4(0x04000000 / 0x80000000 = 3.12%) BB#5(0x7c000000 / 0x80000000 = 96.88%)

BB#8: derived from LLVM BB %for.body66
    Predecessors according to CFG: BB#4 BB#8
	%vreg21<def> = PHI %vreg6, <BB#4>, %vreg24, <BB#8>; GPR32:%vreg21,%vreg6,%vreg24
	%vreg22<def> = PHI %vreg35, <BB#4>, %vreg23, <BB#8>; GPR32:%vreg22,%vreg35,%vreg23
	%vreg62<def> = ADDrr_r32 %vreg36, %vreg22, %STATUS<imp-def,dead>; GPR32:%vreg62,%vreg36,%vreg22
	%vreg63<def> = LDRf32 %vreg62<kill>, 0; mem:LD4[%sunkaddr30](tbaa=!2) FPR32:%vreg63 GPR32:%vreg62
	%vreg24<def> = ADDri_r32 %vreg21, 4, %STATUS<imp-def,dead>; GPR32:%vreg24,%vreg21
	%vreg23<def> = ADDri_r32 %vreg22, 4, %STATUS<imp-def,dead>; GPR32:%vreg23,%vreg22
	%vreg64<def> = LDRf32 %vreg21, 0; mem:Volatile LD4[%lsr.iv24](tbaa=!2) FPR32:%vreg64 GPR32:%vreg21
	%vreg76<def> = LDRi32_r32 <fi#2>, 0; mem:LD4[FixedStack2] GPR32:%vreg76
	GID %CONFIG<imp-def>
	%CONFIG<def> = MOVTS32_core %vreg76<kill>; GPR32:%vreg76
	GIE %CONFIG<imp-def>
	%vreg65<def> = FADDrr_r32 %vreg63<kill>, %vreg64<kill>, %STATUS<imp-def,dead>; FPR32:%vreg65,%vreg63,%vreg64
	%vreg66<def> = CMPri_r32 %vreg23, 32, %STATUS<imp-def>; GPR32:%vreg66,%vreg23
	STRf32 %vreg65<kill>, %vreg21, 0; mem:Volatile ST4[%lsr.iv24](tbaa=!2) FPR32:%vreg65 GPR32:%vreg21
	BCC <BB#8>, 1, %STATUS<imp-use>
	BNONE32 <BB#9>, %STATUS<imp-use>
    Successors according to CFG: BB#9(0x04000000 / 0x80000000 = 3.12%) BB#8(0x7c000000 / 0x80000000 = 96.88%)

BB#9: derived from LLVM BB %for.end75
    Predecessors according to CFG: BB#8
	%vreg27<def> = ADDri_r32 %vreg6, 32, %STATUS<imp-def,dead>; GPR32:%vreg27,%vreg6
	%vreg26<def> = ADDri_r32 %vreg7, 32, %STATUS<imp-def,dead>; GPR32:%vreg26,%vreg7
	%vreg25<def> = ADDri_r32 %vreg8, 8, %STATUS<imp-def,dead>; GPR32:%vreg25,%vreg8
	%vreg67<def> = CMPrr_r32 %vreg25, %vreg33, %STATUS<imp-def>; GPR32:%vreg67,%vreg25,%vreg33
	BCC <BB#3>, 8, %STATUS<imp-use>
	BNONE32 <BB#10>, %STATUS<imp-use>
    Successors according to CFG: BB#3(0x7c000000 / 0x80000000 = 96.88%) BB#10(0x04000000 / 0x80000000 = 3.12%)

BB#10: derived from LLVM BB %for.end78
    Predecessors according to CFG: BB#9
	%vreg29<def> = ADDrr_r32 %vreg3, %vreg1, %STATUS<imp-def,dead>; GPR32:%vreg29,%vreg3,%vreg1
	%vreg28<def> = ADDri_r32 %vreg4, 1, %STATUS<imp-def,dead>; GPR32:%vreg28,%vreg4
	%vreg68<def> = CMPrr_r32 %vreg28, %vreg33, %STATUS<imp-def>; GPR32:%vreg68,%vreg28,%vreg33
	BCC <BB#2>, 1, %STATUS<imp-use>
	BNONE32 <BB#11>, %STATUS<imp-use>
    Successors according to CFG: BB#11(0x04000000 / 0x80000000 = 3.12%) BB#2(0x7c000000 / 0x80000000 = 96.88%)

BB#11: derived from LLVM BB %for.end81
    Predecessors according to CFG: BB#0 BB#10
	%vreg77<def> = LDRi32_r32 <fi#1>, 0; mem:LD4[FixedStack1] GPR32:%vreg77
	GID
	%CONFIG<def> = MOVTS32_core %vreg77<kill>; GPR32:%vreg77
	GIE %CONFIG<imp-use,kill>
	RTS

# End machine code for function matmac.


block-frequency: matmac
=======================
reverse-post-order-traversal
 - 0: BB12
 - 1: BB0[entry]
 - 2: BB1[for.body3.lr.ph.preheader]
 - 3: BB2[for.body3.lr.ph]
 - 4: BB3[for.body9.preheader]
 - 5: BB5[for.body9]
 - 6: BB6[for.body13]
 - 7: BB7[for.end60]
 - 8: BB4[for.cond64.preheader]
 - 9: BB8[for.body66]
 - 10: BB9[for.end75]
 - 11: BB10[for.end78]
 - 12: BB11[for.end81]
loop-detection
 - loop = BB2[for.body3.lr.ph]
 - loop = BB3[for.body9.preheader]
 - loop = BB5[for.body9]
 - loop = BB8[for.body66]
 - loop = BB6[for.body13]
 - loop = BB5[for.body9]: member = BB7[for.end60]
 - loop = BB3[for.body9.preheader]: member = BB4[for.cond64.preheader]
 - loop = BB3[for.body9.preheader]: member = BB9[for.end75]
 - loop = BB2[for.body3.lr.ph]: member = BB10[for.end78]
compute-mass-in-loop: BB6[for.body13]*
 - node: BB6[for.body13]
  => [backedge] weight = 2080374784
  => [  exit  ] weight = 67108864, succ = BB7[for.end60]
  => mass:  ffffffffffffffff
  => assign f7ffffffffffffff (0800000000000000) [back] to BB6[for.body13]
  => assign 0800000000000000 (0000000000000000) [exit] to BB7[for.end60]
compute-loop-scale: BB6[for.body13]*
 - exit-mass = 0800000000000000 (ffffffffffffffff - f7ffffffffffffff)
 - scale = 32.0
packaging-loop: BB6[for.body13]*
 - node: BB6[for.body13]
compute-mass-in-loop: BB8[for.body66]*
 - node: BB8[for.body66]
  => [  exit  ] weight = 67108864, succ = BB9[for.end75]
  => [backedge] weight = 2080374784
  => mass:  ffffffffffffffff
  => assign f7ffffffffffffff (0800000000000000) [back] to BB8[for.body66]
  => assign 0800000000000000 (0000000000000000) [exit] to BB9[for.end75]
compute-loop-scale: BB8[for.body66]*
 - exit-mass = 0800000000000000 (ffffffffffffffff - f7ffffffffffffff)
 - scale = 32.0
packaging-loop: BB8[for.body66]*
 - node: BB8[for.body66]
compute-mass-in-loop: BB5[for.body9]*
 - node: BB5[for.body9]
  => [ local  ] weight = 2147483648, succ = BB6[for.body13]
  => mass:  ffffffffffffffff
  => assign ffffffffffffffff (0000000000000000) to BB6[for.body13]
 - node: BB6[for.body13]
  => [ local  ] weight = 576460752303423488, succ = BB7[for.end60]
  => mass:  ffffffffffffffff
  => assign ffffffffffffffff (0000000000000000) to BB7[for.end60]
 - node: BB7[for.end60]
  => [  exit  ] weight = 67108864, succ = BB4[for.cond64.preheader]
  => [backedge] weight = 2080374784
  => mass:  ffffffffffffffff
  => assign f7ffffffffffffff (0800000000000000) [back] to BB5[for.body9]
  => assign 0800000000000000 (0000000000000000) [exit] to BB4[for.cond64.preheader]
compute-loop-scale: BB5[for.body9]*
 - exit-mass = 0800000000000000 (ffffffffffffffff - f7ffffffffffffff)
 - scale = 32.0
packaging-loop: BB5[for.body9]*
 - node: BB5[for.body9]
 - node: BB6[for.body13]
 - node: BB7[for.end60]
compute-mass-in-loop: BB3[for.body9.preheader]*
 - node: BB3[for.body9.preheader]
  => [ local  ] weight = 2147483648, succ = BB5[for.body9]
  => mass:  ffffffffffffffff
  => assign ffffffffffffffff (0000000000000000) to BB5[for.body9]
 - node: BB5[for.body9]
  => [ local  ] weight = 576460752303423488, succ = BB4[for.cond64.preheader]
  => mass:  ffffffffffffffff
  => assign ffffffffffffffff (0000000000000000) to BB4[for.cond64.preheader]
 - node: BB4[for.cond64.preheader]
  => [ local  ] weight = 2147483648, succ = BB8[for.body66]
  => mass:  ffffffffffffffff
  => assign ffffffffffffffff (0000000000000000) to BB8[for.body66]
 - node: BB8[for.body66]
  => [ local  ] weight = 576460752303423488, succ = BB9[for.end75]
  => mass:  ffffffffffffffff
  => assign ffffffffffffffff (0000000000000000) to BB9[for.end75]
 - node: BB9[for.end75]
  => [backedge] weight = 2080374784
  => [  exit  ] weight = 67108864, succ = BB10[for.end78]
  => mass:  ffffffffffffffff
  => assign f7ffffffffffffff (0800000000000000) [back] to BB3[for.body9.preheader]
  => assign 0800000000000000 (0000000000000000) [exit] to BB10[for.end78]
compute-loop-scale: BB3[for.body9.preheader]*
 - exit-mass = 0800000000000000 (ffffffffffffffff - f7ffffffffffffff)
 - scale = 32.0
packaging-loop: BB3[for.body9.preheader]*
 - node: BB3[for.body9.preheader]
 - node: BB5[for.body9]
 - node: BB4[for.cond64.preheader]
 - node: BB8[for.body66]
 - node: BB9[for.end75]
compute-mass-in-loop: BB2[for.body3.lr.ph]*
 - node: BB2[for.body3.lr.ph]
  => [ local  ] weight = 2147483648, succ = BB3[for.body9.preheader]
  => mass:  ffffffffffffffff
  => assign ffffffffffffffff (0000000000000000) to BB3[for.body9.preheader]
 - node: BB3[for.body9.preheader]
  => [ local  ] weight = 576460752303423488, succ = BB10[for.end78]
  => mass:  ffffffffffffffff
  => assign ffffffffffffffff (0000000000000000) to BB10[for.end78]
 - node: BB10[for.end78]
  => [  exit  ] weight = 67108864, succ = BB11[for.end81]
  => [backedge] weight = 2080374784
  => mass:  ffffffffffffffff
  => assign f7ffffffffffffff (0800000000000000) [back] to BB2[for.body3.lr.ph]
  => assign 0800000000000000 (0000000000000000) [exit] to BB11[for.end81]
compute-loop-scale: BB2[for.body3.lr.ph]*
 - exit-mass = 0800000000000000 (ffffffffffffffff - f7ffffffffffffff)
 - scale = 32.0
packaging-loop: BB2[for.body3.lr.ph]*
 - node: BB2[for.body3.lr.ph]
 - node: BB3[for.body9.preheader]
 - node: BB10[for.end78]
compute-mass-in-function
 - node: BB12
  => [ local  ] weight = 2147483648, succ = BB0[entry]
  => mass:  ffffffffffffffff
  => assign ffffffffffffffff (0000000000000000) to BB0[entry]
 - node: BB0[entry]
  => [ local  ] weight = 1342177280, succ = BB1[for.body3.lr.ph.preheader]
  => [ local  ] weight = 805306368, succ = BB11[for.end81]
  => mass:  ffffffffffffffff
  => assign 9fffffffffffffff (6000000000000000) to BB1[for.body3.lr.ph.preheader]
  => assign 6000000000000000 (0000000000000000) to BB11[for.end81]
 - node: BB1[for.body3.lr.ph.preheader]
  => [ local  ] weight = 2147483648, succ = BB2[for.body3.lr.ph]
  => mass:  9fffffffffffffff
  => assign 9fffffffffffffff (0000000000000000) to BB2[for.body3.lr.ph]
 - node: BB2[for.body3.lr.ph]
  => [ local  ] weight = 576460752303423488, succ = BB11[for.end81]
  => mass:  9fffffffffffffff
  => assign 9fffffffffffffff (0000000000000000) to BB11[for.end81]
 - node: BB11[for.end81]
  => mass:  ffffffffffffffff
unwrap-loop-package: BB2[for.body3.lr.ph]*: mass = 9fffffffffffffff, scale = 32.0
  => combined-scale = 20.0
 - BB2[for.body3.lr.ph]: 1.0 => 20.0
 - BB3[for.body9.preheader]: 32.0 => 640.0
 - BB10[for.end78]: 1.0 => 20.0
unwrap-loop-package: BB3[for.body9.preheader]*: mass = ffffffffffffffff, scale = 640.0
  => combined-scale = 640.0
 - BB3[for.body9.preheader]: 1.0 => 640.0
 - BB5[for.body9]: 32.0 => 20480.0
 - BB4[for.cond64.preheader]: 1.0 => 640.0
 - BB8[for.body66]: 32.0 => 20480.0
 - BB9[for.end75]: 1.0 => 640.0
unwrap-loop-package: BB5[for.body9]*: mass = ffffffffffffffff, scale = 20480.0
  => combined-scale = 20480.0
 - BB5[for.body9]: 1.0 => 20480.0
 - BB6[for.body13]: 32.0 => 655360.0
 - BB7[for.end60]: 1.0 => 20480.0
unwrap-loop-package: BB8[for.body66]*: mass = ffffffffffffffff, scale = 20480.0
  => combined-scale = 20480.0
 - BB8[for.body66]: 1.0 => 20480.0
unwrap-loop-package: BB6[for.body13]*: mass = ffffffffffffffff, scale = 655360.0
  => combined-scale = 655360.0
 - BB6[for.body13]: 1.0 => 655360.0
float-to-int: min = 0.625, max = 655360.0, factor = 12.8
 - BB12: float = 1.0, scaled = 12.8, int = 12
 - BB0[entry]: float = 1.0, scaled = 12.8, int = 12
 - BB1[for.body3.lr.ph.preheader]: float = 0.625, scaled = 8.0, int = 8
 - BB2[for.body3.lr.ph]: float = 20.0, scaled = 256.0, int = 255
 - BB3[for.body9.preheader]: float = 640.0, scaled = 8192.0, int = 8191
 - BB5[for.body9]: float = 20480.0, scaled = 262144.0, int = 262143
 - BB6[for.body13]: float = 655360.0, scaled = 8388608.0, int = 8388607
 - BB7[for.end60]: float = 20480.0, scaled = 262144.0, int = 262143
 - BB4[for.cond64.preheader]: float = 640.0, scaled = 8192.0, int = 8191
 - BB8[for.body66]: float = 20480.0, scaled = 262144.0, int = 262143
 - BB9[for.end75]: float = 640.0, scaled = 8192.0, int = 8191
 - BB10[for.end78]: float = 20.0, scaled = 256.0, int = 255
 - BB11[for.end81]: float = 1.0, scaled = 12.8, int = 12
block-frequency-info: matmac
 - BB12: float = 1.0, int = 12
 - BB0[entry]: float = 1.0, int = 12
 - BB1[for.body3.lr.ph.preheader]: float = 0.625, int = 8
 - BB2[for.body3.lr.ph]: float = 20.0, int = 255
 - BB3[for.body9.preheader]: float = 640.0, int = 8191
 - BB4[for.cond64.preheader]: float = 640.0, int = 8191
 - BB5[for.body9]: float = 20480.0, int = 262143
 - BB6[for.body13]: float = 655360.0, int = 8388607
 - BB7[for.end60]: float = 20480.0, int = 262143
 - BB8[for.body66]: float = 20480.0, int = 262143
 - BB9[for.end75]: float = 640.0, int = 8191
 - BB10[for.end78]: float = 20.0, int = 255
 - BB11[for.end81]: float = 1.0, int = 12

# *** IR Dump Before Machine code sinking ***:
# Machine code for function matmac: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=32, align=8, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=4, align=4, at location [SP]
Function Live Ins: %R0 in %vreg30, %R1 in %vreg31, %R2 in %vreg32, %R3 in %vreg33

BB#12: 
    Live Ins: %R0 %R1 %R2 %R3
	GID %CONFIG<imp-def>
	%vreg71<def> = MOVFS32_core %CONFIG<kill>; GPR32:%vreg71
	STRi32_r32 %vreg71, <fi#1>, 0; mem:ST4[FixedStack1] GPR32:%vreg71
	%vreg72<def> = MOVi32ri 65535; GPR32:%vreg72
	%vreg73<def,tied1> = MOVTi32ri %vreg72<tied0>, 65521; GPR32:%vreg73,%vreg72
	%vreg69<def> = ANDrr_r32 %vreg71<kill>, %vreg73<kill>, %STATUS<imp-def>; GPR32:%vreg69,%vreg71,%vreg73
	STRi32_r32 %vreg69, <fi#2>, 0; mem:ST4[FixedStack2] GPR32:%vreg69
	%vreg70<def,tied1> = MOVTi32ri %vreg71<kill,tied0>, 72; GPR32:%vreg70,%vreg71
	STRi32_r32 %vreg70, <fi#3>, 0; mem:ST4[FixedStack3] GPR32:%vreg70
	GIE %CONFIG<imp-use,kill>
    Successors according to CFG: BB#0(?%)

BB#0: derived from LLVM BB %entry
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#12
	%vreg33<def> = COPY %R3; GPR32:%vreg33
	%vreg32<def> = COPY %R2; GPR32:%vreg32
	%vreg31<def> = COPY %R1; GPR32:%vreg31
	%vreg30<def> = COPY %R0; GPR32:%vreg30
	%vreg34<def> = CMPri_r32 %vreg33, 1, %STATUS<imp-def>; GPR32:%vreg34,%vreg33
	BCC <BB#11>, 8, %STATUS<imp-use>
	BNONE32 <BB#1>, %STATUS<imp-use>
    Successors according to CFG: BB#1(0x50000000 / 0x80000000 = 62.50%) BB#11(0x30000000 / 0x80000000 = 37.50%)

BB#1: derived from LLVM BB %for.body3.lr.ph.preheader
    Predecessors according to CFG: BB#0
	%vreg1<def> = LSL32ri %vreg33, 2, %STATUS<imp-def,dead>; GPR32:%vreg1,%vreg33
	%vreg0<def> = ADDri_r32 %vreg31, 8, %STATUS<imp-def,dead>; GPR32:%vreg0,%vreg31
	%vreg36<def> = MOViPTR <fi#0>, 0; GPR32:%vreg36
	%vreg2<def> = ADDri_r32 %vreg36, 8, %STATUS<imp-def,dead>; GPR32:%vreg2,%vreg36
	%vreg35<def> = MOVi32ri 0; GPR32:%vreg35
    Successors according to CFG: BB#2(?%)

BB#2: derived from LLVM BB %for.body3.lr.ph
    Predecessors according to CFG: BB#1 BB#10
	%vreg3<def> = PHI %vreg32, <BB#1>, %vreg29, <BB#10>; GPR32:%vreg3,%vreg32,%vreg29
	%vreg4<def> = PHI %vreg35, <BB#1>, %vreg28, <BB#10>; GPR32:%vreg4,%vreg35,%vreg28
	%vreg74<def> = LDRi32_r32 <fi#3>, 0; mem:LD4[FixedStack3] GPR32:%vreg74
	GID %CONFIG<imp-def>
	%CONFIG<def> = MOVTS32_core %vreg74<kill>; GPR32:%vreg74
	GIE %CONFIG<imp-def>
	%vreg38<def> = IMULrr_r32 %vreg4, %vreg33, %STATUS<imp-def,dead>; GPR32:%vreg38,%vreg4,%vreg33
	%vreg39<def> = LSL32ri %vreg38<kill>, 2, %STATUS<imp-def,dead>; GPR32:%vreg39,%vreg38
	%vreg5<def> = ADDrr_r32 %vreg30, %vreg39<kill>, %STATUS<imp-def,dead>; GPR32:%vreg5,%vreg30,%vreg39
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %for.body9.preheader
    Predecessors according to CFG: BB#2 BB#9
	%vreg6<def> = PHI %vreg3, <BB#2>, %vreg27, <BB#9>; GPR32:%vreg6,%vreg3,%vreg27
	%vreg7<def> = PHI %vreg0, <BB#2>, %vreg26, <BB#9>; GPR32:%vreg7,%vreg0,%vreg26
	%vreg8<def> = PHI %vreg35, <BB#2>, %vreg25, <BB#9>; GPR32:%vreg8,%vreg35,%vreg25
	%vreg42<def> = REG_SEQUENCE %vreg35, isub_hi, %vreg35, isub_lo; FPR64_with_isub_hi_in_FPR32:%vreg42 GPR32:%vreg35
	STRi64 %vreg42, <fi#0>, 24; mem:ST8[%1+24] FPR64_with_isub_hi_in_FPR32:%vreg42
	STRi64 %vreg42, <fi#0>, 16; mem:ST8[%1+16] FPR64_with_isub_hi_in_FPR32:%vreg42
	STRi64 %vreg42, <fi#0>, 8; mem:ST8[%1+8] FPR64_with_isub_hi_in_FPR32:%vreg42
	STRi64 %vreg42, <fi#0>, 0; mem:ST8[%1] FPR64_with_isub_hi_in_FPR32:%vreg42
	BNONE32 <BB#5>, %STATUS<imp-use>
    Successors according to CFG: BB#5(?%)

BB#4: derived from LLVM BB %for.cond64.preheader
    Predecessors according to CFG: BB#7
	BNONE32 <BB#8>, %STATUS<imp-use>
    Successors according to CFG: BB#8(?%)

BB#5: derived from LLVM BB %for.body9
    Predecessors according to CFG: BB#3 BB#7
	%vreg9<def> = PHI %vreg7, <BB#3>, %vreg20, <BB#7>; GPR32:%vreg9,%vreg7,%vreg20
	%vreg10<def> = PHI %vreg35, <BB#3>, %vreg19, <BB#7>; GPR32:%vreg10,%vreg35,%vreg19
	%vreg44<def> = LSL32ri %vreg10, 2, %STATUS<imp-def,dead>; GPR32:%vreg44,%vreg10
	%vreg45<def> = ADDrr_r32 %vreg5, %vreg44<kill>, %STATUS<imp-def,dead>; GPR32:%vreg45,%vreg5,%vreg44
	%vreg11<def> = COPY %vreg2; GPR32:%vreg11,%vreg2
	%vreg12<def> = LDRf32 %vreg45<kill>, 0; mem:Volatile LD4[%add.ptr10](tbaa=!2) FPR32:%vreg12 GPR32:%vreg45
    Successors according to CFG: BB#6(?%)

BB#6: derived from LLVM BB %for.body13
    Predecessors according to CFG: BB#5 BB#6
	%vreg13<def> = PHI %vreg11, <BB#5>, %vreg18, <BB#6>; GPR32:%vreg13,%vreg11,%vreg18
	%vreg14<def> = PHI %vreg9, <BB#5>, %vreg17, <BB#6>; GPR32:%vreg14,%vreg9,%vreg17
	%vreg15<def> = PHI %vreg35, <BB#5>, %vreg16, <BB#6>; GPR32:%vreg15,%vreg35,%vreg16
	%vreg46<def> = LDRf32 %vreg14, -8; mem:Volatile LD4[%scevgep8](tbaa=!2) FPR32:%vreg46 GPR32:%vreg14
	%vreg18<def> = ADDri_r32 %vreg13, 16, %STATUS<imp-def,dead>; GPR32:%vreg18,%vreg13
	%vreg17<def> = ADDri_r32 %vreg14, 16, %STATUS<imp-def,dead>; GPR32:%vreg17,%vreg14
	%vreg47<def> = LDRf32 %vreg14, -4; mem:Volatile LD4[%scevgep9](tbaa=!2) FPR32:%vreg47 GPR32:%vreg14
	%vreg16<def> = ADDri_r32 %vreg15, 4, %STATUS<imp-def,dead>; GPR32:%vreg16,%vreg15
	%vreg48<def> = LDRf32 %vreg14, 0; mem:Volatile LD4[%lsr.iv5](tbaa=!2) FPR32:%vreg48 GPR32:%vreg14
	%vreg49<def> = LDRf32 %vreg14, 4; mem:Volatile LD4[%scevgep7](tbaa=!2) FPR32:%vreg49 GPR32:%vreg14
	%vreg50<def> = LDRf32 %vreg13, -8; mem:LD4[%scevgep15](tbaa=!2) FPR32:%vreg50 GPR32:%vreg13
	%vreg75<def> = LDRi32_r32 <fi#2>, 0; mem:LD4[FixedStack2] GPR32:%vreg75
	GID %CONFIG<imp-def>
	%CONFIG<def> = MOVTS32_core %vreg75<kill>; GPR32:%vreg75
	GIE %CONFIG<imp-def>
	%vreg51<def,tied1> = FMADDrr_r32 %vreg50<tied0>, %vreg12, %vreg46<kill>, %STATUS<imp-def,dead>; FPR32:%vreg51,%vreg50,%vreg12,%vreg46
	STRf32 %vreg51<kill>, %vreg13, -8; mem:ST4[%scevgep15](tbaa=!2) FPR32:%vreg51 GPR32:%vreg13
	%vreg52<def> = LDRf32 %vreg13, -4; mem:LD4[%scevgep17](tbaa=!2) FPR32:%vreg52 GPR32:%vreg13
	%vreg53<def,tied1> = FMADDrr_r32 %vreg52<tied0>, %vreg12, %vreg47<kill>, %STATUS<imp-def,dead>; FPR32:%vreg53,%vreg52,%vreg12,%vreg47
	STRf32 %vreg53<kill>, %vreg13, -4; mem:ST4[%scevgep17](tbaa=!2) FPR32:%vreg53 GPR32:%vreg13
	%vreg54<def> = LDRf32 %vreg13, 0; mem:LD4[%lsr.iv1214](tbaa=!2) FPR32:%vreg54 GPR32:%vreg13
	%vreg55<def,tied1> = FMADDrr_r32 %vreg54<tied0>, %vreg12, %vreg48<kill>, %STATUS<imp-def,dead>; FPR32:%vreg55,%vreg54,%vreg12,%vreg48
	STRf32 %vreg55<kill>, %vreg13, 0; mem:ST4[%lsr.iv1214](tbaa=!2) FPR32:%vreg55 GPR32:%vreg13
	%vreg56<def> = LDRf32 %vreg13, 4; mem:LD4[%scevgep16](tbaa=!2) FPR32:%vreg56 GPR32:%vreg13
	%vreg57<def,tied1> = FMADDrr_r32 %vreg56<tied0>, %vreg12, %vreg49<kill>, %STATUS<imp-def,dead>; FPR32:%vreg57,%vreg56,%vreg12,%vreg49
	%vreg58<def> = CMPri_r32 %vreg16, 8, %STATUS<imp-def>; GPR32:%vreg58,%vreg16
	STRf32 %vreg57<kill>, %vreg13, 4; mem:ST4[%scevgep16](tbaa=!2) FPR32:%vreg57 GPR32:%vreg13
	BCC <BB#6>, 8, %STATUS<imp-use>
	BNONE32 <BB#7>, %STATUS<imp-use>
    Successors according to CFG: BB#6(0x7c000000 / 0x80000000 = 96.88%) BB#7(0x04000000 / 0x80000000 = 3.12%)

BB#7: derived from LLVM BB %for.end60
    Predecessors according to CFG: BB#6
	%vreg20<def> = ADDrr_r32 %vreg9, %vreg1, %STATUS<imp-def,dead>; GPR32:%vreg20,%vreg9,%vreg1
	%vreg19<def> = ADDri_r32 %vreg10, 1, %STATUS<imp-def,dead>; GPR32:%vreg19,%vreg10
	%vreg59<def> = CMPrr_r32 %vreg19, %vreg33, %STATUS<imp-def>; GPR32:%vreg59,%vreg19,%vreg33
	BCC <BB#4>, 0, %STATUS<imp-use>
	BNONE32 <BB#5>, %STATUS<imp-use>
    Successors according to CFG: BB#4(0x04000000 / 0x80000000 = 3.12%) BB#5(0x7c000000 / 0x80000000 = 96.88%)

BB#8: derived from LLVM BB %for.body66
    Predecessors according to CFG: BB#4 BB#8
	%vreg21<def> = PHI %vreg6, <BB#4>, %vreg24, <BB#8>; GPR32:%vreg21,%vreg6,%vreg24
	%vreg22<def> = PHI %vreg35, <BB#4>, %vreg23, <BB#8>; GPR32:%vreg22,%vreg35,%vreg23
	%vreg62<def> = ADDrr_r32 %vreg36, %vreg22, %STATUS<imp-def,dead>; GPR32:%vreg62,%vreg36,%vreg22
	%vreg63<def> = LDRf32 %vreg62<kill>, 0; mem:LD4[%sunkaddr30](tbaa=!2) FPR32:%vreg63 GPR32:%vreg62
	%vreg24<def> = ADDri_r32 %vreg21, 4, %STATUS<imp-def,dead>; GPR32:%vreg24,%vreg21
	%vreg23<def> = ADDri_r32 %vreg22, 4, %STATUS<imp-def,dead>; GPR32:%vreg23,%vreg22
	%vreg64<def> = LDRf32 %vreg21, 0; mem:Volatile LD4[%lsr.iv24](tbaa=!2) FPR32:%vreg64 GPR32:%vreg21
	%vreg76<def> = LDRi32_r32 <fi#2>, 0; mem:LD4[FixedStack2] GPR32:%vreg76
	GID %CONFIG<imp-def>
	%CONFIG<def> = MOVTS32_core %vreg76<kill>; GPR32:%vreg76
	GIE %CONFIG<imp-def>
	%vreg65<def> = FADDrr_r32 %vreg63<kill>, %vreg64<kill>, %STATUS<imp-def,dead>; FPR32:%vreg65,%vreg63,%vreg64
	%vreg66<def> = CMPri_r32 %vreg23, 32, %STATUS<imp-def>; GPR32:%vreg66,%vreg23
	STRf32 %vreg65<kill>, %vreg21, 0; mem:Volatile ST4[%lsr.iv24](tbaa=!2) FPR32:%vreg65 GPR32:%vreg21
	BCC <BB#8>, 1, %STATUS<imp-use>
	BNONE32 <BB#9>, %STATUS<imp-use>
    Successors according to CFG: BB#9(0x04000000 / 0x80000000 = 3.12%) BB#8(0x7c000000 / 0x80000000 = 96.88%)

BB#9: derived from LLVM BB %for.end75
    Predecessors according to CFG: BB#8
	%vreg27<def> = ADDri_r32 %vreg6, 32, %STATUS<imp-def,dead>; GPR32:%vreg27,%vreg6
	%vreg26<def> = ADDri_r32 %vreg7, 32, %STATUS<imp-def,dead>; GPR32:%vreg26,%vreg7
	%vreg25<def> = ADDri_r32 %vreg8, 8, %STATUS<imp-def,dead>; GPR32:%vreg25,%vreg8
	%vreg67<def> = CMPrr_r32 %vreg25, %vreg33, %STATUS<imp-def>; GPR32:%vreg67,%vreg25,%vreg33
	BCC <BB#3>, 8, %STATUS<imp-use>
	BNONE32 <BB#10>, %STATUS<imp-use>
    Successors according to CFG: BB#3(0x7c000000 / 0x80000000 = 96.88%) BB#10(0x04000000 / 0x80000000 = 3.12%)

BB#10: derived from LLVM BB %for.end78
    Predecessors according to CFG: BB#9
	%vreg29<def> = ADDrr_r32 %vreg3, %vreg1, %STATUS<imp-def,dead>; GPR32:%vreg29,%vreg3,%vreg1
	%vreg28<def> = ADDri_r32 %vreg4, 1, %STATUS<imp-def,dead>; GPR32:%vreg28,%vreg4
	%vreg68<def> = CMPrr_r32 %vreg28, %vreg33, %STATUS<imp-def>; GPR32:%vreg68,%vreg28,%vreg33
	BCC <BB#2>, 1, %STATUS<imp-use>
	BNONE32 <BB#11>, %STATUS<imp-use>
    Successors according to CFG: BB#11(0x04000000 / 0x80000000 = 3.12%) BB#2(0x7c000000 / 0x80000000 = 96.88%)

BB#11: derived from LLVM BB %for.end81
    Predecessors according to CFG: BB#0 BB#10
	%vreg77<def> = LDRi32_r32 <fi#1>, 0; mem:LD4[FixedStack1] GPR32:%vreg77
	GID
	%CONFIG<def> = MOVTS32_core %vreg77<kill>; GPR32:%vreg77
	GIE %CONFIG<imp-use,kill>
	RTS

# End machine code for function matmac.

******** Machine Sinking ********
Sink instr %vreg20<def> = ADDrr_r32 %vreg9, %vreg1, %STATUS<imp-def,dead>; GPR32:%vreg20,%vreg9,%vreg1
	into block BB#5: derived from LLVM BB %for.body9
    Predecessors according to CFG: BB#3 BB#7
	%vreg9<def> = PHI %vreg7, <BB#3>, %vreg20, <BB#7>; GPR32:%vreg9,%vreg7,%vreg20
	%vreg10<def> = PHI %vreg35, <BB#3>, %vreg19, <BB#7>; GPR32:%vreg10,%vreg35,%vreg19
	%vreg44<def> = LSL32ri %vreg10, 2, %STATUS<imp-def,dead>; GPR32:%vreg44,%vreg10
	%vreg45<def> = ADDrr_r32 %vreg5, %vreg44<kill>, %STATUS<imp-def,dead>; GPR32:%vreg45,%vreg5,%vreg44
	%vreg11<def> = COPY %vreg2; GPR32:%vreg11,%vreg2
	%vreg12<def> = LDRf32 %vreg45<kill>, 0; mem:Volatile LD4[%add.ptr10](tbaa=!2) FPR32:%vreg12 GPR32:%vreg45
    Successors according to CFG: BB#6(?%)
 *** NOTE: Critical edge found
 *** PUNTING: Not legal or profitable to break critical edge
Sink instr %vreg26<def> = ADDri_r32 %vreg7, 32, %STATUS<imp-def,dead>; GPR32:%vreg26,%vreg7
	into block BB#3: derived from LLVM BB %for.body9.preheader
    Predecessors according to CFG: BB#2 BB#9
	%vreg6<def> = PHI %vreg3, <BB#2>, %vreg27, <BB#9>; GPR32:%vreg6,%vreg3,%vreg27
	%vreg7<def> = PHI %vreg0, <BB#2>, %vreg26, <BB#9>; GPR32:%vreg7,%vreg0,%vreg26
	%vreg8<def> = PHI %vreg35, <BB#2>, %vreg25, <BB#9>; GPR32:%vreg8,%vreg35,%vreg25
	%vreg42<def> = REG_SEQUENCE %vreg35, isub_hi, %vreg35, isub_lo; FPR64_with_isub_hi_in_FPR32:%vreg42 GPR32:%vreg35
	STRi64 %vreg42, <fi#0>, 24; mem:ST8[%1+24] FPR64_with_isub_hi_in_FPR32:%vreg42
	STRi64 %vreg42, <fi#0>, 16; mem:ST8[%1+16] FPR64_with_isub_hi_in_FPR32:%vreg42
	STRi64 %vreg42, <fi#0>, 8; mem:ST8[%1+8] FPR64_with_isub_hi_in_FPR32:%vreg42
	STRi64 %vreg42, <fi#0>, 0; mem:ST8[%1] FPR64_with_isub_hi_in_FPR32:%vreg42
	BNONE32 <BB#5>, %STATUS<imp-use>
    Successors according to CFG: BB#5(?%)
 *** NOTE: Critical edge found
 *** PUNTING: Not legal or profitable to break critical edge
Sink instr %vreg27<def> = ADDri_r32 %vreg6, 32, %STATUS<imp-def,dead>; GPR32:%vreg27,%vreg6
	into block BB#3: derived from LLVM BB %for.body9.preheader
    Predecessors according to CFG: BB#2 BB#9
	%vreg6<def> = PHI %vreg3, <BB#2>, %vreg27, <BB#9>; GPR32:%vreg6,%vreg3,%vreg27
	%vreg7<def> = PHI %vreg0, <BB#2>, %vreg26, <BB#9>; GPR32:%vreg7,%vreg0,%vreg26
	%vreg8<def> = PHI %vreg35, <BB#2>, %vreg25, <BB#9>; GPR32:%vreg8,%vreg35,%vreg25
	%vreg42<def> = REG_SEQUENCE %vreg35, isub_hi, %vreg35, isub_lo; FPR64_with_isub_hi_in_FPR32:%vreg42 GPR32:%vreg35
	STRi64 %vreg42, <fi#0>, 24; mem:ST8[%1+24] FPR64_with_isub_hi_in_FPR32:%vreg42
	STRi64 %vreg42, <fi#0>, 16; mem:ST8[%1+16] FPR64_with_isub_hi_in_FPR32:%vreg42
	STRi64 %vreg42, <fi#0>, 8; mem:ST8[%1+8] FPR64_with_isub_hi_in_FPR32:%vreg42
	STRi64 %vreg42, <fi#0>, 0; mem:ST8[%1] FPR64_with_isub_hi_in_FPR32:%vreg42
	BNONE32 <BB#5>, %STATUS<imp-use>
    Successors according to CFG: BB#5(?%)
 *** NOTE: Critical edge found
 *** PUNTING: Not legal or profitable to break critical edge
Sink instr %vreg29<def> = ADDrr_r32 %vreg3, %vreg1, %STATUS<imp-def,dead>; GPR32:%vreg29,%vreg3,%vreg1
	into block BB#2: derived from LLVM BB %for.body3.lr.ph
    Predecessors according to CFG: BB#1 BB#10
	%vreg3<def> = PHI %vreg32, <BB#1>, %vreg29, <BB#10>; GPR32:%vreg3,%vreg32,%vreg29
	%vreg4<def> = PHI %vreg35, <BB#1>, %vreg28, <BB#10>; GPR32:%vreg4,%vreg35,%vreg28
	%vreg74<def> = LDRi32_r32 <fi#3>, 0; mem:LD4[FixedStack3] GPR32:%vreg74
	GID %CONFIG<imp-def>
	%CONFIG<def> = MOVTS32_core %vreg74<kill>; GPR32:%vreg74
	GIE %CONFIG<imp-def>
	%vreg38<def> = IMULrr_r32 %vreg4, %vreg33, %STATUS<imp-def,dead>; GPR32:%vreg38,%vreg4,%vreg33
	%vreg39<def> = LSL32ri %vreg38<kill>, 2, %STATUS<imp-def,dead>; GPR32:%vreg39,%vreg38
	%vreg5<def> = ADDrr_r32 %vreg30, %vreg39<kill>, %STATUS<imp-def,dead>; GPR32:%vreg5,%vreg30,%vreg39
    Successors according to CFG: BB#3(?%)
 *** NOTE: Critical edge found
 *** PUNTING: Not legal or profitable to break critical edge
# *** IR Dump After Machine code sinking ***:
# Machine code for function matmac: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=32, align=8, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=4, align=4, at location [SP]
Function Live Ins: %R0 in %vreg30, %R1 in %vreg31, %R2 in %vreg32, %R3 in %vreg33

BB#12: 
    Live Ins: %R0 %R1 %R2 %R3
	GID %CONFIG<imp-def>
	%vreg71<def> = MOVFS32_core %CONFIG<kill>; GPR32:%vreg71
	STRi32_r32 %vreg71, <fi#1>, 0; mem:ST4[FixedStack1] GPR32:%vreg71
	%vreg72<def> = MOVi32ri 65535; GPR32:%vreg72
	%vreg73<def,tied1> = MOVTi32ri %vreg72<tied0>, 65521; GPR32:%vreg73,%vreg72
	%vreg69<def> = ANDrr_r32 %vreg71<kill>, %vreg73<kill>, %STATUS<imp-def>; GPR32:%vreg69,%vreg71,%vreg73
	STRi32_r32 %vreg69, <fi#2>, 0; mem:ST4[FixedStack2] GPR32:%vreg69
	%vreg70<def,tied1> = MOVTi32ri %vreg71<kill,tied0>, 72; GPR32:%vreg70,%vreg71
	STRi32_r32 %vreg70, <fi#3>, 0; mem:ST4[FixedStack3] GPR32:%vreg70
	GIE %CONFIG<imp-use,kill>
    Successors according to CFG: BB#0(?%)

BB#0: derived from LLVM BB %entry
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#12
	%vreg33<def> = COPY %R3; GPR32:%vreg33
	%vreg32<def> = COPY %R2; GPR32:%vreg32
	%vreg31<def> = COPY %R1; GPR32:%vreg31
	%vreg30<def> = COPY %R0; GPR32:%vreg30
	%vreg34<def> = CMPri_r32 %vreg33, 1, %STATUS<imp-def>; GPR32:%vreg34,%vreg33
	BCC <BB#11>, 8, %STATUS<imp-use>
	BNONE32 <BB#1>, %STATUS<imp-use>
    Successors according to CFG: BB#1(0x50000000 / 0x80000000 = 62.50%) BB#11(0x30000000 / 0x80000000 = 37.50%)

BB#1: derived from LLVM BB %for.body3.lr.ph.preheader
    Predecessors according to CFG: BB#0
	%vreg1<def> = LSL32ri %vreg33, 2, %STATUS<imp-def,dead>; GPR32:%vreg1,%vreg33
	%vreg0<def> = ADDri_r32 %vreg31, 8, %STATUS<imp-def,dead>; GPR32:%vreg0,%vreg31
	%vreg36<def> = MOViPTR <fi#0>, 0; GPR32:%vreg36
	%vreg2<def> = ADDri_r32 %vreg36, 8, %STATUS<imp-def,dead>; GPR32:%vreg2,%vreg36
	%vreg35<def> = MOVi32ri 0; GPR32:%vreg35
    Successors according to CFG: BB#2(?%)

BB#2: derived from LLVM BB %for.body3.lr.ph
    Predecessors according to CFG: BB#1 BB#10
	%vreg3<def> = PHI %vreg32, <BB#1>, %vreg29, <BB#10>; GPR32:%vreg3,%vreg32,%vreg29
	%vreg4<def> = PHI %vreg35, <BB#1>, %vreg28, <BB#10>; GPR32:%vreg4,%vreg35,%vreg28
	%vreg74<def> = LDRi32_r32 <fi#3>, 0; mem:LD4[FixedStack3] GPR32:%vreg74
	GID %CONFIG<imp-def>
	%CONFIG<def> = MOVTS32_core %vreg74<kill>; GPR32:%vreg74
	GIE %CONFIG<imp-def>
	%vreg38<def> = IMULrr_r32 %vreg4, %vreg33, %STATUS<imp-def,dead>; GPR32:%vreg38,%vreg4,%vreg33
	%vreg39<def> = LSL32ri %vreg38<kill>, 2, %STATUS<imp-def,dead>; GPR32:%vreg39,%vreg38
	%vreg5<def> = ADDrr_r32 %vreg30, %vreg39<kill>, %STATUS<imp-def,dead>; GPR32:%vreg5,%vreg30,%vreg39
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %for.body9.preheader
    Predecessors according to CFG: BB#2 BB#9
	%vreg6<def> = PHI %vreg3, <BB#2>, %vreg27, <BB#9>; GPR32:%vreg6,%vreg3,%vreg27
	%vreg7<def> = PHI %vreg0, <BB#2>, %vreg26, <BB#9>; GPR32:%vreg7,%vreg0,%vreg26
	%vreg8<def> = PHI %vreg35, <BB#2>, %vreg25, <BB#9>; GPR32:%vreg8,%vreg35,%vreg25
	%vreg42<def> = REG_SEQUENCE %vreg35, isub_hi, %vreg35, isub_lo; FPR64_with_isub_hi_in_FPR32:%vreg42 GPR32:%vreg35
	STRi64 %vreg42, <fi#0>, 24; mem:ST8[%1+24] FPR64_with_isub_hi_in_FPR32:%vreg42
	STRi64 %vreg42, <fi#0>, 16; mem:ST8[%1+16] FPR64_with_isub_hi_in_FPR32:%vreg42
	STRi64 %vreg42, <fi#0>, 8; mem:ST8[%1+8] FPR64_with_isub_hi_in_FPR32:%vreg42
	STRi64 %vreg42, <fi#0>, 0; mem:ST8[%1] FPR64_with_isub_hi_in_FPR32:%vreg42
	BNONE32 <BB#5>, %STATUS<imp-use>
    Successors according to CFG: BB#5(?%)

BB#4: derived from LLVM BB %for.cond64.preheader
    Predecessors according to CFG: BB#7
	BNONE32 <BB#8>, %STATUS<imp-use>
    Successors according to CFG: BB#8(?%)

BB#5: derived from LLVM BB %for.body9
    Predecessors according to CFG: BB#3 BB#7
	%vreg9<def> = PHI %vreg7, <BB#3>, %vreg20, <BB#7>; GPR32:%vreg9,%vreg7,%vreg20
	%vreg10<def> = PHI %vreg35, <BB#3>, %vreg19, <BB#7>; GPR32:%vreg10,%vreg35,%vreg19
	%vreg44<def> = LSL32ri %vreg10, 2, %STATUS<imp-def,dead>; GPR32:%vreg44,%vreg10
	%vreg45<def> = ADDrr_r32 %vreg5, %vreg44<kill>, %STATUS<imp-def,dead>; GPR32:%vreg45,%vreg5,%vreg44
	%vreg11<def> = COPY %vreg2; GPR32:%vreg11,%vreg2
	%vreg12<def> = LDRf32 %vreg45<kill>, 0; mem:Volatile LD4[%add.ptr10](tbaa=!2) FPR32:%vreg12 GPR32:%vreg45
    Successors according to CFG: BB#6(?%)

BB#6: derived from LLVM BB %for.body13
    Predecessors according to CFG: BB#5 BB#6
	%vreg13<def> = PHI %vreg11, <BB#5>, %vreg18, <BB#6>; GPR32:%vreg13,%vreg11,%vreg18
	%vreg14<def> = PHI %vreg9, <BB#5>, %vreg17, <BB#6>; GPR32:%vreg14,%vreg9,%vreg17
	%vreg15<def> = PHI %vreg35, <BB#5>, %vreg16, <BB#6>; GPR32:%vreg15,%vreg35,%vreg16
	%vreg46<def> = LDRf32 %vreg14, -8; mem:Volatile LD4[%scevgep8](tbaa=!2) FPR32:%vreg46 GPR32:%vreg14
	%vreg18<def> = ADDri_r32 %vreg13, 16, %STATUS<imp-def,dead>; GPR32:%vreg18,%vreg13
	%vreg17<def> = ADDri_r32 %vreg14, 16, %STATUS<imp-def,dead>; GPR32:%vreg17,%vreg14
	%vreg47<def> = LDRf32 %vreg14, -4; mem:Volatile LD4[%scevgep9](tbaa=!2) FPR32:%vreg47 GPR32:%vreg14
	%vreg16<def> = ADDri_r32 %vreg15, 4, %STATUS<imp-def,dead>; GPR32:%vreg16,%vreg15
	%vreg48<def> = LDRf32 %vreg14, 0; mem:Volatile LD4[%lsr.iv5](tbaa=!2) FPR32:%vreg48 GPR32:%vreg14
	%vreg49<def> = LDRf32 %vreg14, 4; mem:Volatile LD4[%scevgep7](tbaa=!2) FPR32:%vreg49 GPR32:%vreg14
	%vreg50<def> = LDRf32 %vreg13, -8; mem:LD4[%scevgep15](tbaa=!2) FPR32:%vreg50 GPR32:%vreg13
	%vreg75<def> = LDRi32_r32 <fi#2>, 0; mem:LD4[FixedStack2] GPR32:%vreg75
	GID %CONFIG<imp-def>
	%CONFIG<def> = MOVTS32_core %vreg75<kill>; GPR32:%vreg75
	GIE %CONFIG<imp-def>
	%vreg51<def,tied1> = FMADDrr_r32 %vreg50<tied0>, %vreg12, %vreg46<kill>, %STATUS<imp-def,dead>; FPR32:%vreg51,%vreg50,%vreg12,%vreg46
	STRf32 %vreg51<kill>, %vreg13, -8; mem:ST4[%scevgep15](tbaa=!2) FPR32:%vreg51 GPR32:%vreg13
	%vreg52<def> = LDRf32 %vreg13, -4; mem:LD4[%scevgep17](tbaa=!2) FPR32:%vreg52 GPR32:%vreg13
	%vreg53<def,tied1> = FMADDrr_r32 %vreg52<tied0>, %vreg12, %vreg47<kill>, %STATUS<imp-def,dead>; FPR32:%vreg53,%vreg52,%vreg12,%vreg47
	STRf32 %vreg53<kill>, %vreg13, -4; mem:ST4[%scevgep17](tbaa=!2) FPR32:%vreg53 GPR32:%vreg13
	%vreg54<def> = LDRf32 %vreg13, 0; mem:LD4[%lsr.iv1214](tbaa=!2) FPR32:%vreg54 GPR32:%vreg13
	%vreg55<def,tied1> = FMADDrr_r32 %vreg54<tied0>, %vreg12, %vreg48<kill>, %STATUS<imp-def,dead>; FPR32:%vreg55,%vreg54,%vreg12,%vreg48
	STRf32 %vreg55<kill>, %vreg13, 0; mem:ST4[%lsr.iv1214](tbaa=!2) FPR32:%vreg55 GPR32:%vreg13
	%vreg56<def> = LDRf32 %vreg13, 4; mem:LD4[%scevgep16](tbaa=!2) FPR32:%vreg56 GPR32:%vreg13
	%vreg57<def,tied1> = FMADDrr_r32 %vreg56<tied0>, %vreg12, %vreg49<kill>, %STATUS<imp-def,dead>; FPR32:%vreg57,%vreg56,%vreg12,%vreg49
	%vreg58<def> = CMPri_r32 %vreg16, 8, %STATUS<imp-def>; GPR32:%vreg58,%vreg16
	STRf32 %vreg57<kill>, %vreg13, 4; mem:ST4[%scevgep16](tbaa=!2) FPR32:%vreg57 GPR32:%vreg13
	BCC <BB#6>, 8, %STATUS<imp-use>
	BNONE32 <BB#7>, %STATUS<imp-use>
    Successors according to CFG: BB#6(0x7c000000 / 0x80000000 = 96.88%) BB#7(0x04000000 / 0x80000000 = 3.12%)

BB#7: derived from LLVM BB %for.end60
    Predecessors according to CFG: BB#6
	%vreg20<def> = ADDrr_r32 %vreg9, %vreg1, %STATUS<imp-def,dead>; GPR32:%vreg20,%vreg9,%vreg1
	%vreg19<def> = ADDri_r32 %vreg10, 1, %STATUS<imp-def,dead>; GPR32:%vreg19,%vreg10
	%vreg59<def> = CMPrr_r32 %vreg19, %vreg33, %STATUS<imp-def>; GPR32:%vreg59,%vreg19,%vreg33
	BCC <BB#4>, 0, %STATUS<imp-use>
	BNONE32 <BB#5>, %STATUS<imp-use>
    Successors according to CFG: BB#4(0x04000000 / 0x80000000 = 3.12%) BB#5(0x7c000000 / 0x80000000 = 96.88%)

BB#8: derived from LLVM BB %for.body66
    Predecessors according to CFG: BB#4 BB#8
	%vreg21<def> = PHI %vreg6, <BB#4>, %vreg24, <BB#8>; GPR32:%vreg21,%vreg6,%vreg24
	%vreg22<def> = PHI %vreg35, <BB#4>, %vreg23, <BB#8>; GPR32:%vreg22,%vreg35,%vreg23
	%vreg62<def> = ADDrr_r32 %vreg36, %vreg22, %STATUS<imp-def,dead>; GPR32:%vreg62,%vreg36,%vreg22
	%vreg63<def> = LDRf32 %vreg62<kill>, 0; mem:LD4[%sunkaddr30](tbaa=!2) FPR32:%vreg63 GPR32:%vreg62
	%vreg24<def> = ADDri_r32 %vreg21, 4, %STATUS<imp-def,dead>; GPR32:%vreg24,%vreg21
	%vreg23<def> = ADDri_r32 %vreg22, 4, %STATUS<imp-def,dead>; GPR32:%vreg23,%vreg22
	%vreg64<def> = LDRf32 %vreg21, 0; mem:Volatile LD4[%lsr.iv24](tbaa=!2) FPR32:%vreg64 GPR32:%vreg21
	%vreg76<def> = LDRi32_r32 <fi#2>, 0; mem:LD4[FixedStack2] GPR32:%vreg76
	GID %CONFIG<imp-def>
	%CONFIG<def> = MOVTS32_core %vreg76<kill>; GPR32:%vreg76
	GIE %CONFIG<imp-def>
	%vreg65<def> = FADDrr_r32 %vreg63<kill>, %vreg64<kill>, %STATUS<imp-def,dead>; FPR32:%vreg65,%vreg63,%vreg64
	%vreg66<def> = CMPri_r32 %vreg23, 32, %STATUS<imp-def>; GPR32:%vreg66,%vreg23
	STRf32 %vreg65<kill>, %vreg21, 0; mem:Volatile ST4[%lsr.iv24](tbaa=!2) FPR32:%vreg65 GPR32:%vreg21
	BCC <BB#8>, 1, %STATUS<imp-use>
	BNONE32 <BB#9>, %STATUS<imp-use>
    Successors according to CFG: BB#9(0x04000000 / 0x80000000 = 3.12%) BB#8(0x7c000000 / 0x80000000 = 96.88%)

BB#9: derived from LLVM BB %for.end75
    Predecessors according to CFG: BB#8
	%vreg27<def> = ADDri_r32 %vreg6, 32, %STATUS<imp-def,dead>; GPR32:%vreg27,%vreg6
	%vreg26<def> = ADDri_r32 %vreg7, 32, %STATUS<imp-def,dead>; GPR32:%vreg26,%vreg7
	%vreg25<def> = ADDri_r32 %vreg8, 8, %STATUS<imp-def,dead>; GPR32:%vreg25,%vreg8
	%vreg67<def> = CMPrr_r32 %vreg25, %vreg33, %STATUS<imp-def>; GPR32:%vreg67,%vreg25,%vreg33
	BCC <BB#3>, 8, %STATUS<imp-use>
	BNONE32 <BB#10>, %STATUS<imp-use>
    Successors according to CFG: BB#3(0x7c000000 / 0x80000000 = 96.88%) BB#10(0x04000000 / 0x80000000 = 3.12%)

BB#10: derived from LLVM BB %for.end78
    Predecessors according to CFG: BB#9
	%vreg29<def> = ADDrr_r32 %vreg3, %vreg1, %STATUS<imp-def,dead>; GPR32:%vreg29,%vreg3,%vreg1
	%vreg28<def> = ADDri_r32 %vreg4, 1, %STATUS<imp-def,dead>; GPR32:%vreg28,%vreg4
	%vreg68<def> = CMPrr_r32 %vreg28, %vreg33, %STATUS<imp-def>; GPR32:%vreg68,%vreg28,%vreg33
	BCC <BB#2>, 1, %STATUS<imp-use>
	BNONE32 <BB#11>, %STATUS<imp-use>
    Successors according to CFG: BB#11(0x04000000 / 0x80000000 = 3.12%) BB#2(0x7c000000 / 0x80000000 = 96.88%)

BB#11: derived from LLVM BB %for.end81
    Predecessors according to CFG: BB#0 BB#10
	%vreg77<def> = LDRi32_r32 <fi#1>, 0; mem:LD4[FixedStack1] GPR32:%vreg77
	GID
	%CONFIG<def> = MOVTS32_core %vreg77<kill>; GPR32:%vreg77
	GIE %CONFIG<imp-use,kill>
	RTS

# End machine code for function matmac.

# *** IR Dump Before Peephole Optimizations ***:
# Machine code for function matmac: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=32, align=8, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=4, align=4, at location [SP]
Function Live Ins: %R0 in %vreg30, %R1 in %vreg31, %R2 in %vreg32, %R3 in %vreg33

BB#12: 
    Live Ins: %R0 %R1 %R2 %R3
	GID %CONFIG<imp-def>
	%vreg71<def> = MOVFS32_core %CONFIG<kill>; GPR32:%vreg71
	STRi32_r32 %vreg71, <fi#1>, 0; mem:ST4[FixedStack1] GPR32:%vreg71
	%vreg72<def> = MOVi32ri 65535; GPR32:%vreg72
	%vreg73<def,tied1> = MOVTi32ri %vreg72<tied0>, 65521; GPR32:%vreg73,%vreg72
	%vreg69<def> = ANDrr_r32 %vreg71<kill>, %vreg73<kill>, %STATUS<imp-def>; GPR32:%vreg69,%vreg71,%vreg73
	STRi32_r32 %vreg69, <fi#2>, 0; mem:ST4[FixedStack2] GPR32:%vreg69
	%vreg70<def,tied1> = MOVTi32ri %vreg71<kill,tied0>, 72; GPR32:%vreg70,%vreg71
	STRi32_r32 %vreg70, <fi#3>, 0; mem:ST4[FixedStack3] GPR32:%vreg70
	GIE %CONFIG<imp-use,kill>
    Successors according to CFG: BB#0(?%)

BB#0: derived from LLVM BB %entry
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#12
	%vreg33<def> = COPY %R3; GPR32:%vreg33
	%vreg32<def> = COPY %R2; GPR32:%vreg32
	%vreg31<def> = COPY %R1; GPR32:%vreg31
	%vreg30<def> = COPY %R0; GPR32:%vreg30
	%vreg34<def> = CMPri_r32 %vreg33, 1, %STATUS<imp-def>; GPR32:%vreg34,%vreg33
	BCC <BB#11>, 8, %STATUS<imp-use>
	BNONE32 <BB#1>, %STATUS<imp-use>
    Successors according to CFG: BB#1(0x50000000 / 0x80000000 = 62.50%) BB#11(0x30000000 / 0x80000000 = 37.50%)

BB#1: derived from LLVM BB %for.body3.lr.ph.preheader
    Predecessors according to CFG: BB#0
	%vreg1<def> = LSL32ri %vreg33, 2, %STATUS<imp-def,dead>; GPR32:%vreg1,%vreg33
	%vreg0<def> = ADDri_r32 %vreg31, 8, %STATUS<imp-def,dead>; GPR32:%vreg0,%vreg31
	%vreg36<def> = MOViPTR <fi#0>, 0; GPR32:%vreg36
	%vreg2<def> = ADDri_r32 %vreg36, 8, %STATUS<imp-def,dead>; GPR32:%vreg2,%vreg36
	%vreg35<def> = MOVi32ri 0; GPR32:%vreg35
    Successors according to CFG: BB#2(?%)

BB#2: derived from LLVM BB %for.body3.lr.ph
    Predecessors according to CFG: BB#1 BB#10
	%vreg3<def> = PHI %vreg32, <BB#1>, %vreg29, <BB#10>; GPR32:%vreg3,%vreg32,%vreg29
	%vreg4<def> = PHI %vreg35, <BB#1>, %vreg28, <BB#10>; GPR32:%vreg4,%vreg35,%vreg28
	%vreg74<def> = LDRi32_r32 <fi#3>, 0; mem:LD4[FixedStack3] GPR32:%vreg74
	GID %CONFIG<imp-def>
	%CONFIG<def> = MOVTS32_core %vreg74<kill>; GPR32:%vreg74
	GIE %CONFIG<imp-def>
	%vreg38<def> = IMULrr_r32 %vreg4, %vreg33, %STATUS<imp-def,dead>; GPR32:%vreg38,%vreg4,%vreg33
	%vreg39<def> = LSL32ri %vreg38<kill>, 2, %STATUS<imp-def,dead>; GPR32:%vreg39,%vreg38
	%vreg5<def> = ADDrr_r32 %vreg30, %vreg39<kill>, %STATUS<imp-def,dead>; GPR32:%vreg5,%vreg30,%vreg39
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %for.body9.preheader
    Predecessors according to CFG: BB#2 BB#9
	%vreg6<def> = PHI %vreg3, <BB#2>, %vreg27, <BB#9>; GPR32:%vreg6,%vreg3,%vreg27
	%vreg7<def> = PHI %vreg0, <BB#2>, %vreg26, <BB#9>; GPR32:%vreg7,%vreg0,%vreg26
	%vreg8<def> = PHI %vreg35, <BB#2>, %vreg25, <BB#9>; GPR32:%vreg8,%vreg35,%vreg25
	%vreg42<def> = REG_SEQUENCE %vreg35, isub_hi, %vreg35, isub_lo; FPR64_with_isub_hi_in_FPR32:%vreg42 GPR32:%vreg35
	STRi64 %vreg42, <fi#0>, 24; mem:ST8[%1+24] FPR64_with_isub_hi_in_FPR32:%vreg42
	STRi64 %vreg42, <fi#0>, 16; mem:ST8[%1+16] FPR64_with_isub_hi_in_FPR32:%vreg42
	STRi64 %vreg42, <fi#0>, 8; mem:ST8[%1+8] FPR64_with_isub_hi_in_FPR32:%vreg42
	STRi64 %vreg42, <fi#0>, 0; mem:ST8[%1] FPR64_with_isub_hi_in_FPR32:%vreg42
	BNONE32 <BB#5>, %STATUS<imp-use>
    Successors according to CFG: BB#5(?%)

BB#4: derived from LLVM BB %for.cond64.preheader
    Predecessors according to CFG: BB#7
	BNONE32 <BB#8>, %STATUS<imp-use>
    Successors according to CFG: BB#8(?%)

BB#5: derived from LLVM BB %for.body9
    Predecessors according to CFG: BB#3 BB#7
	%vreg9<def> = PHI %vreg7, <BB#3>, %vreg20, <BB#7>; GPR32:%vreg9,%vreg7,%vreg20
	%vreg10<def> = PHI %vreg35, <BB#3>, %vreg19, <BB#7>; GPR32:%vreg10,%vreg35,%vreg19
	%vreg44<def> = LSL32ri %vreg10, 2, %STATUS<imp-def,dead>; GPR32:%vreg44,%vreg10
	%vreg45<def> = ADDrr_r32 %vreg5, %vreg44<kill>, %STATUS<imp-def,dead>; GPR32:%vreg45,%vreg5,%vreg44
	%vreg11<def> = COPY %vreg2; GPR32:%vreg11,%vreg2
	%vreg12<def> = LDRf32 %vreg45<kill>, 0; mem:Volatile LD4[%add.ptr10](tbaa=!2) FPR32:%vreg12 GPR32:%vreg45
    Successors according to CFG: BB#6(?%)

BB#6: derived from LLVM BB %for.body13
    Predecessors according to CFG: BB#5 BB#6
	%vreg13<def> = PHI %vreg11, <BB#5>, %vreg18, <BB#6>; GPR32:%vreg13,%vreg11,%vreg18
	%vreg14<def> = PHI %vreg9, <BB#5>, %vreg17, <BB#6>; GPR32:%vreg14,%vreg9,%vreg17
	%vreg15<def> = PHI %vreg35, <BB#5>, %vreg16, <BB#6>; GPR32:%vreg15,%vreg35,%vreg16
	%vreg46<def> = LDRf32 %vreg14, -8; mem:Volatile LD4[%scevgep8](tbaa=!2) FPR32:%vreg46 GPR32:%vreg14
	%vreg18<def> = ADDri_r32 %vreg13, 16, %STATUS<imp-def,dead>; GPR32:%vreg18,%vreg13
	%vreg17<def> = ADDri_r32 %vreg14, 16, %STATUS<imp-def,dead>; GPR32:%vreg17,%vreg14
	%vreg47<def> = LDRf32 %vreg14, -4; mem:Volatile LD4[%scevgep9](tbaa=!2) FPR32:%vreg47 GPR32:%vreg14
	%vreg16<def> = ADDri_r32 %vreg15, 4, %STATUS<imp-def,dead>; GPR32:%vreg16,%vreg15
	%vreg48<def> = LDRf32 %vreg14, 0; mem:Volatile LD4[%lsr.iv5](tbaa=!2) FPR32:%vreg48 GPR32:%vreg14
	%vreg49<def> = LDRf32 %vreg14, 4; mem:Volatile LD4[%scevgep7](tbaa=!2) FPR32:%vreg49 GPR32:%vreg14
	%vreg50<def> = LDRf32 %vreg13, -8; mem:LD4[%scevgep15](tbaa=!2) FPR32:%vreg50 GPR32:%vreg13
	%vreg75<def> = LDRi32_r32 <fi#2>, 0; mem:LD4[FixedStack2] GPR32:%vreg75
	GID %CONFIG<imp-def>
	%CONFIG<def> = MOVTS32_core %vreg75<kill>; GPR32:%vreg75
	GIE %CONFIG<imp-def>
	%vreg51<def,tied1> = FMADDrr_r32 %vreg50<tied0>, %vreg12, %vreg46<kill>, %STATUS<imp-def,dead>; FPR32:%vreg51,%vreg50,%vreg12,%vreg46
	STRf32 %vreg51<kill>, %vreg13, -8; mem:ST4[%scevgep15](tbaa=!2) FPR32:%vreg51 GPR32:%vreg13
	%vreg52<def> = LDRf32 %vreg13, -4; mem:LD4[%scevgep17](tbaa=!2) FPR32:%vreg52 GPR32:%vreg13
	%vreg53<def,tied1> = FMADDrr_r32 %vreg52<tied0>, %vreg12, %vreg47<kill>, %STATUS<imp-def,dead>; FPR32:%vreg53,%vreg52,%vreg12,%vreg47
	STRf32 %vreg53<kill>, %vreg13, -4; mem:ST4[%scevgep17](tbaa=!2) FPR32:%vreg53 GPR32:%vreg13
	%vreg54<def> = LDRf32 %vreg13, 0; mem:LD4[%lsr.iv1214](tbaa=!2) FPR32:%vreg54 GPR32:%vreg13
	%vreg55<def,tied1> = FMADDrr_r32 %vreg54<tied0>, %vreg12, %vreg48<kill>, %STATUS<imp-def,dead>; FPR32:%vreg55,%vreg54,%vreg12,%vreg48
	STRf32 %vreg55<kill>, %vreg13, 0; mem:ST4[%lsr.iv1214](tbaa=!2) FPR32:%vreg55 GPR32:%vreg13
	%vreg56<def> = LDRf32 %vreg13, 4; mem:LD4[%scevgep16](tbaa=!2) FPR32:%vreg56 GPR32:%vreg13
	%vreg57<def,tied1> = FMADDrr_r32 %vreg56<tied0>, %vreg12, %vreg49<kill>, %STATUS<imp-def,dead>; FPR32:%vreg57,%vreg56,%vreg12,%vreg49
	%vreg58<def> = CMPri_r32 %vreg16, 8, %STATUS<imp-def>; GPR32:%vreg58,%vreg16
	STRf32 %vreg57<kill>, %vreg13, 4; mem:ST4[%scevgep16](tbaa=!2) FPR32:%vreg57 GPR32:%vreg13
	BCC <BB#6>, 8, %STATUS<imp-use>
	BNONE32 <BB#7>, %STATUS<imp-use>
    Successors according to CFG: BB#6(0x7c000000 / 0x80000000 = 96.88%) BB#7(0x04000000 / 0x80000000 = 3.12%)

BB#7: derived from LLVM BB %for.end60
    Predecessors according to CFG: BB#6
	%vreg20<def> = ADDrr_r32 %vreg9, %vreg1, %STATUS<imp-def,dead>; GPR32:%vreg20,%vreg9,%vreg1
	%vreg19<def> = ADDri_r32 %vreg10, 1, %STATUS<imp-def,dead>; GPR32:%vreg19,%vreg10
	%vreg59<def> = CMPrr_r32 %vreg19, %vreg33, %STATUS<imp-def>; GPR32:%vreg59,%vreg19,%vreg33
	BCC <BB#4>, 0, %STATUS<imp-use>
	BNONE32 <BB#5>, %STATUS<imp-use>
    Successors according to CFG: BB#4(0x04000000 / 0x80000000 = 3.12%) BB#5(0x7c000000 / 0x80000000 = 96.88%)

BB#8: derived from LLVM BB %for.body66
    Predecessors according to CFG: BB#4 BB#8
	%vreg21<def> = PHI %vreg6, <BB#4>, %vreg24, <BB#8>; GPR32:%vreg21,%vreg6,%vreg24
	%vreg22<def> = PHI %vreg35, <BB#4>, %vreg23, <BB#8>; GPR32:%vreg22,%vreg35,%vreg23
	%vreg62<def> = ADDrr_r32 %vreg36, %vreg22, %STATUS<imp-def,dead>; GPR32:%vreg62,%vreg36,%vreg22
	%vreg63<def> = LDRf32 %vreg62<kill>, 0; mem:LD4[%sunkaddr30](tbaa=!2) FPR32:%vreg63 GPR32:%vreg62
	%vreg24<def> = ADDri_r32 %vreg21, 4, %STATUS<imp-def,dead>; GPR32:%vreg24,%vreg21
	%vreg23<def> = ADDri_r32 %vreg22, 4, %STATUS<imp-def,dead>; GPR32:%vreg23,%vreg22
	%vreg64<def> = LDRf32 %vreg21, 0; mem:Volatile LD4[%lsr.iv24](tbaa=!2) FPR32:%vreg64 GPR32:%vreg21
	%vreg76<def> = LDRi32_r32 <fi#2>, 0; mem:LD4[FixedStack2] GPR32:%vreg76
	GID %CONFIG<imp-def>
	%CONFIG<def> = MOVTS32_core %vreg76<kill>; GPR32:%vreg76
	GIE %CONFIG<imp-def>
	%vreg65<def> = FADDrr_r32 %vreg63<kill>, %vreg64<kill>, %STATUS<imp-def,dead>; FPR32:%vreg65,%vreg63,%vreg64
	%vreg66<def> = CMPri_r32 %vreg23, 32, %STATUS<imp-def>; GPR32:%vreg66,%vreg23
	STRf32 %vreg65<kill>, %vreg21, 0; mem:Volatile ST4[%lsr.iv24](tbaa=!2) FPR32:%vreg65 GPR32:%vreg21
	BCC <BB#8>, 1, %STATUS<imp-use>
	BNONE32 <BB#9>, %STATUS<imp-use>
    Successors according to CFG: BB#9(0x04000000 / 0x80000000 = 3.12%) BB#8(0x7c000000 / 0x80000000 = 96.88%)

BB#9: derived from LLVM BB %for.end75
    Predecessors according to CFG: BB#8
	%vreg27<def> = ADDri_r32 %vreg6, 32, %STATUS<imp-def,dead>; GPR32:%vreg27,%vreg6
	%vreg26<def> = ADDri_r32 %vreg7, 32, %STATUS<imp-def,dead>; GPR32:%vreg26,%vreg7
	%vreg25<def> = ADDri_r32 %vreg8, 8, %STATUS<imp-def,dead>; GPR32:%vreg25,%vreg8
	%vreg67<def> = CMPrr_r32 %vreg25, %vreg33, %STATUS<imp-def>; GPR32:%vreg67,%vreg25,%vreg33
	BCC <BB#3>, 8, %STATUS<imp-use>
	BNONE32 <BB#10>, %STATUS<imp-use>
    Successors according to CFG: BB#3(0x7c000000 / 0x80000000 = 96.88%) BB#10(0x04000000 / 0x80000000 = 3.12%)

BB#10: derived from LLVM BB %for.end78
    Predecessors according to CFG: BB#9
	%vreg29<def> = ADDrr_r32 %vreg3, %vreg1, %STATUS<imp-def,dead>; GPR32:%vreg29,%vreg3,%vreg1
	%vreg28<def> = ADDri_r32 %vreg4, 1, %STATUS<imp-def,dead>; GPR32:%vreg28,%vreg4
	%vreg68<def> = CMPrr_r32 %vreg28, %vreg33, %STATUS<imp-def>; GPR32:%vreg68,%vreg28,%vreg33
	BCC <BB#2>, 1, %STATUS<imp-use>
	BNONE32 <BB#11>, %STATUS<imp-use>
    Successors according to CFG: BB#11(0x04000000 / 0x80000000 = 3.12%) BB#2(0x7c000000 / 0x80000000 = 96.88%)

BB#11: derived from LLVM BB %for.end81
    Predecessors according to CFG: BB#0 BB#10
	%vreg77<def> = LDRi32_r32 <fi#1>, 0; mem:LD4[FixedStack1] GPR32:%vreg77
	GID
	%CONFIG<def> = MOVTS32_core %vreg77<kill>; GPR32:%vreg77
	GIE %CONFIG<imp-use,kill>
	RTS

# End machine code for function matmac.

********** PEEPHOLE OPTIMIZER **********
********** Function: matmac
NAPhysCopy: blowing away all info due to GID %CONFIG<imp-def>

Encountered load fold barrier on GID %CONFIG<imp-def>

NAPhysCopy: blowing away all info due to %vreg71<def> = MOVFS32_core %CONFIG<kill>; GPR32:%vreg71

Encountered load fold barrier on %vreg71<def> = MOVFS32_core %CONFIG<kill>; GPR32:%vreg71

Encountered load fold barrier on STRi32_r32 %vreg71, <fi#1>, 0; mem:ST4[FixedStack1] GPR32:%vreg71

Encountered load fold barrier on STRi32_r32 %vreg69, <fi#2>, 0; mem:ST4[FixedStack2] GPR32:%vreg69

Encountered load fold barrier on STRi32_r32 %vreg70, <fi#3>, 0; mem:ST4[FixedStack3] GPR32:%vreg70

NAPhysCopy: blowing away all info due to GIE %CONFIG<imp-use,kill>

Encountered load fold barrier on GIE %CONFIG<imp-use,kill>

NAPhysCopy: blowing away all info due to GID %CONFIG<imp-def>

Encountered load fold barrier on GID %CONFIG<imp-def>

NAPhysCopy: blowing away all info due to %CONFIG<def> = MOVTS32_core %vreg74<kill>; GPR32:%vreg74

Encountered load fold barrier on %CONFIG<def> = MOVTS32_core %vreg74<kill>; GPR32:%vreg74

NAPhysCopy: blowing away all info due to GIE %CONFIG<imp-def>

Encountered load fold barrier on GIE %CONFIG<imp-def>

Encountered load fold barrier on STRi64 %vreg42, <fi#0>, 24; mem:ST8[%1+24] FPR64_with_isub_hi_in_FPR32:%vreg42

Encountered load fold barrier on STRi64 %vreg42, <fi#0>, 16; mem:ST8[%1+16] FPR64_with_isub_hi_in_FPR32:%vreg42

Encountered load fold barrier on STRi64 %vreg42, <fi#0>, 8; mem:ST8[%1+8] FPR64_with_isub_hi_in_FPR32:%vreg42

Encountered load fold barrier on STRi64 %vreg42, <fi#0>, 0; mem:ST8[%1] FPR64_with_isub_hi_in_FPR32:%vreg42

NAPhysCopy: blowing away all info due to GID %CONFIG<imp-def>

Encountered load fold barrier on GID %CONFIG<imp-def>

NAPhysCopy: blowing away all info due to %CONFIG<def> = MOVTS32_core %vreg75<kill>; GPR32:%vreg75

Encountered load fold barrier on %CONFIG<def> = MOVTS32_core %vreg75<kill>; GPR32:%vreg75

NAPhysCopy: blowing away all info due to GIE %CONFIG<imp-def>

Encountered load fold barrier on GIE %CONFIG<imp-def>

Encountered load fold barrier on STRf32 %vreg51<kill>, %vreg13, -8; mem:ST4[%scevgep15](tbaa=!2) FPR32:%vreg51 GPR32:%vreg13

Encountered load fold barrier on STRf32 %vreg53<kill>, %vreg13, -4; mem:ST4[%scevgep17](tbaa=!2) FPR32:%vreg53 GPR32:%vreg13

Encountered load fold barrier on STRf32 %vreg55<kill>, %vreg13, 0; mem:ST4[%lsr.iv1214](tbaa=!2) FPR32:%vreg55 GPR32:%vreg13

Encountered load fold barrier on STRf32 %vreg57<kill>, %vreg13, 4; mem:ST4[%scevgep16](tbaa=!2) FPR32:%vreg57 GPR32:%vreg13

NAPhysCopy: blowing away all info due to GID %CONFIG<imp-def>

Encountered load fold barrier on GID %CONFIG<imp-def>

NAPhysCopy: blowing away all info due to %CONFIG<def> = MOVTS32_core %vreg76<kill>; GPR32:%vreg76

Encountered load fold barrier on %CONFIG<def> = MOVTS32_core %vreg76<kill>; GPR32:%vreg76

NAPhysCopy: blowing away all info due to GIE %CONFIG<imp-def>

Encountered load fold barrier on GIE %CONFIG<imp-def>

Encountered load fold barrier on STRf32 %vreg65<kill>, %vreg21, 0; mem:Volatile ST4[%lsr.iv24](tbaa=!2) FPR32:%vreg65 GPR32:%vreg21

NAPhysCopy: blowing away all info due to GID

Encountered load fold barrier on GID

NAPhysCopy: blowing away all info due to %CONFIG<def> = MOVTS32_core %vreg77<kill>; GPR32:%vreg77

Encountered load fold barrier on %CONFIG<def> = MOVTS32_core %vreg77<kill>; GPR32:%vreg77

NAPhysCopy: blowing away all info due to GIE %CONFIG<imp-use,kill>

Encountered load fold barrier on GIE %CONFIG<imp-use,kill>

# *** IR Dump After Peephole Optimizations ***:
# Machine code for function matmac: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=32, align=8, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=4, align=4, at location [SP]
Function Live Ins: %R0 in %vreg30, %R1 in %vreg31, %R2 in %vreg32, %R3 in %vreg33

BB#12: 
    Live Ins: %R0 %R1 %R2 %R3
	GID %CONFIG<imp-def>
	%vreg71<def> = MOVFS32_core %CONFIG<kill>; GPR32:%vreg71
	STRi32_r32 %vreg71, <fi#1>, 0; mem:ST4[FixedStack1] GPR32:%vreg71
	%vreg72<def> = MOVi32ri 65535; GPR32:%vreg72
	%vreg73<def,tied1> = MOVTi32ri %vreg72<tied0>, 65521; GPR32:%vreg73,%vreg72
	%vreg69<def> = ANDrr_r32 %vreg71<kill>, %vreg73<kill>, %STATUS<imp-def>; GPR32:%vreg69,%vreg71,%vreg73
	STRi32_r32 %vreg69, <fi#2>, 0; mem:ST4[FixedStack2] GPR32:%vreg69
	%vreg70<def,tied1> = MOVTi32ri %vreg71<kill,tied0>, 72; GPR32:%vreg70,%vreg71
	STRi32_r32 %vreg70, <fi#3>, 0; mem:ST4[FixedStack3] GPR32:%vreg70
	GIE %CONFIG<imp-use,kill>
    Successors according to CFG: BB#0(?%)

BB#0: derived from LLVM BB %entry
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#12
	%vreg33<def> = COPY %R3; GPR32:%vreg33
	%vreg32<def> = COPY %R2; GPR32:%vreg32
	%vreg31<def> = COPY %R1; GPR32:%vreg31
	%vreg30<def> = COPY %R0; GPR32:%vreg30
	%vreg34<def> = CMPri_r32 %vreg33, 1, %STATUS<imp-def>; GPR32:%vreg34,%vreg33
	BCC <BB#11>, 8, %STATUS<imp-use>
	BNONE32 <BB#1>, %STATUS<imp-use>
    Successors according to CFG: BB#1(0x50000000 / 0x80000000 = 62.50%) BB#11(0x30000000 / 0x80000000 = 37.50%)

BB#1: derived from LLVM BB %for.body3.lr.ph.preheader
    Predecessors according to CFG: BB#0
	%vreg1<def> = LSL32ri %vreg33, 2, %STATUS<imp-def,dead>; GPR32:%vreg1,%vreg33
	%vreg0<def> = ADDri_r32 %vreg31, 8, %STATUS<imp-def,dead>; GPR32:%vreg0,%vreg31
	%vreg36<def> = MOViPTR <fi#0>, 0; GPR32:%vreg36
	%vreg2<def> = ADDri_r32 %vreg36, 8, %STATUS<imp-def,dead>; GPR32:%vreg2,%vreg36
	%vreg35<def> = MOVi32ri 0; GPR32:%vreg35
    Successors according to CFG: BB#2(?%)

BB#2: derived from LLVM BB %for.body3.lr.ph
    Predecessors according to CFG: BB#1 BB#10
	%vreg3<def> = PHI %vreg32, <BB#1>, %vreg29, <BB#10>; GPR32:%vreg3,%vreg32,%vreg29
	%vreg4<def> = PHI %vreg35, <BB#1>, %vreg28, <BB#10>; GPR32:%vreg4,%vreg35,%vreg28
	%vreg74<def> = LDRi32_r32 <fi#3>, 0; mem:LD4[FixedStack3] GPR32:%vreg74
	GID %CONFIG<imp-def>
	%CONFIG<def> = MOVTS32_core %vreg74<kill>; GPR32:%vreg74
	GIE %CONFIG<imp-def>
	%vreg38<def> = IMULrr_r32 %vreg4, %vreg33, %STATUS<imp-def,dead>; GPR32:%vreg38,%vreg4,%vreg33
	%vreg39<def> = LSL32ri %vreg38<kill>, 2, %STATUS<imp-def,dead>; GPR32:%vreg39,%vreg38
	%vreg5<def> = ADDrr_r32 %vreg30, %vreg39<kill>, %STATUS<imp-def,dead>; GPR32:%vreg5,%vreg30,%vreg39
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %for.body9.preheader
    Predecessors according to CFG: BB#2 BB#9
	%vreg6<def> = PHI %vreg3, <BB#2>, %vreg27, <BB#9>; GPR32:%vreg6,%vreg3,%vreg27
	%vreg7<def> = PHI %vreg0, <BB#2>, %vreg26, <BB#9>; GPR32:%vreg7,%vreg0,%vreg26
	%vreg8<def> = PHI %vreg35, <BB#2>, %vreg25, <BB#9>; GPR32:%vreg8,%vreg35,%vreg25
	%vreg42<def> = REG_SEQUENCE %vreg35, isub_hi, %vreg35, isub_lo; FPR64_with_isub_hi_in_FPR32:%vreg42 GPR32:%vreg35
	STRi64 %vreg42, <fi#0>, 24; mem:ST8[%1+24] FPR64_with_isub_hi_in_FPR32:%vreg42
	STRi64 %vreg42, <fi#0>, 16; mem:ST8[%1+16] FPR64_with_isub_hi_in_FPR32:%vreg42
	STRi64 %vreg42, <fi#0>, 8; mem:ST8[%1+8] FPR64_with_isub_hi_in_FPR32:%vreg42
	STRi64 %vreg42, <fi#0>, 0; mem:ST8[%1] FPR64_with_isub_hi_in_FPR32:%vreg42
	BNONE32 <BB#5>, %STATUS<imp-use>
    Successors according to CFG: BB#5(?%)

BB#4: derived from LLVM BB %for.cond64.preheader
    Predecessors according to CFG: BB#7
	BNONE32 <BB#8>, %STATUS<imp-use>
    Successors according to CFG: BB#8(?%)

BB#5: derived from LLVM BB %for.body9
    Predecessors according to CFG: BB#3 BB#7
	%vreg9<def> = PHI %vreg7, <BB#3>, %vreg20, <BB#7>; GPR32:%vreg9,%vreg7,%vreg20
	%vreg10<def> = PHI %vreg35, <BB#3>, %vreg19, <BB#7>; GPR32:%vreg10,%vreg35,%vreg19
	%vreg44<def> = LSL32ri %vreg10, 2, %STATUS<imp-def,dead>; GPR32:%vreg44,%vreg10
	%vreg45<def> = ADDrr_r32 %vreg5, %vreg44<kill>, %STATUS<imp-def,dead>; GPR32:%vreg45,%vreg5,%vreg44
	%vreg11<def> = COPY %vreg2; GPR32:%vreg11,%vreg2
	%vreg12<def> = LDRf32 %vreg45<kill>, 0; mem:Volatile LD4[%add.ptr10](tbaa=!2) FPR32:%vreg12 GPR32:%vreg45
    Successors according to CFG: BB#6(?%)

BB#6: derived from LLVM BB %for.body13
    Predecessors according to CFG: BB#5 BB#6
	%vreg13<def> = PHI %vreg11, <BB#5>, %vreg18, <BB#6>; GPR32:%vreg13,%vreg11,%vreg18
	%vreg14<def> = PHI %vreg9, <BB#5>, %vreg17, <BB#6>; GPR32:%vreg14,%vreg9,%vreg17
	%vreg15<def> = PHI %vreg35, <BB#5>, %vreg16, <BB#6>; GPR32:%vreg15,%vreg35,%vreg16
	%vreg46<def> = LDRf32 %vreg14, -8; mem:Volatile LD4[%scevgep8](tbaa=!2) FPR32:%vreg46 GPR32:%vreg14
	%vreg18<def> = ADDri_r32 %vreg13, 16, %STATUS<imp-def,dead>; GPR32:%vreg18,%vreg13
	%vreg17<def> = ADDri_r32 %vreg14, 16, %STATUS<imp-def,dead>; GPR32:%vreg17,%vreg14
	%vreg47<def> = LDRf32 %vreg14, -4; mem:Volatile LD4[%scevgep9](tbaa=!2) FPR32:%vreg47 GPR32:%vreg14
	%vreg16<def> = ADDri_r32 %vreg15, 4, %STATUS<imp-def,dead>; GPR32:%vreg16,%vreg15
	%vreg48<def> = LDRf32 %vreg14, 0; mem:Volatile LD4[%lsr.iv5](tbaa=!2) FPR32:%vreg48 GPR32:%vreg14
	%vreg49<def> = LDRf32 %vreg14, 4; mem:Volatile LD4[%scevgep7](tbaa=!2) FPR32:%vreg49 GPR32:%vreg14
	%vreg50<def> = LDRf32 %vreg13, -8; mem:LD4[%scevgep15](tbaa=!2) FPR32:%vreg50 GPR32:%vreg13
	%vreg75<def> = LDRi32_r32 <fi#2>, 0; mem:LD4[FixedStack2] GPR32:%vreg75
	GID %CONFIG<imp-def>
	%CONFIG<def> = MOVTS32_core %vreg75<kill>; GPR32:%vreg75
	GIE %CONFIG<imp-def>
	%vreg51<def,tied1> = FMADDrr_r32 %vreg50<tied0>, %vreg12, %vreg46<kill>, %STATUS<imp-def,dead>; FPR32:%vreg51,%vreg50,%vreg12,%vreg46
	STRf32 %vreg51<kill>, %vreg13, -8; mem:ST4[%scevgep15](tbaa=!2) FPR32:%vreg51 GPR32:%vreg13
	%vreg52<def> = LDRf32 %vreg13, -4; mem:LD4[%scevgep17](tbaa=!2) FPR32:%vreg52 GPR32:%vreg13
	%vreg53<def,tied1> = FMADDrr_r32 %vreg52<tied0>, %vreg12, %vreg47<kill>, %STATUS<imp-def,dead>; FPR32:%vreg53,%vreg52,%vreg12,%vreg47
	STRf32 %vreg53<kill>, %vreg13, -4; mem:ST4[%scevgep17](tbaa=!2) FPR32:%vreg53 GPR32:%vreg13
	%vreg54<def> = LDRf32 %vreg13, 0; mem:LD4[%lsr.iv1214](tbaa=!2) FPR32:%vreg54 GPR32:%vreg13
	%vreg55<def,tied1> = FMADDrr_r32 %vreg54<tied0>, %vreg12, %vreg48<kill>, %STATUS<imp-def,dead>; FPR32:%vreg55,%vreg54,%vreg12,%vreg48
	STRf32 %vreg55<kill>, %vreg13, 0; mem:ST4[%lsr.iv1214](tbaa=!2) FPR32:%vreg55 GPR32:%vreg13
	%vreg56<def> = LDRf32 %vreg13, 4; mem:LD4[%scevgep16](tbaa=!2) FPR32:%vreg56 GPR32:%vreg13
	%vreg57<def,tied1> = FMADDrr_r32 %vreg56<tied0>, %vreg12, %vreg49<kill>, %STATUS<imp-def,dead>; FPR32:%vreg57,%vreg56,%vreg12,%vreg49
	%vreg58<def> = CMPri_r32 %vreg16, 8, %STATUS<imp-def>; GPR32:%vreg58,%vreg16
	STRf32 %vreg57<kill>, %vreg13, 4; mem:ST4[%scevgep16](tbaa=!2) FPR32:%vreg57 GPR32:%vreg13
	BCC <BB#6>, 8, %STATUS<imp-use>
	BNONE32 <BB#7>, %STATUS<imp-use>
    Successors according to CFG: BB#6(0x7c000000 / 0x80000000 = 96.88%) BB#7(0x04000000 / 0x80000000 = 3.12%)

BB#7: derived from LLVM BB %for.end60
    Predecessors according to CFG: BB#6
	%vreg20<def> = ADDrr_r32 %vreg9, %vreg1, %STATUS<imp-def,dead>; GPR32:%vreg20,%vreg9,%vreg1
	%vreg19<def> = ADDri_r32 %vreg10, 1, %STATUS<imp-def,dead>; GPR32:%vreg19,%vreg10
	%vreg59<def> = CMPrr_r32 %vreg19, %vreg33, %STATUS<imp-def>; GPR32:%vreg59,%vreg19,%vreg33
	BCC <BB#4>, 0, %STATUS<imp-use>
	BNONE32 <BB#5>, %STATUS<imp-use>
    Successors according to CFG: BB#4(0x04000000 / 0x80000000 = 3.12%) BB#5(0x7c000000 / 0x80000000 = 96.88%)

BB#8: derived from LLVM BB %for.body66
    Predecessors according to CFG: BB#4 BB#8
	%vreg21<def> = PHI %vreg6, <BB#4>, %vreg24, <BB#8>; GPR32:%vreg21,%vreg6,%vreg24
	%vreg22<def> = PHI %vreg35, <BB#4>, %vreg23, <BB#8>; GPR32:%vreg22,%vreg35,%vreg23
	%vreg62<def> = ADDrr_r32 %vreg36, %vreg22, %STATUS<imp-def,dead>; GPR32:%vreg62,%vreg36,%vreg22
	%vreg63<def> = LDRf32 %vreg62<kill>, 0; mem:LD4[%sunkaddr30](tbaa=!2) FPR32:%vreg63 GPR32:%vreg62
	%vreg24<def> = ADDri_r32 %vreg21, 4, %STATUS<imp-def,dead>; GPR32:%vreg24,%vreg21
	%vreg23<def> = ADDri_r32 %vreg22, 4, %STATUS<imp-def,dead>; GPR32:%vreg23,%vreg22
	%vreg64<def> = LDRf32 %vreg21, 0; mem:Volatile LD4[%lsr.iv24](tbaa=!2) FPR32:%vreg64 GPR32:%vreg21
	%vreg76<def> = LDRi32_r32 <fi#2>, 0; mem:LD4[FixedStack2] GPR32:%vreg76
	GID %CONFIG<imp-def>
	%CONFIG<def> = MOVTS32_core %vreg76<kill>; GPR32:%vreg76
	GIE %CONFIG<imp-def>
	%vreg65<def> = FADDrr_r32 %vreg63<kill>, %vreg64<kill>, %STATUS<imp-def,dead>; FPR32:%vreg65,%vreg63,%vreg64
	%vreg66<def> = CMPri_r32 %vreg23, 32, %STATUS<imp-def>; GPR32:%vreg66,%vreg23
	STRf32 %vreg65<kill>, %vreg21, 0; mem:Volatile ST4[%lsr.iv24](tbaa=!2) FPR32:%vreg65 GPR32:%vreg21
	BCC <BB#8>, 1, %STATUS<imp-use>
	BNONE32 <BB#9>, %STATUS<imp-use>
    Successors according to CFG: BB#9(0x04000000 / 0x80000000 = 3.12%) BB#8(0x7c000000 / 0x80000000 = 96.88%)

BB#9: derived from LLVM BB %for.end75
    Predecessors according to CFG: BB#8
	%vreg27<def> = ADDri_r32 %vreg6, 32, %STATUS<imp-def,dead>; GPR32:%vreg27,%vreg6
	%vreg26<def> = ADDri_r32 %vreg7, 32, %STATUS<imp-def,dead>; GPR32:%vreg26,%vreg7
	%vreg25<def> = ADDri_r32 %vreg8, 8, %STATUS<imp-def,dead>; GPR32:%vreg25,%vreg8
	%vreg67<def> = CMPrr_r32 %vreg25, %vreg33, %STATUS<imp-def>; GPR32:%vreg67,%vreg25,%vreg33
	BCC <BB#3>, 8, %STATUS<imp-use>
	BNONE32 <BB#10>, %STATUS<imp-use>
    Successors according to CFG: BB#3(0x7c000000 / 0x80000000 = 96.88%) BB#10(0x04000000 / 0x80000000 = 3.12%)

BB#10: derived from LLVM BB %for.end78
    Predecessors according to CFG: BB#9
	%vreg29<def> = ADDrr_r32 %vreg3, %vreg1, %STATUS<imp-def,dead>; GPR32:%vreg29,%vreg3,%vreg1
	%vreg28<def> = ADDri_r32 %vreg4, 1, %STATUS<imp-def,dead>; GPR32:%vreg28,%vreg4
	%vreg68<def> = CMPrr_r32 %vreg28, %vreg33, %STATUS<imp-def>; GPR32:%vreg68,%vreg28,%vreg33
	BCC <BB#2>, 1, %STATUS<imp-use>
	BNONE32 <BB#11>, %STATUS<imp-use>
    Successors according to CFG: BB#11(0x04000000 / 0x80000000 = 3.12%) BB#2(0x7c000000 / 0x80000000 = 96.88%)

BB#11: derived from LLVM BB %for.end81
    Predecessors according to CFG: BB#0 BB#10
	%vreg77<def> = LDRi32_r32 <fi#1>, 0; mem:LD4[FixedStack1] GPR32:%vreg77
	GID
	%CONFIG<def> = MOVTS32_core %vreg77<kill>; GPR32:%vreg77
	GIE %CONFIG<imp-use,kill>
	RTS

# End machine code for function matmac.

# *** IR Dump Before Remove dead machine instructions ***:
# Machine code for function matmac: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=32, align=8, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=4, align=4, at location [SP]
Function Live Ins: %R0 in %vreg30, %R1 in %vreg31, %R2 in %vreg32, %R3 in %vreg33

BB#12: 
    Live Ins: %R0 %R1 %R2 %R3
	GID %CONFIG<imp-def>
	%vreg71<def> = MOVFS32_core %CONFIG<kill>; GPR32:%vreg71
	STRi32_r32 %vreg71, <fi#1>, 0; mem:ST4[FixedStack1] GPR32:%vreg71
	%vreg72<def> = MOVi32ri 65535; GPR32:%vreg72
	%vreg73<def,tied1> = MOVTi32ri %vreg72<tied0>, 65521; GPR32:%vreg73,%vreg72
	%vreg69<def> = ANDrr_r32 %vreg71<kill>, %vreg73<kill>, %STATUS<imp-def>; GPR32:%vreg69,%vreg71,%vreg73
	STRi32_r32 %vreg69, <fi#2>, 0; mem:ST4[FixedStack2] GPR32:%vreg69
	%vreg70<def,tied1> = MOVTi32ri %vreg71<kill,tied0>, 72; GPR32:%vreg70,%vreg71
	STRi32_r32 %vreg70, <fi#3>, 0; mem:ST4[FixedStack3] GPR32:%vreg70
	GIE %CONFIG<imp-use,kill>
    Successors according to CFG: BB#0(?%)

BB#0: derived from LLVM BB %entry
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#12
	%vreg33<def> = COPY %R3; GPR32:%vreg33
	%vreg32<def> = COPY %R2; GPR32:%vreg32
	%vreg31<def> = COPY %R1; GPR32:%vreg31
	%vreg30<def> = COPY %R0; GPR32:%vreg30
	%vreg34<def> = CMPri_r32 %vreg33, 1, %STATUS<imp-def>; GPR32:%vreg34,%vreg33
	BCC <BB#11>, 8, %STATUS<imp-use>
	BNONE32 <BB#1>, %STATUS<imp-use>
    Successors according to CFG: BB#1(0x50000000 / 0x80000000 = 62.50%) BB#11(0x30000000 / 0x80000000 = 37.50%)

BB#1: derived from LLVM BB %for.body3.lr.ph.preheader
    Predecessors according to CFG: BB#0
	%vreg1<def> = LSL32ri %vreg33, 2, %STATUS<imp-def,dead>; GPR32:%vreg1,%vreg33
	%vreg0<def> = ADDri_r32 %vreg31, 8, %STATUS<imp-def,dead>; GPR32:%vreg0,%vreg31
	%vreg36<def> = MOViPTR <fi#0>, 0; GPR32:%vreg36
	%vreg2<def> = ADDri_r32 %vreg36, 8, %STATUS<imp-def,dead>; GPR32:%vreg2,%vreg36
	%vreg35<def> = MOVi32ri 0; GPR32:%vreg35
    Successors according to CFG: BB#2(?%)

BB#2: derived from LLVM BB %for.body3.lr.ph
    Predecessors according to CFG: BB#1 BB#10
	%vreg3<def> = PHI %vreg32, <BB#1>, %vreg29, <BB#10>; GPR32:%vreg3,%vreg32,%vreg29
	%vreg4<def> = PHI %vreg35, <BB#1>, %vreg28, <BB#10>; GPR32:%vreg4,%vreg35,%vreg28
	%vreg74<def> = LDRi32_r32 <fi#3>, 0; mem:LD4[FixedStack3] GPR32:%vreg74
	GID %CONFIG<imp-def>
	%CONFIG<def> = MOVTS32_core %vreg74<kill>; GPR32:%vreg74
	GIE %CONFIG<imp-def>
	%vreg38<def> = IMULrr_r32 %vreg4, %vreg33, %STATUS<imp-def,dead>; GPR32:%vreg38,%vreg4,%vreg33
	%vreg39<def> = LSL32ri %vreg38<kill>, 2, %STATUS<imp-def,dead>; GPR32:%vreg39,%vreg38
	%vreg5<def> = ADDrr_r32 %vreg30, %vreg39<kill>, %STATUS<imp-def,dead>; GPR32:%vreg5,%vreg30,%vreg39
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %for.body9.preheader
    Predecessors according to CFG: BB#2 BB#9
	%vreg6<def> = PHI %vreg3, <BB#2>, %vreg27, <BB#9>; GPR32:%vreg6,%vreg3,%vreg27
	%vreg7<def> = PHI %vreg0, <BB#2>, %vreg26, <BB#9>; GPR32:%vreg7,%vreg0,%vreg26
	%vreg8<def> = PHI %vreg35, <BB#2>, %vreg25, <BB#9>; GPR32:%vreg8,%vreg35,%vreg25
	%vreg42<def> = REG_SEQUENCE %vreg35, isub_hi, %vreg35, isub_lo; FPR64_with_isub_hi_in_FPR32:%vreg42 GPR32:%vreg35
	STRi64 %vreg42, <fi#0>, 24; mem:ST8[%1+24] FPR64_with_isub_hi_in_FPR32:%vreg42
	STRi64 %vreg42, <fi#0>, 16; mem:ST8[%1+16] FPR64_with_isub_hi_in_FPR32:%vreg42
	STRi64 %vreg42, <fi#0>, 8; mem:ST8[%1+8] FPR64_with_isub_hi_in_FPR32:%vreg42
	STRi64 %vreg42, <fi#0>, 0; mem:ST8[%1] FPR64_with_isub_hi_in_FPR32:%vreg42
	BNONE32 <BB#5>, %STATUS<imp-use>
    Successors according to CFG: BB#5(?%)

BB#4: derived from LLVM BB %for.cond64.preheader
    Predecessors according to CFG: BB#7
	BNONE32 <BB#8>, %STATUS<imp-use>
    Successors according to CFG: BB#8(?%)

BB#5: derived from LLVM BB %for.body9
    Predecessors according to CFG: BB#3 BB#7
	%vreg9<def> = PHI %vreg7, <BB#3>, %vreg20, <BB#7>; GPR32:%vreg9,%vreg7,%vreg20
	%vreg10<def> = PHI %vreg35, <BB#3>, %vreg19, <BB#7>; GPR32:%vreg10,%vreg35,%vreg19
	%vreg44<def> = LSL32ri %vreg10, 2, %STATUS<imp-def,dead>; GPR32:%vreg44,%vreg10
	%vreg45<def> = ADDrr_r32 %vreg5, %vreg44<kill>, %STATUS<imp-def,dead>; GPR32:%vreg45,%vreg5,%vreg44
	%vreg11<def> = COPY %vreg2; GPR32:%vreg11,%vreg2
	%vreg12<def> = LDRf32 %vreg45<kill>, 0; mem:Volatile LD4[%add.ptr10](tbaa=!2) FPR32:%vreg12 GPR32:%vreg45
    Successors according to CFG: BB#6(?%)

BB#6: derived from LLVM BB %for.body13
    Predecessors according to CFG: BB#5 BB#6
	%vreg13<def> = PHI %vreg11, <BB#5>, %vreg18, <BB#6>; GPR32:%vreg13,%vreg11,%vreg18
	%vreg14<def> = PHI %vreg9, <BB#5>, %vreg17, <BB#6>; GPR32:%vreg14,%vreg9,%vreg17
	%vreg15<def> = PHI %vreg35, <BB#5>, %vreg16, <BB#6>; GPR32:%vreg15,%vreg35,%vreg16
	%vreg46<def> = LDRf32 %vreg14, -8; mem:Volatile LD4[%scevgep8](tbaa=!2) FPR32:%vreg46 GPR32:%vreg14
	%vreg18<def> = ADDri_r32 %vreg13, 16, %STATUS<imp-def,dead>; GPR32:%vreg18,%vreg13
	%vreg17<def> = ADDri_r32 %vreg14, 16, %STATUS<imp-def,dead>; GPR32:%vreg17,%vreg14
	%vreg47<def> = LDRf32 %vreg14, -4; mem:Volatile LD4[%scevgep9](tbaa=!2) FPR32:%vreg47 GPR32:%vreg14
	%vreg16<def> = ADDri_r32 %vreg15, 4, %STATUS<imp-def,dead>; GPR32:%vreg16,%vreg15
	%vreg48<def> = LDRf32 %vreg14, 0; mem:Volatile LD4[%lsr.iv5](tbaa=!2) FPR32:%vreg48 GPR32:%vreg14
	%vreg49<def> = LDRf32 %vreg14, 4; mem:Volatile LD4[%scevgep7](tbaa=!2) FPR32:%vreg49 GPR32:%vreg14
	%vreg50<def> = LDRf32 %vreg13, -8; mem:LD4[%scevgep15](tbaa=!2) FPR32:%vreg50 GPR32:%vreg13
	%vreg75<def> = LDRi32_r32 <fi#2>, 0; mem:LD4[FixedStack2] GPR32:%vreg75
	GID %CONFIG<imp-def>
	%CONFIG<def> = MOVTS32_core %vreg75<kill>; GPR32:%vreg75
	GIE %CONFIG<imp-def>
	%vreg51<def,tied1> = FMADDrr_r32 %vreg50<tied0>, %vreg12, %vreg46<kill>, %STATUS<imp-def,dead>; FPR32:%vreg51,%vreg50,%vreg12,%vreg46
	STRf32 %vreg51<kill>, %vreg13, -8; mem:ST4[%scevgep15](tbaa=!2) FPR32:%vreg51 GPR32:%vreg13
	%vreg52<def> = LDRf32 %vreg13, -4; mem:LD4[%scevgep17](tbaa=!2) FPR32:%vreg52 GPR32:%vreg13
	%vreg53<def,tied1> = FMADDrr_r32 %vreg52<tied0>, %vreg12, %vreg47<kill>, %STATUS<imp-def,dead>; FPR32:%vreg53,%vreg52,%vreg12,%vreg47
	STRf32 %vreg53<kill>, %vreg13, -4; mem:ST4[%scevgep17](tbaa=!2) FPR32:%vreg53 GPR32:%vreg13
	%vreg54<def> = LDRf32 %vreg13, 0; mem:LD4[%lsr.iv1214](tbaa=!2) FPR32:%vreg54 GPR32:%vreg13
	%vreg55<def,tied1> = FMADDrr_r32 %vreg54<tied0>, %vreg12, %vreg48<kill>, %STATUS<imp-def,dead>; FPR32:%vreg55,%vreg54,%vreg12,%vreg48
	STRf32 %vreg55<kill>, %vreg13, 0; mem:ST4[%lsr.iv1214](tbaa=!2) FPR32:%vreg55 GPR32:%vreg13
	%vreg56<def> = LDRf32 %vreg13, 4; mem:LD4[%scevgep16](tbaa=!2) FPR32:%vreg56 GPR32:%vreg13
	%vreg57<def,tied1> = FMADDrr_r32 %vreg56<tied0>, %vreg12, %vreg49<kill>, %STATUS<imp-def,dead>; FPR32:%vreg57,%vreg56,%vreg12,%vreg49
	%vreg58<def> = CMPri_r32 %vreg16, 8, %STATUS<imp-def>; GPR32:%vreg58,%vreg16
	STRf32 %vreg57<kill>, %vreg13, 4; mem:ST4[%scevgep16](tbaa=!2) FPR32:%vreg57 GPR32:%vreg13
	BCC <BB#6>, 8, %STATUS<imp-use>
	BNONE32 <BB#7>, %STATUS<imp-use>
    Successors according to CFG: BB#6(0x7c000000 / 0x80000000 = 96.88%) BB#7(0x04000000 / 0x80000000 = 3.12%)

BB#7: derived from LLVM BB %for.end60
    Predecessors according to CFG: BB#6
	%vreg20<def> = ADDrr_r32 %vreg9, %vreg1, %STATUS<imp-def,dead>; GPR32:%vreg20,%vreg9,%vreg1
	%vreg19<def> = ADDri_r32 %vreg10, 1, %STATUS<imp-def,dead>; GPR32:%vreg19,%vreg10
	%vreg59<def> = CMPrr_r32 %vreg19, %vreg33, %STATUS<imp-def>; GPR32:%vreg59,%vreg19,%vreg33
	BCC <BB#4>, 0, %STATUS<imp-use>
	BNONE32 <BB#5>, %STATUS<imp-use>
    Successors according to CFG: BB#4(0x04000000 / 0x80000000 = 3.12%) BB#5(0x7c000000 / 0x80000000 = 96.88%)

BB#8: derived from LLVM BB %for.body66
    Predecessors according to CFG: BB#4 BB#8
	%vreg21<def> = PHI %vreg6, <BB#4>, %vreg24, <BB#8>; GPR32:%vreg21,%vreg6,%vreg24
	%vreg22<def> = PHI %vreg35, <BB#4>, %vreg23, <BB#8>; GPR32:%vreg22,%vreg35,%vreg23
	%vreg62<def> = ADDrr_r32 %vreg36, %vreg22, %STATUS<imp-def,dead>; GPR32:%vreg62,%vreg36,%vreg22
	%vreg63<def> = LDRf32 %vreg62<kill>, 0; mem:LD4[%sunkaddr30](tbaa=!2) FPR32:%vreg63 GPR32:%vreg62
	%vreg24<def> = ADDri_r32 %vreg21, 4, %STATUS<imp-def,dead>; GPR32:%vreg24,%vreg21
	%vreg23<def> = ADDri_r32 %vreg22, 4, %STATUS<imp-def,dead>; GPR32:%vreg23,%vreg22
	%vreg64<def> = LDRf32 %vreg21, 0; mem:Volatile LD4[%lsr.iv24](tbaa=!2) FPR32:%vreg64 GPR32:%vreg21
	%vreg76<def> = LDRi32_r32 <fi#2>, 0; mem:LD4[FixedStack2] GPR32:%vreg76
	GID %CONFIG<imp-def>
	%CONFIG<def> = MOVTS32_core %vreg76<kill>; GPR32:%vreg76
	GIE %CONFIG<imp-def>
	%vreg65<def> = FADDrr_r32 %vreg63<kill>, %vreg64<kill>, %STATUS<imp-def,dead>; FPR32:%vreg65,%vreg63,%vreg64
	%vreg66<def> = CMPri_r32 %vreg23, 32, %STATUS<imp-def>; GPR32:%vreg66,%vreg23
	STRf32 %vreg65<kill>, %vreg21, 0; mem:Volatile ST4[%lsr.iv24](tbaa=!2) FPR32:%vreg65 GPR32:%vreg21
	BCC <BB#8>, 1, %STATUS<imp-use>
	BNONE32 <BB#9>, %STATUS<imp-use>
    Successors according to CFG: BB#9(0x04000000 / 0x80000000 = 3.12%) BB#8(0x7c000000 / 0x80000000 = 96.88%)

BB#9: derived from LLVM BB %for.end75
    Predecessors according to CFG: BB#8
	%vreg27<def> = ADDri_r32 %vreg6, 32, %STATUS<imp-def,dead>; GPR32:%vreg27,%vreg6
	%vreg26<def> = ADDri_r32 %vreg7, 32, %STATUS<imp-def,dead>; GPR32:%vreg26,%vreg7
	%vreg25<def> = ADDri_r32 %vreg8, 8, %STATUS<imp-def,dead>; GPR32:%vreg25,%vreg8
	%vreg67<def> = CMPrr_r32 %vreg25, %vreg33, %STATUS<imp-def>; GPR32:%vreg67,%vreg25,%vreg33
	BCC <BB#3>, 8, %STATUS<imp-use>
	BNONE32 <BB#10>, %STATUS<imp-use>
    Successors according to CFG: BB#3(0x7c000000 / 0x80000000 = 96.88%) BB#10(0x04000000 / 0x80000000 = 3.12%)

BB#10: derived from LLVM BB %for.end78
    Predecessors according to CFG: BB#9
	%vreg29<def> = ADDrr_r32 %vreg3, %vreg1, %STATUS<imp-def,dead>; GPR32:%vreg29,%vreg3,%vreg1
	%vreg28<def> = ADDri_r32 %vreg4, 1, %STATUS<imp-def,dead>; GPR32:%vreg28,%vreg4
	%vreg68<def> = CMPrr_r32 %vreg28, %vreg33, %STATUS<imp-def>; GPR32:%vreg68,%vreg28,%vreg33
	BCC <BB#2>, 1, %STATUS<imp-use>
	BNONE32 <BB#11>, %STATUS<imp-use>
    Successors according to CFG: BB#11(0x04000000 / 0x80000000 = 3.12%) BB#2(0x7c000000 / 0x80000000 = 96.88%)

BB#11: derived from LLVM BB %for.end81
    Predecessors according to CFG: BB#0 BB#10
	%vreg77<def> = LDRi32_r32 <fi#1>, 0; mem:LD4[FixedStack1] GPR32:%vreg77
	GID
	%CONFIG<def> = MOVTS32_core %vreg77<kill>; GPR32:%vreg77
	GIE %CONFIG<imp-use,kill>
	RTS

# End machine code for function matmac.

# *** IR Dump After Remove dead machine instructions ***:
# Machine code for function matmac: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=32, align=8, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=4, align=4, at location [SP]
Function Live Ins: %R0 in %vreg30, %R1 in %vreg31, %R2 in %vreg32, %R3 in %vreg33

BB#12: 
    Live Ins: %R0 %R1 %R2 %R3
	GID %CONFIG<imp-def>
	%vreg71<def> = MOVFS32_core %CONFIG<kill>; GPR32:%vreg71
	STRi32_r32 %vreg71, <fi#1>, 0; mem:ST4[FixedStack1] GPR32:%vreg71
	%vreg72<def> = MOVi32ri 65535; GPR32:%vreg72
	%vreg73<def,tied1> = MOVTi32ri %vreg72<tied0>, 65521; GPR32:%vreg73,%vreg72
	%vreg69<def> = ANDrr_r32 %vreg71<kill>, %vreg73<kill>, %STATUS<imp-def>; GPR32:%vreg69,%vreg71,%vreg73
	STRi32_r32 %vreg69, <fi#2>, 0; mem:ST4[FixedStack2] GPR32:%vreg69
	%vreg70<def,tied1> = MOVTi32ri %vreg71<kill,tied0>, 72; GPR32:%vreg70,%vreg71
	STRi32_r32 %vreg70, <fi#3>, 0; mem:ST4[FixedStack3] GPR32:%vreg70
	GIE %CONFIG<imp-use,kill>
    Successors according to CFG: BB#0(?%)

BB#0: derived from LLVM BB %entry
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#12
	%vreg33<def> = COPY %R3; GPR32:%vreg33
	%vreg32<def> = COPY %R2; GPR32:%vreg32
	%vreg31<def> = COPY %R1; GPR32:%vreg31
	%vreg30<def> = COPY %R0; GPR32:%vreg30
	%vreg34<def> = CMPri_r32 %vreg33, 1, %STATUS<imp-def>; GPR32:%vreg34,%vreg33
	BCC <BB#11>, 8, %STATUS<imp-use>
	BNONE32 <BB#1>, %STATUS<imp-use>
    Successors according to CFG: BB#1(0x50000000 / 0x80000000 = 62.50%) BB#11(0x30000000 / 0x80000000 = 37.50%)

BB#1: derived from LLVM BB %for.body3.lr.ph.preheader
    Predecessors according to CFG: BB#0
	%vreg1<def> = LSL32ri %vreg33, 2, %STATUS<imp-def,dead>; GPR32:%vreg1,%vreg33
	%vreg0<def> = ADDri_r32 %vreg31, 8, %STATUS<imp-def,dead>; GPR32:%vreg0,%vreg31
	%vreg36<def> = MOViPTR <fi#0>, 0; GPR32:%vreg36
	%vreg2<def> = ADDri_r32 %vreg36, 8, %STATUS<imp-def,dead>; GPR32:%vreg2,%vreg36
	%vreg35<def> = MOVi32ri 0; GPR32:%vreg35
    Successors according to CFG: BB#2(?%)

BB#2: derived from LLVM BB %for.body3.lr.ph
    Predecessors according to CFG: BB#1 BB#10
	%vreg3<def> = PHI %vreg32, <BB#1>, %vreg29, <BB#10>; GPR32:%vreg3,%vreg32,%vreg29
	%vreg4<def> = PHI %vreg35, <BB#1>, %vreg28, <BB#10>; GPR32:%vreg4,%vreg35,%vreg28
	%vreg74<def> = LDRi32_r32 <fi#3>, 0; mem:LD4[FixedStack3] GPR32:%vreg74
	GID %CONFIG<imp-def>
	%CONFIG<def> = MOVTS32_core %vreg74<kill>; GPR32:%vreg74
	GIE %CONFIG<imp-def>
	%vreg38<def> = IMULrr_r32 %vreg4, %vreg33, %STATUS<imp-def,dead>; GPR32:%vreg38,%vreg4,%vreg33
	%vreg39<def> = LSL32ri %vreg38<kill>, 2, %STATUS<imp-def,dead>; GPR32:%vreg39,%vreg38
	%vreg5<def> = ADDrr_r32 %vreg30, %vreg39<kill>, %STATUS<imp-def,dead>; GPR32:%vreg5,%vreg30,%vreg39
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %for.body9.preheader
    Predecessors according to CFG: BB#2 BB#9
	%vreg6<def> = PHI %vreg3, <BB#2>, %vreg27, <BB#9>; GPR32:%vreg6,%vreg3,%vreg27
	%vreg7<def> = PHI %vreg0, <BB#2>, %vreg26, <BB#9>; GPR32:%vreg7,%vreg0,%vreg26
	%vreg8<def> = PHI %vreg35, <BB#2>, %vreg25, <BB#9>; GPR32:%vreg8,%vreg35,%vreg25
	%vreg42<def> = REG_SEQUENCE %vreg35, isub_hi, %vreg35, isub_lo; FPR64_with_isub_hi_in_FPR32:%vreg42 GPR32:%vreg35
	STRi64 %vreg42, <fi#0>, 24; mem:ST8[%1+24] FPR64_with_isub_hi_in_FPR32:%vreg42
	STRi64 %vreg42, <fi#0>, 16; mem:ST8[%1+16] FPR64_with_isub_hi_in_FPR32:%vreg42
	STRi64 %vreg42, <fi#0>, 8; mem:ST8[%1+8] FPR64_with_isub_hi_in_FPR32:%vreg42
	STRi64 %vreg42, <fi#0>, 0; mem:ST8[%1] FPR64_with_isub_hi_in_FPR32:%vreg42
	BNONE32 <BB#5>, %STATUS<imp-use>
    Successors according to CFG: BB#5(?%)

BB#4: derived from LLVM BB %for.cond64.preheader
    Predecessors according to CFG: BB#7
	BNONE32 <BB#8>, %STATUS<imp-use>
    Successors according to CFG: BB#8(?%)

BB#5: derived from LLVM BB %for.body9
    Predecessors according to CFG: BB#3 BB#7
	%vreg9<def> = PHI %vreg7, <BB#3>, %vreg20, <BB#7>; GPR32:%vreg9,%vreg7,%vreg20
	%vreg10<def> = PHI %vreg35, <BB#3>, %vreg19, <BB#7>; GPR32:%vreg10,%vreg35,%vreg19
	%vreg44<def> = LSL32ri %vreg10, 2, %STATUS<imp-def,dead>; GPR32:%vreg44,%vreg10
	%vreg45<def> = ADDrr_r32 %vreg5, %vreg44<kill>, %STATUS<imp-def,dead>; GPR32:%vreg45,%vreg5,%vreg44
	%vreg11<def> = COPY %vreg2; GPR32:%vreg11,%vreg2
	%vreg12<def> = LDRf32 %vreg45<kill>, 0; mem:Volatile LD4[%add.ptr10](tbaa=!2) FPR32:%vreg12 GPR32:%vreg45
    Successors according to CFG: BB#6(?%)

BB#6: derived from LLVM BB %for.body13
    Predecessors according to CFG: BB#5 BB#6
	%vreg13<def> = PHI %vreg11, <BB#5>, %vreg18, <BB#6>; GPR32:%vreg13,%vreg11,%vreg18
	%vreg14<def> = PHI %vreg9, <BB#5>, %vreg17, <BB#6>; GPR32:%vreg14,%vreg9,%vreg17
	%vreg15<def> = PHI %vreg35, <BB#5>, %vreg16, <BB#6>; GPR32:%vreg15,%vreg35,%vreg16
	%vreg46<def> = LDRf32 %vreg14, -8; mem:Volatile LD4[%scevgep8](tbaa=!2) FPR32:%vreg46 GPR32:%vreg14
	%vreg18<def> = ADDri_r32 %vreg13, 16, %STATUS<imp-def,dead>; GPR32:%vreg18,%vreg13
	%vreg17<def> = ADDri_r32 %vreg14, 16, %STATUS<imp-def,dead>; GPR32:%vreg17,%vreg14
	%vreg47<def> = LDRf32 %vreg14, -4; mem:Volatile LD4[%scevgep9](tbaa=!2) FPR32:%vreg47 GPR32:%vreg14
	%vreg16<def> = ADDri_r32 %vreg15, 4, %STATUS<imp-def,dead>; GPR32:%vreg16,%vreg15
	%vreg48<def> = LDRf32 %vreg14, 0; mem:Volatile LD4[%lsr.iv5](tbaa=!2) FPR32:%vreg48 GPR32:%vreg14
	%vreg49<def> = LDRf32 %vreg14, 4; mem:Volatile LD4[%scevgep7](tbaa=!2) FPR32:%vreg49 GPR32:%vreg14
	%vreg50<def> = LDRf32 %vreg13, -8; mem:LD4[%scevgep15](tbaa=!2) FPR32:%vreg50 GPR32:%vreg13
	%vreg75<def> = LDRi32_r32 <fi#2>, 0; mem:LD4[FixedStack2] GPR32:%vreg75
	GID %CONFIG<imp-def>
	%CONFIG<def> = MOVTS32_core %vreg75<kill>; GPR32:%vreg75
	GIE %CONFIG<imp-def>
	%vreg51<def,tied1> = FMADDrr_r32 %vreg50<tied0>, %vreg12, %vreg46<kill>, %STATUS<imp-def,dead>; FPR32:%vreg51,%vreg50,%vreg12,%vreg46
	STRf32 %vreg51<kill>, %vreg13, -8; mem:ST4[%scevgep15](tbaa=!2) FPR32:%vreg51 GPR32:%vreg13
	%vreg52<def> = LDRf32 %vreg13, -4; mem:LD4[%scevgep17](tbaa=!2) FPR32:%vreg52 GPR32:%vreg13
	%vreg53<def,tied1> = FMADDrr_r32 %vreg52<tied0>, %vreg12, %vreg47<kill>, %STATUS<imp-def,dead>; FPR32:%vreg53,%vreg52,%vreg12,%vreg47
	STRf32 %vreg53<kill>, %vreg13, -4; mem:ST4[%scevgep17](tbaa=!2) FPR32:%vreg53 GPR32:%vreg13
	%vreg54<def> = LDRf32 %vreg13, 0; mem:LD4[%lsr.iv1214](tbaa=!2) FPR32:%vreg54 GPR32:%vreg13
	%vreg55<def,tied1> = FMADDrr_r32 %vreg54<tied0>, %vreg12, %vreg48<kill>, %STATUS<imp-def,dead>; FPR32:%vreg55,%vreg54,%vreg12,%vreg48
	STRf32 %vreg55<kill>, %vreg13, 0; mem:ST4[%lsr.iv1214](tbaa=!2) FPR32:%vreg55 GPR32:%vreg13
	%vreg56<def> = LDRf32 %vreg13, 4; mem:LD4[%scevgep16](tbaa=!2) FPR32:%vreg56 GPR32:%vreg13
	%vreg57<def,tied1> = FMADDrr_r32 %vreg56<tied0>, %vreg12, %vreg49<kill>, %STATUS<imp-def,dead>; FPR32:%vreg57,%vreg56,%vreg12,%vreg49
	%vreg58<def> = CMPri_r32 %vreg16, 8, %STATUS<imp-def>; GPR32:%vreg58,%vreg16
	STRf32 %vreg57<kill>, %vreg13, 4; mem:ST4[%scevgep16](tbaa=!2) FPR32:%vreg57 GPR32:%vreg13
	BCC <BB#6>, 8, %STATUS<imp-use>
	BNONE32 <BB#7>, %STATUS<imp-use>
    Successors according to CFG: BB#6(0x7c000000 / 0x80000000 = 96.88%) BB#7(0x04000000 / 0x80000000 = 3.12%)

BB#7: derived from LLVM BB %for.end60
    Predecessors according to CFG: BB#6
	%vreg20<def> = ADDrr_r32 %vreg9, %vreg1, %STATUS<imp-def,dead>; GPR32:%vreg20,%vreg9,%vreg1
	%vreg19<def> = ADDri_r32 %vreg10, 1, %STATUS<imp-def,dead>; GPR32:%vreg19,%vreg10
	%vreg59<def> = CMPrr_r32 %vreg19, %vreg33, %STATUS<imp-def>; GPR32:%vreg59,%vreg19,%vreg33
	BCC <BB#4>, 0, %STATUS<imp-use>
	BNONE32 <BB#5>, %STATUS<imp-use>
    Successors according to CFG: BB#4(0x04000000 / 0x80000000 = 3.12%) BB#5(0x7c000000 / 0x80000000 = 96.88%)

BB#8: derived from LLVM BB %for.body66
    Predecessors according to CFG: BB#4 BB#8
	%vreg21<def> = PHI %vreg6, <BB#4>, %vreg24, <BB#8>; GPR32:%vreg21,%vreg6,%vreg24
	%vreg22<def> = PHI %vreg35, <BB#4>, %vreg23, <BB#8>; GPR32:%vreg22,%vreg35,%vreg23
	%vreg62<def> = ADDrr_r32 %vreg36, %vreg22, %STATUS<imp-def,dead>; GPR32:%vreg62,%vreg36,%vreg22
	%vreg63<def> = LDRf32 %vreg62<kill>, 0; mem:LD4[%sunkaddr30](tbaa=!2) FPR32:%vreg63 GPR32:%vreg62
	%vreg24<def> = ADDri_r32 %vreg21, 4, %STATUS<imp-def,dead>; GPR32:%vreg24,%vreg21
	%vreg23<def> = ADDri_r32 %vreg22, 4, %STATUS<imp-def,dead>; GPR32:%vreg23,%vreg22
	%vreg64<def> = LDRf32 %vreg21, 0; mem:Volatile LD4[%lsr.iv24](tbaa=!2) FPR32:%vreg64 GPR32:%vreg21
	%vreg76<def> = LDRi32_r32 <fi#2>, 0; mem:LD4[FixedStack2] GPR32:%vreg76
	GID %CONFIG<imp-def>
	%CONFIG<def> = MOVTS32_core %vreg76<kill>; GPR32:%vreg76
	GIE %CONFIG<imp-def>
	%vreg65<def> = FADDrr_r32 %vreg63<kill>, %vreg64<kill>, %STATUS<imp-def,dead>; FPR32:%vreg65,%vreg63,%vreg64
	%vreg66<def> = CMPri_r32 %vreg23, 32, %STATUS<imp-def>; GPR32:%vreg66,%vreg23
	STRf32 %vreg65<kill>, %vreg21, 0; mem:Volatile ST4[%lsr.iv24](tbaa=!2) FPR32:%vreg65 GPR32:%vreg21
	BCC <BB#8>, 1, %STATUS<imp-use>
	BNONE32 <BB#9>, %STATUS<imp-use>
    Successors according to CFG: BB#9(0x04000000 / 0x80000000 = 3.12%) BB#8(0x7c000000 / 0x80000000 = 96.88%)

BB#9: derived from LLVM BB %for.end75
    Predecessors according to CFG: BB#8
	%vreg27<def> = ADDri_r32 %vreg6, 32, %STATUS<imp-def,dead>; GPR32:%vreg27,%vreg6
	%vreg26<def> = ADDri_r32 %vreg7, 32, %STATUS<imp-def,dead>; GPR32:%vreg26,%vreg7
	%vreg25<def> = ADDri_r32 %vreg8, 8, %STATUS<imp-def,dead>; GPR32:%vreg25,%vreg8
	%vreg67<def> = CMPrr_r32 %vreg25, %vreg33, %STATUS<imp-def>; GPR32:%vreg67,%vreg25,%vreg33
	BCC <BB#3>, 8, %STATUS<imp-use>
	BNONE32 <BB#10>, %STATUS<imp-use>
    Successors according to CFG: BB#3(0x7c000000 / 0x80000000 = 96.88%) BB#10(0x04000000 / 0x80000000 = 3.12%)

BB#10: derived from LLVM BB %for.end78
    Predecessors according to CFG: BB#9
	%vreg29<def> = ADDrr_r32 %vreg3, %vreg1, %STATUS<imp-def,dead>; GPR32:%vreg29,%vreg3,%vreg1
	%vreg28<def> = ADDri_r32 %vreg4, 1, %STATUS<imp-def,dead>; GPR32:%vreg28,%vreg4
	%vreg68<def> = CMPrr_r32 %vreg28, %vreg33, %STATUS<imp-def>; GPR32:%vreg68,%vreg28,%vreg33
	BCC <BB#2>, 1, %STATUS<imp-use>
	BNONE32 <BB#11>, %STATUS<imp-use>
    Successors according to CFG: BB#11(0x04000000 / 0x80000000 = 3.12%) BB#2(0x7c000000 / 0x80000000 = 96.88%)

BB#11: derived from LLVM BB %for.end81
    Predecessors according to CFG: BB#0 BB#10
	%vreg77<def> = LDRi32_r32 <fi#1>, 0; mem:LD4[FixedStack1] GPR32:%vreg77
	GID
	%CONFIG<def> = MOVTS32_core %vreg77<kill>; GPR32:%vreg77
	GIE %CONFIG<imp-use,kill>
	RTS

# End machine code for function matmac.

# *** IR Dump Before Remove unreachable machine basic blocks ***:
# Machine code for function matmac: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=32, align=8, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=4, align=4, at location [SP]
Function Live Ins: %R0 in %vreg30, %R1 in %vreg31, %R2 in %vreg32, %R3 in %vreg33

BB#12: 
    Live Ins: %R0 %R1 %R2 %R3
	GID %CONFIG<imp-def>
	%vreg71<def> = MOVFS32_core %CONFIG<kill>; GPR32:%vreg71
	STRi32_r32 %vreg71, <fi#1>, 0; mem:ST4[FixedStack1] GPR32:%vreg71
	%vreg72<def> = MOVi32ri 65535; GPR32:%vreg72
	%vreg73<def,tied1> = MOVTi32ri %vreg72<tied0>, 65521; GPR32:%vreg73,%vreg72
	%vreg69<def> = ANDrr_r32 %vreg71<kill>, %vreg73<kill>, %STATUS<imp-def>; GPR32:%vreg69,%vreg71,%vreg73
	STRi32_r32 %vreg69, <fi#2>, 0; mem:ST4[FixedStack2] GPR32:%vreg69
	%vreg70<def,tied1> = MOVTi32ri %vreg71<kill,tied0>, 72; GPR32:%vreg70,%vreg71
	STRi32_r32 %vreg70, <fi#3>, 0; mem:ST4[FixedStack3] GPR32:%vreg70
	GIE %CONFIG<imp-use,kill>
    Successors according to CFG: BB#0(?%)

BB#0: derived from LLVM BB %entry
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#12
	%vreg33<def> = COPY %R3; GPR32:%vreg33
	%vreg32<def> = COPY %R2; GPR32:%vreg32
	%vreg31<def> = COPY %R1; GPR32:%vreg31
	%vreg30<def> = COPY %R0; GPR32:%vreg30
	%vreg34<def> = CMPri_r32 %vreg33, 1, %STATUS<imp-def>; GPR32:%vreg34,%vreg33
	BCC <BB#11>, 8, %STATUS<imp-use>
	BNONE32 <BB#1>, %STATUS<imp-use>
    Successors according to CFG: BB#1(0x50000000 / 0x80000000 = 62.50%) BB#11(0x30000000 / 0x80000000 = 37.50%)

BB#1: derived from LLVM BB %for.body3.lr.ph.preheader
    Predecessors according to CFG: BB#0
	%vreg1<def> = LSL32ri %vreg33, 2, %STATUS<imp-def,dead>; GPR32:%vreg1,%vreg33
	%vreg0<def> = ADDri_r32 %vreg31, 8, %STATUS<imp-def,dead>; GPR32:%vreg0,%vreg31
	%vreg36<def> = MOViPTR <fi#0>, 0; GPR32:%vreg36
	%vreg2<def> = ADDri_r32 %vreg36, 8, %STATUS<imp-def,dead>; GPR32:%vreg2,%vreg36
	%vreg35<def> = MOVi32ri 0; GPR32:%vreg35
    Successors according to CFG: BB#2(?%)

BB#2: derived from LLVM BB %for.body3.lr.ph
    Predecessors according to CFG: BB#1 BB#10
	%vreg3<def> = PHI %vreg32, <BB#1>, %vreg29, <BB#10>; GPR32:%vreg3,%vreg32,%vreg29
	%vreg4<def> = PHI %vreg35, <BB#1>, %vreg28, <BB#10>; GPR32:%vreg4,%vreg35,%vreg28
	%vreg74<def> = LDRi32_r32 <fi#3>, 0; mem:LD4[FixedStack3] GPR32:%vreg74
	GID %CONFIG<imp-def>
	%CONFIG<def> = MOVTS32_core %vreg74<kill>; GPR32:%vreg74
	GIE %CONFIG<imp-def>
	%vreg38<def> = IMULrr_r32 %vreg4, %vreg33, %STATUS<imp-def,dead>; GPR32:%vreg38,%vreg4,%vreg33
	%vreg39<def> = LSL32ri %vreg38<kill>, 2, %STATUS<imp-def,dead>; GPR32:%vreg39,%vreg38
	%vreg5<def> = ADDrr_r32 %vreg30, %vreg39<kill>, %STATUS<imp-def,dead>; GPR32:%vreg5,%vreg30,%vreg39
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %for.body9.preheader
    Predecessors according to CFG: BB#2 BB#9
	%vreg6<def> = PHI %vreg3, <BB#2>, %vreg27, <BB#9>; GPR32:%vreg6,%vreg3,%vreg27
	%vreg7<def> = PHI %vreg0, <BB#2>, %vreg26, <BB#9>; GPR32:%vreg7,%vreg0,%vreg26
	%vreg8<def> = PHI %vreg35, <BB#2>, %vreg25, <BB#9>; GPR32:%vreg8,%vreg35,%vreg25
	%vreg42<def> = REG_SEQUENCE %vreg35, isub_hi, %vreg35, isub_lo; FPR64_with_isub_hi_in_FPR32:%vreg42 GPR32:%vreg35
	STRi64 %vreg42, <fi#0>, 24; mem:ST8[%1+24] FPR64_with_isub_hi_in_FPR32:%vreg42
	STRi64 %vreg42, <fi#0>, 16; mem:ST8[%1+16] FPR64_with_isub_hi_in_FPR32:%vreg42
	STRi64 %vreg42, <fi#0>, 8; mem:ST8[%1+8] FPR64_with_isub_hi_in_FPR32:%vreg42
	STRi64 %vreg42, <fi#0>, 0; mem:ST8[%1] FPR64_with_isub_hi_in_FPR32:%vreg42
	BNONE32 <BB#5>, %STATUS<imp-use>
    Successors according to CFG: BB#5(?%)

BB#4: derived from LLVM BB %for.cond64.preheader
    Predecessors according to CFG: BB#7
	BNONE32 <BB#8>, %STATUS<imp-use>
    Successors according to CFG: BB#8(?%)

BB#5: derived from LLVM BB %for.body9
    Predecessors according to CFG: BB#3 BB#7
	%vreg9<def> = PHI %vreg7, <BB#3>, %vreg20, <BB#7>; GPR32:%vreg9,%vreg7,%vreg20
	%vreg10<def> = PHI %vreg35, <BB#3>, %vreg19, <BB#7>; GPR32:%vreg10,%vreg35,%vreg19
	%vreg44<def> = LSL32ri %vreg10, 2, %STATUS<imp-def,dead>; GPR32:%vreg44,%vreg10
	%vreg45<def> = ADDrr_r32 %vreg5, %vreg44<kill>, %STATUS<imp-def,dead>; GPR32:%vreg45,%vreg5,%vreg44
	%vreg11<def> = COPY %vreg2; GPR32:%vreg11,%vreg2
	%vreg12<def> = LDRf32 %vreg45<kill>, 0; mem:Volatile LD4[%add.ptr10](tbaa=!2) FPR32:%vreg12 GPR32:%vreg45
    Successors according to CFG: BB#6(?%)

BB#6: derived from LLVM BB %for.body13
    Predecessors according to CFG: BB#5 BB#6
	%vreg13<def> = PHI %vreg11, <BB#5>, %vreg18, <BB#6>; GPR32:%vreg13,%vreg11,%vreg18
	%vreg14<def> = PHI %vreg9, <BB#5>, %vreg17, <BB#6>; GPR32:%vreg14,%vreg9,%vreg17
	%vreg15<def> = PHI %vreg35, <BB#5>, %vreg16, <BB#6>; GPR32:%vreg15,%vreg35,%vreg16
	%vreg46<def> = LDRf32 %vreg14, -8; mem:Volatile LD4[%scevgep8](tbaa=!2) FPR32:%vreg46 GPR32:%vreg14
	%vreg18<def> = ADDri_r32 %vreg13, 16, %STATUS<imp-def,dead>; GPR32:%vreg18,%vreg13
	%vreg17<def> = ADDri_r32 %vreg14, 16, %STATUS<imp-def,dead>; GPR32:%vreg17,%vreg14
	%vreg47<def> = LDRf32 %vreg14, -4; mem:Volatile LD4[%scevgep9](tbaa=!2) FPR32:%vreg47 GPR32:%vreg14
	%vreg16<def> = ADDri_r32 %vreg15, 4, %STATUS<imp-def,dead>; GPR32:%vreg16,%vreg15
	%vreg48<def> = LDRf32 %vreg14, 0; mem:Volatile LD4[%lsr.iv5](tbaa=!2) FPR32:%vreg48 GPR32:%vreg14
	%vreg49<def> = LDRf32 %vreg14, 4; mem:Volatile LD4[%scevgep7](tbaa=!2) FPR32:%vreg49 GPR32:%vreg14
	%vreg50<def> = LDRf32 %vreg13, -8; mem:LD4[%scevgep15](tbaa=!2) FPR32:%vreg50 GPR32:%vreg13
	%vreg75<def> = LDRi32_r32 <fi#2>, 0; mem:LD4[FixedStack2] GPR32:%vreg75
	GID %CONFIG<imp-def>
	%CONFIG<def> = MOVTS32_core %vreg75<kill>; GPR32:%vreg75
	GIE %CONFIG<imp-def>
	%vreg51<def,tied1> = FMADDrr_r32 %vreg50<tied0>, %vreg12, %vreg46<kill>, %STATUS<imp-def,dead>; FPR32:%vreg51,%vreg50,%vreg12,%vreg46
	STRf32 %vreg51<kill>, %vreg13, -8; mem:ST4[%scevgep15](tbaa=!2) FPR32:%vreg51 GPR32:%vreg13
	%vreg52<def> = LDRf32 %vreg13, -4; mem:LD4[%scevgep17](tbaa=!2) FPR32:%vreg52 GPR32:%vreg13
	%vreg53<def,tied1> = FMADDrr_r32 %vreg52<tied0>, %vreg12, %vreg47<kill>, %STATUS<imp-def,dead>; FPR32:%vreg53,%vreg52,%vreg12,%vreg47
	STRf32 %vreg53<kill>, %vreg13, -4; mem:ST4[%scevgep17](tbaa=!2) FPR32:%vreg53 GPR32:%vreg13
	%vreg54<def> = LDRf32 %vreg13, 0; mem:LD4[%lsr.iv1214](tbaa=!2) FPR32:%vreg54 GPR32:%vreg13
	%vreg55<def,tied1> = FMADDrr_r32 %vreg54<tied0>, %vreg12, %vreg48<kill>, %STATUS<imp-def,dead>; FPR32:%vreg55,%vreg54,%vreg12,%vreg48
	STRf32 %vreg55<kill>, %vreg13, 0; mem:ST4[%lsr.iv1214](tbaa=!2) FPR32:%vreg55 GPR32:%vreg13
	%vreg56<def> = LDRf32 %vreg13, 4; mem:LD4[%scevgep16](tbaa=!2) FPR32:%vreg56 GPR32:%vreg13
	%vreg57<def,tied1> = FMADDrr_r32 %vreg56<tied0>, %vreg12, %vreg49<kill>, %STATUS<imp-def,dead>; FPR32:%vreg57,%vreg56,%vreg12,%vreg49
	%vreg58<def> = CMPri_r32 %vreg16, 8, %STATUS<imp-def>; GPR32:%vreg58,%vreg16
	STRf32 %vreg57<kill>, %vreg13, 4; mem:ST4[%scevgep16](tbaa=!2) FPR32:%vreg57 GPR32:%vreg13
	BCC <BB#6>, 8, %STATUS<imp-use>
	BNONE32 <BB#7>, %STATUS<imp-use>
    Successors according to CFG: BB#6(0x7c000000 / 0x80000000 = 96.88%) BB#7(0x04000000 / 0x80000000 = 3.12%)

BB#7: derived from LLVM BB %for.end60
    Predecessors according to CFG: BB#6
	%vreg20<def> = ADDrr_r32 %vreg9, %vreg1, %STATUS<imp-def,dead>; GPR32:%vreg20,%vreg9,%vreg1
	%vreg19<def> = ADDri_r32 %vreg10, 1, %STATUS<imp-def,dead>; GPR32:%vreg19,%vreg10
	%vreg59<def> = CMPrr_r32 %vreg19, %vreg33, %STATUS<imp-def>; GPR32:%vreg59,%vreg19,%vreg33
	BCC <BB#4>, 0, %STATUS<imp-use>
	BNONE32 <BB#5>, %STATUS<imp-use>
    Successors according to CFG: BB#4(0x04000000 / 0x80000000 = 3.12%) BB#5(0x7c000000 / 0x80000000 = 96.88%)

BB#8: derived from LLVM BB %for.body66
    Predecessors according to CFG: BB#4 BB#8
	%vreg21<def> = PHI %vreg6, <BB#4>, %vreg24, <BB#8>; GPR32:%vreg21,%vreg6,%vreg24
	%vreg22<def> = PHI %vreg35, <BB#4>, %vreg23, <BB#8>; GPR32:%vreg22,%vreg35,%vreg23
	%vreg62<def> = ADDrr_r32 %vreg36, %vreg22, %STATUS<imp-def,dead>; GPR32:%vreg62,%vreg36,%vreg22
	%vreg63<def> = LDRf32 %vreg62<kill>, 0; mem:LD4[%sunkaddr30](tbaa=!2) FPR32:%vreg63 GPR32:%vreg62
	%vreg24<def> = ADDri_r32 %vreg21, 4, %STATUS<imp-def,dead>; GPR32:%vreg24,%vreg21
	%vreg23<def> = ADDri_r32 %vreg22, 4, %STATUS<imp-def,dead>; GPR32:%vreg23,%vreg22
	%vreg64<def> = LDRf32 %vreg21, 0; mem:Volatile LD4[%lsr.iv24](tbaa=!2) FPR32:%vreg64 GPR32:%vreg21
	%vreg76<def> = LDRi32_r32 <fi#2>, 0; mem:LD4[FixedStack2] GPR32:%vreg76
	GID %CONFIG<imp-def>
	%CONFIG<def> = MOVTS32_core %vreg76<kill>; GPR32:%vreg76
	GIE %CONFIG<imp-def>
	%vreg65<def> = FADDrr_r32 %vreg63<kill>, %vreg64<kill>, %STATUS<imp-def,dead>; FPR32:%vreg65,%vreg63,%vreg64
	%vreg66<def> = CMPri_r32 %vreg23, 32, %STATUS<imp-def>; GPR32:%vreg66,%vreg23
	STRf32 %vreg65<kill>, %vreg21, 0; mem:Volatile ST4[%lsr.iv24](tbaa=!2) FPR32:%vreg65 GPR32:%vreg21
	BCC <BB#8>, 1, %STATUS<imp-use>
	BNONE32 <BB#9>, %STATUS<imp-use>
    Successors according to CFG: BB#9(0x04000000 / 0x80000000 = 3.12%) BB#8(0x7c000000 / 0x80000000 = 96.88%)

BB#9: derived from LLVM BB %for.end75
    Predecessors according to CFG: BB#8
	%vreg27<def> = ADDri_r32 %vreg6, 32, %STATUS<imp-def,dead>; GPR32:%vreg27,%vreg6
	%vreg26<def> = ADDri_r32 %vreg7, 32, %STATUS<imp-def,dead>; GPR32:%vreg26,%vreg7
	%vreg25<def> = ADDri_r32 %vreg8, 8, %STATUS<imp-def,dead>; GPR32:%vreg25,%vreg8
	%vreg67<def> = CMPrr_r32 %vreg25, %vreg33, %STATUS<imp-def>; GPR32:%vreg67,%vreg25,%vreg33
	BCC <BB#3>, 8, %STATUS<imp-use>
	BNONE32 <BB#10>, %STATUS<imp-use>
    Successors according to CFG: BB#3(0x7c000000 / 0x80000000 = 96.88%) BB#10(0x04000000 / 0x80000000 = 3.12%)

BB#10: derived from LLVM BB %for.end78
    Predecessors according to CFG: BB#9
	%vreg29<def> = ADDrr_r32 %vreg3, %vreg1, %STATUS<imp-def,dead>; GPR32:%vreg29,%vreg3,%vreg1
	%vreg28<def> = ADDri_r32 %vreg4, 1, %STATUS<imp-def,dead>; GPR32:%vreg28,%vreg4
	%vreg68<def> = CMPrr_r32 %vreg28, %vreg33, %STATUS<imp-def>; GPR32:%vreg68,%vreg28,%vreg33
	BCC <BB#2>, 1, %STATUS<imp-use>
	BNONE32 <BB#11>, %STATUS<imp-use>
    Successors according to CFG: BB#11(0x04000000 / 0x80000000 = 3.12%) BB#2(0x7c000000 / 0x80000000 = 96.88%)

BB#11: derived from LLVM BB %for.end81
    Predecessors according to CFG: BB#0 BB#10
	%vreg77<def> = LDRi32_r32 <fi#1>, 0; mem:LD4[FixedStack1] GPR32:%vreg77
	GID
	%CONFIG<def> = MOVTS32_core %vreg77<kill>; GPR32:%vreg77
	GIE %CONFIG<imp-use,kill>
	RTS

# End machine code for function matmac.

# *** IR Dump After Remove unreachable machine basic blocks ***:
# Machine code for function matmac: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=32, align=8, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=4, align=4, at location [SP]
Function Live Ins: %R0 in %vreg30, %R1 in %vreg31, %R2 in %vreg32, %R3 in %vreg33

BB#0: 
    Live Ins: %R0 %R1 %R2 %R3
	GID %CONFIG<imp-def>
	%vreg71<def> = MOVFS32_core %CONFIG<kill>; GPR32:%vreg71
	STRi32_r32 %vreg71, <fi#1>, 0; mem:ST4[FixedStack1] GPR32:%vreg71
	%vreg72<def> = MOVi32ri 65535; GPR32:%vreg72
	%vreg73<def,tied1> = MOVTi32ri %vreg72<tied0>, 65521; GPR32:%vreg73,%vreg72
	%vreg69<def> = ANDrr_r32 %vreg71<kill>, %vreg73<kill>, %STATUS<imp-def>; GPR32:%vreg69,%vreg71,%vreg73
	STRi32_r32 %vreg69, <fi#2>, 0; mem:ST4[FixedStack2] GPR32:%vreg69
	%vreg70<def,tied1> = MOVTi32ri %vreg71<kill,tied0>, 72; GPR32:%vreg70,%vreg71
	STRi32_r32 %vreg70, <fi#3>, 0; mem:ST4[FixedStack3] GPR32:%vreg70
	GIE %CONFIG<imp-use,kill>
    Successors according to CFG: BB#1(?%)

BB#1: derived from LLVM BB %entry
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#0
	%vreg33<def> = COPY %R3; GPR32:%vreg33
	%vreg32<def> = COPY %R2; GPR32:%vreg32
	%vreg31<def> = COPY %R1; GPR32:%vreg31
	%vreg30<def> = COPY %R0; GPR32:%vreg30
	%vreg34<def> = CMPri_r32 %vreg33, 1, %STATUS<imp-def>; GPR32:%vreg34,%vreg33
	BCC <BB#12>, 8, %STATUS<imp-use>
	BNONE32 <BB#2>, %STATUS<imp-use>
    Successors according to CFG: BB#2(0x50000000 / 0x80000000 = 62.50%) BB#12(0x30000000 / 0x80000000 = 37.50%)

BB#2: derived from LLVM BB %for.body3.lr.ph.preheader
    Predecessors according to CFG: BB#1
	%vreg1<def> = LSL32ri %vreg33, 2, %STATUS<imp-def,dead>; GPR32:%vreg1,%vreg33
	%vreg0<def> = ADDri_r32 %vreg31, 8, %STATUS<imp-def,dead>; GPR32:%vreg0,%vreg31
	%vreg36<def> = MOViPTR <fi#0>, 0; GPR32:%vreg36
	%vreg2<def> = ADDri_r32 %vreg36, 8, %STATUS<imp-def,dead>; GPR32:%vreg2,%vreg36
	%vreg35<def> = MOVi32ri 0; GPR32:%vreg35
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %for.body3.lr.ph
    Predecessors according to CFG: BB#2 BB#11
	%vreg3<def> = PHI %vreg32, <BB#2>, %vreg29, <BB#11>; GPR32:%vreg3,%vreg32,%vreg29
	%vreg4<def> = PHI %vreg35, <BB#2>, %vreg28, <BB#11>; GPR32:%vreg4,%vreg35,%vreg28
	%vreg74<def> = LDRi32_r32 <fi#3>, 0; mem:LD4[FixedStack3] GPR32:%vreg74
	GID %CONFIG<imp-def>
	%CONFIG<def> = MOVTS32_core %vreg74<kill>; GPR32:%vreg74
	GIE %CONFIG<imp-def>
	%vreg38<def> = IMULrr_r32 %vreg4, %vreg33, %STATUS<imp-def,dead>; GPR32:%vreg38,%vreg4,%vreg33
	%vreg39<def> = LSL32ri %vreg38<kill>, 2, %STATUS<imp-def,dead>; GPR32:%vreg39,%vreg38
	%vreg5<def> = ADDrr_r32 %vreg30, %vreg39<kill>, %STATUS<imp-def,dead>; GPR32:%vreg5,%vreg30,%vreg39
    Successors according to CFG: BB#4(?%)

BB#4: derived from LLVM BB %for.body9.preheader
    Predecessors according to CFG: BB#3 BB#10
	%vreg6<def> = PHI %vreg3, <BB#3>, %vreg27, <BB#10>; GPR32:%vreg6,%vreg3,%vreg27
	%vreg7<def> = PHI %vreg0, <BB#3>, %vreg26, <BB#10>; GPR32:%vreg7,%vreg0,%vreg26
	%vreg8<def> = PHI %vreg35, <BB#3>, %vreg25, <BB#10>; GPR32:%vreg8,%vreg35,%vreg25
	%vreg42<def> = REG_SEQUENCE %vreg35, isub_hi, %vreg35, isub_lo; FPR64_with_isub_hi_in_FPR32:%vreg42 GPR32:%vreg35
	STRi64 %vreg42, <fi#0>, 24; mem:ST8[%1+24] FPR64_with_isub_hi_in_FPR32:%vreg42
	STRi64 %vreg42, <fi#0>, 16; mem:ST8[%1+16] FPR64_with_isub_hi_in_FPR32:%vreg42
	STRi64 %vreg42, <fi#0>, 8; mem:ST8[%1+8] FPR64_with_isub_hi_in_FPR32:%vreg42
	STRi64 %vreg42, <fi#0>, 0; mem:ST8[%1] FPR64_with_isub_hi_in_FPR32:%vreg42
	BNONE32 <BB#6>, %STATUS<imp-use>
    Successors according to CFG: BB#6(?%)

BB#5: derived from LLVM BB %for.cond64.preheader
    Predecessors according to CFG: BB#8
	BNONE32 <BB#9>, %STATUS<imp-use>
    Successors according to CFG: BB#9(?%)

BB#6: derived from LLVM BB %for.body9
    Predecessors according to CFG: BB#4 BB#8
	%vreg9<def> = PHI %vreg7, <BB#4>, %vreg20, <BB#8>; GPR32:%vreg9,%vreg7,%vreg20
	%vreg10<def> = PHI %vreg35, <BB#4>, %vreg19, <BB#8>; GPR32:%vreg10,%vreg35,%vreg19
	%vreg44<def> = LSL32ri %vreg10, 2, %STATUS<imp-def,dead>; GPR32:%vreg44,%vreg10
	%vreg45<def> = ADDrr_r32 %vreg5, %vreg44<kill>, %STATUS<imp-def,dead>; GPR32:%vreg45,%vreg5,%vreg44
	%vreg11<def> = COPY %vreg2; GPR32:%vreg11,%vreg2
	%vreg12<def> = LDRf32 %vreg45<kill>, 0; mem:Volatile LD4[%add.ptr10](tbaa=!2) FPR32:%vreg12 GPR32:%vreg45
    Successors according to CFG: BB#7(?%)

BB#7: derived from LLVM BB %for.body13
    Predecessors according to CFG: BB#6 BB#7
	%vreg13<def> = PHI %vreg11, <BB#6>, %vreg18, <BB#7>; GPR32:%vreg13,%vreg11,%vreg18
	%vreg14<def> = PHI %vreg9, <BB#6>, %vreg17, <BB#7>; GPR32:%vreg14,%vreg9,%vreg17
	%vreg15<def> = PHI %vreg35, <BB#6>, %vreg16, <BB#7>; GPR32:%vreg15,%vreg35,%vreg16
	%vreg46<def> = LDRf32 %vreg14, -8; mem:Volatile LD4[%scevgep8](tbaa=!2) FPR32:%vreg46 GPR32:%vreg14
	%vreg18<def> = ADDri_r32 %vreg13, 16, %STATUS<imp-def,dead>; GPR32:%vreg18,%vreg13
	%vreg17<def> = ADDri_r32 %vreg14, 16, %STATUS<imp-def,dead>; GPR32:%vreg17,%vreg14
	%vreg47<def> = LDRf32 %vreg14, -4; mem:Volatile LD4[%scevgep9](tbaa=!2) FPR32:%vreg47 GPR32:%vreg14
	%vreg16<def> = ADDri_r32 %vreg15, 4, %STATUS<imp-def,dead>; GPR32:%vreg16,%vreg15
	%vreg48<def> = LDRf32 %vreg14, 0; mem:Volatile LD4[%lsr.iv5](tbaa=!2) FPR32:%vreg48 GPR32:%vreg14
	%vreg49<def> = LDRf32 %vreg14, 4; mem:Volatile LD4[%scevgep7](tbaa=!2) FPR32:%vreg49 GPR32:%vreg14
	%vreg50<def> = LDRf32 %vreg13, -8; mem:LD4[%scevgep15](tbaa=!2) FPR32:%vreg50 GPR32:%vreg13
	%vreg75<def> = LDRi32_r32 <fi#2>, 0; mem:LD4[FixedStack2] GPR32:%vreg75
	GID %CONFIG<imp-def>
	%CONFIG<def> = MOVTS32_core %vreg75<kill>; GPR32:%vreg75
	GIE %CONFIG<imp-def>
	%vreg51<def,tied1> = FMADDrr_r32 %vreg50<tied0>, %vreg12, %vreg46<kill>, %STATUS<imp-def,dead>; FPR32:%vreg51,%vreg50,%vreg12,%vreg46
	STRf32 %vreg51<kill>, %vreg13, -8; mem:ST4[%scevgep15](tbaa=!2) FPR32:%vreg51 GPR32:%vreg13
	%vreg52<def> = LDRf32 %vreg13, -4; mem:LD4[%scevgep17](tbaa=!2) FPR32:%vreg52 GPR32:%vreg13
	%vreg53<def,tied1> = FMADDrr_r32 %vreg52<tied0>, %vreg12, %vreg47<kill>, %STATUS<imp-def,dead>; FPR32:%vreg53,%vreg52,%vreg12,%vreg47
	STRf32 %vreg53<kill>, %vreg13, -4; mem:ST4[%scevgep17](tbaa=!2) FPR32:%vreg53 GPR32:%vreg13
	%vreg54<def> = LDRf32 %vreg13, 0; mem:LD4[%lsr.iv1214](tbaa=!2) FPR32:%vreg54 GPR32:%vreg13
	%vreg55<def,tied1> = FMADDrr_r32 %vreg54<tied0>, %vreg12, %vreg48<kill>, %STATUS<imp-def,dead>; FPR32:%vreg55,%vreg54,%vreg12,%vreg48
	STRf32 %vreg55<kill>, %vreg13, 0; mem:ST4[%lsr.iv1214](tbaa=!2) FPR32:%vreg55 GPR32:%vreg13
	%vreg56<def> = LDRf32 %vreg13, 4; mem:LD4[%scevgep16](tbaa=!2) FPR32:%vreg56 GPR32:%vreg13
	%vreg57<def,tied1> = FMADDrr_r32 %vreg56<tied0>, %vreg12, %vreg49<kill>, %STATUS<imp-def,dead>; FPR32:%vreg57,%vreg56,%vreg12,%vreg49
	%vreg58<def> = CMPri_r32 %vreg16, 8, %STATUS<imp-def>; GPR32:%vreg58,%vreg16
	STRf32 %vreg57<kill>, %vreg13, 4; mem:ST4[%scevgep16](tbaa=!2) FPR32:%vreg57 GPR32:%vreg13
	BCC <BB#7>, 8, %STATUS<imp-use>
	BNONE32 <BB#8>, %STATUS<imp-use>
    Successors according to CFG: BB#7(0x7c000000 / 0x80000000 = 96.88%) BB#8(0x04000000 / 0x80000000 = 3.12%)

BB#8: derived from LLVM BB %for.end60
    Predecessors according to CFG: BB#7
	%vreg20<def> = ADDrr_r32 %vreg9, %vreg1, %STATUS<imp-def,dead>; GPR32:%vreg20,%vreg9,%vreg1
	%vreg19<def> = ADDri_r32 %vreg10, 1, %STATUS<imp-def,dead>; GPR32:%vreg19,%vreg10
	%vreg59<def> = CMPrr_r32 %vreg19, %vreg33, %STATUS<imp-def>; GPR32:%vreg59,%vreg19,%vreg33
	BCC <BB#5>, 0, %STATUS<imp-use>
	BNONE32 <BB#6>, %STATUS<imp-use>
    Successors according to CFG: BB#5(0x04000000 / 0x80000000 = 3.12%) BB#6(0x7c000000 / 0x80000000 = 96.88%)

BB#9: derived from LLVM BB %for.body66
    Predecessors according to CFG: BB#5 BB#9
	%vreg21<def> = PHI %vreg6, <BB#5>, %vreg24, <BB#9>; GPR32:%vreg21,%vreg6,%vreg24
	%vreg22<def> = PHI %vreg35, <BB#5>, %vreg23, <BB#9>; GPR32:%vreg22,%vreg35,%vreg23
	%vreg62<def> = ADDrr_r32 %vreg36, %vreg22, %STATUS<imp-def,dead>; GPR32:%vreg62,%vreg36,%vreg22
	%vreg63<def> = LDRf32 %vreg62<kill>, 0; mem:LD4[%sunkaddr30](tbaa=!2) FPR32:%vreg63 GPR32:%vreg62
	%vreg24<def> = ADDri_r32 %vreg21, 4, %STATUS<imp-def,dead>; GPR32:%vreg24,%vreg21
	%vreg23<def> = ADDri_r32 %vreg22, 4, %STATUS<imp-def,dead>; GPR32:%vreg23,%vreg22
	%vreg64<def> = LDRf32 %vreg21, 0; mem:Volatile LD4[%lsr.iv24](tbaa=!2) FPR32:%vreg64 GPR32:%vreg21
	%vreg76<def> = LDRi32_r32 <fi#2>, 0; mem:LD4[FixedStack2] GPR32:%vreg76
	GID %CONFIG<imp-def>
	%CONFIG<def> = MOVTS32_core %vreg76<kill>; GPR32:%vreg76
	GIE %CONFIG<imp-def>
	%vreg65<def> = FADDrr_r32 %vreg63<kill>, %vreg64<kill>, %STATUS<imp-def,dead>; FPR32:%vreg65,%vreg63,%vreg64
	%vreg66<def> = CMPri_r32 %vreg23, 32, %STATUS<imp-def>; GPR32:%vreg66,%vreg23
	STRf32 %vreg65<kill>, %vreg21, 0; mem:Volatile ST4[%lsr.iv24](tbaa=!2) FPR32:%vreg65 GPR32:%vreg21
	BCC <BB#9>, 1, %STATUS<imp-use>
	BNONE32 <BB#10>, %STATUS<imp-use>
    Successors according to CFG: BB#10(0x04000000 / 0x80000000 = 3.12%) BB#9(0x7c000000 / 0x80000000 = 96.88%)

BB#10: derived from LLVM BB %for.end75
    Predecessors according to CFG: BB#9
	%vreg27<def> = ADDri_r32 %vreg6, 32, %STATUS<imp-def,dead>; GPR32:%vreg27,%vreg6
	%vreg26<def> = ADDri_r32 %vreg7, 32, %STATUS<imp-def,dead>; GPR32:%vreg26,%vreg7
	%vreg25<def> = ADDri_r32 %vreg8, 8, %STATUS<imp-def,dead>; GPR32:%vreg25,%vreg8
	%vreg67<def> = CMPrr_r32 %vreg25, %vreg33, %STATUS<imp-def>; GPR32:%vreg67,%vreg25,%vreg33
	BCC <BB#4>, 8, %STATUS<imp-use>
	BNONE32 <BB#11>, %STATUS<imp-use>
    Successors according to CFG: BB#4(0x7c000000 / 0x80000000 = 96.88%) BB#11(0x04000000 / 0x80000000 = 3.12%)

BB#11: derived from LLVM BB %for.end78
    Predecessors according to CFG: BB#10
	%vreg29<def> = ADDrr_r32 %vreg3, %vreg1, %STATUS<imp-def,dead>; GPR32:%vreg29,%vreg3,%vreg1
	%vreg28<def> = ADDri_r32 %vreg4, 1, %STATUS<imp-def,dead>; GPR32:%vreg28,%vreg4
	%vreg68<def> = CMPrr_r32 %vreg28, %vreg33, %STATUS<imp-def>; GPR32:%vreg68,%vreg28,%vreg33
	BCC <BB#3>, 1, %STATUS<imp-use>
	BNONE32 <BB#12>, %STATUS<imp-use>
    Successors according to CFG: BB#12(0x04000000 / 0x80000000 = 3.12%) BB#3(0x7c000000 / 0x80000000 = 96.88%)

BB#12: derived from LLVM BB %for.end81
    Predecessors according to CFG: BB#1 BB#11
	%vreg77<def> = LDRi32_r32 <fi#1>, 0; mem:LD4[FixedStack1] GPR32:%vreg77
	GID
	%CONFIG<def> = MOVTS32_core %vreg77<kill>; GPR32:%vreg77
	GIE %CONFIG<imp-use,kill>
	RTS

# End machine code for function matmac.

# *** IR Dump Before Live Variable Analysis ***:
# Machine code for function matmac: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=32, align=8, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=4, align=4, at location [SP]
Function Live Ins: %R0 in %vreg30, %R1 in %vreg31, %R2 in %vreg32, %R3 in %vreg33

BB#0: 
    Live Ins: %R0 %R1 %R2 %R3
	GID %CONFIG<imp-def>
	%vreg71<def> = MOVFS32_core %CONFIG<kill>; GPR32:%vreg71
	STRi32_r32 %vreg71, <fi#1>, 0; mem:ST4[FixedStack1] GPR32:%vreg71
	%vreg72<def> = MOVi32ri 65535; GPR32:%vreg72
	%vreg73<def,tied1> = MOVTi32ri %vreg72<tied0>, 65521; GPR32:%vreg73,%vreg72
	%vreg69<def> = ANDrr_r32 %vreg71<kill>, %vreg73<kill>, %STATUS<imp-def>; GPR32:%vreg69,%vreg71,%vreg73
	STRi32_r32 %vreg69, <fi#2>, 0; mem:ST4[FixedStack2] GPR32:%vreg69
	%vreg70<def,tied1> = MOVTi32ri %vreg71<kill,tied0>, 72; GPR32:%vreg70,%vreg71
	STRi32_r32 %vreg70, <fi#3>, 0; mem:ST4[FixedStack3] GPR32:%vreg70
	GIE %CONFIG<imp-use,kill>
    Successors according to CFG: BB#1(?%)

BB#1: derived from LLVM BB %entry
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#0
	%vreg33<def> = COPY %R3; GPR32:%vreg33
	%vreg32<def> = COPY %R2; GPR32:%vreg32
	%vreg31<def> = COPY %R1; GPR32:%vreg31
	%vreg30<def> = COPY %R0; GPR32:%vreg30
	%vreg34<def> = CMPri_r32 %vreg33, 1, %STATUS<imp-def>; GPR32:%vreg34,%vreg33
	BCC <BB#12>, 8, %STATUS<imp-use>
	BNONE32 <BB#2>, %STATUS<imp-use>
    Successors according to CFG: BB#2(0x50000000 / 0x80000000 = 62.50%) BB#12(0x30000000 / 0x80000000 = 37.50%)

BB#2: derived from LLVM BB %for.body3.lr.ph.preheader
    Predecessors according to CFG: BB#1
	%vreg1<def> = LSL32ri %vreg33, 2, %STATUS<imp-def,dead>; GPR32:%vreg1,%vreg33
	%vreg0<def> = ADDri_r32 %vreg31, 8, %STATUS<imp-def,dead>; GPR32:%vreg0,%vreg31
	%vreg36<def> = MOViPTR <fi#0>, 0; GPR32:%vreg36
	%vreg2<def> = ADDri_r32 %vreg36, 8, %STATUS<imp-def,dead>; GPR32:%vreg2,%vreg36
	%vreg35<def> = MOVi32ri 0; GPR32:%vreg35
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %for.body3.lr.ph
    Predecessors according to CFG: BB#2 BB#11
	%vreg3<def> = PHI %vreg32, <BB#2>, %vreg29, <BB#11>; GPR32:%vreg3,%vreg32,%vreg29
	%vreg4<def> = PHI %vreg35, <BB#2>, %vreg28, <BB#11>; GPR32:%vreg4,%vreg35,%vreg28
	%vreg74<def> = LDRi32_r32 <fi#3>, 0; mem:LD4[FixedStack3] GPR32:%vreg74
	GID %CONFIG<imp-def>
	%CONFIG<def> = MOVTS32_core %vreg74<kill>; GPR32:%vreg74
	GIE %CONFIG<imp-def>
	%vreg38<def> = IMULrr_r32 %vreg4, %vreg33, %STATUS<imp-def,dead>; GPR32:%vreg38,%vreg4,%vreg33
	%vreg39<def> = LSL32ri %vreg38<kill>, 2, %STATUS<imp-def,dead>; GPR32:%vreg39,%vreg38
	%vreg5<def> = ADDrr_r32 %vreg30, %vreg39<kill>, %STATUS<imp-def,dead>; GPR32:%vreg5,%vreg30,%vreg39
    Successors according to CFG: BB#4(?%)

BB#4: derived from LLVM BB %for.body9.preheader
    Predecessors according to CFG: BB#3 BB#10
	%vreg6<def> = PHI %vreg3, <BB#3>, %vreg27, <BB#10>; GPR32:%vreg6,%vreg3,%vreg27
	%vreg7<def> = PHI %vreg0, <BB#3>, %vreg26, <BB#10>; GPR32:%vreg7,%vreg0,%vreg26
	%vreg8<def> = PHI %vreg35, <BB#3>, %vreg25, <BB#10>; GPR32:%vreg8,%vreg35,%vreg25
	%vreg42<def> = REG_SEQUENCE %vreg35, isub_hi, %vreg35, isub_lo; FPR64_with_isub_hi_in_FPR32:%vreg42 GPR32:%vreg35
	STRi64 %vreg42, <fi#0>, 24; mem:ST8[%1+24] FPR64_with_isub_hi_in_FPR32:%vreg42
	STRi64 %vreg42, <fi#0>, 16; mem:ST8[%1+16] FPR64_with_isub_hi_in_FPR32:%vreg42
	STRi64 %vreg42, <fi#0>, 8; mem:ST8[%1+8] FPR64_with_isub_hi_in_FPR32:%vreg42
	STRi64 %vreg42, <fi#0>, 0; mem:ST8[%1] FPR64_with_isub_hi_in_FPR32:%vreg42
	BNONE32 <BB#6>, %STATUS<imp-use>
    Successors according to CFG: BB#6(?%)

BB#5: derived from LLVM BB %for.cond64.preheader
    Predecessors according to CFG: BB#8
	BNONE32 <BB#9>, %STATUS<imp-use>
    Successors according to CFG: BB#9(?%)

BB#6: derived from LLVM BB %for.body9
    Predecessors according to CFG: BB#4 BB#8
	%vreg9<def> = PHI %vreg7, <BB#4>, %vreg20, <BB#8>; GPR32:%vreg9,%vreg7,%vreg20
	%vreg10<def> = PHI %vreg35, <BB#4>, %vreg19, <BB#8>; GPR32:%vreg10,%vreg35,%vreg19
	%vreg44<def> = LSL32ri %vreg10, 2, %STATUS<imp-def,dead>; GPR32:%vreg44,%vreg10
	%vreg45<def> = ADDrr_r32 %vreg5, %vreg44<kill>, %STATUS<imp-def,dead>; GPR32:%vreg45,%vreg5,%vreg44
	%vreg11<def> = COPY %vreg2; GPR32:%vreg11,%vreg2
	%vreg12<def> = LDRf32 %vreg45<kill>, 0; mem:Volatile LD4[%add.ptr10](tbaa=!2) FPR32:%vreg12 GPR32:%vreg45
    Successors according to CFG: BB#7(?%)

BB#7: derived from LLVM BB %for.body13
    Predecessors according to CFG: BB#6 BB#7
	%vreg13<def> = PHI %vreg11, <BB#6>, %vreg18, <BB#7>; GPR32:%vreg13,%vreg11,%vreg18
	%vreg14<def> = PHI %vreg9, <BB#6>, %vreg17, <BB#7>; GPR32:%vreg14,%vreg9,%vreg17
	%vreg15<def> = PHI %vreg35, <BB#6>, %vreg16, <BB#7>; GPR32:%vreg15,%vreg35,%vreg16
	%vreg46<def> = LDRf32 %vreg14, -8; mem:Volatile LD4[%scevgep8](tbaa=!2) FPR32:%vreg46 GPR32:%vreg14
	%vreg18<def> = ADDri_r32 %vreg13, 16, %STATUS<imp-def,dead>; GPR32:%vreg18,%vreg13
	%vreg17<def> = ADDri_r32 %vreg14, 16, %STATUS<imp-def,dead>; GPR32:%vreg17,%vreg14
	%vreg47<def> = LDRf32 %vreg14, -4; mem:Volatile LD4[%scevgep9](tbaa=!2) FPR32:%vreg47 GPR32:%vreg14
	%vreg16<def> = ADDri_r32 %vreg15, 4, %STATUS<imp-def,dead>; GPR32:%vreg16,%vreg15
	%vreg48<def> = LDRf32 %vreg14, 0; mem:Volatile LD4[%lsr.iv5](tbaa=!2) FPR32:%vreg48 GPR32:%vreg14
	%vreg49<def> = LDRf32 %vreg14, 4; mem:Volatile LD4[%scevgep7](tbaa=!2) FPR32:%vreg49 GPR32:%vreg14
	%vreg50<def> = LDRf32 %vreg13, -8; mem:LD4[%scevgep15](tbaa=!2) FPR32:%vreg50 GPR32:%vreg13
	%vreg75<def> = LDRi32_r32 <fi#2>, 0; mem:LD4[FixedStack2] GPR32:%vreg75
	GID %CONFIG<imp-def>
	%CONFIG<def> = MOVTS32_core %vreg75<kill>; GPR32:%vreg75
	GIE %CONFIG<imp-def>
	%vreg51<def,tied1> = FMADDrr_r32 %vreg50<tied0>, %vreg12, %vreg46<kill>, %STATUS<imp-def,dead>; FPR32:%vreg51,%vreg50,%vreg12,%vreg46
	STRf32 %vreg51<kill>, %vreg13, -8; mem:ST4[%scevgep15](tbaa=!2) FPR32:%vreg51 GPR32:%vreg13
	%vreg52<def> = LDRf32 %vreg13, -4; mem:LD4[%scevgep17](tbaa=!2) FPR32:%vreg52 GPR32:%vreg13
	%vreg53<def,tied1> = FMADDrr_r32 %vreg52<tied0>, %vreg12, %vreg47<kill>, %STATUS<imp-def,dead>; FPR32:%vreg53,%vreg52,%vreg12,%vreg47
	STRf32 %vreg53<kill>, %vreg13, -4; mem:ST4[%scevgep17](tbaa=!2) FPR32:%vreg53 GPR32:%vreg13
	%vreg54<def> = LDRf32 %vreg13, 0; mem:LD4[%lsr.iv1214](tbaa=!2) FPR32:%vreg54 GPR32:%vreg13
	%vreg55<def,tied1> = FMADDrr_r32 %vreg54<tied0>, %vreg12, %vreg48<kill>, %STATUS<imp-def,dead>; FPR32:%vreg55,%vreg54,%vreg12,%vreg48
	STRf32 %vreg55<kill>, %vreg13, 0; mem:ST4[%lsr.iv1214](tbaa=!2) FPR32:%vreg55 GPR32:%vreg13
	%vreg56<def> = LDRf32 %vreg13, 4; mem:LD4[%scevgep16](tbaa=!2) FPR32:%vreg56 GPR32:%vreg13
	%vreg57<def,tied1> = FMADDrr_r32 %vreg56<tied0>, %vreg12, %vreg49<kill>, %STATUS<imp-def,dead>; FPR32:%vreg57,%vreg56,%vreg12,%vreg49
	%vreg58<def> = CMPri_r32 %vreg16, 8, %STATUS<imp-def>; GPR32:%vreg58,%vreg16
	STRf32 %vreg57<kill>, %vreg13, 4; mem:ST4[%scevgep16](tbaa=!2) FPR32:%vreg57 GPR32:%vreg13
	BCC <BB#7>, 8, %STATUS<imp-use>
	BNONE32 <BB#8>, %STATUS<imp-use>
    Successors according to CFG: BB#7(0x7c000000 / 0x80000000 = 96.88%) BB#8(0x04000000 / 0x80000000 = 3.12%)

BB#8: derived from LLVM BB %for.end60
    Predecessors according to CFG: BB#7
	%vreg20<def> = ADDrr_r32 %vreg9, %vreg1, %STATUS<imp-def,dead>; GPR32:%vreg20,%vreg9,%vreg1
	%vreg19<def> = ADDri_r32 %vreg10, 1, %STATUS<imp-def,dead>; GPR32:%vreg19,%vreg10
	%vreg59<def> = CMPrr_r32 %vreg19, %vreg33, %STATUS<imp-def>; GPR32:%vreg59,%vreg19,%vreg33
	BCC <BB#5>, 0, %STATUS<imp-use>
	BNONE32 <BB#6>, %STATUS<imp-use>
    Successors according to CFG: BB#5(0x04000000 / 0x80000000 = 3.12%) BB#6(0x7c000000 / 0x80000000 = 96.88%)

BB#9: derived from LLVM BB %for.body66
    Predecessors according to CFG: BB#5 BB#9
	%vreg21<def> = PHI %vreg6, <BB#5>, %vreg24, <BB#9>; GPR32:%vreg21,%vreg6,%vreg24
	%vreg22<def> = PHI %vreg35, <BB#5>, %vreg23, <BB#9>; GPR32:%vreg22,%vreg35,%vreg23
	%vreg62<def> = ADDrr_r32 %vreg36, %vreg22, %STATUS<imp-def,dead>; GPR32:%vreg62,%vreg36,%vreg22
	%vreg63<def> = LDRf32 %vreg62<kill>, 0; mem:LD4[%sunkaddr30](tbaa=!2) FPR32:%vreg63 GPR32:%vreg62
	%vreg24<def> = ADDri_r32 %vreg21, 4, %STATUS<imp-def,dead>; GPR32:%vreg24,%vreg21
	%vreg23<def> = ADDri_r32 %vreg22, 4, %STATUS<imp-def,dead>; GPR32:%vreg23,%vreg22
	%vreg64<def> = LDRf32 %vreg21, 0; mem:Volatile LD4[%lsr.iv24](tbaa=!2) FPR32:%vreg64 GPR32:%vreg21
	%vreg76<def> = LDRi32_r32 <fi#2>, 0; mem:LD4[FixedStack2] GPR32:%vreg76
	GID %CONFIG<imp-def>
	%CONFIG<def> = MOVTS32_core %vreg76<kill>; GPR32:%vreg76
	GIE %CONFIG<imp-def>
	%vreg65<def> = FADDrr_r32 %vreg63<kill>, %vreg64<kill>, %STATUS<imp-def,dead>; FPR32:%vreg65,%vreg63,%vreg64
	%vreg66<def> = CMPri_r32 %vreg23, 32, %STATUS<imp-def>; GPR32:%vreg66,%vreg23
	STRf32 %vreg65<kill>, %vreg21, 0; mem:Volatile ST4[%lsr.iv24](tbaa=!2) FPR32:%vreg65 GPR32:%vreg21
	BCC <BB#9>, 1, %STATUS<imp-use>
	BNONE32 <BB#10>, %STATUS<imp-use>
    Successors according to CFG: BB#10(0x04000000 / 0x80000000 = 3.12%) BB#9(0x7c000000 / 0x80000000 = 96.88%)

BB#10: derived from LLVM BB %for.end75
    Predecessors according to CFG: BB#9
	%vreg27<def> = ADDri_r32 %vreg6, 32, %STATUS<imp-def,dead>; GPR32:%vreg27,%vreg6
	%vreg26<def> = ADDri_r32 %vreg7, 32, %STATUS<imp-def,dead>; GPR32:%vreg26,%vreg7
	%vreg25<def> = ADDri_r32 %vreg8, 8, %STATUS<imp-def,dead>; GPR32:%vreg25,%vreg8
	%vreg67<def> = CMPrr_r32 %vreg25, %vreg33, %STATUS<imp-def>; GPR32:%vreg67,%vreg25,%vreg33
	BCC <BB#4>, 8, %STATUS<imp-use>
	BNONE32 <BB#11>, %STATUS<imp-use>
    Successors according to CFG: BB#4(0x7c000000 / 0x80000000 = 96.88%) BB#11(0x04000000 / 0x80000000 = 3.12%)

BB#11: derived from LLVM BB %for.end78
    Predecessors according to CFG: BB#10
	%vreg29<def> = ADDrr_r32 %vreg3, %vreg1, %STATUS<imp-def,dead>; GPR32:%vreg29,%vreg3,%vreg1
	%vreg28<def> = ADDri_r32 %vreg4, 1, %STATUS<imp-def,dead>; GPR32:%vreg28,%vreg4
	%vreg68<def> = CMPrr_r32 %vreg28, %vreg33, %STATUS<imp-def>; GPR32:%vreg68,%vreg28,%vreg33
	BCC <BB#3>, 1, %STATUS<imp-use>
	BNONE32 <BB#12>, %STATUS<imp-use>
    Successors according to CFG: BB#12(0x04000000 / 0x80000000 = 3.12%) BB#3(0x7c000000 / 0x80000000 = 96.88%)

BB#12: derived from LLVM BB %for.end81
    Predecessors according to CFG: BB#1 BB#11
	%vreg77<def> = LDRi32_r32 <fi#1>, 0; mem:LD4[FixedStack1] GPR32:%vreg77
	GID
	%CONFIG<def> = MOVTS32_core %vreg77<kill>; GPR32:%vreg77
	GIE %CONFIG<imp-use,kill>
	RTS

# End machine code for function matmac.

# *** IR Dump After Live Variable Analysis ***:
# Machine code for function matmac: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=32, align=8, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=4, align=4, at location [SP]
Function Live Ins: %R0 in %vreg30, %R1 in %vreg31, %R2 in %vreg32, %R3 in %vreg33

BB#0: 
    Live Ins: %R0 %R1 %R2 %R3
	GID %CONFIG<imp-def>
	%vreg71<def> = MOVFS32_core %CONFIG; GPR32:%vreg71
	STRi32_r32 %vreg71, <fi#1>, 0; mem:ST4[FixedStack1] GPR32:%vreg71
	%vreg72<def> = MOVi32ri 65535; GPR32:%vreg72
	%vreg73<def,tied1> = MOVTi32ri %vreg72<kill,tied0>, 65521; GPR32:%vreg73,%vreg72
	%vreg69<def> = ANDrr_r32 %vreg71, %vreg73<kill>, %STATUS<imp-def>; GPR32:%vreg69,%vreg71,%vreg73
	STRi32_r32 %vreg69<kill>, <fi#2>, 0; mem:ST4[FixedStack2] GPR32:%vreg69
	%vreg70<def,tied1> = MOVTi32ri %vreg71<kill,tied0>, 72; GPR32:%vreg70,%vreg71
	STRi32_r32 %vreg70<kill>, <fi#3>, 0; mem:ST4[FixedStack3] GPR32:%vreg70
	GIE %CONFIG<imp-use,kill>
    Successors according to CFG: BB#1(?%)

BB#1: derived from LLVM BB %entry
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#0
	%vreg33<def> = COPY %R3<kill>; GPR32:%vreg33
	%vreg32<def> = COPY %R2<kill>; GPR32:%vreg32
	%vreg31<def> = COPY %R1<kill>; GPR32:%vreg31
	%vreg30<def> = COPY %R0<kill>; GPR32:%vreg30
	%vreg34<def,dead> = CMPri_r32 %vreg33, 1, %STATUS<imp-def>; GPR32:%vreg34,%vreg33
	BCC <BB#12>, 8, %STATUS<imp-use>
	BNONE32 <BB#2>, %STATUS<imp-use>
    Successors according to CFG: BB#2(0x50000000 / 0x80000000 = 62.50%) BB#12(0x30000000 / 0x80000000 = 37.50%)

BB#2: derived from LLVM BB %for.body3.lr.ph.preheader
    Predecessors according to CFG: BB#1
	%vreg1<def> = LSL32ri %vreg33, 2, %STATUS<imp-def,dead>; GPR32:%vreg1,%vreg33
	%vreg0<def> = ADDri_r32 %vreg31<kill>, 8, %STATUS<imp-def,dead>; GPR32:%vreg0,%vreg31
	%vreg36<def> = MOViPTR <fi#0>, 0; GPR32:%vreg36
	%vreg2<def> = ADDri_r32 %vreg36, 8, %STATUS<imp-def,dead>; GPR32:%vreg2,%vreg36
	%vreg35<def> = MOVi32ri 0; GPR32:%vreg35
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %for.body3.lr.ph
    Predecessors according to CFG: BB#2 BB#11
	%vreg3<def> = PHI %vreg32, <BB#2>, %vreg29, <BB#11>; GPR32:%vreg3,%vreg32,%vreg29
	%vreg4<def> = PHI %vreg35, <BB#2>, %vreg28, <BB#11>; GPR32:%vreg4,%vreg35,%vreg28
	%vreg74<def> = LDRi32_r32 <fi#3>, 0; mem:LD4[FixedStack3] GPR32:%vreg74
	GID %CONFIG<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %vreg74<kill>; GPR32:%vreg74
	GIE %CONFIG<imp-def,dead>
	%vreg38<def> = IMULrr_r32 %vreg4, %vreg33, %STATUS<imp-def,dead>; GPR32:%vreg38,%vreg4,%vreg33
	%vreg39<def> = LSL32ri %vreg38<kill>, 2, %STATUS<imp-def,dead>; GPR32:%vreg39,%vreg38
	%vreg5<def> = ADDrr_r32 %vreg30, %vreg39<kill>, %STATUS<imp-def,dead>; GPR32:%vreg5,%vreg30,%vreg39
    Successors according to CFG: BB#4(?%)

BB#4: derived from LLVM BB %for.body9.preheader
    Predecessors according to CFG: BB#3 BB#10
	%vreg6<def> = PHI %vreg3, <BB#3>, %vreg27, <BB#10>; GPR32:%vreg6,%vreg3,%vreg27
	%vreg7<def> = PHI %vreg0, <BB#3>, %vreg26, <BB#10>; GPR32:%vreg7,%vreg0,%vreg26
	%vreg8<def> = PHI %vreg35, <BB#3>, %vreg25, <BB#10>; GPR32:%vreg8,%vreg35,%vreg25
	%vreg42<def> = REG_SEQUENCE %vreg35, isub_hi, %vreg35, isub_lo; FPR64_with_isub_hi_in_FPR32:%vreg42 GPR32:%vreg35
	STRi64 %vreg42, <fi#0>, 24; mem:ST8[%1+24] FPR64_with_isub_hi_in_FPR32:%vreg42
	STRi64 %vreg42, <fi#0>, 16; mem:ST8[%1+16] FPR64_with_isub_hi_in_FPR32:%vreg42
	STRi64 %vreg42, <fi#0>, 8; mem:ST8[%1+8] FPR64_with_isub_hi_in_FPR32:%vreg42
	STRi64 %vreg42<kill>, <fi#0>, 0; mem:ST8[%1] FPR64_with_isub_hi_in_FPR32:%vreg42
	BNONE32 <BB#6>, %STATUS<imp-use>
    Successors according to CFG: BB#6(?%)

BB#5: derived from LLVM BB %for.cond64.preheader
    Predecessors according to CFG: BB#8
	BNONE32 <BB#9>, %STATUS<imp-use>
    Successors according to CFG: BB#9(?%)

BB#6: derived from LLVM BB %for.body9
    Predecessors according to CFG: BB#4 BB#8
	%vreg9<def> = PHI %vreg7, <BB#4>, %vreg20, <BB#8>; GPR32:%vreg9,%vreg7,%vreg20
	%vreg10<def> = PHI %vreg35, <BB#4>, %vreg19, <BB#8>; GPR32:%vreg10,%vreg35,%vreg19
	%vreg44<def> = LSL32ri %vreg10, 2, %STATUS<imp-def,dead>; GPR32:%vreg44,%vreg10
	%vreg45<def> = ADDrr_r32 %vreg5, %vreg44<kill>, %STATUS<imp-def,dead>; GPR32:%vreg45,%vreg5,%vreg44
	%vreg11<def> = COPY %vreg2; GPR32:%vreg11,%vreg2
	%vreg12<def> = LDRf32 %vreg45<kill>, 0; mem:Volatile LD4[%add.ptr10](tbaa=!2) FPR32:%vreg12 GPR32:%vreg45
    Successors according to CFG: BB#7(?%)

BB#7: derived from LLVM BB %for.body13
    Predecessors according to CFG: BB#6 BB#7
	%vreg13<def> = PHI %vreg11, <BB#6>, %vreg18, <BB#7>; GPR32:%vreg13,%vreg11,%vreg18
	%vreg14<def> = PHI %vreg9, <BB#6>, %vreg17, <BB#7>; GPR32:%vreg14,%vreg9,%vreg17
	%vreg15<def> = PHI %vreg35, <BB#6>, %vreg16, <BB#7>; GPR32:%vreg15,%vreg35,%vreg16
	%vreg46<def> = LDRf32 %vreg14, -8; mem:Volatile LD4[%scevgep8](tbaa=!2) FPR32:%vreg46 GPR32:%vreg14
	%vreg18<def> = ADDri_r32 %vreg13, 16, %STATUS<imp-def,dead>; GPR32:%vreg18,%vreg13
	%vreg17<def> = ADDri_r32 %vreg14, 16, %STATUS<imp-def,dead>; GPR32:%vreg17,%vreg14
	%vreg47<def> = LDRf32 %vreg14, -4; mem:Volatile LD4[%scevgep9](tbaa=!2) FPR32:%vreg47 GPR32:%vreg14
	%vreg16<def> = ADDri_r32 %vreg15<kill>, 4, %STATUS<imp-def,dead>; GPR32:%vreg16,%vreg15
	%vreg48<def> = LDRf32 %vreg14, 0; mem:Volatile LD4[%lsr.iv5](tbaa=!2) FPR32:%vreg48 GPR32:%vreg14
	%vreg49<def> = LDRf32 %vreg14<kill>, 4; mem:Volatile LD4[%scevgep7](tbaa=!2) FPR32:%vreg49 GPR32:%vreg14
	%vreg50<def> = LDRf32 %vreg13, -8; mem:LD4[%scevgep15](tbaa=!2) FPR32:%vreg50 GPR32:%vreg13
	%vreg75<def> = LDRi32_r32 <fi#2>, 0; mem:LD4[FixedStack2] GPR32:%vreg75
	GID %CONFIG<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %vreg75<kill>; GPR32:%vreg75
	GIE %CONFIG<imp-def,dead>
	%vreg51<def,tied1> = FMADDrr_r32 %vreg50<kill,tied0>, %vreg12, %vreg46<kill>, %STATUS<imp-def,dead>; FPR32:%vreg51,%vreg50,%vreg12,%vreg46
	STRf32 %vreg51<kill>, %vreg13, -8; mem:ST4[%scevgep15](tbaa=!2) FPR32:%vreg51 GPR32:%vreg13
	%vreg52<def> = LDRf32 %vreg13, -4; mem:LD4[%scevgep17](tbaa=!2) FPR32:%vreg52 GPR32:%vreg13
	%vreg53<def,tied1> = FMADDrr_r32 %vreg52<kill,tied0>, %vreg12, %vreg47<kill>, %STATUS<imp-def,dead>; FPR32:%vreg53,%vreg52,%vreg12,%vreg47
	STRf32 %vreg53<kill>, %vreg13, -4; mem:ST4[%scevgep17](tbaa=!2) FPR32:%vreg53 GPR32:%vreg13
	%vreg54<def> = LDRf32 %vreg13, 0; mem:LD4[%lsr.iv1214](tbaa=!2) FPR32:%vreg54 GPR32:%vreg13
	%vreg55<def,tied1> = FMADDrr_r32 %vreg54<kill,tied0>, %vreg12, %vreg48<kill>, %STATUS<imp-def,dead>; FPR32:%vreg55,%vreg54,%vreg12,%vreg48
	STRf32 %vreg55<kill>, %vreg13, 0; mem:ST4[%lsr.iv1214](tbaa=!2) FPR32:%vreg55 GPR32:%vreg13
	%vreg56<def> = LDRf32 %vreg13, 4; mem:LD4[%scevgep16](tbaa=!2) FPR32:%vreg56 GPR32:%vreg13
	%vreg57<def,tied1> = FMADDrr_r32 %vreg56<kill,tied0>, %vreg12, %vreg49<kill>, %STATUS<imp-def,dead>; FPR32:%vreg57,%vreg56,%vreg12,%vreg49
	%vreg58<def,dead> = CMPri_r32 %vreg16, 8, %STATUS<imp-def>; GPR32:%vreg58,%vreg16
	STRf32 %vreg57<kill>, %vreg13<kill>, 4; mem:ST4[%scevgep16](tbaa=!2) FPR32:%vreg57 GPR32:%vreg13
	BCC <BB#7>, 8, %STATUS<imp-use>
	BNONE32 <BB#8>, %STATUS<imp-use>
    Successors according to CFG: BB#7(0x7c000000 / 0x80000000 = 96.88%) BB#8(0x04000000 / 0x80000000 = 3.12%)

BB#8: derived from LLVM BB %for.end60
    Predecessors according to CFG: BB#7
	%vreg20<def> = ADDrr_r32 %vreg9<kill>, %vreg1, %STATUS<imp-def,dead>; GPR32:%vreg20,%vreg9,%vreg1
	%vreg19<def> = ADDri_r32 %vreg10<kill>, 1, %STATUS<imp-def,dead>; GPR32:%vreg19,%vreg10
	%vreg59<def,dead> = CMPrr_r32 %vreg19, %vreg33, %STATUS<imp-def>; GPR32:%vreg59,%vreg19,%vreg33
	BCC <BB#5>, 0, %STATUS<imp-use>
	BNONE32 <BB#6>, %STATUS<imp-use>
    Successors according to CFG: BB#5(0x04000000 / 0x80000000 = 3.12%) BB#6(0x7c000000 / 0x80000000 = 96.88%)

BB#9: derived from LLVM BB %for.body66
    Predecessors according to CFG: BB#5 BB#9
	%vreg21<def> = PHI %vreg6, <BB#5>, %vreg24, <BB#9>; GPR32:%vreg21,%vreg6,%vreg24
	%vreg22<def> = PHI %vreg35, <BB#5>, %vreg23, <BB#9>; GPR32:%vreg22,%vreg35,%vreg23
	%vreg62<def> = ADDrr_r32 %vreg36, %vreg22, %STATUS<imp-def,dead>; GPR32:%vreg62,%vreg36,%vreg22
	%vreg63<def> = LDRf32 %vreg62<kill>, 0; mem:LD4[%sunkaddr30](tbaa=!2) FPR32:%vreg63 GPR32:%vreg62
	%vreg24<def> = ADDri_r32 %vreg21, 4, %STATUS<imp-def,dead>; GPR32:%vreg24,%vreg21
	%vreg23<def> = ADDri_r32 %vreg22<kill>, 4, %STATUS<imp-def,dead>; GPR32:%vreg23,%vreg22
	%vreg64<def> = LDRf32 %vreg21, 0; mem:Volatile LD4[%lsr.iv24](tbaa=!2) FPR32:%vreg64 GPR32:%vreg21
	%vreg76<def> = LDRi32_r32 <fi#2>, 0; mem:LD4[FixedStack2] GPR32:%vreg76
	GID %CONFIG<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %vreg76<kill>; GPR32:%vreg76
	GIE %CONFIG<imp-def,dead>
	%vreg65<def> = FADDrr_r32 %vreg63<kill>, %vreg64<kill>, %STATUS<imp-def,dead>; FPR32:%vreg65,%vreg63,%vreg64
	%vreg66<def,dead> = CMPri_r32 %vreg23, 32, %STATUS<imp-def>; GPR32:%vreg66,%vreg23
	STRf32 %vreg65<kill>, %vreg21<kill>, 0; mem:Volatile ST4[%lsr.iv24](tbaa=!2) FPR32:%vreg65 GPR32:%vreg21
	BCC <BB#9>, 1, %STATUS<imp-use>
	BNONE32 <BB#10>, %STATUS<imp-use>
    Successors according to CFG: BB#10(0x04000000 / 0x80000000 = 3.12%) BB#9(0x7c000000 / 0x80000000 = 96.88%)

BB#10: derived from LLVM BB %for.end75
    Predecessors according to CFG: BB#9
	%vreg27<def> = ADDri_r32 %vreg6<kill>, 32, %STATUS<imp-def,dead>; GPR32:%vreg27,%vreg6
	%vreg26<def> = ADDri_r32 %vreg7<kill>, 32, %STATUS<imp-def,dead>; GPR32:%vreg26,%vreg7
	%vreg25<def> = ADDri_r32 %vreg8<kill>, 8, %STATUS<imp-def,dead>; GPR32:%vreg25,%vreg8
	%vreg67<def,dead> = CMPrr_r32 %vreg25, %vreg33, %STATUS<imp-def>; GPR32:%vreg67,%vreg25,%vreg33
	BCC <BB#4>, 8, %STATUS<imp-use>
	BNONE32 <BB#11>, %STATUS<imp-use>
    Successors according to CFG: BB#4(0x7c000000 / 0x80000000 = 96.88%) BB#11(0x04000000 / 0x80000000 = 3.12%)

BB#11: derived from LLVM BB %for.end78
    Predecessors according to CFG: BB#10
	%vreg29<def> = ADDrr_r32 %vreg3<kill>, %vreg1, %STATUS<imp-def,dead>; GPR32:%vreg29,%vreg3,%vreg1
	%vreg28<def> = ADDri_r32 %vreg4<kill>, 1, %STATUS<imp-def,dead>; GPR32:%vreg28,%vreg4
	%vreg68<def,dead> = CMPrr_r32 %vreg28, %vreg33, %STATUS<imp-def>; GPR32:%vreg68,%vreg28,%vreg33
	BCC <BB#3>, 1, %STATUS<imp-use>
	BNONE32 <BB#12>, %STATUS<imp-use>
    Successors according to CFG: BB#12(0x04000000 / 0x80000000 = 3.12%) BB#3(0x7c000000 / 0x80000000 = 96.88%)

BB#12: derived from LLVM BB %for.end81
    Predecessors according to CFG: BB#1 BB#11
	%vreg77<def> = LDRi32_r32 <fi#1>, 0; mem:LD4[FixedStack1] GPR32:%vreg77
	GID
	%CONFIG<def> = MOVTS32_core %vreg77<kill>; GPR32:%vreg77
	GIE %CONFIG<imp-use,kill>
	RTS

# End machine code for function matmac.

# *** IR Dump Before Epiphany Load/Store Optimization Pass ***:
# Machine code for function matmac: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=32, align=8, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=4, align=4, at location [SP]
Function Live Ins: %R0 in %vreg30, %R1 in %vreg31, %R2 in %vreg32, %R3 in %vreg33

BB#0: 
    Live Ins: %R0 %R1 %R2 %R3
	GID %CONFIG<imp-def>
	%vreg71<def> = MOVFS32_core %CONFIG; GPR32:%vreg71
	STRi32_r32 %vreg71, <fi#1>, 0; mem:ST4[FixedStack1] GPR32:%vreg71
	%vreg72<def> = MOVi32ri 65535; GPR32:%vreg72
	%vreg73<def,tied1> = MOVTi32ri %vreg72<kill,tied0>, 65521; GPR32:%vreg73,%vreg72
	%vreg69<def> = ANDrr_r32 %vreg71, %vreg73<kill>, %STATUS<imp-def>; GPR32:%vreg69,%vreg71,%vreg73
	STRi32_r32 %vreg69<kill>, <fi#2>, 0; mem:ST4[FixedStack2] GPR32:%vreg69
	%vreg70<def,tied1> = MOVTi32ri %vreg71<kill,tied0>, 72; GPR32:%vreg70,%vreg71
	STRi32_r32 %vreg70<kill>, <fi#3>, 0; mem:ST4[FixedStack3] GPR32:%vreg70
	GIE %CONFIG<imp-use,kill>
    Successors according to CFG: BB#1(?%)

BB#1: derived from LLVM BB %entry
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#0
	%vreg33<def> = COPY %R3<kill>; GPR32:%vreg33
	%vreg32<def> = COPY %R2<kill>; GPR32:%vreg32
	%vreg31<def> = COPY %R1<kill>; GPR32:%vreg31
	%vreg30<def> = COPY %R0<kill>; GPR32:%vreg30
	%vreg34<def,dead> = CMPri_r32 %vreg33, 1, %STATUS<imp-def>; GPR32:%vreg34,%vreg33
	BCC <BB#12>, 8, %STATUS<imp-use>
	BNONE32 <BB#2>, %STATUS<imp-use>
    Successors according to CFG: BB#2(0x50000000 / 0x80000000 = 62.50%) BB#12(0x30000000 / 0x80000000 = 37.50%)

BB#2: derived from LLVM BB %for.body3.lr.ph.preheader
    Predecessors according to CFG: BB#1
	%vreg1<def> = LSL32ri %vreg33, 2, %STATUS<imp-def,dead>; GPR32:%vreg1,%vreg33
	%vreg0<def> = ADDri_r32 %vreg31<kill>, 8, %STATUS<imp-def,dead>; GPR32:%vreg0,%vreg31
	%vreg36<def> = MOViPTR <fi#0>, 0; GPR32:%vreg36
	%vreg2<def> = ADDri_r32 %vreg36, 8, %STATUS<imp-def,dead>; GPR32:%vreg2,%vreg36
	%vreg35<def> = MOVi32ri 0; GPR32:%vreg35
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %for.body3.lr.ph
    Predecessors according to CFG: BB#2 BB#11
	%vreg3<def> = PHI %vreg32, <BB#2>, %vreg29, <BB#11>; GPR32:%vreg3,%vreg32,%vreg29
	%vreg4<def> = PHI %vreg35, <BB#2>, %vreg28, <BB#11>; GPR32:%vreg4,%vreg35,%vreg28
	%vreg74<def> = LDRi32_r32 <fi#3>, 0; mem:LD4[FixedStack3] GPR32:%vreg74
	GID %CONFIG<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %vreg74<kill>; GPR32:%vreg74
	GIE %CONFIG<imp-def,dead>
	%vreg38<def> = IMULrr_r32 %vreg4, %vreg33, %STATUS<imp-def,dead>; GPR32:%vreg38,%vreg4,%vreg33
	%vreg39<def> = LSL32ri %vreg38<kill>, 2, %STATUS<imp-def,dead>; GPR32:%vreg39,%vreg38
	%vreg5<def> = ADDrr_r32 %vreg30, %vreg39<kill>, %STATUS<imp-def,dead>; GPR32:%vreg5,%vreg30,%vreg39
    Successors according to CFG: BB#4(?%)

BB#4: derived from LLVM BB %for.body9.preheader
    Predecessors according to CFG: BB#3 BB#10
	%vreg6<def> = PHI %vreg3, <BB#3>, %vreg27, <BB#10>; GPR32:%vreg6,%vreg3,%vreg27
	%vreg7<def> = PHI %vreg0, <BB#3>, %vreg26, <BB#10>; GPR32:%vreg7,%vreg0,%vreg26
	%vreg8<def> = PHI %vreg35, <BB#3>, %vreg25, <BB#10>; GPR32:%vreg8,%vreg35,%vreg25
	%vreg42<def> = REG_SEQUENCE %vreg35, isub_hi, %vreg35, isub_lo; FPR64_with_isub_hi_in_FPR32:%vreg42 GPR32:%vreg35
	STRi64 %vreg42, <fi#0>, 24; mem:ST8[%1+24] FPR64_with_isub_hi_in_FPR32:%vreg42
	STRi64 %vreg42, <fi#0>, 16; mem:ST8[%1+16] FPR64_with_isub_hi_in_FPR32:%vreg42
	STRi64 %vreg42, <fi#0>, 8; mem:ST8[%1+8] FPR64_with_isub_hi_in_FPR32:%vreg42
	STRi64 %vreg42<kill>, <fi#0>, 0; mem:ST8[%1] FPR64_with_isub_hi_in_FPR32:%vreg42
	BNONE32 <BB#6>, %STATUS<imp-use>
    Successors according to CFG: BB#6(?%)

BB#5: derived from LLVM BB %for.cond64.preheader
    Predecessors according to CFG: BB#8
	BNONE32 <BB#9>, %STATUS<imp-use>
    Successors according to CFG: BB#9(?%)

BB#6: derived from LLVM BB %for.body9
    Predecessors according to CFG: BB#4 BB#8
	%vreg9<def> = PHI %vreg7, <BB#4>, %vreg20, <BB#8>; GPR32:%vreg9,%vreg7,%vreg20
	%vreg10<def> = PHI %vreg35, <BB#4>, %vreg19, <BB#8>; GPR32:%vreg10,%vreg35,%vreg19
	%vreg44<def> = LSL32ri %vreg10, 2, %STATUS<imp-def,dead>; GPR32:%vreg44,%vreg10
	%vreg45<def> = ADDrr_r32 %vreg5, %vreg44<kill>, %STATUS<imp-def,dead>; GPR32:%vreg45,%vreg5,%vreg44
	%vreg11<def> = COPY %vreg2; GPR32:%vreg11,%vreg2
	%vreg12<def> = LDRf32 %vreg45<kill>, 0; mem:Volatile LD4[%add.ptr10](tbaa=!2) FPR32:%vreg12 GPR32:%vreg45
    Successors according to CFG: BB#7(?%)

BB#7: derived from LLVM BB %for.body13
    Predecessors according to CFG: BB#6 BB#7
	%vreg13<def> = PHI %vreg11, <BB#6>, %vreg18, <BB#7>; GPR32:%vreg13,%vreg11,%vreg18
	%vreg14<def> = PHI %vreg9, <BB#6>, %vreg17, <BB#7>; GPR32:%vreg14,%vreg9,%vreg17
	%vreg15<def> = PHI %vreg35, <BB#6>, %vreg16, <BB#7>; GPR32:%vreg15,%vreg35,%vreg16
	%vreg46<def> = LDRf32 %vreg14, -8; mem:Volatile LD4[%scevgep8](tbaa=!2) FPR32:%vreg46 GPR32:%vreg14
	%vreg18<def> = ADDri_r32 %vreg13, 16, %STATUS<imp-def,dead>; GPR32:%vreg18,%vreg13
	%vreg17<def> = ADDri_r32 %vreg14, 16, %STATUS<imp-def,dead>; GPR32:%vreg17,%vreg14
	%vreg47<def> = LDRf32 %vreg14, -4; mem:Volatile LD4[%scevgep9](tbaa=!2) FPR32:%vreg47 GPR32:%vreg14
	%vreg16<def> = ADDri_r32 %vreg15<kill>, 4, %STATUS<imp-def,dead>; GPR32:%vreg16,%vreg15
	%vreg48<def> = LDRf32 %vreg14, 0; mem:Volatile LD4[%lsr.iv5](tbaa=!2) FPR32:%vreg48 GPR32:%vreg14
	%vreg49<def> = LDRf32 %vreg14<kill>, 4; mem:Volatile LD4[%scevgep7](tbaa=!2) FPR32:%vreg49 GPR32:%vreg14
	%vreg50<def> = LDRf32 %vreg13, -8; mem:LD4[%scevgep15](tbaa=!2) FPR32:%vreg50 GPR32:%vreg13
	%vreg75<def> = LDRi32_r32 <fi#2>, 0; mem:LD4[FixedStack2] GPR32:%vreg75
	GID %CONFIG<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %vreg75<kill>; GPR32:%vreg75
	GIE %CONFIG<imp-def,dead>
	%vreg51<def,tied1> = FMADDrr_r32 %vreg50<kill,tied0>, %vreg12, %vreg46<kill>, %STATUS<imp-def,dead>; FPR32:%vreg51,%vreg50,%vreg12,%vreg46
	STRf32 %vreg51<kill>, %vreg13, -8; mem:ST4[%scevgep15](tbaa=!2) FPR32:%vreg51 GPR32:%vreg13
	%vreg52<def> = LDRf32 %vreg13, -4; mem:LD4[%scevgep17](tbaa=!2) FPR32:%vreg52 GPR32:%vreg13
	%vreg53<def,tied1> = FMADDrr_r32 %vreg52<kill,tied0>, %vreg12, %vreg47<kill>, %STATUS<imp-def,dead>; FPR32:%vreg53,%vreg52,%vreg12,%vreg47
	STRf32 %vreg53<kill>, %vreg13, -4; mem:ST4[%scevgep17](tbaa=!2) FPR32:%vreg53 GPR32:%vreg13
	%vreg54<def> = LDRf32 %vreg13, 0; mem:LD4[%lsr.iv1214](tbaa=!2) FPR32:%vreg54 GPR32:%vreg13
	%vreg55<def,tied1> = FMADDrr_r32 %vreg54<kill,tied0>, %vreg12, %vreg48<kill>, %STATUS<imp-def,dead>; FPR32:%vreg55,%vreg54,%vreg12,%vreg48
	STRf32 %vreg55<kill>, %vreg13, 0; mem:ST4[%lsr.iv1214](tbaa=!2) FPR32:%vreg55 GPR32:%vreg13
	%vreg56<def> = LDRf32 %vreg13, 4; mem:LD4[%scevgep16](tbaa=!2) FPR32:%vreg56 GPR32:%vreg13
	%vreg57<def,tied1> = FMADDrr_r32 %vreg56<kill,tied0>, %vreg12, %vreg49<kill>, %STATUS<imp-def,dead>; FPR32:%vreg57,%vreg56,%vreg12,%vreg49
	%vreg58<def,dead> = CMPri_r32 %vreg16, 8, %STATUS<imp-def>; GPR32:%vreg58,%vreg16
	STRf32 %vreg57<kill>, %vreg13<kill>, 4; mem:ST4[%scevgep16](tbaa=!2) FPR32:%vreg57 GPR32:%vreg13
	BCC <BB#7>, 8, %STATUS<imp-use>
	BNONE32 <BB#8>, %STATUS<imp-use>
    Successors according to CFG: BB#7(0x7c000000 / 0x80000000 = 96.88%) BB#8(0x04000000 / 0x80000000 = 3.12%)

BB#8: derived from LLVM BB %for.end60
    Predecessors according to CFG: BB#7
	%vreg20<def> = ADDrr_r32 %vreg9<kill>, %vreg1, %STATUS<imp-def,dead>; GPR32:%vreg20,%vreg9,%vreg1
	%vreg19<def> = ADDri_r32 %vreg10<kill>, 1, %STATUS<imp-def,dead>; GPR32:%vreg19,%vreg10
	%vreg59<def,dead> = CMPrr_r32 %vreg19, %vreg33, %STATUS<imp-def>; GPR32:%vreg59,%vreg19,%vreg33
	BCC <BB#5>, 0, %STATUS<imp-use>
	BNONE32 <BB#6>, %STATUS<imp-use>
    Successors according to CFG: BB#5(0x04000000 / 0x80000000 = 3.12%) BB#6(0x7c000000 / 0x80000000 = 96.88%)

BB#9: derived from LLVM BB %for.body66
    Predecessors according to CFG: BB#5 BB#9
	%vreg21<def> = PHI %vreg6, <BB#5>, %vreg24, <BB#9>; GPR32:%vreg21,%vreg6,%vreg24
	%vreg22<def> = PHI %vreg35, <BB#5>, %vreg23, <BB#9>; GPR32:%vreg22,%vreg35,%vreg23
	%vreg62<def> = ADDrr_r32 %vreg36, %vreg22, %STATUS<imp-def,dead>; GPR32:%vreg62,%vreg36,%vreg22
	%vreg63<def> = LDRf32 %vreg62<kill>, 0; mem:LD4[%sunkaddr30](tbaa=!2) FPR32:%vreg63 GPR32:%vreg62
	%vreg24<def> = ADDri_r32 %vreg21, 4, %STATUS<imp-def,dead>; GPR32:%vreg24,%vreg21
	%vreg23<def> = ADDri_r32 %vreg22<kill>, 4, %STATUS<imp-def,dead>; GPR32:%vreg23,%vreg22
	%vreg64<def> = LDRf32 %vreg21, 0; mem:Volatile LD4[%lsr.iv24](tbaa=!2) FPR32:%vreg64 GPR32:%vreg21
	%vreg76<def> = LDRi32_r32 <fi#2>, 0; mem:LD4[FixedStack2] GPR32:%vreg76
	GID %CONFIG<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %vreg76<kill>; GPR32:%vreg76
	GIE %CONFIG<imp-def,dead>
	%vreg65<def> = FADDrr_r32 %vreg63<kill>, %vreg64<kill>, %STATUS<imp-def,dead>; FPR32:%vreg65,%vreg63,%vreg64
	%vreg66<def,dead> = CMPri_r32 %vreg23, 32, %STATUS<imp-def>; GPR32:%vreg66,%vreg23
	STRf32 %vreg65<kill>, %vreg21<kill>, 0; mem:Volatile ST4[%lsr.iv24](tbaa=!2) FPR32:%vreg65 GPR32:%vreg21
	BCC <BB#9>, 1, %STATUS<imp-use>
	BNONE32 <BB#10>, %STATUS<imp-use>
    Successors according to CFG: BB#10(0x04000000 / 0x80000000 = 3.12%) BB#9(0x7c000000 / 0x80000000 = 96.88%)

BB#10: derived from LLVM BB %for.end75
    Predecessors according to CFG: BB#9
	%vreg27<def> = ADDri_r32 %vreg6<kill>, 32, %STATUS<imp-def,dead>; GPR32:%vreg27,%vreg6
	%vreg26<def> = ADDri_r32 %vreg7<kill>, 32, %STATUS<imp-def,dead>; GPR32:%vreg26,%vreg7
	%vreg25<def> = ADDri_r32 %vreg8<kill>, 8, %STATUS<imp-def,dead>; GPR32:%vreg25,%vreg8
	%vreg67<def,dead> = CMPrr_r32 %vreg25, %vreg33, %STATUS<imp-def>; GPR32:%vreg67,%vreg25,%vreg33
	BCC <BB#4>, 8, %STATUS<imp-use>
	BNONE32 <BB#11>, %STATUS<imp-use>
    Successors according to CFG: BB#4(0x7c000000 / 0x80000000 = 96.88%) BB#11(0x04000000 / 0x80000000 = 3.12%)

BB#11: derived from LLVM BB %for.end78
    Predecessors according to CFG: BB#10
	%vreg29<def> = ADDrr_r32 %vreg3<kill>, %vreg1, %STATUS<imp-def,dead>; GPR32:%vreg29,%vreg3,%vreg1
	%vreg28<def> = ADDri_r32 %vreg4<kill>, 1, %STATUS<imp-def,dead>; GPR32:%vreg28,%vreg4
	%vreg68<def,dead> = CMPrr_r32 %vreg28, %vreg33, %STATUS<imp-def>; GPR32:%vreg68,%vreg28,%vreg33
	BCC <BB#3>, 1, %STATUS<imp-use>
	BNONE32 <BB#12>, %STATUS<imp-use>
    Successors according to CFG: BB#12(0x04000000 / 0x80000000 = 3.12%) BB#3(0x7c000000 / 0x80000000 = 96.88%)

BB#12: derived from LLVM BB %for.end81
    Predecessors according to CFG: BB#1 BB#11
	%vreg77<def> = LDRi32_r32 <fi#1>, 0; mem:LD4[FixedStack1] GPR32:%vreg77
	GID
	%CONFIG<def> = MOVTS32_core %vreg77<kill>; GPR32:%vreg77
	GIE %CONFIG<imp-use,kill>
	RTS

# End machine code for function matmac.


Running Epiphany Load/Store Optimization Pass

Trying to pair instruction: STRi32_r32 %vreg71, <fi#1>, 0; mem:ST4[FixedStack1] GPR32:%vreg71
Checking instruction   STRi32_r32 %vreg69<kill>, <fi#2>, 0; mem:ST4[FixedStack2] GPR32:%vreg69
Can't merge as frame idx is already paired
Unable to find matching instruction

Trying to pair instruction: STRi32_r32 %vreg69<kill>, <fi#2>, 0; mem:ST4[FixedStack2] GPR32:%vreg69
Checking instruction   STRi32_r32 %vreg70<kill>, <fi#3>, 0; mem:ST4[FixedStack3] GPR32:%vreg70
Proposed paired reg was modified, will try to merge forward
Creating pair load/store. Replacing instructions:
    STRi32_r32 %vreg69<kill>, <fi#2>, 0; mem:ST4[FixedStack2] GPR32:%vreg69
    STRi32_r32 %vreg70<kill>, <fi#3>, 0; mem:ST4[FixedStack3] GPR32:%vreg70
  with instruction:
    STRi64 %vreg78, <fi#3>, 0; mem:ST4[FixedStack3] ST4[FixedStack2] GPR64:%vreg78


Trying to pair instruction: %vreg74<def> = LDRi32_r32 <fi#3>, 0; mem:LD4[FixedStack3] GPR32:%vreg74
Unable to find matching instruction

Trying to pair instruction: %vreg12<def> = LDRf32 %vreg45<kill>, 0; mem:Volatile LD4[%add.ptr10](tbaa=!2) FPR32:%vreg12 GPR32:%vreg45
Volatile load/store, skipping
Not a candidate for merging

Trying to pair instruction: %vreg46<def> = LDRf32 %vreg14, -8; mem:Volatile LD4[%scevgep8](tbaa=!2) FPR32:%vreg46 GPR32:%vreg14
Volatile load/store, skipping
Not a candidate for merging

Trying to pair instruction: %vreg47<def> = LDRf32 %vreg14, -4; mem:Volatile LD4[%scevgep9](tbaa=!2) FPR32:%vreg47 GPR32:%vreg14
Volatile load/store, skipping
Not a candidate for merging

Trying to pair instruction: %vreg48<def> = LDRf32 %vreg14, 0; mem:Volatile LD4[%lsr.iv5](tbaa=!2) FPR32:%vreg48 GPR32:%vreg14
Volatile load/store, skipping
Not a candidate for merging

Trying to pair instruction: %vreg49<def> = LDRf32 %vreg14<kill>, 4; mem:Volatile LD4[%scevgep7](tbaa=!2) FPR32:%vreg49 GPR32:%vreg14
Volatile load/store, skipping
Not a candidate for merging

Trying to pair instruction: %vreg50<def> = LDRf32 %vreg13, -8; mem:LD4[%scevgep15](tbaa=!2) FPR32:%vreg50 GPR32:%vreg13
Checking instruction   %vreg52<def> = LDRf32 %vreg13, -4; mem:LD4[%scevgep17](tbaa=!2) FPR32:%vreg52 GPR32:%vreg13
Creating pair load/store. Replacing instructions:
    %vreg50<def> = LDRf32 %vreg13, -8; mem:LD4[%scevgep15](tbaa=!2) FPR32:%vreg50 GPR32:%vreg13
    %vreg52<def> = LDRf32 %vreg13, -4; mem:LD4[%scevgep17](tbaa=!2) FPR32:%vreg52 GPR32:%vreg13
  with instruction:
    %vreg79<def> = LDRf64 %vreg13, -8; mem:LD4[%scevgep17](tbaa=!2) LD4[%scevgep15](tbaa=!2) FPR64:%vreg79 GPR32:%vreg13


Trying to pair instruction: %vreg75<def> = LDRi32_r32 <fi#2>, 0; mem:LD4[FixedStack2] GPR32:%vreg75
Unable to find matching instruction

Trying to pair instruction: STRf32 %vreg51<kill>, %vreg13, -8; mem:ST4[%scevgep15](tbaa=!2) FPR32:%vreg51 GPR32:%vreg13
Checking instruction   STRf32 %vreg53<kill>, %vreg13, -4; mem:ST4[%scevgep17](tbaa=!2) FPR32:%vreg53 GPR32:%vreg13
Proposed paired reg was modified, will try to merge forward
Creating pair load/store. Replacing instructions:
    STRf32 %vreg51<kill>, %vreg13, -8; mem:ST4[%scevgep15](tbaa=!2) FPR32:%vreg51 GPR32:%vreg13
    STRf32 %vreg53<kill>, %vreg13, -4; mem:ST4[%scevgep17](tbaa=!2) FPR32:%vreg53 GPR32:%vreg13
  with instruction:
    STRf64 %vreg80, %vreg13, -8; mem:ST4[%scevgep17](tbaa=!2) ST4[%scevgep15](tbaa=!2) FPR64:%vreg80 GPR32:%vreg13


Trying to pair instruction: %vreg54<def> = LDRf32 %vreg13, 0; mem:LD4[%lsr.iv1214](tbaa=!2) FPR32:%vreg54 GPR32:%vreg13
Checking instruction   %vreg56<def> = LDRf32 %vreg13, 4; mem:LD4[%scevgep16](tbaa=!2) FPR32:%vreg56 GPR32:%vreg13
Can't merge as frame idx is already paired
Unable to find matching instruction

Trying to pair instruction: STRf32 %vreg55<kill>, %vreg13, 0; mem:ST4[%lsr.iv1214](tbaa=!2) FPR32:%vreg55 GPR32:%vreg13
Checking instruction   STRf32 %vreg57<kill>, %vreg13<kill>, 4; mem:ST4[%scevgep16](tbaa=!2) FPR32:%vreg57 GPR32:%vreg13
Can't merge as frame idx is already paired
Unable to find matching instruction

Trying to pair instruction: %vreg56<def> = LDRf32 %vreg13, 4; mem:LD4[%scevgep16](tbaa=!2) FPR32:%vreg56 GPR32:%vreg13
Unable to find matching instruction

Trying to pair instruction: STRf32 %vreg57<kill>, %vreg13<kill>, 4; mem:ST4[%scevgep16](tbaa=!2) FPR32:%vreg57 GPR32:%vreg13
Unable to find matching instruction

Trying to pair instruction: %vreg63<def> = LDRf32 %vreg62<kill>, 0; mem:LD4[%sunkaddr30](tbaa=!2) FPR32:%vreg63 GPR32:%vreg62
Unable to find matching instruction

Trying to pair instruction: %vreg64<def> = LDRf32 %vreg21, 0; mem:Volatile LD4[%lsr.iv24](tbaa=!2) FPR32:%vreg64 GPR32:%vreg21
Volatile load/store, skipping
Not a candidate for merging

Trying to pair instruction: %vreg76<def> = LDRi32_r32 <fi#2>, 0; mem:LD4[FixedStack2] GPR32:%vreg76
Unable to find matching instruction

Trying to pair instruction: STRf32 %vreg65<kill>, %vreg21<kill>, 0; mem:Volatile ST4[%lsr.iv24](tbaa=!2) FPR32:%vreg65 GPR32:%vreg21
Volatile load/store, skipping
Not a candidate for merging

Trying to pair instruction: %vreg77<def> = LDRi32_r32 <fi#1>, 0; mem:LD4[FixedStack1] GPR32:%vreg77
Unable to find matching instruction
# *** IR Dump After Epiphany Load/Store Optimization Pass ***:
# Machine code for function matmac: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=32, align=8, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=4, align=8, at location [SP]
Function Live Ins: %R0 in %vreg30, %R1 in %vreg31, %R2 in %vreg32, %R3 in %vreg33

BB#0: 
    Live Ins: %R0 %R1 %R2 %R3
	GID %CONFIG<imp-def>
	%vreg71<def> = MOVFS32_core %CONFIG; GPR32:%vreg71
	STRi32_r32 %vreg71, <fi#1>, 0; mem:ST4[FixedStack1] GPR32:%vreg71
	%vreg72<def> = MOVi32ri 65535; GPR32:%vreg72
	%vreg73<def,tied1> = MOVTi32ri %vreg72<kill,tied0>, 65521; GPR32:%vreg73,%vreg72
	%vreg69<def> = ANDrr_r32 %vreg71, %vreg73<kill>, %STATUS<imp-def>; GPR32:%vreg69,%vreg71,%vreg73
	%vreg70<def,tied1> = MOVTi32ri %vreg71<kill,tied0>, 72; GPR32:%vreg70,%vreg71
	%vreg78<def> = REG_SEQUENCE %vreg69, isub_lo, %vreg70, isub_hi; GPR64:%vreg78 GPR32:%vreg69,%vreg70
	STRi64 %vreg78, <fi#3>, 0; mem:ST4[FixedStack3] ST4[FixedStack2] GPR64:%vreg78
	GIE %CONFIG<imp-use,kill>
    Successors according to CFG: BB#1(?%)

BB#1: derived from LLVM BB %entry
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#0
	%vreg33<def> = COPY %R3<kill>; GPR32:%vreg33
	%vreg32<def> = COPY %R2<kill>; GPR32:%vreg32
	%vreg31<def> = COPY %R1<kill>; GPR32:%vreg31
	%vreg30<def> = COPY %R0<kill>; GPR32:%vreg30
	%vreg34<def,dead> = CMPri_r32 %vreg33, 1, %STATUS<imp-def>; GPR32:%vreg34,%vreg33
	BCC <BB#12>, 8, %STATUS<imp-use>
	BNONE32 <BB#2>, %STATUS<imp-use>
    Successors according to CFG: BB#2(0x50000000 / 0x80000000 = 62.50%) BB#12(0x30000000 / 0x80000000 = 37.50%)

BB#2: derived from LLVM BB %for.body3.lr.ph.preheader
    Predecessors according to CFG: BB#1
	%vreg1<def> = LSL32ri %vreg33, 2, %STATUS<imp-def,dead>; GPR32:%vreg1,%vreg33
	%vreg0<def> = ADDri_r32 %vreg31<kill>, 8, %STATUS<imp-def,dead>; GPR32:%vreg0,%vreg31
	%vreg36<def> = MOViPTR <fi#0>, 0; GPR32:%vreg36
	%vreg2<def> = ADDri_r32 %vreg36, 8, %STATUS<imp-def,dead>; GPR32:%vreg2,%vreg36
	%vreg35<def> = MOVi32ri 0; GPR32:%vreg35
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %for.body3.lr.ph
    Predecessors according to CFG: BB#2 BB#11
	%vreg3<def> = PHI %vreg32, <BB#2>, %vreg29, <BB#11>; GPR32:%vreg3,%vreg32,%vreg29
	%vreg4<def> = PHI %vreg35, <BB#2>, %vreg28, <BB#11>; GPR32:%vreg4,%vreg35,%vreg28
	%vreg74<def> = LDRi32_r32 <fi#3>, 0; mem:LD4[FixedStack3] GPR32:%vreg74
	GID %CONFIG<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %vreg74<kill>; GPR32:%vreg74
	GIE %CONFIG<imp-def,dead>
	%vreg38<def> = IMULrr_r32 %vreg4, %vreg33, %STATUS<imp-def,dead>; GPR32:%vreg38,%vreg4,%vreg33
	%vreg39<def> = LSL32ri %vreg38<kill>, 2, %STATUS<imp-def,dead>; GPR32:%vreg39,%vreg38
	%vreg5<def> = ADDrr_r32 %vreg30, %vreg39<kill>, %STATUS<imp-def,dead>; GPR32:%vreg5,%vreg30,%vreg39
    Successors according to CFG: BB#4(?%)

BB#4: derived from LLVM BB %for.body9.preheader
    Predecessors according to CFG: BB#3 BB#10
	%vreg6<def> = PHI %vreg3, <BB#3>, %vreg27, <BB#10>; GPR32:%vreg6,%vreg3,%vreg27
	%vreg7<def> = PHI %vreg0, <BB#3>, %vreg26, <BB#10>; GPR32:%vreg7,%vreg0,%vreg26
	%vreg8<def> = PHI %vreg35, <BB#3>, %vreg25, <BB#10>; GPR32:%vreg8,%vreg35,%vreg25
	%vreg42<def> = REG_SEQUENCE %vreg35, isub_hi, %vreg35, isub_lo; FPR64_with_isub_hi_in_FPR32:%vreg42 GPR32:%vreg35
	STRi64 %vreg42, <fi#0>, 24; mem:ST8[%1+24] FPR64_with_isub_hi_in_FPR32:%vreg42
	STRi64 %vreg42, <fi#0>, 16; mem:ST8[%1+16] FPR64_with_isub_hi_in_FPR32:%vreg42
	STRi64 %vreg42, <fi#0>, 8; mem:ST8[%1+8] FPR64_with_isub_hi_in_FPR32:%vreg42
	STRi64 %vreg42<kill>, <fi#0>, 0; mem:ST8[%1] FPR64_with_isub_hi_in_FPR32:%vreg42
	BNONE32 <BB#6>, %STATUS<imp-use>
    Successors according to CFG: BB#6(?%)

BB#5: derived from LLVM BB %for.cond64.preheader
    Predecessors according to CFG: BB#8
	BNONE32 <BB#9>, %STATUS<imp-use>
    Successors according to CFG: BB#9(?%)

BB#6: derived from LLVM BB %for.body9
    Predecessors according to CFG: BB#4 BB#8
	%vreg9<def> = PHI %vreg7, <BB#4>, %vreg20, <BB#8>; GPR32:%vreg9,%vreg7,%vreg20
	%vreg10<def> = PHI %vreg35, <BB#4>, %vreg19, <BB#8>; GPR32:%vreg10,%vreg35,%vreg19
	%vreg44<def> = LSL32ri %vreg10, 2, %STATUS<imp-def,dead>; GPR32:%vreg44,%vreg10
	%vreg45<def> = ADDrr_r32 %vreg5, %vreg44<kill>, %STATUS<imp-def,dead>; GPR32:%vreg45,%vreg5,%vreg44
	%vreg11<def> = COPY %vreg2; GPR32:%vreg11,%vreg2
	%vreg12<def> = LDRf32 %vreg45<kill>, 0; mem:Volatile LD4[%add.ptr10](tbaa=!2) FPR32:%vreg12 GPR32:%vreg45
    Successors according to CFG: BB#7(?%)

BB#7: derived from LLVM BB %for.body13
    Predecessors according to CFG: BB#6 BB#7
	%vreg13<def> = PHI %vreg11, <BB#6>, %vreg18, <BB#7>; GPR32:%vreg13,%vreg11,%vreg18
	%vreg14<def> = PHI %vreg9, <BB#6>, %vreg17, <BB#7>; GPR32:%vreg14,%vreg9,%vreg17
	%vreg15<def> = PHI %vreg35, <BB#6>, %vreg16, <BB#7>; GPR32:%vreg15,%vreg35,%vreg16
	%vreg46<def> = LDRf32 %vreg14, -8; mem:Volatile LD4[%scevgep8](tbaa=!2) FPR32:%vreg46 GPR32:%vreg14
	%vreg18<def> = ADDri_r32 %vreg13, 16, %STATUS<imp-def,dead>; GPR32:%vreg18,%vreg13
	%vreg17<def> = ADDri_r32 %vreg14, 16, %STATUS<imp-def,dead>; GPR32:%vreg17,%vreg14
	%vreg47<def> = LDRf32 %vreg14, -4; mem:Volatile LD4[%scevgep9](tbaa=!2) FPR32:%vreg47 GPR32:%vreg14
	%vreg16<def> = ADDri_r32 %vreg15<kill>, 4, %STATUS<imp-def,dead>; GPR32:%vreg16,%vreg15
	%vreg48<def> = LDRf32 %vreg14, 0; mem:Volatile LD4[%lsr.iv5](tbaa=!2) FPR32:%vreg48 GPR32:%vreg14
	%vreg49<def> = LDRf32 %vreg14<kill>, 4; mem:Volatile LD4[%scevgep7](tbaa=!2) FPR32:%vreg49 GPR32:%vreg14
	%vreg79<def> = LDRf64 %vreg13, -8; mem:LD4[%scevgep17](tbaa=!2) LD4[%scevgep15](tbaa=!2) FPR64:%vreg79 GPR32:%vreg13
	%vreg50<def> = COPY %vreg79:isub_hi; FPR32:%vreg50 FPR64:%vreg79
	%vreg52<def> = COPY %vreg79:isub_lo; FPR32:%vreg52 FPR64:%vreg79
	%vreg75<def> = LDRi32_r32 <fi#2>, 0; mem:LD4[FixedStack2] GPR32:%vreg75
	GID %CONFIG<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %vreg75<kill>; GPR32:%vreg75
	GIE %CONFIG<imp-def,dead>
	%vreg51<def,tied1> = FMADDrr_r32 %vreg50<kill,tied0>, %vreg12, %vreg46<kill>, %STATUS<imp-def,dead>; FPR32:%vreg51,%vreg50,%vreg12,%vreg46
	%vreg53<def,tied1> = FMADDrr_r32 %vreg52<kill,tied0>, %vreg12, %vreg47<kill>, %STATUS<imp-def,dead>; FPR32:%vreg53,%vreg52,%vreg12,%vreg47
	%vreg80<def> = REG_SEQUENCE %vreg51, isub_lo, %vreg53, isub_hi; FPR64:%vreg80 FPR32:%vreg51,%vreg53
	STRf64 %vreg80, %vreg13, -8; mem:ST4[%scevgep17](tbaa=!2) ST4[%scevgep15](tbaa=!2) FPR64:%vreg80 GPR32:%vreg13
	%vreg54<def> = LDRf32 %vreg13, 0; mem:LD4[%lsr.iv1214](tbaa=!2) FPR32:%vreg54 GPR32:%vreg13
	%vreg55<def,tied1> = FMADDrr_r32 %vreg54<kill,tied0>, %vreg12, %vreg48<kill>, %STATUS<imp-def,dead>; FPR32:%vreg55,%vreg54,%vreg12,%vreg48
	STRf32 %vreg55<kill>, %vreg13, 0; mem:ST4[%lsr.iv1214](tbaa=!2) FPR32:%vreg55 GPR32:%vreg13
	%vreg56<def> = LDRf32 %vreg13, 4; mem:LD4[%scevgep16](tbaa=!2) FPR32:%vreg56 GPR32:%vreg13
	%vreg57<def,tied1> = FMADDrr_r32 %vreg56<kill,tied0>, %vreg12, %vreg49<kill>, %STATUS<imp-def,dead>; FPR32:%vreg57,%vreg56,%vreg12,%vreg49
	%vreg58<def,dead> = CMPri_r32 %vreg16, 8, %STATUS<imp-def>; GPR32:%vreg58,%vreg16
	STRf32 %vreg57<kill>, %vreg13<kill>, 4; mem:ST4[%scevgep16](tbaa=!2) FPR32:%vreg57 GPR32:%vreg13
	BCC <BB#7>, 8, %STATUS<imp-use>
	BNONE32 <BB#8>, %STATUS<imp-use>
    Successors according to CFG: BB#7(0x7c000000 / 0x80000000 = 96.88%) BB#8(0x04000000 / 0x80000000 = 3.12%)

BB#8: derived from LLVM BB %for.end60
    Predecessors according to CFG: BB#7
	%vreg20<def> = ADDrr_r32 %vreg9<kill>, %vreg1, %STATUS<imp-def,dead>; GPR32:%vreg20,%vreg9,%vreg1
	%vreg19<def> = ADDri_r32 %vreg10<kill>, 1, %STATUS<imp-def,dead>; GPR32:%vreg19,%vreg10
	%vreg59<def,dead> = CMPrr_r32 %vreg19, %vreg33, %STATUS<imp-def>; GPR32:%vreg59,%vreg19,%vreg33
	BCC <BB#5>, 0, %STATUS<imp-use>
	BNONE32 <BB#6>, %STATUS<imp-use>
    Successors according to CFG: BB#5(0x04000000 / 0x80000000 = 3.12%) BB#6(0x7c000000 / 0x80000000 = 96.88%)

BB#9: derived from LLVM BB %for.body66
    Predecessors according to CFG: BB#5 BB#9
	%vreg21<def> = PHI %vreg6, <BB#5>, %vreg24, <BB#9>; GPR32:%vreg21,%vreg6,%vreg24
	%vreg22<def> = PHI %vreg35, <BB#5>, %vreg23, <BB#9>; GPR32:%vreg22,%vreg35,%vreg23
	%vreg62<def> = ADDrr_r32 %vreg36, %vreg22, %STATUS<imp-def,dead>; GPR32:%vreg62,%vreg36,%vreg22
	%vreg63<def> = LDRf32 %vreg62<kill>, 0; mem:LD4[%sunkaddr30](tbaa=!2) FPR32:%vreg63 GPR32:%vreg62
	%vreg24<def> = ADDri_r32 %vreg21, 4, %STATUS<imp-def,dead>; GPR32:%vreg24,%vreg21
	%vreg23<def> = ADDri_r32 %vreg22<kill>, 4, %STATUS<imp-def,dead>; GPR32:%vreg23,%vreg22
	%vreg64<def> = LDRf32 %vreg21, 0; mem:Volatile LD4[%lsr.iv24](tbaa=!2) FPR32:%vreg64 GPR32:%vreg21
	%vreg76<def> = LDRi32_r32 <fi#2>, 0; mem:LD4[FixedStack2] GPR32:%vreg76
	GID %CONFIG<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %vreg76<kill>; GPR32:%vreg76
	GIE %CONFIG<imp-def,dead>
	%vreg65<def> = FADDrr_r32 %vreg63<kill>, %vreg64<kill>, %STATUS<imp-def,dead>; FPR32:%vreg65,%vreg63,%vreg64
	%vreg66<def,dead> = CMPri_r32 %vreg23, 32, %STATUS<imp-def>; GPR32:%vreg66,%vreg23
	STRf32 %vreg65<kill>, %vreg21<kill>, 0; mem:Volatile ST4[%lsr.iv24](tbaa=!2) FPR32:%vreg65 GPR32:%vreg21
	BCC <BB#9>, 1, %STATUS<imp-use>
	BNONE32 <BB#10>, %STATUS<imp-use>
    Successors according to CFG: BB#10(0x04000000 / 0x80000000 = 3.12%) BB#9(0x7c000000 / 0x80000000 = 96.88%)

BB#10: derived from LLVM BB %for.end75
    Predecessors according to CFG: BB#9
	%vreg27<def> = ADDri_r32 %vreg6<kill>, 32, %STATUS<imp-def,dead>; GPR32:%vreg27,%vreg6
	%vreg26<def> = ADDri_r32 %vreg7<kill>, 32, %STATUS<imp-def,dead>; GPR32:%vreg26,%vreg7
	%vreg25<def> = ADDri_r32 %vreg8<kill>, 8, %STATUS<imp-def,dead>; GPR32:%vreg25,%vreg8
	%vreg67<def,dead> = CMPrr_r32 %vreg25, %vreg33, %STATUS<imp-def>; GPR32:%vreg67,%vreg25,%vreg33
	BCC <BB#4>, 8, %STATUS<imp-use>
	BNONE32 <BB#11>, %STATUS<imp-use>
    Successors according to CFG: BB#4(0x7c000000 / 0x80000000 = 96.88%) BB#11(0x04000000 / 0x80000000 = 3.12%)

BB#11: derived from LLVM BB %for.end78
    Predecessors according to CFG: BB#10
	%vreg29<def> = ADDrr_r32 %vreg3<kill>, %vreg1, %STATUS<imp-def,dead>; GPR32:%vreg29,%vreg3,%vreg1
	%vreg28<def> = ADDri_r32 %vreg4<kill>, 1, %STATUS<imp-def,dead>; GPR32:%vreg28,%vreg4
	%vreg68<def,dead> = CMPrr_r32 %vreg28, %vreg33, %STATUS<imp-def>; GPR32:%vreg68,%vreg28,%vreg33
	BCC <BB#3>, 1, %STATUS<imp-use>
	BNONE32 <BB#12>, %STATUS<imp-use>
    Successors according to CFG: BB#12(0x04000000 / 0x80000000 = 3.12%) BB#3(0x7c000000 / 0x80000000 = 96.88%)

BB#12: derived from LLVM BB %for.end81
    Predecessors according to CFG: BB#1 BB#11
	%vreg77<def> = LDRi32_r32 <fi#1>, 0; mem:LD4[FixedStack1] GPR32:%vreg77
	GID
	%CONFIG<def> = MOVTS32_core %vreg77<kill>; GPR32:%vreg77
	GIE %CONFIG<imp-use,kill>
	RTS

# End machine code for function matmac.

# *** IR Dump Before Detect Dead Lanes ***:
# Machine code for function matmac: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=32, align=8, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=4, align=8, at location [SP]
Function Live Ins: %R0 in %vreg30, %R1 in %vreg31, %R2 in %vreg32, %R3 in %vreg33

BB#0: 
    Live Ins: %R0 %R1 %R2 %R3
	GID %CONFIG<imp-def>
	%vreg71<def> = MOVFS32_core %CONFIG; GPR32:%vreg71
	STRi32_r32 %vreg71, <fi#1>, 0; mem:ST4[FixedStack1] GPR32:%vreg71
	%vreg72<def> = MOVi32ri 65535; GPR32:%vreg72
	%vreg73<def,tied1> = MOVTi32ri %vreg72<kill,tied0>, 65521; GPR32:%vreg73,%vreg72
	%vreg69<def> = ANDrr_r32 %vreg71, %vreg73<kill>, %STATUS<imp-def>; GPR32:%vreg69,%vreg71,%vreg73
	%vreg70<def,tied1> = MOVTi32ri %vreg71<kill,tied0>, 72; GPR32:%vreg70,%vreg71
	%vreg78<def> = REG_SEQUENCE %vreg69, isub_lo, %vreg70, isub_hi; GPR64:%vreg78 GPR32:%vreg69,%vreg70
	STRi64 %vreg78, <fi#3>, 0; mem:ST4[FixedStack3] ST4[FixedStack2] GPR64:%vreg78
	GIE %CONFIG<imp-use,kill>
    Successors according to CFG: BB#1(?%)

BB#1: derived from LLVM BB %entry
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#0
	%vreg33<def> = COPY %R3<kill>; GPR32:%vreg33
	%vreg32<def> = COPY %R2<kill>; GPR32:%vreg32
	%vreg31<def> = COPY %R1<kill>; GPR32:%vreg31
	%vreg30<def> = COPY %R0<kill>; GPR32:%vreg30
	%vreg34<def,dead> = CMPri_r32 %vreg33, 1, %STATUS<imp-def>; GPR32:%vreg34,%vreg33
	BCC <BB#12>, 8, %STATUS<imp-use>
	BNONE32 <BB#2>, %STATUS<imp-use>
    Successors according to CFG: BB#2(0x50000000 / 0x80000000 = 62.50%) BB#12(0x30000000 / 0x80000000 = 37.50%)

BB#2: derived from LLVM BB %for.body3.lr.ph.preheader
    Predecessors according to CFG: BB#1
	%vreg1<def> = LSL32ri %vreg33, 2, %STATUS<imp-def,dead>; GPR32:%vreg1,%vreg33
	%vreg0<def> = ADDri_r32 %vreg31<kill>, 8, %STATUS<imp-def,dead>; GPR32:%vreg0,%vreg31
	%vreg36<def> = MOViPTR <fi#0>, 0; GPR32:%vreg36
	%vreg2<def> = ADDri_r32 %vreg36, 8, %STATUS<imp-def,dead>; GPR32:%vreg2,%vreg36
	%vreg35<def> = MOVi32ri 0; GPR32:%vreg35
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %for.body3.lr.ph
    Predecessors according to CFG: BB#2 BB#11
	%vreg3<def> = PHI %vreg32, <BB#2>, %vreg29, <BB#11>; GPR32:%vreg3,%vreg32,%vreg29
	%vreg4<def> = PHI %vreg35, <BB#2>, %vreg28, <BB#11>; GPR32:%vreg4,%vreg35,%vreg28
	%vreg74<def> = LDRi32_r32 <fi#3>, 0; mem:LD4[FixedStack3] GPR32:%vreg74
	GID %CONFIG<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %vreg74<kill>; GPR32:%vreg74
	GIE %CONFIG<imp-def,dead>
	%vreg38<def> = IMULrr_r32 %vreg4, %vreg33, %STATUS<imp-def,dead>; GPR32:%vreg38,%vreg4,%vreg33
	%vreg39<def> = LSL32ri %vreg38<kill>, 2, %STATUS<imp-def,dead>; GPR32:%vreg39,%vreg38
	%vreg5<def> = ADDrr_r32 %vreg30, %vreg39<kill>, %STATUS<imp-def,dead>; GPR32:%vreg5,%vreg30,%vreg39
    Successors according to CFG: BB#4(?%)

BB#4: derived from LLVM BB %for.body9.preheader
    Predecessors according to CFG: BB#3 BB#10
	%vreg6<def> = PHI %vreg3, <BB#3>, %vreg27, <BB#10>; GPR32:%vreg6,%vreg3,%vreg27
	%vreg7<def> = PHI %vreg0, <BB#3>, %vreg26, <BB#10>; GPR32:%vreg7,%vreg0,%vreg26
	%vreg8<def> = PHI %vreg35, <BB#3>, %vreg25, <BB#10>; GPR32:%vreg8,%vreg35,%vreg25
	%vreg42<def> = REG_SEQUENCE %vreg35, isub_hi, %vreg35, isub_lo; FPR64_with_isub_hi_in_FPR32:%vreg42 GPR32:%vreg35
	STRi64 %vreg42, <fi#0>, 24; mem:ST8[%1+24] FPR64_with_isub_hi_in_FPR32:%vreg42
	STRi64 %vreg42, <fi#0>, 16; mem:ST8[%1+16] FPR64_with_isub_hi_in_FPR32:%vreg42
	STRi64 %vreg42, <fi#0>, 8; mem:ST8[%1+8] FPR64_with_isub_hi_in_FPR32:%vreg42
	STRi64 %vreg42<kill>, <fi#0>, 0; mem:ST8[%1] FPR64_with_isub_hi_in_FPR32:%vreg42
	BNONE32 <BB#6>, %STATUS<imp-use>
    Successors according to CFG: BB#6(?%)

BB#5: derived from LLVM BB %for.cond64.preheader
    Predecessors according to CFG: BB#8
	BNONE32 <BB#9>, %STATUS<imp-use>
    Successors according to CFG: BB#9(?%)

BB#6: derived from LLVM BB %for.body9
    Predecessors according to CFG: BB#4 BB#8
	%vreg9<def> = PHI %vreg7, <BB#4>, %vreg20, <BB#8>; GPR32:%vreg9,%vreg7,%vreg20
	%vreg10<def> = PHI %vreg35, <BB#4>, %vreg19, <BB#8>; GPR32:%vreg10,%vreg35,%vreg19
	%vreg44<def> = LSL32ri %vreg10, 2, %STATUS<imp-def,dead>; GPR32:%vreg44,%vreg10
	%vreg45<def> = ADDrr_r32 %vreg5, %vreg44<kill>, %STATUS<imp-def,dead>; GPR32:%vreg45,%vreg5,%vreg44
	%vreg11<def> = COPY %vreg2; GPR32:%vreg11,%vreg2
	%vreg12<def> = LDRf32 %vreg45<kill>, 0; mem:Volatile LD4[%add.ptr10](tbaa=!2) FPR32:%vreg12 GPR32:%vreg45
    Successors according to CFG: BB#7(?%)

BB#7: derived from LLVM BB %for.body13
    Predecessors according to CFG: BB#6 BB#7
	%vreg13<def> = PHI %vreg11, <BB#6>, %vreg18, <BB#7>; GPR32:%vreg13,%vreg11,%vreg18
	%vreg14<def> = PHI %vreg9, <BB#6>, %vreg17, <BB#7>; GPR32:%vreg14,%vreg9,%vreg17
	%vreg15<def> = PHI %vreg35, <BB#6>, %vreg16, <BB#7>; GPR32:%vreg15,%vreg35,%vreg16
	%vreg46<def> = LDRf32 %vreg14, -8; mem:Volatile LD4[%scevgep8](tbaa=!2) FPR32:%vreg46 GPR32:%vreg14
	%vreg18<def> = ADDri_r32 %vreg13, 16, %STATUS<imp-def,dead>; GPR32:%vreg18,%vreg13
	%vreg17<def> = ADDri_r32 %vreg14, 16, %STATUS<imp-def,dead>; GPR32:%vreg17,%vreg14
	%vreg47<def> = LDRf32 %vreg14, -4; mem:Volatile LD4[%scevgep9](tbaa=!2) FPR32:%vreg47 GPR32:%vreg14
	%vreg16<def> = ADDri_r32 %vreg15<kill>, 4, %STATUS<imp-def,dead>; GPR32:%vreg16,%vreg15
	%vreg48<def> = LDRf32 %vreg14, 0; mem:Volatile LD4[%lsr.iv5](tbaa=!2) FPR32:%vreg48 GPR32:%vreg14
	%vreg49<def> = LDRf32 %vreg14<kill>, 4; mem:Volatile LD4[%scevgep7](tbaa=!2) FPR32:%vreg49 GPR32:%vreg14
	%vreg79<def> = LDRf64 %vreg13, -8; mem:LD4[%scevgep17](tbaa=!2) LD4[%scevgep15](tbaa=!2) FPR64:%vreg79 GPR32:%vreg13
	%vreg50<def> = COPY %vreg79:isub_hi; FPR32:%vreg50 FPR64:%vreg79
	%vreg52<def> = COPY %vreg79:isub_lo; FPR32:%vreg52 FPR64:%vreg79
	%vreg75<def> = LDRi32_r32 <fi#2>, 0; mem:LD4[FixedStack2] GPR32:%vreg75
	GID %CONFIG<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %vreg75<kill>; GPR32:%vreg75
	GIE %CONFIG<imp-def,dead>
	%vreg51<def,tied1> = FMADDrr_r32 %vreg50<kill,tied0>, %vreg12, %vreg46<kill>, %STATUS<imp-def,dead>; FPR32:%vreg51,%vreg50,%vreg12,%vreg46
	%vreg53<def,tied1> = FMADDrr_r32 %vreg52<kill,tied0>, %vreg12, %vreg47<kill>, %STATUS<imp-def,dead>; FPR32:%vreg53,%vreg52,%vreg12,%vreg47
	%vreg80<def> = REG_SEQUENCE %vreg51, isub_lo, %vreg53, isub_hi; FPR64:%vreg80 FPR32:%vreg51,%vreg53
	STRf64 %vreg80, %vreg13, -8; mem:ST4[%scevgep17](tbaa=!2) ST4[%scevgep15](tbaa=!2) FPR64:%vreg80 GPR32:%vreg13
	%vreg54<def> = LDRf32 %vreg13, 0; mem:LD4[%lsr.iv1214](tbaa=!2) FPR32:%vreg54 GPR32:%vreg13
	%vreg55<def,tied1> = FMADDrr_r32 %vreg54<kill,tied0>, %vreg12, %vreg48<kill>, %STATUS<imp-def,dead>; FPR32:%vreg55,%vreg54,%vreg12,%vreg48
	STRf32 %vreg55<kill>, %vreg13, 0; mem:ST4[%lsr.iv1214](tbaa=!2) FPR32:%vreg55 GPR32:%vreg13
	%vreg56<def> = LDRf32 %vreg13, 4; mem:LD4[%scevgep16](tbaa=!2) FPR32:%vreg56 GPR32:%vreg13
	%vreg57<def,tied1> = FMADDrr_r32 %vreg56<kill,tied0>, %vreg12, %vreg49<kill>, %STATUS<imp-def,dead>; FPR32:%vreg57,%vreg56,%vreg12,%vreg49
	%vreg58<def,dead> = CMPri_r32 %vreg16, 8, %STATUS<imp-def>; GPR32:%vreg58,%vreg16
	STRf32 %vreg57<kill>, %vreg13<kill>, 4; mem:ST4[%scevgep16](tbaa=!2) FPR32:%vreg57 GPR32:%vreg13
	BCC <BB#7>, 8, %STATUS<imp-use>
	BNONE32 <BB#8>, %STATUS<imp-use>
    Successors according to CFG: BB#7(0x7c000000 / 0x80000000 = 96.88%) BB#8(0x04000000 / 0x80000000 = 3.12%)

BB#8: derived from LLVM BB %for.end60
    Predecessors according to CFG: BB#7
	%vreg20<def> = ADDrr_r32 %vreg9<kill>, %vreg1, %STATUS<imp-def,dead>; GPR32:%vreg20,%vreg9,%vreg1
	%vreg19<def> = ADDri_r32 %vreg10<kill>, 1, %STATUS<imp-def,dead>; GPR32:%vreg19,%vreg10
	%vreg59<def,dead> = CMPrr_r32 %vreg19, %vreg33, %STATUS<imp-def>; GPR32:%vreg59,%vreg19,%vreg33
	BCC <BB#5>, 0, %STATUS<imp-use>
	BNONE32 <BB#6>, %STATUS<imp-use>
    Successors according to CFG: BB#5(0x04000000 / 0x80000000 = 3.12%) BB#6(0x7c000000 / 0x80000000 = 96.88%)

BB#9: derived from LLVM BB %for.body66
    Predecessors according to CFG: BB#5 BB#9
	%vreg21<def> = PHI %vreg6, <BB#5>, %vreg24, <BB#9>; GPR32:%vreg21,%vreg6,%vreg24
	%vreg22<def> = PHI %vreg35, <BB#5>, %vreg23, <BB#9>; GPR32:%vreg22,%vreg35,%vreg23
	%vreg62<def> = ADDrr_r32 %vreg36, %vreg22, %STATUS<imp-def,dead>; GPR32:%vreg62,%vreg36,%vreg22
	%vreg63<def> = LDRf32 %vreg62<kill>, 0; mem:LD4[%sunkaddr30](tbaa=!2) FPR32:%vreg63 GPR32:%vreg62
	%vreg24<def> = ADDri_r32 %vreg21, 4, %STATUS<imp-def,dead>; GPR32:%vreg24,%vreg21
	%vreg23<def> = ADDri_r32 %vreg22<kill>, 4, %STATUS<imp-def,dead>; GPR32:%vreg23,%vreg22
	%vreg64<def> = LDRf32 %vreg21, 0; mem:Volatile LD4[%lsr.iv24](tbaa=!2) FPR32:%vreg64 GPR32:%vreg21
	%vreg76<def> = LDRi32_r32 <fi#2>, 0; mem:LD4[FixedStack2] GPR32:%vreg76
	GID %CONFIG<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %vreg76<kill>; GPR32:%vreg76
	GIE %CONFIG<imp-def,dead>
	%vreg65<def> = FADDrr_r32 %vreg63<kill>, %vreg64<kill>, %STATUS<imp-def,dead>; FPR32:%vreg65,%vreg63,%vreg64
	%vreg66<def,dead> = CMPri_r32 %vreg23, 32, %STATUS<imp-def>; GPR32:%vreg66,%vreg23
	STRf32 %vreg65<kill>, %vreg21<kill>, 0; mem:Volatile ST4[%lsr.iv24](tbaa=!2) FPR32:%vreg65 GPR32:%vreg21
	BCC <BB#9>, 1, %STATUS<imp-use>
	BNONE32 <BB#10>, %STATUS<imp-use>
    Successors according to CFG: BB#10(0x04000000 / 0x80000000 = 3.12%) BB#9(0x7c000000 / 0x80000000 = 96.88%)

BB#10: derived from LLVM BB %for.end75
    Predecessors according to CFG: BB#9
	%vreg27<def> = ADDri_r32 %vreg6<kill>, 32, %STATUS<imp-def,dead>; GPR32:%vreg27,%vreg6
	%vreg26<def> = ADDri_r32 %vreg7<kill>, 32, %STATUS<imp-def,dead>; GPR32:%vreg26,%vreg7
	%vreg25<def> = ADDri_r32 %vreg8<kill>, 8, %STATUS<imp-def,dead>; GPR32:%vreg25,%vreg8
	%vreg67<def,dead> = CMPrr_r32 %vreg25, %vreg33, %STATUS<imp-def>; GPR32:%vreg67,%vreg25,%vreg33
	BCC <BB#4>, 8, %STATUS<imp-use>
	BNONE32 <BB#11>, %STATUS<imp-use>
    Successors according to CFG: BB#4(0x7c000000 / 0x80000000 = 96.88%) BB#11(0x04000000 / 0x80000000 = 3.12%)

BB#11: derived from LLVM BB %for.end78
    Predecessors according to CFG: BB#10
	%vreg29<def> = ADDrr_r32 %vreg3<kill>, %vreg1, %STATUS<imp-def,dead>; GPR32:%vreg29,%vreg3,%vreg1
	%vreg28<def> = ADDri_r32 %vreg4<kill>, 1, %STATUS<imp-def,dead>; GPR32:%vreg28,%vreg4
	%vreg68<def,dead> = CMPrr_r32 %vreg28, %vreg33, %STATUS<imp-def>; GPR32:%vreg68,%vreg28,%vreg33
	BCC <BB#3>, 1, %STATUS<imp-use>
	BNONE32 <BB#12>, %STATUS<imp-use>
    Successors according to CFG: BB#12(0x04000000 / 0x80000000 = 3.12%) BB#3(0x7c000000 / 0x80000000 = 96.88%)

BB#12: derived from LLVM BB %for.end81
    Predecessors according to CFG: BB#1 BB#11
	%vreg77<def> = LDRi32_r32 <fi#1>, 0; mem:LD4[FixedStack1] GPR32:%vreg77
	GID
	%CONFIG<def> = MOVTS32_core %vreg77<kill>; GPR32:%vreg77
	GIE %CONFIG<imp-use,kill>
	RTS

# End machine code for function matmac.

Skipping Detect dead lanes pass
# *** IR Dump After Detect Dead Lanes ***:
# Machine code for function matmac: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=32, align=8, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=4, align=8, at location [SP]
Function Live Ins: %R0 in %vreg30, %R1 in %vreg31, %R2 in %vreg32, %R3 in %vreg33

BB#0: 
    Live Ins: %R0 %R1 %R2 %R3
	GID %CONFIG<imp-def>
	%vreg71<def> = MOVFS32_core %CONFIG; GPR32:%vreg71
	STRi32_r32 %vreg71, <fi#1>, 0; mem:ST4[FixedStack1] GPR32:%vreg71
	%vreg72<def> = MOVi32ri 65535; GPR32:%vreg72
	%vreg73<def,tied1> = MOVTi32ri %vreg72<kill,tied0>, 65521; GPR32:%vreg73,%vreg72
	%vreg69<def> = ANDrr_r32 %vreg71, %vreg73<kill>, %STATUS<imp-def>; GPR32:%vreg69,%vreg71,%vreg73
	%vreg70<def,tied1> = MOVTi32ri %vreg71<kill,tied0>, 72; GPR32:%vreg70,%vreg71
	%vreg78<def> = REG_SEQUENCE %vreg69, isub_lo, %vreg70, isub_hi; GPR64:%vreg78 GPR32:%vreg69,%vreg70
	STRi64 %vreg78, <fi#3>, 0; mem:ST4[FixedStack3] ST4[FixedStack2] GPR64:%vreg78
	GIE %CONFIG<imp-use,kill>
    Successors according to CFG: BB#1(?%)

BB#1: derived from LLVM BB %entry
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#0
	%vreg33<def> = COPY %R3<kill>; GPR32:%vreg33
	%vreg32<def> = COPY %R2<kill>; GPR32:%vreg32
	%vreg31<def> = COPY %R1<kill>; GPR32:%vreg31
	%vreg30<def> = COPY %R0<kill>; GPR32:%vreg30
	%vreg34<def,dead> = CMPri_r32 %vreg33, 1, %STATUS<imp-def>; GPR32:%vreg34,%vreg33
	BCC <BB#12>, 8, %STATUS<imp-use>
	BNONE32 <BB#2>, %STATUS<imp-use>
    Successors according to CFG: BB#2(0x50000000 / 0x80000000 = 62.50%) BB#12(0x30000000 / 0x80000000 = 37.50%)

BB#2: derived from LLVM BB %for.body3.lr.ph.preheader
    Predecessors according to CFG: BB#1
	%vreg1<def> = LSL32ri %vreg33, 2, %STATUS<imp-def,dead>; GPR32:%vreg1,%vreg33
	%vreg0<def> = ADDri_r32 %vreg31<kill>, 8, %STATUS<imp-def,dead>; GPR32:%vreg0,%vreg31
	%vreg36<def> = MOViPTR <fi#0>, 0; GPR32:%vreg36
	%vreg2<def> = ADDri_r32 %vreg36, 8, %STATUS<imp-def,dead>; GPR32:%vreg2,%vreg36
	%vreg35<def> = MOVi32ri 0; GPR32:%vreg35
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %for.body3.lr.ph
    Predecessors according to CFG: BB#2 BB#11
	%vreg3<def> = PHI %vreg32, <BB#2>, %vreg29, <BB#11>; GPR32:%vreg3,%vreg32,%vreg29
	%vreg4<def> = PHI %vreg35, <BB#2>, %vreg28, <BB#11>; GPR32:%vreg4,%vreg35,%vreg28
	%vreg74<def> = LDRi32_r32 <fi#3>, 0; mem:LD4[FixedStack3] GPR32:%vreg74
	GID %CONFIG<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %vreg74<kill>; GPR32:%vreg74
	GIE %CONFIG<imp-def,dead>
	%vreg38<def> = IMULrr_r32 %vreg4, %vreg33, %STATUS<imp-def,dead>; GPR32:%vreg38,%vreg4,%vreg33
	%vreg39<def> = LSL32ri %vreg38<kill>, 2, %STATUS<imp-def,dead>; GPR32:%vreg39,%vreg38
	%vreg5<def> = ADDrr_r32 %vreg30, %vreg39<kill>, %STATUS<imp-def,dead>; GPR32:%vreg5,%vreg30,%vreg39
    Successors according to CFG: BB#4(?%)

BB#4: derived from LLVM BB %for.body9.preheader
    Predecessors according to CFG: BB#3 BB#10
	%vreg6<def> = PHI %vreg3, <BB#3>, %vreg27, <BB#10>; GPR32:%vreg6,%vreg3,%vreg27
	%vreg7<def> = PHI %vreg0, <BB#3>, %vreg26, <BB#10>; GPR32:%vreg7,%vreg0,%vreg26
	%vreg8<def> = PHI %vreg35, <BB#3>, %vreg25, <BB#10>; GPR32:%vreg8,%vreg35,%vreg25
	%vreg42<def> = REG_SEQUENCE %vreg35, isub_hi, %vreg35, isub_lo; FPR64_with_isub_hi_in_FPR32:%vreg42 GPR32:%vreg35
	STRi64 %vreg42, <fi#0>, 24; mem:ST8[%1+24] FPR64_with_isub_hi_in_FPR32:%vreg42
	STRi64 %vreg42, <fi#0>, 16; mem:ST8[%1+16] FPR64_with_isub_hi_in_FPR32:%vreg42
	STRi64 %vreg42, <fi#0>, 8; mem:ST8[%1+8] FPR64_with_isub_hi_in_FPR32:%vreg42
	STRi64 %vreg42<kill>, <fi#0>, 0; mem:ST8[%1] FPR64_with_isub_hi_in_FPR32:%vreg42
	BNONE32 <BB#6>, %STATUS<imp-use>
    Successors according to CFG: BB#6(?%)

BB#5: derived from LLVM BB %for.cond64.preheader
    Predecessors according to CFG: BB#8
	BNONE32 <BB#9>, %STATUS<imp-use>
    Successors according to CFG: BB#9(?%)

BB#6: derived from LLVM BB %for.body9
    Predecessors according to CFG: BB#4 BB#8
	%vreg9<def> = PHI %vreg7, <BB#4>, %vreg20, <BB#8>; GPR32:%vreg9,%vreg7,%vreg20
	%vreg10<def> = PHI %vreg35, <BB#4>, %vreg19, <BB#8>; GPR32:%vreg10,%vreg35,%vreg19
	%vreg44<def> = LSL32ri %vreg10, 2, %STATUS<imp-def,dead>; GPR32:%vreg44,%vreg10
	%vreg45<def> = ADDrr_r32 %vreg5, %vreg44<kill>, %STATUS<imp-def,dead>; GPR32:%vreg45,%vreg5,%vreg44
	%vreg11<def> = COPY %vreg2; GPR32:%vreg11,%vreg2
	%vreg12<def> = LDRf32 %vreg45<kill>, 0; mem:Volatile LD4[%add.ptr10](tbaa=!2) FPR32:%vreg12 GPR32:%vreg45
    Successors according to CFG: BB#7(?%)

BB#7: derived from LLVM BB %for.body13
    Predecessors according to CFG: BB#6 BB#7
	%vreg13<def> = PHI %vreg11, <BB#6>, %vreg18, <BB#7>; GPR32:%vreg13,%vreg11,%vreg18
	%vreg14<def> = PHI %vreg9, <BB#6>, %vreg17, <BB#7>; GPR32:%vreg14,%vreg9,%vreg17
	%vreg15<def> = PHI %vreg35, <BB#6>, %vreg16, <BB#7>; GPR32:%vreg15,%vreg35,%vreg16
	%vreg46<def> = LDRf32 %vreg14, -8; mem:Volatile LD4[%scevgep8](tbaa=!2) FPR32:%vreg46 GPR32:%vreg14
	%vreg18<def> = ADDri_r32 %vreg13, 16, %STATUS<imp-def,dead>; GPR32:%vreg18,%vreg13
	%vreg17<def> = ADDri_r32 %vreg14, 16, %STATUS<imp-def,dead>; GPR32:%vreg17,%vreg14
	%vreg47<def> = LDRf32 %vreg14, -4; mem:Volatile LD4[%scevgep9](tbaa=!2) FPR32:%vreg47 GPR32:%vreg14
	%vreg16<def> = ADDri_r32 %vreg15<kill>, 4, %STATUS<imp-def,dead>; GPR32:%vreg16,%vreg15
	%vreg48<def> = LDRf32 %vreg14, 0; mem:Volatile LD4[%lsr.iv5](tbaa=!2) FPR32:%vreg48 GPR32:%vreg14
	%vreg49<def> = LDRf32 %vreg14<kill>, 4; mem:Volatile LD4[%scevgep7](tbaa=!2) FPR32:%vreg49 GPR32:%vreg14
	%vreg79<def> = LDRf64 %vreg13, -8; mem:LD4[%scevgep17](tbaa=!2) LD4[%scevgep15](tbaa=!2) FPR64:%vreg79 GPR32:%vreg13
	%vreg50<def> = COPY %vreg79:isub_hi; FPR32:%vreg50 FPR64:%vreg79
	%vreg52<def> = COPY %vreg79:isub_lo; FPR32:%vreg52 FPR64:%vreg79
	%vreg75<def> = LDRi32_r32 <fi#2>, 0; mem:LD4[FixedStack2] GPR32:%vreg75
	GID %CONFIG<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %vreg75<kill>; GPR32:%vreg75
	GIE %CONFIG<imp-def,dead>
	%vreg51<def,tied1> = FMADDrr_r32 %vreg50<kill,tied0>, %vreg12, %vreg46<kill>, %STATUS<imp-def,dead>; FPR32:%vreg51,%vreg50,%vreg12,%vreg46
	%vreg53<def,tied1> = FMADDrr_r32 %vreg52<kill,tied0>, %vreg12, %vreg47<kill>, %STATUS<imp-def,dead>; FPR32:%vreg53,%vreg52,%vreg12,%vreg47
	%vreg80<def> = REG_SEQUENCE %vreg51, isub_lo, %vreg53, isub_hi; FPR64:%vreg80 FPR32:%vreg51,%vreg53
	STRf64 %vreg80, %vreg13, -8; mem:ST4[%scevgep17](tbaa=!2) ST4[%scevgep15](tbaa=!2) FPR64:%vreg80 GPR32:%vreg13
	%vreg54<def> = LDRf32 %vreg13, 0; mem:LD4[%lsr.iv1214](tbaa=!2) FPR32:%vreg54 GPR32:%vreg13
	%vreg55<def,tied1> = FMADDrr_r32 %vreg54<kill,tied0>, %vreg12, %vreg48<kill>, %STATUS<imp-def,dead>; FPR32:%vreg55,%vreg54,%vreg12,%vreg48
	STRf32 %vreg55<kill>, %vreg13, 0; mem:ST4[%lsr.iv1214](tbaa=!2) FPR32:%vreg55 GPR32:%vreg13
	%vreg56<def> = LDRf32 %vreg13, 4; mem:LD4[%scevgep16](tbaa=!2) FPR32:%vreg56 GPR32:%vreg13
	%vreg57<def,tied1> = FMADDrr_r32 %vreg56<kill,tied0>, %vreg12, %vreg49<kill>, %STATUS<imp-def,dead>; FPR32:%vreg57,%vreg56,%vreg12,%vreg49
	%vreg58<def,dead> = CMPri_r32 %vreg16, 8, %STATUS<imp-def>; GPR32:%vreg58,%vreg16
	STRf32 %vreg57<kill>, %vreg13<kill>, 4; mem:ST4[%scevgep16](tbaa=!2) FPR32:%vreg57 GPR32:%vreg13
	BCC <BB#7>, 8, %STATUS<imp-use>
	BNONE32 <BB#8>, %STATUS<imp-use>
    Successors according to CFG: BB#7(0x7c000000 / 0x80000000 = 96.88%) BB#8(0x04000000 / 0x80000000 = 3.12%)

BB#8: derived from LLVM BB %for.end60
    Predecessors according to CFG: BB#7
	%vreg20<def> = ADDrr_r32 %vreg9<kill>, %vreg1, %STATUS<imp-def,dead>; GPR32:%vreg20,%vreg9,%vreg1
	%vreg19<def> = ADDri_r32 %vreg10<kill>, 1, %STATUS<imp-def,dead>; GPR32:%vreg19,%vreg10
	%vreg59<def,dead> = CMPrr_r32 %vreg19, %vreg33, %STATUS<imp-def>; GPR32:%vreg59,%vreg19,%vreg33
	BCC <BB#5>, 0, %STATUS<imp-use>
	BNONE32 <BB#6>, %STATUS<imp-use>
    Successors according to CFG: BB#5(0x04000000 / 0x80000000 = 3.12%) BB#6(0x7c000000 / 0x80000000 = 96.88%)

BB#9: derived from LLVM BB %for.body66
    Predecessors according to CFG: BB#5 BB#9
	%vreg21<def> = PHI %vreg6, <BB#5>, %vreg24, <BB#9>; GPR32:%vreg21,%vreg6,%vreg24
	%vreg22<def> = PHI %vreg35, <BB#5>, %vreg23, <BB#9>; GPR32:%vreg22,%vreg35,%vreg23
	%vreg62<def> = ADDrr_r32 %vreg36, %vreg22, %STATUS<imp-def,dead>; GPR32:%vreg62,%vreg36,%vreg22
	%vreg63<def> = LDRf32 %vreg62<kill>, 0; mem:LD4[%sunkaddr30](tbaa=!2) FPR32:%vreg63 GPR32:%vreg62
	%vreg24<def> = ADDri_r32 %vreg21, 4, %STATUS<imp-def,dead>; GPR32:%vreg24,%vreg21
	%vreg23<def> = ADDri_r32 %vreg22<kill>, 4, %STATUS<imp-def,dead>; GPR32:%vreg23,%vreg22
	%vreg64<def> = LDRf32 %vreg21, 0; mem:Volatile LD4[%lsr.iv24](tbaa=!2) FPR32:%vreg64 GPR32:%vreg21
	%vreg76<def> = LDRi32_r32 <fi#2>, 0; mem:LD4[FixedStack2] GPR32:%vreg76
	GID %CONFIG<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %vreg76<kill>; GPR32:%vreg76
	GIE %CONFIG<imp-def,dead>
	%vreg65<def> = FADDrr_r32 %vreg63<kill>, %vreg64<kill>, %STATUS<imp-def,dead>; FPR32:%vreg65,%vreg63,%vreg64
	%vreg66<def,dead> = CMPri_r32 %vreg23, 32, %STATUS<imp-def>; GPR32:%vreg66,%vreg23
	STRf32 %vreg65<kill>, %vreg21<kill>, 0; mem:Volatile ST4[%lsr.iv24](tbaa=!2) FPR32:%vreg65 GPR32:%vreg21
	BCC <BB#9>, 1, %STATUS<imp-use>
	BNONE32 <BB#10>, %STATUS<imp-use>
    Successors according to CFG: BB#10(0x04000000 / 0x80000000 = 3.12%) BB#9(0x7c000000 / 0x80000000 = 96.88%)

BB#10: derived from LLVM BB %for.end75
    Predecessors according to CFG: BB#9
	%vreg27<def> = ADDri_r32 %vreg6<kill>, 32, %STATUS<imp-def,dead>; GPR32:%vreg27,%vreg6
	%vreg26<def> = ADDri_r32 %vreg7<kill>, 32, %STATUS<imp-def,dead>; GPR32:%vreg26,%vreg7
	%vreg25<def> = ADDri_r32 %vreg8<kill>, 8, %STATUS<imp-def,dead>; GPR32:%vreg25,%vreg8
	%vreg67<def,dead> = CMPrr_r32 %vreg25, %vreg33, %STATUS<imp-def>; GPR32:%vreg67,%vreg25,%vreg33
	BCC <BB#4>, 8, %STATUS<imp-use>
	BNONE32 <BB#11>, %STATUS<imp-use>
    Successors according to CFG: BB#4(0x7c000000 / 0x80000000 = 96.88%) BB#11(0x04000000 / 0x80000000 = 3.12%)

BB#11: derived from LLVM BB %for.end78
    Predecessors according to CFG: BB#10
	%vreg29<def> = ADDrr_r32 %vreg3<kill>, %vreg1, %STATUS<imp-def,dead>; GPR32:%vreg29,%vreg3,%vreg1
	%vreg28<def> = ADDri_r32 %vreg4<kill>, 1, %STATUS<imp-def,dead>; GPR32:%vreg28,%vreg4
	%vreg68<def,dead> = CMPrr_r32 %vreg28, %vreg33, %STATUS<imp-def>; GPR32:%vreg68,%vreg28,%vreg33
	BCC <BB#3>, 1, %STATUS<imp-use>
	BNONE32 <BB#12>, %STATUS<imp-use>
    Successors according to CFG: BB#12(0x04000000 / 0x80000000 = 3.12%) BB#3(0x7c000000 / 0x80000000 = 96.88%)

BB#12: derived from LLVM BB %for.end81
    Predecessors according to CFG: BB#1 BB#11
	%vreg77<def> = LDRi32_r32 <fi#1>, 0; mem:LD4[FixedStack1] GPR32:%vreg77
	GID
	%CONFIG<def> = MOVTS32_core %vreg77<kill>; GPR32:%vreg77
	GIE %CONFIG<imp-use,kill>
	RTS

# End machine code for function matmac.

# *** IR Dump Before Process Implicit Definitions ***:
# Machine code for function matmac: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=32, align=8, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=4, align=8, at location [SP]
Function Live Ins: %R0 in %vreg30, %R1 in %vreg31, %R2 in %vreg32, %R3 in %vreg33

BB#0: 
    Live Ins: %R0 %R1 %R2 %R3
	GID %CONFIG<imp-def>
	%vreg71<def> = MOVFS32_core %CONFIG; GPR32:%vreg71
	STRi32_r32 %vreg71, <fi#1>, 0; mem:ST4[FixedStack1] GPR32:%vreg71
	%vreg72<def> = MOVi32ri 65535; GPR32:%vreg72
	%vreg73<def,tied1> = MOVTi32ri %vreg72<kill,tied0>, 65521; GPR32:%vreg73,%vreg72
	%vreg69<def> = ANDrr_r32 %vreg71, %vreg73<kill>, %STATUS<imp-def>; GPR32:%vreg69,%vreg71,%vreg73
	%vreg70<def,tied1> = MOVTi32ri %vreg71<kill,tied0>, 72; GPR32:%vreg70,%vreg71
	%vreg78<def> = REG_SEQUENCE %vreg69, isub_lo, %vreg70, isub_hi; GPR64:%vreg78 GPR32:%vreg69,%vreg70
	STRi64 %vreg78, <fi#3>, 0; mem:ST4[FixedStack3] ST4[FixedStack2] GPR64:%vreg78
	GIE %CONFIG<imp-use,kill>
    Successors according to CFG: BB#1(?%)

BB#1: derived from LLVM BB %entry
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#0
	%vreg33<def> = COPY %R3<kill>; GPR32:%vreg33
	%vreg32<def> = COPY %R2<kill>; GPR32:%vreg32
	%vreg31<def> = COPY %R1<kill>; GPR32:%vreg31
	%vreg30<def> = COPY %R0<kill>; GPR32:%vreg30
	%vreg34<def,dead> = CMPri_r32 %vreg33, 1, %STATUS<imp-def>; GPR32:%vreg34,%vreg33
	BCC <BB#12>, 8, %STATUS<imp-use>
	BNONE32 <BB#2>, %STATUS<imp-use>
    Successors according to CFG: BB#2(0x50000000 / 0x80000000 = 62.50%) BB#12(0x30000000 / 0x80000000 = 37.50%)

BB#2: derived from LLVM BB %for.body3.lr.ph.preheader
    Predecessors according to CFG: BB#1
	%vreg1<def> = LSL32ri %vreg33, 2, %STATUS<imp-def,dead>; GPR32:%vreg1,%vreg33
	%vreg0<def> = ADDri_r32 %vreg31<kill>, 8, %STATUS<imp-def,dead>; GPR32:%vreg0,%vreg31
	%vreg36<def> = MOViPTR <fi#0>, 0; GPR32:%vreg36
	%vreg2<def> = ADDri_r32 %vreg36, 8, %STATUS<imp-def,dead>; GPR32:%vreg2,%vreg36
	%vreg35<def> = MOVi32ri 0; GPR32:%vreg35
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %for.body3.lr.ph
    Predecessors according to CFG: BB#2 BB#11
	%vreg3<def> = PHI %vreg32, <BB#2>, %vreg29, <BB#11>; GPR32:%vreg3,%vreg32,%vreg29
	%vreg4<def> = PHI %vreg35, <BB#2>, %vreg28, <BB#11>; GPR32:%vreg4,%vreg35,%vreg28
	%vreg74<def> = LDRi32_r32 <fi#3>, 0; mem:LD4[FixedStack3] GPR32:%vreg74
	GID %CONFIG<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %vreg74<kill>; GPR32:%vreg74
	GIE %CONFIG<imp-def,dead>
	%vreg38<def> = IMULrr_r32 %vreg4, %vreg33, %STATUS<imp-def,dead>; GPR32:%vreg38,%vreg4,%vreg33
	%vreg39<def> = LSL32ri %vreg38<kill>, 2, %STATUS<imp-def,dead>; GPR32:%vreg39,%vreg38
	%vreg5<def> = ADDrr_r32 %vreg30, %vreg39<kill>, %STATUS<imp-def,dead>; GPR32:%vreg5,%vreg30,%vreg39
    Successors according to CFG: BB#4(?%)

BB#4: derived from LLVM BB %for.body9.preheader
    Predecessors according to CFG: BB#3 BB#10
	%vreg6<def> = PHI %vreg3, <BB#3>, %vreg27, <BB#10>; GPR32:%vreg6,%vreg3,%vreg27
	%vreg7<def> = PHI %vreg0, <BB#3>, %vreg26, <BB#10>; GPR32:%vreg7,%vreg0,%vreg26
	%vreg8<def> = PHI %vreg35, <BB#3>, %vreg25, <BB#10>; GPR32:%vreg8,%vreg35,%vreg25
	%vreg42<def> = REG_SEQUENCE %vreg35, isub_hi, %vreg35, isub_lo; FPR64_with_isub_hi_in_FPR32:%vreg42 GPR32:%vreg35
	STRi64 %vreg42, <fi#0>, 24; mem:ST8[%1+24] FPR64_with_isub_hi_in_FPR32:%vreg42
	STRi64 %vreg42, <fi#0>, 16; mem:ST8[%1+16] FPR64_with_isub_hi_in_FPR32:%vreg42
	STRi64 %vreg42, <fi#0>, 8; mem:ST8[%1+8] FPR64_with_isub_hi_in_FPR32:%vreg42
	STRi64 %vreg42<kill>, <fi#0>, 0; mem:ST8[%1] FPR64_with_isub_hi_in_FPR32:%vreg42
	BNONE32 <BB#6>, %STATUS<imp-use>
    Successors according to CFG: BB#6(?%)

BB#5: derived from LLVM BB %for.cond64.preheader
    Predecessors according to CFG: BB#8
	BNONE32 <BB#9>, %STATUS<imp-use>
    Successors according to CFG: BB#9(?%)

BB#6: derived from LLVM BB %for.body9
    Predecessors according to CFG: BB#4 BB#8
	%vreg9<def> = PHI %vreg7, <BB#4>, %vreg20, <BB#8>; GPR32:%vreg9,%vreg7,%vreg20
	%vreg10<def> = PHI %vreg35, <BB#4>, %vreg19, <BB#8>; GPR32:%vreg10,%vreg35,%vreg19
	%vreg44<def> = LSL32ri %vreg10, 2, %STATUS<imp-def,dead>; GPR32:%vreg44,%vreg10
	%vreg45<def> = ADDrr_r32 %vreg5, %vreg44<kill>, %STATUS<imp-def,dead>; GPR32:%vreg45,%vreg5,%vreg44
	%vreg11<def> = COPY %vreg2; GPR32:%vreg11,%vreg2
	%vreg12<def> = LDRf32 %vreg45<kill>, 0; mem:Volatile LD4[%add.ptr10](tbaa=!2) FPR32:%vreg12 GPR32:%vreg45
    Successors according to CFG: BB#7(?%)

BB#7: derived from LLVM BB %for.body13
    Predecessors according to CFG: BB#6 BB#7
	%vreg13<def> = PHI %vreg11, <BB#6>, %vreg18, <BB#7>; GPR32:%vreg13,%vreg11,%vreg18
	%vreg14<def> = PHI %vreg9, <BB#6>, %vreg17, <BB#7>; GPR32:%vreg14,%vreg9,%vreg17
	%vreg15<def> = PHI %vreg35, <BB#6>, %vreg16, <BB#7>; GPR32:%vreg15,%vreg35,%vreg16
	%vreg46<def> = LDRf32 %vreg14, -8; mem:Volatile LD4[%scevgep8](tbaa=!2) FPR32:%vreg46 GPR32:%vreg14
	%vreg18<def> = ADDri_r32 %vreg13, 16, %STATUS<imp-def,dead>; GPR32:%vreg18,%vreg13
	%vreg17<def> = ADDri_r32 %vreg14, 16, %STATUS<imp-def,dead>; GPR32:%vreg17,%vreg14
	%vreg47<def> = LDRf32 %vreg14, -4; mem:Volatile LD4[%scevgep9](tbaa=!2) FPR32:%vreg47 GPR32:%vreg14
	%vreg16<def> = ADDri_r32 %vreg15<kill>, 4, %STATUS<imp-def,dead>; GPR32:%vreg16,%vreg15
	%vreg48<def> = LDRf32 %vreg14, 0; mem:Volatile LD4[%lsr.iv5](tbaa=!2) FPR32:%vreg48 GPR32:%vreg14
	%vreg49<def> = LDRf32 %vreg14<kill>, 4; mem:Volatile LD4[%scevgep7](tbaa=!2) FPR32:%vreg49 GPR32:%vreg14
	%vreg79<def> = LDRf64 %vreg13, -8; mem:LD4[%scevgep17](tbaa=!2) LD4[%scevgep15](tbaa=!2) FPR64:%vreg79 GPR32:%vreg13
	%vreg50<def> = COPY %vreg79:isub_hi; FPR32:%vreg50 FPR64:%vreg79
	%vreg52<def> = COPY %vreg79:isub_lo; FPR32:%vreg52 FPR64:%vreg79
	%vreg75<def> = LDRi32_r32 <fi#2>, 0; mem:LD4[FixedStack2] GPR32:%vreg75
	GID %CONFIG<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %vreg75<kill>; GPR32:%vreg75
	GIE %CONFIG<imp-def,dead>
	%vreg51<def,tied1> = FMADDrr_r32 %vreg50<kill,tied0>, %vreg12, %vreg46<kill>, %STATUS<imp-def,dead>; FPR32:%vreg51,%vreg50,%vreg12,%vreg46
	%vreg53<def,tied1> = FMADDrr_r32 %vreg52<kill,tied0>, %vreg12, %vreg47<kill>, %STATUS<imp-def,dead>; FPR32:%vreg53,%vreg52,%vreg12,%vreg47
	%vreg80<def> = REG_SEQUENCE %vreg51, isub_lo, %vreg53, isub_hi; FPR64:%vreg80 FPR32:%vreg51,%vreg53
	STRf64 %vreg80, %vreg13, -8; mem:ST4[%scevgep17](tbaa=!2) ST4[%scevgep15](tbaa=!2) FPR64:%vreg80 GPR32:%vreg13
	%vreg54<def> = LDRf32 %vreg13, 0; mem:LD4[%lsr.iv1214](tbaa=!2) FPR32:%vreg54 GPR32:%vreg13
	%vreg55<def,tied1> = FMADDrr_r32 %vreg54<kill,tied0>, %vreg12, %vreg48<kill>, %STATUS<imp-def,dead>; FPR32:%vreg55,%vreg54,%vreg12,%vreg48
	STRf32 %vreg55<kill>, %vreg13, 0; mem:ST4[%lsr.iv1214](tbaa=!2) FPR32:%vreg55 GPR32:%vreg13
	%vreg56<def> = LDRf32 %vreg13, 4; mem:LD4[%scevgep16](tbaa=!2) FPR32:%vreg56 GPR32:%vreg13
	%vreg57<def,tied1> = FMADDrr_r32 %vreg56<kill,tied0>, %vreg12, %vreg49<kill>, %STATUS<imp-def,dead>; FPR32:%vreg57,%vreg56,%vreg12,%vreg49
	%vreg58<def,dead> = CMPri_r32 %vreg16, 8, %STATUS<imp-def>; GPR32:%vreg58,%vreg16
	STRf32 %vreg57<kill>, %vreg13<kill>, 4; mem:ST4[%scevgep16](tbaa=!2) FPR32:%vreg57 GPR32:%vreg13
	BCC <BB#7>, 8, %STATUS<imp-use>
	BNONE32 <BB#8>, %STATUS<imp-use>
    Successors according to CFG: BB#7(0x7c000000 / 0x80000000 = 96.88%) BB#8(0x04000000 / 0x80000000 = 3.12%)

BB#8: derived from LLVM BB %for.end60
    Predecessors according to CFG: BB#7
	%vreg20<def> = ADDrr_r32 %vreg9<kill>, %vreg1, %STATUS<imp-def,dead>; GPR32:%vreg20,%vreg9,%vreg1
	%vreg19<def> = ADDri_r32 %vreg10<kill>, 1, %STATUS<imp-def,dead>; GPR32:%vreg19,%vreg10
	%vreg59<def,dead> = CMPrr_r32 %vreg19, %vreg33, %STATUS<imp-def>; GPR32:%vreg59,%vreg19,%vreg33
	BCC <BB#5>, 0, %STATUS<imp-use>
	BNONE32 <BB#6>, %STATUS<imp-use>
    Successors according to CFG: BB#5(0x04000000 / 0x80000000 = 3.12%) BB#6(0x7c000000 / 0x80000000 = 96.88%)

BB#9: derived from LLVM BB %for.body66
    Predecessors according to CFG: BB#5 BB#9
	%vreg21<def> = PHI %vreg6, <BB#5>, %vreg24, <BB#9>; GPR32:%vreg21,%vreg6,%vreg24
	%vreg22<def> = PHI %vreg35, <BB#5>, %vreg23, <BB#9>; GPR32:%vreg22,%vreg35,%vreg23
	%vreg62<def> = ADDrr_r32 %vreg36, %vreg22, %STATUS<imp-def,dead>; GPR32:%vreg62,%vreg36,%vreg22
	%vreg63<def> = LDRf32 %vreg62<kill>, 0; mem:LD4[%sunkaddr30](tbaa=!2) FPR32:%vreg63 GPR32:%vreg62
	%vreg24<def> = ADDri_r32 %vreg21, 4, %STATUS<imp-def,dead>; GPR32:%vreg24,%vreg21
	%vreg23<def> = ADDri_r32 %vreg22<kill>, 4, %STATUS<imp-def,dead>; GPR32:%vreg23,%vreg22
	%vreg64<def> = LDRf32 %vreg21, 0; mem:Volatile LD4[%lsr.iv24](tbaa=!2) FPR32:%vreg64 GPR32:%vreg21
	%vreg76<def> = LDRi32_r32 <fi#2>, 0; mem:LD4[FixedStack2] GPR32:%vreg76
	GID %CONFIG<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %vreg76<kill>; GPR32:%vreg76
	GIE %CONFIG<imp-def,dead>
	%vreg65<def> = FADDrr_r32 %vreg63<kill>, %vreg64<kill>, %STATUS<imp-def,dead>; FPR32:%vreg65,%vreg63,%vreg64
	%vreg66<def,dead> = CMPri_r32 %vreg23, 32, %STATUS<imp-def>; GPR32:%vreg66,%vreg23
	STRf32 %vreg65<kill>, %vreg21<kill>, 0; mem:Volatile ST4[%lsr.iv24](tbaa=!2) FPR32:%vreg65 GPR32:%vreg21
	BCC <BB#9>, 1, %STATUS<imp-use>
	BNONE32 <BB#10>, %STATUS<imp-use>
    Successors according to CFG: BB#10(0x04000000 / 0x80000000 = 3.12%) BB#9(0x7c000000 / 0x80000000 = 96.88%)

BB#10: derived from LLVM BB %for.end75
    Predecessors according to CFG: BB#9
	%vreg27<def> = ADDri_r32 %vreg6<kill>, 32, %STATUS<imp-def,dead>; GPR32:%vreg27,%vreg6
	%vreg26<def> = ADDri_r32 %vreg7<kill>, 32, %STATUS<imp-def,dead>; GPR32:%vreg26,%vreg7
	%vreg25<def> = ADDri_r32 %vreg8<kill>, 8, %STATUS<imp-def,dead>; GPR32:%vreg25,%vreg8
	%vreg67<def,dead> = CMPrr_r32 %vreg25, %vreg33, %STATUS<imp-def>; GPR32:%vreg67,%vreg25,%vreg33
	BCC <BB#4>, 8, %STATUS<imp-use>
	BNONE32 <BB#11>, %STATUS<imp-use>
    Successors according to CFG: BB#4(0x7c000000 / 0x80000000 = 96.88%) BB#11(0x04000000 / 0x80000000 = 3.12%)

BB#11: derived from LLVM BB %for.end78
    Predecessors according to CFG: BB#10
	%vreg29<def> = ADDrr_r32 %vreg3<kill>, %vreg1, %STATUS<imp-def,dead>; GPR32:%vreg29,%vreg3,%vreg1
	%vreg28<def> = ADDri_r32 %vreg4<kill>, 1, %STATUS<imp-def,dead>; GPR32:%vreg28,%vreg4
	%vreg68<def,dead> = CMPrr_r32 %vreg28, %vreg33, %STATUS<imp-def>; GPR32:%vreg68,%vreg28,%vreg33
	BCC <BB#3>, 1, %STATUS<imp-use>
	BNONE32 <BB#12>, %STATUS<imp-use>
    Successors according to CFG: BB#12(0x04000000 / 0x80000000 = 3.12%) BB#3(0x7c000000 / 0x80000000 = 96.88%)

BB#12: derived from LLVM BB %for.end81
    Predecessors according to CFG: BB#1 BB#11
	%vreg77<def> = LDRi32_r32 <fi#1>, 0; mem:LD4[FixedStack1] GPR32:%vreg77
	GID
	%CONFIG<def> = MOVTS32_core %vreg77<kill>; GPR32:%vreg77
	GIE %CONFIG<imp-use,kill>
	RTS

# End machine code for function matmac.

********** PROCESS IMPLICIT DEFS **********
********** Function: matmac
# *** IR Dump After Process Implicit Definitions ***:
# Machine code for function matmac: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=32, align=8, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=4, align=8, at location [SP]
Function Live Ins: %R0 in %vreg30, %R1 in %vreg31, %R2 in %vreg32, %R3 in %vreg33

BB#0: 
    Live Ins: %R0 %R1 %R2 %R3
	GID %CONFIG<imp-def>
	%vreg71<def> = MOVFS32_core %CONFIG; GPR32:%vreg71
	STRi32_r32 %vreg71, <fi#1>, 0; mem:ST4[FixedStack1] GPR32:%vreg71
	%vreg72<def> = MOVi32ri 65535; GPR32:%vreg72
	%vreg73<def,tied1> = MOVTi32ri %vreg72<kill,tied0>, 65521; GPR32:%vreg73,%vreg72
	%vreg69<def> = ANDrr_r32 %vreg71, %vreg73<kill>, %STATUS<imp-def>; GPR32:%vreg69,%vreg71,%vreg73
	%vreg70<def,tied1> = MOVTi32ri %vreg71<kill,tied0>, 72; GPR32:%vreg70,%vreg71
	%vreg78<def> = REG_SEQUENCE %vreg69, isub_lo, %vreg70, isub_hi; GPR64:%vreg78 GPR32:%vreg69,%vreg70
	STRi64 %vreg78, <fi#3>, 0; mem:ST4[FixedStack3] ST4[FixedStack2] GPR64:%vreg78
	GIE %CONFIG<imp-use,kill>
    Successors according to CFG: BB#1(?%)

BB#1: derived from LLVM BB %entry
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#0
	%vreg33<def> = COPY %R3<kill>; GPR32:%vreg33
	%vreg32<def> = COPY %R2<kill>; GPR32:%vreg32
	%vreg31<def> = COPY %R1<kill>; GPR32:%vreg31
	%vreg30<def> = COPY %R0<kill>; GPR32:%vreg30
	%vreg34<def,dead> = CMPri_r32 %vreg33, 1, %STATUS<imp-def>; GPR32:%vreg34,%vreg33
	BCC <BB#12>, 8, %STATUS<imp-use>
	BNONE32 <BB#2>, %STATUS<imp-use>
    Successors according to CFG: BB#2(0x50000000 / 0x80000000 = 62.50%) BB#12(0x30000000 / 0x80000000 = 37.50%)

BB#2: derived from LLVM BB %for.body3.lr.ph.preheader
    Predecessors according to CFG: BB#1
	%vreg1<def> = LSL32ri %vreg33, 2, %STATUS<imp-def,dead>; GPR32:%vreg1,%vreg33
	%vreg0<def> = ADDri_r32 %vreg31<kill>, 8, %STATUS<imp-def,dead>; GPR32:%vreg0,%vreg31
	%vreg36<def> = MOViPTR <fi#0>, 0; GPR32:%vreg36
	%vreg2<def> = ADDri_r32 %vreg36, 8, %STATUS<imp-def,dead>; GPR32:%vreg2,%vreg36
	%vreg35<def> = MOVi32ri 0; GPR32:%vreg35
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %for.body3.lr.ph
    Predecessors according to CFG: BB#2 BB#11
	%vreg3<def> = PHI %vreg32, <BB#2>, %vreg29, <BB#11>; GPR32:%vreg3,%vreg32,%vreg29
	%vreg4<def> = PHI %vreg35, <BB#2>, %vreg28, <BB#11>; GPR32:%vreg4,%vreg35,%vreg28
	%vreg74<def> = LDRi32_r32 <fi#3>, 0; mem:LD4[FixedStack3] GPR32:%vreg74
	GID %CONFIG<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %vreg74<kill>; GPR32:%vreg74
	GIE %CONFIG<imp-def,dead>
	%vreg38<def> = IMULrr_r32 %vreg4, %vreg33, %STATUS<imp-def,dead>; GPR32:%vreg38,%vreg4,%vreg33
	%vreg39<def> = LSL32ri %vreg38<kill>, 2, %STATUS<imp-def,dead>; GPR32:%vreg39,%vreg38
	%vreg5<def> = ADDrr_r32 %vreg30, %vreg39<kill>, %STATUS<imp-def,dead>; GPR32:%vreg5,%vreg30,%vreg39
    Successors according to CFG: BB#4(?%)

BB#4: derived from LLVM BB %for.body9.preheader
    Predecessors according to CFG: BB#3 BB#10
	%vreg6<def> = PHI %vreg3, <BB#3>, %vreg27, <BB#10>; GPR32:%vreg6,%vreg3,%vreg27
	%vreg7<def> = PHI %vreg0, <BB#3>, %vreg26, <BB#10>; GPR32:%vreg7,%vreg0,%vreg26
	%vreg8<def> = PHI %vreg35, <BB#3>, %vreg25, <BB#10>; GPR32:%vreg8,%vreg35,%vreg25
	%vreg42<def> = REG_SEQUENCE %vreg35, isub_hi, %vreg35, isub_lo; FPR64_with_isub_hi_in_FPR32:%vreg42 GPR32:%vreg35
	STRi64 %vreg42, <fi#0>, 24; mem:ST8[%1+24] FPR64_with_isub_hi_in_FPR32:%vreg42
	STRi64 %vreg42, <fi#0>, 16; mem:ST8[%1+16] FPR64_with_isub_hi_in_FPR32:%vreg42
	STRi64 %vreg42, <fi#0>, 8; mem:ST8[%1+8] FPR64_with_isub_hi_in_FPR32:%vreg42
	STRi64 %vreg42<kill>, <fi#0>, 0; mem:ST8[%1] FPR64_with_isub_hi_in_FPR32:%vreg42
	BNONE32 <BB#6>, %STATUS<imp-use>
    Successors according to CFG: BB#6(?%)

BB#5: derived from LLVM BB %for.cond64.preheader
    Predecessors according to CFG: BB#8
	BNONE32 <BB#9>, %STATUS<imp-use>
    Successors according to CFG: BB#9(?%)

BB#6: derived from LLVM BB %for.body9
    Predecessors according to CFG: BB#4 BB#8
	%vreg9<def> = PHI %vreg7, <BB#4>, %vreg20, <BB#8>; GPR32:%vreg9,%vreg7,%vreg20
	%vreg10<def> = PHI %vreg35, <BB#4>, %vreg19, <BB#8>; GPR32:%vreg10,%vreg35,%vreg19
	%vreg44<def> = LSL32ri %vreg10, 2, %STATUS<imp-def,dead>; GPR32:%vreg44,%vreg10
	%vreg45<def> = ADDrr_r32 %vreg5, %vreg44<kill>, %STATUS<imp-def,dead>; GPR32:%vreg45,%vreg5,%vreg44
	%vreg11<def> = COPY %vreg2; GPR32:%vreg11,%vreg2
	%vreg12<def> = LDRf32 %vreg45<kill>, 0; mem:Volatile LD4[%add.ptr10](tbaa=!2) FPR32:%vreg12 GPR32:%vreg45
    Successors according to CFG: BB#7(?%)

BB#7: derived from LLVM BB %for.body13
    Predecessors according to CFG: BB#6 BB#7
	%vreg13<def> = PHI %vreg11, <BB#6>, %vreg18, <BB#7>; GPR32:%vreg13,%vreg11,%vreg18
	%vreg14<def> = PHI %vreg9, <BB#6>, %vreg17, <BB#7>; GPR32:%vreg14,%vreg9,%vreg17
	%vreg15<def> = PHI %vreg35, <BB#6>, %vreg16, <BB#7>; GPR32:%vreg15,%vreg35,%vreg16
	%vreg46<def> = LDRf32 %vreg14, -8; mem:Volatile LD4[%scevgep8](tbaa=!2) FPR32:%vreg46 GPR32:%vreg14
	%vreg18<def> = ADDri_r32 %vreg13, 16, %STATUS<imp-def,dead>; GPR32:%vreg18,%vreg13
	%vreg17<def> = ADDri_r32 %vreg14, 16, %STATUS<imp-def,dead>; GPR32:%vreg17,%vreg14
	%vreg47<def> = LDRf32 %vreg14, -4; mem:Volatile LD4[%scevgep9](tbaa=!2) FPR32:%vreg47 GPR32:%vreg14
	%vreg16<def> = ADDri_r32 %vreg15<kill>, 4, %STATUS<imp-def,dead>; GPR32:%vreg16,%vreg15
	%vreg48<def> = LDRf32 %vreg14, 0; mem:Volatile LD4[%lsr.iv5](tbaa=!2) FPR32:%vreg48 GPR32:%vreg14
	%vreg49<def> = LDRf32 %vreg14<kill>, 4; mem:Volatile LD4[%scevgep7](tbaa=!2) FPR32:%vreg49 GPR32:%vreg14
	%vreg79<def> = LDRf64 %vreg13, -8; mem:LD4[%scevgep17](tbaa=!2) LD4[%scevgep15](tbaa=!2) FPR64:%vreg79 GPR32:%vreg13
	%vreg50<def> = COPY %vreg79:isub_hi; FPR32:%vreg50 FPR64:%vreg79
	%vreg52<def> = COPY %vreg79:isub_lo; FPR32:%vreg52 FPR64:%vreg79
	%vreg75<def> = LDRi32_r32 <fi#2>, 0; mem:LD4[FixedStack2] GPR32:%vreg75
	GID %CONFIG<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %vreg75<kill>; GPR32:%vreg75
	GIE %CONFIG<imp-def,dead>
	%vreg51<def,tied1> = FMADDrr_r32 %vreg50<kill,tied0>, %vreg12, %vreg46<kill>, %STATUS<imp-def,dead>; FPR32:%vreg51,%vreg50,%vreg12,%vreg46
	%vreg53<def,tied1> = FMADDrr_r32 %vreg52<kill,tied0>, %vreg12, %vreg47<kill>, %STATUS<imp-def,dead>; FPR32:%vreg53,%vreg52,%vreg12,%vreg47
	%vreg80<def> = REG_SEQUENCE %vreg51, isub_lo, %vreg53, isub_hi; FPR64:%vreg80 FPR32:%vreg51,%vreg53
	STRf64 %vreg80, %vreg13, -8; mem:ST4[%scevgep17](tbaa=!2) ST4[%scevgep15](tbaa=!2) FPR64:%vreg80 GPR32:%vreg13
	%vreg54<def> = LDRf32 %vreg13, 0; mem:LD4[%lsr.iv1214](tbaa=!2) FPR32:%vreg54 GPR32:%vreg13
	%vreg55<def,tied1> = FMADDrr_r32 %vreg54<kill,tied0>, %vreg12, %vreg48<kill>, %STATUS<imp-def,dead>; FPR32:%vreg55,%vreg54,%vreg12,%vreg48
	STRf32 %vreg55<kill>, %vreg13, 0; mem:ST4[%lsr.iv1214](tbaa=!2) FPR32:%vreg55 GPR32:%vreg13
	%vreg56<def> = LDRf32 %vreg13, 4; mem:LD4[%scevgep16](tbaa=!2) FPR32:%vreg56 GPR32:%vreg13
	%vreg57<def,tied1> = FMADDrr_r32 %vreg56<kill,tied0>, %vreg12, %vreg49<kill>, %STATUS<imp-def,dead>; FPR32:%vreg57,%vreg56,%vreg12,%vreg49
	%vreg58<def,dead> = CMPri_r32 %vreg16, 8, %STATUS<imp-def>; GPR32:%vreg58,%vreg16
	STRf32 %vreg57<kill>, %vreg13<kill>, 4; mem:ST4[%scevgep16](tbaa=!2) FPR32:%vreg57 GPR32:%vreg13
	BCC <BB#7>, 8, %STATUS<imp-use>
	BNONE32 <BB#8>, %STATUS<imp-use>
    Successors according to CFG: BB#7(0x7c000000 / 0x80000000 = 96.88%) BB#8(0x04000000 / 0x80000000 = 3.12%)

BB#8: derived from LLVM BB %for.end60
    Predecessors according to CFG: BB#7
	%vreg20<def> = ADDrr_r32 %vreg9<kill>, %vreg1, %STATUS<imp-def,dead>; GPR32:%vreg20,%vreg9,%vreg1
	%vreg19<def> = ADDri_r32 %vreg10<kill>, 1, %STATUS<imp-def,dead>; GPR32:%vreg19,%vreg10
	%vreg59<def,dead> = CMPrr_r32 %vreg19, %vreg33, %STATUS<imp-def>; GPR32:%vreg59,%vreg19,%vreg33
	BCC <BB#5>, 0, %STATUS<imp-use>
	BNONE32 <BB#6>, %STATUS<imp-use>
    Successors according to CFG: BB#5(0x04000000 / 0x80000000 = 3.12%) BB#6(0x7c000000 / 0x80000000 = 96.88%)

BB#9: derived from LLVM BB %for.body66
    Predecessors according to CFG: BB#5 BB#9
	%vreg21<def> = PHI %vreg6, <BB#5>, %vreg24, <BB#9>; GPR32:%vreg21,%vreg6,%vreg24
	%vreg22<def> = PHI %vreg35, <BB#5>, %vreg23, <BB#9>; GPR32:%vreg22,%vreg35,%vreg23
	%vreg62<def> = ADDrr_r32 %vreg36, %vreg22, %STATUS<imp-def,dead>; GPR32:%vreg62,%vreg36,%vreg22
	%vreg63<def> = LDRf32 %vreg62<kill>, 0; mem:LD4[%sunkaddr30](tbaa=!2) FPR32:%vreg63 GPR32:%vreg62
	%vreg24<def> = ADDri_r32 %vreg21, 4, %STATUS<imp-def,dead>; GPR32:%vreg24,%vreg21
	%vreg23<def> = ADDri_r32 %vreg22<kill>, 4, %STATUS<imp-def,dead>; GPR32:%vreg23,%vreg22
	%vreg64<def> = LDRf32 %vreg21, 0; mem:Volatile LD4[%lsr.iv24](tbaa=!2) FPR32:%vreg64 GPR32:%vreg21
	%vreg76<def> = LDRi32_r32 <fi#2>, 0; mem:LD4[FixedStack2] GPR32:%vreg76
	GID %CONFIG<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %vreg76<kill>; GPR32:%vreg76
	GIE %CONFIG<imp-def,dead>
	%vreg65<def> = FADDrr_r32 %vreg63<kill>, %vreg64<kill>, %STATUS<imp-def,dead>; FPR32:%vreg65,%vreg63,%vreg64
	%vreg66<def,dead> = CMPri_r32 %vreg23, 32, %STATUS<imp-def>; GPR32:%vreg66,%vreg23
	STRf32 %vreg65<kill>, %vreg21<kill>, 0; mem:Volatile ST4[%lsr.iv24](tbaa=!2) FPR32:%vreg65 GPR32:%vreg21
	BCC <BB#9>, 1, %STATUS<imp-use>
	BNONE32 <BB#10>, %STATUS<imp-use>
    Successors according to CFG: BB#10(0x04000000 / 0x80000000 = 3.12%) BB#9(0x7c000000 / 0x80000000 = 96.88%)

BB#10: derived from LLVM BB %for.end75
    Predecessors according to CFG: BB#9
	%vreg27<def> = ADDri_r32 %vreg6<kill>, 32, %STATUS<imp-def,dead>; GPR32:%vreg27,%vreg6
	%vreg26<def> = ADDri_r32 %vreg7<kill>, 32, %STATUS<imp-def,dead>; GPR32:%vreg26,%vreg7
	%vreg25<def> = ADDri_r32 %vreg8<kill>, 8, %STATUS<imp-def,dead>; GPR32:%vreg25,%vreg8
	%vreg67<def,dead> = CMPrr_r32 %vreg25, %vreg33, %STATUS<imp-def>; GPR32:%vreg67,%vreg25,%vreg33
	BCC <BB#4>, 8, %STATUS<imp-use>
	BNONE32 <BB#11>, %STATUS<imp-use>
    Successors according to CFG: BB#4(0x7c000000 / 0x80000000 = 96.88%) BB#11(0x04000000 / 0x80000000 = 3.12%)

BB#11: derived from LLVM BB %for.end78
    Predecessors according to CFG: BB#10
	%vreg29<def> = ADDrr_r32 %vreg3<kill>, %vreg1, %STATUS<imp-def,dead>; GPR32:%vreg29,%vreg3,%vreg1
	%vreg28<def> = ADDri_r32 %vreg4<kill>, 1, %STATUS<imp-def,dead>; GPR32:%vreg28,%vreg4
	%vreg68<def,dead> = CMPrr_r32 %vreg28, %vreg33, %STATUS<imp-def>; GPR32:%vreg68,%vreg28,%vreg33
	BCC <BB#3>, 1, %STATUS<imp-use>
	BNONE32 <BB#12>, %STATUS<imp-use>
    Successors according to CFG: BB#12(0x04000000 / 0x80000000 = 3.12%) BB#3(0x7c000000 / 0x80000000 = 96.88%)

BB#12: derived from LLVM BB %for.end81
    Predecessors according to CFG: BB#1 BB#11
	%vreg77<def> = LDRi32_r32 <fi#1>, 0; mem:LD4[FixedStack1] GPR32:%vreg77
	GID
	%CONFIG<def> = MOVTS32_core %vreg77<kill>; GPR32:%vreg77
	GIE %CONFIG<imp-use,kill>
	RTS

# End machine code for function matmac.

# *** IR Dump Before Remove unreachable machine basic blocks ***:
# Machine code for function matmac: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=32, align=8, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=4, align=8, at location [SP]
Function Live Ins: %R0 in %vreg30, %R1 in %vreg31, %R2 in %vreg32, %R3 in %vreg33

BB#0: 
    Live Ins: %R0 %R1 %R2 %R3
	GID %CONFIG<imp-def>
	%vreg71<def> = MOVFS32_core %CONFIG; GPR32:%vreg71
	STRi32_r32 %vreg71, <fi#1>, 0; mem:ST4[FixedStack1] GPR32:%vreg71
	%vreg72<def> = MOVi32ri 65535; GPR32:%vreg72
	%vreg73<def,tied1> = MOVTi32ri %vreg72<kill,tied0>, 65521; GPR32:%vreg73,%vreg72
	%vreg69<def> = ANDrr_r32 %vreg71, %vreg73<kill>, %STATUS<imp-def>; GPR32:%vreg69,%vreg71,%vreg73
	%vreg70<def,tied1> = MOVTi32ri %vreg71<kill,tied0>, 72; GPR32:%vreg70,%vreg71
	%vreg78<def> = REG_SEQUENCE %vreg69, isub_lo, %vreg70, isub_hi; GPR64:%vreg78 GPR32:%vreg69,%vreg70
	STRi64 %vreg78, <fi#3>, 0; mem:ST4[FixedStack3] ST4[FixedStack2] GPR64:%vreg78
	GIE %CONFIG<imp-use,kill>
    Successors according to CFG: BB#1(?%)

BB#1: derived from LLVM BB %entry
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#0
	%vreg33<def> = COPY %R3<kill>; GPR32:%vreg33
	%vreg32<def> = COPY %R2<kill>; GPR32:%vreg32
	%vreg31<def> = COPY %R1<kill>; GPR32:%vreg31
	%vreg30<def> = COPY %R0<kill>; GPR32:%vreg30
	%vreg34<def,dead> = CMPri_r32 %vreg33, 1, %STATUS<imp-def>; GPR32:%vreg34,%vreg33
	BCC <BB#12>, 8, %STATUS<imp-use>
	BNONE32 <BB#2>, %STATUS<imp-use>
    Successors according to CFG: BB#2(0x50000000 / 0x80000000 = 62.50%) BB#12(0x30000000 / 0x80000000 = 37.50%)

BB#2: derived from LLVM BB %for.body3.lr.ph.preheader
    Predecessors according to CFG: BB#1
	%vreg1<def> = LSL32ri %vreg33, 2, %STATUS<imp-def,dead>; GPR32:%vreg1,%vreg33
	%vreg0<def> = ADDri_r32 %vreg31<kill>, 8, %STATUS<imp-def,dead>; GPR32:%vreg0,%vreg31
	%vreg36<def> = MOViPTR <fi#0>, 0; GPR32:%vreg36
	%vreg2<def> = ADDri_r32 %vreg36, 8, %STATUS<imp-def,dead>; GPR32:%vreg2,%vreg36
	%vreg35<def> = MOVi32ri 0; GPR32:%vreg35
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %for.body3.lr.ph
    Predecessors according to CFG: BB#2 BB#11
	%vreg3<def> = PHI %vreg32, <BB#2>, %vreg29, <BB#11>; GPR32:%vreg3,%vreg32,%vreg29
	%vreg4<def> = PHI %vreg35, <BB#2>, %vreg28, <BB#11>; GPR32:%vreg4,%vreg35,%vreg28
	%vreg74<def> = LDRi32_r32 <fi#3>, 0; mem:LD4[FixedStack3] GPR32:%vreg74
	GID %CONFIG<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %vreg74<kill>; GPR32:%vreg74
	GIE %CONFIG<imp-def,dead>
	%vreg38<def> = IMULrr_r32 %vreg4, %vreg33, %STATUS<imp-def,dead>; GPR32:%vreg38,%vreg4,%vreg33
	%vreg39<def> = LSL32ri %vreg38<kill>, 2, %STATUS<imp-def,dead>; GPR32:%vreg39,%vreg38
	%vreg5<def> = ADDrr_r32 %vreg30, %vreg39<kill>, %STATUS<imp-def,dead>; GPR32:%vreg5,%vreg30,%vreg39
    Successors according to CFG: BB#4(?%)

BB#4: derived from LLVM BB %for.body9.preheader
    Predecessors according to CFG: BB#3 BB#10
	%vreg6<def> = PHI %vreg3, <BB#3>, %vreg27, <BB#10>; GPR32:%vreg6,%vreg3,%vreg27
	%vreg7<def> = PHI %vreg0, <BB#3>, %vreg26, <BB#10>; GPR32:%vreg7,%vreg0,%vreg26
	%vreg8<def> = PHI %vreg35, <BB#3>, %vreg25, <BB#10>; GPR32:%vreg8,%vreg35,%vreg25
	%vreg42<def> = REG_SEQUENCE %vreg35, isub_hi, %vreg35, isub_lo; FPR64_with_isub_hi_in_FPR32:%vreg42 GPR32:%vreg35
	STRi64 %vreg42, <fi#0>, 24; mem:ST8[%1+24] FPR64_with_isub_hi_in_FPR32:%vreg42
	STRi64 %vreg42, <fi#0>, 16; mem:ST8[%1+16] FPR64_with_isub_hi_in_FPR32:%vreg42
	STRi64 %vreg42, <fi#0>, 8; mem:ST8[%1+8] FPR64_with_isub_hi_in_FPR32:%vreg42
	STRi64 %vreg42<kill>, <fi#0>, 0; mem:ST8[%1] FPR64_with_isub_hi_in_FPR32:%vreg42
	BNONE32 <BB#6>, %STATUS<imp-use>
    Successors according to CFG: BB#6(?%)

BB#5: derived from LLVM BB %for.cond64.preheader
    Predecessors according to CFG: BB#8
	BNONE32 <BB#9>, %STATUS<imp-use>
    Successors according to CFG: BB#9(?%)

BB#6: derived from LLVM BB %for.body9
    Predecessors according to CFG: BB#4 BB#8
	%vreg9<def> = PHI %vreg7, <BB#4>, %vreg20, <BB#8>; GPR32:%vreg9,%vreg7,%vreg20
	%vreg10<def> = PHI %vreg35, <BB#4>, %vreg19, <BB#8>; GPR32:%vreg10,%vreg35,%vreg19
	%vreg44<def> = LSL32ri %vreg10, 2, %STATUS<imp-def,dead>; GPR32:%vreg44,%vreg10
	%vreg45<def> = ADDrr_r32 %vreg5, %vreg44<kill>, %STATUS<imp-def,dead>; GPR32:%vreg45,%vreg5,%vreg44
	%vreg11<def> = COPY %vreg2; GPR32:%vreg11,%vreg2
	%vreg12<def> = LDRf32 %vreg45<kill>, 0; mem:Volatile LD4[%add.ptr10](tbaa=!2) FPR32:%vreg12 GPR32:%vreg45
    Successors according to CFG: BB#7(?%)

BB#7: derived from LLVM BB %for.body13
    Predecessors according to CFG: BB#6 BB#7
	%vreg13<def> = PHI %vreg11, <BB#6>, %vreg18, <BB#7>; GPR32:%vreg13,%vreg11,%vreg18
	%vreg14<def> = PHI %vreg9, <BB#6>, %vreg17, <BB#7>; GPR32:%vreg14,%vreg9,%vreg17
	%vreg15<def> = PHI %vreg35, <BB#6>, %vreg16, <BB#7>; GPR32:%vreg15,%vreg35,%vreg16
	%vreg46<def> = LDRf32 %vreg14, -8; mem:Volatile LD4[%scevgep8](tbaa=!2) FPR32:%vreg46 GPR32:%vreg14
	%vreg18<def> = ADDri_r32 %vreg13, 16, %STATUS<imp-def,dead>; GPR32:%vreg18,%vreg13
	%vreg17<def> = ADDri_r32 %vreg14, 16, %STATUS<imp-def,dead>; GPR32:%vreg17,%vreg14
	%vreg47<def> = LDRf32 %vreg14, -4; mem:Volatile LD4[%scevgep9](tbaa=!2) FPR32:%vreg47 GPR32:%vreg14
	%vreg16<def> = ADDri_r32 %vreg15<kill>, 4, %STATUS<imp-def,dead>; GPR32:%vreg16,%vreg15
	%vreg48<def> = LDRf32 %vreg14, 0; mem:Volatile LD4[%lsr.iv5](tbaa=!2) FPR32:%vreg48 GPR32:%vreg14
	%vreg49<def> = LDRf32 %vreg14<kill>, 4; mem:Volatile LD4[%scevgep7](tbaa=!2) FPR32:%vreg49 GPR32:%vreg14
	%vreg79<def> = LDRf64 %vreg13, -8; mem:LD4[%scevgep17](tbaa=!2) LD4[%scevgep15](tbaa=!2) FPR64:%vreg79 GPR32:%vreg13
	%vreg50<def> = COPY %vreg79:isub_hi; FPR32:%vreg50 FPR64:%vreg79
	%vreg52<def> = COPY %vreg79:isub_lo; FPR32:%vreg52 FPR64:%vreg79
	%vreg75<def> = LDRi32_r32 <fi#2>, 0; mem:LD4[FixedStack2] GPR32:%vreg75
	GID %CONFIG<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %vreg75<kill>; GPR32:%vreg75
	GIE %CONFIG<imp-def,dead>
	%vreg51<def,tied1> = FMADDrr_r32 %vreg50<kill,tied0>, %vreg12, %vreg46<kill>, %STATUS<imp-def,dead>; FPR32:%vreg51,%vreg50,%vreg12,%vreg46
	%vreg53<def,tied1> = FMADDrr_r32 %vreg52<kill,tied0>, %vreg12, %vreg47<kill>, %STATUS<imp-def,dead>; FPR32:%vreg53,%vreg52,%vreg12,%vreg47
	%vreg80<def> = REG_SEQUENCE %vreg51, isub_lo, %vreg53, isub_hi; FPR64:%vreg80 FPR32:%vreg51,%vreg53
	STRf64 %vreg80, %vreg13, -8; mem:ST4[%scevgep17](tbaa=!2) ST4[%scevgep15](tbaa=!2) FPR64:%vreg80 GPR32:%vreg13
	%vreg54<def> = LDRf32 %vreg13, 0; mem:LD4[%lsr.iv1214](tbaa=!2) FPR32:%vreg54 GPR32:%vreg13
	%vreg55<def,tied1> = FMADDrr_r32 %vreg54<kill,tied0>, %vreg12, %vreg48<kill>, %STATUS<imp-def,dead>; FPR32:%vreg55,%vreg54,%vreg12,%vreg48
	STRf32 %vreg55<kill>, %vreg13, 0; mem:ST4[%lsr.iv1214](tbaa=!2) FPR32:%vreg55 GPR32:%vreg13
	%vreg56<def> = LDRf32 %vreg13, 4; mem:LD4[%scevgep16](tbaa=!2) FPR32:%vreg56 GPR32:%vreg13
	%vreg57<def,tied1> = FMADDrr_r32 %vreg56<kill,tied0>, %vreg12, %vreg49<kill>, %STATUS<imp-def,dead>; FPR32:%vreg57,%vreg56,%vreg12,%vreg49
	%vreg58<def,dead> = CMPri_r32 %vreg16, 8, %STATUS<imp-def>; GPR32:%vreg58,%vreg16
	STRf32 %vreg57<kill>, %vreg13<kill>, 4; mem:ST4[%scevgep16](tbaa=!2) FPR32:%vreg57 GPR32:%vreg13
	BCC <BB#7>, 8, %STATUS<imp-use>
	BNONE32 <BB#8>, %STATUS<imp-use>
    Successors according to CFG: BB#7(0x7c000000 / 0x80000000 = 96.88%) BB#8(0x04000000 / 0x80000000 = 3.12%)

BB#8: derived from LLVM BB %for.end60
    Predecessors according to CFG: BB#7
	%vreg20<def> = ADDrr_r32 %vreg9<kill>, %vreg1, %STATUS<imp-def,dead>; GPR32:%vreg20,%vreg9,%vreg1
	%vreg19<def> = ADDri_r32 %vreg10<kill>, 1, %STATUS<imp-def,dead>; GPR32:%vreg19,%vreg10
	%vreg59<def,dead> = CMPrr_r32 %vreg19, %vreg33, %STATUS<imp-def>; GPR32:%vreg59,%vreg19,%vreg33
	BCC <BB#5>, 0, %STATUS<imp-use>
	BNONE32 <BB#6>, %STATUS<imp-use>
    Successors according to CFG: BB#5(0x04000000 / 0x80000000 = 3.12%) BB#6(0x7c000000 / 0x80000000 = 96.88%)

BB#9: derived from LLVM BB %for.body66
    Predecessors according to CFG: BB#5 BB#9
	%vreg21<def> = PHI %vreg6, <BB#5>, %vreg24, <BB#9>; GPR32:%vreg21,%vreg6,%vreg24
	%vreg22<def> = PHI %vreg35, <BB#5>, %vreg23, <BB#9>; GPR32:%vreg22,%vreg35,%vreg23
	%vreg62<def> = ADDrr_r32 %vreg36, %vreg22, %STATUS<imp-def,dead>; GPR32:%vreg62,%vreg36,%vreg22
	%vreg63<def> = LDRf32 %vreg62<kill>, 0; mem:LD4[%sunkaddr30](tbaa=!2) FPR32:%vreg63 GPR32:%vreg62
	%vreg24<def> = ADDri_r32 %vreg21, 4, %STATUS<imp-def,dead>; GPR32:%vreg24,%vreg21
	%vreg23<def> = ADDri_r32 %vreg22<kill>, 4, %STATUS<imp-def,dead>; GPR32:%vreg23,%vreg22
	%vreg64<def> = LDRf32 %vreg21, 0; mem:Volatile LD4[%lsr.iv24](tbaa=!2) FPR32:%vreg64 GPR32:%vreg21
	%vreg76<def> = LDRi32_r32 <fi#2>, 0; mem:LD4[FixedStack2] GPR32:%vreg76
	GID %CONFIG<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %vreg76<kill>; GPR32:%vreg76
	GIE %CONFIG<imp-def,dead>
	%vreg65<def> = FADDrr_r32 %vreg63<kill>, %vreg64<kill>, %STATUS<imp-def,dead>; FPR32:%vreg65,%vreg63,%vreg64
	%vreg66<def,dead> = CMPri_r32 %vreg23, 32, %STATUS<imp-def>; GPR32:%vreg66,%vreg23
	STRf32 %vreg65<kill>, %vreg21<kill>, 0; mem:Volatile ST4[%lsr.iv24](tbaa=!2) FPR32:%vreg65 GPR32:%vreg21
	BCC <BB#9>, 1, %STATUS<imp-use>
	BNONE32 <BB#10>, %STATUS<imp-use>
    Successors according to CFG: BB#10(0x04000000 / 0x80000000 = 3.12%) BB#9(0x7c000000 / 0x80000000 = 96.88%)

BB#10: derived from LLVM BB %for.end75
    Predecessors according to CFG: BB#9
	%vreg27<def> = ADDri_r32 %vreg6<kill>, 32, %STATUS<imp-def,dead>; GPR32:%vreg27,%vreg6
	%vreg26<def> = ADDri_r32 %vreg7<kill>, 32, %STATUS<imp-def,dead>; GPR32:%vreg26,%vreg7
	%vreg25<def> = ADDri_r32 %vreg8<kill>, 8, %STATUS<imp-def,dead>; GPR32:%vreg25,%vreg8
	%vreg67<def,dead> = CMPrr_r32 %vreg25, %vreg33, %STATUS<imp-def>; GPR32:%vreg67,%vreg25,%vreg33
	BCC <BB#4>, 8, %STATUS<imp-use>
	BNONE32 <BB#11>, %STATUS<imp-use>
    Successors according to CFG: BB#4(0x7c000000 / 0x80000000 = 96.88%) BB#11(0x04000000 / 0x80000000 = 3.12%)

BB#11: derived from LLVM BB %for.end78
    Predecessors according to CFG: BB#10
	%vreg29<def> = ADDrr_r32 %vreg3<kill>, %vreg1, %STATUS<imp-def,dead>; GPR32:%vreg29,%vreg3,%vreg1
	%vreg28<def> = ADDri_r32 %vreg4<kill>, 1, %STATUS<imp-def,dead>; GPR32:%vreg28,%vreg4
	%vreg68<def,dead> = CMPrr_r32 %vreg28, %vreg33, %STATUS<imp-def>; GPR32:%vreg68,%vreg28,%vreg33
	BCC <BB#3>, 1, %STATUS<imp-use>
	BNONE32 <BB#12>, %STATUS<imp-use>
    Successors according to CFG: BB#12(0x04000000 / 0x80000000 = 3.12%) BB#3(0x7c000000 / 0x80000000 = 96.88%)

BB#12: derived from LLVM BB %for.end81
    Predecessors according to CFG: BB#1 BB#11
	%vreg77<def> = LDRi32_r32 <fi#1>, 0; mem:LD4[FixedStack1] GPR32:%vreg77
	GID
	%CONFIG<def> = MOVTS32_core %vreg77<kill>; GPR32:%vreg77
	GIE %CONFIG<imp-use,kill>
	RTS

# End machine code for function matmac.

# *** IR Dump After Remove unreachable machine basic blocks ***:
# Machine code for function matmac: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=32, align=8, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=4, align=8, at location [SP]
Function Live Ins: %R0 in %vreg30, %R1 in %vreg31, %R2 in %vreg32, %R3 in %vreg33

BB#0: 
    Live Ins: %R0 %R1 %R2 %R3
	GID %CONFIG<imp-def>
	%vreg71<def> = MOVFS32_core %CONFIG; GPR32:%vreg71
	STRi32_r32 %vreg71, <fi#1>, 0; mem:ST4[FixedStack1] GPR32:%vreg71
	%vreg72<def> = MOVi32ri 65535; GPR32:%vreg72
	%vreg73<def,tied1> = MOVTi32ri %vreg72<kill,tied0>, 65521; GPR32:%vreg73,%vreg72
	%vreg69<def> = ANDrr_r32 %vreg71, %vreg73<kill>, %STATUS<imp-def>; GPR32:%vreg69,%vreg71,%vreg73
	%vreg70<def,tied1> = MOVTi32ri %vreg71<kill,tied0>, 72; GPR32:%vreg70,%vreg71
	%vreg78<def> = REG_SEQUENCE %vreg69, isub_lo, %vreg70, isub_hi; GPR64:%vreg78 GPR32:%vreg69,%vreg70
	STRi64 %vreg78, <fi#3>, 0; mem:ST4[FixedStack3] ST4[FixedStack2] GPR64:%vreg78
	GIE %CONFIG<imp-use,kill>
    Successors according to CFG: BB#1(?%)

BB#1: derived from LLVM BB %entry
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#0
	%vreg33<def> = COPY %R3<kill>; GPR32:%vreg33
	%vreg32<def> = COPY %R2<kill>; GPR32:%vreg32
	%vreg31<def> = COPY %R1<kill>; GPR32:%vreg31
	%vreg30<def> = COPY %R0<kill>; GPR32:%vreg30
	%vreg34<def,dead> = CMPri_r32 %vreg33, 1, %STATUS<imp-def>; GPR32:%vreg34,%vreg33
	BCC <BB#12>, 8, %STATUS<imp-use>
	BNONE32 <BB#2>, %STATUS<imp-use>
    Successors according to CFG: BB#2(0x50000000 / 0x80000000 = 62.50%) BB#12(0x30000000 / 0x80000000 = 37.50%)

BB#2: derived from LLVM BB %for.body3.lr.ph.preheader
    Predecessors according to CFG: BB#1
	%vreg1<def> = LSL32ri %vreg33, 2, %STATUS<imp-def,dead>; GPR32:%vreg1,%vreg33
	%vreg0<def> = ADDri_r32 %vreg31<kill>, 8, %STATUS<imp-def,dead>; GPR32:%vreg0,%vreg31
	%vreg36<def> = MOViPTR <fi#0>, 0; GPR32:%vreg36
	%vreg2<def> = ADDri_r32 %vreg36, 8, %STATUS<imp-def,dead>; GPR32:%vreg2,%vreg36
	%vreg35<def> = MOVi32ri 0; GPR32:%vreg35
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %for.body3.lr.ph
    Predecessors according to CFG: BB#2 BB#11
	%vreg3<def> = PHI %vreg32, <BB#2>, %vreg29, <BB#11>; GPR32:%vreg3,%vreg32,%vreg29
	%vreg4<def> = PHI %vreg35, <BB#2>, %vreg28, <BB#11>; GPR32:%vreg4,%vreg35,%vreg28
	%vreg74<def> = LDRi32_r32 <fi#3>, 0; mem:LD4[FixedStack3] GPR32:%vreg74
	GID %CONFIG<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %vreg74<kill>; GPR32:%vreg74
	GIE %CONFIG<imp-def,dead>
	%vreg38<def> = IMULrr_r32 %vreg4, %vreg33, %STATUS<imp-def,dead>; GPR32:%vreg38,%vreg4,%vreg33
	%vreg39<def> = LSL32ri %vreg38<kill>, 2, %STATUS<imp-def,dead>; GPR32:%vreg39,%vreg38
	%vreg5<def> = ADDrr_r32 %vreg30, %vreg39<kill>, %STATUS<imp-def,dead>; GPR32:%vreg5,%vreg30,%vreg39
    Successors according to CFG: BB#4(?%)

BB#4: derived from LLVM BB %for.body9.preheader
    Predecessors according to CFG: BB#3 BB#10
	%vreg6<def> = PHI %vreg3, <BB#3>, %vreg27, <BB#10>; GPR32:%vreg6,%vreg3,%vreg27
	%vreg7<def> = PHI %vreg0, <BB#3>, %vreg26, <BB#10>; GPR32:%vreg7,%vreg0,%vreg26
	%vreg8<def> = PHI %vreg35, <BB#3>, %vreg25, <BB#10>; GPR32:%vreg8,%vreg35,%vreg25
	%vreg42<def> = REG_SEQUENCE %vreg35, isub_hi, %vreg35, isub_lo; FPR64_with_isub_hi_in_FPR32:%vreg42 GPR32:%vreg35
	STRi64 %vreg42, <fi#0>, 24; mem:ST8[%1+24] FPR64_with_isub_hi_in_FPR32:%vreg42
	STRi64 %vreg42, <fi#0>, 16; mem:ST8[%1+16] FPR64_with_isub_hi_in_FPR32:%vreg42
	STRi64 %vreg42, <fi#0>, 8; mem:ST8[%1+8] FPR64_with_isub_hi_in_FPR32:%vreg42
	STRi64 %vreg42<kill>, <fi#0>, 0; mem:ST8[%1] FPR64_with_isub_hi_in_FPR32:%vreg42
	BNONE32 <BB#6>, %STATUS<imp-use>
    Successors according to CFG: BB#6(?%)

BB#5: derived from LLVM BB %for.cond64.preheader
    Predecessors according to CFG: BB#8
	BNONE32 <BB#9>, %STATUS<imp-use>
    Successors according to CFG: BB#9(?%)

BB#6: derived from LLVM BB %for.body9
    Predecessors according to CFG: BB#4 BB#8
	%vreg9<def> = PHI %vreg7, <BB#4>, %vreg20, <BB#8>; GPR32:%vreg9,%vreg7,%vreg20
	%vreg10<def> = PHI %vreg35, <BB#4>, %vreg19, <BB#8>; GPR32:%vreg10,%vreg35,%vreg19
	%vreg44<def> = LSL32ri %vreg10, 2, %STATUS<imp-def,dead>; GPR32:%vreg44,%vreg10
	%vreg45<def> = ADDrr_r32 %vreg5, %vreg44<kill>, %STATUS<imp-def,dead>; GPR32:%vreg45,%vreg5,%vreg44
	%vreg11<def> = COPY %vreg2; GPR32:%vreg11,%vreg2
	%vreg12<def> = LDRf32 %vreg45<kill>, 0; mem:Volatile LD4[%add.ptr10](tbaa=!2) FPR32:%vreg12 GPR32:%vreg45
    Successors according to CFG: BB#7(?%)

BB#7: derived from LLVM BB %for.body13
    Predecessors according to CFG: BB#6 BB#7
	%vreg13<def> = PHI %vreg11, <BB#6>, %vreg18, <BB#7>; GPR32:%vreg13,%vreg11,%vreg18
	%vreg14<def> = PHI %vreg9, <BB#6>, %vreg17, <BB#7>; GPR32:%vreg14,%vreg9,%vreg17
	%vreg15<def> = PHI %vreg35, <BB#6>, %vreg16, <BB#7>; GPR32:%vreg15,%vreg35,%vreg16
	%vreg46<def> = LDRf32 %vreg14, -8; mem:Volatile LD4[%scevgep8](tbaa=!2) FPR32:%vreg46 GPR32:%vreg14
	%vreg18<def> = ADDri_r32 %vreg13, 16, %STATUS<imp-def,dead>; GPR32:%vreg18,%vreg13
	%vreg17<def> = ADDri_r32 %vreg14, 16, %STATUS<imp-def,dead>; GPR32:%vreg17,%vreg14
	%vreg47<def> = LDRf32 %vreg14, -4; mem:Volatile LD4[%scevgep9](tbaa=!2) FPR32:%vreg47 GPR32:%vreg14
	%vreg16<def> = ADDri_r32 %vreg15<kill>, 4, %STATUS<imp-def,dead>; GPR32:%vreg16,%vreg15
	%vreg48<def> = LDRf32 %vreg14, 0; mem:Volatile LD4[%lsr.iv5](tbaa=!2) FPR32:%vreg48 GPR32:%vreg14
	%vreg49<def> = LDRf32 %vreg14<kill>, 4; mem:Volatile LD4[%scevgep7](tbaa=!2) FPR32:%vreg49 GPR32:%vreg14
	%vreg79<def> = LDRf64 %vreg13, -8; mem:LD4[%scevgep17](tbaa=!2) LD4[%scevgep15](tbaa=!2) FPR64:%vreg79 GPR32:%vreg13
	%vreg50<def> = COPY %vreg79:isub_hi; FPR32:%vreg50 FPR64:%vreg79
	%vreg52<def> = COPY %vreg79:isub_lo; FPR32:%vreg52 FPR64:%vreg79
	%vreg75<def> = LDRi32_r32 <fi#2>, 0; mem:LD4[FixedStack2] GPR32:%vreg75
	GID %CONFIG<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %vreg75<kill>; GPR32:%vreg75
	GIE %CONFIG<imp-def,dead>
	%vreg51<def,tied1> = FMADDrr_r32 %vreg50<kill,tied0>, %vreg12, %vreg46<kill>, %STATUS<imp-def,dead>; FPR32:%vreg51,%vreg50,%vreg12,%vreg46
	%vreg53<def,tied1> = FMADDrr_r32 %vreg52<kill,tied0>, %vreg12, %vreg47<kill>, %STATUS<imp-def,dead>; FPR32:%vreg53,%vreg52,%vreg12,%vreg47
	%vreg80<def> = REG_SEQUENCE %vreg51, isub_lo, %vreg53, isub_hi; FPR64:%vreg80 FPR32:%vreg51,%vreg53
	STRf64 %vreg80, %vreg13, -8; mem:ST4[%scevgep17](tbaa=!2) ST4[%scevgep15](tbaa=!2) FPR64:%vreg80 GPR32:%vreg13
	%vreg54<def> = LDRf32 %vreg13, 0; mem:LD4[%lsr.iv1214](tbaa=!2) FPR32:%vreg54 GPR32:%vreg13
	%vreg55<def,tied1> = FMADDrr_r32 %vreg54<kill,tied0>, %vreg12, %vreg48<kill>, %STATUS<imp-def,dead>; FPR32:%vreg55,%vreg54,%vreg12,%vreg48
	STRf32 %vreg55<kill>, %vreg13, 0; mem:ST4[%lsr.iv1214](tbaa=!2) FPR32:%vreg55 GPR32:%vreg13
	%vreg56<def> = LDRf32 %vreg13, 4; mem:LD4[%scevgep16](tbaa=!2) FPR32:%vreg56 GPR32:%vreg13
	%vreg57<def,tied1> = FMADDrr_r32 %vreg56<kill,tied0>, %vreg12, %vreg49<kill>, %STATUS<imp-def,dead>; FPR32:%vreg57,%vreg56,%vreg12,%vreg49
	%vreg58<def,dead> = CMPri_r32 %vreg16, 8, %STATUS<imp-def>; GPR32:%vreg58,%vreg16
	STRf32 %vreg57<kill>, %vreg13<kill>, 4; mem:ST4[%scevgep16](tbaa=!2) FPR32:%vreg57 GPR32:%vreg13
	BCC <BB#7>, 8, %STATUS<imp-use>
	BNONE32 <BB#8>, %STATUS<imp-use>
    Successors according to CFG: BB#7(0x7c000000 / 0x80000000 = 96.88%) BB#8(0x04000000 / 0x80000000 = 3.12%)

BB#8: derived from LLVM BB %for.end60
    Predecessors according to CFG: BB#7
	%vreg20<def> = ADDrr_r32 %vreg9<kill>, %vreg1, %STATUS<imp-def,dead>; GPR32:%vreg20,%vreg9,%vreg1
	%vreg19<def> = ADDri_r32 %vreg10<kill>, 1, %STATUS<imp-def,dead>; GPR32:%vreg19,%vreg10
	%vreg59<def,dead> = CMPrr_r32 %vreg19, %vreg33, %STATUS<imp-def>; GPR32:%vreg59,%vreg19,%vreg33
	BCC <BB#5>, 0, %STATUS<imp-use>
	BNONE32 <BB#6>, %STATUS<imp-use>
    Successors according to CFG: BB#5(0x04000000 / 0x80000000 = 3.12%) BB#6(0x7c000000 / 0x80000000 = 96.88%)

BB#9: derived from LLVM BB %for.body66
    Predecessors according to CFG: BB#5 BB#9
	%vreg21<def> = PHI %vreg6, <BB#5>, %vreg24, <BB#9>; GPR32:%vreg21,%vreg6,%vreg24
	%vreg22<def> = PHI %vreg35, <BB#5>, %vreg23, <BB#9>; GPR32:%vreg22,%vreg35,%vreg23
	%vreg62<def> = ADDrr_r32 %vreg36, %vreg22, %STATUS<imp-def,dead>; GPR32:%vreg62,%vreg36,%vreg22
	%vreg63<def> = LDRf32 %vreg62<kill>, 0; mem:LD4[%sunkaddr30](tbaa=!2) FPR32:%vreg63 GPR32:%vreg62
	%vreg24<def> = ADDri_r32 %vreg21, 4, %STATUS<imp-def,dead>; GPR32:%vreg24,%vreg21
	%vreg23<def> = ADDri_r32 %vreg22<kill>, 4, %STATUS<imp-def,dead>; GPR32:%vreg23,%vreg22
	%vreg64<def> = LDRf32 %vreg21, 0; mem:Volatile LD4[%lsr.iv24](tbaa=!2) FPR32:%vreg64 GPR32:%vreg21
	%vreg76<def> = LDRi32_r32 <fi#2>, 0; mem:LD4[FixedStack2] GPR32:%vreg76
	GID %CONFIG<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %vreg76<kill>; GPR32:%vreg76
	GIE %CONFIG<imp-def,dead>
	%vreg65<def> = FADDrr_r32 %vreg63<kill>, %vreg64<kill>, %STATUS<imp-def,dead>; FPR32:%vreg65,%vreg63,%vreg64
	%vreg66<def,dead> = CMPri_r32 %vreg23, 32, %STATUS<imp-def>; GPR32:%vreg66,%vreg23
	STRf32 %vreg65<kill>, %vreg21<kill>, 0; mem:Volatile ST4[%lsr.iv24](tbaa=!2) FPR32:%vreg65 GPR32:%vreg21
	BCC <BB#9>, 1, %STATUS<imp-use>
	BNONE32 <BB#10>, %STATUS<imp-use>
    Successors according to CFG: BB#10(0x04000000 / 0x80000000 = 3.12%) BB#9(0x7c000000 / 0x80000000 = 96.88%)

BB#10: derived from LLVM BB %for.end75
    Predecessors according to CFG: BB#9
	%vreg27<def> = ADDri_r32 %vreg6<kill>, 32, %STATUS<imp-def,dead>; GPR32:%vreg27,%vreg6
	%vreg26<def> = ADDri_r32 %vreg7<kill>, 32, %STATUS<imp-def,dead>; GPR32:%vreg26,%vreg7
	%vreg25<def> = ADDri_r32 %vreg8<kill>, 8, %STATUS<imp-def,dead>; GPR32:%vreg25,%vreg8
	%vreg67<def,dead> = CMPrr_r32 %vreg25, %vreg33, %STATUS<imp-def>; GPR32:%vreg67,%vreg25,%vreg33
	BCC <BB#4>, 8, %STATUS<imp-use>
	BNONE32 <BB#11>, %STATUS<imp-use>
    Successors according to CFG: BB#4(0x7c000000 / 0x80000000 = 96.88%) BB#11(0x04000000 / 0x80000000 = 3.12%)

BB#11: derived from LLVM BB %for.end78
    Predecessors according to CFG: BB#10
	%vreg29<def> = ADDrr_r32 %vreg3<kill>, %vreg1, %STATUS<imp-def,dead>; GPR32:%vreg29,%vreg3,%vreg1
	%vreg28<def> = ADDri_r32 %vreg4<kill>, 1, %STATUS<imp-def,dead>; GPR32:%vreg28,%vreg4
	%vreg68<def,dead> = CMPrr_r32 %vreg28, %vreg33, %STATUS<imp-def>; GPR32:%vreg68,%vreg28,%vreg33
	BCC <BB#3>, 1, %STATUS<imp-use>
	BNONE32 <BB#12>, %STATUS<imp-use>
    Successors according to CFG: BB#12(0x04000000 / 0x80000000 = 3.12%) BB#3(0x7c000000 / 0x80000000 = 96.88%)

BB#12: derived from LLVM BB %for.end81
    Predecessors according to CFG: BB#1 BB#11
	%vreg77<def> = LDRi32_r32 <fi#1>, 0; mem:LD4[FixedStack1] GPR32:%vreg77
	GID
	%CONFIG<def> = MOVTS32_core %vreg77<kill>; GPR32:%vreg77
	GIE %CONFIG<imp-use,kill>
	RTS

# End machine code for function matmac.

# *** IR Dump Before Live Variable Analysis ***:
# Machine code for function matmac: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=32, align=8, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=4, align=8, at location [SP]
Function Live Ins: %R0 in %vreg30, %R1 in %vreg31, %R2 in %vreg32, %R3 in %vreg33

BB#0: 
    Live Ins: %R0 %R1 %R2 %R3
	GID %CONFIG<imp-def>
	%vreg71<def> = MOVFS32_core %CONFIG; GPR32:%vreg71
	STRi32_r32 %vreg71, <fi#1>, 0; mem:ST4[FixedStack1] GPR32:%vreg71
	%vreg72<def> = MOVi32ri 65535; GPR32:%vreg72
	%vreg73<def,tied1> = MOVTi32ri %vreg72<kill,tied0>, 65521; GPR32:%vreg73,%vreg72
	%vreg69<def> = ANDrr_r32 %vreg71, %vreg73<kill>, %STATUS<imp-def>; GPR32:%vreg69,%vreg71,%vreg73
	%vreg70<def,tied1> = MOVTi32ri %vreg71<kill,tied0>, 72; GPR32:%vreg70,%vreg71
	%vreg78<def> = REG_SEQUENCE %vreg69, isub_lo, %vreg70, isub_hi; GPR64:%vreg78 GPR32:%vreg69,%vreg70
	STRi64 %vreg78, <fi#3>, 0; mem:ST4[FixedStack3] ST4[FixedStack2] GPR64:%vreg78
	GIE %CONFIG<imp-use,kill>
    Successors according to CFG: BB#1(?%)

BB#1: derived from LLVM BB %entry
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#0
	%vreg33<def> = COPY %R3<kill>; GPR32:%vreg33
	%vreg32<def> = COPY %R2<kill>; GPR32:%vreg32
	%vreg31<def> = COPY %R1<kill>; GPR32:%vreg31
	%vreg30<def> = COPY %R0<kill>; GPR32:%vreg30
	%vreg34<def,dead> = CMPri_r32 %vreg33, 1, %STATUS<imp-def>; GPR32:%vreg34,%vreg33
	BCC <BB#12>, 8, %STATUS<imp-use>
	BNONE32 <BB#2>, %STATUS<imp-use>
    Successors according to CFG: BB#2(0x50000000 / 0x80000000 = 62.50%) BB#12(0x30000000 / 0x80000000 = 37.50%)

BB#2: derived from LLVM BB %for.body3.lr.ph.preheader
    Predecessors according to CFG: BB#1
	%vreg1<def> = LSL32ri %vreg33, 2, %STATUS<imp-def,dead>; GPR32:%vreg1,%vreg33
	%vreg0<def> = ADDri_r32 %vreg31<kill>, 8, %STATUS<imp-def,dead>; GPR32:%vreg0,%vreg31
	%vreg36<def> = MOViPTR <fi#0>, 0; GPR32:%vreg36
	%vreg2<def> = ADDri_r32 %vreg36, 8, %STATUS<imp-def,dead>; GPR32:%vreg2,%vreg36
	%vreg35<def> = MOVi32ri 0; GPR32:%vreg35
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %for.body3.lr.ph
    Predecessors according to CFG: BB#2 BB#11
	%vreg3<def> = PHI %vreg32, <BB#2>, %vreg29, <BB#11>; GPR32:%vreg3,%vreg32,%vreg29
	%vreg4<def> = PHI %vreg35, <BB#2>, %vreg28, <BB#11>; GPR32:%vreg4,%vreg35,%vreg28
	%vreg74<def> = LDRi32_r32 <fi#3>, 0; mem:LD4[FixedStack3] GPR32:%vreg74
	GID %CONFIG<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %vreg74<kill>; GPR32:%vreg74
	GIE %CONFIG<imp-def,dead>
	%vreg38<def> = IMULrr_r32 %vreg4, %vreg33, %STATUS<imp-def,dead>; GPR32:%vreg38,%vreg4,%vreg33
	%vreg39<def> = LSL32ri %vreg38<kill>, 2, %STATUS<imp-def,dead>; GPR32:%vreg39,%vreg38
	%vreg5<def> = ADDrr_r32 %vreg30, %vreg39<kill>, %STATUS<imp-def,dead>; GPR32:%vreg5,%vreg30,%vreg39
    Successors according to CFG: BB#4(?%)

BB#4: derived from LLVM BB %for.body9.preheader
    Predecessors according to CFG: BB#3 BB#10
	%vreg6<def> = PHI %vreg3, <BB#3>, %vreg27, <BB#10>; GPR32:%vreg6,%vreg3,%vreg27
	%vreg7<def> = PHI %vreg0, <BB#3>, %vreg26, <BB#10>; GPR32:%vreg7,%vreg0,%vreg26
	%vreg8<def> = PHI %vreg35, <BB#3>, %vreg25, <BB#10>; GPR32:%vreg8,%vreg35,%vreg25
	%vreg42<def> = REG_SEQUENCE %vreg35, isub_hi, %vreg35, isub_lo; FPR64_with_isub_hi_in_FPR32:%vreg42 GPR32:%vreg35
	STRi64 %vreg42, <fi#0>, 24; mem:ST8[%1+24] FPR64_with_isub_hi_in_FPR32:%vreg42
	STRi64 %vreg42, <fi#0>, 16; mem:ST8[%1+16] FPR64_with_isub_hi_in_FPR32:%vreg42
	STRi64 %vreg42, <fi#0>, 8; mem:ST8[%1+8] FPR64_with_isub_hi_in_FPR32:%vreg42
	STRi64 %vreg42<kill>, <fi#0>, 0; mem:ST8[%1] FPR64_with_isub_hi_in_FPR32:%vreg42
	BNONE32 <BB#6>, %STATUS<imp-use>
    Successors according to CFG: BB#6(?%)

BB#5: derived from LLVM BB %for.cond64.preheader
    Predecessors according to CFG: BB#8
	BNONE32 <BB#9>, %STATUS<imp-use>
    Successors according to CFG: BB#9(?%)

BB#6: derived from LLVM BB %for.body9
    Predecessors according to CFG: BB#4 BB#8
	%vreg9<def> = PHI %vreg7, <BB#4>, %vreg20, <BB#8>; GPR32:%vreg9,%vreg7,%vreg20
	%vreg10<def> = PHI %vreg35, <BB#4>, %vreg19, <BB#8>; GPR32:%vreg10,%vreg35,%vreg19
	%vreg44<def> = LSL32ri %vreg10, 2, %STATUS<imp-def,dead>; GPR32:%vreg44,%vreg10
	%vreg45<def> = ADDrr_r32 %vreg5, %vreg44<kill>, %STATUS<imp-def,dead>; GPR32:%vreg45,%vreg5,%vreg44
	%vreg11<def> = COPY %vreg2; GPR32:%vreg11,%vreg2
	%vreg12<def> = LDRf32 %vreg45<kill>, 0; mem:Volatile LD4[%add.ptr10](tbaa=!2) FPR32:%vreg12 GPR32:%vreg45
    Successors according to CFG: BB#7(?%)

BB#7: derived from LLVM BB %for.body13
    Predecessors according to CFG: BB#6 BB#7
	%vreg13<def> = PHI %vreg11, <BB#6>, %vreg18, <BB#7>; GPR32:%vreg13,%vreg11,%vreg18
	%vreg14<def> = PHI %vreg9, <BB#6>, %vreg17, <BB#7>; GPR32:%vreg14,%vreg9,%vreg17
	%vreg15<def> = PHI %vreg35, <BB#6>, %vreg16, <BB#7>; GPR32:%vreg15,%vreg35,%vreg16
	%vreg46<def> = LDRf32 %vreg14, -8; mem:Volatile LD4[%scevgep8](tbaa=!2) FPR32:%vreg46 GPR32:%vreg14
	%vreg18<def> = ADDri_r32 %vreg13, 16, %STATUS<imp-def,dead>; GPR32:%vreg18,%vreg13
	%vreg17<def> = ADDri_r32 %vreg14, 16, %STATUS<imp-def,dead>; GPR32:%vreg17,%vreg14
	%vreg47<def> = LDRf32 %vreg14, -4; mem:Volatile LD4[%scevgep9](tbaa=!2) FPR32:%vreg47 GPR32:%vreg14
	%vreg16<def> = ADDri_r32 %vreg15<kill>, 4, %STATUS<imp-def,dead>; GPR32:%vreg16,%vreg15
	%vreg48<def> = LDRf32 %vreg14, 0; mem:Volatile LD4[%lsr.iv5](tbaa=!2) FPR32:%vreg48 GPR32:%vreg14
	%vreg49<def> = LDRf32 %vreg14<kill>, 4; mem:Volatile LD4[%scevgep7](tbaa=!2) FPR32:%vreg49 GPR32:%vreg14
	%vreg79<def> = LDRf64 %vreg13, -8; mem:LD4[%scevgep17](tbaa=!2) LD4[%scevgep15](tbaa=!2) FPR64:%vreg79 GPR32:%vreg13
	%vreg50<def> = COPY %vreg79:isub_hi; FPR32:%vreg50 FPR64:%vreg79
	%vreg52<def> = COPY %vreg79:isub_lo; FPR32:%vreg52 FPR64:%vreg79
	%vreg75<def> = LDRi32_r32 <fi#2>, 0; mem:LD4[FixedStack2] GPR32:%vreg75
	GID %CONFIG<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %vreg75<kill>; GPR32:%vreg75
	GIE %CONFIG<imp-def,dead>
	%vreg51<def,tied1> = FMADDrr_r32 %vreg50<kill,tied0>, %vreg12, %vreg46<kill>, %STATUS<imp-def,dead>; FPR32:%vreg51,%vreg50,%vreg12,%vreg46
	%vreg53<def,tied1> = FMADDrr_r32 %vreg52<kill,tied0>, %vreg12, %vreg47<kill>, %STATUS<imp-def,dead>; FPR32:%vreg53,%vreg52,%vreg12,%vreg47
	%vreg80<def> = REG_SEQUENCE %vreg51, isub_lo, %vreg53, isub_hi; FPR64:%vreg80 FPR32:%vreg51,%vreg53
	STRf64 %vreg80, %vreg13, -8; mem:ST4[%scevgep17](tbaa=!2) ST4[%scevgep15](tbaa=!2) FPR64:%vreg80 GPR32:%vreg13
	%vreg54<def> = LDRf32 %vreg13, 0; mem:LD4[%lsr.iv1214](tbaa=!2) FPR32:%vreg54 GPR32:%vreg13
	%vreg55<def,tied1> = FMADDrr_r32 %vreg54<kill,tied0>, %vreg12, %vreg48<kill>, %STATUS<imp-def,dead>; FPR32:%vreg55,%vreg54,%vreg12,%vreg48
	STRf32 %vreg55<kill>, %vreg13, 0; mem:ST4[%lsr.iv1214](tbaa=!2) FPR32:%vreg55 GPR32:%vreg13
	%vreg56<def> = LDRf32 %vreg13, 4; mem:LD4[%scevgep16](tbaa=!2) FPR32:%vreg56 GPR32:%vreg13
	%vreg57<def,tied1> = FMADDrr_r32 %vreg56<kill,tied0>, %vreg12, %vreg49<kill>, %STATUS<imp-def,dead>; FPR32:%vreg57,%vreg56,%vreg12,%vreg49
	%vreg58<def,dead> = CMPri_r32 %vreg16, 8, %STATUS<imp-def>; GPR32:%vreg58,%vreg16
	STRf32 %vreg57<kill>, %vreg13<kill>, 4; mem:ST4[%scevgep16](tbaa=!2) FPR32:%vreg57 GPR32:%vreg13
	BCC <BB#7>, 8, %STATUS<imp-use>
	BNONE32 <BB#8>, %STATUS<imp-use>
    Successors according to CFG: BB#7(0x7c000000 / 0x80000000 = 96.88%) BB#8(0x04000000 / 0x80000000 = 3.12%)

BB#8: derived from LLVM BB %for.end60
    Predecessors according to CFG: BB#7
	%vreg20<def> = ADDrr_r32 %vreg9<kill>, %vreg1, %STATUS<imp-def,dead>; GPR32:%vreg20,%vreg9,%vreg1
	%vreg19<def> = ADDri_r32 %vreg10<kill>, 1, %STATUS<imp-def,dead>; GPR32:%vreg19,%vreg10
	%vreg59<def,dead> = CMPrr_r32 %vreg19, %vreg33, %STATUS<imp-def>; GPR32:%vreg59,%vreg19,%vreg33
	BCC <BB#5>, 0, %STATUS<imp-use>
	BNONE32 <BB#6>, %STATUS<imp-use>
    Successors according to CFG: BB#5(0x04000000 / 0x80000000 = 3.12%) BB#6(0x7c000000 / 0x80000000 = 96.88%)

BB#9: derived from LLVM BB %for.body66
    Predecessors according to CFG: BB#5 BB#9
	%vreg21<def> = PHI %vreg6, <BB#5>, %vreg24, <BB#9>; GPR32:%vreg21,%vreg6,%vreg24
	%vreg22<def> = PHI %vreg35, <BB#5>, %vreg23, <BB#9>; GPR32:%vreg22,%vreg35,%vreg23
	%vreg62<def> = ADDrr_r32 %vreg36, %vreg22, %STATUS<imp-def,dead>; GPR32:%vreg62,%vreg36,%vreg22
	%vreg63<def> = LDRf32 %vreg62<kill>, 0; mem:LD4[%sunkaddr30](tbaa=!2) FPR32:%vreg63 GPR32:%vreg62
	%vreg24<def> = ADDri_r32 %vreg21, 4, %STATUS<imp-def,dead>; GPR32:%vreg24,%vreg21
	%vreg23<def> = ADDri_r32 %vreg22<kill>, 4, %STATUS<imp-def,dead>; GPR32:%vreg23,%vreg22
	%vreg64<def> = LDRf32 %vreg21, 0; mem:Volatile LD4[%lsr.iv24](tbaa=!2) FPR32:%vreg64 GPR32:%vreg21
	%vreg76<def> = LDRi32_r32 <fi#2>, 0; mem:LD4[FixedStack2] GPR32:%vreg76
	GID %CONFIG<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %vreg76<kill>; GPR32:%vreg76
	GIE %CONFIG<imp-def,dead>
	%vreg65<def> = FADDrr_r32 %vreg63<kill>, %vreg64<kill>, %STATUS<imp-def,dead>; FPR32:%vreg65,%vreg63,%vreg64
	%vreg66<def,dead> = CMPri_r32 %vreg23, 32, %STATUS<imp-def>; GPR32:%vreg66,%vreg23
	STRf32 %vreg65<kill>, %vreg21<kill>, 0; mem:Volatile ST4[%lsr.iv24](tbaa=!2) FPR32:%vreg65 GPR32:%vreg21
	BCC <BB#9>, 1, %STATUS<imp-use>
	BNONE32 <BB#10>, %STATUS<imp-use>
    Successors according to CFG: BB#10(0x04000000 / 0x80000000 = 3.12%) BB#9(0x7c000000 / 0x80000000 = 96.88%)

BB#10: derived from LLVM BB %for.end75
    Predecessors according to CFG: BB#9
	%vreg27<def> = ADDri_r32 %vreg6<kill>, 32, %STATUS<imp-def,dead>; GPR32:%vreg27,%vreg6
	%vreg26<def> = ADDri_r32 %vreg7<kill>, 32, %STATUS<imp-def,dead>; GPR32:%vreg26,%vreg7
	%vreg25<def> = ADDri_r32 %vreg8<kill>, 8, %STATUS<imp-def,dead>; GPR32:%vreg25,%vreg8
	%vreg67<def,dead> = CMPrr_r32 %vreg25, %vreg33, %STATUS<imp-def>; GPR32:%vreg67,%vreg25,%vreg33
	BCC <BB#4>, 8, %STATUS<imp-use>
	BNONE32 <BB#11>, %STATUS<imp-use>
    Successors according to CFG: BB#4(0x7c000000 / 0x80000000 = 96.88%) BB#11(0x04000000 / 0x80000000 = 3.12%)

BB#11: derived from LLVM BB %for.end78
    Predecessors according to CFG: BB#10
	%vreg29<def> = ADDrr_r32 %vreg3<kill>, %vreg1, %STATUS<imp-def,dead>; GPR32:%vreg29,%vreg3,%vreg1
	%vreg28<def> = ADDri_r32 %vreg4<kill>, 1, %STATUS<imp-def,dead>; GPR32:%vreg28,%vreg4
	%vreg68<def,dead> = CMPrr_r32 %vreg28, %vreg33, %STATUS<imp-def>; GPR32:%vreg68,%vreg28,%vreg33
	BCC <BB#3>, 1, %STATUS<imp-use>
	BNONE32 <BB#12>, %STATUS<imp-use>
    Successors according to CFG: BB#12(0x04000000 / 0x80000000 = 3.12%) BB#3(0x7c000000 / 0x80000000 = 96.88%)

BB#12: derived from LLVM BB %for.end81
    Predecessors according to CFG: BB#1 BB#11
	%vreg77<def> = LDRi32_r32 <fi#1>, 0; mem:LD4[FixedStack1] GPR32:%vreg77
	GID
	%CONFIG<def> = MOVTS32_core %vreg77<kill>; GPR32:%vreg77
	GIE %CONFIG<imp-use,kill>
	RTS

# End machine code for function matmac.

# *** IR Dump After Live Variable Analysis ***:
# Machine code for function matmac: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=32, align=8, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=4, align=8, at location [SP]
Function Live Ins: %R0 in %vreg30, %R1 in %vreg31, %R2 in %vreg32, %R3 in %vreg33

BB#0: 
    Live Ins: %R0 %R1 %R2 %R3
	GID %CONFIG<imp-def>
	%vreg71<def> = MOVFS32_core %CONFIG; GPR32:%vreg71
	STRi32_r32 %vreg71, <fi#1>, 0; mem:ST4[FixedStack1] GPR32:%vreg71
	%vreg72<def> = MOVi32ri 65535; GPR32:%vreg72
	%vreg73<def,tied1> = MOVTi32ri %vreg72<kill,tied0>, 65521; GPR32:%vreg73,%vreg72
	%vreg69<def> = ANDrr_r32 %vreg71, %vreg73<kill>, %STATUS<imp-def>; GPR32:%vreg69,%vreg71,%vreg73
	%vreg70<def,tied1> = MOVTi32ri %vreg71<kill,tied0>, 72; GPR32:%vreg70,%vreg71
	%vreg78<def> = REG_SEQUENCE %vreg69<kill>, isub_lo, %vreg70<kill>, isub_hi; GPR64:%vreg78 GPR32:%vreg69,%vreg70
	STRi64 %vreg78<kill>, <fi#3>, 0; mem:ST4[FixedStack3] ST4[FixedStack2] GPR64:%vreg78
	GIE %CONFIG<imp-use,kill>
    Successors according to CFG: BB#1(?%)

BB#1: derived from LLVM BB %entry
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#0
	%vreg33<def> = COPY %R3<kill>; GPR32:%vreg33
	%vreg32<def> = COPY %R2<kill>; GPR32:%vreg32
	%vreg31<def> = COPY %R1<kill>; GPR32:%vreg31
	%vreg30<def> = COPY %R0<kill>; GPR32:%vreg30
	%vreg34<def,dead> = CMPri_r32 %vreg33, 1, %STATUS<imp-def>; GPR32:%vreg34,%vreg33
	BCC <BB#12>, 8, %STATUS<imp-use>
	BNONE32 <BB#2>, %STATUS<imp-use>
    Successors according to CFG: BB#2(0x50000000 / 0x80000000 = 62.50%) BB#12(0x30000000 / 0x80000000 = 37.50%)

BB#2: derived from LLVM BB %for.body3.lr.ph.preheader
    Predecessors according to CFG: BB#1
	%vreg1<def> = LSL32ri %vreg33, 2, %STATUS<imp-def,dead>; GPR32:%vreg1,%vreg33
	%vreg0<def> = ADDri_r32 %vreg31<kill>, 8, %STATUS<imp-def,dead>; GPR32:%vreg0,%vreg31
	%vreg36<def> = MOViPTR <fi#0>, 0; GPR32:%vreg36
	%vreg2<def> = ADDri_r32 %vreg36, 8, %STATUS<imp-def,dead>; GPR32:%vreg2,%vreg36
	%vreg35<def> = MOVi32ri 0; GPR32:%vreg35
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %for.body3.lr.ph
    Predecessors according to CFG: BB#2 BB#11
	%vreg3<def> = PHI %vreg32, <BB#2>, %vreg29, <BB#11>; GPR32:%vreg3,%vreg32,%vreg29
	%vreg4<def> = PHI %vreg35, <BB#2>, %vreg28, <BB#11>; GPR32:%vreg4,%vreg35,%vreg28
	%vreg74<def> = LDRi32_r32 <fi#3>, 0; mem:LD4[FixedStack3] GPR32:%vreg74
	GID %CONFIG<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %vreg74<kill>; GPR32:%vreg74
	GIE %CONFIG<imp-def,dead>
	%vreg38<def> = IMULrr_r32 %vreg4, %vreg33, %STATUS<imp-def,dead>; GPR32:%vreg38,%vreg4,%vreg33
	%vreg39<def> = LSL32ri %vreg38<kill>, 2, %STATUS<imp-def,dead>; GPR32:%vreg39,%vreg38
	%vreg5<def> = ADDrr_r32 %vreg30, %vreg39<kill>, %STATUS<imp-def,dead>; GPR32:%vreg5,%vreg30,%vreg39
    Successors according to CFG: BB#4(?%)

BB#4: derived from LLVM BB %for.body9.preheader
    Predecessors according to CFG: BB#3 BB#10
	%vreg6<def> = PHI %vreg3, <BB#3>, %vreg27, <BB#10>; GPR32:%vreg6,%vreg3,%vreg27
	%vreg7<def> = PHI %vreg0, <BB#3>, %vreg26, <BB#10>; GPR32:%vreg7,%vreg0,%vreg26
	%vreg8<def> = PHI %vreg35, <BB#3>, %vreg25, <BB#10>; GPR32:%vreg8,%vreg35,%vreg25
	%vreg42<def> = REG_SEQUENCE %vreg35, isub_hi, %vreg35, isub_lo; FPR64_with_isub_hi_in_FPR32:%vreg42 GPR32:%vreg35
	STRi64 %vreg42, <fi#0>, 24; mem:ST8[%1+24] FPR64_with_isub_hi_in_FPR32:%vreg42
	STRi64 %vreg42, <fi#0>, 16; mem:ST8[%1+16] FPR64_with_isub_hi_in_FPR32:%vreg42
	STRi64 %vreg42, <fi#0>, 8; mem:ST8[%1+8] FPR64_with_isub_hi_in_FPR32:%vreg42
	STRi64 %vreg42<kill>, <fi#0>, 0; mem:ST8[%1] FPR64_with_isub_hi_in_FPR32:%vreg42
	BNONE32 <BB#6>, %STATUS<imp-use>
    Successors according to CFG: BB#6(?%)

BB#5: derived from LLVM BB %for.cond64.preheader
    Predecessors according to CFG: BB#8
	BNONE32 <BB#9>, %STATUS<imp-use>
    Successors according to CFG: BB#9(?%)

BB#6: derived from LLVM BB %for.body9
    Predecessors according to CFG: BB#4 BB#8
	%vreg9<def> = PHI %vreg7, <BB#4>, %vreg20, <BB#8>; GPR32:%vreg9,%vreg7,%vreg20
	%vreg10<def> = PHI %vreg35, <BB#4>, %vreg19, <BB#8>; GPR32:%vreg10,%vreg35,%vreg19
	%vreg44<def> = LSL32ri %vreg10, 2, %STATUS<imp-def,dead>; GPR32:%vreg44,%vreg10
	%vreg45<def> = ADDrr_r32 %vreg5, %vreg44<kill>, %STATUS<imp-def,dead>; GPR32:%vreg45,%vreg5,%vreg44
	%vreg11<def> = COPY %vreg2; GPR32:%vreg11,%vreg2
	%vreg12<def> = LDRf32 %vreg45<kill>, 0; mem:Volatile LD4[%add.ptr10](tbaa=!2) FPR32:%vreg12 GPR32:%vreg45
    Successors according to CFG: BB#7(?%)

BB#7: derived from LLVM BB %for.body13
    Predecessors according to CFG: BB#6 BB#7
	%vreg13<def> = PHI %vreg11, <BB#6>, %vreg18, <BB#7>; GPR32:%vreg13,%vreg11,%vreg18
	%vreg14<def> = PHI %vreg9, <BB#6>, %vreg17, <BB#7>; GPR32:%vreg14,%vreg9,%vreg17
	%vreg15<def> = PHI %vreg35, <BB#6>, %vreg16, <BB#7>; GPR32:%vreg15,%vreg35,%vreg16
	%vreg46<def> = LDRf32 %vreg14, -8; mem:Volatile LD4[%scevgep8](tbaa=!2) FPR32:%vreg46 GPR32:%vreg14
	%vreg18<def> = ADDri_r32 %vreg13, 16, %STATUS<imp-def,dead>; GPR32:%vreg18,%vreg13
	%vreg17<def> = ADDri_r32 %vreg14, 16, %STATUS<imp-def,dead>; GPR32:%vreg17,%vreg14
	%vreg47<def> = LDRf32 %vreg14, -4; mem:Volatile LD4[%scevgep9](tbaa=!2) FPR32:%vreg47 GPR32:%vreg14
	%vreg16<def> = ADDri_r32 %vreg15<kill>, 4, %STATUS<imp-def,dead>; GPR32:%vreg16,%vreg15
	%vreg48<def> = LDRf32 %vreg14, 0; mem:Volatile LD4[%lsr.iv5](tbaa=!2) FPR32:%vreg48 GPR32:%vreg14
	%vreg49<def> = LDRf32 %vreg14<kill>, 4; mem:Volatile LD4[%scevgep7](tbaa=!2) FPR32:%vreg49 GPR32:%vreg14
	%vreg79<def> = LDRf64 %vreg13, -8; mem:LD4[%scevgep17](tbaa=!2) LD4[%scevgep15](tbaa=!2) FPR64:%vreg79 GPR32:%vreg13
	%vreg50<def> = COPY %vreg79:isub_hi; FPR32:%vreg50 FPR64:%vreg79
	%vreg52<def> = COPY %vreg79:isub_lo<kill>; FPR32:%vreg52 FPR64:%vreg79
	%vreg75<def> = LDRi32_r32 <fi#2>, 0; mem:LD4[FixedStack2] GPR32:%vreg75
	GID %CONFIG<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %vreg75<kill>; GPR32:%vreg75
	GIE %CONFIG<imp-def,dead>
	%vreg51<def,tied1> = FMADDrr_r32 %vreg50<kill,tied0>, %vreg12, %vreg46<kill>, %STATUS<imp-def,dead>; FPR32:%vreg51,%vreg50,%vreg12,%vreg46
	%vreg53<def,tied1> = FMADDrr_r32 %vreg52<kill,tied0>, %vreg12, %vreg47<kill>, %STATUS<imp-def,dead>; FPR32:%vreg53,%vreg52,%vreg12,%vreg47
	%vreg80<def> = REG_SEQUENCE %vreg51<kill>, isub_lo, %vreg53<kill>, isub_hi; FPR64:%vreg80 FPR32:%vreg51,%vreg53
	STRf64 %vreg80<kill>, %vreg13, -8; mem:ST4[%scevgep17](tbaa=!2) ST4[%scevgep15](tbaa=!2) FPR64:%vreg80 GPR32:%vreg13
	%vreg54<def> = LDRf32 %vreg13, 0; mem:LD4[%lsr.iv1214](tbaa=!2) FPR32:%vreg54 GPR32:%vreg13
	%vreg55<def,tied1> = FMADDrr_r32 %vreg54<kill,tied0>, %vreg12, %vreg48<kill>, %STATUS<imp-def,dead>; FPR32:%vreg55,%vreg54,%vreg12,%vreg48
	STRf32 %vreg55<kill>, %vreg13, 0; mem:ST4[%lsr.iv1214](tbaa=!2) FPR32:%vreg55 GPR32:%vreg13
	%vreg56<def> = LDRf32 %vreg13, 4; mem:LD4[%scevgep16](tbaa=!2) FPR32:%vreg56 GPR32:%vreg13
	%vreg57<def,tied1> = FMADDrr_r32 %vreg56<kill,tied0>, %vreg12, %vreg49<kill>, %STATUS<imp-def,dead>; FPR32:%vreg57,%vreg56,%vreg12,%vreg49
	%vreg58<def,dead> = CMPri_r32 %vreg16, 8, %STATUS<imp-def>; GPR32:%vreg58,%vreg16
	STRf32 %vreg57<kill>, %vreg13<kill>, 4; mem:ST4[%scevgep16](tbaa=!2) FPR32:%vreg57 GPR32:%vreg13
	BCC <BB#7>, 8, %STATUS<imp-use>
	BNONE32 <BB#8>, %STATUS<imp-use>
    Successors according to CFG: BB#7(0x7c000000 / 0x80000000 = 96.88%) BB#8(0x04000000 / 0x80000000 = 3.12%)

BB#8: derived from LLVM BB %for.end60
    Predecessors according to CFG: BB#7
	%vreg20<def> = ADDrr_r32 %vreg9<kill>, %vreg1, %STATUS<imp-def,dead>; GPR32:%vreg20,%vreg9,%vreg1
	%vreg19<def> = ADDri_r32 %vreg10<kill>, 1, %STATUS<imp-def,dead>; GPR32:%vreg19,%vreg10
	%vreg59<def,dead> = CMPrr_r32 %vreg19, %vreg33, %STATUS<imp-def>; GPR32:%vreg59,%vreg19,%vreg33
	BCC <BB#5>, 0, %STATUS<imp-use>
	BNONE32 <BB#6>, %STATUS<imp-use>
    Successors according to CFG: BB#5(0x04000000 / 0x80000000 = 3.12%) BB#6(0x7c000000 / 0x80000000 = 96.88%)

BB#9: derived from LLVM BB %for.body66
    Predecessors according to CFG: BB#5 BB#9
	%vreg21<def> = PHI %vreg6, <BB#5>, %vreg24, <BB#9>; GPR32:%vreg21,%vreg6,%vreg24
	%vreg22<def> = PHI %vreg35, <BB#5>, %vreg23, <BB#9>; GPR32:%vreg22,%vreg35,%vreg23
	%vreg62<def> = ADDrr_r32 %vreg36, %vreg22, %STATUS<imp-def,dead>; GPR32:%vreg62,%vreg36,%vreg22
	%vreg63<def> = LDRf32 %vreg62<kill>, 0; mem:LD4[%sunkaddr30](tbaa=!2) FPR32:%vreg63 GPR32:%vreg62
	%vreg24<def> = ADDri_r32 %vreg21, 4, %STATUS<imp-def,dead>; GPR32:%vreg24,%vreg21
	%vreg23<def> = ADDri_r32 %vreg22<kill>, 4, %STATUS<imp-def,dead>; GPR32:%vreg23,%vreg22
	%vreg64<def> = LDRf32 %vreg21, 0; mem:Volatile LD4[%lsr.iv24](tbaa=!2) FPR32:%vreg64 GPR32:%vreg21
	%vreg76<def> = LDRi32_r32 <fi#2>, 0; mem:LD4[FixedStack2] GPR32:%vreg76
	GID %CONFIG<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %vreg76<kill>; GPR32:%vreg76
	GIE %CONFIG<imp-def,dead>
	%vreg65<def> = FADDrr_r32 %vreg63<kill>, %vreg64<kill>, %STATUS<imp-def,dead>; FPR32:%vreg65,%vreg63,%vreg64
	%vreg66<def,dead> = CMPri_r32 %vreg23, 32, %STATUS<imp-def>; GPR32:%vreg66,%vreg23
	STRf32 %vreg65<kill>, %vreg21<kill>, 0; mem:Volatile ST4[%lsr.iv24](tbaa=!2) FPR32:%vreg65 GPR32:%vreg21
	BCC <BB#9>, 1, %STATUS<imp-use>
	BNONE32 <BB#10>, %STATUS<imp-use>
    Successors according to CFG: BB#10(0x04000000 / 0x80000000 = 3.12%) BB#9(0x7c000000 / 0x80000000 = 96.88%)

BB#10: derived from LLVM BB %for.end75
    Predecessors according to CFG: BB#9
	%vreg27<def> = ADDri_r32 %vreg6<kill>, 32, %STATUS<imp-def,dead>; GPR32:%vreg27,%vreg6
	%vreg26<def> = ADDri_r32 %vreg7<kill>, 32, %STATUS<imp-def,dead>; GPR32:%vreg26,%vreg7
	%vreg25<def> = ADDri_r32 %vreg8<kill>, 8, %STATUS<imp-def,dead>; GPR32:%vreg25,%vreg8
	%vreg67<def,dead> = CMPrr_r32 %vreg25, %vreg33, %STATUS<imp-def>; GPR32:%vreg67,%vreg25,%vreg33
	BCC <BB#4>, 8, %STATUS<imp-use>
	BNONE32 <BB#11>, %STATUS<imp-use>
    Successors according to CFG: BB#4(0x7c000000 / 0x80000000 = 96.88%) BB#11(0x04000000 / 0x80000000 = 3.12%)

BB#11: derived from LLVM BB %for.end78
    Predecessors according to CFG: BB#10
	%vreg29<def> = ADDrr_r32 %vreg3<kill>, %vreg1, %STATUS<imp-def,dead>; GPR32:%vreg29,%vreg3,%vreg1
	%vreg28<def> = ADDri_r32 %vreg4<kill>, 1, %STATUS<imp-def,dead>; GPR32:%vreg28,%vreg4
	%vreg68<def,dead> = CMPrr_r32 %vreg28, %vreg33, %STATUS<imp-def>; GPR32:%vreg68,%vreg28,%vreg33
	BCC <BB#3>, 1, %STATUS<imp-use>
	BNONE32 <BB#12>, %STATUS<imp-use>
    Successors according to CFG: BB#12(0x04000000 / 0x80000000 = 3.12%) BB#3(0x7c000000 / 0x80000000 = 96.88%)

BB#12: derived from LLVM BB %for.end81
    Predecessors according to CFG: BB#1 BB#11
	%vreg77<def> = LDRi32_r32 <fi#1>, 0; mem:LD4[FixedStack1] GPR32:%vreg77
	GID
	%CONFIG<def> = MOVTS32_core %vreg77<kill>; GPR32:%vreg77
	GIE %CONFIG<imp-use,kill>
	RTS

# End machine code for function matmac.

# *** IR Dump Before Eliminate PHI nodes for register allocation ***:
# Machine code for function matmac: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=32, align=8, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=4, align=8, at location [SP]
Function Live Ins: %R0 in %vreg30, %R1 in %vreg31, %R2 in %vreg32, %R3 in %vreg33

BB#0: 
    Live Ins: %R0 %R1 %R2 %R3
	GID %CONFIG<imp-def>
	%vreg71<def> = MOVFS32_core %CONFIG; GPR32:%vreg71
	STRi32_r32 %vreg71, <fi#1>, 0; mem:ST4[FixedStack1] GPR32:%vreg71
	%vreg72<def> = MOVi32ri 65535; GPR32:%vreg72
	%vreg73<def,tied1> = MOVTi32ri %vreg72<kill,tied0>, 65521; GPR32:%vreg73,%vreg72
	%vreg69<def> = ANDrr_r32 %vreg71, %vreg73<kill>, %STATUS<imp-def>; GPR32:%vreg69,%vreg71,%vreg73
	%vreg70<def,tied1> = MOVTi32ri %vreg71<kill,tied0>, 72; GPR32:%vreg70,%vreg71
	%vreg78<def> = REG_SEQUENCE %vreg69<kill>, isub_lo, %vreg70<kill>, isub_hi; GPR64:%vreg78 GPR32:%vreg69,%vreg70
	STRi64 %vreg78<kill>, <fi#3>, 0; mem:ST4[FixedStack3] ST4[FixedStack2] GPR64:%vreg78
	GIE %CONFIG<imp-use,kill>
    Successors according to CFG: BB#1(?%)

BB#1: derived from LLVM BB %entry
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#0
	%vreg33<def> = COPY %R3<kill>; GPR32:%vreg33
	%vreg32<def> = COPY %R2<kill>; GPR32:%vreg32
	%vreg31<def> = COPY %R1<kill>; GPR32:%vreg31
	%vreg30<def> = COPY %R0<kill>; GPR32:%vreg30
	%vreg34<def,dead> = CMPri_r32 %vreg33, 1, %STATUS<imp-def>; GPR32:%vreg34,%vreg33
	BCC <BB#12>, 8, %STATUS<imp-use>
	BNONE32 <BB#2>, %STATUS<imp-use>
    Successors according to CFG: BB#2(0x50000000 / 0x80000000 = 62.50%) BB#12(0x30000000 / 0x80000000 = 37.50%)

BB#2: derived from LLVM BB %for.body3.lr.ph.preheader
    Predecessors according to CFG: BB#1
	%vreg1<def> = LSL32ri %vreg33, 2, %STATUS<imp-def,dead>; GPR32:%vreg1,%vreg33
	%vreg0<def> = ADDri_r32 %vreg31<kill>, 8, %STATUS<imp-def,dead>; GPR32:%vreg0,%vreg31
	%vreg36<def> = MOViPTR <fi#0>, 0; GPR32:%vreg36
	%vreg2<def> = ADDri_r32 %vreg36, 8, %STATUS<imp-def,dead>; GPR32:%vreg2,%vreg36
	%vreg35<def> = MOVi32ri 0; GPR32:%vreg35
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %for.body3.lr.ph
    Predecessors according to CFG: BB#2 BB#11
	%vreg3<def> = PHI %vreg32, <BB#2>, %vreg29, <BB#11>; GPR32:%vreg3,%vreg32,%vreg29
	%vreg4<def> = PHI %vreg35, <BB#2>, %vreg28, <BB#11>; GPR32:%vreg4,%vreg35,%vreg28
	%vreg74<def> = LDRi32_r32 <fi#3>, 0; mem:LD4[FixedStack3] GPR32:%vreg74
	GID %CONFIG<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %vreg74<kill>; GPR32:%vreg74
	GIE %CONFIG<imp-def,dead>
	%vreg38<def> = IMULrr_r32 %vreg4, %vreg33, %STATUS<imp-def,dead>; GPR32:%vreg38,%vreg4,%vreg33
	%vreg39<def> = LSL32ri %vreg38<kill>, 2, %STATUS<imp-def,dead>; GPR32:%vreg39,%vreg38
	%vreg5<def> = ADDrr_r32 %vreg30, %vreg39<kill>, %STATUS<imp-def,dead>; GPR32:%vreg5,%vreg30,%vreg39
    Successors according to CFG: BB#4(?%)

BB#4: derived from LLVM BB %for.body9.preheader
    Predecessors according to CFG: BB#3 BB#10
	%vreg6<def> = PHI %vreg3, <BB#3>, %vreg27, <BB#10>; GPR32:%vreg6,%vreg3,%vreg27
	%vreg7<def> = PHI %vreg0, <BB#3>, %vreg26, <BB#10>; GPR32:%vreg7,%vreg0,%vreg26
	%vreg8<def> = PHI %vreg35, <BB#3>, %vreg25, <BB#10>; GPR32:%vreg8,%vreg35,%vreg25
	%vreg42<def> = REG_SEQUENCE %vreg35, isub_hi, %vreg35, isub_lo; FPR64_with_isub_hi_in_FPR32:%vreg42 GPR32:%vreg35
	STRi64 %vreg42, <fi#0>, 24; mem:ST8[%1+24] FPR64_with_isub_hi_in_FPR32:%vreg42
	STRi64 %vreg42, <fi#0>, 16; mem:ST8[%1+16] FPR64_with_isub_hi_in_FPR32:%vreg42
	STRi64 %vreg42, <fi#0>, 8; mem:ST8[%1+8] FPR64_with_isub_hi_in_FPR32:%vreg42
	STRi64 %vreg42<kill>, <fi#0>, 0; mem:ST8[%1] FPR64_with_isub_hi_in_FPR32:%vreg42
	BNONE32 <BB#6>, %STATUS<imp-use>
    Successors according to CFG: BB#6(?%)

BB#5: derived from LLVM BB %for.cond64.preheader
    Predecessors according to CFG: BB#8
	BNONE32 <BB#9>, %STATUS<imp-use>
    Successors according to CFG: BB#9(?%)

BB#6: derived from LLVM BB %for.body9
    Predecessors according to CFG: BB#4 BB#8
	%vreg9<def> = PHI %vreg7, <BB#4>, %vreg20, <BB#8>; GPR32:%vreg9,%vreg7,%vreg20
	%vreg10<def> = PHI %vreg35, <BB#4>, %vreg19, <BB#8>; GPR32:%vreg10,%vreg35,%vreg19
	%vreg44<def> = LSL32ri %vreg10, 2, %STATUS<imp-def,dead>; GPR32:%vreg44,%vreg10
	%vreg45<def> = ADDrr_r32 %vreg5, %vreg44<kill>, %STATUS<imp-def,dead>; GPR32:%vreg45,%vreg5,%vreg44
	%vreg11<def> = COPY %vreg2; GPR32:%vreg11,%vreg2
	%vreg12<def> = LDRf32 %vreg45<kill>, 0; mem:Volatile LD4[%add.ptr10](tbaa=!2) FPR32:%vreg12 GPR32:%vreg45
    Successors according to CFG: BB#7(?%)

BB#7: derived from LLVM BB %for.body13
    Predecessors according to CFG: BB#6 BB#7
	%vreg13<def> = PHI %vreg11, <BB#6>, %vreg18, <BB#7>; GPR32:%vreg13,%vreg11,%vreg18
	%vreg14<def> = PHI %vreg9, <BB#6>, %vreg17, <BB#7>; GPR32:%vreg14,%vreg9,%vreg17
	%vreg15<def> = PHI %vreg35, <BB#6>, %vreg16, <BB#7>; GPR32:%vreg15,%vreg35,%vreg16
	%vreg46<def> = LDRf32 %vreg14, -8; mem:Volatile LD4[%scevgep8](tbaa=!2) FPR32:%vreg46 GPR32:%vreg14
	%vreg18<def> = ADDri_r32 %vreg13, 16, %STATUS<imp-def,dead>; GPR32:%vreg18,%vreg13
	%vreg17<def> = ADDri_r32 %vreg14, 16, %STATUS<imp-def,dead>; GPR32:%vreg17,%vreg14
	%vreg47<def> = LDRf32 %vreg14, -4; mem:Volatile LD4[%scevgep9](tbaa=!2) FPR32:%vreg47 GPR32:%vreg14
	%vreg16<def> = ADDri_r32 %vreg15<kill>, 4, %STATUS<imp-def,dead>; GPR32:%vreg16,%vreg15
	%vreg48<def> = LDRf32 %vreg14, 0; mem:Volatile LD4[%lsr.iv5](tbaa=!2) FPR32:%vreg48 GPR32:%vreg14
	%vreg49<def> = LDRf32 %vreg14<kill>, 4; mem:Volatile LD4[%scevgep7](tbaa=!2) FPR32:%vreg49 GPR32:%vreg14
	%vreg79<def> = LDRf64 %vreg13, -8; mem:LD4[%scevgep17](tbaa=!2) LD4[%scevgep15](tbaa=!2) FPR64:%vreg79 GPR32:%vreg13
	%vreg50<def> = COPY %vreg79:isub_hi; FPR32:%vreg50 FPR64:%vreg79
	%vreg52<def> = COPY %vreg79:isub_lo<kill>; FPR32:%vreg52 FPR64:%vreg79
	%vreg75<def> = LDRi32_r32 <fi#2>, 0; mem:LD4[FixedStack2] GPR32:%vreg75
	GID %CONFIG<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %vreg75<kill>; GPR32:%vreg75
	GIE %CONFIG<imp-def,dead>
	%vreg51<def,tied1> = FMADDrr_r32 %vreg50<kill,tied0>, %vreg12, %vreg46<kill>, %STATUS<imp-def,dead>; FPR32:%vreg51,%vreg50,%vreg12,%vreg46
	%vreg53<def,tied1> = FMADDrr_r32 %vreg52<kill,tied0>, %vreg12, %vreg47<kill>, %STATUS<imp-def,dead>; FPR32:%vreg53,%vreg52,%vreg12,%vreg47
	%vreg80<def> = REG_SEQUENCE %vreg51<kill>, isub_lo, %vreg53<kill>, isub_hi; FPR64:%vreg80 FPR32:%vreg51,%vreg53
	STRf64 %vreg80<kill>, %vreg13, -8; mem:ST4[%scevgep17](tbaa=!2) ST4[%scevgep15](tbaa=!2) FPR64:%vreg80 GPR32:%vreg13
	%vreg54<def> = LDRf32 %vreg13, 0; mem:LD4[%lsr.iv1214](tbaa=!2) FPR32:%vreg54 GPR32:%vreg13
	%vreg55<def,tied1> = FMADDrr_r32 %vreg54<kill,tied0>, %vreg12, %vreg48<kill>, %STATUS<imp-def,dead>; FPR32:%vreg55,%vreg54,%vreg12,%vreg48
	STRf32 %vreg55<kill>, %vreg13, 0; mem:ST4[%lsr.iv1214](tbaa=!2) FPR32:%vreg55 GPR32:%vreg13
	%vreg56<def> = LDRf32 %vreg13, 4; mem:LD4[%scevgep16](tbaa=!2) FPR32:%vreg56 GPR32:%vreg13
	%vreg57<def,tied1> = FMADDrr_r32 %vreg56<kill,tied0>, %vreg12, %vreg49<kill>, %STATUS<imp-def,dead>; FPR32:%vreg57,%vreg56,%vreg12,%vreg49
	%vreg58<def,dead> = CMPri_r32 %vreg16, 8, %STATUS<imp-def>; GPR32:%vreg58,%vreg16
	STRf32 %vreg57<kill>, %vreg13<kill>, 4; mem:ST4[%scevgep16](tbaa=!2) FPR32:%vreg57 GPR32:%vreg13
	BCC <BB#7>, 8, %STATUS<imp-use>
	BNONE32 <BB#8>, %STATUS<imp-use>
    Successors according to CFG: BB#7(0x7c000000 / 0x80000000 = 96.88%) BB#8(0x04000000 / 0x80000000 = 3.12%)

BB#8: derived from LLVM BB %for.end60
    Predecessors according to CFG: BB#7
	%vreg20<def> = ADDrr_r32 %vreg9<kill>, %vreg1, %STATUS<imp-def,dead>; GPR32:%vreg20,%vreg9,%vreg1
	%vreg19<def> = ADDri_r32 %vreg10<kill>, 1, %STATUS<imp-def,dead>; GPR32:%vreg19,%vreg10
	%vreg59<def,dead> = CMPrr_r32 %vreg19, %vreg33, %STATUS<imp-def>; GPR32:%vreg59,%vreg19,%vreg33
	BCC <BB#5>, 0, %STATUS<imp-use>
	BNONE32 <BB#6>, %STATUS<imp-use>
    Successors according to CFG: BB#5(0x04000000 / 0x80000000 = 3.12%) BB#6(0x7c000000 / 0x80000000 = 96.88%)

BB#9: derived from LLVM BB %for.body66
    Predecessors according to CFG: BB#5 BB#9
	%vreg21<def> = PHI %vreg6, <BB#5>, %vreg24, <BB#9>; GPR32:%vreg21,%vreg6,%vreg24
	%vreg22<def> = PHI %vreg35, <BB#5>, %vreg23, <BB#9>; GPR32:%vreg22,%vreg35,%vreg23
	%vreg62<def> = ADDrr_r32 %vreg36, %vreg22, %STATUS<imp-def,dead>; GPR32:%vreg62,%vreg36,%vreg22
	%vreg63<def> = LDRf32 %vreg62<kill>, 0; mem:LD4[%sunkaddr30](tbaa=!2) FPR32:%vreg63 GPR32:%vreg62
	%vreg24<def> = ADDri_r32 %vreg21, 4, %STATUS<imp-def,dead>; GPR32:%vreg24,%vreg21
	%vreg23<def> = ADDri_r32 %vreg22<kill>, 4, %STATUS<imp-def,dead>; GPR32:%vreg23,%vreg22
	%vreg64<def> = LDRf32 %vreg21, 0; mem:Volatile LD4[%lsr.iv24](tbaa=!2) FPR32:%vreg64 GPR32:%vreg21
	%vreg76<def> = LDRi32_r32 <fi#2>, 0; mem:LD4[FixedStack2] GPR32:%vreg76
	GID %CONFIG<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %vreg76<kill>; GPR32:%vreg76
	GIE %CONFIG<imp-def,dead>
	%vreg65<def> = FADDrr_r32 %vreg63<kill>, %vreg64<kill>, %STATUS<imp-def,dead>; FPR32:%vreg65,%vreg63,%vreg64
	%vreg66<def,dead> = CMPri_r32 %vreg23, 32, %STATUS<imp-def>; GPR32:%vreg66,%vreg23
	STRf32 %vreg65<kill>, %vreg21<kill>, 0; mem:Volatile ST4[%lsr.iv24](tbaa=!2) FPR32:%vreg65 GPR32:%vreg21
	BCC <BB#9>, 1, %STATUS<imp-use>
	BNONE32 <BB#10>, %STATUS<imp-use>
    Successors according to CFG: BB#10(0x04000000 / 0x80000000 = 3.12%) BB#9(0x7c000000 / 0x80000000 = 96.88%)

BB#10: derived from LLVM BB %for.end75
    Predecessors according to CFG: BB#9
	%vreg27<def> = ADDri_r32 %vreg6<kill>, 32, %STATUS<imp-def,dead>; GPR32:%vreg27,%vreg6
	%vreg26<def> = ADDri_r32 %vreg7<kill>, 32, %STATUS<imp-def,dead>; GPR32:%vreg26,%vreg7
	%vreg25<def> = ADDri_r32 %vreg8<kill>, 8, %STATUS<imp-def,dead>; GPR32:%vreg25,%vreg8
	%vreg67<def,dead> = CMPrr_r32 %vreg25, %vreg33, %STATUS<imp-def>; GPR32:%vreg67,%vreg25,%vreg33
	BCC <BB#4>, 8, %STATUS<imp-use>
	BNONE32 <BB#11>, %STATUS<imp-use>
    Successors according to CFG: BB#4(0x7c000000 / 0x80000000 = 96.88%) BB#11(0x04000000 / 0x80000000 = 3.12%)

BB#11: derived from LLVM BB %for.end78
    Predecessors according to CFG: BB#10
	%vreg29<def> = ADDrr_r32 %vreg3<kill>, %vreg1, %STATUS<imp-def,dead>; GPR32:%vreg29,%vreg3,%vreg1
	%vreg28<def> = ADDri_r32 %vreg4<kill>, 1, %STATUS<imp-def,dead>; GPR32:%vreg28,%vreg4
	%vreg68<def,dead> = CMPrr_r32 %vreg28, %vreg33, %STATUS<imp-def>; GPR32:%vreg68,%vreg28,%vreg33
	BCC <BB#3>, 1, %STATUS<imp-use>
	BNONE32 <BB#12>, %STATUS<imp-use>
    Successors according to CFG: BB#12(0x04000000 / 0x80000000 = 3.12%) BB#3(0x7c000000 / 0x80000000 = 96.88%)

BB#12: derived from LLVM BB %for.end81
    Predecessors according to CFG: BB#1 BB#11
	%vreg77<def> = LDRi32_r32 <fi#1>, 0; mem:LD4[FixedStack1] GPR32:%vreg77
	GID
	%CONFIG<def> = MOVTS32_core %vreg77<kill>; GPR32:%vreg77
	GIE %CONFIG<imp-use,kill>
	RTS

# End machine code for function matmac.

# *** IR Dump After Eliminate PHI nodes for register allocation ***:
# Machine code for function matmac: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=32, align=8, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=4, align=8, at location [SP]
Function Live Ins: %R0 in %vreg30, %R1 in %vreg31, %R2 in %vreg32, %R3 in %vreg33

BB#0: 
    Live Ins: %R0 %R1 %R2 %R3
	GID %CONFIG<imp-def>
	%vreg71<def> = MOVFS32_core %CONFIG; GPR32:%vreg71
	STRi32_r32 %vreg71, <fi#1>, 0; mem:ST4[FixedStack1] GPR32:%vreg71
	%vreg72<def> = MOVi32ri 65535; GPR32:%vreg72
	%vreg73<def,tied1> = MOVTi32ri %vreg72<kill,tied0>, 65521; GPR32:%vreg73,%vreg72
	%vreg69<def> = ANDrr_r32 %vreg71, %vreg73<kill>, %STATUS<imp-def>; GPR32:%vreg69,%vreg71,%vreg73
	%vreg70<def,tied1> = MOVTi32ri %vreg71<kill,tied0>, 72; GPR32:%vreg70,%vreg71
	%vreg78<def> = REG_SEQUENCE %vreg69<kill>, isub_lo, %vreg70<kill>, isub_hi; GPR64:%vreg78 GPR32:%vreg69,%vreg70
	STRi64 %vreg78<kill>, <fi#3>, 0; mem:ST4[FixedStack3] ST4[FixedStack2] GPR64:%vreg78
	GIE %CONFIG<imp-use,kill>
    Successors according to CFG: BB#1(?%)

BB#1: derived from LLVM BB %entry
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#0
	%vreg33<def> = COPY %R3<kill>; GPR32:%vreg33
	%vreg32<def> = COPY %R2<kill>; GPR32:%vreg32
	%vreg31<def> = COPY %R1<kill>; GPR32:%vreg31
	%vreg30<def> = COPY %R0<kill>; GPR32:%vreg30
	%vreg34<def,dead> = CMPri_r32 %vreg33, 1, %STATUS<imp-def>; GPR32:%vreg34,%vreg33
	BCC <BB#12>, 8, %STATUS<imp-use>
	BNONE32 <BB#2>, %STATUS<imp-use>
    Successors according to CFG: BB#2(0x50000000 / 0x80000000 = 62.50%) BB#12(0x30000000 / 0x80000000 = 37.50%)

BB#2: derived from LLVM BB %for.body3.lr.ph.preheader
    Predecessors according to CFG: BB#1
	%vreg1<def> = LSL32ri %vreg33, 2, %STATUS<imp-def,dead>; GPR32:%vreg1,%vreg33
	%vreg0<def> = ADDri_r32 %vreg31<kill>, 8, %STATUS<imp-def,dead>; GPR32:%vreg0,%vreg31
	%vreg36<def> = MOViPTR <fi#0>, 0; GPR32:%vreg36
	%vreg2<def> = ADDri_r32 %vreg36, 8, %STATUS<imp-def,dead>; GPR32:%vreg2,%vreg36
	%vreg35<def> = MOVi32ri 0; GPR32:%vreg35
	%vreg81<def> = COPY %vreg32<kill>; GPR32:%vreg81,%vreg32
	%vreg82<def> = COPY %vreg35; GPR32:%vreg82,%vreg35
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %for.body3.lr.ph
    Predecessors according to CFG: BB#2 BB#11
	%vreg4<def> = COPY %vreg82<kill>; GPR32:%vreg4,%vreg82
	%vreg3<def> = COPY %vreg81<kill>; GPR32:%vreg3,%vreg81
	%vreg74<def> = LDRi32_r32 <fi#3>, 0; mem:LD4[FixedStack3] GPR32:%vreg74
	GID %CONFIG<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %vreg74<kill>; GPR32:%vreg74
	GIE %CONFIG<imp-def,dead>
	%vreg38<def> = IMULrr_r32 %vreg4, %vreg33, %STATUS<imp-def,dead>; GPR32:%vreg38,%vreg4,%vreg33
	%vreg39<def> = LSL32ri %vreg38<kill>, 2, %STATUS<imp-def,dead>; GPR32:%vreg39,%vreg38
	%vreg5<def> = ADDrr_r32 %vreg30, %vreg39<kill>, %STATUS<imp-def,dead>; GPR32:%vreg5,%vreg30,%vreg39
	%vreg83<def> = COPY %vreg3; GPR32:%vreg83,%vreg3
	%vreg84<def> = COPY %vreg0; GPR32:%vreg84,%vreg0
	%vreg85<def> = COPY %vreg35; GPR32:%vreg85,%vreg35
    Successors according to CFG: BB#4(?%)

BB#4: derived from LLVM BB %for.body9.preheader
    Predecessors according to CFG: BB#3 BB#10
	%vreg8<def> = COPY %vreg85<kill>; GPR32:%vreg8,%vreg85
	%vreg7<def> = COPY %vreg84<kill>; GPR32:%vreg7,%vreg84
	%vreg6<def> = COPY %vreg83<kill>; GPR32:%vreg6,%vreg83
	%vreg42<def> = REG_SEQUENCE %vreg35, isub_hi, %vreg35, isub_lo; FPR64_with_isub_hi_in_FPR32:%vreg42 GPR32:%vreg35
	STRi64 %vreg42, <fi#0>, 24; mem:ST8[%1+24] FPR64_with_isub_hi_in_FPR32:%vreg42
	STRi64 %vreg42, <fi#0>, 16; mem:ST8[%1+16] FPR64_with_isub_hi_in_FPR32:%vreg42
	STRi64 %vreg42, <fi#0>, 8; mem:ST8[%1+8] FPR64_with_isub_hi_in_FPR32:%vreg42
	STRi64 %vreg42<kill>, <fi#0>, 0; mem:ST8[%1] FPR64_with_isub_hi_in_FPR32:%vreg42
	%vreg86<def> = COPY %vreg7; GPR32:%vreg86,%vreg7
	%vreg87<def> = COPY %vreg35; GPR32:%vreg87,%vreg35
	BNONE32 <BB#6>, %STATUS<imp-use>
    Successors according to CFG: BB#6(?%)

BB#5: derived from LLVM BB %for.cond64.preheader
    Predecessors according to CFG: BB#8
	%vreg91<def> = COPY %vreg6; GPR32:%vreg91,%vreg6
	%vreg92<def> = COPY %vreg35; GPR32:%vreg92,%vreg35
	BNONE32 <BB#9>, %STATUS<imp-use>
    Successors according to CFG: BB#9(?%)

BB#6: derived from LLVM BB %for.body9
    Predecessors according to CFG: BB#4 BB#8
	%vreg10<def> = COPY %vreg87<kill>; GPR32:%vreg10,%vreg87
	%vreg9<def> = COPY %vreg86<kill>; GPR32:%vreg9,%vreg86
	%vreg44<def> = LSL32ri %vreg10, 2, %STATUS<imp-def,dead>; GPR32:%vreg44,%vreg10
	%vreg45<def> = ADDrr_r32 %vreg5, %vreg44<kill>, %STATUS<imp-def,dead>; GPR32:%vreg45,%vreg5,%vreg44
	%vreg11<def> = COPY %vreg2; GPR32:%vreg11,%vreg2
	%vreg12<def> = LDRf32 %vreg45<kill>, 0; mem:Volatile LD4[%add.ptr10](tbaa=!2) FPR32:%vreg12 GPR32:%vreg45
	%vreg88<def> = COPY %vreg11<kill>; GPR32:%vreg88,%vreg11
	%vreg89<def> = COPY %vreg9; GPR32:%vreg89,%vreg9
	%vreg90<def> = COPY %vreg35; GPR32:%vreg90,%vreg35
    Successors according to CFG: BB#7(?%)

BB#7: derived from LLVM BB %for.body13
    Predecessors according to CFG: BB#6 BB#7
	%vreg15<def> = COPY %vreg90<kill>; GPR32:%vreg15,%vreg90
	%vreg14<def> = COPY %vreg89<kill>; GPR32:%vreg14,%vreg89
	%vreg13<def> = COPY %vreg88<kill>; GPR32:%vreg13,%vreg88
	%vreg46<def> = LDRf32 %vreg14, -8; mem:Volatile LD4[%scevgep8](tbaa=!2) FPR32:%vreg46 GPR32:%vreg14
	%vreg18<def> = ADDri_r32 %vreg13, 16, %STATUS<imp-def,dead>; GPR32:%vreg18,%vreg13
	%vreg17<def> = ADDri_r32 %vreg14, 16, %STATUS<imp-def,dead>; GPR32:%vreg17,%vreg14
	%vreg47<def> = LDRf32 %vreg14, -4; mem:Volatile LD4[%scevgep9](tbaa=!2) FPR32:%vreg47 GPR32:%vreg14
	%vreg16<def> = ADDri_r32 %vreg15<kill>, 4, %STATUS<imp-def,dead>; GPR32:%vreg16,%vreg15
	%vreg48<def> = LDRf32 %vreg14, 0; mem:Volatile LD4[%lsr.iv5](tbaa=!2) FPR32:%vreg48 GPR32:%vreg14
	%vreg49<def> = LDRf32 %vreg14<kill>, 4; mem:Volatile LD4[%scevgep7](tbaa=!2) FPR32:%vreg49 GPR32:%vreg14
	%vreg79<def> = LDRf64 %vreg13, -8; mem:LD4[%scevgep17](tbaa=!2) LD4[%scevgep15](tbaa=!2) FPR64:%vreg79 GPR32:%vreg13
	%vreg50<def> = COPY %vreg79:isub_hi; FPR32:%vreg50 FPR64:%vreg79
	%vreg52<def> = COPY %vreg79:isub_lo<kill>; FPR32:%vreg52 FPR64:%vreg79
	%vreg75<def> = LDRi32_r32 <fi#2>, 0; mem:LD4[FixedStack2] GPR32:%vreg75
	GID %CONFIG<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %vreg75<kill>; GPR32:%vreg75
	GIE %CONFIG<imp-def,dead>
	%vreg51<def,tied1> = FMADDrr_r32 %vreg50<kill,tied0>, %vreg12, %vreg46<kill>, %STATUS<imp-def,dead>; FPR32:%vreg51,%vreg50,%vreg12,%vreg46
	%vreg53<def,tied1> = FMADDrr_r32 %vreg52<kill,tied0>, %vreg12, %vreg47<kill>, %STATUS<imp-def,dead>; FPR32:%vreg53,%vreg52,%vreg12,%vreg47
	%vreg80<def> = REG_SEQUENCE %vreg51<kill>, isub_lo, %vreg53<kill>, isub_hi; FPR64:%vreg80 FPR32:%vreg51,%vreg53
	STRf64 %vreg80<kill>, %vreg13, -8; mem:ST4[%scevgep17](tbaa=!2) ST4[%scevgep15](tbaa=!2) FPR64:%vreg80 GPR32:%vreg13
	%vreg54<def> = LDRf32 %vreg13, 0; mem:LD4[%lsr.iv1214](tbaa=!2) FPR32:%vreg54 GPR32:%vreg13
	%vreg55<def,tied1> = FMADDrr_r32 %vreg54<kill,tied0>, %vreg12, %vreg48<kill>, %STATUS<imp-def,dead>; FPR32:%vreg55,%vreg54,%vreg12,%vreg48
	STRf32 %vreg55<kill>, %vreg13, 0; mem:ST4[%lsr.iv1214](tbaa=!2) FPR32:%vreg55 GPR32:%vreg13
	%vreg56<def> = LDRf32 %vreg13, 4; mem:LD4[%scevgep16](tbaa=!2) FPR32:%vreg56 GPR32:%vreg13
	%vreg57<def,tied1> = FMADDrr_r32 %vreg56<kill,tied0>, %vreg12, %vreg49<kill>, %STATUS<imp-def,dead>; FPR32:%vreg57,%vreg56,%vreg12,%vreg49
	%vreg58<def,dead> = CMPri_r32 %vreg16, 8, %STATUS<imp-def>; GPR32:%vreg58,%vreg16
	STRf32 %vreg57<kill>, %vreg13<kill>, 4; mem:ST4[%scevgep16](tbaa=!2) FPR32:%vreg57 GPR32:%vreg13
	%vreg88<def> = COPY %vreg18<kill>; GPR32:%vreg88,%vreg18
	%vreg89<def> = COPY %vreg17<kill>; GPR32:%vreg89,%vreg17
	%vreg90<def> = COPY %vreg16<kill>; GPR32:%vreg90,%vreg16
	BCC <BB#7>, 8, %STATUS<imp-use>
	BNONE32 <BB#8>, %STATUS<imp-use>
    Successors according to CFG: BB#7(0x7c000000 / 0x80000000 = 96.88%) BB#8(0x04000000 / 0x80000000 = 3.12%)

BB#8: derived from LLVM BB %for.end60
    Predecessors according to CFG: BB#7
	%vreg20<def> = ADDrr_r32 %vreg9<kill>, %vreg1, %STATUS<imp-def,dead>; GPR32:%vreg20,%vreg9,%vreg1
	%vreg19<def> = ADDri_r32 %vreg10<kill>, 1, %STATUS<imp-def,dead>; GPR32:%vreg19,%vreg10
	%vreg59<def,dead> = CMPrr_r32 %vreg19, %vreg33, %STATUS<imp-def>; GPR32:%vreg59,%vreg19,%vreg33
	%vreg86<def> = COPY %vreg20<kill>; GPR32:%vreg86,%vreg20
	%vreg87<def> = COPY %vreg19<kill>; GPR32:%vreg87,%vreg19
	BCC <BB#5>, 0, %STATUS<imp-use>
	BNONE32 <BB#6>, %STATUS<imp-use>
    Successors according to CFG: BB#5(0x04000000 / 0x80000000 = 3.12%) BB#6(0x7c000000 / 0x80000000 = 96.88%)

BB#9: derived from LLVM BB %for.body66
    Predecessors according to CFG: BB#5 BB#9
	%vreg22<def> = COPY %vreg92<kill>; GPR32:%vreg22,%vreg92
	%vreg21<def> = COPY %vreg91<kill>; GPR32:%vreg21,%vreg91
	%vreg62<def> = ADDrr_r32 %vreg36, %vreg22, %STATUS<imp-def,dead>; GPR32:%vreg62,%vreg36,%vreg22
	%vreg63<def> = LDRf32 %vreg62<kill>, 0; mem:LD4[%sunkaddr30](tbaa=!2) FPR32:%vreg63 GPR32:%vreg62
	%vreg24<def> = ADDri_r32 %vreg21, 4, %STATUS<imp-def,dead>; GPR32:%vreg24,%vreg21
	%vreg23<def> = ADDri_r32 %vreg22<kill>, 4, %STATUS<imp-def,dead>; GPR32:%vreg23,%vreg22
	%vreg64<def> = LDRf32 %vreg21, 0; mem:Volatile LD4[%lsr.iv24](tbaa=!2) FPR32:%vreg64 GPR32:%vreg21
	%vreg76<def> = LDRi32_r32 <fi#2>, 0; mem:LD4[FixedStack2] GPR32:%vreg76
	GID %CONFIG<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %vreg76<kill>; GPR32:%vreg76
	GIE %CONFIG<imp-def,dead>
	%vreg65<def> = FADDrr_r32 %vreg63<kill>, %vreg64<kill>, %STATUS<imp-def,dead>; FPR32:%vreg65,%vreg63,%vreg64
	%vreg66<def,dead> = CMPri_r32 %vreg23, 32, %STATUS<imp-def>; GPR32:%vreg66,%vreg23
	STRf32 %vreg65<kill>, %vreg21<kill>, 0; mem:Volatile ST4[%lsr.iv24](tbaa=!2) FPR32:%vreg65 GPR32:%vreg21
	%vreg91<def> = COPY %vreg24<kill>; GPR32:%vreg91,%vreg24
	%vreg92<def> = COPY %vreg23<kill>; GPR32:%vreg92,%vreg23
	BCC <BB#9>, 1, %STATUS<imp-use>
	BNONE32 <BB#10>, %STATUS<imp-use>
    Successors according to CFG: BB#10(0x04000000 / 0x80000000 = 3.12%) BB#9(0x7c000000 / 0x80000000 = 96.88%)

BB#10: derived from LLVM BB %for.end75
    Predecessors according to CFG: BB#9
	%vreg27<def> = ADDri_r32 %vreg6<kill>, 32, %STATUS<imp-def,dead>; GPR32:%vreg27,%vreg6
	%vreg26<def> = ADDri_r32 %vreg7<kill>, 32, %STATUS<imp-def,dead>; GPR32:%vreg26,%vreg7
	%vreg25<def> = ADDri_r32 %vreg8<kill>, 8, %STATUS<imp-def,dead>; GPR32:%vreg25,%vreg8
	%vreg67<def,dead> = CMPrr_r32 %vreg25, %vreg33, %STATUS<imp-def>; GPR32:%vreg67,%vreg25,%vreg33
	%vreg83<def> = COPY %vreg27<kill>; GPR32:%vreg83,%vreg27
	%vreg84<def> = COPY %vreg26<kill>; GPR32:%vreg84,%vreg26
	%vreg85<def> = COPY %vreg25<kill>; GPR32:%vreg85,%vreg25
	BCC <BB#4>, 8, %STATUS<imp-use>
	BNONE32 <BB#11>, %STATUS<imp-use>
    Successors according to CFG: BB#4(0x7c000000 / 0x80000000 = 96.88%) BB#11(0x04000000 / 0x80000000 = 3.12%)

BB#11: derived from LLVM BB %for.end78
    Predecessors according to CFG: BB#10
	%vreg29<def> = ADDrr_r32 %vreg3<kill>, %vreg1, %STATUS<imp-def,dead>; GPR32:%vreg29,%vreg3,%vreg1
	%vreg28<def> = ADDri_r32 %vreg4<kill>, 1, %STATUS<imp-def,dead>; GPR32:%vreg28,%vreg4
	%vreg68<def,dead> = CMPrr_r32 %vreg28, %vreg33, %STATUS<imp-def>; GPR32:%vreg68,%vreg28,%vreg33
	%vreg81<def> = COPY %vreg29<kill>; GPR32:%vreg81,%vreg29
	%vreg82<def> = COPY %vreg28<kill>; GPR32:%vreg82,%vreg28
	BCC <BB#3>, 1, %STATUS<imp-use>
	BNONE32 <BB#12>, %STATUS<imp-use>
    Successors according to CFG: BB#12(0x04000000 / 0x80000000 = 3.12%) BB#3(0x7c000000 / 0x80000000 = 96.88%)

BB#12: derived from LLVM BB %for.end81
    Predecessors according to CFG: BB#1 BB#11
	%vreg77<def> = LDRi32_r32 <fi#1>, 0; mem:LD4[FixedStack1] GPR32:%vreg77
	GID
	%CONFIG<def> = MOVTS32_core %vreg77<kill>; GPR32:%vreg77
	GIE %CONFIG<imp-use,kill>
	RTS

# End machine code for function matmac.

# *** IR Dump Before Two-Address instruction pass ***:
# Machine code for function matmac: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=32, align=8, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=4, align=8, at location [SP]
Function Live Ins: %R0 in %vreg30, %R1 in %vreg31, %R2 in %vreg32, %R3 in %vreg33

BB#0: 
    Live Ins: %R0 %R1 %R2 %R3
	GID %CONFIG<imp-def>
	%vreg71<def> = MOVFS32_core %CONFIG; GPR32:%vreg71
	STRi32_r32 %vreg71, <fi#1>, 0; mem:ST4[FixedStack1] GPR32:%vreg71
	%vreg72<def> = MOVi32ri 65535; GPR32:%vreg72
	%vreg73<def,tied1> = MOVTi32ri %vreg72<kill,tied0>, 65521; GPR32:%vreg73,%vreg72
	%vreg69<def> = ANDrr_r32 %vreg71, %vreg73<kill>, %STATUS<imp-def>; GPR32:%vreg69,%vreg71,%vreg73
	%vreg70<def,tied1> = MOVTi32ri %vreg71<kill,tied0>, 72; GPR32:%vreg70,%vreg71
	%vreg78<def> = REG_SEQUENCE %vreg69<kill>, isub_lo, %vreg70<kill>, isub_hi; GPR64:%vreg78 GPR32:%vreg69,%vreg70
	STRi64 %vreg78<kill>, <fi#3>, 0; mem:ST4[FixedStack3] ST4[FixedStack2] GPR64:%vreg78
	GIE %CONFIG<imp-use,kill>
    Successors according to CFG: BB#1(?%)

BB#1: derived from LLVM BB %entry
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#0
	%vreg33<def> = COPY %R3<kill>; GPR32:%vreg33
	%vreg32<def> = COPY %R2<kill>; GPR32:%vreg32
	%vreg31<def> = COPY %R1<kill>; GPR32:%vreg31
	%vreg30<def> = COPY %R0<kill>; GPR32:%vreg30
	%vreg34<def,dead> = CMPri_r32 %vreg33, 1, %STATUS<imp-def>; GPR32:%vreg34,%vreg33
	BCC <BB#12>, 8, %STATUS<imp-use>
	BNONE32 <BB#2>, %STATUS<imp-use>
    Successors according to CFG: BB#2(0x50000000 / 0x80000000 = 62.50%) BB#12(0x30000000 / 0x80000000 = 37.50%)

BB#2: derived from LLVM BB %for.body3.lr.ph.preheader
    Predecessors according to CFG: BB#1
	%vreg1<def> = LSL32ri %vreg33, 2, %STATUS<imp-def,dead>; GPR32:%vreg1,%vreg33
	%vreg0<def> = ADDri_r32 %vreg31<kill>, 8, %STATUS<imp-def,dead>; GPR32:%vreg0,%vreg31
	%vreg36<def> = MOViPTR <fi#0>, 0; GPR32:%vreg36
	%vreg2<def> = ADDri_r32 %vreg36, 8, %STATUS<imp-def,dead>; GPR32:%vreg2,%vreg36
	%vreg35<def> = MOVi32ri 0; GPR32:%vreg35
	%vreg81<def> = COPY %vreg32<kill>; GPR32:%vreg81,%vreg32
	%vreg82<def> = COPY %vreg35; GPR32:%vreg82,%vreg35
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %for.body3.lr.ph
    Predecessors according to CFG: BB#2 BB#11
	%vreg4<def> = COPY %vreg82<kill>; GPR32:%vreg4,%vreg82
	%vreg3<def> = COPY %vreg81<kill>; GPR32:%vreg3,%vreg81
	%vreg74<def> = LDRi32_r32 <fi#3>, 0; mem:LD4[FixedStack3] GPR32:%vreg74
	GID %CONFIG<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %vreg74<kill>; GPR32:%vreg74
	GIE %CONFIG<imp-def,dead>
	%vreg38<def> = IMULrr_r32 %vreg4, %vreg33, %STATUS<imp-def,dead>; GPR32:%vreg38,%vreg4,%vreg33
	%vreg39<def> = LSL32ri %vreg38<kill>, 2, %STATUS<imp-def,dead>; GPR32:%vreg39,%vreg38
	%vreg5<def> = ADDrr_r32 %vreg30, %vreg39<kill>, %STATUS<imp-def,dead>; GPR32:%vreg5,%vreg30,%vreg39
	%vreg83<def> = COPY %vreg3; GPR32:%vreg83,%vreg3
	%vreg84<def> = COPY %vreg0; GPR32:%vreg84,%vreg0
	%vreg85<def> = COPY %vreg35; GPR32:%vreg85,%vreg35
    Successors according to CFG: BB#4(?%)

BB#4: derived from LLVM BB %for.body9.preheader
    Predecessors according to CFG: BB#3 BB#10
	%vreg8<def> = COPY %vreg85<kill>; GPR32:%vreg8,%vreg85
	%vreg7<def> = COPY %vreg84<kill>; GPR32:%vreg7,%vreg84
	%vreg6<def> = COPY %vreg83<kill>; GPR32:%vreg6,%vreg83
	%vreg42<def> = REG_SEQUENCE %vreg35, isub_hi, %vreg35, isub_lo; FPR64_with_isub_hi_in_FPR32:%vreg42 GPR32:%vreg35
	STRi64 %vreg42, <fi#0>, 24; mem:ST8[%1+24] FPR64_with_isub_hi_in_FPR32:%vreg42
	STRi64 %vreg42, <fi#0>, 16; mem:ST8[%1+16] FPR64_with_isub_hi_in_FPR32:%vreg42
	STRi64 %vreg42, <fi#0>, 8; mem:ST8[%1+8] FPR64_with_isub_hi_in_FPR32:%vreg42
	STRi64 %vreg42<kill>, <fi#0>, 0; mem:ST8[%1] FPR64_with_isub_hi_in_FPR32:%vreg42
	%vreg86<def> = COPY %vreg7; GPR32:%vreg86,%vreg7
	%vreg87<def> = COPY %vreg35; GPR32:%vreg87,%vreg35
	BNONE32 <BB#6>, %STATUS<imp-use>
    Successors according to CFG: BB#6(?%)

BB#5: derived from LLVM BB %for.cond64.preheader
    Predecessors according to CFG: BB#8
	%vreg91<def> = COPY %vreg6; GPR32:%vreg91,%vreg6
	%vreg92<def> = COPY %vreg35; GPR32:%vreg92,%vreg35
	BNONE32 <BB#9>, %STATUS<imp-use>
    Successors according to CFG: BB#9(?%)

BB#6: derived from LLVM BB %for.body9
    Predecessors according to CFG: BB#4 BB#8
	%vreg10<def> = COPY %vreg87<kill>; GPR32:%vreg10,%vreg87
	%vreg9<def> = COPY %vreg86<kill>; GPR32:%vreg9,%vreg86
	%vreg44<def> = LSL32ri %vreg10, 2, %STATUS<imp-def,dead>; GPR32:%vreg44,%vreg10
	%vreg45<def> = ADDrr_r32 %vreg5, %vreg44<kill>, %STATUS<imp-def,dead>; GPR32:%vreg45,%vreg5,%vreg44
	%vreg11<def> = COPY %vreg2; GPR32:%vreg11,%vreg2
	%vreg12<def> = LDRf32 %vreg45<kill>, 0; mem:Volatile LD4[%add.ptr10](tbaa=!2) FPR32:%vreg12 GPR32:%vreg45
	%vreg88<def> = COPY %vreg11<kill>; GPR32:%vreg88,%vreg11
	%vreg89<def> = COPY %vreg9; GPR32:%vreg89,%vreg9
	%vreg90<def> = COPY %vreg35; GPR32:%vreg90,%vreg35
    Successors according to CFG: BB#7(?%)

BB#7: derived from LLVM BB %for.body13
    Predecessors according to CFG: BB#6 BB#7
	%vreg15<def> = COPY %vreg90<kill>; GPR32:%vreg15,%vreg90
	%vreg14<def> = COPY %vreg89<kill>; GPR32:%vreg14,%vreg89
	%vreg13<def> = COPY %vreg88<kill>; GPR32:%vreg13,%vreg88
	%vreg46<def> = LDRf32 %vreg14, -8; mem:Volatile LD4[%scevgep8](tbaa=!2) FPR32:%vreg46 GPR32:%vreg14
	%vreg18<def> = ADDri_r32 %vreg13, 16, %STATUS<imp-def,dead>; GPR32:%vreg18,%vreg13
	%vreg17<def> = ADDri_r32 %vreg14, 16, %STATUS<imp-def,dead>; GPR32:%vreg17,%vreg14
	%vreg47<def> = LDRf32 %vreg14, -4; mem:Volatile LD4[%scevgep9](tbaa=!2) FPR32:%vreg47 GPR32:%vreg14
	%vreg16<def> = ADDri_r32 %vreg15<kill>, 4, %STATUS<imp-def,dead>; GPR32:%vreg16,%vreg15
	%vreg48<def> = LDRf32 %vreg14, 0; mem:Volatile LD4[%lsr.iv5](tbaa=!2) FPR32:%vreg48 GPR32:%vreg14
	%vreg49<def> = LDRf32 %vreg14<kill>, 4; mem:Volatile LD4[%scevgep7](tbaa=!2) FPR32:%vreg49 GPR32:%vreg14
	%vreg79<def> = LDRf64 %vreg13, -8; mem:LD4[%scevgep17](tbaa=!2) LD4[%scevgep15](tbaa=!2) FPR64:%vreg79 GPR32:%vreg13
	%vreg50<def> = COPY %vreg79:isub_hi; FPR32:%vreg50 FPR64:%vreg79
	%vreg52<def> = COPY %vreg79:isub_lo<kill>; FPR32:%vreg52 FPR64:%vreg79
	%vreg75<def> = LDRi32_r32 <fi#2>, 0; mem:LD4[FixedStack2] GPR32:%vreg75
	GID %CONFIG<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %vreg75<kill>; GPR32:%vreg75
	GIE %CONFIG<imp-def,dead>
	%vreg51<def,tied1> = FMADDrr_r32 %vreg50<kill,tied0>, %vreg12, %vreg46<kill>, %STATUS<imp-def,dead>; FPR32:%vreg51,%vreg50,%vreg12,%vreg46
	%vreg53<def,tied1> = FMADDrr_r32 %vreg52<kill,tied0>, %vreg12, %vreg47<kill>, %STATUS<imp-def,dead>; FPR32:%vreg53,%vreg52,%vreg12,%vreg47
	%vreg80<def> = REG_SEQUENCE %vreg51<kill>, isub_lo, %vreg53<kill>, isub_hi; FPR64:%vreg80 FPR32:%vreg51,%vreg53
	STRf64 %vreg80<kill>, %vreg13, -8; mem:ST4[%scevgep17](tbaa=!2) ST4[%scevgep15](tbaa=!2) FPR64:%vreg80 GPR32:%vreg13
	%vreg54<def> = LDRf32 %vreg13, 0; mem:LD4[%lsr.iv1214](tbaa=!2) FPR32:%vreg54 GPR32:%vreg13
	%vreg55<def,tied1> = FMADDrr_r32 %vreg54<kill,tied0>, %vreg12, %vreg48<kill>, %STATUS<imp-def,dead>; FPR32:%vreg55,%vreg54,%vreg12,%vreg48
	STRf32 %vreg55<kill>, %vreg13, 0; mem:ST4[%lsr.iv1214](tbaa=!2) FPR32:%vreg55 GPR32:%vreg13
	%vreg56<def> = LDRf32 %vreg13, 4; mem:LD4[%scevgep16](tbaa=!2) FPR32:%vreg56 GPR32:%vreg13
	%vreg57<def,tied1> = FMADDrr_r32 %vreg56<kill,tied0>, %vreg12, %vreg49<kill>, %STATUS<imp-def,dead>; FPR32:%vreg57,%vreg56,%vreg12,%vreg49
	%vreg58<def,dead> = CMPri_r32 %vreg16, 8, %STATUS<imp-def>; GPR32:%vreg58,%vreg16
	STRf32 %vreg57<kill>, %vreg13<kill>, 4; mem:ST4[%scevgep16](tbaa=!2) FPR32:%vreg57 GPR32:%vreg13
	%vreg88<def> = COPY %vreg18<kill>; GPR32:%vreg88,%vreg18
	%vreg89<def> = COPY %vreg17<kill>; GPR32:%vreg89,%vreg17
	%vreg90<def> = COPY %vreg16<kill>; GPR32:%vreg90,%vreg16
	BCC <BB#7>, 8, %STATUS<imp-use>
	BNONE32 <BB#8>, %STATUS<imp-use>
    Successors according to CFG: BB#7(0x7c000000 / 0x80000000 = 96.88%) BB#8(0x04000000 / 0x80000000 = 3.12%)

BB#8: derived from LLVM BB %for.end60
    Predecessors according to CFG: BB#7
	%vreg20<def> = ADDrr_r32 %vreg9<kill>, %vreg1, %STATUS<imp-def,dead>; GPR32:%vreg20,%vreg9,%vreg1
	%vreg19<def> = ADDri_r32 %vreg10<kill>, 1, %STATUS<imp-def,dead>; GPR32:%vreg19,%vreg10
	%vreg59<def,dead> = CMPrr_r32 %vreg19, %vreg33, %STATUS<imp-def>; GPR32:%vreg59,%vreg19,%vreg33
	%vreg86<def> = COPY %vreg20<kill>; GPR32:%vreg86,%vreg20
	%vreg87<def> = COPY %vreg19<kill>; GPR32:%vreg87,%vreg19
	BCC <BB#5>, 0, %STATUS<imp-use>
	BNONE32 <BB#6>, %STATUS<imp-use>
    Successors according to CFG: BB#5(0x04000000 / 0x80000000 = 3.12%) BB#6(0x7c000000 / 0x80000000 = 96.88%)

BB#9: derived from LLVM BB %for.body66
    Predecessors according to CFG: BB#5 BB#9
	%vreg22<def> = COPY %vreg92<kill>; GPR32:%vreg22,%vreg92
	%vreg21<def> = COPY %vreg91<kill>; GPR32:%vreg21,%vreg91
	%vreg62<def> = ADDrr_r32 %vreg36, %vreg22, %STATUS<imp-def,dead>; GPR32:%vreg62,%vreg36,%vreg22
	%vreg63<def> = LDRf32 %vreg62<kill>, 0; mem:LD4[%sunkaddr30](tbaa=!2) FPR32:%vreg63 GPR32:%vreg62
	%vreg24<def> = ADDri_r32 %vreg21, 4, %STATUS<imp-def,dead>; GPR32:%vreg24,%vreg21
	%vreg23<def> = ADDri_r32 %vreg22<kill>, 4, %STATUS<imp-def,dead>; GPR32:%vreg23,%vreg22
	%vreg64<def> = LDRf32 %vreg21, 0; mem:Volatile LD4[%lsr.iv24](tbaa=!2) FPR32:%vreg64 GPR32:%vreg21
	%vreg76<def> = LDRi32_r32 <fi#2>, 0; mem:LD4[FixedStack2] GPR32:%vreg76
	GID %CONFIG<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %vreg76<kill>; GPR32:%vreg76
	GIE %CONFIG<imp-def,dead>
	%vreg65<def> = FADDrr_r32 %vreg63<kill>, %vreg64<kill>, %STATUS<imp-def,dead>; FPR32:%vreg65,%vreg63,%vreg64
	%vreg66<def,dead> = CMPri_r32 %vreg23, 32, %STATUS<imp-def>; GPR32:%vreg66,%vreg23
	STRf32 %vreg65<kill>, %vreg21<kill>, 0; mem:Volatile ST4[%lsr.iv24](tbaa=!2) FPR32:%vreg65 GPR32:%vreg21
	%vreg91<def> = COPY %vreg24<kill>; GPR32:%vreg91,%vreg24
	%vreg92<def> = COPY %vreg23<kill>; GPR32:%vreg92,%vreg23
	BCC <BB#9>, 1, %STATUS<imp-use>
	BNONE32 <BB#10>, %STATUS<imp-use>
    Successors according to CFG: BB#10(0x04000000 / 0x80000000 = 3.12%) BB#9(0x7c000000 / 0x80000000 = 96.88%)

BB#10: derived from LLVM BB %for.end75
    Predecessors according to CFG: BB#9
	%vreg27<def> = ADDri_r32 %vreg6<kill>, 32, %STATUS<imp-def,dead>; GPR32:%vreg27,%vreg6
	%vreg26<def> = ADDri_r32 %vreg7<kill>, 32, %STATUS<imp-def,dead>; GPR32:%vreg26,%vreg7
	%vreg25<def> = ADDri_r32 %vreg8<kill>, 8, %STATUS<imp-def,dead>; GPR32:%vreg25,%vreg8
	%vreg67<def,dead> = CMPrr_r32 %vreg25, %vreg33, %STATUS<imp-def>; GPR32:%vreg67,%vreg25,%vreg33
	%vreg83<def> = COPY %vreg27<kill>; GPR32:%vreg83,%vreg27
	%vreg84<def> = COPY %vreg26<kill>; GPR32:%vreg84,%vreg26
	%vreg85<def> = COPY %vreg25<kill>; GPR32:%vreg85,%vreg25
	BCC <BB#4>, 8, %STATUS<imp-use>
	BNONE32 <BB#11>, %STATUS<imp-use>
    Successors according to CFG: BB#4(0x7c000000 / 0x80000000 = 96.88%) BB#11(0x04000000 / 0x80000000 = 3.12%)

BB#11: derived from LLVM BB %for.end78
    Predecessors according to CFG: BB#10
	%vreg29<def> = ADDrr_r32 %vreg3<kill>, %vreg1, %STATUS<imp-def,dead>; GPR32:%vreg29,%vreg3,%vreg1
	%vreg28<def> = ADDri_r32 %vreg4<kill>, 1, %STATUS<imp-def,dead>; GPR32:%vreg28,%vreg4
	%vreg68<def,dead> = CMPrr_r32 %vreg28, %vreg33, %STATUS<imp-def>; GPR32:%vreg68,%vreg28,%vreg33
	%vreg81<def> = COPY %vreg29<kill>; GPR32:%vreg81,%vreg29
	%vreg82<def> = COPY %vreg28<kill>; GPR32:%vreg82,%vreg28
	BCC <BB#3>, 1, %STATUS<imp-use>
	BNONE32 <BB#12>, %STATUS<imp-use>
    Successors according to CFG: BB#12(0x04000000 / 0x80000000 = 3.12%) BB#3(0x7c000000 / 0x80000000 = 96.88%)

BB#12: derived from LLVM BB %for.end81
    Predecessors according to CFG: BB#1 BB#11
	%vreg77<def> = LDRi32_r32 <fi#1>, 0; mem:LD4[FixedStack1] GPR32:%vreg77
	GID
	%CONFIG<def> = MOVTS32_core %vreg77<kill>; GPR32:%vreg77
	GIE %CONFIG<imp-use,kill>
	RTS

# End machine code for function matmac.

********** REWRITING TWO-ADDR INSTRS **********
********** Function: matmac
	%vreg73<def,tied1> = MOVTi32ri %vreg72<kill,tied0>, 65521; GPR32:%vreg73,%vreg72
		prepend:	%vreg73<def> = COPY %vreg72; GPR32:%vreg73,%vreg72
		rewrite to:	%vreg73<def,tied1> = MOVTi32ri %vreg73<tied0>, 65521; GPR32:%vreg73
	%vreg70<def,tied1> = MOVTi32ri %vreg71<kill,tied0>, 72; GPR32:%vreg70,%vreg71
		prepend:	%vreg70<def> = COPY %vreg71; GPR32:%vreg70,%vreg71
		rewrite to:	%vreg70<def,tied1> = MOVTi32ri %vreg70<tied0>, 72; GPR32:%vreg70
Inserted: %vreg78:isub_lo<def,read-undef> = COPY %vreg69<kill>; GPR64:%vreg78 GPR32:%vreg69
Inserted: %vreg78:isub_hi<def> = COPY %vreg70<kill>; GPR64:%vreg78 GPR32:%vreg70
Eliminated: %vreg78<def> = REG_SEQUENCE %vreg69<kill>, isub_lo, %vreg70<kill>, isub_hi; GPR64:%vreg78 GPR32:%vreg69,%vreg70
Inserted: %vreg42:isub_hi<def,read-undef> = COPY %vreg35; FPR64_with_isub_hi_in_FPR32:%vreg42 GPR32:%vreg35
Inserted: %vreg42:isub_lo<def> = COPY %vreg35; FPR64_with_isub_hi_in_FPR32:%vreg42 GPR32:%vreg35
Eliminated: %vreg42<def> = REG_SEQUENCE %vreg35, isub_hi, %vreg35, isub_lo; FPR64_with_isub_hi_in_FPR32:%vreg42 GPR32:%vreg35
	%vreg51<def,tied1> = FMADDrr_r32 %vreg50<kill,tied0>, %vreg12, %vreg46<kill>, %STATUS<imp-def,dead>; FPR32:%vreg51,%vreg50,%vreg12,%vreg46
		prepend:	%vreg51<def> = COPY %vreg50; FPR32:%vreg51,%vreg50
		rewrite to:	%vreg51<def,tied1> = FMADDrr_r32 %vreg51<tied0>, %vreg12, %vreg46<kill>, %STATUS<imp-def,dead>; FPR32:%vreg51,%vreg12,%vreg46
	%vreg53<def,tied1> = FMADDrr_r32 %vreg52<kill,tied0>, %vreg12, %vreg47<kill>, %STATUS<imp-def,dead>; FPR32:%vreg53,%vreg52,%vreg12,%vreg47
		prepend:	%vreg53<def> = COPY %vreg52; FPR32:%vreg53,%vreg52
		rewrite to:	%vreg53<def,tied1> = FMADDrr_r32 %vreg53<tied0>, %vreg12, %vreg47<kill>, %STATUS<imp-def,dead>; FPR32:%vreg53,%vreg12,%vreg47
Inserted: %vreg80:isub_lo<def,read-undef> = COPY %vreg51<kill>; FPR64:%vreg80 FPR32:%vreg51
Inserted: %vreg80:isub_hi<def> = COPY %vreg53<kill>; FPR64:%vreg80 FPR32:%vreg53
Eliminated: %vreg80<def> = REG_SEQUENCE %vreg51<kill>, isub_lo, %vreg53<kill>, isub_hi; FPR64:%vreg80 FPR32:%vreg51,%vreg53
	%vreg55<def,tied1> = FMADDrr_r32 %vreg54<kill,tied0>, %vreg12, %vreg48<kill>, %STATUS<imp-def,dead>; FPR32:%vreg55,%vreg54,%vreg12,%vreg48
		prepend:	%vreg55<def> = COPY %vreg54; FPR32:%vreg55,%vreg54
		rewrite to:	%vreg55<def,tied1> = FMADDrr_r32 %vreg55<tied0>, %vreg12, %vreg48<kill>, %STATUS<imp-def,dead>; FPR32:%vreg55,%vreg12,%vreg48
	%vreg57<def,tied1> = FMADDrr_r32 %vreg56<kill,tied0>, %vreg12, %vreg49<kill>, %STATUS<imp-def,dead>; FPR32:%vreg57,%vreg56,%vreg12,%vreg49
		prepend:	%vreg57<def> = COPY %vreg56; FPR32:%vreg57,%vreg56
		rewrite to:	%vreg57<def,tied1> = FMADDrr_r32 %vreg57<tied0>, %vreg12, %vreg49<kill>, %STATUS<imp-def,dead>; FPR32:%vreg57,%vreg12,%vreg49
# *** IR Dump After Two-Address instruction pass ***:
# Machine code for function matmac: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=32, align=8, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=4, align=8, at location [SP]
Function Live Ins: %R0 in %vreg30, %R1 in %vreg31, %R2 in %vreg32, %R3 in %vreg33

BB#0: 
    Live Ins: %R0 %R1 %R2 %R3
	GID %CONFIG<imp-def>
	%vreg71<def> = MOVFS32_core %CONFIG; GPR32:%vreg71
	STRi32_r32 %vreg71, <fi#1>, 0; mem:ST4[FixedStack1] GPR32:%vreg71
	%vreg72<def> = MOVi32ri 65535; GPR32:%vreg72
	%vreg73<def> = COPY %vreg72<kill>; GPR32:%vreg73,%vreg72
	%vreg73<def,tied1> = MOVTi32ri %vreg73<tied0>, 65521; GPR32:%vreg73
	%vreg69<def> = ANDrr_r32 %vreg71, %vreg73<kill>, %STATUS<imp-def>; GPR32:%vreg69,%vreg71,%vreg73
	%vreg70<def> = COPY %vreg71<kill>; GPR32:%vreg70,%vreg71
	%vreg70<def,tied1> = MOVTi32ri %vreg70<tied0>, 72; GPR32:%vreg70
	%vreg78:isub_lo<def,read-undef> = COPY %vreg69<kill>; GPR64:%vreg78 GPR32:%vreg69
	%vreg78:isub_hi<def> = COPY %vreg70<kill>; GPR64:%vreg78 GPR32:%vreg70
	STRi64 %vreg78<kill>, <fi#3>, 0; mem:ST4[FixedStack3] ST4[FixedStack2] GPR64:%vreg78
	GIE %CONFIG<imp-use,kill>
    Successors according to CFG: BB#1(?%)

BB#1: derived from LLVM BB %entry
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#0
	%vreg33<def> = COPY %R3<kill>; GPR32:%vreg33
	%vreg32<def> = COPY %R2<kill>; GPR32:%vreg32
	%vreg31<def> = COPY %R1<kill>; GPR32:%vreg31
	%vreg30<def> = COPY %R0<kill>; GPR32:%vreg30
	%vreg34<def,dead> = CMPri_r32 %vreg33, 1, %STATUS<imp-def>; GPR32:%vreg34,%vreg33
	BCC <BB#12>, 8, %STATUS<imp-use>
	BNONE32 <BB#2>, %STATUS<imp-use>
    Successors according to CFG: BB#2(0x50000000 / 0x80000000 = 62.50%) BB#12(0x30000000 / 0x80000000 = 37.50%)

BB#2: derived from LLVM BB %for.body3.lr.ph.preheader
    Predecessors according to CFG: BB#1
	%vreg1<def> = LSL32ri %vreg33, 2, %STATUS<imp-def,dead>; GPR32:%vreg1,%vreg33
	%vreg0<def> = ADDri_r32 %vreg31<kill>, 8, %STATUS<imp-def,dead>; GPR32:%vreg0,%vreg31
	%vreg36<def> = MOViPTR <fi#0>, 0; GPR32:%vreg36
	%vreg2<def> = ADDri_r32 %vreg36, 8, %STATUS<imp-def,dead>; GPR32:%vreg2,%vreg36
	%vreg35<def> = MOVi32ri 0; GPR32:%vreg35
	%vreg81<def> = COPY %vreg32<kill>; GPR32:%vreg81,%vreg32
	%vreg82<def> = COPY %vreg35; GPR32:%vreg82,%vreg35
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %for.body3.lr.ph
    Predecessors according to CFG: BB#2 BB#11
	%vreg4<def> = COPY %vreg82<kill>; GPR32:%vreg4,%vreg82
	%vreg3<def> = COPY %vreg81<kill>; GPR32:%vreg3,%vreg81
	%vreg74<def> = LDRi32_r32 <fi#3>, 0; mem:LD4[FixedStack3] GPR32:%vreg74
	GID %CONFIG<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %vreg74<kill>; GPR32:%vreg74
	GIE %CONFIG<imp-def,dead>
	%vreg38<def> = IMULrr_r32 %vreg4, %vreg33, %STATUS<imp-def,dead>; GPR32:%vreg38,%vreg4,%vreg33
	%vreg39<def> = LSL32ri %vreg38<kill>, 2, %STATUS<imp-def,dead>; GPR32:%vreg39,%vreg38
	%vreg5<def> = ADDrr_r32 %vreg30, %vreg39<kill>, %STATUS<imp-def,dead>; GPR32:%vreg5,%vreg30,%vreg39
	%vreg83<def> = COPY %vreg3; GPR32:%vreg83,%vreg3
	%vreg84<def> = COPY %vreg0; GPR32:%vreg84,%vreg0
	%vreg85<def> = COPY %vreg35; GPR32:%vreg85,%vreg35
    Successors according to CFG: BB#4(?%)

BB#4: derived from LLVM BB %for.body9.preheader
    Predecessors according to CFG: BB#3 BB#10
	%vreg8<def> = COPY %vreg85<kill>; GPR32:%vreg8,%vreg85
	%vreg7<def> = COPY %vreg84<kill>; GPR32:%vreg7,%vreg84
	%vreg6<def> = COPY %vreg83<kill>; GPR32:%vreg6,%vreg83
	%vreg42:isub_hi<def,read-undef> = COPY %vreg35; FPR64_with_isub_hi_in_FPR32:%vreg42 GPR32:%vreg35
	%vreg42:isub_lo<def> = COPY %vreg35; FPR64_with_isub_hi_in_FPR32:%vreg42 GPR32:%vreg35
	STRi64 %vreg42, <fi#0>, 24; mem:ST8[%1+24] FPR64_with_isub_hi_in_FPR32:%vreg42
	STRi64 %vreg42, <fi#0>, 16; mem:ST8[%1+16] FPR64_with_isub_hi_in_FPR32:%vreg42
	STRi64 %vreg42, <fi#0>, 8; mem:ST8[%1+8] FPR64_with_isub_hi_in_FPR32:%vreg42
	STRi64 %vreg42<kill>, <fi#0>, 0; mem:ST8[%1] FPR64_with_isub_hi_in_FPR32:%vreg42
	%vreg86<def> = COPY %vreg7; GPR32:%vreg86,%vreg7
	%vreg87<def> = COPY %vreg35; GPR32:%vreg87,%vreg35
	BNONE32 <BB#6>, %STATUS<imp-use>
    Successors according to CFG: BB#6(?%)

BB#5: derived from LLVM BB %for.cond64.preheader
    Predecessors according to CFG: BB#8
	%vreg91<def> = COPY %vreg6; GPR32:%vreg91,%vreg6
	%vreg92<def> = COPY %vreg35; GPR32:%vreg92,%vreg35
	BNONE32 <BB#9>, %STATUS<imp-use>
    Successors according to CFG: BB#9(?%)

BB#6: derived from LLVM BB %for.body9
    Predecessors according to CFG: BB#4 BB#8
	%vreg10<def> = COPY %vreg87<kill>; GPR32:%vreg10,%vreg87
	%vreg9<def> = COPY %vreg86<kill>; GPR32:%vreg9,%vreg86
	%vreg44<def> = LSL32ri %vreg10, 2, %STATUS<imp-def,dead>; GPR32:%vreg44,%vreg10
	%vreg45<def> = ADDrr_r32 %vreg5, %vreg44<kill>, %STATUS<imp-def,dead>; GPR32:%vreg45,%vreg5,%vreg44
	%vreg11<def> = COPY %vreg2; GPR32:%vreg11,%vreg2
	%vreg12<def> = LDRf32 %vreg45<kill>, 0; mem:Volatile LD4[%add.ptr10](tbaa=!2) FPR32:%vreg12 GPR32:%vreg45
	%vreg88<def> = COPY %vreg11<kill>; GPR32:%vreg88,%vreg11
	%vreg89<def> = COPY %vreg9; GPR32:%vreg89,%vreg9
	%vreg90<def> = COPY %vreg35; GPR32:%vreg90,%vreg35
    Successors according to CFG: BB#7(?%)

BB#7: derived from LLVM BB %for.body13
    Predecessors according to CFG: BB#6 BB#7
	%vreg15<def> = COPY %vreg90<kill>; GPR32:%vreg15,%vreg90
	%vreg14<def> = COPY %vreg89<kill>; GPR32:%vreg14,%vreg89
	%vreg13<def> = COPY %vreg88<kill>; GPR32:%vreg13,%vreg88
	%vreg46<def> = LDRf32 %vreg14, -8; mem:Volatile LD4[%scevgep8](tbaa=!2) FPR32:%vreg46 GPR32:%vreg14
	%vreg18<def> = ADDri_r32 %vreg13, 16, %STATUS<imp-def,dead>; GPR32:%vreg18,%vreg13
	%vreg17<def> = ADDri_r32 %vreg14, 16, %STATUS<imp-def,dead>; GPR32:%vreg17,%vreg14
	%vreg47<def> = LDRf32 %vreg14, -4; mem:Volatile LD4[%scevgep9](tbaa=!2) FPR32:%vreg47 GPR32:%vreg14
	%vreg16<def> = ADDri_r32 %vreg15<kill>, 4, %STATUS<imp-def,dead>; GPR32:%vreg16,%vreg15
	%vreg48<def> = LDRf32 %vreg14, 0; mem:Volatile LD4[%lsr.iv5](tbaa=!2) FPR32:%vreg48 GPR32:%vreg14
	%vreg49<def> = LDRf32 %vreg14<kill>, 4; mem:Volatile LD4[%scevgep7](tbaa=!2) FPR32:%vreg49 GPR32:%vreg14
	%vreg79<def> = LDRf64 %vreg13, -8; mem:LD4[%scevgep17](tbaa=!2) LD4[%scevgep15](tbaa=!2) FPR64:%vreg79 GPR32:%vreg13
	%vreg50<def> = COPY %vreg79:isub_hi; FPR32:%vreg50 FPR64:%vreg79
	%vreg52<def> = COPY %vreg79:isub_lo<kill>; FPR32:%vreg52 FPR64:%vreg79
	%vreg75<def> = LDRi32_r32 <fi#2>, 0; mem:LD4[FixedStack2] GPR32:%vreg75
	GID %CONFIG<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %vreg75<kill>; GPR32:%vreg75
	GIE %CONFIG<imp-def,dead>
	%vreg51<def> = COPY %vreg50<kill>; FPR32:%vreg51,%vreg50
	%vreg51<def,tied1> = FMADDrr_r32 %vreg51<tied0>, %vreg12, %vreg46<kill>, %STATUS<imp-def,dead>; FPR32:%vreg51,%vreg12,%vreg46
	%vreg53<def> = COPY %vreg52<kill>; FPR32:%vreg53,%vreg52
	%vreg53<def,tied1> = FMADDrr_r32 %vreg53<tied0>, %vreg12, %vreg47<kill>, %STATUS<imp-def,dead>; FPR32:%vreg53,%vreg12,%vreg47
	%vreg80:isub_lo<def,read-undef> = COPY %vreg51<kill>; FPR64:%vreg80 FPR32:%vreg51
	%vreg80:isub_hi<def> = COPY %vreg53<kill>; FPR64:%vreg80 FPR32:%vreg53
	STRf64 %vreg80<kill>, %vreg13, -8; mem:ST4[%scevgep17](tbaa=!2) ST4[%scevgep15](tbaa=!2) FPR64:%vreg80 GPR32:%vreg13
	%vreg54<def> = LDRf32 %vreg13, 0; mem:LD4[%lsr.iv1214](tbaa=!2) FPR32:%vreg54 GPR32:%vreg13
	%vreg55<def> = COPY %vreg54<kill>; FPR32:%vreg55,%vreg54
	%vreg55<def,tied1> = FMADDrr_r32 %vreg55<tied0>, %vreg12, %vreg48<kill>, %STATUS<imp-def,dead>; FPR32:%vreg55,%vreg12,%vreg48
	STRf32 %vreg55<kill>, %vreg13, 0; mem:ST4[%lsr.iv1214](tbaa=!2) FPR32:%vreg55 GPR32:%vreg13
	%vreg56<def> = LDRf32 %vreg13, 4; mem:LD4[%scevgep16](tbaa=!2) FPR32:%vreg56 GPR32:%vreg13
	%vreg57<def> = COPY %vreg56<kill>; FPR32:%vreg57,%vreg56
	%vreg57<def,tied1> = FMADDrr_r32 %vreg57<tied0>, %vreg12, %vreg49<kill>, %STATUS<imp-def,dead>; FPR32:%vreg57,%vreg12,%vreg49
	%vreg58<def,dead> = CMPri_r32 %vreg16, 8, %STATUS<imp-def>; GPR32:%vreg58,%vreg16
	STRf32 %vreg57<kill>, %vreg13<kill>, 4; mem:ST4[%scevgep16](tbaa=!2) FPR32:%vreg57 GPR32:%vreg13
	%vreg88<def> = COPY %vreg18<kill>; GPR32:%vreg88,%vreg18
	%vreg89<def> = COPY %vreg17<kill>; GPR32:%vreg89,%vreg17
	%vreg90<def> = COPY %vreg16<kill>; GPR32:%vreg90,%vreg16
	BCC <BB#7>, 8, %STATUS<imp-use>
	BNONE32 <BB#8>, %STATUS<imp-use>
    Successors according to CFG: BB#7(0x7c000000 / 0x80000000 = 96.88%) BB#8(0x04000000 / 0x80000000 = 3.12%)

BB#8: derived from LLVM BB %for.end60
    Predecessors according to CFG: BB#7
	%vreg20<def> = ADDrr_r32 %vreg9<kill>, %vreg1, %STATUS<imp-def,dead>; GPR32:%vreg20,%vreg9,%vreg1
	%vreg19<def> = ADDri_r32 %vreg10<kill>, 1, %STATUS<imp-def,dead>; GPR32:%vreg19,%vreg10
	%vreg59<def,dead> = CMPrr_r32 %vreg19, %vreg33, %STATUS<imp-def>; GPR32:%vreg59,%vreg19,%vreg33
	%vreg86<def> = COPY %vreg20<kill>; GPR32:%vreg86,%vreg20
	%vreg87<def> = COPY %vreg19<kill>; GPR32:%vreg87,%vreg19
	BCC <BB#5>, 0, %STATUS<imp-use>
	BNONE32 <BB#6>, %STATUS<imp-use>
    Successors according to CFG: BB#5(0x04000000 / 0x80000000 = 3.12%) BB#6(0x7c000000 / 0x80000000 = 96.88%)

BB#9: derived from LLVM BB %for.body66
    Predecessors according to CFG: BB#5 BB#9
	%vreg22<def> = COPY %vreg92<kill>; GPR32:%vreg22,%vreg92
	%vreg21<def> = COPY %vreg91<kill>; GPR32:%vreg21,%vreg91
	%vreg62<def> = ADDrr_r32 %vreg36, %vreg22, %STATUS<imp-def,dead>; GPR32:%vreg62,%vreg36,%vreg22
	%vreg63<def> = LDRf32 %vreg62<kill>, 0; mem:LD4[%sunkaddr30](tbaa=!2) FPR32:%vreg63 GPR32:%vreg62
	%vreg24<def> = ADDri_r32 %vreg21, 4, %STATUS<imp-def,dead>; GPR32:%vreg24,%vreg21
	%vreg23<def> = ADDri_r32 %vreg22<kill>, 4, %STATUS<imp-def,dead>; GPR32:%vreg23,%vreg22
	%vreg64<def> = LDRf32 %vreg21, 0; mem:Volatile LD4[%lsr.iv24](tbaa=!2) FPR32:%vreg64 GPR32:%vreg21
	%vreg76<def> = LDRi32_r32 <fi#2>, 0; mem:LD4[FixedStack2] GPR32:%vreg76
	GID %CONFIG<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %vreg76<kill>; GPR32:%vreg76
	GIE %CONFIG<imp-def,dead>
	%vreg65<def> = FADDrr_r32 %vreg63<kill>, %vreg64<kill>, %STATUS<imp-def,dead>; FPR32:%vreg65,%vreg63,%vreg64
	%vreg66<def,dead> = CMPri_r32 %vreg23, 32, %STATUS<imp-def>; GPR32:%vreg66,%vreg23
	STRf32 %vreg65<kill>, %vreg21<kill>, 0; mem:Volatile ST4[%lsr.iv24](tbaa=!2) FPR32:%vreg65 GPR32:%vreg21
	%vreg91<def> = COPY %vreg24<kill>; GPR32:%vreg91,%vreg24
	%vreg92<def> = COPY %vreg23<kill>; GPR32:%vreg92,%vreg23
	BCC <BB#9>, 1, %STATUS<imp-use>
	BNONE32 <BB#10>, %STATUS<imp-use>
    Successors according to CFG: BB#10(0x04000000 / 0x80000000 = 3.12%) BB#9(0x7c000000 / 0x80000000 = 96.88%)

BB#10: derived from LLVM BB %for.end75
    Predecessors according to CFG: BB#9
	%vreg27<def> = ADDri_r32 %vreg6<kill>, 32, %STATUS<imp-def,dead>; GPR32:%vreg27,%vreg6
	%vreg26<def> = ADDri_r32 %vreg7<kill>, 32, %STATUS<imp-def,dead>; GPR32:%vreg26,%vreg7
	%vreg25<def> = ADDri_r32 %vreg8<kill>, 8, %STATUS<imp-def,dead>; GPR32:%vreg25,%vreg8
	%vreg67<def,dead> = CMPrr_r32 %vreg25, %vreg33, %STATUS<imp-def>; GPR32:%vreg67,%vreg25,%vreg33
	%vreg83<def> = COPY %vreg27<kill>; GPR32:%vreg83,%vreg27
	%vreg84<def> = COPY %vreg26<kill>; GPR32:%vreg84,%vreg26
	%vreg85<def> = COPY %vreg25<kill>; GPR32:%vreg85,%vreg25
	BCC <BB#4>, 8, %STATUS<imp-use>
	BNONE32 <BB#11>, %STATUS<imp-use>
    Successors according to CFG: BB#4(0x7c000000 / 0x80000000 = 96.88%) BB#11(0x04000000 / 0x80000000 = 3.12%)

BB#11: derived from LLVM BB %for.end78
    Predecessors according to CFG: BB#10
	%vreg29<def> = ADDrr_r32 %vreg3<kill>, %vreg1, %STATUS<imp-def,dead>; GPR32:%vreg29,%vreg3,%vreg1
	%vreg28<def> = ADDri_r32 %vreg4<kill>, 1, %STATUS<imp-def,dead>; GPR32:%vreg28,%vreg4
	%vreg68<def,dead> = CMPrr_r32 %vreg28, %vreg33, %STATUS<imp-def>; GPR32:%vreg68,%vreg28,%vreg33
	%vreg81<def> = COPY %vreg29<kill>; GPR32:%vreg81,%vreg29
	%vreg82<def> = COPY %vreg28<kill>; GPR32:%vreg82,%vreg28
	BCC <BB#3>, 1, %STATUS<imp-use>
	BNONE32 <BB#12>, %STATUS<imp-use>
    Successors according to CFG: BB#12(0x04000000 / 0x80000000 = 3.12%) BB#3(0x7c000000 / 0x80000000 = 96.88%)

BB#12: derived from LLVM BB %for.end81
    Predecessors according to CFG: BB#1 BB#11
	%vreg77<def> = LDRi32_r32 <fi#1>, 0; mem:LD4[FixedStack1] GPR32:%vreg77
	GID
	%CONFIG<def> = MOVTS32_core %vreg77<kill>; GPR32:%vreg77
	GIE %CONFIG<imp-use,kill>
	RTS

# End machine code for function matmac.

# *** IR Dump Before Slot index numbering ***:
# Machine code for function matmac: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=32, align=8, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=4, align=8, at location [SP]
Function Live Ins: %R0 in %vreg30, %R1 in %vreg31, %R2 in %vreg32, %R3 in %vreg33

BB#0: 
    Live Ins: %R0 %R1 %R2 %R3
	GID %CONFIG<imp-def>
	%vreg71<def> = MOVFS32_core %CONFIG; GPR32:%vreg71
	STRi32_r32 %vreg71, <fi#1>, 0; mem:ST4[FixedStack1] GPR32:%vreg71
	%vreg72<def> = MOVi32ri 65535; GPR32:%vreg72
	%vreg73<def> = COPY %vreg72<kill>; GPR32:%vreg73,%vreg72
	%vreg73<def,tied1> = MOVTi32ri %vreg73<tied0>, 65521; GPR32:%vreg73
	%vreg69<def> = ANDrr_r32 %vreg71, %vreg73<kill>, %STATUS<imp-def>; GPR32:%vreg69,%vreg71,%vreg73
	%vreg70<def> = COPY %vreg71<kill>; GPR32:%vreg70,%vreg71
	%vreg70<def,tied1> = MOVTi32ri %vreg70<tied0>, 72; GPR32:%vreg70
	%vreg78:isub_lo<def,read-undef> = COPY %vreg69<kill>; GPR64:%vreg78 GPR32:%vreg69
	%vreg78:isub_hi<def> = COPY %vreg70<kill>; GPR64:%vreg78 GPR32:%vreg70
	STRi64 %vreg78<kill>, <fi#3>, 0; mem:ST4[FixedStack3] ST4[FixedStack2] GPR64:%vreg78
	GIE %CONFIG<imp-use,kill>
    Successors according to CFG: BB#1(?%)

BB#1: derived from LLVM BB %entry
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#0
	%vreg33<def> = COPY %R3<kill>; GPR32:%vreg33
	%vreg32<def> = COPY %R2<kill>; GPR32:%vreg32
	%vreg31<def> = COPY %R1<kill>; GPR32:%vreg31
	%vreg30<def> = COPY %R0<kill>; GPR32:%vreg30
	%vreg34<def,dead> = CMPri_r32 %vreg33, 1, %STATUS<imp-def>; GPR32:%vreg34,%vreg33
	BCC <BB#12>, 8, %STATUS<imp-use>
	BNONE32 <BB#2>, %STATUS<imp-use>
    Successors according to CFG: BB#2(0x50000000 / 0x80000000 = 62.50%) BB#12(0x30000000 / 0x80000000 = 37.50%)

BB#2: derived from LLVM BB %for.body3.lr.ph.preheader
    Predecessors according to CFG: BB#1
	%vreg1<def> = LSL32ri %vreg33, 2, %STATUS<imp-def,dead>; GPR32:%vreg1,%vreg33
	%vreg0<def> = ADDri_r32 %vreg31<kill>, 8, %STATUS<imp-def,dead>; GPR32:%vreg0,%vreg31
	%vreg36<def> = MOViPTR <fi#0>, 0; GPR32:%vreg36
	%vreg2<def> = ADDri_r32 %vreg36, 8, %STATUS<imp-def,dead>; GPR32:%vreg2,%vreg36
	%vreg35<def> = MOVi32ri 0; GPR32:%vreg35
	%vreg81<def> = COPY %vreg32<kill>; GPR32:%vreg81,%vreg32
	%vreg82<def> = COPY %vreg35; GPR32:%vreg82,%vreg35
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %for.body3.lr.ph
    Predecessors according to CFG: BB#2 BB#11
	%vreg4<def> = COPY %vreg82<kill>; GPR32:%vreg4,%vreg82
	%vreg3<def> = COPY %vreg81<kill>; GPR32:%vreg3,%vreg81
	%vreg74<def> = LDRi32_r32 <fi#3>, 0; mem:LD4[FixedStack3] GPR32:%vreg74
	GID %CONFIG<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %vreg74<kill>; GPR32:%vreg74
	GIE %CONFIG<imp-def,dead>
	%vreg38<def> = IMULrr_r32 %vreg4, %vreg33, %STATUS<imp-def,dead>; GPR32:%vreg38,%vreg4,%vreg33
	%vreg39<def> = LSL32ri %vreg38<kill>, 2, %STATUS<imp-def,dead>; GPR32:%vreg39,%vreg38
	%vreg5<def> = ADDrr_r32 %vreg30, %vreg39<kill>, %STATUS<imp-def,dead>; GPR32:%vreg5,%vreg30,%vreg39
	%vreg83<def> = COPY %vreg3; GPR32:%vreg83,%vreg3
	%vreg84<def> = COPY %vreg0; GPR32:%vreg84,%vreg0
	%vreg85<def> = COPY %vreg35; GPR32:%vreg85,%vreg35
    Successors according to CFG: BB#4(?%)

BB#4: derived from LLVM BB %for.body9.preheader
    Predecessors according to CFG: BB#3 BB#10
	%vreg8<def> = COPY %vreg85<kill>; GPR32:%vreg8,%vreg85
	%vreg7<def> = COPY %vreg84<kill>; GPR32:%vreg7,%vreg84
	%vreg6<def> = COPY %vreg83<kill>; GPR32:%vreg6,%vreg83
	%vreg42:isub_hi<def,read-undef> = COPY %vreg35; FPR64_with_isub_hi_in_FPR32:%vreg42 GPR32:%vreg35
	%vreg42:isub_lo<def> = COPY %vreg35; FPR64_with_isub_hi_in_FPR32:%vreg42 GPR32:%vreg35
	STRi64 %vreg42, <fi#0>, 24; mem:ST8[%1+24] FPR64_with_isub_hi_in_FPR32:%vreg42
	STRi64 %vreg42, <fi#0>, 16; mem:ST8[%1+16] FPR64_with_isub_hi_in_FPR32:%vreg42
	STRi64 %vreg42, <fi#0>, 8; mem:ST8[%1+8] FPR64_with_isub_hi_in_FPR32:%vreg42
	STRi64 %vreg42<kill>, <fi#0>, 0; mem:ST8[%1] FPR64_with_isub_hi_in_FPR32:%vreg42
	%vreg86<def> = COPY %vreg7; GPR32:%vreg86,%vreg7
	%vreg87<def> = COPY %vreg35; GPR32:%vreg87,%vreg35
	BNONE32 <BB#6>, %STATUS<imp-use>
    Successors according to CFG: BB#6(?%)

BB#5: derived from LLVM BB %for.cond64.preheader
    Predecessors according to CFG: BB#8
	%vreg91<def> = COPY %vreg6; GPR32:%vreg91,%vreg6
	%vreg92<def> = COPY %vreg35; GPR32:%vreg92,%vreg35
	BNONE32 <BB#9>, %STATUS<imp-use>
    Successors according to CFG: BB#9(?%)

BB#6: derived from LLVM BB %for.body9
    Predecessors according to CFG: BB#4 BB#8
	%vreg10<def> = COPY %vreg87<kill>; GPR32:%vreg10,%vreg87
	%vreg9<def> = COPY %vreg86<kill>; GPR32:%vreg9,%vreg86
	%vreg44<def> = LSL32ri %vreg10, 2, %STATUS<imp-def,dead>; GPR32:%vreg44,%vreg10
	%vreg45<def> = ADDrr_r32 %vreg5, %vreg44<kill>, %STATUS<imp-def,dead>; GPR32:%vreg45,%vreg5,%vreg44
	%vreg11<def> = COPY %vreg2; GPR32:%vreg11,%vreg2
	%vreg12<def> = LDRf32 %vreg45<kill>, 0; mem:Volatile LD4[%add.ptr10](tbaa=!2) FPR32:%vreg12 GPR32:%vreg45
	%vreg88<def> = COPY %vreg11<kill>; GPR32:%vreg88,%vreg11
	%vreg89<def> = COPY %vreg9; GPR32:%vreg89,%vreg9
	%vreg90<def> = COPY %vreg35; GPR32:%vreg90,%vreg35
    Successors according to CFG: BB#7(?%)

BB#7: derived from LLVM BB %for.body13
    Predecessors according to CFG: BB#6 BB#7
	%vreg15<def> = COPY %vreg90<kill>; GPR32:%vreg15,%vreg90
	%vreg14<def> = COPY %vreg89<kill>; GPR32:%vreg14,%vreg89
	%vreg13<def> = COPY %vreg88<kill>; GPR32:%vreg13,%vreg88
	%vreg46<def> = LDRf32 %vreg14, -8; mem:Volatile LD4[%scevgep8](tbaa=!2) FPR32:%vreg46 GPR32:%vreg14
	%vreg18<def> = ADDri_r32 %vreg13, 16, %STATUS<imp-def,dead>; GPR32:%vreg18,%vreg13
	%vreg17<def> = ADDri_r32 %vreg14, 16, %STATUS<imp-def,dead>; GPR32:%vreg17,%vreg14
	%vreg47<def> = LDRf32 %vreg14, -4; mem:Volatile LD4[%scevgep9](tbaa=!2) FPR32:%vreg47 GPR32:%vreg14
	%vreg16<def> = ADDri_r32 %vreg15<kill>, 4, %STATUS<imp-def,dead>; GPR32:%vreg16,%vreg15
	%vreg48<def> = LDRf32 %vreg14, 0; mem:Volatile LD4[%lsr.iv5](tbaa=!2) FPR32:%vreg48 GPR32:%vreg14
	%vreg49<def> = LDRf32 %vreg14<kill>, 4; mem:Volatile LD4[%scevgep7](tbaa=!2) FPR32:%vreg49 GPR32:%vreg14
	%vreg79<def> = LDRf64 %vreg13, -8; mem:LD4[%scevgep17](tbaa=!2) LD4[%scevgep15](tbaa=!2) FPR64:%vreg79 GPR32:%vreg13
	%vreg50<def> = COPY %vreg79:isub_hi; FPR32:%vreg50 FPR64:%vreg79
	%vreg52<def> = COPY %vreg79:isub_lo<kill>; FPR32:%vreg52 FPR64:%vreg79
	%vreg75<def> = LDRi32_r32 <fi#2>, 0; mem:LD4[FixedStack2] GPR32:%vreg75
	GID %CONFIG<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %vreg75<kill>; GPR32:%vreg75
	GIE %CONFIG<imp-def,dead>
	%vreg51<def> = COPY %vreg50<kill>; FPR32:%vreg51,%vreg50
	%vreg51<def,tied1> = FMADDrr_r32 %vreg51<tied0>, %vreg12, %vreg46<kill>, %STATUS<imp-def,dead>; FPR32:%vreg51,%vreg12,%vreg46
	%vreg53<def> = COPY %vreg52<kill>; FPR32:%vreg53,%vreg52
	%vreg53<def,tied1> = FMADDrr_r32 %vreg53<tied0>, %vreg12, %vreg47<kill>, %STATUS<imp-def,dead>; FPR32:%vreg53,%vreg12,%vreg47
	%vreg80:isub_lo<def,read-undef> = COPY %vreg51<kill>; FPR64:%vreg80 FPR32:%vreg51
	%vreg80:isub_hi<def> = COPY %vreg53<kill>; FPR64:%vreg80 FPR32:%vreg53
	STRf64 %vreg80<kill>, %vreg13, -8; mem:ST4[%scevgep17](tbaa=!2) ST4[%scevgep15](tbaa=!2) FPR64:%vreg80 GPR32:%vreg13
	%vreg54<def> = LDRf32 %vreg13, 0; mem:LD4[%lsr.iv1214](tbaa=!2) FPR32:%vreg54 GPR32:%vreg13
	%vreg55<def> = COPY %vreg54<kill>; FPR32:%vreg55,%vreg54
	%vreg55<def,tied1> = FMADDrr_r32 %vreg55<tied0>, %vreg12, %vreg48<kill>, %STATUS<imp-def,dead>; FPR32:%vreg55,%vreg12,%vreg48
	STRf32 %vreg55<kill>, %vreg13, 0; mem:ST4[%lsr.iv1214](tbaa=!2) FPR32:%vreg55 GPR32:%vreg13
	%vreg56<def> = LDRf32 %vreg13, 4; mem:LD4[%scevgep16](tbaa=!2) FPR32:%vreg56 GPR32:%vreg13
	%vreg57<def> = COPY %vreg56<kill>; FPR32:%vreg57,%vreg56
	%vreg57<def,tied1> = FMADDrr_r32 %vreg57<tied0>, %vreg12, %vreg49<kill>, %STATUS<imp-def,dead>; FPR32:%vreg57,%vreg12,%vreg49
	%vreg58<def,dead> = CMPri_r32 %vreg16, 8, %STATUS<imp-def>; GPR32:%vreg58,%vreg16
	STRf32 %vreg57<kill>, %vreg13<kill>, 4; mem:ST4[%scevgep16](tbaa=!2) FPR32:%vreg57 GPR32:%vreg13
	%vreg88<def> = COPY %vreg18<kill>; GPR32:%vreg88,%vreg18
	%vreg89<def> = COPY %vreg17<kill>; GPR32:%vreg89,%vreg17
	%vreg90<def> = COPY %vreg16<kill>; GPR32:%vreg90,%vreg16
	BCC <BB#7>, 8, %STATUS<imp-use>
	BNONE32 <BB#8>, %STATUS<imp-use>
    Successors according to CFG: BB#7(0x7c000000 / 0x80000000 = 96.88%) BB#8(0x04000000 / 0x80000000 = 3.12%)

BB#8: derived from LLVM BB %for.end60
    Predecessors according to CFG: BB#7
	%vreg20<def> = ADDrr_r32 %vreg9<kill>, %vreg1, %STATUS<imp-def,dead>; GPR32:%vreg20,%vreg9,%vreg1
	%vreg19<def> = ADDri_r32 %vreg10<kill>, 1, %STATUS<imp-def,dead>; GPR32:%vreg19,%vreg10
	%vreg59<def,dead> = CMPrr_r32 %vreg19, %vreg33, %STATUS<imp-def>; GPR32:%vreg59,%vreg19,%vreg33
	%vreg86<def> = COPY %vreg20<kill>; GPR32:%vreg86,%vreg20
	%vreg87<def> = COPY %vreg19<kill>; GPR32:%vreg87,%vreg19
	BCC <BB#5>, 0, %STATUS<imp-use>
	BNONE32 <BB#6>, %STATUS<imp-use>
    Successors according to CFG: BB#5(0x04000000 / 0x80000000 = 3.12%) BB#6(0x7c000000 / 0x80000000 = 96.88%)

BB#9: derived from LLVM BB %for.body66
    Predecessors according to CFG: BB#5 BB#9
	%vreg22<def> = COPY %vreg92<kill>; GPR32:%vreg22,%vreg92
	%vreg21<def> = COPY %vreg91<kill>; GPR32:%vreg21,%vreg91
	%vreg62<def> = ADDrr_r32 %vreg36, %vreg22, %STATUS<imp-def,dead>; GPR32:%vreg62,%vreg36,%vreg22
	%vreg63<def> = LDRf32 %vreg62<kill>, 0; mem:LD4[%sunkaddr30](tbaa=!2) FPR32:%vreg63 GPR32:%vreg62
	%vreg24<def> = ADDri_r32 %vreg21, 4, %STATUS<imp-def,dead>; GPR32:%vreg24,%vreg21
	%vreg23<def> = ADDri_r32 %vreg22<kill>, 4, %STATUS<imp-def,dead>; GPR32:%vreg23,%vreg22
	%vreg64<def> = LDRf32 %vreg21, 0; mem:Volatile LD4[%lsr.iv24](tbaa=!2) FPR32:%vreg64 GPR32:%vreg21
	%vreg76<def> = LDRi32_r32 <fi#2>, 0; mem:LD4[FixedStack2] GPR32:%vreg76
	GID %CONFIG<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %vreg76<kill>; GPR32:%vreg76
	GIE %CONFIG<imp-def,dead>
	%vreg65<def> = FADDrr_r32 %vreg63<kill>, %vreg64<kill>, %STATUS<imp-def,dead>; FPR32:%vreg65,%vreg63,%vreg64
	%vreg66<def,dead> = CMPri_r32 %vreg23, 32, %STATUS<imp-def>; GPR32:%vreg66,%vreg23
	STRf32 %vreg65<kill>, %vreg21<kill>, 0; mem:Volatile ST4[%lsr.iv24](tbaa=!2) FPR32:%vreg65 GPR32:%vreg21
	%vreg91<def> = COPY %vreg24<kill>; GPR32:%vreg91,%vreg24
	%vreg92<def> = COPY %vreg23<kill>; GPR32:%vreg92,%vreg23
	BCC <BB#9>, 1, %STATUS<imp-use>
	BNONE32 <BB#10>, %STATUS<imp-use>
    Successors according to CFG: BB#10(0x04000000 / 0x80000000 = 3.12%) BB#9(0x7c000000 / 0x80000000 = 96.88%)

BB#10: derived from LLVM BB %for.end75
    Predecessors according to CFG: BB#9
	%vreg27<def> = ADDri_r32 %vreg6<kill>, 32, %STATUS<imp-def,dead>; GPR32:%vreg27,%vreg6
	%vreg26<def> = ADDri_r32 %vreg7<kill>, 32, %STATUS<imp-def,dead>; GPR32:%vreg26,%vreg7
	%vreg25<def> = ADDri_r32 %vreg8<kill>, 8, %STATUS<imp-def,dead>; GPR32:%vreg25,%vreg8
	%vreg67<def,dead> = CMPrr_r32 %vreg25, %vreg33, %STATUS<imp-def>; GPR32:%vreg67,%vreg25,%vreg33
	%vreg83<def> = COPY %vreg27<kill>; GPR32:%vreg83,%vreg27
	%vreg84<def> = COPY %vreg26<kill>; GPR32:%vreg84,%vreg26
	%vreg85<def> = COPY %vreg25<kill>; GPR32:%vreg85,%vreg25
	BCC <BB#4>, 8, %STATUS<imp-use>
	BNONE32 <BB#11>, %STATUS<imp-use>
    Successors according to CFG: BB#4(0x7c000000 / 0x80000000 = 96.88%) BB#11(0x04000000 / 0x80000000 = 3.12%)

BB#11: derived from LLVM BB %for.end78
    Predecessors according to CFG: BB#10
	%vreg29<def> = ADDrr_r32 %vreg3<kill>, %vreg1, %STATUS<imp-def,dead>; GPR32:%vreg29,%vreg3,%vreg1
	%vreg28<def> = ADDri_r32 %vreg4<kill>, 1, %STATUS<imp-def,dead>; GPR32:%vreg28,%vreg4
	%vreg68<def,dead> = CMPrr_r32 %vreg28, %vreg33, %STATUS<imp-def>; GPR32:%vreg68,%vreg28,%vreg33
	%vreg81<def> = COPY %vreg29<kill>; GPR32:%vreg81,%vreg29
	%vreg82<def> = COPY %vreg28<kill>; GPR32:%vreg82,%vreg28
	BCC <BB#3>, 1, %STATUS<imp-use>
	BNONE32 <BB#12>, %STATUS<imp-use>
    Successors according to CFG: BB#12(0x04000000 / 0x80000000 = 3.12%) BB#3(0x7c000000 / 0x80000000 = 96.88%)

BB#12: derived from LLVM BB %for.end81
    Predecessors according to CFG: BB#1 BB#11
	%vreg77<def> = LDRi32_r32 <fi#1>, 0; mem:LD4[FixedStack1] GPR32:%vreg77
	GID
	%CONFIG<def> = MOVTS32_core %vreg77<kill>; GPR32:%vreg77
	GIE %CONFIG<imp-use,kill>
	RTS

# End machine code for function matmac.

# Machine code for function matmac: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=32, align=8, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=4, align=8, at location [SP]
Function Live Ins: %R0 in %vreg30, %R1 in %vreg31, %R2 in %vreg32, %R3 in %vreg33

0B	BB#0: 
	    Live Ins: %R0 %R1 %R2 %R3
16B		GID %CONFIG<imp-def>
32B		%vreg71<def> = MOVFS32_core %CONFIG; GPR32:%vreg71
48B		STRi32_r32 %vreg71, <fi#1>, 0; mem:ST4[FixedStack1] GPR32:%vreg71
64B		%vreg72<def> = MOVi32ri 65535; GPR32:%vreg72
80B		%vreg73<def> = COPY %vreg72<kill>; GPR32:%vreg73,%vreg72
96B		%vreg73<def,tied1> = MOVTi32ri %vreg73<tied0>, 65521; GPR32:%vreg73
112B		%vreg69<def> = ANDrr_r32 %vreg71, %vreg73<kill>, %STATUS<imp-def>; GPR32:%vreg69,%vreg71,%vreg73
128B		%vreg70<def> = COPY %vreg71<kill>; GPR32:%vreg70,%vreg71
144B		%vreg70<def,tied1> = MOVTi32ri %vreg70<tied0>, 72; GPR32:%vreg70
160B		%vreg78:isub_lo<def,read-undef> = COPY %vreg69<kill>; GPR64:%vreg78 GPR32:%vreg69
176B		%vreg78:isub_hi<def> = COPY %vreg70<kill>; GPR64:%vreg78 GPR32:%vreg70
192B		STRi64 %vreg78<kill>, <fi#3>, 0; mem:ST4[FixedStack3] ST4[FixedStack2] GPR64:%vreg78
208B		GIE %CONFIG<imp-use,kill>
	    Successors according to CFG: BB#1(?%)

224B	BB#1: derived from LLVM BB %entry
	    Live Ins: %R0 %R1 %R2 %R3
	    Predecessors according to CFG: BB#0
240B		%vreg33<def> = COPY %R3<kill>; GPR32:%vreg33
256B		%vreg32<def> = COPY %R2<kill>; GPR32:%vreg32
272B		%vreg31<def> = COPY %R1<kill>; GPR32:%vreg31
288B		%vreg30<def> = COPY %R0<kill>; GPR32:%vreg30
304B		%vreg34<def,dead> = CMPri_r32 %vreg33, 1, %STATUS<imp-def>; GPR32:%vreg34,%vreg33
320B		BCC <BB#12>, 8, %STATUS<imp-use>
336B		BNONE32 <BB#2>, %STATUS<imp-use>
	    Successors according to CFG: BB#2(0x50000000 / 0x80000000 = 62.50%) BB#12(0x30000000 / 0x80000000 = 37.50%)

352B	BB#2: derived from LLVM BB %for.body3.lr.ph.preheader
	    Predecessors according to CFG: BB#1
368B		%vreg1<def> = LSL32ri %vreg33, 2, %STATUS<imp-def,dead>; GPR32:%vreg1,%vreg33
384B		%vreg0<def> = ADDri_r32 %vreg31<kill>, 8, %STATUS<imp-def,dead>; GPR32:%vreg0,%vreg31
400B		%vreg36<def> = MOViPTR <fi#0>, 0; GPR32:%vreg36
416B		%vreg2<def> = ADDri_r32 %vreg36, 8, %STATUS<imp-def,dead>; GPR32:%vreg2,%vreg36
432B		%vreg35<def> = MOVi32ri 0; GPR32:%vreg35
448B		%vreg81<def> = COPY %vreg32<kill>; GPR32:%vreg81,%vreg32
464B		%vreg82<def> = COPY %vreg35; GPR32:%vreg82,%vreg35
	    Successors according to CFG: BB#3(?%)

480B	BB#3: derived from LLVM BB %for.body3.lr.ph
	    Predecessors according to CFG: BB#2 BB#11
496B		%vreg4<def> = COPY %vreg82<kill>; GPR32:%vreg4,%vreg82
512B		%vreg3<def> = COPY %vreg81<kill>; GPR32:%vreg3,%vreg81
528B		%vreg74<def> = LDRi32_r32 <fi#3>, 0; mem:LD4[FixedStack3] GPR32:%vreg74
544B		GID %CONFIG<imp-def,dead>
560B		%CONFIG<def,dead> = MOVTS32_core %vreg74<kill>; GPR32:%vreg74
576B		GIE %CONFIG<imp-def,dead>
592B		%vreg38<def> = IMULrr_r32 %vreg4, %vreg33, %STATUS<imp-def,dead>; GPR32:%vreg38,%vreg4,%vreg33
608B		%vreg39<def> = LSL32ri %vreg38<kill>, 2, %STATUS<imp-def,dead>; GPR32:%vreg39,%vreg38
624B		%vreg5<def> = ADDrr_r32 %vreg30, %vreg39<kill>, %STATUS<imp-def,dead>; GPR32:%vreg5,%vreg30,%vreg39
640B		%vreg83<def> = COPY %vreg3; GPR32:%vreg83,%vreg3
656B		%vreg84<def> = COPY %vreg0; GPR32:%vreg84,%vreg0
672B		%vreg85<def> = COPY %vreg35; GPR32:%vreg85,%vreg35
	    Successors according to CFG: BB#4(?%)

688B	BB#4: derived from LLVM BB %for.body9.preheader
	    Predecessors according to CFG: BB#3 BB#10
704B		%vreg8<def> = COPY %vreg85<kill>; GPR32:%vreg8,%vreg85
720B		%vreg7<def> = COPY %vreg84<kill>; GPR32:%vreg7,%vreg84
736B		%vreg6<def> = COPY %vreg83<kill>; GPR32:%vreg6,%vreg83
752B		%vreg42:isub_hi<def,read-undef> = COPY %vreg35; FPR64_with_isub_hi_in_FPR32:%vreg42 GPR32:%vreg35
768B		%vreg42:isub_lo<def> = COPY %vreg35; FPR64_with_isub_hi_in_FPR32:%vreg42 GPR32:%vreg35
784B		STRi64 %vreg42, <fi#0>, 24; mem:ST8[%1+24] FPR64_with_isub_hi_in_FPR32:%vreg42
800B		STRi64 %vreg42, <fi#0>, 16; mem:ST8[%1+16] FPR64_with_isub_hi_in_FPR32:%vreg42
816B		STRi64 %vreg42, <fi#0>, 8; mem:ST8[%1+8] FPR64_with_isub_hi_in_FPR32:%vreg42
832B		STRi64 %vreg42<kill>, <fi#0>, 0; mem:ST8[%1] FPR64_with_isub_hi_in_FPR32:%vreg42
848B		%vreg86<def> = COPY %vreg7; GPR32:%vreg86,%vreg7
864B		%vreg87<def> = COPY %vreg35; GPR32:%vreg87,%vreg35
880B		BNONE32 <BB#6>, %STATUS<imp-use>
	    Successors according to CFG: BB#6(?%)

896B	BB#5: derived from LLVM BB %for.cond64.preheader
	    Predecessors according to CFG: BB#8
912B		%vreg91<def> = COPY %vreg6; GPR32:%vreg91,%vreg6
928B		%vreg92<def> = COPY %vreg35; GPR32:%vreg92,%vreg35
944B		BNONE32 <BB#9>, %STATUS<imp-use>
	    Successors according to CFG: BB#9(?%)

960B	BB#6: derived from LLVM BB %for.body9
	    Predecessors according to CFG: BB#4 BB#8
976B		%vreg10<def> = COPY %vreg87<kill>; GPR32:%vreg10,%vreg87
992B		%vreg9<def> = COPY %vreg86<kill>; GPR32:%vreg9,%vreg86
1008B		%vreg44<def> = LSL32ri %vreg10, 2, %STATUS<imp-def,dead>; GPR32:%vreg44,%vreg10
1024B		%vreg45<def> = ADDrr_r32 %vreg5, %vreg44<kill>, %STATUS<imp-def,dead>; GPR32:%vreg45,%vreg5,%vreg44
1040B		%vreg11<def> = COPY %vreg2; GPR32:%vreg11,%vreg2
1056B		%vreg12<def> = LDRf32 %vreg45<kill>, 0; mem:Volatile LD4[%add.ptr10](tbaa=!2) FPR32:%vreg12 GPR32:%vreg45
1072B		%vreg88<def> = COPY %vreg11<kill>; GPR32:%vreg88,%vreg11
1088B		%vreg89<def> = COPY %vreg9; GPR32:%vreg89,%vreg9
1104B		%vreg90<def> = COPY %vreg35; GPR32:%vreg90,%vreg35
	    Successors according to CFG: BB#7(?%)

1120B	BB#7: derived from LLVM BB %for.body13
	    Predecessors according to CFG: BB#6 BB#7
1136B		%vreg15<def> = COPY %vreg90<kill>; GPR32:%vreg15,%vreg90
1152B		%vreg14<def> = COPY %vreg89<kill>; GPR32:%vreg14,%vreg89
1168B		%vreg13<def> = COPY %vreg88<kill>; GPR32:%vreg13,%vreg88
1184B		%vreg46<def> = LDRf32 %vreg14, -8; mem:Volatile LD4[%scevgep8](tbaa=!2) FPR32:%vreg46 GPR32:%vreg14
1200B		%vreg18<def> = ADDri_r32 %vreg13, 16, %STATUS<imp-def,dead>; GPR32:%vreg18,%vreg13
1216B		%vreg17<def> = ADDri_r32 %vreg14, 16, %STATUS<imp-def,dead>; GPR32:%vreg17,%vreg14
1232B		%vreg47<def> = LDRf32 %vreg14, -4; mem:Volatile LD4[%scevgep9](tbaa=!2) FPR32:%vreg47 GPR32:%vreg14
1248B		%vreg16<def> = ADDri_r32 %vreg15<kill>, 4, %STATUS<imp-def,dead>; GPR32:%vreg16,%vreg15
1264B		%vreg48<def> = LDRf32 %vreg14, 0; mem:Volatile LD4[%lsr.iv5](tbaa=!2) FPR32:%vreg48 GPR32:%vreg14
1280B		%vreg49<def> = LDRf32 %vreg14<kill>, 4; mem:Volatile LD4[%scevgep7](tbaa=!2) FPR32:%vreg49 GPR32:%vreg14
1296B		%vreg79<def> = LDRf64 %vreg13, -8; mem:LD4[%scevgep17](tbaa=!2) LD4[%scevgep15](tbaa=!2) FPR64:%vreg79 GPR32:%vreg13
1312B		%vreg50<def> = COPY %vreg79:isub_hi; FPR32:%vreg50 FPR64:%vreg79
1328B		%vreg52<def> = COPY %vreg79:isub_lo<kill>; FPR32:%vreg52 FPR64:%vreg79
1344B		%vreg75<def> = LDRi32_r32 <fi#2>, 0; mem:LD4[FixedStack2] GPR32:%vreg75
1360B		GID %CONFIG<imp-def,dead>
1376B		%CONFIG<def,dead> = MOVTS32_core %vreg75<kill>; GPR32:%vreg75
1392B		GIE %CONFIG<imp-def,dead>
1408B		%vreg51<def> = COPY %vreg50<kill>; FPR32:%vreg51,%vreg50
1424B		%vreg51<def,tied1> = FMADDrr_r32 %vreg51<tied0>, %vreg12, %vreg46<kill>, %STATUS<imp-def,dead>; FPR32:%vreg51,%vreg12,%vreg46
1440B		%vreg53<def> = COPY %vreg52<kill>; FPR32:%vreg53,%vreg52
1456B		%vreg53<def,tied1> = FMADDrr_r32 %vreg53<tied0>, %vreg12, %vreg47<kill>, %STATUS<imp-def,dead>; FPR32:%vreg53,%vreg12,%vreg47
1472B		%vreg80:isub_lo<def,read-undef> = COPY %vreg51<kill>; FPR64:%vreg80 FPR32:%vreg51
1488B		%vreg80:isub_hi<def> = COPY %vreg53<kill>; FPR64:%vreg80 FPR32:%vreg53
1504B		STRf64 %vreg80<kill>, %vreg13, -8; mem:ST4[%scevgep17](tbaa=!2) ST4[%scevgep15](tbaa=!2) FPR64:%vreg80 GPR32:%vreg13
1520B		%vreg54<def> = LDRf32 %vreg13, 0; mem:LD4[%lsr.iv1214](tbaa=!2) FPR32:%vreg54 GPR32:%vreg13
1536B		%vreg55<def> = COPY %vreg54<kill>; FPR32:%vreg55,%vreg54
1552B		%vreg55<def,tied1> = FMADDrr_r32 %vreg55<tied0>, %vreg12, %vreg48<kill>, %STATUS<imp-def,dead>; FPR32:%vreg55,%vreg12,%vreg48
1568B		STRf32 %vreg55<kill>, %vreg13, 0; mem:ST4[%lsr.iv1214](tbaa=!2) FPR32:%vreg55 GPR32:%vreg13
1584B		%vreg56<def> = LDRf32 %vreg13, 4; mem:LD4[%scevgep16](tbaa=!2) FPR32:%vreg56 GPR32:%vreg13
1600B		%vreg57<def> = COPY %vreg56<kill>; FPR32:%vreg57,%vreg56
1616B		%vreg57<def,tied1> = FMADDrr_r32 %vreg57<tied0>, %vreg12, %vreg49<kill>, %STATUS<imp-def,dead>; FPR32:%vreg57,%vreg12,%vreg49
1632B		%vreg58<def,dead> = CMPri_r32 %vreg16, 8, %STATUS<imp-def>; GPR32:%vreg58,%vreg16
1648B		STRf32 %vreg57<kill>, %vreg13<kill>, 4; mem:ST4[%scevgep16](tbaa=!2) FPR32:%vreg57 GPR32:%vreg13
1664B		%vreg88<def> = COPY %vreg18<kill>; GPR32:%vreg88,%vreg18
1680B		%vreg89<def> = COPY %vreg17<kill>; GPR32:%vreg89,%vreg17
1696B		%vreg90<def> = COPY %vreg16<kill>; GPR32:%vreg90,%vreg16
1712B		BCC <BB#7>, 8, %STATUS<imp-use>
1728B		BNONE32 <BB#8>, %STATUS<imp-use>
	    Successors according to CFG: BB#7(0x7c000000 / 0x80000000 = 96.88%) BB#8(0x04000000 / 0x80000000 = 3.12%)

1744B	BB#8: derived from LLVM BB %for.end60
	    Predecessors according to CFG: BB#7
1760B		%vreg20<def> = ADDrr_r32 %vreg9<kill>, %vreg1, %STATUS<imp-def,dead>; GPR32:%vreg20,%vreg9,%vreg1
1776B		%vreg19<def> = ADDri_r32 %vreg10<kill>, 1, %STATUS<imp-def,dead>; GPR32:%vreg19,%vreg10
1792B		%vreg59<def,dead> = CMPrr_r32 %vreg19, %vreg33, %STATUS<imp-def>; GPR32:%vreg59,%vreg19,%vreg33
1808B		%vreg86<def> = COPY %vreg20<kill>; GPR32:%vreg86,%vreg20
1824B		%vreg87<def> = COPY %vreg19<kill>; GPR32:%vreg87,%vreg19
1840B		BCC <BB#5>, 0, %STATUS<imp-use>
1856B		BNONE32 <BB#6>, %STATUS<imp-use>
	    Successors according to CFG: BB#5(0x04000000 / 0x80000000 = 3.12%) BB#6(0x7c000000 / 0x80000000 = 96.88%)

1872B	BB#9: derived from LLVM BB %for.body66
	    Predecessors according to CFG: BB#5 BB#9
1888B		%vreg22<def> = COPY %vreg92<kill>; GPR32:%vreg22,%vreg92
1904B		%vreg21<def> = COPY %vreg91<kill>; GPR32:%vreg21,%vreg91
1920B		%vreg62<def> = ADDrr_r32 %vreg36, %vreg22, %STATUS<imp-def,dead>; GPR32:%vreg62,%vreg36,%vreg22
1936B		%vreg63<def> = LDRf32 %vreg62<kill>, 0; mem:LD4[%sunkaddr30](tbaa=!2) FPR32:%vreg63 GPR32:%vreg62
1952B		%vreg24<def> = ADDri_r32 %vreg21, 4, %STATUS<imp-def,dead>; GPR32:%vreg24,%vreg21
1968B		%vreg23<def> = ADDri_r32 %vreg22<kill>, 4, %STATUS<imp-def,dead>; GPR32:%vreg23,%vreg22
1984B		%vreg64<def> = LDRf32 %vreg21, 0; mem:Volatile LD4[%lsr.iv24](tbaa=!2) FPR32:%vreg64 GPR32:%vreg21
2000B		%vreg76<def> = LDRi32_r32 <fi#2>, 0; mem:LD4[FixedStack2] GPR32:%vreg76
2016B		GID %CONFIG<imp-def,dead>
2032B		%CONFIG<def,dead> = MOVTS32_core %vreg76<kill>; GPR32:%vreg76
2048B		GIE %CONFIG<imp-def,dead>
2064B		%vreg65<def> = FADDrr_r32 %vreg63<kill>, %vreg64<kill>, %STATUS<imp-def,dead>; FPR32:%vreg65,%vreg63,%vreg64
2080B		%vreg66<def,dead> = CMPri_r32 %vreg23, 32, %STATUS<imp-def>; GPR32:%vreg66,%vreg23
2096B		STRf32 %vreg65<kill>, %vreg21<kill>, 0; mem:Volatile ST4[%lsr.iv24](tbaa=!2) FPR32:%vreg65 GPR32:%vreg21
2112B		%vreg91<def> = COPY %vreg24<kill>; GPR32:%vreg91,%vreg24
2128B		%vreg92<def> = COPY %vreg23<kill>; GPR32:%vreg92,%vreg23
2144B		BCC <BB#9>, 1, %STATUS<imp-use>
2160B		BNONE32 <BB#10>, %STATUS<imp-use>
	    Successors according to CFG: BB#10(0x04000000 / 0x80000000 = 3.12%) BB#9(0x7c000000 / 0x80000000 = 96.88%)

2176B	BB#10: derived from LLVM BB %for.end75
	    Predecessors according to CFG: BB#9
2192B		%vreg27<def> = ADDri_r32 %vreg6<kill>, 32, %STATUS<imp-def,dead>; GPR32:%vreg27,%vreg6
2208B		%vreg26<def> = ADDri_r32 %vreg7<kill>, 32, %STATUS<imp-def,dead>; GPR32:%vreg26,%vreg7
2224B		%vreg25<def> = ADDri_r32 %vreg8<kill>, 8, %STATUS<imp-def,dead>; GPR32:%vreg25,%vreg8
2240B		%vreg67<def,dead> = CMPrr_r32 %vreg25, %vreg33, %STATUS<imp-def>; GPR32:%vreg67,%vreg25,%vreg33
2256B		%vreg83<def> = COPY %vreg27<kill>; GPR32:%vreg83,%vreg27
2272B		%vreg84<def> = COPY %vreg26<kill>; GPR32:%vreg84,%vreg26
2288B		%vreg85<def> = COPY %vreg25<kill>; GPR32:%vreg85,%vreg25
2304B		BCC <BB#4>, 8, %STATUS<imp-use>
2320B		BNONE32 <BB#11>, %STATUS<imp-use>
	    Successors according to CFG: BB#4(0x7c000000 / 0x80000000 = 96.88%) BB#11(0x04000000 / 0x80000000 = 3.12%)

2336B	BB#11: derived from LLVM BB %for.end78
	    Predecessors according to CFG: BB#10
2352B		%vreg29<def> = ADDrr_r32 %vreg3<kill>, %vreg1, %STATUS<imp-def,dead>; GPR32:%vreg29,%vreg3,%vreg1
2368B		%vreg28<def> = ADDri_r32 %vreg4<kill>, 1, %STATUS<imp-def,dead>; GPR32:%vreg28,%vreg4
2384B		%vreg68<def,dead> = CMPrr_r32 %vreg28, %vreg33, %STATUS<imp-def>; GPR32:%vreg68,%vreg28,%vreg33
2400B		%vreg81<def> = COPY %vreg29<kill>; GPR32:%vreg81,%vreg29
2416B		%vreg82<def> = COPY %vreg28<kill>; GPR32:%vreg82,%vreg28
2432B		BCC <BB#3>, 1, %STATUS<imp-use>
2448B		BNONE32 <BB#12>, %STATUS<imp-use>
	    Successors according to CFG: BB#12(0x04000000 / 0x80000000 = 3.12%) BB#3(0x7c000000 / 0x80000000 = 96.88%)

2464B	BB#12: derived from LLVM BB %for.end81
	    Predecessors according to CFG: BB#1 BB#11
2480B		%vreg77<def> = LDRi32_r32 <fi#1>, 0; mem:LD4[FixedStack1] GPR32:%vreg77
2496B		GID
2512B		%CONFIG<def> = MOVTS32_core %vreg77<kill>; GPR32:%vreg77
2528B		GIE %CONFIG<imp-use,kill>
2544B		RTS

# End machine code for function matmac.

# *** IR Dump After Slot index numbering ***:
# Machine code for function matmac: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=32, align=8, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=4, align=8, at location [SP]
Function Live Ins: %R0 in %vreg30, %R1 in %vreg31, %R2 in %vreg32, %R3 in %vreg33

0B	BB#0: 
	    Live Ins: %R0 %R1 %R2 %R3
16B		GID %CONFIG<imp-def>
32B		%vreg71<def> = MOVFS32_core %CONFIG; GPR32:%vreg71
48B		STRi32_r32 %vreg71, <fi#1>, 0; mem:ST4[FixedStack1] GPR32:%vreg71
64B		%vreg72<def> = MOVi32ri 65535; GPR32:%vreg72
80B		%vreg73<def> = COPY %vreg72<kill>; GPR32:%vreg73,%vreg72
96B		%vreg73<def,tied1> = MOVTi32ri %vreg73<tied0>, 65521; GPR32:%vreg73
112B		%vreg69<def> = ANDrr_r32 %vreg71, %vreg73<kill>, %STATUS<imp-def>; GPR32:%vreg69,%vreg71,%vreg73
128B		%vreg70<def> = COPY %vreg71<kill>; GPR32:%vreg70,%vreg71
144B		%vreg70<def,tied1> = MOVTi32ri %vreg70<tied0>, 72; GPR32:%vreg70
160B		%vreg78:isub_lo<def,read-undef> = COPY %vreg69<kill>; GPR64:%vreg78 GPR32:%vreg69
176B		%vreg78:isub_hi<def> = COPY %vreg70<kill>; GPR64:%vreg78 GPR32:%vreg70
192B		STRi64 %vreg78<kill>, <fi#3>, 0; mem:ST4[FixedStack3] ST4[FixedStack2] GPR64:%vreg78
208B		GIE %CONFIG<imp-use,kill>
	    Successors according to CFG: BB#1(?%)

224B	BB#1: derived from LLVM BB %entry
	    Live Ins: %R0 %R1 %R2 %R3
	    Predecessors according to CFG: BB#0
240B		%vreg33<def> = COPY %R3<kill>; GPR32:%vreg33
256B		%vreg32<def> = COPY %R2<kill>; GPR32:%vreg32
272B		%vreg31<def> = COPY %R1<kill>; GPR32:%vreg31
288B		%vreg30<def> = COPY %R0<kill>; GPR32:%vreg30
304B		%vreg34<def,dead> = CMPri_r32 %vreg33, 1, %STATUS<imp-def>; GPR32:%vreg34,%vreg33
320B		BCC <BB#12>, 8, %STATUS<imp-use>
336B		BNONE32 <BB#2>, %STATUS<imp-use>
	    Successors according to CFG: BB#2(0x50000000 / 0x80000000 = 62.50%) BB#12(0x30000000 / 0x80000000 = 37.50%)

352B	BB#2: derived from LLVM BB %for.body3.lr.ph.preheader
	    Predecessors according to CFG: BB#1
368B		%vreg1<def> = LSL32ri %vreg33, 2, %STATUS<imp-def,dead>; GPR32:%vreg1,%vreg33
384B		%vreg0<def> = ADDri_r32 %vreg31<kill>, 8, %STATUS<imp-def,dead>; GPR32:%vreg0,%vreg31
400B		%vreg36<def> = MOViPTR <fi#0>, 0; GPR32:%vreg36
416B		%vreg2<def> = ADDri_r32 %vreg36, 8, %STATUS<imp-def,dead>; GPR32:%vreg2,%vreg36
432B		%vreg35<def> = MOVi32ri 0; GPR32:%vreg35
448B		%vreg81<def> = COPY %vreg32<kill>; GPR32:%vreg81,%vreg32
464B		%vreg82<def> = COPY %vreg35; GPR32:%vreg82,%vreg35
	    Successors according to CFG: BB#3(?%)

480B	BB#3: derived from LLVM BB %for.body3.lr.ph
	    Predecessors according to CFG: BB#2 BB#11
496B		%vreg4<def> = COPY %vreg82<kill>; GPR32:%vreg4,%vreg82
512B		%vreg3<def> = COPY %vreg81<kill>; GPR32:%vreg3,%vreg81
528B		%vreg74<def> = LDRi32_r32 <fi#3>, 0; mem:LD4[FixedStack3] GPR32:%vreg74
544B		GID %CONFIG<imp-def,dead>
560B		%CONFIG<def,dead> = MOVTS32_core %vreg74<kill>; GPR32:%vreg74
576B		GIE %CONFIG<imp-def,dead>
592B		%vreg38<def> = IMULrr_r32 %vreg4, %vreg33, %STATUS<imp-def,dead>; GPR32:%vreg38,%vreg4,%vreg33
608B		%vreg39<def> = LSL32ri %vreg38<kill>, 2, %STATUS<imp-def,dead>; GPR32:%vreg39,%vreg38
624B		%vreg5<def> = ADDrr_r32 %vreg30, %vreg39<kill>, %STATUS<imp-def,dead>; GPR32:%vreg5,%vreg30,%vreg39
640B		%vreg83<def> = COPY %vreg3; GPR32:%vreg83,%vreg3
656B		%vreg84<def> = COPY %vreg0; GPR32:%vreg84,%vreg0
672B		%vreg85<def> = COPY %vreg35; GPR32:%vreg85,%vreg35
	    Successors according to CFG: BB#4(?%)

688B	BB#4: derived from LLVM BB %for.body9.preheader
	    Predecessors according to CFG: BB#3 BB#10
704B		%vreg8<def> = COPY %vreg85<kill>; GPR32:%vreg8,%vreg85
720B		%vreg7<def> = COPY %vreg84<kill>; GPR32:%vreg7,%vreg84
736B		%vreg6<def> = COPY %vreg83<kill>; GPR32:%vreg6,%vreg83
752B		%vreg42:isub_hi<def,read-undef> = COPY %vreg35; FPR64_with_isub_hi_in_FPR32:%vreg42 GPR32:%vreg35
768B		%vreg42:isub_lo<def> = COPY %vreg35; FPR64_with_isub_hi_in_FPR32:%vreg42 GPR32:%vreg35
784B		STRi64 %vreg42, <fi#0>, 24; mem:ST8[%1+24] FPR64_with_isub_hi_in_FPR32:%vreg42
800B		STRi64 %vreg42, <fi#0>, 16; mem:ST8[%1+16] FPR64_with_isub_hi_in_FPR32:%vreg42
816B		STRi64 %vreg42, <fi#0>, 8; mem:ST8[%1+8] FPR64_with_isub_hi_in_FPR32:%vreg42
832B		STRi64 %vreg42<kill>, <fi#0>, 0; mem:ST8[%1] FPR64_with_isub_hi_in_FPR32:%vreg42
848B		%vreg86<def> = COPY %vreg7; GPR32:%vreg86,%vreg7
864B		%vreg87<def> = COPY %vreg35; GPR32:%vreg87,%vreg35
880B		BNONE32 <BB#6>, %STATUS<imp-use>
	    Successors according to CFG: BB#6(?%)

896B	BB#5: derived from LLVM BB %for.cond64.preheader
	    Predecessors according to CFG: BB#8
912B		%vreg91<def> = COPY %vreg6; GPR32:%vreg91,%vreg6
928B		%vreg92<def> = COPY %vreg35; GPR32:%vreg92,%vreg35
944B		BNONE32 <BB#9>, %STATUS<imp-use>
	    Successors according to CFG: BB#9(?%)

960B	BB#6: derived from LLVM BB %for.body9
	    Predecessors according to CFG: BB#4 BB#8
976B		%vreg10<def> = COPY %vreg87<kill>; GPR32:%vreg10,%vreg87
992B		%vreg9<def> = COPY %vreg86<kill>; GPR32:%vreg9,%vreg86
1008B		%vreg44<def> = LSL32ri %vreg10, 2, %STATUS<imp-def,dead>; GPR32:%vreg44,%vreg10
1024B		%vreg45<def> = ADDrr_r32 %vreg5, %vreg44<kill>, %STATUS<imp-def,dead>; GPR32:%vreg45,%vreg5,%vreg44
1040B		%vreg11<def> = COPY %vreg2; GPR32:%vreg11,%vreg2
1056B		%vreg12<def> = LDRf32 %vreg45<kill>, 0; mem:Volatile LD4[%add.ptr10](tbaa=!2) FPR32:%vreg12 GPR32:%vreg45
1072B		%vreg88<def> = COPY %vreg11<kill>; GPR32:%vreg88,%vreg11
1088B		%vreg89<def> = COPY %vreg9; GPR32:%vreg89,%vreg9
1104B		%vreg90<def> = COPY %vreg35; GPR32:%vreg90,%vreg35
	    Successors according to CFG: BB#7(?%)

1120B	BB#7: derived from LLVM BB %for.body13
	    Predecessors according to CFG: BB#6 BB#7
1136B		%vreg15<def> = COPY %vreg90<kill>; GPR32:%vreg15,%vreg90
1152B		%vreg14<def> = COPY %vreg89<kill>; GPR32:%vreg14,%vreg89
1168B		%vreg13<def> = COPY %vreg88<kill>; GPR32:%vreg13,%vreg88
1184B		%vreg46<def> = LDRf32 %vreg14, -8; mem:Volatile LD4[%scevgep8](tbaa=!2) FPR32:%vreg46 GPR32:%vreg14
1200B		%vreg18<def> = ADDri_r32 %vreg13, 16, %STATUS<imp-def,dead>; GPR32:%vreg18,%vreg13
1216B		%vreg17<def> = ADDri_r32 %vreg14, 16, %STATUS<imp-def,dead>; GPR32:%vreg17,%vreg14
1232B		%vreg47<def> = LDRf32 %vreg14, -4; mem:Volatile LD4[%scevgep9](tbaa=!2) FPR32:%vreg47 GPR32:%vreg14
1248B		%vreg16<def> = ADDri_r32 %vreg15<kill>, 4, %STATUS<imp-def,dead>; GPR32:%vreg16,%vreg15
1264B		%vreg48<def> = LDRf32 %vreg14, 0; mem:Volatile LD4[%lsr.iv5](tbaa=!2) FPR32:%vreg48 GPR32:%vreg14
1280B		%vreg49<def> = LDRf32 %vreg14<kill>, 4; mem:Volatile LD4[%scevgep7](tbaa=!2) FPR32:%vreg49 GPR32:%vreg14
1296B		%vreg79<def> = LDRf64 %vreg13, -8; mem:LD4[%scevgep17](tbaa=!2) LD4[%scevgep15](tbaa=!2) FPR64:%vreg79 GPR32:%vreg13
1312B		%vreg50<def> = COPY %vreg79:isub_hi; FPR32:%vreg50 FPR64:%vreg79
1328B		%vreg52<def> = COPY %vreg79:isub_lo<kill>; FPR32:%vreg52 FPR64:%vreg79
1344B		%vreg75<def> = LDRi32_r32 <fi#2>, 0; mem:LD4[FixedStack2] GPR32:%vreg75
1360B		GID %CONFIG<imp-def,dead>
1376B		%CONFIG<def,dead> = MOVTS32_core %vreg75<kill>; GPR32:%vreg75
1392B		GIE %CONFIG<imp-def,dead>
1408B		%vreg51<def> = COPY %vreg50<kill>; FPR32:%vreg51,%vreg50
1424B		%vreg51<def,tied1> = FMADDrr_r32 %vreg51<tied0>, %vreg12, %vreg46<kill>, %STATUS<imp-def,dead>; FPR32:%vreg51,%vreg12,%vreg46
1440B		%vreg53<def> = COPY %vreg52<kill>; FPR32:%vreg53,%vreg52
1456B		%vreg53<def,tied1> = FMADDrr_r32 %vreg53<tied0>, %vreg12, %vreg47<kill>, %STATUS<imp-def,dead>; FPR32:%vreg53,%vreg12,%vreg47
1472B		%vreg80:isub_lo<def,read-undef> = COPY %vreg51<kill>; FPR64:%vreg80 FPR32:%vreg51
1488B		%vreg80:isub_hi<def> = COPY %vreg53<kill>; FPR64:%vreg80 FPR32:%vreg53
1504B		STRf64 %vreg80<kill>, %vreg13, -8; mem:ST4[%scevgep17](tbaa=!2) ST4[%scevgep15](tbaa=!2) FPR64:%vreg80 GPR32:%vreg13
1520B		%vreg54<def> = LDRf32 %vreg13, 0; mem:LD4[%lsr.iv1214](tbaa=!2) FPR32:%vreg54 GPR32:%vreg13
1536B		%vreg55<def> = COPY %vreg54<kill>; FPR32:%vreg55,%vreg54
1552B		%vreg55<def,tied1> = FMADDrr_r32 %vreg55<tied0>, %vreg12, %vreg48<kill>, %STATUS<imp-def,dead>; FPR32:%vreg55,%vreg12,%vreg48
1568B		STRf32 %vreg55<kill>, %vreg13, 0; mem:ST4[%lsr.iv1214](tbaa=!2) FPR32:%vreg55 GPR32:%vreg13
1584B		%vreg56<def> = LDRf32 %vreg13, 4; mem:LD4[%scevgep16](tbaa=!2) FPR32:%vreg56 GPR32:%vreg13
1600B		%vreg57<def> = COPY %vreg56<kill>; FPR32:%vreg57,%vreg56
1616B		%vreg57<def,tied1> = FMADDrr_r32 %vreg57<tied0>, %vreg12, %vreg49<kill>, %STATUS<imp-def,dead>; FPR32:%vreg57,%vreg12,%vreg49
1632B		%vreg58<def,dead> = CMPri_r32 %vreg16, 8, %STATUS<imp-def>; GPR32:%vreg58,%vreg16
1648B		STRf32 %vreg57<kill>, %vreg13<kill>, 4; mem:ST4[%scevgep16](tbaa=!2) FPR32:%vreg57 GPR32:%vreg13
1664B		%vreg88<def> = COPY %vreg18<kill>; GPR32:%vreg88,%vreg18
1680B		%vreg89<def> = COPY %vreg17<kill>; GPR32:%vreg89,%vreg17
1696B		%vreg90<def> = COPY %vreg16<kill>; GPR32:%vreg90,%vreg16
1712B		BCC <BB#7>, 8, %STATUS<imp-use>
1728B		BNONE32 <BB#8>, %STATUS<imp-use>
	    Successors according to CFG: BB#7(0x7c000000 / 0x80000000 = 96.88%) BB#8(0x04000000 / 0x80000000 = 3.12%)

1744B	BB#8: derived from LLVM BB %for.end60
	    Predecessors according to CFG: BB#7
1760B		%vreg20<def> = ADDrr_r32 %vreg9<kill>, %vreg1, %STATUS<imp-def,dead>; GPR32:%vreg20,%vreg9,%vreg1
1776B		%vreg19<def> = ADDri_r32 %vreg10<kill>, 1, %STATUS<imp-def,dead>; GPR32:%vreg19,%vreg10
1792B		%vreg59<def,dead> = CMPrr_r32 %vreg19, %vreg33, %STATUS<imp-def>; GPR32:%vreg59,%vreg19,%vreg33
1808B		%vreg86<def> = COPY %vreg20<kill>; GPR32:%vreg86,%vreg20
1824B		%vreg87<def> = COPY %vreg19<kill>; GPR32:%vreg87,%vreg19
1840B		BCC <BB#5>, 0, %STATUS<imp-use>
1856B		BNONE32 <BB#6>, %STATUS<imp-use>
	    Successors according to CFG: BB#5(0x04000000 / 0x80000000 = 3.12%) BB#6(0x7c000000 / 0x80000000 = 96.88%)

1872B	BB#9: derived from LLVM BB %for.body66
	    Predecessors according to CFG: BB#5 BB#9
1888B		%vreg22<def> = COPY %vreg92<kill>; GPR32:%vreg22,%vreg92
1904B		%vreg21<def> = COPY %vreg91<kill>; GPR32:%vreg21,%vreg91
1920B		%vreg62<def> = ADDrr_r32 %vreg36, %vreg22, %STATUS<imp-def,dead>; GPR32:%vreg62,%vreg36,%vreg22
1936B		%vreg63<def> = LDRf32 %vreg62<kill>, 0; mem:LD4[%sunkaddr30](tbaa=!2) FPR32:%vreg63 GPR32:%vreg62
1952B		%vreg24<def> = ADDri_r32 %vreg21, 4, %STATUS<imp-def,dead>; GPR32:%vreg24,%vreg21
1968B		%vreg23<def> = ADDri_r32 %vreg22<kill>, 4, %STATUS<imp-def,dead>; GPR32:%vreg23,%vreg22
1984B		%vreg64<def> = LDRf32 %vreg21, 0; mem:Volatile LD4[%lsr.iv24](tbaa=!2) FPR32:%vreg64 GPR32:%vreg21
2000B		%vreg76<def> = LDRi32_r32 <fi#2>, 0; mem:LD4[FixedStack2] GPR32:%vreg76
2016B		GID %CONFIG<imp-def,dead>
2032B		%CONFIG<def,dead> = MOVTS32_core %vreg76<kill>; GPR32:%vreg76
2048B		GIE %CONFIG<imp-def,dead>
2064B		%vreg65<def> = FADDrr_r32 %vreg63<kill>, %vreg64<kill>, %STATUS<imp-def,dead>; FPR32:%vreg65,%vreg63,%vreg64
2080B		%vreg66<def,dead> = CMPri_r32 %vreg23, 32, %STATUS<imp-def>; GPR32:%vreg66,%vreg23
2096B		STRf32 %vreg65<kill>, %vreg21<kill>, 0; mem:Volatile ST4[%lsr.iv24](tbaa=!2) FPR32:%vreg65 GPR32:%vreg21
2112B		%vreg91<def> = COPY %vreg24<kill>; GPR32:%vreg91,%vreg24
2128B		%vreg92<def> = COPY %vreg23<kill>; GPR32:%vreg92,%vreg23
2144B		BCC <BB#9>, 1, %STATUS<imp-use>
2160B		BNONE32 <BB#10>, %STATUS<imp-use>
	    Successors according to CFG: BB#10(0x04000000 / 0x80000000 = 3.12%) BB#9(0x7c000000 / 0x80000000 = 96.88%)

2176B	BB#10: derived from LLVM BB %for.end75
	    Predecessors according to CFG: BB#9
2192B		%vreg27<def> = ADDri_r32 %vreg6<kill>, 32, %STATUS<imp-def,dead>; GPR32:%vreg27,%vreg6
2208B		%vreg26<def> = ADDri_r32 %vreg7<kill>, 32, %STATUS<imp-def,dead>; GPR32:%vreg26,%vreg7
2224B		%vreg25<def> = ADDri_r32 %vreg8<kill>, 8, %STATUS<imp-def,dead>; GPR32:%vreg25,%vreg8
2240B		%vreg67<def,dead> = CMPrr_r32 %vreg25, %vreg33, %STATUS<imp-def>; GPR32:%vreg67,%vreg25,%vreg33
2256B		%vreg83<def> = COPY %vreg27<kill>; GPR32:%vreg83,%vreg27
2272B		%vreg84<def> = COPY %vreg26<kill>; GPR32:%vreg84,%vreg26
2288B		%vreg85<def> = COPY %vreg25<kill>; GPR32:%vreg85,%vreg25
2304B		BCC <BB#4>, 8, %STATUS<imp-use>
2320B		BNONE32 <BB#11>, %STATUS<imp-use>
	    Successors according to CFG: BB#4(0x7c000000 / 0x80000000 = 96.88%) BB#11(0x04000000 / 0x80000000 = 3.12%)

2336B	BB#11: derived from LLVM BB %for.end78
	    Predecessors according to CFG: BB#10
2352B		%vreg29<def> = ADDrr_r32 %vreg3<kill>, %vreg1, %STATUS<imp-def,dead>; GPR32:%vreg29,%vreg3,%vreg1
2368B		%vreg28<def> = ADDri_r32 %vreg4<kill>, 1, %STATUS<imp-def,dead>; GPR32:%vreg28,%vreg4
2384B		%vreg68<def,dead> = CMPrr_r32 %vreg28, %vreg33, %STATUS<imp-def>; GPR32:%vreg68,%vreg28,%vreg33
2400B		%vreg81<def> = COPY %vreg29<kill>; GPR32:%vreg81,%vreg29
2416B		%vreg82<def> = COPY %vreg28<kill>; GPR32:%vreg82,%vreg28
2432B		BCC <BB#3>, 1, %STATUS<imp-use>
2448B		BNONE32 <BB#12>, %STATUS<imp-use>
	    Successors according to CFG: BB#12(0x04000000 / 0x80000000 = 3.12%) BB#3(0x7c000000 / 0x80000000 = 96.88%)

2464B	BB#12: derived from LLVM BB %for.end81
	    Predecessors according to CFG: BB#1 BB#11
2480B		%vreg77<def> = LDRi32_r32 <fi#1>, 0; mem:LD4[FixedStack1] GPR32:%vreg77
2496B		GID
2512B		%CONFIG<def> = MOVTS32_core %vreg77<kill>; GPR32:%vreg77
2528B		GIE %CONFIG<imp-use,kill>
2544B		RTS

# End machine code for function matmac.

# *** IR Dump Before Live Interval Analysis ***:
# Machine code for function matmac: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=32, align=8, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=4, align=8, at location [SP]
Function Live Ins: %R0 in %vreg30, %R1 in %vreg31, %R2 in %vreg32, %R3 in %vreg33

0B	BB#0: 
	    Live Ins: %R0 %R1 %R2 %R3
16B		GID %CONFIG<imp-def>
32B		%vreg71<def> = MOVFS32_core %CONFIG; GPR32:%vreg71
48B		STRi32_r32 %vreg71, <fi#1>, 0; mem:ST4[FixedStack1] GPR32:%vreg71
64B		%vreg72<def> = MOVi32ri 65535; GPR32:%vreg72
80B		%vreg73<def> = COPY %vreg72<kill>; GPR32:%vreg73,%vreg72
96B		%vreg73<def,tied1> = MOVTi32ri %vreg73<tied0>, 65521; GPR32:%vreg73
112B		%vreg69<def> = ANDrr_r32 %vreg71, %vreg73<kill>, %STATUS<imp-def>; GPR32:%vreg69,%vreg71,%vreg73
128B		%vreg70<def> = COPY %vreg71<kill>; GPR32:%vreg70,%vreg71
144B		%vreg70<def,tied1> = MOVTi32ri %vreg70<tied0>, 72; GPR32:%vreg70
160B		%vreg78:isub_lo<def,read-undef> = COPY %vreg69<kill>; GPR64:%vreg78 GPR32:%vreg69
176B		%vreg78:isub_hi<def> = COPY %vreg70<kill>; GPR64:%vreg78 GPR32:%vreg70
192B		STRi64 %vreg78<kill>, <fi#3>, 0; mem:ST4[FixedStack3] ST4[FixedStack2] GPR64:%vreg78
208B		GIE %CONFIG<imp-use,kill>
	    Successors according to CFG: BB#1(?%)

224B	BB#1: derived from LLVM BB %entry
	    Live Ins: %R0 %R1 %R2 %R3
	    Predecessors according to CFG: BB#0
240B		%vreg33<def> = COPY %R3<kill>; GPR32:%vreg33
256B		%vreg32<def> = COPY %R2<kill>; GPR32:%vreg32
272B		%vreg31<def> = COPY %R1<kill>; GPR32:%vreg31
288B		%vreg30<def> = COPY %R0<kill>; GPR32:%vreg30
304B		%vreg34<def,dead> = CMPri_r32 %vreg33, 1, %STATUS<imp-def>; GPR32:%vreg34,%vreg33
320B		BCC <BB#12>, 8, %STATUS<imp-use>
336B		BNONE32 <BB#2>, %STATUS<imp-use>
	    Successors according to CFG: BB#2(0x50000000 / 0x80000000 = 62.50%) BB#12(0x30000000 / 0x80000000 = 37.50%)

352B	BB#2: derived from LLVM BB %for.body3.lr.ph.preheader
	    Predecessors according to CFG: BB#1
368B		%vreg1<def> = LSL32ri %vreg33, 2, %STATUS<imp-def,dead>; GPR32:%vreg1,%vreg33
384B		%vreg0<def> = ADDri_r32 %vreg31<kill>, 8, %STATUS<imp-def,dead>; GPR32:%vreg0,%vreg31
400B		%vreg36<def> = MOViPTR <fi#0>, 0; GPR32:%vreg36
416B		%vreg2<def> = ADDri_r32 %vreg36, 8, %STATUS<imp-def,dead>; GPR32:%vreg2,%vreg36
432B		%vreg35<def> = MOVi32ri 0; GPR32:%vreg35
448B		%vreg81<def> = COPY %vreg32<kill>; GPR32:%vreg81,%vreg32
464B		%vreg82<def> = COPY %vreg35; GPR32:%vreg82,%vreg35
	    Successors according to CFG: BB#3(?%)

480B	BB#3: derived from LLVM BB %for.body3.lr.ph
	    Predecessors according to CFG: BB#2 BB#11
496B		%vreg4<def> = COPY %vreg82<kill>; GPR32:%vreg4,%vreg82
512B		%vreg3<def> = COPY %vreg81<kill>; GPR32:%vreg3,%vreg81
528B		%vreg74<def> = LDRi32_r32 <fi#3>, 0; mem:LD4[FixedStack3] GPR32:%vreg74
544B		GID %CONFIG<imp-def,dead>
560B		%CONFIG<def,dead> = MOVTS32_core %vreg74<kill>; GPR32:%vreg74
576B		GIE %CONFIG<imp-def,dead>
592B		%vreg38<def> = IMULrr_r32 %vreg4, %vreg33, %STATUS<imp-def,dead>; GPR32:%vreg38,%vreg4,%vreg33
608B		%vreg39<def> = LSL32ri %vreg38<kill>, 2, %STATUS<imp-def,dead>; GPR32:%vreg39,%vreg38
624B		%vreg5<def> = ADDrr_r32 %vreg30, %vreg39<kill>, %STATUS<imp-def,dead>; GPR32:%vreg5,%vreg30,%vreg39
640B		%vreg83<def> = COPY %vreg3; GPR32:%vreg83,%vreg3
656B		%vreg84<def> = COPY %vreg0; GPR32:%vreg84,%vreg0
672B		%vreg85<def> = COPY %vreg35; GPR32:%vreg85,%vreg35
	    Successors according to CFG: BB#4(?%)

688B	BB#4: derived from LLVM BB %for.body9.preheader
	    Predecessors according to CFG: BB#3 BB#10
704B		%vreg8<def> = COPY %vreg85<kill>; GPR32:%vreg8,%vreg85
720B		%vreg7<def> = COPY %vreg84<kill>; GPR32:%vreg7,%vreg84
736B		%vreg6<def> = COPY %vreg83<kill>; GPR32:%vreg6,%vreg83
752B		%vreg42:isub_hi<def,read-undef> = COPY %vreg35; FPR64_with_isub_hi_in_FPR32:%vreg42 GPR32:%vreg35
768B		%vreg42:isub_lo<def> = COPY %vreg35; FPR64_with_isub_hi_in_FPR32:%vreg42 GPR32:%vreg35
784B		STRi64 %vreg42, <fi#0>, 24; mem:ST8[%1+24] FPR64_with_isub_hi_in_FPR32:%vreg42
800B		STRi64 %vreg42, <fi#0>, 16; mem:ST8[%1+16] FPR64_with_isub_hi_in_FPR32:%vreg42
816B		STRi64 %vreg42, <fi#0>, 8; mem:ST8[%1+8] FPR64_with_isub_hi_in_FPR32:%vreg42
832B		STRi64 %vreg42<kill>, <fi#0>, 0; mem:ST8[%1] FPR64_with_isub_hi_in_FPR32:%vreg42
848B		%vreg86<def> = COPY %vreg7; GPR32:%vreg86,%vreg7
864B		%vreg87<def> = COPY %vreg35; GPR32:%vreg87,%vreg35
880B		BNONE32 <BB#6>, %STATUS<imp-use>
	    Successors according to CFG: BB#6(?%)

896B	BB#5: derived from LLVM BB %for.cond64.preheader
	    Predecessors according to CFG: BB#8
912B		%vreg91<def> = COPY %vreg6; GPR32:%vreg91,%vreg6
928B		%vreg92<def> = COPY %vreg35; GPR32:%vreg92,%vreg35
944B		BNONE32 <BB#9>, %STATUS<imp-use>
	    Successors according to CFG: BB#9(?%)

960B	BB#6: derived from LLVM BB %for.body9
	    Predecessors according to CFG: BB#4 BB#8
976B		%vreg10<def> = COPY %vreg87<kill>; GPR32:%vreg10,%vreg87
992B		%vreg9<def> = COPY %vreg86<kill>; GPR32:%vreg9,%vreg86
1008B		%vreg44<def> = LSL32ri %vreg10, 2, %STATUS<imp-def,dead>; GPR32:%vreg44,%vreg10
1024B		%vreg45<def> = ADDrr_r32 %vreg5, %vreg44<kill>, %STATUS<imp-def,dead>; GPR32:%vreg45,%vreg5,%vreg44
1040B		%vreg11<def> = COPY %vreg2; GPR32:%vreg11,%vreg2
1056B		%vreg12<def> = LDRf32 %vreg45<kill>, 0; mem:Volatile LD4[%add.ptr10](tbaa=!2) FPR32:%vreg12 GPR32:%vreg45
1072B		%vreg88<def> = COPY %vreg11<kill>; GPR32:%vreg88,%vreg11
1088B		%vreg89<def> = COPY %vreg9; GPR32:%vreg89,%vreg9
1104B		%vreg90<def> = COPY %vreg35; GPR32:%vreg90,%vreg35
	    Successors according to CFG: BB#7(?%)

1120B	BB#7: derived from LLVM BB %for.body13
	    Predecessors according to CFG: BB#6 BB#7
1136B		%vreg15<def> = COPY %vreg90<kill>; GPR32:%vreg15,%vreg90
1152B		%vreg14<def> = COPY %vreg89<kill>; GPR32:%vreg14,%vreg89
1168B		%vreg13<def> = COPY %vreg88<kill>; GPR32:%vreg13,%vreg88
1184B		%vreg46<def> = LDRf32 %vreg14, -8; mem:Volatile LD4[%scevgep8](tbaa=!2) FPR32:%vreg46 GPR32:%vreg14
1200B		%vreg18<def> = ADDri_r32 %vreg13, 16, %STATUS<imp-def,dead>; GPR32:%vreg18,%vreg13
1216B		%vreg17<def> = ADDri_r32 %vreg14, 16, %STATUS<imp-def,dead>; GPR32:%vreg17,%vreg14
1232B		%vreg47<def> = LDRf32 %vreg14, -4; mem:Volatile LD4[%scevgep9](tbaa=!2) FPR32:%vreg47 GPR32:%vreg14
1248B		%vreg16<def> = ADDri_r32 %vreg15<kill>, 4, %STATUS<imp-def,dead>; GPR32:%vreg16,%vreg15
1264B		%vreg48<def> = LDRf32 %vreg14, 0; mem:Volatile LD4[%lsr.iv5](tbaa=!2) FPR32:%vreg48 GPR32:%vreg14
1280B		%vreg49<def> = LDRf32 %vreg14<kill>, 4; mem:Volatile LD4[%scevgep7](tbaa=!2) FPR32:%vreg49 GPR32:%vreg14
1296B		%vreg79<def> = LDRf64 %vreg13, -8; mem:LD4[%scevgep17](tbaa=!2) LD4[%scevgep15](tbaa=!2) FPR64:%vreg79 GPR32:%vreg13
1312B		%vreg50<def> = COPY %vreg79:isub_hi; FPR32:%vreg50 FPR64:%vreg79
1328B		%vreg52<def> = COPY %vreg79:isub_lo<kill>; FPR32:%vreg52 FPR64:%vreg79
1344B		%vreg75<def> = LDRi32_r32 <fi#2>, 0; mem:LD4[FixedStack2] GPR32:%vreg75
1360B		GID %CONFIG<imp-def,dead>
1376B		%CONFIG<def,dead> = MOVTS32_core %vreg75<kill>; GPR32:%vreg75
1392B		GIE %CONFIG<imp-def,dead>
1408B		%vreg51<def> = COPY %vreg50<kill>; FPR32:%vreg51,%vreg50
1424B		%vreg51<def,tied1> = FMADDrr_r32 %vreg51<tied0>, %vreg12, %vreg46<kill>, %STATUS<imp-def,dead>; FPR32:%vreg51,%vreg12,%vreg46
1440B		%vreg53<def> = COPY %vreg52<kill>; FPR32:%vreg53,%vreg52
1456B		%vreg53<def,tied1> = FMADDrr_r32 %vreg53<tied0>, %vreg12, %vreg47<kill>, %STATUS<imp-def,dead>; FPR32:%vreg53,%vreg12,%vreg47
1472B		%vreg80:isub_lo<def,read-undef> = COPY %vreg51<kill>; FPR64:%vreg80 FPR32:%vreg51
1488B		%vreg80:isub_hi<def> = COPY %vreg53<kill>; FPR64:%vreg80 FPR32:%vreg53
1504B		STRf64 %vreg80<kill>, %vreg13, -8; mem:ST4[%scevgep17](tbaa=!2) ST4[%scevgep15](tbaa=!2) FPR64:%vreg80 GPR32:%vreg13
1520B		%vreg54<def> = LDRf32 %vreg13, 0; mem:LD4[%lsr.iv1214](tbaa=!2) FPR32:%vreg54 GPR32:%vreg13
1536B		%vreg55<def> = COPY %vreg54<kill>; FPR32:%vreg55,%vreg54
1552B		%vreg55<def,tied1> = FMADDrr_r32 %vreg55<tied0>, %vreg12, %vreg48<kill>, %STATUS<imp-def,dead>; FPR32:%vreg55,%vreg12,%vreg48
1568B		STRf32 %vreg55<kill>, %vreg13, 0; mem:ST4[%lsr.iv1214](tbaa=!2) FPR32:%vreg55 GPR32:%vreg13
1584B		%vreg56<def> = LDRf32 %vreg13, 4; mem:LD4[%scevgep16](tbaa=!2) FPR32:%vreg56 GPR32:%vreg13
1600B		%vreg57<def> = COPY %vreg56<kill>; FPR32:%vreg57,%vreg56
1616B		%vreg57<def,tied1> = FMADDrr_r32 %vreg57<tied0>, %vreg12, %vreg49<kill>, %STATUS<imp-def,dead>; FPR32:%vreg57,%vreg12,%vreg49
1632B		%vreg58<def,dead> = CMPri_r32 %vreg16, 8, %STATUS<imp-def>; GPR32:%vreg58,%vreg16
1648B		STRf32 %vreg57<kill>, %vreg13<kill>, 4; mem:ST4[%scevgep16](tbaa=!2) FPR32:%vreg57 GPR32:%vreg13
1664B		%vreg88<def> = COPY %vreg18<kill>; GPR32:%vreg88,%vreg18
1680B		%vreg89<def> = COPY %vreg17<kill>; GPR32:%vreg89,%vreg17
1696B		%vreg90<def> = COPY %vreg16<kill>; GPR32:%vreg90,%vreg16
1712B		BCC <BB#7>, 8, %STATUS<imp-use>
1728B		BNONE32 <BB#8>, %STATUS<imp-use>
	    Successors according to CFG: BB#7(0x7c000000 / 0x80000000 = 96.88%) BB#8(0x04000000 / 0x80000000 = 3.12%)

1744B	BB#8: derived from LLVM BB %for.end60
	    Predecessors according to CFG: BB#7
1760B		%vreg20<def> = ADDrr_r32 %vreg9<kill>, %vreg1, %STATUS<imp-def,dead>; GPR32:%vreg20,%vreg9,%vreg1
1776B		%vreg19<def> = ADDri_r32 %vreg10<kill>, 1, %STATUS<imp-def,dead>; GPR32:%vreg19,%vreg10
1792B		%vreg59<def,dead> = CMPrr_r32 %vreg19, %vreg33, %STATUS<imp-def>; GPR32:%vreg59,%vreg19,%vreg33
1808B		%vreg86<def> = COPY %vreg20<kill>; GPR32:%vreg86,%vreg20
1824B		%vreg87<def> = COPY %vreg19<kill>; GPR32:%vreg87,%vreg19
1840B		BCC <BB#5>, 0, %STATUS<imp-use>
1856B		BNONE32 <BB#6>, %STATUS<imp-use>
	    Successors according to CFG: BB#5(0x04000000 / 0x80000000 = 3.12%) BB#6(0x7c000000 / 0x80000000 = 96.88%)

1872B	BB#9: derived from LLVM BB %for.body66
	    Predecessors according to CFG: BB#5 BB#9
1888B		%vreg22<def> = COPY %vreg92<kill>; GPR32:%vreg22,%vreg92
1904B		%vreg21<def> = COPY %vreg91<kill>; GPR32:%vreg21,%vreg91
1920B		%vreg62<def> = ADDrr_r32 %vreg36, %vreg22, %STATUS<imp-def,dead>; GPR32:%vreg62,%vreg36,%vreg22
1936B		%vreg63<def> = LDRf32 %vreg62<kill>, 0; mem:LD4[%sunkaddr30](tbaa=!2) FPR32:%vreg63 GPR32:%vreg62
1952B		%vreg24<def> = ADDri_r32 %vreg21, 4, %STATUS<imp-def,dead>; GPR32:%vreg24,%vreg21
1968B		%vreg23<def> = ADDri_r32 %vreg22<kill>, 4, %STATUS<imp-def,dead>; GPR32:%vreg23,%vreg22
1984B		%vreg64<def> = LDRf32 %vreg21, 0; mem:Volatile LD4[%lsr.iv24](tbaa=!2) FPR32:%vreg64 GPR32:%vreg21
2000B		%vreg76<def> = LDRi32_r32 <fi#2>, 0; mem:LD4[FixedStack2] GPR32:%vreg76
2016B		GID %CONFIG<imp-def,dead>
2032B		%CONFIG<def,dead> = MOVTS32_core %vreg76<kill>; GPR32:%vreg76
2048B		GIE %CONFIG<imp-def,dead>
2064B		%vreg65<def> = FADDrr_r32 %vreg63<kill>, %vreg64<kill>, %STATUS<imp-def,dead>; FPR32:%vreg65,%vreg63,%vreg64
2080B		%vreg66<def,dead> = CMPri_r32 %vreg23, 32, %STATUS<imp-def>; GPR32:%vreg66,%vreg23
2096B		STRf32 %vreg65<kill>, %vreg21<kill>, 0; mem:Volatile ST4[%lsr.iv24](tbaa=!2) FPR32:%vreg65 GPR32:%vreg21
2112B		%vreg91<def> = COPY %vreg24<kill>; GPR32:%vreg91,%vreg24
2128B		%vreg92<def> = COPY %vreg23<kill>; GPR32:%vreg92,%vreg23
2144B		BCC <BB#9>, 1, %STATUS<imp-use>
2160B		BNONE32 <BB#10>, %STATUS<imp-use>
	    Successors according to CFG: BB#10(0x04000000 / 0x80000000 = 3.12%) BB#9(0x7c000000 / 0x80000000 = 96.88%)

2176B	BB#10: derived from LLVM BB %for.end75
	    Predecessors according to CFG: BB#9
2192B		%vreg27<def> = ADDri_r32 %vreg6<kill>, 32, %STATUS<imp-def,dead>; GPR32:%vreg27,%vreg6
2208B		%vreg26<def> = ADDri_r32 %vreg7<kill>, 32, %STATUS<imp-def,dead>; GPR32:%vreg26,%vreg7
2224B		%vreg25<def> = ADDri_r32 %vreg8<kill>, 8, %STATUS<imp-def,dead>; GPR32:%vreg25,%vreg8
2240B		%vreg67<def,dead> = CMPrr_r32 %vreg25, %vreg33, %STATUS<imp-def>; GPR32:%vreg67,%vreg25,%vreg33
2256B		%vreg83<def> = COPY %vreg27<kill>; GPR32:%vreg83,%vreg27
2272B		%vreg84<def> = COPY %vreg26<kill>; GPR32:%vreg84,%vreg26
2288B		%vreg85<def> = COPY %vreg25<kill>; GPR32:%vreg85,%vreg25
2304B		BCC <BB#4>, 8, %STATUS<imp-use>
2320B		BNONE32 <BB#11>, %STATUS<imp-use>
	    Successors according to CFG: BB#4(0x7c000000 / 0x80000000 = 96.88%) BB#11(0x04000000 / 0x80000000 = 3.12%)

2336B	BB#11: derived from LLVM BB %for.end78
	    Predecessors according to CFG: BB#10
2352B		%vreg29<def> = ADDrr_r32 %vreg3<kill>, %vreg1, %STATUS<imp-def,dead>; GPR32:%vreg29,%vreg3,%vreg1
2368B		%vreg28<def> = ADDri_r32 %vreg4<kill>, 1, %STATUS<imp-def,dead>; GPR32:%vreg28,%vreg4
2384B		%vreg68<def,dead> = CMPrr_r32 %vreg28, %vreg33, %STATUS<imp-def>; GPR32:%vreg68,%vreg28,%vreg33
2400B		%vreg81<def> = COPY %vreg29<kill>; GPR32:%vreg81,%vreg29
2416B		%vreg82<def> = COPY %vreg28<kill>; GPR32:%vreg82,%vreg28
2432B		BCC <BB#3>, 1, %STATUS<imp-use>
2448B		BNONE32 <BB#12>, %STATUS<imp-use>
	    Successors according to CFG: BB#12(0x04000000 / 0x80000000 = 3.12%) BB#3(0x7c000000 / 0x80000000 = 96.88%)

2464B	BB#12: derived from LLVM BB %for.end81
	    Predecessors according to CFG: BB#1 BB#11
2480B		%vreg77<def> = LDRi32_r32 <fi#1>, 0; mem:LD4[FixedStack1] GPR32:%vreg77
2496B		GID
2512B		%CONFIG<def> = MOVTS32_core %vreg77<kill>; GPR32:%vreg77
2528B		GIE %CONFIG<imp-use,kill>
2544B		RTS

# End machine code for function matmac.

Computing live-in reg-units in ABI blocks.
0B	BB#0 R0#0 R1#0 R2#0 R3#0
Created 4 new intervals.
********** INTERVALS **********
R0 [0B,288r:0)  0@0B-phi
R1 [0B,272r:0)  0@0B-phi
R2 [0B,256r:0)  0@0B-phi
R3 [0B,240r:0)  0@0B-phi
%vreg0 [384r,2464B:0)  0@384r
%vreg1 [368r,2464B:0)  0@368r
%vreg2 [416r,2464B:0)  0@416r
%vreg3 [512r,2352r:0)  0@512r
%vreg4 [496r,2368r:0)  0@496r
%vreg5 [624r,2336B:0)  0@624r
%vreg6 [736r,2192r:0)  0@736r
%vreg7 [720r,2208r:0)  0@720r
%vreg8 [704r,2224r:0)  0@704r
%vreg9 [992r,1760r:0)  0@992r
%vreg10 [976r,1776r:0)  0@976r
%vreg11 [1040r,1072r:0)  0@1040r
%vreg12 [1056r,1744B:0)  0@1056r
%vreg13 [1168r,1648r:0)  0@1168r
%vreg14 [1152r,1280r:0)  0@1152r
%vreg15 [1136r,1248r:0)  0@1136r
%vreg16 [1248r,1696r:0)  0@1248r
%vreg17 [1216r,1680r:0)  0@1216r
%vreg18 [1200r,1664r:0)  0@1200r
%vreg19 [1776r,1824r:0)  0@1776r
%vreg20 [1760r,1808r:0)  0@1760r
%vreg21 [1904r,2096r:0)  0@1904r
%vreg22 [1888r,1968r:0)  0@1888r
%vreg23 [1968r,2128r:0)  0@1968r
%vreg24 [1952r,2112r:0)  0@1952r
%vreg25 [2224r,2288r:0)  0@2224r
%vreg26 [2208r,2272r:0)  0@2208r
%vreg27 [2192r,2256r:0)  0@2192r
%vreg28 [2368r,2416r:0)  0@2368r
%vreg29 [2352r,2400r:0)  0@2352r
%vreg30 [288r,2464B:0)  0@288r
%vreg31 [272r,384r:0)  0@272r
%vreg32 [256r,448r:0)  0@256r
%vreg33 [240r,2464B:0)  0@240r
%vreg34 [304r,304d:0)  0@304r
%vreg35 [432r,2464B:0)  0@432r
%vreg36 [400r,2464B:0)  0@400r
%vreg38 [592r,608r:0)  0@592r
%vreg39 [608r,624r:0)  0@608r
%vreg42 [752r,768r:1)[768r,832r:0)  0@768r 1@752r
%vreg44 [1008r,1024r:0)  0@1008r
%vreg45 [1024r,1056r:0)  0@1024r
%vreg46 [1184r,1424r:0)  0@1184r
%vreg47 [1232r,1456r:0)  0@1232r
%vreg48 [1264r,1552r:0)  0@1264r
%vreg49 [1280r,1616r:0)  0@1280r
%vreg50 [1312r,1408r:0)  0@1312r
%vreg51 [1408r,1424r:0)[1424r,1472r:1)  0@1408r 1@1424r
%vreg52 [1328r,1440r:0)  0@1328r
%vreg53 [1440r,1456r:0)[1456r,1488r:1)  0@1440r 1@1456r
%vreg54 [1520r,1536r:0)  0@1520r
%vreg55 [1536r,1552r:0)[1552r,1568r:1)  0@1536r 1@1552r
%vreg56 [1584r,1600r:0)  0@1584r
%vreg57 [1600r,1616r:0)[1616r,1648r:1)  0@1600r 1@1616r
%vreg58 [1632r,1632d:0)  0@1632r
%vreg59 [1792r,1792d:0)  0@1792r
%vreg62 [1920r,1936r:0)  0@1920r
%vreg63 [1936r,2064r:0)  0@1936r
%vreg64 [1984r,2064r:0)  0@1984r
%vreg65 [2064r,2096r:0)  0@2064r
%vreg66 [2080r,2080d:0)  0@2080r
%vreg67 [2240r,2240d:0)  0@2240r
%vreg68 [2384r,2384d:0)  0@2384r
%vreg69 [112r,160r:0)  0@112r
%vreg70 [128r,144r:0)[144r,176r:1)  0@128r 1@144r
%vreg71 [32r,128r:0)  0@32r
%vreg72 [64r,80r:0)  0@64r
%vreg73 [80r,96r:0)[96r,112r:1)  0@80r 1@96r
%vreg74 [528r,560r:0)  0@528r
%vreg75 [1344r,1376r:0)  0@1344r
%vreg76 [2000r,2032r:0)  0@2000r
%vreg77 [2480r,2512r:0)  0@2480r
%vreg78 [160r,176r:1)[176r,192r:0)  0@176r 1@160r
%vreg79 [1296r,1328r:0)  0@1296r
%vreg80 [1472r,1488r:1)[1488r,1504r:0)  0@1488r 1@1472r
%vreg81 [448r,480B:0)[480B,512r:2)[2400r,2464B:1)  0@448r 1@2400r 2@480B-phi
%vreg82 [464r,480B:0)[480B,496r:2)[2416r,2464B:1)  0@464r 1@2416r 2@480B-phi
%vreg83 [640r,688B:0)[688B,736r:2)[2256r,2336B:1)  0@640r 1@2256r 2@688B-phi
%vreg84 [656r,688B:0)[688B,720r:2)[2272r,2336B:1)  0@656r 1@2272r 2@688B-phi
%vreg85 [672r,688B:0)[688B,704r:2)[2288r,2336B:1)  0@672r 1@2288r 2@688B-phi
%vreg86 [848r,896B:0)[960B,992r:2)[1808r,1872B:1)  0@848r 1@1808r 2@960B-phi
%vreg87 [864r,896B:0)[960B,976r:2)[1824r,1872B:1)  0@864r 1@1824r 2@960B-phi
%vreg88 [1072r,1120B:0)[1120B,1168r:2)[1664r,1744B:1)  0@1072r 1@1664r 2@1120B-phi
%vreg89 [1088r,1120B:0)[1120B,1152r:2)[1680r,1744B:1)  0@1088r 1@1680r 2@1120B-phi
%vreg90 [1104r,1120B:0)[1120B,1136r:2)[1696r,1744B:1)  0@1104r 1@1696r 2@1120B-phi
%vreg91 [912r,960B:0)[1872B,1904r:2)[2112r,2176B:1)  0@912r 1@2112r 2@1872B-phi
%vreg92 [928r,960B:0)[1872B,1888r:2)[2128r,2176B:1)  0@928r 1@2128r 2@1872B-phi
RegMasks:
********** MACHINEINSTRS **********
# Machine code for function matmac: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=32, align=8, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=4, align=8, at location [SP]
Function Live Ins: %R0 in %vreg30, %R1 in %vreg31, %R2 in %vreg32, %R3 in %vreg33

0B	BB#0: 
	    Live Ins: %R0 %R1 %R2 %R3
16B		GID %CONFIG<imp-def>
32B		%vreg71<def> = MOVFS32_core %CONFIG; GPR32:%vreg71
48B		STRi32_r32 %vreg71, <fi#1>, 0; mem:ST4[FixedStack1] GPR32:%vreg71
64B		%vreg72<def> = MOVi32ri 65535; GPR32:%vreg72
80B		%vreg73<def> = COPY %vreg72; GPR32:%vreg73,%vreg72
96B		%vreg73<def,tied1> = MOVTi32ri %vreg73<tied0>, 65521; GPR32:%vreg73
112B		%vreg69<def> = ANDrr_r32 %vreg71, %vreg73, %STATUS<imp-def>; GPR32:%vreg69,%vreg71,%vreg73
128B		%vreg70<def> = COPY %vreg71; GPR32:%vreg70,%vreg71
144B		%vreg70<def,tied1> = MOVTi32ri %vreg70<tied0>, 72; GPR32:%vreg70
160B		%vreg78:isub_lo<def,read-undef> = COPY %vreg69; GPR64:%vreg78 GPR32:%vreg69
176B		%vreg78:isub_hi<def> = COPY %vreg70; GPR64:%vreg78 GPR32:%vreg70
192B		STRi64 %vreg78, <fi#3>, 0; mem:ST4[FixedStack3] ST4[FixedStack2] GPR64:%vreg78
208B		GIE %CONFIG<imp-use,kill>
	    Successors according to CFG: BB#1(?%)

224B	BB#1: derived from LLVM BB %entry
	    Live Ins: %R0 %R1 %R2 %R3
	    Predecessors according to CFG: BB#0
240B		%vreg33<def> = COPY %R3; GPR32:%vreg33
256B		%vreg32<def> = COPY %R2; GPR32:%vreg32
272B		%vreg31<def> = COPY %R1; GPR32:%vreg31
288B		%vreg30<def> = COPY %R0; GPR32:%vreg30
304B		%vreg34<def,dead> = CMPri_r32 %vreg33, 1, %STATUS<imp-def>; GPR32:%vreg34,%vreg33
320B		BCC <BB#12>, 8, %STATUS<imp-use>
336B		BNONE32 <BB#2>, %STATUS<imp-use>
	    Successors according to CFG: BB#2(0x50000000 / 0x80000000 = 62.50%) BB#12(0x30000000 / 0x80000000 = 37.50%)

352B	BB#2: derived from LLVM BB %for.body3.lr.ph.preheader
	    Predecessors according to CFG: BB#1
368B		%vreg1<def> = LSL32ri %vreg33, 2, %STATUS<imp-def,dead>; GPR32:%vreg1,%vreg33
384B		%vreg0<def> = ADDri_r32 %vreg31, 8, %STATUS<imp-def,dead>; GPR32:%vreg0,%vreg31
400B		%vreg36<def> = MOViPTR <fi#0>, 0; GPR32:%vreg36
416B		%vreg2<def> = ADDri_r32 %vreg36, 8, %STATUS<imp-def,dead>; GPR32:%vreg2,%vreg36
432B		%vreg35<def> = MOVi32ri 0; GPR32:%vreg35
448B		%vreg81<def> = COPY %vreg32; GPR32:%vreg81,%vreg32
464B		%vreg82<def> = COPY %vreg35; GPR32:%vreg82,%vreg35
	    Successors according to CFG: BB#3(?%)

480B	BB#3: derived from LLVM BB %for.body3.lr.ph
	    Predecessors according to CFG: BB#2 BB#11
496B		%vreg4<def> = COPY %vreg82; GPR32:%vreg4,%vreg82
512B		%vreg3<def> = COPY %vreg81; GPR32:%vreg3,%vreg81
528B		%vreg74<def> = LDRi32_r32 <fi#3>, 0; mem:LD4[FixedStack3] GPR32:%vreg74
544B		GID %CONFIG<imp-def,dead>
560B		%CONFIG<def,dead> = MOVTS32_core %vreg74; GPR32:%vreg74
576B		GIE %CONFIG<imp-def,dead>
592B		%vreg38<def> = IMULrr_r32 %vreg4, %vreg33, %STATUS<imp-def,dead>; GPR32:%vreg38,%vreg4,%vreg33
608B		%vreg39<def> = LSL32ri %vreg38, 2, %STATUS<imp-def,dead>; GPR32:%vreg39,%vreg38
624B		%vreg5<def> = ADDrr_r32 %vreg30, %vreg39, %STATUS<imp-def,dead>; GPR32:%vreg5,%vreg30,%vreg39
640B		%vreg83<def> = COPY %vreg3; GPR32:%vreg83,%vreg3
656B		%vreg84<def> = COPY %vreg0; GPR32:%vreg84,%vreg0
672B		%vreg85<def> = COPY %vreg35; GPR32:%vreg85,%vreg35
	    Successors according to CFG: BB#4(?%)

688B	BB#4: derived from LLVM BB %for.body9.preheader
	    Predecessors according to CFG: BB#3 BB#10
704B		%vreg8<def> = COPY %vreg85; GPR32:%vreg8,%vreg85
720B		%vreg7<def> = COPY %vreg84; GPR32:%vreg7,%vreg84
736B		%vreg6<def> = COPY %vreg83; GPR32:%vreg6,%vreg83
752B		%vreg42:isub_hi<def,read-undef> = COPY %vreg35; FPR64_with_isub_hi_in_FPR32:%vreg42 GPR32:%vreg35
768B		%vreg42:isub_lo<def> = COPY %vreg35; FPR64_with_isub_hi_in_FPR32:%vreg42 GPR32:%vreg35
784B		STRi64 %vreg42, <fi#0>, 24; mem:ST8[%1+24] FPR64_with_isub_hi_in_FPR32:%vreg42
800B		STRi64 %vreg42, <fi#0>, 16; mem:ST8[%1+16] FPR64_with_isub_hi_in_FPR32:%vreg42
816B		STRi64 %vreg42, <fi#0>, 8; mem:ST8[%1+8] FPR64_with_isub_hi_in_FPR32:%vreg42
832B		STRi64 %vreg42, <fi#0>, 0; mem:ST8[%1] FPR64_with_isub_hi_in_FPR32:%vreg42
848B		%vreg86<def> = COPY %vreg7; GPR32:%vreg86,%vreg7
864B		%vreg87<def> = COPY %vreg35; GPR32:%vreg87,%vreg35
880B		BNONE32 <BB#6>, %STATUS<imp-use>
	    Successors according to CFG: BB#6(?%)

896B	BB#5: derived from LLVM BB %for.cond64.preheader
	    Predecessors according to CFG: BB#8
912B		%vreg91<def> = COPY %vreg6; GPR32:%vreg91,%vreg6
928B		%vreg92<def> = COPY %vreg35; GPR32:%vreg92,%vreg35
944B		BNONE32 <BB#9>, %STATUS<imp-use>
	    Successors according to CFG: BB#9(?%)

960B	BB#6: derived from LLVM BB %for.body9
	    Predecessors according to CFG: BB#4 BB#8
976B		%vreg10<def> = COPY %vreg87; GPR32:%vreg10,%vreg87
992B		%vreg9<def> = COPY %vreg86; GPR32:%vreg9,%vreg86
1008B		%vreg44<def> = LSL32ri %vreg10, 2, %STATUS<imp-def,dead>; GPR32:%vreg44,%vreg10
1024B		%vreg45<def> = ADDrr_r32 %vreg5, %vreg44, %STATUS<imp-def,dead>; GPR32:%vreg45,%vreg5,%vreg44
1040B		%vreg11<def> = COPY %vreg2; GPR32:%vreg11,%vreg2
1056B		%vreg12<def> = LDRf32 %vreg45, 0; mem:Volatile LD4[%add.ptr10](tbaa=!2) FPR32:%vreg12 GPR32:%vreg45
1072B		%vreg88<def> = COPY %vreg11; GPR32:%vreg88,%vreg11
1088B		%vreg89<def> = COPY %vreg9; GPR32:%vreg89,%vreg9
1104B		%vreg90<def> = COPY %vreg35; GPR32:%vreg90,%vreg35
	    Successors according to CFG: BB#7(?%)

1120B	BB#7: derived from LLVM BB %for.body13
	    Predecessors according to CFG: BB#6 BB#7
1136B		%vreg15<def> = COPY %vreg90; GPR32:%vreg15,%vreg90
1152B		%vreg14<def> = COPY %vreg89; GPR32:%vreg14,%vreg89
1168B		%vreg13<def> = COPY %vreg88; GPR32:%vreg13,%vreg88
1184B		%vreg46<def> = LDRf32 %vreg14, -8; mem:Volatile LD4[%scevgep8](tbaa=!2) FPR32:%vreg46 GPR32:%vreg14
1200B		%vreg18<def> = ADDri_r32 %vreg13, 16, %STATUS<imp-def,dead>; GPR32:%vreg18,%vreg13
1216B		%vreg17<def> = ADDri_r32 %vreg14, 16, %STATUS<imp-def,dead>; GPR32:%vreg17,%vreg14
1232B		%vreg47<def> = LDRf32 %vreg14, -4; mem:Volatile LD4[%scevgep9](tbaa=!2) FPR32:%vreg47 GPR32:%vreg14
1248B		%vreg16<def> = ADDri_r32 %vreg15, 4, %STATUS<imp-def,dead>; GPR32:%vreg16,%vreg15
1264B		%vreg48<def> = LDRf32 %vreg14, 0; mem:Volatile LD4[%lsr.iv5](tbaa=!2) FPR32:%vreg48 GPR32:%vreg14
1280B		%vreg49<def> = LDRf32 %vreg14, 4; mem:Volatile LD4[%scevgep7](tbaa=!2) FPR32:%vreg49 GPR32:%vreg14
1296B		%vreg79<def> = LDRf64 %vreg13, -8; mem:LD4[%scevgep17](tbaa=!2) LD4[%scevgep15](tbaa=!2) FPR64:%vreg79 GPR32:%vreg13
1312B		%vreg50<def> = COPY %vreg79:isub_hi; FPR32:%vreg50 FPR64:%vreg79
1328B		%vreg52<def> = COPY %vreg79:isub_lo; FPR32:%vreg52 FPR64:%vreg79
1344B		%vreg75<def> = LDRi32_r32 <fi#2>, 0; mem:LD4[FixedStack2] GPR32:%vreg75
1360B		GID %CONFIG<imp-def,dead>
1376B		%CONFIG<def,dead> = MOVTS32_core %vreg75; GPR32:%vreg75
1392B		GIE %CONFIG<imp-def,dead>
1408B		%vreg51<def> = COPY %vreg50; FPR32:%vreg51,%vreg50
1424B		%vreg51<def,tied1> = FMADDrr_r32 %vreg51<tied0>, %vreg12, %vreg46, %STATUS<imp-def,dead>; FPR32:%vreg51,%vreg12,%vreg46
1440B		%vreg53<def> = COPY %vreg52; FPR32:%vreg53,%vreg52
1456B		%vreg53<def,tied1> = FMADDrr_r32 %vreg53<tied0>, %vreg12, %vreg47, %STATUS<imp-def,dead>; FPR32:%vreg53,%vreg12,%vreg47
1472B		%vreg80:isub_lo<def,read-undef> = COPY %vreg51; FPR64:%vreg80 FPR32:%vreg51
1488B		%vreg80:isub_hi<def> = COPY %vreg53; FPR64:%vreg80 FPR32:%vreg53
1504B		STRf64 %vreg80, %vreg13, -8; mem:ST4[%scevgep17](tbaa=!2) ST4[%scevgep15](tbaa=!2) FPR64:%vreg80 GPR32:%vreg13
1520B		%vreg54<def> = LDRf32 %vreg13, 0; mem:LD4[%lsr.iv1214](tbaa=!2) FPR32:%vreg54 GPR32:%vreg13
1536B		%vreg55<def> = COPY %vreg54; FPR32:%vreg55,%vreg54
1552B		%vreg55<def,tied1> = FMADDrr_r32 %vreg55<tied0>, %vreg12, %vreg48, %STATUS<imp-def,dead>; FPR32:%vreg55,%vreg12,%vreg48
1568B		STRf32 %vreg55, %vreg13, 0; mem:ST4[%lsr.iv1214](tbaa=!2) FPR32:%vreg55 GPR32:%vreg13
1584B		%vreg56<def> = LDRf32 %vreg13, 4; mem:LD4[%scevgep16](tbaa=!2) FPR32:%vreg56 GPR32:%vreg13
1600B		%vreg57<def> = COPY %vreg56; FPR32:%vreg57,%vreg56
1616B		%vreg57<def,tied1> = FMADDrr_r32 %vreg57<tied0>, %vreg12, %vreg49, %STATUS<imp-def,dead>; FPR32:%vreg57,%vreg12,%vreg49
1632B		%vreg58<def,dead> = CMPri_r32 %vreg16, 8, %STATUS<imp-def>; GPR32:%vreg58,%vreg16
1648B		STRf32 %vreg57, %vreg13, 4; mem:ST4[%scevgep16](tbaa=!2) FPR32:%vreg57 GPR32:%vreg13
1664B		%vreg88<def> = COPY %vreg18; GPR32:%vreg88,%vreg18
1680B		%vreg89<def> = COPY %vreg17; GPR32:%vreg89,%vreg17
1696B		%vreg90<def> = COPY %vreg16; GPR32:%vreg90,%vreg16
1712B		BCC <BB#7>, 8, %STATUS<imp-use>
1728B		BNONE32 <BB#8>, %STATUS<imp-use>
	    Successors according to CFG: BB#7(0x7c000000 / 0x80000000 = 96.88%) BB#8(0x04000000 / 0x80000000 = 3.12%)

1744B	BB#8: derived from LLVM BB %for.end60
	    Predecessors according to CFG: BB#7
1760B		%vreg20<def> = ADDrr_r32 %vreg9, %vreg1, %STATUS<imp-def,dead>; GPR32:%vreg20,%vreg9,%vreg1
1776B		%vreg19<def> = ADDri_r32 %vreg10, 1, %STATUS<imp-def,dead>; GPR32:%vreg19,%vreg10
1792B		%vreg59<def,dead> = CMPrr_r32 %vreg19, %vreg33, %STATUS<imp-def>; GPR32:%vreg59,%vreg19,%vreg33
1808B		%vreg86<def> = COPY %vreg20; GPR32:%vreg86,%vreg20
1824B		%vreg87<def> = COPY %vreg19; GPR32:%vreg87,%vreg19
1840B		BCC <BB#5>, 0, %STATUS<imp-use>
1856B		BNONE32 <BB#6>, %STATUS<imp-use>
	    Successors according to CFG: BB#5(0x04000000 / 0x80000000 = 3.12%) BB#6(0x7c000000 / 0x80000000 = 96.88%)

1872B	BB#9: derived from LLVM BB %for.body66
	    Predecessors according to CFG: BB#5 BB#9
1888B		%vreg22<def> = COPY %vreg92; GPR32:%vreg22,%vreg92
1904B		%vreg21<def> = COPY %vreg91; GPR32:%vreg21,%vreg91
1920B		%vreg62<def> = ADDrr_r32 %vreg36, %vreg22, %STATUS<imp-def,dead>; GPR32:%vreg62,%vreg36,%vreg22
1936B		%vreg63<def> = LDRf32 %vreg62, 0; mem:LD4[%sunkaddr30](tbaa=!2) FPR32:%vreg63 GPR32:%vreg62
1952B		%vreg24<def> = ADDri_r32 %vreg21, 4, %STATUS<imp-def,dead>; GPR32:%vreg24,%vreg21
1968B		%vreg23<def> = ADDri_r32 %vreg22, 4, %STATUS<imp-def,dead>; GPR32:%vreg23,%vreg22
1984B		%vreg64<def> = LDRf32 %vreg21, 0; mem:Volatile LD4[%lsr.iv24](tbaa=!2) FPR32:%vreg64 GPR32:%vreg21
2000B		%vreg76<def> = LDRi32_r32 <fi#2>, 0; mem:LD4[FixedStack2] GPR32:%vreg76
2016B		GID %CONFIG<imp-def,dead>
2032B		%CONFIG<def,dead> = MOVTS32_core %vreg76; GPR32:%vreg76
2048B		GIE %CONFIG<imp-def,dead>
2064B		%vreg65<def> = FADDrr_r32 %vreg63, %vreg64, %STATUS<imp-def,dead>; FPR32:%vreg65,%vreg63,%vreg64
2080B		%vreg66<def,dead> = CMPri_r32 %vreg23, 32, %STATUS<imp-def>; GPR32:%vreg66,%vreg23
2096B		STRf32 %vreg65, %vreg21, 0; mem:Volatile ST4[%lsr.iv24](tbaa=!2) FPR32:%vreg65 GPR32:%vreg21
2112B		%vreg91<def> = COPY %vreg24; GPR32:%vreg91,%vreg24
2128B		%vreg92<def> = COPY %vreg23; GPR32:%vreg92,%vreg23
2144B		BCC <BB#9>, 1, %STATUS<imp-use>
2160B		BNONE32 <BB#10>, %STATUS<imp-use>
	    Successors according to CFG: BB#10(0x04000000 / 0x80000000 = 3.12%) BB#9(0x7c000000 / 0x80000000 = 96.88%)

2176B	BB#10: derived from LLVM BB %for.end75
	    Predecessors according to CFG: BB#9
2192B		%vreg27<def> = ADDri_r32 %vreg6, 32, %STATUS<imp-def,dead>; GPR32:%vreg27,%vreg6
2208B		%vreg26<def> = ADDri_r32 %vreg7, 32, %STATUS<imp-def,dead>; GPR32:%vreg26,%vreg7
2224B		%vreg25<def> = ADDri_r32 %vreg8, 8, %STATUS<imp-def,dead>; GPR32:%vreg25,%vreg8
2240B		%vreg67<def,dead> = CMPrr_r32 %vreg25, %vreg33, %STATUS<imp-def>; GPR32:%vreg67,%vreg25,%vreg33
2256B		%vreg83<def> = COPY %vreg27; GPR32:%vreg83,%vreg27
2272B		%vreg84<def> = COPY %vreg26; GPR32:%vreg84,%vreg26
2288B		%vreg85<def> = COPY %vreg25; GPR32:%vreg85,%vreg25
2304B		BCC <BB#4>, 8, %STATUS<imp-use>
2320B		BNONE32 <BB#11>, %STATUS<imp-use>
	    Successors according to CFG: BB#4(0x7c000000 / 0x80000000 = 96.88%) BB#11(0x04000000 / 0x80000000 = 3.12%)

2336B	BB#11: derived from LLVM BB %for.end78
	    Predecessors according to CFG: BB#10
2352B		%vreg29<def> = ADDrr_r32 %vreg3, %vreg1, %STATUS<imp-def,dead>; GPR32:%vreg29,%vreg3,%vreg1
2368B		%vreg28<def> = ADDri_r32 %vreg4, 1, %STATUS<imp-def,dead>; GPR32:%vreg28,%vreg4
2384B		%vreg68<def,dead> = CMPrr_r32 %vreg28, %vreg33, %STATUS<imp-def>; GPR32:%vreg68,%vreg28,%vreg33
2400B		%vreg81<def> = COPY %vreg29; GPR32:%vreg81,%vreg29
2416B		%vreg82<def> = COPY %vreg28; GPR32:%vreg82,%vreg28
2432B		BCC <BB#3>, 1, %STATUS<imp-use>
2448B		BNONE32 <BB#12>, %STATUS<imp-use>
	    Successors according to CFG: BB#12(0x04000000 / 0x80000000 = 3.12%) BB#3(0x7c000000 / 0x80000000 = 96.88%)

2464B	BB#12: derived from LLVM BB %for.end81
	    Predecessors according to CFG: BB#1 BB#11
2480B		%vreg77<def> = LDRi32_r32 <fi#1>, 0; mem:LD4[FixedStack1] GPR32:%vreg77
2496B		GID
2512B		%CONFIG<def> = MOVTS32_core %vreg77; GPR32:%vreg77
2528B		GIE %CONFIG<imp-use,kill>
2544B		RTS

# End machine code for function matmac.

# *** IR Dump After Live Interval Analysis ***:
# Machine code for function matmac: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=32, align=8, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=4, align=8, at location [SP]
Function Live Ins: %R0 in %vreg30, %R1 in %vreg31, %R2 in %vreg32, %R3 in %vreg33

0B	BB#0: 
	    Live Ins: %R0 %R1 %R2 %R3
16B		GID %CONFIG<imp-def>
32B		%vreg71<def> = MOVFS32_core %CONFIG; GPR32:%vreg71
48B		STRi32_r32 %vreg71, <fi#1>, 0; mem:ST4[FixedStack1] GPR32:%vreg71
64B		%vreg72<def> = MOVi32ri 65535; GPR32:%vreg72
80B		%vreg73<def> = COPY %vreg72; GPR32:%vreg73,%vreg72
96B		%vreg73<def,tied1> = MOVTi32ri %vreg73<tied0>, 65521; GPR32:%vreg73
112B		%vreg69<def> = ANDrr_r32 %vreg71, %vreg73, %STATUS<imp-def>; GPR32:%vreg69,%vreg71,%vreg73
128B		%vreg70<def> = COPY %vreg71; GPR32:%vreg70,%vreg71
144B		%vreg70<def,tied1> = MOVTi32ri %vreg70<tied0>, 72; GPR32:%vreg70
160B		%vreg78:isub_lo<def,read-undef> = COPY %vreg69; GPR64:%vreg78 GPR32:%vreg69
176B		%vreg78:isub_hi<def> = COPY %vreg70; GPR64:%vreg78 GPR32:%vreg70
192B		STRi64 %vreg78, <fi#3>, 0; mem:ST4[FixedStack3] ST4[FixedStack2] GPR64:%vreg78
208B		GIE %CONFIG<imp-use,kill>
	    Successors according to CFG: BB#1(?%)

224B	BB#1: derived from LLVM BB %entry
	    Live Ins: %R0 %R1 %R2 %R3
	    Predecessors according to CFG: BB#0
240B		%vreg33<def> = COPY %R3; GPR32:%vreg33
256B		%vreg32<def> = COPY %R2; GPR32:%vreg32
272B		%vreg31<def> = COPY %R1; GPR32:%vreg31
288B		%vreg30<def> = COPY %R0; GPR32:%vreg30
304B		%vreg34<def,dead> = CMPri_r32 %vreg33, 1, %STATUS<imp-def>; GPR32:%vreg34,%vreg33
320B		BCC <BB#12>, 8, %STATUS<imp-use>
336B		BNONE32 <BB#2>, %STATUS<imp-use>
	    Successors according to CFG: BB#2(0x50000000 / 0x80000000 = 62.50%) BB#12(0x30000000 / 0x80000000 = 37.50%)

352B	BB#2: derived from LLVM BB %for.body3.lr.ph.preheader
	    Predecessors according to CFG: BB#1
368B		%vreg1<def> = LSL32ri %vreg33, 2, %STATUS<imp-def,dead>; GPR32:%vreg1,%vreg33
384B		%vreg0<def> = ADDri_r32 %vreg31, 8, %STATUS<imp-def,dead>; GPR32:%vreg0,%vreg31
400B		%vreg36<def> = MOViPTR <fi#0>, 0; GPR32:%vreg36
416B		%vreg2<def> = ADDri_r32 %vreg36, 8, %STATUS<imp-def,dead>; GPR32:%vreg2,%vreg36
432B		%vreg35<def> = MOVi32ri 0; GPR32:%vreg35
448B		%vreg81<def> = COPY %vreg32; GPR32:%vreg81,%vreg32
464B		%vreg82<def> = COPY %vreg35; GPR32:%vreg82,%vreg35
	    Successors according to CFG: BB#3(?%)

480B	BB#3: derived from LLVM BB %for.body3.lr.ph
	    Predecessors according to CFG: BB#2 BB#11
496B		%vreg4<def> = COPY %vreg82; GPR32:%vreg4,%vreg82
512B		%vreg3<def> = COPY %vreg81; GPR32:%vreg3,%vreg81
528B		%vreg74<def> = LDRi32_r32 <fi#3>, 0; mem:LD4[FixedStack3] GPR32:%vreg74
544B		GID %CONFIG<imp-def,dead>
560B		%CONFIG<def,dead> = MOVTS32_core %vreg74; GPR32:%vreg74
576B		GIE %CONFIG<imp-def,dead>
592B		%vreg38<def> = IMULrr_r32 %vreg4, %vreg33, %STATUS<imp-def,dead>; GPR32:%vreg38,%vreg4,%vreg33
608B		%vreg39<def> = LSL32ri %vreg38, 2, %STATUS<imp-def,dead>; GPR32:%vreg39,%vreg38
624B		%vreg5<def> = ADDrr_r32 %vreg30, %vreg39, %STATUS<imp-def,dead>; GPR32:%vreg5,%vreg30,%vreg39
640B		%vreg83<def> = COPY %vreg3; GPR32:%vreg83,%vreg3
656B		%vreg84<def> = COPY %vreg0; GPR32:%vreg84,%vreg0
672B		%vreg85<def> = COPY %vreg35; GPR32:%vreg85,%vreg35
	    Successors according to CFG: BB#4(?%)

688B	BB#4: derived from LLVM BB %for.body9.preheader
	    Predecessors according to CFG: BB#3 BB#10
704B		%vreg8<def> = COPY %vreg85; GPR32:%vreg8,%vreg85
720B		%vreg7<def> = COPY %vreg84; GPR32:%vreg7,%vreg84
736B		%vreg6<def> = COPY %vreg83; GPR32:%vreg6,%vreg83
752B		%vreg42:isub_hi<def,read-undef> = COPY %vreg35; FPR64_with_isub_hi_in_FPR32:%vreg42 GPR32:%vreg35
768B		%vreg42:isub_lo<def> = COPY %vreg35; FPR64_with_isub_hi_in_FPR32:%vreg42 GPR32:%vreg35
784B		STRi64 %vreg42, <fi#0>, 24; mem:ST8[%1+24] FPR64_with_isub_hi_in_FPR32:%vreg42
800B		STRi64 %vreg42, <fi#0>, 16; mem:ST8[%1+16] FPR64_with_isub_hi_in_FPR32:%vreg42
816B		STRi64 %vreg42, <fi#0>, 8; mem:ST8[%1+8] FPR64_with_isub_hi_in_FPR32:%vreg42
832B		STRi64 %vreg42, <fi#0>, 0; mem:ST8[%1] FPR64_with_isub_hi_in_FPR32:%vreg42
848B		%vreg86<def> = COPY %vreg7; GPR32:%vreg86,%vreg7
864B		%vreg87<def> = COPY %vreg35; GPR32:%vreg87,%vreg35
880B		BNONE32 <BB#6>, %STATUS<imp-use>
	    Successors according to CFG: BB#6(?%)

896B	BB#5: derived from LLVM BB %for.cond64.preheader
	    Predecessors according to CFG: BB#8
912B		%vreg91<def> = COPY %vreg6; GPR32:%vreg91,%vreg6
928B		%vreg92<def> = COPY %vreg35; GPR32:%vreg92,%vreg35
944B		BNONE32 <BB#9>, %STATUS<imp-use>
	    Successors according to CFG: BB#9(?%)

960B	BB#6: derived from LLVM BB %for.body9
	    Predecessors according to CFG: BB#4 BB#8
976B		%vreg10<def> = COPY %vreg87; GPR32:%vreg10,%vreg87
992B		%vreg9<def> = COPY %vreg86; GPR32:%vreg9,%vreg86
1008B		%vreg44<def> = LSL32ri %vreg10, 2, %STATUS<imp-def,dead>; GPR32:%vreg44,%vreg10
1024B		%vreg45<def> = ADDrr_r32 %vreg5, %vreg44, %STATUS<imp-def,dead>; GPR32:%vreg45,%vreg5,%vreg44
1040B		%vreg11<def> = COPY %vreg2; GPR32:%vreg11,%vreg2
1056B		%vreg12<def> = LDRf32 %vreg45, 0; mem:Volatile LD4[%add.ptr10](tbaa=!2) FPR32:%vreg12 GPR32:%vreg45
1072B		%vreg88<def> = COPY %vreg11; GPR32:%vreg88,%vreg11
1088B		%vreg89<def> = COPY %vreg9; GPR32:%vreg89,%vreg9
1104B		%vreg90<def> = COPY %vreg35; GPR32:%vreg90,%vreg35
	    Successors according to CFG: BB#7(?%)

1120B	BB#7: derived from LLVM BB %for.body13
	    Predecessors according to CFG: BB#6 BB#7
1136B		%vreg15<def> = COPY %vreg90; GPR32:%vreg15,%vreg90
1152B		%vreg14<def> = COPY %vreg89; GPR32:%vreg14,%vreg89
1168B		%vreg13<def> = COPY %vreg88; GPR32:%vreg13,%vreg88
1184B		%vreg46<def> = LDRf32 %vreg14, -8; mem:Volatile LD4[%scevgep8](tbaa=!2) FPR32:%vreg46 GPR32:%vreg14
1200B		%vreg18<def> = ADDri_r32 %vreg13, 16, %STATUS<imp-def,dead>; GPR32:%vreg18,%vreg13
1216B		%vreg17<def> = ADDri_r32 %vreg14, 16, %STATUS<imp-def,dead>; GPR32:%vreg17,%vreg14
1232B		%vreg47<def> = LDRf32 %vreg14, -4; mem:Volatile LD4[%scevgep9](tbaa=!2) FPR32:%vreg47 GPR32:%vreg14
1248B		%vreg16<def> = ADDri_r32 %vreg15, 4, %STATUS<imp-def,dead>; GPR32:%vreg16,%vreg15
1264B		%vreg48<def> = LDRf32 %vreg14, 0; mem:Volatile LD4[%lsr.iv5](tbaa=!2) FPR32:%vreg48 GPR32:%vreg14
1280B		%vreg49<def> = LDRf32 %vreg14, 4; mem:Volatile LD4[%scevgep7](tbaa=!2) FPR32:%vreg49 GPR32:%vreg14
1296B		%vreg79<def> = LDRf64 %vreg13, -8; mem:LD4[%scevgep17](tbaa=!2) LD4[%scevgep15](tbaa=!2) FPR64:%vreg79 GPR32:%vreg13
1312B		%vreg50<def> = COPY %vreg79:isub_hi; FPR32:%vreg50 FPR64:%vreg79
1328B		%vreg52<def> = COPY %vreg79:isub_lo; FPR32:%vreg52 FPR64:%vreg79
1344B		%vreg75<def> = LDRi32_r32 <fi#2>, 0; mem:LD4[FixedStack2] GPR32:%vreg75
1360B		GID %CONFIG<imp-def,dead>
1376B		%CONFIG<def,dead> = MOVTS32_core %vreg75; GPR32:%vreg75
1392B		GIE %CONFIG<imp-def,dead>
1408B		%vreg51<def> = COPY %vreg50; FPR32:%vreg51,%vreg50
1424B		%vreg51<def,tied1> = FMADDrr_r32 %vreg51<tied0>, %vreg12, %vreg46, %STATUS<imp-def,dead>; FPR32:%vreg51,%vreg12,%vreg46
1440B		%vreg53<def> = COPY %vreg52; FPR32:%vreg53,%vreg52
1456B		%vreg53<def,tied1> = FMADDrr_r32 %vreg53<tied0>, %vreg12, %vreg47, %STATUS<imp-def,dead>; FPR32:%vreg53,%vreg12,%vreg47
1472B		%vreg80:isub_lo<def,read-undef> = COPY %vreg51; FPR64:%vreg80 FPR32:%vreg51
1488B		%vreg80:isub_hi<def> = COPY %vreg53; FPR64:%vreg80 FPR32:%vreg53
1504B		STRf64 %vreg80, %vreg13, -8; mem:ST4[%scevgep17](tbaa=!2) ST4[%scevgep15](tbaa=!2) FPR64:%vreg80 GPR32:%vreg13
1520B		%vreg54<def> = LDRf32 %vreg13, 0; mem:LD4[%lsr.iv1214](tbaa=!2) FPR32:%vreg54 GPR32:%vreg13
1536B		%vreg55<def> = COPY %vreg54; FPR32:%vreg55,%vreg54
1552B		%vreg55<def,tied1> = FMADDrr_r32 %vreg55<tied0>, %vreg12, %vreg48, %STATUS<imp-def,dead>; FPR32:%vreg55,%vreg12,%vreg48
1568B		STRf32 %vreg55, %vreg13, 0; mem:ST4[%lsr.iv1214](tbaa=!2) FPR32:%vreg55 GPR32:%vreg13
1584B		%vreg56<def> = LDRf32 %vreg13, 4; mem:LD4[%scevgep16](tbaa=!2) FPR32:%vreg56 GPR32:%vreg13
1600B		%vreg57<def> = COPY %vreg56; FPR32:%vreg57,%vreg56
1616B		%vreg57<def,tied1> = FMADDrr_r32 %vreg57<tied0>, %vreg12, %vreg49, %STATUS<imp-def,dead>; FPR32:%vreg57,%vreg12,%vreg49
1632B		%vreg58<def,dead> = CMPri_r32 %vreg16, 8, %STATUS<imp-def>; GPR32:%vreg58,%vreg16
1648B		STRf32 %vreg57, %vreg13, 4; mem:ST4[%scevgep16](tbaa=!2) FPR32:%vreg57 GPR32:%vreg13
1664B		%vreg88<def> = COPY %vreg18; GPR32:%vreg88,%vreg18
1680B		%vreg89<def> = COPY %vreg17; GPR32:%vreg89,%vreg17
1696B		%vreg90<def> = COPY %vreg16; GPR32:%vreg90,%vreg16
1712B		BCC <BB#7>, 8, %STATUS<imp-use>
1728B		BNONE32 <BB#8>, %STATUS<imp-use>
	    Successors according to CFG: BB#7(0x7c000000 / 0x80000000 = 96.88%) BB#8(0x04000000 / 0x80000000 = 3.12%)

1744B	BB#8: derived from LLVM BB %for.end60
	    Predecessors according to CFG: BB#7
1760B		%vreg20<def> = ADDrr_r32 %vreg9, %vreg1, %STATUS<imp-def,dead>; GPR32:%vreg20,%vreg9,%vreg1
1776B		%vreg19<def> = ADDri_r32 %vreg10, 1, %STATUS<imp-def,dead>; GPR32:%vreg19,%vreg10
1792B		%vreg59<def,dead> = CMPrr_r32 %vreg19, %vreg33, %STATUS<imp-def>; GPR32:%vreg59,%vreg19,%vreg33
1808B		%vreg86<def> = COPY %vreg20; GPR32:%vreg86,%vreg20
1824B		%vreg87<def> = COPY %vreg19; GPR32:%vreg87,%vreg19
1840B		BCC <BB#5>, 0, %STATUS<imp-use>
1856B		BNONE32 <BB#6>, %STATUS<imp-use>
	    Successors according to CFG: BB#5(0x04000000 / 0x80000000 = 3.12%) BB#6(0x7c000000 / 0x80000000 = 96.88%)

1872B	BB#9: derived from LLVM BB %for.body66
	    Predecessors according to CFG: BB#5 BB#9
1888B		%vreg22<def> = COPY %vreg92; GPR32:%vreg22,%vreg92
1904B		%vreg21<def> = COPY %vreg91; GPR32:%vreg21,%vreg91
1920B		%vreg62<def> = ADDrr_r32 %vreg36, %vreg22, %STATUS<imp-def,dead>; GPR32:%vreg62,%vreg36,%vreg22
1936B		%vreg63<def> = LDRf32 %vreg62, 0; mem:LD4[%sunkaddr30](tbaa=!2) FPR32:%vreg63 GPR32:%vreg62
1952B		%vreg24<def> = ADDri_r32 %vreg21, 4, %STATUS<imp-def,dead>; GPR32:%vreg24,%vreg21
1968B		%vreg23<def> = ADDri_r32 %vreg22, 4, %STATUS<imp-def,dead>; GPR32:%vreg23,%vreg22
1984B		%vreg64<def> = LDRf32 %vreg21, 0; mem:Volatile LD4[%lsr.iv24](tbaa=!2) FPR32:%vreg64 GPR32:%vreg21
2000B		%vreg76<def> = LDRi32_r32 <fi#2>, 0; mem:LD4[FixedStack2] GPR32:%vreg76
2016B		GID %CONFIG<imp-def,dead>
2032B		%CONFIG<def,dead> = MOVTS32_core %vreg76; GPR32:%vreg76
2048B		GIE %CONFIG<imp-def,dead>
2064B		%vreg65<def> = FADDrr_r32 %vreg63, %vreg64, %STATUS<imp-def,dead>; FPR32:%vreg65,%vreg63,%vreg64
2080B		%vreg66<def,dead> = CMPri_r32 %vreg23, 32, %STATUS<imp-def>; GPR32:%vreg66,%vreg23
2096B		STRf32 %vreg65, %vreg21, 0; mem:Volatile ST4[%lsr.iv24](tbaa=!2) FPR32:%vreg65 GPR32:%vreg21
2112B		%vreg91<def> = COPY %vreg24; GPR32:%vreg91,%vreg24
2128B		%vreg92<def> = COPY %vreg23; GPR32:%vreg92,%vreg23
2144B		BCC <BB#9>, 1, %STATUS<imp-use>
2160B		BNONE32 <BB#10>, %STATUS<imp-use>
	    Successors according to CFG: BB#10(0x04000000 / 0x80000000 = 3.12%) BB#9(0x7c000000 / 0x80000000 = 96.88%)

2176B	BB#10: derived from LLVM BB %for.end75
	    Predecessors according to CFG: BB#9
2192B		%vreg27<def> = ADDri_r32 %vreg6, 32, %STATUS<imp-def,dead>; GPR32:%vreg27,%vreg6
2208B		%vreg26<def> = ADDri_r32 %vreg7, 32, %STATUS<imp-def,dead>; GPR32:%vreg26,%vreg7
2224B		%vreg25<def> = ADDri_r32 %vreg8, 8, %STATUS<imp-def,dead>; GPR32:%vreg25,%vreg8
2240B		%vreg67<def,dead> = CMPrr_r32 %vreg25, %vreg33, %STATUS<imp-def>; GPR32:%vreg67,%vreg25,%vreg33
2256B		%vreg83<def> = COPY %vreg27; GPR32:%vreg83,%vreg27
2272B		%vreg84<def> = COPY %vreg26; GPR32:%vreg84,%vreg26
2288B		%vreg85<def> = COPY %vreg25; GPR32:%vreg85,%vreg25
2304B		BCC <BB#4>, 8, %STATUS<imp-use>
2320B		BNONE32 <BB#11>, %STATUS<imp-use>
	    Successors according to CFG: BB#4(0x7c000000 / 0x80000000 = 96.88%) BB#11(0x04000000 / 0x80000000 = 3.12%)

2336B	BB#11: derived from LLVM BB %for.end78
	    Predecessors according to CFG: BB#10
2352B		%vreg29<def> = ADDrr_r32 %vreg3, %vreg1, %STATUS<imp-def,dead>; GPR32:%vreg29,%vreg3,%vreg1
2368B		%vreg28<def> = ADDri_r32 %vreg4, 1, %STATUS<imp-def,dead>; GPR32:%vreg28,%vreg4
2384B		%vreg68<def,dead> = CMPrr_r32 %vreg28, %vreg33, %STATUS<imp-def>; GPR32:%vreg68,%vreg28,%vreg33
2400B		%vreg81<def> = COPY %vreg29; GPR32:%vreg81,%vreg29
2416B		%vreg82<def> = COPY %vreg28; GPR32:%vreg82,%vreg28
2432B		BCC <BB#3>, 1, %STATUS<imp-use>
2448B		BNONE32 <BB#12>, %STATUS<imp-use>
	    Successors according to CFG: BB#12(0x04000000 / 0x80000000 = 3.12%) BB#3(0x7c000000 / 0x80000000 = 96.88%)

2464B	BB#12: derived from LLVM BB %for.end81
	    Predecessors according to CFG: BB#1 BB#11
2480B		%vreg77<def> = LDRi32_r32 <fi#1>, 0; mem:LD4[FixedStack1] GPR32:%vreg77
2496B		GID
2512B		%CONFIG<def> = MOVTS32_core %vreg77; GPR32:%vreg77
2528B		GIE %CONFIG<imp-use,kill>
2544B		RTS

# End machine code for function matmac.

# *** IR Dump Before Simple Register Coalescing ***:
# Machine code for function matmac: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=32, align=8, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=4, align=8, at location [SP]
Function Live Ins: %R0 in %vreg30, %R1 in %vreg31, %R2 in %vreg32, %R3 in %vreg33

0B	BB#0: 
	    Live Ins: %R0 %R1 %R2 %R3
16B		GID %CONFIG<imp-def>
32B		%vreg71<def> = MOVFS32_core %CONFIG; GPR32:%vreg71
48B		STRi32_r32 %vreg71, <fi#1>, 0; mem:ST4[FixedStack1] GPR32:%vreg71
64B		%vreg72<def> = MOVi32ri 65535; GPR32:%vreg72
80B		%vreg73<def> = COPY %vreg72; GPR32:%vreg73,%vreg72
96B		%vreg73<def,tied1> = MOVTi32ri %vreg73<tied0>, 65521; GPR32:%vreg73
112B		%vreg69<def> = ANDrr_r32 %vreg71, %vreg73, %STATUS<imp-def>; GPR32:%vreg69,%vreg71,%vreg73
128B		%vreg70<def> = COPY %vreg71; GPR32:%vreg70,%vreg71
144B		%vreg70<def,tied1> = MOVTi32ri %vreg70<tied0>, 72; GPR32:%vreg70
160B		%vreg78:isub_lo<def,read-undef> = COPY %vreg69; GPR64:%vreg78 GPR32:%vreg69
176B		%vreg78:isub_hi<def> = COPY %vreg70; GPR64:%vreg78 GPR32:%vreg70
192B		STRi64 %vreg78, <fi#3>, 0; mem:ST4[FixedStack3] ST4[FixedStack2] GPR64:%vreg78
208B		GIE %CONFIG<imp-use,kill>
	    Successors according to CFG: BB#1(?%)

224B	BB#1: derived from LLVM BB %entry
	    Live Ins: %R0 %R1 %R2 %R3
	    Predecessors according to CFG: BB#0
240B		%vreg33<def> = COPY %R3; GPR32:%vreg33
256B		%vreg32<def> = COPY %R2; GPR32:%vreg32
272B		%vreg31<def> = COPY %R1; GPR32:%vreg31
288B		%vreg30<def> = COPY %R0; GPR32:%vreg30
304B		%vreg34<def,dead> = CMPri_r32 %vreg33, 1, %STATUS<imp-def>; GPR32:%vreg34,%vreg33
320B		BCC <BB#12>, 8, %STATUS<imp-use>
336B		BNONE32 <BB#2>, %STATUS<imp-use>
	    Successors according to CFG: BB#2(0x50000000 / 0x80000000 = 62.50%) BB#12(0x30000000 / 0x80000000 = 37.50%)

352B	BB#2: derived from LLVM BB %for.body3.lr.ph.preheader
	    Predecessors according to CFG: BB#1
368B		%vreg1<def> = LSL32ri %vreg33, 2, %STATUS<imp-def,dead>; GPR32:%vreg1,%vreg33
384B		%vreg0<def> = ADDri_r32 %vreg31, 8, %STATUS<imp-def,dead>; GPR32:%vreg0,%vreg31
400B		%vreg36<def> = MOViPTR <fi#0>, 0; GPR32:%vreg36
416B		%vreg2<def> = ADDri_r32 %vreg36, 8, %STATUS<imp-def,dead>; GPR32:%vreg2,%vreg36
432B		%vreg35<def> = MOVi32ri 0; GPR32:%vreg35
448B		%vreg81<def> = COPY %vreg32; GPR32:%vreg81,%vreg32
464B		%vreg82<def> = COPY %vreg35; GPR32:%vreg82,%vreg35
	    Successors according to CFG: BB#3(?%)

480B	BB#3: derived from LLVM BB %for.body3.lr.ph
	    Predecessors according to CFG: BB#2 BB#11
496B		%vreg4<def> = COPY %vreg82; GPR32:%vreg4,%vreg82
512B		%vreg3<def> = COPY %vreg81; GPR32:%vreg3,%vreg81
528B		%vreg74<def> = LDRi32_r32 <fi#3>, 0; mem:LD4[FixedStack3] GPR32:%vreg74
544B		GID %CONFIG<imp-def,dead>
560B		%CONFIG<def,dead> = MOVTS32_core %vreg74; GPR32:%vreg74
576B		GIE %CONFIG<imp-def,dead>
592B		%vreg38<def> = IMULrr_r32 %vreg4, %vreg33, %STATUS<imp-def,dead>; GPR32:%vreg38,%vreg4,%vreg33
608B		%vreg39<def> = LSL32ri %vreg38, 2, %STATUS<imp-def,dead>; GPR32:%vreg39,%vreg38
624B		%vreg5<def> = ADDrr_r32 %vreg30, %vreg39, %STATUS<imp-def,dead>; GPR32:%vreg5,%vreg30,%vreg39
640B		%vreg83<def> = COPY %vreg3; GPR32:%vreg83,%vreg3
656B		%vreg84<def> = COPY %vreg0; GPR32:%vreg84,%vreg0
672B		%vreg85<def> = COPY %vreg35; GPR32:%vreg85,%vreg35
	    Successors according to CFG: BB#4(?%)

688B	BB#4: derived from LLVM BB %for.body9.preheader
	    Predecessors according to CFG: BB#3 BB#10
704B		%vreg8<def> = COPY %vreg85; GPR32:%vreg8,%vreg85
720B		%vreg7<def> = COPY %vreg84; GPR32:%vreg7,%vreg84
736B		%vreg6<def> = COPY %vreg83; GPR32:%vreg6,%vreg83
752B		%vreg42:isub_hi<def,read-undef> = COPY %vreg35; FPR64_with_isub_hi_in_FPR32:%vreg42 GPR32:%vreg35
768B		%vreg42:isub_lo<def> = COPY %vreg35; FPR64_with_isub_hi_in_FPR32:%vreg42 GPR32:%vreg35
784B		STRi64 %vreg42, <fi#0>, 24; mem:ST8[%1+24] FPR64_with_isub_hi_in_FPR32:%vreg42
800B		STRi64 %vreg42, <fi#0>, 16; mem:ST8[%1+16] FPR64_with_isub_hi_in_FPR32:%vreg42
816B		STRi64 %vreg42, <fi#0>, 8; mem:ST8[%1+8] FPR64_with_isub_hi_in_FPR32:%vreg42
832B		STRi64 %vreg42, <fi#0>, 0; mem:ST8[%1] FPR64_with_isub_hi_in_FPR32:%vreg42
848B		%vreg86<def> = COPY %vreg7; GPR32:%vreg86,%vreg7
864B		%vreg87<def> = COPY %vreg35; GPR32:%vreg87,%vreg35
880B		BNONE32 <BB#6>, %STATUS<imp-use>
	    Successors according to CFG: BB#6(?%)

896B	BB#5: derived from LLVM BB %for.cond64.preheader
	    Predecessors according to CFG: BB#8
912B		%vreg91<def> = COPY %vreg6; GPR32:%vreg91,%vreg6
928B		%vreg92<def> = COPY %vreg35; GPR32:%vreg92,%vreg35
944B		BNONE32 <BB#9>, %STATUS<imp-use>
	    Successors according to CFG: BB#9(?%)

960B	BB#6: derived from LLVM BB %for.body9
	    Predecessors according to CFG: BB#4 BB#8
976B		%vreg10<def> = COPY %vreg87; GPR32:%vreg10,%vreg87
992B		%vreg9<def> = COPY %vreg86; GPR32:%vreg9,%vreg86
1008B		%vreg44<def> = LSL32ri %vreg10, 2, %STATUS<imp-def,dead>; GPR32:%vreg44,%vreg10
1024B		%vreg45<def> = ADDrr_r32 %vreg5, %vreg44, %STATUS<imp-def,dead>; GPR32:%vreg45,%vreg5,%vreg44
1040B		%vreg11<def> = COPY %vreg2; GPR32:%vreg11,%vreg2
1056B		%vreg12<def> = LDRf32 %vreg45, 0; mem:Volatile LD4[%add.ptr10](tbaa=!2) FPR32:%vreg12 GPR32:%vreg45
1072B		%vreg88<def> = COPY %vreg11; GPR32:%vreg88,%vreg11
1088B		%vreg89<def> = COPY %vreg9; GPR32:%vreg89,%vreg9
1104B		%vreg90<def> = COPY %vreg35; GPR32:%vreg90,%vreg35
	    Successors according to CFG: BB#7(?%)

1120B	BB#7: derived from LLVM BB %for.body13
	    Predecessors according to CFG: BB#6 BB#7
1136B		%vreg15<def> = COPY %vreg90; GPR32:%vreg15,%vreg90
1152B		%vreg14<def> = COPY %vreg89; GPR32:%vreg14,%vreg89
1168B		%vreg13<def> = COPY %vreg88; GPR32:%vreg13,%vreg88
1184B		%vreg46<def> = LDRf32 %vreg14, -8; mem:Volatile LD4[%scevgep8](tbaa=!2) FPR32:%vreg46 GPR32:%vreg14
1200B		%vreg18<def> = ADDri_r32 %vreg13, 16, %STATUS<imp-def,dead>; GPR32:%vreg18,%vreg13
1216B		%vreg17<def> = ADDri_r32 %vreg14, 16, %STATUS<imp-def,dead>; GPR32:%vreg17,%vreg14
1232B		%vreg47<def> = LDRf32 %vreg14, -4; mem:Volatile LD4[%scevgep9](tbaa=!2) FPR32:%vreg47 GPR32:%vreg14
1248B		%vreg16<def> = ADDri_r32 %vreg15, 4, %STATUS<imp-def,dead>; GPR32:%vreg16,%vreg15
1264B		%vreg48<def> = LDRf32 %vreg14, 0; mem:Volatile LD4[%lsr.iv5](tbaa=!2) FPR32:%vreg48 GPR32:%vreg14
1280B		%vreg49<def> = LDRf32 %vreg14, 4; mem:Volatile LD4[%scevgep7](tbaa=!2) FPR32:%vreg49 GPR32:%vreg14
1296B		%vreg79<def> = LDRf64 %vreg13, -8; mem:LD4[%scevgep17](tbaa=!2) LD4[%scevgep15](tbaa=!2) FPR64:%vreg79 GPR32:%vreg13
1312B		%vreg50<def> = COPY %vreg79:isub_hi; FPR32:%vreg50 FPR64:%vreg79
1328B		%vreg52<def> = COPY %vreg79:isub_lo; FPR32:%vreg52 FPR64:%vreg79
1344B		%vreg75<def> = LDRi32_r32 <fi#2>, 0; mem:LD4[FixedStack2] GPR32:%vreg75
1360B		GID %CONFIG<imp-def,dead>
1376B		%CONFIG<def,dead> = MOVTS32_core %vreg75; GPR32:%vreg75
1392B		GIE %CONFIG<imp-def,dead>
1408B		%vreg51<def> = COPY %vreg50; FPR32:%vreg51,%vreg50
1424B		%vreg51<def,tied1> = FMADDrr_r32 %vreg51<tied0>, %vreg12, %vreg46, %STATUS<imp-def,dead>; FPR32:%vreg51,%vreg12,%vreg46
1440B		%vreg53<def> = COPY %vreg52; FPR32:%vreg53,%vreg52
1456B		%vreg53<def,tied1> = FMADDrr_r32 %vreg53<tied0>, %vreg12, %vreg47, %STATUS<imp-def,dead>; FPR32:%vreg53,%vreg12,%vreg47
1472B		%vreg80:isub_lo<def,read-undef> = COPY %vreg51; FPR64:%vreg80 FPR32:%vreg51
1488B		%vreg80:isub_hi<def> = COPY %vreg53; FPR64:%vreg80 FPR32:%vreg53
1504B		STRf64 %vreg80, %vreg13, -8; mem:ST4[%scevgep17](tbaa=!2) ST4[%scevgep15](tbaa=!2) FPR64:%vreg80 GPR32:%vreg13
1520B		%vreg54<def> = LDRf32 %vreg13, 0; mem:LD4[%lsr.iv1214](tbaa=!2) FPR32:%vreg54 GPR32:%vreg13
1536B		%vreg55<def> = COPY %vreg54; FPR32:%vreg55,%vreg54
1552B		%vreg55<def,tied1> = FMADDrr_r32 %vreg55<tied0>, %vreg12, %vreg48, %STATUS<imp-def,dead>; FPR32:%vreg55,%vreg12,%vreg48
1568B		STRf32 %vreg55, %vreg13, 0; mem:ST4[%lsr.iv1214](tbaa=!2) FPR32:%vreg55 GPR32:%vreg13
1584B		%vreg56<def> = LDRf32 %vreg13, 4; mem:LD4[%scevgep16](tbaa=!2) FPR32:%vreg56 GPR32:%vreg13
1600B		%vreg57<def> = COPY %vreg56; FPR32:%vreg57,%vreg56
1616B		%vreg57<def,tied1> = FMADDrr_r32 %vreg57<tied0>, %vreg12, %vreg49, %STATUS<imp-def,dead>; FPR32:%vreg57,%vreg12,%vreg49
1632B		%vreg58<def,dead> = CMPri_r32 %vreg16, 8, %STATUS<imp-def>; GPR32:%vreg58,%vreg16
1648B		STRf32 %vreg57, %vreg13, 4; mem:ST4[%scevgep16](tbaa=!2) FPR32:%vreg57 GPR32:%vreg13
1664B		%vreg88<def> = COPY %vreg18; GPR32:%vreg88,%vreg18
1680B		%vreg89<def> = COPY %vreg17; GPR32:%vreg89,%vreg17
1696B		%vreg90<def> = COPY %vreg16; GPR32:%vreg90,%vreg16
1712B		BCC <BB#7>, 8, %STATUS<imp-use>
1728B		BNONE32 <BB#8>, %STATUS<imp-use>
	    Successors according to CFG: BB#7(0x7c000000 / 0x80000000 = 96.88%) BB#8(0x04000000 / 0x80000000 = 3.12%)

1744B	BB#8: derived from LLVM BB %for.end60
	    Predecessors according to CFG: BB#7
1760B		%vreg20<def> = ADDrr_r32 %vreg9, %vreg1, %STATUS<imp-def,dead>; GPR32:%vreg20,%vreg9,%vreg1
1776B		%vreg19<def> = ADDri_r32 %vreg10, 1, %STATUS<imp-def,dead>; GPR32:%vreg19,%vreg10
1792B		%vreg59<def,dead> = CMPrr_r32 %vreg19, %vreg33, %STATUS<imp-def>; GPR32:%vreg59,%vreg19,%vreg33
1808B		%vreg86<def> = COPY %vreg20; GPR32:%vreg86,%vreg20
1824B		%vreg87<def> = COPY %vreg19; GPR32:%vreg87,%vreg19
1840B		BCC <BB#5>, 0, %STATUS<imp-use>
1856B		BNONE32 <BB#6>, %STATUS<imp-use>
	    Successors according to CFG: BB#5(0x04000000 / 0x80000000 = 3.12%) BB#6(0x7c000000 / 0x80000000 = 96.88%)

1872B	BB#9: derived from LLVM BB %for.body66
	    Predecessors according to CFG: BB#5 BB#9
1888B		%vreg22<def> = COPY %vreg92; GPR32:%vreg22,%vreg92
1904B		%vreg21<def> = COPY %vreg91; GPR32:%vreg21,%vreg91
1920B		%vreg62<def> = ADDrr_r32 %vreg36, %vreg22, %STATUS<imp-def,dead>; GPR32:%vreg62,%vreg36,%vreg22
1936B		%vreg63<def> = LDRf32 %vreg62, 0; mem:LD4[%sunkaddr30](tbaa=!2) FPR32:%vreg63 GPR32:%vreg62
1952B		%vreg24<def> = ADDri_r32 %vreg21, 4, %STATUS<imp-def,dead>; GPR32:%vreg24,%vreg21
1968B		%vreg23<def> = ADDri_r32 %vreg22, 4, %STATUS<imp-def,dead>; GPR32:%vreg23,%vreg22
1984B		%vreg64<def> = LDRf32 %vreg21, 0; mem:Volatile LD4[%lsr.iv24](tbaa=!2) FPR32:%vreg64 GPR32:%vreg21
2000B		%vreg76<def> = LDRi32_r32 <fi#2>, 0; mem:LD4[FixedStack2] GPR32:%vreg76
2016B		GID %CONFIG<imp-def,dead>
2032B		%CONFIG<def,dead> = MOVTS32_core %vreg76; GPR32:%vreg76
2048B		GIE %CONFIG<imp-def,dead>
2064B		%vreg65<def> = FADDrr_r32 %vreg63, %vreg64, %STATUS<imp-def,dead>; FPR32:%vreg65,%vreg63,%vreg64
2080B		%vreg66<def,dead> = CMPri_r32 %vreg23, 32, %STATUS<imp-def>; GPR32:%vreg66,%vreg23
2096B		STRf32 %vreg65, %vreg21, 0; mem:Volatile ST4[%lsr.iv24](tbaa=!2) FPR32:%vreg65 GPR32:%vreg21
2112B		%vreg91<def> = COPY %vreg24; GPR32:%vreg91,%vreg24
2128B		%vreg92<def> = COPY %vreg23; GPR32:%vreg92,%vreg23
2144B		BCC <BB#9>, 1, %STATUS<imp-use>
2160B		BNONE32 <BB#10>, %STATUS<imp-use>
	    Successors according to CFG: BB#10(0x04000000 / 0x80000000 = 3.12%) BB#9(0x7c000000 / 0x80000000 = 96.88%)

2176B	BB#10: derived from LLVM BB %for.end75
	    Predecessors according to CFG: BB#9
2192B		%vreg27<def> = ADDri_r32 %vreg6, 32, %STATUS<imp-def,dead>; GPR32:%vreg27,%vreg6
2208B		%vreg26<def> = ADDri_r32 %vreg7, 32, %STATUS<imp-def,dead>; GPR32:%vreg26,%vreg7
2224B		%vreg25<def> = ADDri_r32 %vreg8, 8, %STATUS<imp-def,dead>; GPR32:%vreg25,%vreg8
2240B		%vreg67<def,dead> = CMPrr_r32 %vreg25, %vreg33, %STATUS<imp-def>; GPR32:%vreg67,%vreg25,%vreg33
2256B		%vreg83<def> = COPY %vreg27; GPR32:%vreg83,%vreg27
2272B		%vreg84<def> = COPY %vreg26; GPR32:%vreg84,%vreg26
2288B		%vreg85<def> = COPY %vreg25; GPR32:%vreg85,%vreg25
2304B		BCC <BB#4>, 8, %STATUS<imp-use>
2320B		BNONE32 <BB#11>, %STATUS<imp-use>
	    Successors according to CFG: BB#4(0x7c000000 / 0x80000000 = 96.88%) BB#11(0x04000000 / 0x80000000 = 3.12%)

2336B	BB#11: derived from LLVM BB %for.end78
	    Predecessors according to CFG: BB#10
2352B		%vreg29<def> = ADDrr_r32 %vreg3, %vreg1, %STATUS<imp-def,dead>; GPR32:%vreg29,%vreg3,%vreg1
2368B		%vreg28<def> = ADDri_r32 %vreg4, 1, %STATUS<imp-def,dead>; GPR32:%vreg28,%vreg4
2384B		%vreg68<def,dead> = CMPrr_r32 %vreg28, %vreg33, %STATUS<imp-def>; GPR32:%vreg68,%vreg28,%vreg33
2400B		%vreg81<def> = COPY %vreg29; GPR32:%vreg81,%vreg29
2416B		%vreg82<def> = COPY %vreg28; GPR32:%vreg82,%vreg28
2432B		BCC <BB#3>, 1, %STATUS<imp-use>
2448B		BNONE32 <BB#12>, %STATUS<imp-use>
	    Successors according to CFG: BB#12(0x04000000 / 0x80000000 = 3.12%) BB#3(0x7c000000 / 0x80000000 = 96.88%)

2464B	BB#12: derived from LLVM BB %for.end81
	    Predecessors according to CFG: BB#1 BB#11
2480B		%vreg77<def> = LDRi32_r32 <fi#1>, 0; mem:LD4[FixedStack1] GPR32:%vreg77
2496B		GID
2512B		%CONFIG<def> = MOVTS32_core %vreg77; GPR32:%vreg77
2528B		GIE %CONFIG<imp-use,kill>
2544B		RTS

# End machine code for function matmac.

********** SIMPLE REGISTER COALESCING **********
********** Function: matmac
********** JOINING INTERVALS ***********
for.body13:
1136B	%vreg15<def> = COPY %vreg90; GPR32:%vreg15,%vreg90
	Considering merging to GPR32 with %vreg15 in %vreg90
		RHS = %vreg15 [1136r,1248r:0)  0@1136r
		LHS = %vreg90 [1104r,1120B:0)[1120B,1136r:2)[1696r,1744B:1)  0@1104r 1@1696r 2@1120B-phi
		merge %vreg15:0@1136r into %vreg90:2@1120B --> @1120B
		erased:	1136r	%vreg15<def> = COPY %vreg90; GPR32:%vreg15,%vreg90
		updated: 1248B	%vreg16<def> = ADDri_r32 %vreg90, 4, %STATUS<imp-def,dead>; GPR32:%vreg16,%vreg90
	Success: %vreg15 -> %vreg90
	Result = %vreg90 [1104r,1120B:0)[1120B,1248r:2)[1696r,1744B:1)  0@1104r 1@1696r 2@1120B-phi
1152B	%vreg14<def> = COPY %vreg89; GPR32:%vreg14,%vreg89
	Considering merging to GPR32 with %vreg14 in %vreg89
		RHS = %vreg14 [1152r,1280r:0)  0@1152r
		LHS = %vreg89 [1088r,1120B:0)[1120B,1152r:2)[1680r,1744B:1)  0@1088r 1@1680r 2@1120B-phi
		merge %vreg14:0@1152r into %vreg89:2@1120B --> @1120B
		erased:	1152r	%vreg14<def> = COPY %vreg89; GPR32:%vreg14,%vreg89
		updated: 1184B	%vreg46<def> = LDRf32 %vreg89, -8; mem:Volatile LD4[%scevgep8](tbaa=!2) FPR32:%vreg46 GPR32:%vreg89
		updated: 1216B	%vreg17<def> = ADDri_r32 %vreg89, 16, %STATUS<imp-def,dead>; GPR32:%vreg17,%vreg89
		updated: 1232B	%vreg47<def> = LDRf32 %vreg89, -4; mem:Volatile LD4[%scevgep9](tbaa=!2) FPR32:%vreg47 GPR32:%vreg89
		updated: 1264B	%vreg48<def> = LDRf32 %vreg89, 0; mem:Volatile LD4[%lsr.iv5](tbaa=!2) FPR32:%vreg48 GPR32:%vreg89
		updated: 1280B	%vreg49<def> = LDRf32 %vreg89, 4; mem:Volatile LD4[%scevgep7](tbaa=!2) FPR32:%vreg49 GPR32:%vreg89
	Success: %vreg14 -> %vreg89
	Result = %vreg89 [1088r,1120B:0)[1120B,1280r:2)[1680r,1744B:1)  0@1088r 1@1680r 2@1120B-phi
1168B	%vreg13<def> = COPY %vreg88; GPR32:%vreg13,%vreg88
	Considering merging to GPR32 with %vreg13 in %vreg88
		RHS = %vreg13 [1168r,1648r:0)  0@1168r
		LHS = %vreg88 [1072r,1120B:0)[1120B,1168r:2)[1664r,1744B:1)  0@1072r 1@1664r 2@1120B-phi
		merge %vreg13:0@1168r into %vreg88:2@1120B --> @1120B
		erased:	1168r	%vreg13<def> = COPY %vreg88; GPR32:%vreg13,%vreg88
		updated: 1200B	%vreg18<def> = ADDri_r32 %vreg88, 16, %STATUS<imp-def,dead>; GPR32:%vreg18,%vreg88
		updated: 1520B	%vreg54<def> = LDRf32 %vreg88, 0; mem:LD4[%lsr.iv1214](tbaa=!2) FPR32:%vreg54 GPR32:%vreg88
		updated: 1568B	STRf32 %vreg55, %vreg88, 0; mem:ST4[%lsr.iv1214](tbaa=!2) FPR32:%vreg55 GPR32:%vreg88
		updated: 1584B	%vreg56<def> = LDRf32 %vreg88, 4; mem:LD4[%scevgep16](tbaa=!2) FPR32:%vreg56 GPR32:%vreg88
		updated: 1648B	STRf32 %vreg57, %vreg88, 4; mem:ST4[%scevgep16](tbaa=!2) FPR32:%vreg57 GPR32:%vreg88
		updated: 1296B	%vreg79<def> = LDRf64 %vreg88, -8; mem:LD4[%scevgep17](tbaa=!2) LD4[%scevgep15](tbaa=!2) FPR64:%vreg79 GPR32:%vreg88
		updated: 1504B	STRf64 %vreg80, %vreg88, -8; mem:ST4[%scevgep17](tbaa=!2) ST4[%scevgep15](tbaa=!2) FPR64:%vreg80 GPR32:%vreg88
	Success: %vreg13 -> %vreg88
	Result = %vreg88 [1072r,1120B:0)[1120B,1648r:2)[1664r,1744B:1)  0@1072r 1@1664r 2@1120B-phi
1312B	%vreg50<def> = COPY %vreg79:isub_hi; FPR32:%vreg50 FPR64:%vreg79
	Considering merging to FPR64_with_isub_hi_in_FPR32 with %vreg50 in %vreg79:isub_hi
		RHS = %vreg50 [1312r,1408r:0)  0@1312r
		LHS = %vreg79 [1296r,1328r:0)  0@1296r
		merge %vreg50:0@1312r into %vreg79:0@1296r --> @1296r
		erased:	1312r	%vreg50<def> = COPY %vreg79:isub_hi; FPR32:%vreg50 FPR64:%vreg79
		updated: 1408B	%vreg51<def> = COPY %vreg79:isub_hi; FPR32:%vreg51 FPR64_with_isub_hi_in_FPR32:%vreg79
	Success: %vreg50:isub_hi -> %vreg79
	Result = %vreg79 [1296r,1408r:0)  0@1296r
1328B	%vreg52<def> = COPY %vreg79:isub_lo; FPR32:%vreg52 FPR64_with_isub_hi_in_FPR32:%vreg79
	Considering merging to FPR64_with_isub_hi_in_FPR32 with %vreg52 in %vreg79:isub_lo
		RHS = %vreg52 [1328r,1440r:0)  0@1328r
		LHS = %vreg79 [1296r,1408r:0)  0@1296r
		merge %vreg52:0@1328r into %vreg79:0@1296r --> @1296r
		erased:	1328r	%vreg52<def> = COPY %vreg79:isub_lo; FPR32:%vreg52 FPR64_with_isub_hi_in_FPR32:%vreg79
		updated: 1440B	%vreg53<def> = COPY %vreg79:isub_lo; FPR32:%vreg53 FPR64_with_isub_hi_in_FPR32:%vreg79
	Success: %vreg52:isub_lo -> %vreg79
	Result = %vreg79 [1296r,1440r:0)  0@1296r
1408B	%vreg51<def> = COPY %vreg79:isub_hi; FPR32:%vreg51 FPR64_with_isub_hi_in_FPR32:%vreg79
	Considering merging to FPR64_with_isub_hi_in_FPR32 with %vreg51 in %vreg79:isub_hi
		RHS = %vreg51 [1408r,1424r:0)[1424r,1472r:1)  0@1408r 1@1424r
		LHS = %vreg79 [1296r,1440r:0)  0@1296r
		merge %vreg51:0@1408r into %vreg79:0@1296r --> @1296r
		conflict at %vreg51:1@1424r
		taints local %vreg79:0@1296r to 1440r
		pruned all of %vreg51 at 1408r: [1424r,1472r:1)  0@1408r 1@1424r
		pruned %vreg79 at 1424r: [1296r,1424r:0)  0@1296r
		erased:	1408r	%vreg51<def> = COPY %vreg79:isub_hi; FPR32:%vreg51 FPR64_with_isub_hi_in_FPR32:%vreg79
		restoring liveness to 3 points: 1424r,1440r,1424r:  %vreg79 [1296r,1424r:0)[1424r,1472r:1)  0@1296r 1@1424r
		updated: 1424B	%vreg79:isub_hi<def,tied1> = FMADDrr_r32 %vreg79:isub_hi<tied0>, %vreg12, %vreg46, %STATUS<imp-def,dead>; FPR64_with_isub_hi_in_FPR32:%vreg79 FPR32:%vreg12,%vreg46
		updated: 1472B	%vreg80:isub_lo<def,read-undef> = COPY %vreg79:isub_hi; FPR64:%vreg80 FPR64_with_isub_hi_in_FPR32:%vreg79
	Success: %vreg51:isub_hi -> %vreg79
	Result = %vreg79 [1296r,1424r:0)[1424r,1472r:1)  0@1296r 1@1424r
1440B	%vreg53<def> = COPY %vreg79:isub_lo; FPR32:%vreg53 FPR64_with_isub_hi_in_FPR32:%vreg79
	Considering merging to FPR64_with_isub_hi_in_FPR32 with %vreg53 in %vreg79:isub_lo
		RHS = %vreg53 [1440r,1456r:0)[1456r,1488r:1)  0@1440r 1@1456r
		LHS = %vreg79 [1296r,1424r:0)[1424r,1472r:1)  0@1296r 1@1424r
		merge %vreg53:0@1440r into %vreg79:1@1424r --> @1424r
		conflict at %vreg53:1@1456r
		taints local %vreg79:1@1424r to 1472r
		pruned all of %vreg53 at 1440r: [1456r,1488r:1)  0@1440r 1@1456r
		pruned %vreg79 at 1456r: [1296r,1424r:0)[1424r,1456r:1)  0@1296r 1@1424r
		erased:	1440r	%vreg53<def> = COPY %vreg79:isub_lo; FPR32:%vreg53 FPR64_with_isub_hi_in_FPR32:%vreg79
		restoring liveness to 3 points: 1456r,1472r,1456r:  %vreg79 [1296r,1424r:0)[1424r,1456r:1)[1456r,1488r:2)  0@1296r 1@1424r 2@1456r
		updated: 1456B	%vreg79:isub_lo<def,tied1> = FMADDrr_r32 %vreg79:isub_lo<tied0>, %vreg12, %vreg47, %STATUS<imp-def,dead>; FPR64_with_isub_hi_in_FPR32:%vreg79 FPR32:%vreg12,%vreg47
		updated: 1488B	%vreg80:isub_hi<def> = COPY %vreg79:isub_lo; FPR64:%vreg80 FPR64_with_isub_hi_in_FPR32:%vreg79
	Success: %vreg53:isub_lo -> %vreg79
	Result = %vreg79 [1296r,1424r:0)[1424r,1456r:1)[1456r,1488r:2)  0@1296r 1@1424r 2@1456r
1472B	%vreg80:isub_lo<def,read-undef> = COPY %vreg79:isub_hi; FPR64:%vreg80 FPR64_with_isub_hi_in_FPR32:%vreg79
	Not coalescable.
1488B	%vreg80:isub_hi<def> = COPY %vreg79:isub_lo; FPR64:%vreg80 FPR64_with_isub_hi_in_FPR32:%vreg79
	Not coalescable.
1536B	%vreg55<def> = COPY %vreg54; FPR32:%vreg55,%vreg54
	Considering merging to FPR32 with %vreg54 in %vreg55
		RHS = %vreg54 [1520r,1536r:0)  0@1520r
		LHS = %vreg55 [1536r,1552r:0)[1552r,1568r:1)  0@1536r 1@1552r
		merge %vreg55:0@1536r into %vreg54:0@1520r --> @1520r
		erased:	1536r	%vreg55<def> = COPY %vreg54; FPR32:%vreg55,%vreg54
AllocationOrder(FPR32) = [ %R0 %R1 %R2 %R3 %IP %R16 %R17 %R18 %R19 %R20 %R21 %R22 %R23 %R24 %R25 %R26 %R27 %R32 %R33 %R34 %R35 %R36 %R37 %R38 %R39 %R40 %R41 %R42 %R43 %R44 %R45 %R46 %R47 %R48 %R49 %R50 %R51 %R52 %R53 %R54 %R55 %R56 %R57 %R58 %R59 %R60 %R61 %R62 %R63 %R4 %R5 %R6 %R7 %R8 ]
		updated: 1520B	%vreg55<def> = LDRf32 %vreg88, 0; mem:LD4[%lsr.iv1214](tbaa=!2) FPR32:%vreg55 GPR32:%vreg88
	Success: %vreg54 -> %vreg55
	Result = %vreg55 [1520r,1552r:0)[1552r,1568r:1)  0@1520r 1@1552r
1600B	%vreg57<def> = COPY %vreg56; FPR32:%vreg57,%vreg56
	Considering merging to FPR32 with %vreg56 in %vreg57
		RHS = %vreg56 [1584r,1600r:0)  0@1584r
		LHS = %vreg57 [1600r,1616r:0)[1616r,1648r:1)  0@1600r 1@1616r
		merge %vreg57:0@1600r into %vreg56:0@1584r --> @1584r
		erased:	1600r	%vreg57<def> = COPY %vreg56; FPR32:%vreg57,%vreg56
		updated: 1584B	%vreg57<def> = LDRf32 %vreg88, 4; mem:LD4[%scevgep16](tbaa=!2) FPR32:%vreg57 GPR32:%vreg88
	Success: %vreg56 -> %vreg57
	Result = %vreg57 [1584r,1616r:0)[1616r,1648r:1)  0@1584r 1@1616r
1664B	%vreg88<def> = COPY %vreg18; GPR32:%vreg88,%vreg18
	Considering merging to GPR32 with %vreg18 in %vreg88
		RHS = %vreg18 [1200r,1664r:0)  0@1200r
		LHS = %vreg88 [1072r,1120B:0)[1120B,1648r:2)[1664r,1744B:1)  0@1072r 1@1664r 2@1120B-phi
		merge %vreg88:1@1664r into %vreg18:0@1200r --> @1200r
		interference at %vreg18:0@1200r
	Interference!
1680B	%vreg89<def> = COPY %vreg17; GPR32:%vreg89,%vreg17
	Considering merging to GPR32 with %vreg17 in %vreg89
		RHS = %vreg17 [1216r,1680r:0)  0@1216r
		LHS = %vreg89 [1088r,1120B:0)[1120B,1280r:2)[1680r,1744B:1)  0@1088r 1@1680r 2@1120B-phi
		merge %vreg89:1@1680r into %vreg17:0@1216r --> @1216r
		interference at %vreg17:0@1216r
	Interference!
1696B	%vreg90<def> = COPY %vreg16; GPR32:%vreg90,%vreg16
	Considering merging to GPR32 with %vreg16 in %vreg90
		RHS = %vreg16 [1248r,1696r:0)  0@1248r
		LHS = %vreg90 [1104r,1120B:0)[1120B,1248r:2)[1696r,1744B:1)  0@1104r 1@1696r 2@1120B-phi
		merge %vreg90:1@1696r into %vreg16:0@1248r --> @1248r
		erased:	1696r	%vreg90<def> = COPY %vreg16; GPR32:%vreg90,%vreg16
		updated: 1248B	%vreg90<def> = ADDri_r32 %vreg90, 4, %STATUS<imp-def,dead>; GPR32:%vreg90
		updated: 1632B	%vreg58<def,dead> = CMPri_r32 %vreg90, 8, %STATUS<imp-def>; GPR32:%vreg58,%vreg90
	Success: %vreg16 -> %vreg90
	Result = %vreg90 [1104r,1120B:0)[1120B,1248r:1)[1248r,1744B:2)  0@1104r 1@1120B-phi 2@1248r
for.body66:
1888B	%vreg22<def> = COPY %vreg92; GPR32:%vreg22,%vreg92
	Considering merging to GPR32 with %vreg22 in %vreg92
		RHS = %vreg22 [1888r,1968r:0)  0@1888r
		LHS = %vreg92 [928r,960B:0)[1872B,1888r:2)[2128r,2176B:1)  0@928r 1@2128r 2@1872B-phi
		merge %vreg22:0@1888r into %vreg92:2@1872B --> @1872B
		erased:	1888r	%vreg22<def> = COPY %vreg92; GPR32:%vreg22,%vreg92
		updated: 1968B	%vreg23<def> = ADDri_r32 %vreg92, 4, %STATUS<imp-def,dead>; GPR32:%vreg23,%vreg92
		updated: 1920B	%vreg62<def> = ADDrr_r32 %vreg36, %vreg92, %STATUS<imp-def,dead>; GPR32:%vreg62,%vreg36,%vreg92
	Success: %vreg22 -> %vreg92
	Result = %vreg92 [928r,960B:0)[1872B,1968r:2)[2128r,2176B:1)  0@928r 1@2128r 2@1872B-phi
1904B	%vreg21<def> = COPY %vreg91; GPR32:%vreg21,%vreg91
	Considering merging to GPR32 with %vreg21 in %vreg91
		RHS = %vreg21 [1904r,2096r:0)  0@1904r
		LHS = %vreg91 [912r,960B:0)[1872B,1904r:2)[2112r,2176B:1)  0@912r 1@2112r 2@1872B-phi
		merge %vreg21:0@1904r into %vreg91:2@1872B --> @1872B
		erased:	1904r	%vreg21<def> = COPY %vreg91; GPR32:%vreg21,%vreg91
		updated: 1952B	%vreg24<def> = ADDri_r32 %vreg91, 4, %STATUS<imp-def,dead>; GPR32:%vreg24,%vreg91
		updated: 1984B	%vreg64<def> = LDRf32 %vreg91, 0; mem:Volatile LD4[%lsr.iv24](tbaa=!2) FPR32:%vreg64 GPR32:%vreg91
		updated: 2096B	STRf32 %vreg65, %vreg91, 0; mem:Volatile ST4[%lsr.iv24](tbaa=!2) FPR32:%vreg65 GPR32:%vreg91
	Success: %vreg21 -> %vreg91
	Result = %vreg91 [912r,960B:0)[1872B,2096r:2)[2112r,2176B:1)  0@912r 1@2112r 2@1872B-phi
2112B	%vreg91<def> = COPY %vreg24; GPR32:%vreg91,%vreg24
	Considering merging to GPR32 with %vreg24 in %vreg91
		RHS = %vreg24 [1952r,2112r:0)  0@1952r
		LHS = %vreg91 [912r,960B:0)[1872B,2096r:2)[2112r,2176B:1)  0@912r 1@2112r 2@1872B-phi
		merge %vreg91:1@2112r into %vreg24:0@1952r --> @1952r
		interference at %vreg24:0@1952r
	Interference!
2128B	%vreg92<def> = COPY %vreg23; GPR32:%vreg92,%vreg23
	Considering merging to GPR32 with %vreg23 in %vreg92
		RHS = %vreg23 [1968r,2128r:0)  0@1968r
		LHS = %vreg92 [928r,960B:0)[1872B,1968r:2)[2128r,2176B:1)  0@928r 1@2128r 2@1872B-phi
		merge %vreg92:1@2128r into %vreg23:0@1968r --> @1968r
		erased:	2128r	%vreg92<def> = COPY %vreg23; GPR32:%vreg92,%vreg23
		updated: 1968B	%vreg92<def> = ADDri_r32 %vreg92, 4, %STATUS<imp-def,dead>; GPR32:%vreg92
		updated: 2080B	%vreg66<def,dead> = CMPri_r32 %vreg92, 32, %STATUS<imp-def>; GPR32:%vreg66,%vreg92
	Success: %vreg23 -> %vreg92
	Result = %vreg92 [928r,960B:0)[1872B,1968r:1)[1968r,2176B:2)  0@928r 1@1872B-phi 2@1968r
for.body9:
976B	%vreg10<def> = COPY %vreg87; GPR32:%vreg10,%vreg87
	Considering merging to GPR32 with %vreg10 in %vreg87
		RHS = %vreg10 [976r,1776r:0)  0@976r
		LHS = %vreg87 [864r,896B:0)[960B,976r:2)[1824r,1872B:1)  0@864r 1@1824r 2@960B-phi
		merge %vreg10:0@976r into %vreg87:2@960B --> @960B
		erased:	976r	%vreg10<def> = COPY %vreg87; GPR32:%vreg10,%vreg87
		updated: 1008B	%vreg44<def> = LSL32ri %vreg87, 2, %STATUS<imp-def,dead>; GPR32:%vreg44,%vreg87
		updated: 1776B	%vreg19<def> = ADDri_r32 %vreg87, 1, %STATUS<imp-def,dead>; GPR32:%vreg19,%vreg87
	Success: %vreg10 -> %vreg87
	Result = %vreg87 [864r,896B:0)[960B,1776r:2)[1824r,1872B:1)  0@864r 1@1824r 2@960B-phi
992B	%vreg9<def> = COPY %vreg86; GPR32:%vreg9,%vreg86
	Considering merging to GPR32 with %vreg9 in %vreg86
		RHS = %vreg9 [992r,1760r:0)  0@992r
		LHS = %vreg86 [848r,896B:0)[960B,992r:2)[1808r,1872B:1)  0@848r 1@1808r 2@960B-phi
		merge %vreg9:0@992r into %vreg86:2@960B --> @960B
		erased:	992r	%vreg9<def> = COPY %vreg86; GPR32:%vreg9,%vreg86
		updated: 1760B	%vreg20<def> = ADDrr_r32 %vreg86, %vreg1, %STATUS<imp-def,dead>; GPR32:%vreg20,%vreg86,%vreg1
		updated: 1088B	%vreg89<def> = COPY %vreg86; GPR32:%vreg89,%vreg86
	Success: %vreg9 -> %vreg86
	Result = %vreg86 [848r,896B:0)[960B,1760r:2)[1808r,1872B:1)  0@848r 1@1808r 2@960B-phi
1040B	%vreg11<def> = COPY %vreg2; GPR32:%vreg11,%vreg2
	Considering merging to GPR32 with %vreg2 in %vreg11
		RHS = %vreg2 [416r,2464B:0)  0@416r
		LHS = %vreg11 [1040r,1072r:0)  0@1040r
		merge %vreg11:0@1040r into %vreg2:0@416r --> @416r
		erased:	1040r	%vreg11<def> = COPY %vreg2; GPR32:%vreg11,%vreg2
		updated: 416B	%vreg11<def> = ADDri_r32 %vreg36, 8, %STATUS<imp-def,dead>; GPR32:%vreg11,%vreg36
	Success: %vreg2 -> %vreg11
	Result = %vreg11 [416r,2464B:0)  0@416r
1072B	%vreg88<def> = COPY %vreg11; GPR32:%vreg88,%vreg11
	Considering merging to GPR32 with %vreg11 in %vreg88
		RHS = %vreg11 [416r,2464B:0)  0@416r
		LHS = %vreg88 [1072r,1120B:0)[1120B,1648r:2)[1664r,1744B:1)  0@1072r 1@1664r 2@1120B-phi
		merge %vreg88:0@1072r into %vreg11:0@416r --> @416r
		interference at %vreg88:1@1664r
	Interference!
1088B	%vreg89<def> = COPY %vreg86; GPR32:%vreg89,%vreg86
	Considering merging to GPR32 with %vreg86 in %vreg89
		RHS = %vreg86 [848r,896B:0)[960B,1760r:2)[1808r,1872B:1)  0@848r 1@1808r 2@960B-phi
		LHS = %vreg89 [1088r,1120B:0)[1120B,1280r:2)[1680r,1744B:1)  0@1088r 1@1680r 2@1120B-phi
		merge %vreg89:0@1088r into %vreg86:2@960B --> @960B
		interference at %vreg89:1@1680r
	Interference!
1104B	%vreg90<def> = COPY %vreg35; GPR32:%vreg90,%vreg35
	Considering merging to GPR32 with %vreg35 in %vreg90
		RHS = %vreg35 [432r,2464B:0)  0@432r
		LHS = %vreg90 [1104r,1120B:0)[1120B,1248r:1)[1248r,1744B:2)  0@1104r 1@1120B-phi 2@1248r
		merge %vreg90:0@1104r into %vreg35:0@432r --> @432r
		interference at %vreg90:2@1248r
	Interference!
for.end60:
1808B	%vreg86<def> = COPY %vreg20; GPR32:%vreg86,%vreg20
	Considering merging to GPR32 with %vreg20 in %vreg86
		RHS = %vreg20 [1760r,1808r:0)  0@1760r
		LHS = %vreg86 [848r,896B:0)[960B,1760r:2)[1808r,1872B:1)  0@848r 1@1808r 2@960B-phi
		merge %vreg86:1@1808r into %vreg20:0@1760r --> @1760r
		erased:	1808r	%vreg86<def> = COPY %vreg20; GPR32:%vreg86,%vreg20
		updated: 1760B	%vreg86<def> = ADDrr_r32 %vreg86, %vreg1, %STATUS<imp-def,dead>; GPR32:%vreg86,%vreg1
	Success: %vreg20 -> %vreg86
	Result = %vreg86 [848r,896B:0)[960B,1760r:1)[1760r,1872B:2)  0@848r 1@960B-phi 2@1760r
1824B	%vreg87<def> = COPY %vreg19; GPR32:%vreg87,%vreg19
	Considering merging to GPR32 with %vreg19 in %vreg87
		RHS = %vreg19 [1776r,1824r:0)  0@1776r
		LHS = %vreg87 [864r,896B:0)[960B,1776r:2)[1824r,1872B:1)  0@864r 1@1824r 2@960B-phi
		merge %vreg87:1@1824r into %vreg19:0@1776r --> @1776r
		erased:	1824r	%vreg87<def> = COPY %vreg19; GPR32:%vreg87,%vreg19
		updated: 1776B	%vreg87<def> = ADDri_r32 %vreg87, 1, %STATUS<imp-def,dead>; GPR32:%vreg87
		updated: 1792B	%vreg59<def,dead> = CMPrr_r32 %vreg87, %vreg33, %STATUS<imp-def>; GPR32:%vreg59,%vreg87,%vreg33
	Success: %vreg19 -> %vreg87
	Result = %vreg87 [864r,896B:0)[960B,1776r:1)[1776r,1872B:2)  0@864r 1@960B-phi 2@1776r
for.body9.preheader:
704B	%vreg8<def> = COPY %vreg85; GPR32:%vreg8,%vreg85
	Considering merging to GPR32 with %vreg8 in %vreg85
		RHS = %vreg8 [704r,2224r:0)  0@704r
		LHS = %vreg85 [672r,688B:0)[688B,704r:2)[2288r,2336B:1)  0@672r 1@2288r 2@688B-phi
		merge %vreg8:0@704r into %vreg85:2@688B --> @688B
		erased:	704r	%vreg8<def> = COPY %vreg85; GPR32:%vreg8,%vreg85
		updated: 2224B	%vreg25<def> = ADDri_r32 %vreg85, 8, %STATUS<imp-def,dead>; GPR32:%vreg25,%vreg85
	Success: %vreg8 -> %vreg85
	Result = %vreg85 [672r,688B:0)[688B,2224r:2)[2288r,2336B:1)  0@672r 1@2288r 2@688B-phi
720B	%vreg7<def> = COPY %vreg84; GPR32:%vreg7,%vreg84
	Considering merging to GPR32 with %vreg7 in %vreg84
		RHS = %vreg7 [720r,2208r:0)  0@720r
		LHS = %vreg84 [656r,688B:0)[688B,720r:2)[2272r,2336B:1)  0@656r 1@2272r 2@688B-phi
		merge %vreg7:0@720r into %vreg84:2@688B --> @688B
		erased:	720r	%vreg7<def> = COPY %vreg84; GPR32:%vreg7,%vreg84
		updated: 2208B	%vreg26<def> = ADDri_r32 %vreg84, 32, %STATUS<imp-def,dead>; GPR32:%vreg26,%vreg84
		updated: 848B	%vreg86<def> = COPY %vreg84; GPR32:%vreg86,%vreg84
	Success: %vreg7 -> %vreg84
	Result = %vreg84 [656r,688B:0)[688B,2208r:2)[2272r,2336B:1)  0@656r 1@2272r 2@688B-phi
736B	%vreg6<def> = COPY %vreg83; GPR32:%vreg6,%vreg83
	Considering merging to GPR32 with %vreg6 in %vreg83
		RHS = %vreg6 [736r,2192r:0)  0@736r
		LHS = %vreg83 [640r,688B:0)[688B,736r:2)[2256r,2336B:1)  0@640r 1@2256r 2@688B-phi
		merge %vreg6:0@736r into %vreg83:2@688B --> @688B
		erased:	736r	%vreg6<def> = COPY %vreg83; GPR32:%vreg6,%vreg83
		updated: 2192B	%vreg27<def> = ADDri_r32 %vreg83, 32, %STATUS<imp-def,dead>; GPR32:%vreg27,%vreg83
		updated: 912B	%vreg91<def> = COPY %vreg83; GPR32:%vreg91,%vreg83
	Success: %vreg6 -> %vreg83
	Result = %vreg83 [640r,688B:0)[688B,2192r:2)[2256r,2336B:1)  0@640r 1@2256r 2@688B-phi
752B	%vreg42:isub_hi<def,read-undef> = COPY %vreg35; FPR64_with_isub_hi_in_FPR32:%vreg42 GPR32:%vreg35
	Considering merging to FPR64_with_isub_hi_in_FPR32 with %vreg35 in %vreg42:isub_hi
		RHS = %vreg35 [432r,2464B:0)  0@432r
		LHS = %vreg42 [752r,768r:1)[768r,832r:0)  0@768r 1@752r
		merge %vreg42:1@752r into %vreg35:0@432r --> @432r
		pruned %vreg35 at 768r: [432r,480B:0)  0@432r
		pruned all of %vreg42 at 752r: [768r,832r:0)  0@768r 1@752r
		erased:	752r	%vreg42:isub_hi<def,read-undef> = COPY %vreg35; FPR64_with_isub_hi_in_FPR32:%vreg42 GPR32:%vreg35
		restoring liveness to 12 points: 896B,1120B,1744B,1872B,960B,2176B,2336B,768r,2464B,688B,768r,768r:  %vreg42 [432r,480B:0)[768r,832r:1)  0@432r 1@768r
		updated: 432B	%vreg42:isub_hi<def,read-undef> = MOVi32ri 0; FPR64_with_isub_hi_in_FPR32:%vreg42
		updated: 464B	%vreg82<def> = COPY %vreg42:isub_hi; GPR32:%vreg82 FPR64_with_isub_hi_in_FPR32:%vreg42
		updated: 672B	%vreg85<def> = COPY %vreg42:isub_hi; GPR32:%vreg85 FPR64_with_isub_hi_in_FPR32:%vreg42
		updated: 864B	%vreg87<def> = COPY %vreg42:isub_hi; GPR32:%vreg87 FPR64_with_isub_hi_in_FPR32:%vreg42
		updated: 1104B	%vreg90<def> = COPY %vreg42:isub_hi; GPR32:%vreg90 FPR64_with_isub_hi_in_FPR32:%vreg42
		updated: 928B	%vreg92<def> = COPY %vreg42:isub_hi; GPR32:%vreg92 FPR64_with_isub_hi_in_FPR32:%vreg42
		updated: 768B	%vreg42:isub_lo<def> = COPY %vreg42:isub_hi; FPR64_with_isub_hi_in_FPR32:%vreg42
	Success: %vreg35:isub_hi -> %vreg42
	Result = %vreg42 [432r,480B:0)[480B,688B:3)[688B,768r:2)[768r,2464B:1)  0@432r 1@768r 2@688B-phi 3@480B-phi
768B	%vreg42:isub_lo<def> = COPY %vreg42:isub_hi; FPR64_with_isub_hi_in_FPR32:%vreg42
	Not coalescable.
848B	%vreg86<def> = COPY %vreg84; GPR32:%vreg86,%vreg84
	Considering merging to GPR32 with %vreg84 in %vreg86
		RHS = %vreg84 [656r,688B:0)[688B,2208r:2)[2272r,2336B:1)  0@656r 1@2272r 2@688B-phi
		LHS = %vreg86 [848r,896B:0)[960B,1760r:1)[1760r,1872B:2)  0@848r 1@960B-phi 2@1760r
		merge %vreg86:0@848r into %vreg84:2@688B --> @688B
		interference at %vreg86:2@1760r
	Interference!
864B	%vreg87<def> = COPY %vreg42:isub_hi; GPR32:%vreg87 FPR64_with_isub_hi_in_FPR32:%vreg42
	Considering merging to FPR64_with_isub_hi_in_FPR32 with %vreg87 in %vreg42:isub_hi
		RHS = %vreg87 [864r,896B:0)[960B,1776r:1)[1776r,1872B:2)  0@864r 1@960B-phi 2@1776r
		LHS = %vreg42 [432r,480B:0)[480B,688B:3)[688B,768r:2)[768r,2464B:1)  0@432r 1@768r 2@688B-phi 3@480B-phi
		merge %vreg87:0@864r into %vreg42:1@768r --> @768r
		interference at %vreg87:2@1776r
	Interference!
for.end75:
2256B	%vreg83<def> = COPY %vreg27; GPR32:%vreg83,%vreg27
	Considering merging to GPR32 with %vreg27 in %vreg83
		RHS = %vreg27 [2192r,2256r:0)  0@2192r
		LHS = %vreg83 [640r,688B:0)[688B,2192r:2)[2256r,2336B:1)  0@640r 1@2256r 2@688B-phi
		merge %vreg83:1@2256r into %vreg27:0@2192r --> @2192r
		erased:	2256r	%vreg83<def> = COPY %vreg27; GPR32:%vreg83,%vreg27
		updated: 2192B	%vreg83<def> = ADDri_r32 %vreg83, 32, %STATUS<imp-def,dead>; GPR32:%vreg83
	Success: %vreg27 -> %vreg83
	Result = %vreg83 [640r,688B:0)[688B,2192r:1)[2192r,2336B:2)  0@640r 1@688B-phi 2@2192r
2272B	%vreg84<def> = COPY %vreg26; GPR32:%vreg84,%vreg26
	Considering merging to GPR32 with %vreg26 in %vreg84
		RHS = %vreg26 [2208r,2272r:0)  0@2208r
		LHS = %vreg84 [656r,688B:0)[688B,2208r:2)[2272r,2336B:1)  0@656r 1@2272r 2@688B-phi
		merge %vreg84:1@2272r into %vreg26:0@2208r --> @2208r
		erased:	2272r	%vreg84<def> = COPY %vreg26; GPR32:%vreg84,%vreg26
		updated: 2208B	%vreg84<def> = ADDri_r32 %vreg84, 32, %STATUS<imp-def,dead>; GPR32:%vreg84
	Success: %vreg26 -> %vreg84
	Result = %vreg84 [656r,688B:0)[688B,2208r:1)[2208r,2336B:2)  0@656r 1@688B-phi 2@2208r
2288B	%vreg85<def> = COPY %vreg25; GPR32:%vreg85,%vreg25
	Considering merging to GPR32 with %vreg25 in %vreg85
		RHS = %vreg25 [2224r,2288r:0)  0@2224r
		LHS = %vreg85 [672r,688B:0)[688B,2224r:2)[2288r,2336B:1)  0@672r 1@2288r 2@688B-phi
		merge %vreg85:1@2288r into %vreg25:0@2224r --> @2224r
		erased:	2288r	%vreg85<def> = COPY %vreg25; GPR32:%vreg85,%vreg25
		updated: 2224B	%vreg85<def> = ADDri_r32 %vreg85, 8, %STATUS<imp-def,dead>; GPR32:%vreg85
		updated: 2240B	%vreg67<def,dead> = CMPrr_r32 %vreg85, %vreg33, %STATUS<imp-def>; GPR32:%vreg67,%vreg85,%vreg33
	Success: %vreg25 -> %vreg85
	Result = %vreg85 [672r,688B:0)[688B,2224r:1)[2224r,2336B:2)  0@672r 1@688B-phi 2@2224r
for.cond64.preheader:
912B	%vreg91<def> = COPY %vreg83; GPR32:%vreg91,%vreg83
	Considering merging to GPR32 with %vreg83 in %vreg91
		RHS = %vreg83 [640r,688B:0)[688B,2192r:1)[2192r,2336B:2)  0@640r 1@688B-phi 2@2192r
		LHS = %vreg91 [912r,960B:0)[1872B,2096r:2)[2112r,2176B:1)  0@912r 1@2112r 2@1872B-phi
		merge %vreg91:0@912r into %vreg83:1@688B --> @688B
		interference at %vreg91:1@2112r
	Interference!
928B	%vreg92<def> = COPY %vreg42:isub_hi; GPR32:%vreg92 FPR64_with_isub_hi_in_FPR32:%vreg42
	Considering merging to FPR64_with_isub_hi_in_FPR32 with %vreg92 in %vreg42:isub_hi
		RHS = %vreg92 [928r,960B:0)[1872B,1968r:1)[1968r,2176B:2)  0@928r 1@1872B-phi 2@1968r
		LHS = %vreg42 [432r,480B:0)[480B,688B:3)[688B,768r:2)[768r,2464B:1)  0@432r 1@768r 2@688B-phi 3@480B-phi
		merge %vreg92:0@928r into %vreg42:1@768r --> @768r
		interference at %vreg92:2@1968r
	Interference!
for.body3.lr.ph:
496B	%vreg4<def> = COPY %vreg82; GPR32:%vreg4,%vreg82
	Considering merging to GPR32 with %vreg4 in %vreg82
		RHS = %vreg4 [496r,2368r:0)  0@496r
		LHS = %vreg82 [464r,480B:0)[480B,496r:2)[2416r,2464B:1)  0@464r 1@2416r 2@480B-phi
		merge %vreg4:0@496r into %vreg82:2@480B --> @480B
		erased:	496r	%vreg4<def> = COPY %vreg82; GPR32:%vreg4,%vreg82
		updated: 592B	%vreg38<def> = IMULrr_r32 %vreg82, %vreg33, %STATUS<imp-def,dead>; GPR32:%vreg38,%vreg82,%vreg33
		updated: 2368B	%vreg28<def> = ADDri_r32 %vreg82, 1, %STATUS<imp-def,dead>; GPR32:%vreg28,%vreg82
	Success: %vreg4 -> %vreg82
	Result = %vreg82 [464r,480B:0)[480B,2368r:2)[2416r,2464B:1)  0@464r 1@2416r 2@480B-phi
512B	%vreg3<def> = COPY %vreg81; GPR32:%vreg3,%vreg81
	Considering merging to GPR32 with %vreg3 in %vreg81
		RHS = %vreg3 [512r,2352r:0)  0@512r
		LHS = %vreg81 [448r,480B:0)[480B,512r:2)[2400r,2464B:1)  0@448r 1@2400r 2@480B-phi
		merge %vreg3:0@512r into %vreg81:2@480B --> @480B
		erased:	512r	%vreg3<def> = COPY %vreg81; GPR32:%vreg3,%vreg81
		updated: 2352B	%vreg29<def> = ADDrr_r32 %vreg81, %vreg1, %STATUS<imp-def,dead>; GPR32:%vreg29,%vreg81,%vreg1
		updated: 640B	%vreg83<def> = COPY %vreg81; GPR32:%vreg83,%vreg81
	Success: %vreg3 -> %vreg81
	Result = %vreg81 [448r,480B:0)[480B,2352r:2)[2400r,2464B:1)  0@448r 1@2400r 2@480B-phi
640B	%vreg83<def> = COPY %vreg81; GPR32:%vreg83,%vreg81
	Considering merging to GPR32 with %vreg81 in %vreg83
		RHS = %vreg81 [448r,480B:0)[480B,2352r:2)[2400r,2464B:1)  0@448r 1@2400r 2@480B-phi
		LHS = %vreg83 [640r,688B:0)[688B,2192r:1)[2192r,2336B:2)  0@640r 1@688B-phi 2@2192r
		merge %vreg83:0@640r into %vreg81:2@480B --> @480B
		interference at %vreg83:2@2192r
	Interference!
656B	%vreg84<def> = COPY %vreg0; GPR32:%vreg84,%vreg0
	Considering merging to GPR32 with %vreg0 in %vreg84
		RHS = %vreg0 [384r,2464B:0)  0@384r
		LHS = %vreg84 [656r,688B:0)[688B,2208r:1)[2208r,2336B:2)  0@656r 1@688B-phi 2@2208r
		merge %vreg84:0@656r into %vreg0:0@384r --> @384r
		interference at %vreg84:2@2208r
	Interference!
672B	%vreg85<def> = COPY %vreg42:isub_hi; GPR32:%vreg85 FPR64_with_isub_hi_in_FPR32:%vreg42
	Considering merging to FPR64_with_isub_hi_in_FPR32 with %vreg85 in %vreg42:isub_hi
		RHS = %vreg85 [672r,688B:0)[688B,2224r:1)[2224r,2336B:2)  0@672r 1@688B-phi 2@2224r
		LHS = %vreg42 [432r,480B:0)[480B,688B:3)[688B,768r:2)[768r,2464B:1)  0@432r 1@768r 2@688B-phi 3@480B-phi
		merge %vreg85:1@688B into %vreg42:2@688B --> @688B
		merge %vreg85:0@672r into %vreg42:3@480B --> @480B
		interference at %vreg85:2@2224r
	Interference!
for.end78:
2400B	%vreg81<def> = COPY %vreg29; GPR32:%vreg81,%vreg29
	Considering merging to GPR32 with %vreg29 in %vreg81
		RHS = %vreg29 [2352r,2400r:0)  0@2352r
		LHS = %vreg81 [448r,480B:0)[480B,2352r:2)[2400r,2464B:1)  0@448r 1@2400r 2@480B-phi
		merge %vreg81:1@2400r into %vreg29:0@2352r --> @2352r
		erased:	2400r	%vreg81<def> = COPY %vreg29; GPR32:%vreg81,%vreg29
		updated: 2352B	%vreg81<def> = ADDrr_r32 %vreg81, %vreg1, %STATUS<imp-def,dead>; GPR32:%vreg81,%vreg1
	Success: %vreg29 -> %vreg81
	Result = %vreg81 [448r,480B:0)[480B,2352r:1)[2352r,2464B:2)  0@448r 1@480B-phi 2@2352r
2416B	%vreg82<def> = COPY %vreg28; GPR32:%vreg82,%vreg28
	Considering merging to GPR32 with %vreg28 in %vreg82
		RHS = %vreg28 [2368r,2416r:0)  0@2368r
		LHS = %vreg82 [464r,480B:0)[480B,2368r:2)[2416r,2464B:1)  0@464r 1@2416r 2@480B-phi
		merge %vreg82:1@2416r into %vreg28:0@2368r --> @2368r
		erased:	2416r	%vreg82<def> = COPY %vreg28; GPR32:%vreg82,%vreg28
		updated: 2368B	%vreg82<def> = ADDri_r32 %vreg82, 1, %STATUS<imp-def,dead>; GPR32:%vreg82
		updated: 2384B	%vreg68<def,dead> = CMPrr_r32 %vreg82, %vreg33, %STATUS<imp-def>; GPR32:%vreg68,%vreg82,%vreg33
	Success: %vreg28 -> %vreg82
	Result = %vreg82 [464r,480B:0)[480B,2368r:1)[2368r,2464B:2)  0@464r 1@480B-phi 2@2368r
entry:
240B	%vreg33<def> = COPY %R3; GPR32:%vreg33
	Considering merging %vreg33 with %R3
	Can only merge into reserved registers.
256B	%vreg32<def> = COPY %R2; GPR32:%vreg32
	Considering merging %vreg32 with %R2
	Can only merge into reserved registers.
272B	%vreg31<def> = COPY %R1; GPR32:%vreg31
	Considering merging %vreg31 with %R1
	Can only merge into reserved registers.
288B	%vreg30<def> = COPY %R0; GPR32:%vreg30
	Considering merging %vreg30 with %R0
	Can only merge into reserved registers.
for.body3.lr.ph.preheader:
448B	%vreg81<def> = COPY %vreg32; GPR32:%vreg81,%vreg32
	Considering merging to GPR32 with %vreg32 in %vreg81
		RHS = %vreg32 [256r,448r:0)  0@256r
		LHS = %vreg81 [448r,480B:0)[480B,2352r:1)[2352r,2464B:2)  0@448r 1@480B-phi 2@2352r
		merge %vreg81:0@448r into %vreg32:0@256r --> @256r
		erased:	448r	%vreg81<def> = COPY %vreg32; GPR32:%vreg81,%vreg32
		updated: 256B	%vreg81<def> = COPY %R2; GPR32:%vreg81
	Success: %vreg32 -> %vreg81
	Result = %vreg81 [256r,480B:0)[480B,2352r:1)[2352r,2464B:2)  0@256r 1@480B-phi 2@2352r
464B	%vreg82<def> = COPY %vreg42:isub_hi; GPR32:%vreg82 FPR64_with_isub_hi_in_FPR32:%vreg42
	Considering merging to FPR64_with_isub_hi_in_FPR32 with %vreg82 in %vreg42:isub_hi
		RHS = %vreg82 [464r,480B:0)[480B,2368r:1)[2368r,2464B:2)  0@464r 1@480B-phi 2@2368r
		LHS = %vreg42 [432r,480B:0)[480B,688B:3)[688B,768r:2)[768r,2464B:1)  0@432r 1@768r 2@688B-phi 3@480B-phi
		merge %vreg42:3@480B into %vreg82:1@480B --> @480B
		merge %vreg82:0@464r into %vreg42:0@432r --> @432r
		interference at %vreg82:2@2368r
	Interference!
for.end81:
(null):
80B	%vreg73<def> = COPY %vreg72; GPR32:%vreg73,%vreg72
	Considering merging to GPR32 with %vreg72 in %vreg73
		RHS = %vreg72 [64r,80r:0)  0@64r
		LHS = %vreg73 [80r,96r:0)[96r,112r:1)  0@80r 1@96r
		merge %vreg73:0@80r into %vreg72:0@64r --> @64r
		erased:	80r	%vreg73<def> = COPY %vreg72; GPR32:%vreg73,%vreg72
		updated: 64B	%vreg73<def> = MOVi32ri 65535; GPR32:%vreg73
	Success: %vreg72 -> %vreg73
	Result = %vreg73 [64r,96r:0)[96r,112r:1)  0@64r 1@96r
128B	%vreg70<def> = COPY %vreg71; GPR32:%vreg70,%vreg71
	Considering merging to GPR32 with %vreg71 in %vreg70
		RHS = %vreg71 [32r,128r:0)  0@32r
		LHS = %vreg70 [128r,144r:0)[144r,176r:1)  0@128r 1@144r
		merge %vreg70:0@128r into %vreg71:0@32r --> @32r
		erased:	128r	%vreg70<def> = COPY %vreg71; GPR32:%vreg70,%vreg71
		updated: 32B	%vreg70<def> = MOVFS32_core %CONFIG; GPR32:%vreg70
		updated: 48B	STRi32_r32 %vreg70, <fi#1>, 0; mem:ST4[FixedStack1] GPR32:%vreg70
		updated: 112B	%vreg69<def> = ANDrr_r32 %vreg70, %vreg73, %STATUS<imp-def>; GPR32:%vreg69,%vreg70,%vreg73
	Success: %vreg71 -> %vreg70
	Result = %vreg70 [32r,144r:0)[144r,176r:1)  0@32r 1@144r
160B	%vreg78:isub_lo<def,read-undef> = COPY %vreg69; GPR64:%vreg78 GPR32:%vreg69
	Considering merging to FPR64_with_isub_lo_in_FPR32 with %vreg69 in %vreg78:isub_lo
		RHS = %vreg69 [112r,160r:0)  0@112r
		LHS = %vreg78 [160r,176r:1)[176r,192r:0)  0@176r 1@160r
		merge %vreg78:1@160r into %vreg69:0@112r --> @112r
		erased:	160r	%vreg78:isub_lo<def,read-undef> = COPY %vreg69; GPR64:%vreg78 GPR32:%vreg69
		updated: 112B	%vreg78:isub_lo<def,read-undef> = ANDrr_r32 %vreg70, %vreg73, %STATUS<imp-def>; FPR64_with_isub_lo_in_FPR32:%vreg78 GPR32:%vreg70,%vreg73
	Success: %vreg69:isub_lo -> %vreg78
	Result = %vreg78 [112r,176r:0)[176r,192r:1)  0@112r 1@176r
176B	%vreg78:isub_hi<def> = COPY %vreg70; FPR64_with_isub_lo_in_FPR32:%vreg78 GPR32:%vreg70
	Considering merging to FPR64_with_isub_hi_in_FPR32 with %vreg70 in %vreg78:isub_hi
		RHS = %vreg70 [32r,144r:0)[144r,176r:1)  0@32r 1@144r
		LHS = %vreg78 [112r,176r:0)[176r,192r:1)  0@112r 1@176r
		merge %vreg78:1@176r into %vreg70:1@144r --> @144r
		pruned %vreg70 at 112r: [32r,112r:0)[144r,176r:1)  0@32r 1@144r
		pruned %vreg78 at 144r: [112r,144r:0)[176r,192r:1)  0@112r 1@176r
		erased:	176r	%vreg78:isub_hi<def> = COPY %vreg70; FPR64_with_isub_lo_in_FPR32:%vreg78 GPR32:%vreg70
		restoring liveness to 4 points: 144r,112r,176r,144r:  %vreg78 [32r,112r:0)[112r,144r:1)[144r,192r:2)  0@32r 1@112r 2@144r
		updated: 32B	%vreg78:isub_hi<def,read-undef> = MOVFS32_core %CONFIG; FPR64_with_isub_hi_in_FPR32:%vreg78
		updated: 144B	%vreg78:isub_hi<def,tied1> = MOVTi32ri %vreg78:isub_hi<tied0>, 72; FPR64_with_isub_hi_in_FPR32:%vreg78
		updated: 48B	STRi32_r32 %vreg78:isub_hi, <fi#1>, 0; mem:ST4[FixedStack1] FPR64_with_isub_hi_in_FPR32:%vreg78
		updated: 112B	%vreg78:isub_lo<def> = ANDrr_r32 %vreg78:isub_hi, %vreg73, %STATUS<imp-def>; FPR64_with_isub_hi_in_FPR32:%vreg78 GPR32:%vreg73
	Success: %vreg70:isub_hi -> %vreg78
	Result = %vreg78 [32r,112r:0)[112r,144r:1)[144r,192r:2)  0@32r 1@112r 2@144r
1664B	%vreg88<def> = COPY %vreg18; GPR32:%vreg88,%vreg18
	Considering merging to GPR32 with %vreg18 in %vreg88
		RHS = %vreg18 [1200r,1664r:0)  0@1200r
		LHS = %vreg88 [1072r,1120B:0)[1120B,1648r:2)[1664r,1744B:1)  0@1072r 1@1664r 2@1120B-phi
		merge %vreg88:1@1664r into %vreg18:0@1200r --> @1200r
		interference at %vreg18:0@1200r
	Interference!
1680B	%vreg89<def> = COPY %vreg17; GPR32:%vreg89,%vreg17
	Considering merging to GPR32 with %vreg17 in %vreg89
		RHS = %vreg17 [1216r,1680r:0)  0@1216r
		LHS = %vreg89 [1088r,1120B:0)[1120B,1280r:2)[1680r,1744B:1)  0@1088r 1@1680r 2@1120B-phi
		merge %vreg89:1@1680r into %vreg17:0@1216r --> @1216r
		interference at %vreg17:0@1216r
	Interference!
2112B	%vreg91<def> = COPY %vreg24; GPR32:%vreg91,%vreg24
	Considering merging to GPR32 with %vreg24 in %vreg91
		RHS = %vreg24 [1952r,2112r:0)  0@1952r
		LHS = %vreg91 [912r,960B:0)[1872B,2096r:2)[2112r,2176B:1)  0@912r 1@2112r 2@1872B-phi
		merge %vreg91:1@2112r into %vreg24:0@1952r --> @1952r
		interference at %vreg24:0@1952r
	Interference!
1072B	%vreg88<def> = COPY %vreg11; GPR32:%vreg88,%vreg11
	Considering merging to GPR32 with %vreg11 in %vreg88
		RHS = %vreg11 [416r,2464B:0)  0@416r
		LHS = %vreg88 [1072r,1120B:0)[1120B,1648r:2)[1664r,1744B:1)  0@1072r 1@1664r 2@1120B-phi
		merge %vreg88:0@1072r into %vreg11:0@416r --> @416r
		interference at %vreg88:1@1664r
	Interference!
1088B	%vreg89<def> = COPY %vreg86; GPR32:%vreg89,%vreg86
	Considering merging to GPR32 with %vreg86 in %vreg89
		RHS = %vreg86 [848r,896B:0)[960B,1760r:1)[1760r,1872B:2)  0@848r 1@960B-phi 2@1760r
		LHS = %vreg89 [1088r,1120B:0)[1120B,1280r:2)[1680r,1744B:1)  0@1088r 1@1680r 2@1120B-phi
		merge %vreg89:0@1088r into %vreg86:1@960B --> @960B
		interference at %vreg89:1@1680r
	Interference!
1104B	%vreg90<def> = COPY %vreg42:isub_hi; GPR32:%vreg90 FPR64_with_isub_hi_in_FPR32:%vreg42
	Considering merging to FPR64_with_isub_hi_in_FPR32 with %vreg90 in %vreg42:isub_hi
		RHS = %vreg90 [1104r,1120B:0)[1120B,1248r:1)[1248r,1744B:2)  0@1104r 1@1120B-phi 2@1248r
		LHS = %vreg42 [432r,480B:0)[480B,688B:3)[688B,768r:2)[768r,2464B:1)  0@432r 1@768r 2@688B-phi 3@480B-phi
		merge %vreg90:0@1104r into %vreg42:1@768r --> @768r
		interference at %vreg90:2@1248r
	Interference!
848B	%vreg86<def> = COPY %vreg84; GPR32:%vreg86,%vreg84
	Considering merging to GPR32 with %vreg84 in %vreg86
		RHS = %vreg84 [656r,688B:0)[688B,2208r:1)[2208r,2336B:2)  0@656r 1@688B-phi 2@2208r
		LHS = %vreg86 [848r,896B:0)[960B,1760r:1)[1760r,1872B:2)  0@848r 1@960B-phi 2@1760r
		merge %vreg86:0@848r into %vreg84:1@688B --> @688B
		interference at %vreg86:2@1760r
	Interference!
864B	%vreg87<def> = COPY %vreg42:isub_hi; GPR32:%vreg87 FPR64_with_isub_hi_in_FPR32:%vreg42
	Considering merging to FPR64_with_isub_hi_in_FPR32 with %vreg87 in %vreg42:isub_hi
		RHS = %vreg87 [864r,896B:0)[960B,1776r:1)[1776r,1872B:2)  0@864r 1@960B-phi 2@1776r
		LHS = %vreg42 [432r,480B:0)[480B,688B:3)[688B,768r:2)[768r,2464B:1)  0@432r 1@768r 2@688B-phi 3@480B-phi
		merge %vreg87:0@864r into %vreg42:1@768r --> @768r
		interference at %vreg87:2@1776r
	Interference!
912B	%vreg91<def> = COPY %vreg83; GPR32:%vreg91,%vreg83
	Considering merging to GPR32 with %vreg83 in %vreg91
		RHS = %vreg83 [640r,688B:0)[688B,2192r:1)[2192r,2336B:2)  0@640r 1@688B-phi 2@2192r
		LHS = %vreg91 [912r,960B:0)[1872B,2096r:2)[2112r,2176B:1)  0@912r 1@2112r 2@1872B-phi
		merge %vreg91:0@912r into %vreg83:1@688B --> @688B
		interference at %vreg91:1@2112r
	Interference!
928B	%vreg92<def> = COPY %vreg42:isub_hi; GPR32:%vreg92 FPR64_with_isub_hi_in_FPR32:%vreg42
	Considering merging to FPR64_with_isub_hi_in_FPR32 with %vreg92 in %vreg42:isub_hi
		RHS = %vreg92 [928r,960B:0)[1872B,1968r:1)[1968r,2176B:2)  0@928r 1@1872B-phi 2@1968r
		LHS = %vreg42 [432r,480B:0)[480B,688B:3)[688B,768r:2)[768r,2464B:1)  0@432r 1@768r 2@688B-phi 3@480B-phi
		merge %vreg92:0@928r into %vreg42:1@768r --> @768r
		interference at %vreg92:2@1968r
	Interference!
640B	%vreg83<def> = COPY %vreg81; GPR32:%vreg83,%vreg81
	Considering merging to GPR32 with %vreg81 in %vreg83
		RHS = %vreg81 [256r,480B:0)[480B,2352r:1)[2352r,2464B:2)  0@256r 1@480B-phi 2@2352r
		LHS = %vreg83 [640r,688B:0)[688B,2192r:1)[2192r,2336B:2)  0@640r 1@688B-phi 2@2192r
		merge %vreg83:0@640r into %vreg81:1@480B --> @480B
		interference at %vreg83:2@2192r
	Interference!
656B	%vreg84<def> = COPY %vreg0; GPR32:%vreg84,%vreg0
	Considering merging to GPR32 with %vreg0 in %vreg84
		RHS = %vreg0 [384r,2464B:0)  0@384r
		LHS = %vreg84 [656r,688B:0)[688B,2208r:1)[2208r,2336B:2)  0@656r 1@688B-phi 2@2208r
		merge %vreg84:0@656r into %vreg0:0@384r --> @384r
		interference at %vreg84:2@2208r
	Interference!
672B	%vreg85<def> = COPY %vreg42:isub_hi; GPR32:%vreg85 FPR64_with_isub_hi_in_FPR32:%vreg42
	Considering merging to FPR64_with_isub_hi_in_FPR32 with %vreg85 in %vreg42:isub_hi
		RHS = %vreg85 [672r,688B:0)[688B,2224r:1)[2224r,2336B:2)  0@672r 1@688B-phi 2@2224r
		LHS = %vreg42 [432r,480B:0)[480B,688B:3)[688B,768r:2)[768r,2464B:1)  0@432r 1@768r 2@688B-phi 3@480B-phi
		merge %vreg85:1@688B into %vreg42:2@688B --> @688B
		merge %vreg85:0@672r into %vreg42:3@480B --> @480B
		interference at %vreg85:2@2224r
	Interference!
464B	%vreg82<def> = COPY %vreg42:isub_hi; GPR32:%vreg82 FPR64_with_isub_hi_in_FPR32:%vreg42
	Considering merging to FPR64_with_isub_hi_in_FPR32 with %vreg82 in %vreg42:isub_hi
		RHS = %vreg82 [464r,480B:0)[480B,2368r:1)[2368r,2464B:2)  0@464r 1@480B-phi 2@2368r
		LHS = %vreg42 [432r,480B:0)[480B,688B:3)[688B,768r:2)[768r,2464B:1)  0@432r 1@768r 2@688B-phi 3@480B-phi
		merge %vreg42:3@480B into %vreg82:1@480B --> @480B
		merge %vreg82:0@464r into %vreg42:0@432r --> @432r
		interference at %vreg82:2@2368r
	Interference!
Trying to inflate 0 regs.
********** INTERVALS **********
R0 [0B,288r:0)  0@0B-phi
R1 [0B,272r:0)  0@0B-phi
R2 [0B,256r:0)  0@0B-phi
R3 [0B,240r:0)  0@0B-phi
%vreg0 [384r,2464B:0)  0@384r
%vreg1 [368r,2464B:0)  0@368r
%vreg5 [624r,2336B:0)  0@624r
%vreg11 [416r,2464B:0)  0@416r
%vreg12 [1056r,1744B:0)  0@1056r
%vreg17 [1216r,1680r:0)  0@1216r
%vreg18 [1200r,1664r:0)  0@1200r
%vreg24 [1952r,2112r:0)  0@1952r
%vreg30 [288r,2464B:0)  0@288r
%vreg31 [272r,384r:0)  0@272r
%vreg33 [240r,2464B:0)  0@240r
%vreg34 [304r,304d:0)  0@304r
%vreg36 [400r,2464B:0)  0@400r
%vreg38 [592r,608r:0)  0@592r
%vreg39 [608r,624r:0)  0@608r
%vreg42 [432r,480B:0)[480B,688B:3)[688B,768r:2)[768r,2464B:1)  0@432r 1@768r 2@688B-phi 3@480B-phi
%vreg44 [1008r,1024r:0)  0@1008r
%vreg45 [1024r,1056r:0)  0@1024r
%vreg46 [1184r,1424r:0)  0@1184r
%vreg47 [1232r,1456r:0)  0@1232r
%vreg48 [1264r,1552r:0)  0@1264r
%vreg49 [1280r,1616r:0)  0@1280r
%vreg55 [1520r,1552r:0)[1552r,1568r:1)  0@1520r 1@1552r
%vreg57 [1584r,1616r:0)[1616r,1648r:1)  0@1584r 1@1616r
%vreg58 [1632r,1632d:0)  0@1632r
%vreg59 [1792r,1792d:0)  0@1792r
%vreg62 [1920r,1936r:0)  0@1920r
%vreg63 [1936r,2064r:0)  0@1936r
%vreg64 [1984r,2064r:0)  0@1984r
%vreg65 [2064r,2096r:0)  0@2064r
%vreg66 [2080r,2080d:0)  0@2080r
%vreg67 [2240r,2240d:0)  0@2240r
%vreg68 [2384r,2384d:0)  0@2384r
%vreg73 [64r,96r:0)[96r,112r:1)  0@64r 1@96r
%vreg74 [528r,560r:0)  0@528r
%vreg75 [1344r,1376r:0)  0@1344r
%vreg76 [2000r,2032r:0)  0@2000r
%vreg77 [2480r,2512r:0)  0@2480r
%vreg78 [32r,112r:0)[112r,144r:1)[144r,192r:2)  0@32r 1@112r 2@144r
%vreg79 [1296r,1424r:0)[1424r,1456r:1)[1456r,1488r:2)  0@1296r 1@1424r 2@1456r
%vreg80 [1472r,1488r:1)[1488r,1504r:0)  0@1488r 1@1472r
%vreg81 [256r,480B:0)[480B,2352r:1)[2352r,2464B:2)  0@256r 1@480B-phi 2@2352r
%vreg82 [464r,480B:0)[480B,2368r:1)[2368r,2464B:2)  0@464r 1@480B-phi 2@2368r
%vreg83 [640r,688B:0)[688B,2192r:1)[2192r,2336B:2)  0@640r 1@688B-phi 2@2192r
%vreg84 [656r,688B:0)[688B,2208r:1)[2208r,2336B:2)  0@656r 1@688B-phi 2@2208r
%vreg85 [672r,688B:0)[688B,2224r:1)[2224r,2336B:2)  0@672r 1@688B-phi 2@2224r
%vreg86 [848r,896B:0)[960B,1760r:1)[1760r,1872B:2)  0@848r 1@960B-phi 2@1760r
%vreg87 [864r,896B:0)[960B,1776r:1)[1776r,1872B:2)  0@864r 1@960B-phi 2@1776r
%vreg88 [1072r,1120B:0)[1120B,1648r:2)[1664r,1744B:1)  0@1072r 1@1664r 2@1120B-phi
%vreg89 [1088r,1120B:0)[1120B,1280r:2)[1680r,1744B:1)  0@1088r 1@1680r 2@1120B-phi
%vreg90 [1104r,1120B:0)[1120B,1248r:1)[1248r,1744B:2)  0@1104r 1@1120B-phi 2@1248r
%vreg91 [912r,960B:0)[1872B,2096r:2)[2112r,2176B:1)  0@912r 1@2112r 2@1872B-phi
%vreg92 [928r,960B:0)[1872B,1968r:1)[1968r,2176B:2)  0@928r 1@1872B-phi 2@1968r
RegMasks:
********** MACHINEINSTRS **********
# Machine code for function matmac: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=32, align=8, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=4, align=8, at location [SP]
Function Live Ins: %R0 in %vreg30, %R1 in %vreg31, %R2 in %vreg32, %R3 in %vreg33

0B	BB#0: 
	    Live Ins: %R0 %R1 %R2 %R3
16B		GID %CONFIG<imp-def>
32B		%vreg78:isub_hi<def,read-undef> = MOVFS32_core %CONFIG; FPR64_with_isub_hi_in_FPR32:%vreg78
48B		STRi32_r32 %vreg78:isub_hi, <fi#1>, 0; mem:ST4[FixedStack1] FPR64_with_isub_hi_in_FPR32:%vreg78
64B		%vreg73<def> = MOVi32ri 65535; GPR32:%vreg73
96B		%vreg73<def,tied1> = MOVTi32ri %vreg73<tied0>, 65521; GPR32:%vreg73
112B		%vreg78:isub_lo<def> = ANDrr_r32 %vreg78:isub_hi, %vreg73, %STATUS<imp-def>; FPR64_with_isub_hi_in_FPR32:%vreg78 GPR32:%vreg73
144B		%vreg78:isub_hi<def,tied1> = MOVTi32ri %vreg78:isub_hi<tied0>, 72; FPR64_with_isub_hi_in_FPR32:%vreg78
192B		STRi64 %vreg78, <fi#3>, 0; mem:ST4[FixedStack3] ST4[FixedStack2] FPR64_with_isub_hi_in_FPR32:%vreg78
208B		GIE %CONFIG<imp-use,kill>
	    Successors according to CFG: BB#1(?%)

224B	BB#1: derived from LLVM BB %entry
	    Live Ins: %R0 %R1 %R2 %R3
	    Predecessors according to CFG: BB#0
240B		%vreg33<def> = COPY %R3; GPR32:%vreg33
256B		%vreg81<def> = COPY %R2; GPR32:%vreg81
272B		%vreg31<def> = COPY %R1; GPR32:%vreg31
288B		%vreg30<def> = COPY %R0; GPR32:%vreg30
304B		%vreg34<def,dead> = CMPri_r32 %vreg33, 1, %STATUS<imp-def>; GPR32:%vreg34,%vreg33
320B		BCC <BB#12>, 8, %STATUS<imp-use>
336B		BNONE32 <BB#2>, %STATUS<imp-use>
	    Successors according to CFG: BB#2(0x50000000 / 0x80000000 = 62.50%) BB#12(0x30000000 / 0x80000000 = 37.50%)

352B	BB#2: derived from LLVM BB %for.body3.lr.ph.preheader
	    Predecessors according to CFG: BB#1
368B		%vreg1<def> = LSL32ri %vreg33, 2, %STATUS<imp-def,dead>; GPR32:%vreg1,%vreg33
384B		%vreg0<def> = ADDri_r32 %vreg31, 8, %STATUS<imp-def,dead>; GPR32:%vreg0,%vreg31
400B		%vreg36<def> = MOViPTR <fi#0>, 0; GPR32:%vreg36
416B		%vreg11<def> = ADDri_r32 %vreg36, 8, %STATUS<imp-def,dead>; GPR32:%vreg11,%vreg36
432B		%vreg42:isub_hi<def,read-undef> = MOVi32ri 0; FPR64_with_isub_hi_in_FPR32:%vreg42
464B		%vreg82<def> = COPY %vreg42:isub_hi; GPR32:%vreg82 FPR64_with_isub_hi_in_FPR32:%vreg42
	    Successors according to CFG: BB#3(?%)

480B	BB#3: derived from LLVM BB %for.body3.lr.ph
	    Predecessors according to CFG: BB#2 BB#11
528B		%vreg74<def> = LDRi32_r32 <fi#3>, 0; mem:LD4[FixedStack3] GPR32:%vreg74
544B		GID %CONFIG<imp-def,dead>
560B		%CONFIG<def,dead> = MOVTS32_core %vreg74; GPR32:%vreg74
576B		GIE %CONFIG<imp-def,dead>
592B		%vreg38<def> = IMULrr_r32 %vreg82, %vreg33, %STATUS<imp-def,dead>; GPR32:%vreg38,%vreg82,%vreg33
608B		%vreg39<def> = LSL32ri %vreg38, 2, %STATUS<imp-def,dead>; GPR32:%vreg39,%vreg38
624B		%vreg5<def> = ADDrr_r32 %vreg30, %vreg39, %STATUS<imp-def,dead>; GPR32:%vreg5,%vreg30,%vreg39
640B		%vreg83<def> = COPY %vreg81; GPR32:%vreg83,%vreg81
656B		%vreg84<def> = COPY %vreg0; GPR32:%vreg84,%vreg0
672B		%vreg85<def> = COPY %vreg42:isub_hi; GPR32:%vreg85 FPR64_with_isub_hi_in_FPR32:%vreg42
	    Successors according to CFG: BB#4(?%)

688B	BB#4: derived from LLVM BB %for.body9.preheader
	    Predecessors according to CFG: BB#3 BB#10
768B		%vreg42:isub_lo<def> = COPY %vreg42:isub_hi; FPR64_with_isub_hi_in_FPR32:%vreg42
784B		STRi64 %vreg42, <fi#0>, 24; mem:ST8[%1+24] FPR64_with_isub_hi_in_FPR32:%vreg42
800B		STRi64 %vreg42, <fi#0>, 16; mem:ST8[%1+16] FPR64_with_isub_hi_in_FPR32:%vreg42
816B		STRi64 %vreg42, <fi#0>, 8; mem:ST8[%1+8] FPR64_with_isub_hi_in_FPR32:%vreg42
832B		STRi64 %vreg42, <fi#0>, 0; mem:ST8[%1] FPR64_with_isub_hi_in_FPR32:%vreg42
848B		%vreg86<def> = COPY %vreg84; GPR32:%vreg86,%vreg84
864B		%vreg87<def> = COPY %vreg42:isub_hi; GPR32:%vreg87 FPR64_with_isub_hi_in_FPR32:%vreg42
880B		BNONE32 <BB#6>, %STATUS<imp-use>
	    Successors according to CFG: BB#6(?%)

896B	BB#5: derived from LLVM BB %for.cond64.preheader
	    Predecessors according to CFG: BB#8
912B		%vreg91<def> = COPY %vreg83; GPR32:%vreg91,%vreg83
928B		%vreg92<def> = COPY %vreg42:isub_hi; GPR32:%vreg92 FPR64_with_isub_hi_in_FPR32:%vreg42
944B		BNONE32 <BB#9>, %STATUS<imp-use>
	    Successors according to CFG: BB#9(?%)

960B	BB#6: derived from LLVM BB %for.body9
	    Predecessors according to CFG: BB#4 BB#8
1008B		%vreg44<def> = LSL32ri %vreg87, 2, %STATUS<imp-def,dead>; GPR32:%vreg44,%vreg87
1024B		%vreg45<def> = ADDrr_r32 %vreg5, %vreg44, %STATUS<imp-def,dead>; GPR32:%vreg45,%vreg5,%vreg44
1056B		%vreg12<def> = LDRf32 %vreg45, 0; mem:Volatile LD4[%add.ptr10](tbaa=!2) FPR32:%vreg12 GPR32:%vreg45
1072B		%vreg88<def> = COPY %vreg11; GPR32:%vreg88,%vreg11
1088B		%vreg89<def> = COPY %vreg86; GPR32:%vreg89,%vreg86
1104B		%vreg90<def> = COPY %vreg42:isub_hi; GPR32:%vreg90 FPR64_with_isub_hi_in_FPR32:%vreg42
	    Successors according to CFG: BB#7(?%)

1120B	BB#7: derived from LLVM BB %for.body13
	    Predecessors according to CFG: BB#6 BB#7
1184B		%vreg46<def> = LDRf32 %vreg89, -8; mem:Volatile LD4[%scevgep8](tbaa=!2) FPR32:%vreg46 GPR32:%vreg89
1200B		%vreg18<def> = ADDri_r32 %vreg88, 16, %STATUS<imp-def,dead>; GPR32:%vreg18,%vreg88
1216B		%vreg17<def> = ADDri_r32 %vreg89, 16, %STATUS<imp-def,dead>; GPR32:%vreg17,%vreg89
1232B		%vreg47<def> = LDRf32 %vreg89, -4; mem:Volatile LD4[%scevgep9](tbaa=!2) FPR32:%vreg47 GPR32:%vreg89
1248B		%vreg90<def> = ADDri_r32 %vreg90, 4, %STATUS<imp-def,dead>; GPR32:%vreg90
1264B		%vreg48<def> = LDRf32 %vreg89, 0; mem:Volatile LD4[%lsr.iv5](tbaa=!2) FPR32:%vreg48 GPR32:%vreg89
1280B		%vreg49<def> = LDRf32 %vreg89, 4; mem:Volatile LD4[%scevgep7](tbaa=!2) FPR32:%vreg49 GPR32:%vreg89
1296B		%vreg79<def> = LDRf64 %vreg88, -8; mem:LD4[%scevgep17](tbaa=!2) LD4[%scevgep15](tbaa=!2) FPR64_with_isub_hi_in_FPR32:%vreg79 GPR32:%vreg88
1344B		%vreg75<def> = LDRi32_r32 <fi#2>, 0; mem:LD4[FixedStack2] GPR32:%vreg75
1360B		GID %CONFIG<imp-def,dead>
1376B		%CONFIG<def,dead> = MOVTS32_core %vreg75; GPR32:%vreg75
1392B		GIE %CONFIG<imp-def,dead>
1424B		%vreg79:isub_hi<def,tied1> = FMADDrr_r32 %vreg79:isub_hi<tied0>, %vreg12, %vreg46, %STATUS<imp-def,dead>; FPR64_with_isub_hi_in_FPR32:%vreg79 FPR32:%vreg12,%vreg46
1456B		%vreg79:isub_lo<def,tied1> = FMADDrr_r32 %vreg79:isub_lo<tied0>, %vreg12, %vreg47, %STATUS<imp-def,dead>; FPR64_with_isub_hi_in_FPR32:%vreg79 FPR32:%vreg12,%vreg47
1472B		%vreg80:isub_lo<def,read-undef> = COPY %vreg79:isub_hi; FPR64:%vreg80 FPR64_with_isub_hi_in_FPR32:%vreg79
1488B		%vreg80:isub_hi<def> = COPY %vreg79:isub_lo; FPR64:%vreg80 FPR64_with_isub_hi_in_FPR32:%vreg79
1504B		STRf64 %vreg80, %vreg88, -8; mem:ST4[%scevgep17](tbaa=!2) ST4[%scevgep15](tbaa=!2) FPR64:%vreg80 GPR32:%vreg88
1520B		%vreg55<def> = LDRf32 %vreg88, 0; mem:LD4[%lsr.iv1214](tbaa=!2) FPR32:%vreg55 GPR32:%vreg88
1552B		%vreg55<def,tied1> = FMADDrr_r32 %vreg55<tied0>, %vreg12, %vreg48, %STATUS<imp-def,dead>; FPR32:%vreg55,%vreg12,%vreg48
1568B		STRf32 %vreg55, %vreg88, 0; mem:ST4[%lsr.iv1214](tbaa=!2) FPR32:%vreg55 GPR32:%vreg88
1584B		%vreg57<def> = LDRf32 %vreg88, 4; mem:LD4[%scevgep16](tbaa=!2) FPR32:%vreg57 GPR32:%vreg88
1616B		%vreg57<def,tied1> = FMADDrr_r32 %vreg57<tied0>, %vreg12, %vreg49, %STATUS<imp-def,dead>; FPR32:%vreg57,%vreg12,%vreg49
1632B		%vreg58<def,dead> = CMPri_r32 %vreg90, 8, %STATUS<imp-def>; GPR32:%vreg58,%vreg90
1648B		STRf32 %vreg57, %vreg88, 4; mem:ST4[%scevgep16](tbaa=!2) FPR32:%vreg57 GPR32:%vreg88
1664B		%vreg88<def> = COPY %vreg18; GPR32:%vreg88,%vreg18
1680B		%vreg89<def> = COPY %vreg17; GPR32:%vreg89,%vreg17
1712B		BCC <BB#7>, 8, %STATUS<imp-use>
1728B		BNONE32 <BB#8>, %STATUS<imp-use>
	    Successors according to CFG: BB#7(0x7c000000 / 0x80000000 = 96.88%) BB#8(0x04000000 / 0x80000000 = 3.12%)

1744B	BB#8: derived from LLVM BB %for.end60
	    Predecessors according to CFG: BB#7
1760B		%vreg86<def> = ADDrr_r32 %vreg86, %vreg1, %STATUS<imp-def,dead>; GPR32:%vreg86,%vreg1
1776B		%vreg87<def> = ADDri_r32 %vreg87, 1, %STATUS<imp-def,dead>; GPR32:%vreg87
1792B		%vreg59<def,dead> = CMPrr_r32 %vreg87, %vreg33, %STATUS<imp-def>; GPR32:%vreg59,%vreg87,%vreg33
1840B		BCC <BB#5>, 0, %STATUS<imp-use>
1856B		BNONE32 <BB#6>, %STATUS<imp-use>
	    Successors according to CFG: BB#5(0x04000000 / 0x80000000 = 3.12%) BB#6(0x7c000000 / 0x80000000 = 96.88%)

1872B	BB#9: derived from LLVM BB %for.body66
	    Predecessors according to CFG: BB#5 BB#9
1920B		%vreg62<def> = ADDrr_r32 %vreg36, %vreg92, %STATUS<imp-def,dead>; GPR32:%vreg62,%vreg36,%vreg92
1936B		%vreg63<def> = LDRf32 %vreg62, 0; mem:LD4[%sunkaddr30](tbaa=!2) FPR32:%vreg63 GPR32:%vreg62
1952B		%vreg24<def> = ADDri_r32 %vreg91, 4, %STATUS<imp-def,dead>; GPR32:%vreg24,%vreg91
1968B		%vreg92<def> = ADDri_r32 %vreg92, 4, %STATUS<imp-def,dead>; GPR32:%vreg92
1984B		%vreg64<def> = LDRf32 %vreg91, 0; mem:Volatile LD4[%lsr.iv24](tbaa=!2) FPR32:%vreg64 GPR32:%vreg91
2000B		%vreg76<def> = LDRi32_r32 <fi#2>, 0; mem:LD4[FixedStack2] GPR32:%vreg76
2016B		GID %CONFIG<imp-def,dead>
2032B		%CONFIG<def,dead> = MOVTS32_core %vreg76; GPR32:%vreg76
2048B		GIE %CONFIG<imp-def,dead>
2064B		%vreg65<def> = FADDrr_r32 %vreg63, %vreg64, %STATUS<imp-def,dead>; FPR32:%vreg65,%vreg63,%vreg64
2080B		%vreg66<def,dead> = CMPri_r32 %vreg92, 32, %STATUS<imp-def>; GPR32:%vreg66,%vreg92
2096B		STRf32 %vreg65, %vreg91, 0; mem:Volatile ST4[%lsr.iv24](tbaa=!2) FPR32:%vreg65 GPR32:%vreg91
2112B		%vreg91<def> = COPY %vreg24; GPR32:%vreg91,%vreg24
2144B		BCC <BB#9>, 1, %STATUS<imp-use>
2160B		BNONE32 <BB#10>, %STATUS<imp-use>
	    Successors according to CFG: BB#10(0x04000000 / 0x80000000 = 3.12%) BB#9(0x7c000000 / 0x80000000 = 96.88%)

2176B	BB#10: derived from LLVM BB %for.end75
	    Predecessors according to CFG: BB#9
2192B		%vreg83<def> = ADDri_r32 %vreg83, 32, %STATUS<imp-def,dead>; GPR32:%vreg83
2208B		%vreg84<def> = ADDri_r32 %vreg84, 32, %STATUS<imp-def,dead>; GPR32:%vreg84
2224B		%vreg85<def> = ADDri_r32 %vreg85, 8, %STATUS<imp-def,dead>; GPR32:%vreg85
2240B		%vreg67<def,dead> = CMPrr_r32 %vreg85, %vreg33, %STATUS<imp-def>; GPR32:%vreg67,%vreg85,%vreg33
2304B		BCC <BB#4>, 8, %STATUS<imp-use>
2320B		BNONE32 <BB#11>, %STATUS<imp-use>
	    Successors according to CFG: BB#4(0x7c000000 / 0x80000000 = 96.88%) BB#11(0x04000000 / 0x80000000 = 3.12%)

2336B	BB#11: derived from LLVM BB %for.end78
	    Predecessors according to CFG: BB#10
2352B		%vreg81<def> = ADDrr_r32 %vreg81, %vreg1, %STATUS<imp-def,dead>; GPR32:%vreg81,%vreg1
2368B		%vreg82<def> = ADDri_r32 %vreg82, 1, %STATUS<imp-def,dead>; GPR32:%vreg82
2384B		%vreg68<def,dead> = CMPrr_r32 %vreg82, %vreg33, %STATUS<imp-def>; GPR32:%vreg68,%vreg82,%vreg33
2432B		BCC <BB#3>, 1, %STATUS<imp-use>
2448B		BNONE32 <BB#12>, %STATUS<imp-use>
	    Successors according to CFG: BB#12(0x04000000 / 0x80000000 = 3.12%) BB#3(0x7c000000 / 0x80000000 = 96.88%)

2464B	BB#12: derived from LLVM BB %for.end81
	    Predecessors according to CFG: BB#1 BB#11
2480B		%vreg77<def> = LDRi32_r32 <fi#1>, 0; mem:LD4[FixedStack1] GPR32:%vreg77
2496B		GID
2512B		%CONFIG<def> = MOVTS32_core %vreg77; GPR32:%vreg77
2528B		GIE %CONFIG<imp-use,kill>
2544B		RTS

# End machine code for function matmac.

# *** IR Dump After Simple Register Coalescing ***:
# Machine code for function matmac: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=32, align=8, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=4, align=8, at location [SP]
Function Live Ins: %R0 in %vreg30, %R1 in %vreg31, %R2 in %vreg32, %R3 in %vreg33

0B	BB#0: 
	    Live Ins: %R0 %R1 %R2 %R3
16B		GID %CONFIG<imp-def>
32B		%vreg78:isub_hi<def,read-undef> = MOVFS32_core %CONFIG; FPR64_with_isub_hi_in_FPR32:%vreg78
48B		STRi32_r32 %vreg78:isub_hi, <fi#1>, 0; mem:ST4[FixedStack1] FPR64_with_isub_hi_in_FPR32:%vreg78
64B		%vreg73<def> = MOVi32ri 65535; GPR32:%vreg73
96B		%vreg73<def,tied1> = MOVTi32ri %vreg73<tied0>, 65521; GPR32:%vreg73
112B		%vreg78:isub_lo<def> = ANDrr_r32 %vreg78:isub_hi, %vreg73, %STATUS<imp-def>; FPR64_with_isub_hi_in_FPR32:%vreg78 GPR32:%vreg73
144B		%vreg78:isub_hi<def,tied1> = MOVTi32ri %vreg78:isub_hi<tied0>, 72; FPR64_with_isub_hi_in_FPR32:%vreg78
192B		STRi64 %vreg78, <fi#3>, 0; mem:ST4[FixedStack3] ST4[FixedStack2] FPR64_with_isub_hi_in_FPR32:%vreg78
208B		GIE %CONFIG<imp-use,kill>
	    Successors according to CFG: BB#1(?%)

224B	BB#1: derived from LLVM BB %entry
	    Live Ins: %R0 %R1 %R2 %R3
	    Predecessors according to CFG: BB#0
240B		%vreg33<def> = COPY %R3; GPR32:%vreg33
256B		%vreg81<def> = COPY %R2; GPR32:%vreg81
272B		%vreg31<def> = COPY %R1; GPR32:%vreg31
288B		%vreg30<def> = COPY %R0; GPR32:%vreg30
304B		%vreg34<def,dead> = CMPri_r32 %vreg33, 1, %STATUS<imp-def>; GPR32:%vreg34,%vreg33
320B		BCC <BB#12>, 8, %STATUS<imp-use>
336B		BNONE32 <BB#2>, %STATUS<imp-use>
	    Successors according to CFG: BB#2(0x50000000 / 0x80000000 = 62.50%) BB#12(0x30000000 / 0x80000000 = 37.50%)

352B	BB#2: derived from LLVM BB %for.body3.lr.ph.preheader
	    Predecessors according to CFG: BB#1
368B		%vreg1<def> = LSL32ri %vreg33, 2, %STATUS<imp-def,dead>; GPR32:%vreg1,%vreg33
384B		%vreg0<def> = ADDri_r32 %vreg31, 8, %STATUS<imp-def,dead>; GPR32:%vreg0,%vreg31
400B		%vreg36<def> = MOViPTR <fi#0>, 0; GPR32:%vreg36
416B		%vreg11<def> = ADDri_r32 %vreg36, 8, %STATUS<imp-def,dead>; GPR32:%vreg11,%vreg36
432B		%vreg42:isub_hi<def,read-undef> = MOVi32ri 0; FPR64_with_isub_hi_in_FPR32:%vreg42
464B		%vreg82<def> = COPY %vreg42:isub_hi; GPR32:%vreg82 FPR64_with_isub_hi_in_FPR32:%vreg42
	    Successors according to CFG: BB#3(?%)

480B	BB#3: derived from LLVM BB %for.body3.lr.ph
	    Predecessors according to CFG: BB#2 BB#11
528B		%vreg74<def> = LDRi32_r32 <fi#3>, 0; mem:LD4[FixedStack3] GPR32:%vreg74
544B		GID %CONFIG<imp-def,dead>
560B		%CONFIG<def,dead> = MOVTS32_core %vreg74; GPR32:%vreg74
576B		GIE %CONFIG<imp-def,dead>
592B		%vreg38<def> = IMULrr_r32 %vreg82, %vreg33, %STATUS<imp-def,dead>; GPR32:%vreg38,%vreg82,%vreg33
608B		%vreg39<def> = LSL32ri %vreg38, 2, %STATUS<imp-def,dead>; GPR32:%vreg39,%vreg38
624B		%vreg5<def> = ADDrr_r32 %vreg30, %vreg39, %STATUS<imp-def,dead>; GPR32:%vreg5,%vreg30,%vreg39
640B		%vreg83<def> = COPY %vreg81; GPR32:%vreg83,%vreg81
656B		%vreg84<def> = COPY %vreg0; GPR32:%vreg84,%vreg0
672B		%vreg85<def> = COPY %vreg42:isub_hi; GPR32:%vreg85 FPR64_with_isub_hi_in_FPR32:%vreg42
	    Successors according to CFG: BB#4(?%)

688B	BB#4: derived from LLVM BB %for.body9.preheader
	    Predecessors according to CFG: BB#3 BB#10
768B		%vreg42:isub_lo<def> = COPY %vreg42:isub_hi; FPR64_with_isub_hi_in_FPR32:%vreg42
784B		STRi64 %vreg42, <fi#0>, 24; mem:ST8[%1+24] FPR64_with_isub_hi_in_FPR32:%vreg42
800B		STRi64 %vreg42, <fi#0>, 16; mem:ST8[%1+16] FPR64_with_isub_hi_in_FPR32:%vreg42
816B		STRi64 %vreg42, <fi#0>, 8; mem:ST8[%1+8] FPR64_with_isub_hi_in_FPR32:%vreg42
832B		STRi64 %vreg42, <fi#0>, 0; mem:ST8[%1] FPR64_with_isub_hi_in_FPR32:%vreg42
848B		%vreg86<def> = COPY %vreg84; GPR32:%vreg86,%vreg84
864B		%vreg87<def> = COPY %vreg42:isub_hi; GPR32:%vreg87 FPR64_with_isub_hi_in_FPR32:%vreg42
880B		BNONE32 <BB#6>, %STATUS<imp-use>
	    Successors according to CFG: BB#6(?%)

896B	BB#5: derived from LLVM BB %for.cond64.preheader
	    Predecessors according to CFG: BB#8
912B		%vreg91<def> = COPY %vreg83; GPR32:%vreg91,%vreg83
928B		%vreg92<def> = COPY %vreg42:isub_hi; GPR32:%vreg92 FPR64_with_isub_hi_in_FPR32:%vreg42
944B		BNONE32 <BB#9>, %STATUS<imp-use>
	    Successors according to CFG: BB#9(?%)

960B	BB#6: derived from LLVM BB %for.body9
	    Predecessors according to CFG: BB#4 BB#8
1008B		%vreg44<def> = LSL32ri %vreg87, 2, %STATUS<imp-def,dead>; GPR32:%vreg44,%vreg87
1024B		%vreg45<def> = ADDrr_r32 %vreg5, %vreg44, %STATUS<imp-def,dead>; GPR32:%vreg45,%vreg5,%vreg44
1056B		%vreg12<def> = LDRf32 %vreg45, 0; mem:Volatile LD4[%add.ptr10](tbaa=!2) FPR32:%vreg12 GPR32:%vreg45
1072B		%vreg88<def> = COPY %vreg11; GPR32:%vreg88,%vreg11
1088B		%vreg89<def> = COPY %vreg86; GPR32:%vreg89,%vreg86
1104B		%vreg90<def> = COPY %vreg42:isub_hi; GPR32:%vreg90 FPR64_with_isub_hi_in_FPR32:%vreg42
	    Successors according to CFG: BB#7(?%)

1120B	BB#7: derived from LLVM BB %for.body13
	    Predecessors according to CFG: BB#6 BB#7
1184B		%vreg46<def> = LDRf32 %vreg89, -8; mem:Volatile LD4[%scevgep8](tbaa=!2) FPR32:%vreg46 GPR32:%vreg89
1200B		%vreg18<def> = ADDri_r32 %vreg88, 16, %STATUS<imp-def,dead>; GPR32:%vreg18,%vreg88
1216B		%vreg17<def> = ADDri_r32 %vreg89, 16, %STATUS<imp-def,dead>; GPR32:%vreg17,%vreg89
1232B		%vreg47<def> = LDRf32 %vreg89, -4; mem:Volatile LD4[%scevgep9](tbaa=!2) FPR32:%vreg47 GPR32:%vreg89
1248B		%vreg90<def> = ADDri_r32 %vreg90, 4, %STATUS<imp-def,dead>; GPR32:%vreg90
1264B		%vreg48<def> = LDRf32 %vreg89, 0; mem:Volatile LD4[%lsr.iv5](tbaa=!2) FPR32:%vreg48 GPR32:%vreg89
1280B		%vreg49<def> = LDRf32 %vreg89, 4; mem:Volatile LD4[%scevgep7](tbaa=!2) FPR32:%vreg49 GPR32:%vreg89
1296B		%vreg79<def> = LDRf64 %vreg88, -8; mem:LD4[%scevgep17](tbaa=!2) LD4[%scevgep15](tbaa=!2) FPR64_with_isub_hi_in_FPR32:%vreg79 GPR32:%vreg88
1344B		%vreg75<def> = LDRi32_r32 <fi#2>, 0; mem:LD4[FixedStack2] GPR32:%vreg75
1360B		GID %CONFIG<imp-def,dead>
1376B		%CONFIG<def,dead> = MOVTS32_core %vreg75; GPR32:%vreg75
1392B		GIE %CONFIG<imp-def,dead>
1424B		%vreg79:isub_hi<def,tied1> = FMADDrr_r32 %vreg79:isub_hi<tied0>, %vreg12, %vreg46, %STATUS<imp-def,dead>; FPR64_with_isub_hi_in_FPR32:%vreg79 FPR32:%vreg12,%vreg46
1456B		%vreg79:isub_lo<def,tied1> = FMADDrr_r32 %vreg79:isub_lo<tied0>, %vreg12, %vreg47, %STATUS<imp-def,dead>; FPR64_with_isub_hi_in_FPR32:%vreg79 FPR32:%vreg12,%vreg47
1472B		%vreg80:isub_lo<def,read-undef> = COPY %vreg79:isub_hi; FPR64:%vreg80 FPR64_with_isub_hi_in_FPR32:%vreg79
1488B		%vreg80:isub_hi<def> = COPY %vreg79:isub_lo; FPR64:%vreg80 FPR64_with_isub_hi_in_FPR32:%vreg79
1504B		STRf64 %vreg80, %vreg88, -8; mem:ST4[%scevgep17](tbaa=!2) ST4[%scevgep15](tbaa=!2) FPR64:%vreg80 GPR32:%vreg88
1520B		%vreg55<def> = LDRf32 %vreg88, 0; mem:LD4[%lsr.iv1214](tbaa=!2) FPR32:%vreg55 GPR32:%vreg88
1552B		%vreg55<def,tied1> = FMADDrr_r32 %vreg55<tied0>, %vreg12, %vreg48, %STATUS<imp-def,dead>; FPR32:%vreg55,%vreg12,%vreg48
1568B		STRf32 %vreg55, %vreg88, 0; mem:ST4[%lsr.iv1214](tbaa=!2) FPR32:%vreg55 GPR32:%vreg88
1584B		%vreg57<def> = LDRf32 %vreg88, 4; mem:LD4[%scevgep16](tbaa=!2) FPR32:%vreg57 GPR32:%vreg88
1616B		%vreg57<def,tied1> = FMADDrr_r32 %vreg57<tied0>, %vreg12, %vreg49, %STATUS<imp-def,dead>; FPR32:%vreg57,%vreg12,%vreg49
1632B		%vreg58<def,dead> = CMPri_r32 %vreg90, 8, %STATUS<imp-def>; GPR32:%vreg58,%vreg90
1648B		STRf32 %vreg57, %vreg88, 4; mem:ST4[%scevgep16](tbaa=!2) FPR32:%vreg57 GPR32:%vreg88
1664B		%vreg88<def> = COPY %vreg18; GPR32:%vreg88,%vreg18
1680B		%vreg89<def> = COPY %vreg17; GPR32:%vreg89,%vreg17
1712B		BCC <BB#7>, 8, %STATUS<imp-use>
1728B		BNONE32 <BB#8>, %STATUS<imp-use>
	    Successors according to CFG: BB#7(0x7c000000 / 0x80000000 = 96.88%) BB#8(0x04000000 / 0x80000000 = 3.12%)

1744B	BB#8: derived from LLVM BB %for.end60
	    Predecessors according to CFG: BB#7
1760B		%vreg86<def> = ADDrr_r32 %vreg86, %vreg1, %STATUS<imp-def,dead>; GPR32:%vreg86,%vreg1
1776B		%vreg87<def> = ADDri_r32 %vreg87, 1, %STATUS<imp-def,dead>; GPR32:%vreg87
1792B		%vreg59<def,dead> = CMPrr_r32 %vreg87, %vreg33, %STATUS<imp-def>; GPR32:%vreg59,%vreg87,%vreg33
1840B		BCC <BB#5>, 0, %STATUS<imp-use>
1856B		BNONE32 <BB#6>, %STATUS<imp-use>
	    Successors according to CFG: BB#5(0x04000000 / 0x80000000 = 3.12%) BB#6(0x7c000000 / 0x80000000 = 96.88%)

1872B	BB#9: derived from LLVM BB %for.body66
	    Predecessors according to CFG: BB#5 BB#9
1920B		%vreg62<def> = ADDrr_r32 %vreg36, %vreg92, %STATUS<imp-def,dead>; GPR32:%vreg62,%vreg36,%vreg92
1936B		%vreg63<def> = LDRf32 %vreg62, 0; mem:LD4[%sunkaddr30](tbaa=!2) FPR32:%vreg63 GPR32:%vreg62
1952B		%vreg24<def> = ADDri_r32 %vreg91, 4, %STATUS<imp-def,dead>; GPR32:%vreg24,%vreg91
1968B		%vreg92<def> = ADDri_r32 %vreg92, 4, %STATUS<imp-def,dead>; GPR32:%vreg92
1984B		%vreg64<def> = LDRf32 %vreg91, 0; mem:Volatile LD4[%lsr.iv24](tbaa=!2) FPR32:%vreg64 GPR32:%vreg91
2000B		%vreg76<def> = LDRi32_r32 <fi#2>, 0; mem:LD4[FixedStack2] GPR32:%vreg76
2016B		GID %CONFIG<imp-def,dead>
2032B		%CONFIG<def,dead> = MOVTS32_core %vreg76; GPR32:%vreg76
2048B		GIE %CONFIG<imp-def,dead>
2064B		%vreg65<def> = FADDrr_r32 %vreg63, %vreg64, %STATUS<imp-def,dead>; FPR32:%vreg65,%vreg63,%vreg64
2080B		%vreg66<def,dead> = CMPri_r32 %vreg92, 32, %STATUS<imp-def>; GPR32:%vreg66,%vreg92
2096B		STRf32 %vreg65, %vreg91, 0; mem:Volatile ST4[%lsr.iv24](tbaa=!2) FPR32:%vreg65 GPR32:%vreg91
2112B		%vreg91<def> = COPY %vreg24; GPR32:%vreg91,%vreg24
2144B		BCC <BB#9>, 1, %STATUS<imp-use>
2160B		BNONE32 <BB#10>, %STATUS<imp-use>
	    Successors according to CFG: BB#10(0x04000000 / 0x80000000 = 3.12%) BB#9(0x7c000000 / 0x80000000 = 96.88%)

2176B	BB#10: derived from LLVM BB %for.end75
	    Predecessors according to CFG: BB#9
2192B		%vreg83<def> = ADDri_r32 %vreg83, 32, %STATUS<imp-def,dead>; GPR32:%vreg83
2208B		%vreg84<def> = ADDri_r32 %vreg84, 32, %STATUS<imp-def,dead>; GPR32:%vreg84
2224B		%vreg85<def> = ADDri_r32 %vreg85, 8, %STATUS<imp-def,dead>; GPR32:%vreg85
2240B		%vreg67<def,dead> = CMPrr_r32 %vreg85, %vreg33, %STATUS<imp-def>; GPR32:%vreg67,%vreg85,%vreg33
2304B		BCC <BB#4>, 8, %STATUS<imp-use>
2320B		BNONE32 <BB#11>, %STATUS<imp-use>
	    Successors according to CFG: BB#4(0x7c000000 / 0x80000000 = 96.88%) BB#11(0x04000000 / 0x80000000 = 3.12%)

2336B	BB#11: derived from LLVM BB %for.end78
	    Predecessors according to CFG: BB#10
2352B		%vreg81<def> = ADDrr_r32 %vreg81, %vreg1, %STATUS<imp-def,dead>; GPR32:%vreg81,%vreg1
2368B		%vreg82<def> = ADDri_r32 %vreg82, 1, %STATUS<imp-def,dead>; GPR32:%vreg82
2384B		%vreg68<def,dead> = CMPrr_r32 %vreg82, %vreg33, %STATUS<imp-def>; GPR32:%vreg68,%vreg82,%vreg33
2432B		BCC <BB#3>, 1, %STATUS<imp-use>
2448B		BNONE32 <BB#12>, %STATUS<imp-use>
	    Successors according to CFG: BB#12(0x04000000 / 0x80000000 = 3.12%) BB#3(0x7c000000 / 0x80000000 = 96.88%)

2464B	BB#12: derived from LLVM BB %for.end81
	    Predecessors according to CFG: BB#1 BB#11
2480B		%vreg77<def> = LDRi32_r32 <fi#1>, 0; mem:LD4[FixedStack1] GPR32:%vreg77
2496B		GID
2512B		%CONFIG<def> = MOVTS32_core %vreg77; GPR32:%vreg77
2528B		GIE %CONFIG<imp-use,kill>
2544B		RTS

# End machine code for function matmac.

# *** IR Dump Before Rename Disconnected Subregister Components ***:
# Machine code for function matmac: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=32, align=8, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=4, align=8, at location [SP]
Function Live Ins: %R0 in %vreg30, %R1 in %vreg31, %R2 in %vreg32, %R3 in %vreg33

0B	BB#0: 
	    Live Ins: %R0 %R1 %R2 %R3
16B		GID %CONFIG<imp-def>
32B		%vreg78:isub_hi<def,read-undef> = MOVFS32_core %CONFIG; FPR64_with_isub_hi_in_FPR32:%vreg78
48B		STRi32_r32 %vreg78:isub_hi, <fi#1>, 0; mem:ST4[FixedStack1] FPR64_with_isub_hi_in_FPR32:%vreg78
64B		%vreg73<def> = MOVi32ri 65535; GPR32:%vreg73
96B		%vreg73<def,tied1> = MOVTi32ri %vreg73<tied0>, 65521; GPR32:%vreg73
112B		%vreg78:isub_lo<def> = ANDrr_r32 %vreg78:isub_hi, %vreg73, %STATUS<imp-def>; FPR64_with_isub_hi_in_FPR32:%vreg78 GPR32:%vreg73
144B		%vreg78:isub_hi<def,tied1> = MOVTi32ri %vreg78:isub_hi<tied0>, 72; FPR64_with_isub_hi_in_FPR32:%vreg78
192B		STRi64 %vreg78, <fi#3>, 0; mem:ST4[FixedStack3] ST4[FixedStack2] FPR64_with_isub_hi_in_FPR32:%vreg78
208B		GIE %CONFIG<imp-use,kill>
	    Successors according to CFG: BB#1(?%)

224B	BB#1: derived from LLVM BB %entry
	    Live Ins: %R0 %R1 %R2 %R3
	    Predecessors according to CFG: BB#0
240B		%vreg33<def> = COPY %R3; GPR32:%vreg33
256B		%vreg81<def> = COPY %R2; GPR32:%vreg81
272B		%vreg31<def> = COPY %R1; GPR32:%vreg31
288B		%vreg30<def> = COPY %R0; GPR32:%vreg30
304B		%vreg34<def,dead> = CMPri_r32 %vreg33, 1, %STATUS<imp-def>; GPR32:%vreg34,%vreg33
320B		BCC <BB#12>, 8, %STATUS<imp-use>
336B		BNONE32 <BB#2>, %STATUS<imp-use>
	    Successors according to CFG: BB#2(0x50000000 / 0x80000000 = 62.50%) BB#12(0x30000000 / 0x80000000 = 37.50%)

352B	BB#2: derived from LLVM BB %for.body3.lr.ph.preheader
	    Predecessors according to CFG: BB#1
368B		%vreg1<def> = LSL32ri %vreg33, 2, %STATUS<imp-def,dead>; GPR32:%vreg1,%vreg33
384B		%vreg0<def> = ADDri_r32 %vreg31, 8, %STATUS<imp-def,dead>; GPR32:%vreg0,%vreg31
400B		%vreg36<def> = MOViPTR <fi#0>, 0; GPR32:%vreg36
416B		%vreg11<def> = ADDri_r32 %vreg36, 8, %STATUS<imp-def,dead>; GPR32:%vreg11,%vreg36
432B		%vreg42:isub_hi<def,read-undef> = MOVi32ri 0; FPR64_with_isub_hi_in_FPR32:%vreg42
464B		%vreg82<def> = COPY %vreg42:isub_hi; GPR32:%vreg82 FPR64_with_isub_hi_in_FPR32:%vreg42
	    Successors according to CFG: BB#3(?%)

480B	BB#3: derived from LLVM BB %for.body3.lr.ph
	    Predecessors according to CFG: BB#2 BB#11
528B		%vreg74<def> = LDRi32_r32 <fi#3>, 0; mem:LD4[FixedStack3] GPR32:%vreg74
544B		GID %CONFIG<imp-def,dead>
560B		%CONFIG<def,dead> = MOVTS32_core %vreg74; GPR32:%vreg74
576B		GIE %CONFIG<imp-def,dead>
592B		%vreg38<def> = IMULrr_r32 %vreg82, %vreg33, %STATUS<imp-def,dead>; GPR32:%vreg38,%vreg82,%vreg33
608B		%vreg39<def> = LSL32ri %vreg38, 2, %STATUS<imp-def,dead>; GPR32:%vreg39,%vreg38
624B		%vreg5<def> = ADDrr_r32 %vreg30, %vreg39, %STATUS<imp-def,dead>; GPR32:%vreg5,%vreg30,%vreg39
640B		%vreg83<def> = COPY %vreg81; GPR32:%vreg83,%vreg81
656B		%vreg84<def> = COPY %vreg0; GPR32:%vreg84,%vreg0
672B		%vreg85<def> = COPY %vreg42:isub_hi; GPR32:%vreg85 FPR64_with_isub_hi_in_FPR32:%vreg42
	    Successors according to CFG: BB#4(?%)

688B	BB#4: derived from LLVM BB %for.body9.preheader
	    Predecessors according to CFG: BB#3 BB#10
768B		%vreg42:isub_lo<def> = COPY %vreg42:isub_hi; FPR64_with_isub_hi_in_FPR32:%vreg42
784B		STRi64 %vreg42, <fi#0>, 24; mem:ST8[%1+24] FPR64_with_isub_hi_in_FPR32:%vreg42
800B		STRi64 %vreg42, <fi#0>, 16; mem:ST8[%1+16] FPR64_with_isub_hi_in_FPR32:%vreg42
816B		STRi64 %vreg42, <fi#0>, 8; mem:ST8[%1+8] FPR64_with_isub_hi_in_FPR32:%vreg42
832B		STRi64 %vreg42, <fi#0>, 0; mem:ST8[%1] FPR64_with_isub_hi_in_FPR32:%vreg42
848B		%vreg86<def> = COPY %vreg84; GPR32:%vreg86,%vreg84
864B		%vreg87<def> = COPY %vreg42:isub_hi; GPR32:%vreg87 FPR64_with_isub_hi_in_FPR32:%vreg42
880B		BNONE32 <BB#6>, %STATUS<imp-use>
	    Successors according to CFG: BB#6(?%)

896B	BB#5: derived from LLVM BB %for.cond64.preheader
	    Predecessors according to CFG: BB#8
912B		%vreg91<def> = COPY %vreg83; GPR32:%vreg91,%vreg83
928B		%vreg92<def> = COPY %vreg42:isub_hi; GPR32:%vreg92 FPR64_with_isub_hi_in_FPR32:%vreg42
944B		BNONE32 <BB#9>, %STATUS<imp-use>
	    Successors according to CFG: BB#9(?%)

960B	BB#6: derived from LLVM BB %for.body9
	    Predecessors according to CFG: BB#4 BB#8
1008B		%vreg44<def> = LSL32ri %vreg87, 2, %STATUS<imp-def,dead>; GPR32:%vreg44,%vreg87
1024B		%vreg45<def> = ADDrr_r32 %vreg5, %vreg44, %STATUS<imp-def,dead>; GPR32:%vreg45,%vreg5,%vreg44
1056B		%vreg12<def> = LDRf32 %vreg45, 0; mem:Volatile LD4[%add.ptr10](tbaa=!2) FPR32:%vreg12 GPR32:%vreg45
1072B		%vreg88<def> = COPY %vreg11; GPR32:%vreg88,%vreg11
1088B		%vreg89<def> = COPY %vreg86; GPR32:%vreg89,%vreg86
1104B		%vreg90<def> = COPY %vreg42:isub_hi; GPR32:%vreg90 FPR64_with_isub_hi_in_FPR32:%vreg42
	    Successors according to CFG: BB#7(?%)

1120B	BB#7: derived from LLVM BB %for.body13
	    Predecessors according to CFG: BB#6 BB#7
1184B		%vreg46<def> = LDRf32 %vreg89, -8; mem:Volatile LD4[%scevgep8](tbaa=!2) FPR32:%vreg46 GPR32:%vreg89
1200B		%vreg18<def> = ADDri_r32 %vreg88, 16, %STATUS<imp-def,dead>; GPR32:%vreg18,%vreg88
1216B		%vreg17<def> = ADDri_r32 %vreg89, 16, %STATUS<imp-def,dead>; GPR32:%vreg17,%vreg89
1232B		%vreg47<def> = LDRf32 %vreg89, -4; mem:Volatile LD4[%scevgep9](tbaa=!2) FPR32:%vreg47 GPR32:%vreg89
1248B		%vreg90<def> = ADDri_r32 %vreg90, 4, %STATUS<imp-def,dead>; GPR32:%vreg90
1264B		%vreg48<def> = LDRf32 %vreg89, 0; mem:Volatile LD4[%lsr.iv5](tbaa=!2) FPR32:%vreg48 GPR32:%vreg89
1280B		%vreg49<def> = LDRf32 %vreg89, 4; mem:Volatile LD4[%scevgep7](tbaa=!2) FPR32:%vreg49 GPR32:%vreg89
1296B		%vreg79<def> = LDRf64 %vreg88, -8; mem:LD4[%scevgep17](tbaa=!2) LD4[%scevgep15](tbaa=!2) FPR64_with_isub_hi_in_FPR32:%vreg79 GPR32:%vreg88
1344B		%vreg75<def> = LDRi32_r32 <fi#2>, 0; mem:LD4[FixedStack2] GPR32:%vreg75
1360B		GID %CONFIG<imp-def,dead>
1376B		%CONFIG<def,dead> = MOVTS32_core %vreg75; GPR32:%vreg75
1392B		GIE %CONFIG<imp-def,dead>
1424B		%vreg79:isub_hi<def,tied1> = FMADDrr_r32 %vreg79:isub_hi<tied0>, %vreg12, %vreg46, %STATUS<imp-def,dead>; FPR64_with_isub_hi_in_FPR32:%vreg79 FPR32:%vreg12,%vreg46
1456B		%vreg79:isub_lo<def,tied1> = FMADDrr_r32 %vreg79:isub_lo<tied0>, %vreg12, %vreg47, %STATUS<imp-def,dead>; FPR64_with_isub_hi_in_FPR32:%vreg79 FPR32:%vreg12,%vreg47
1472B		%vreg80:isub_lo<def,read-undef> = COPY %vreg79:isub_hi; FPR64:%vreg80 FPR64_with_isub_hi_in_FPR32:%vreg79
1488B		%vreg80:isub_hi<def> = COPY %vreg79:isub_lo; FPR64:%vreg80 FPR64_with_isub_hi_in_FPR32:%vreg79
1504B		STRf64 %vreg80, %vreg88, -8; mem:ST4[%scevgep17](tbaa=!2) ST4[%scevgep15](tbaa=!2) FPR64:%vreg80 GPR32:%vreg88
1520B		%vreg55<def> = LDRf32 %vreg88, 0; mem:LD4[%lsr.iv1214](tbaa=!2) FPR32:%vreg55 GPR32:%vreg88
1552B		%vreg55<def,tied1> = FMADDrr_r32 %vreg55<tied0>, %vreg12, %vreg48, %STATUS<imp-def,dead>; FPR32:%vreg55,%vreg12,%vreg48
1568B		STRf32 %vreg55, %vreg88, 0; mem:ST4[%lsr.iv1214](tbaa=!2) FPR32:%vreg55 GPR32:%vreg88
1584B		%vreg57<def> = LDRf32 %vreg88, 4; mem:LD4[%scevgep16](tbaa=!2) FPR32:%vreg57 GPR32:%vreg88
1616B		%vreg57<def,tied1> = FMADDrr_r32 %vreg57<tied0>, %vreg12, %vreg49, %STATUS<imp-def,dead>; FPR32:%vreg57,%vreg12,%vreg49
1632B		%vreg58<def,dead> = CMPri_r32 %vreg90, 8, %STATUS<imp-def>; GPR32:%vreg58,%vreg90
1648B		STRf32 %vreg57, %vreg88, 4; mem:ST4[%scevgep16](tbaa=!2) FPR32:%vreg57 GPR32:%vreg88
1664B		%vreg88<def> = COPY %vreg18; GPR32:%vreg88,%vreg18
1680B		%vreg89<def> = COPY %vreg17; GPR32:%vreg89,%vreg17
1712B		BCC <BB#7>, 8, %STATUS<imp-use>
1728B		BNONE32 <BB#8>, %STATUS<imp-use>
	    Successors according to CFG: BB#7(0x7c000000 / 0x80000000 = 96.88%) BB#8(0x04000000 / 0x80000000 = 3.12%)

1744B	BB#8: derived from LLVM BB %for.end60
	    Predecessors according to CFG: BB#7
1760B		%vreg86<def> = ADDrr_r32 %vreg86, %vreg1, %STATUS<imp-def,dead>; GPR32:%vreg86,%vreg1
1776B		%vreg87<def> = ADDri_r32 %vreg87, 1, %STATUS<imp-def,dead>; GPR32:%vreg87
1792B		%vreg59<def,dead> = CMPrr_r32 %vreg87, %vreg33, %STATUS<imp-def>; GPR32:%vreg59,%vreg87,%vreg33
1840B		BCC <BB#5>, 0, %STATUS<imp-use>
1856B		BNONE32 <BB#6>, %STATUS<imp-use>
	    Successors according to CFG: BB#5(0x04000000 / 0x80000000 = 3.12%) BB#6(0x7c000000 / 0x80000000 = 96.88%)

1872B	BB#9: derived from LLVM BB %for.body66
	    Predecessors according to CFG: BB#5 BB#9
1920B		%vreg62<def> = ADDrr_r32 %vreg36, %vreg92, %STATUS<imp-def,dead>; GPR32:%vreg62,%vreg36,%vreg92
1936B		%vreg63<def> = LDRf32 %vreg62, 0; mem:LD4[%sunkaddr30](tbaa=!2) FPR32:%vreg63 GPR32:%vreg62
1952B		%vreg24<def> = ADDri_r32 %vreg91, 4, %STATUS<imp-def,dead>; GPR32:%vreg24,%vreg91
1968B		%vreg92<def> = ADDri_r32 %vreg92, 4, %STATUS<imp-def,dead>; GPR32:%vreg92
1984B		%vreg64<def> = LDRf32 %vreg91, 0; mem:Volatile LD4[%lsr.iv24](tbaa=!2) FPR32:%vreg64 GPR32:%vreg91
2000B		%vreg76<def> = LDRi32_r32 <fi#2>, 0; mem:LD4[FixedStack2] GPR32:%vreg76
2016B		GID %CONFIG<imp-def,dead>
2032B		%CONFIG<def,dead> = MOVTS32_core %vreg76; GPR32:%vreg76
2048B		GIE %CONFIG<imp-def,dead>
2064B		%vreg65<def> = FADDrr_r32 %vreg63, %vreg64, %STATUS<imp-def,dead>; FPR32:%vreg65,%vreg63,%vreg64
2080B		%vreg66<def,dead> = CMPri_r32 %vreg92, 32, %STATUS<imp-def>; GPR32:%vreg66,%vreg92
2096B		STRf32 %vreg65, %vreg91, 0; mem:Volatile ST4[%lsr.iv24](tbaa=!2) FPR32:%vreg65 GPR32:%vreg91
2112B		%vreg91<def> = COPY %vreg24; GPR32:%vreg91,%vreg24
2144B		BCC <BB#9>, 1, %STATUS<imp-use>
2160B		BNONE32 <BB#10>, %STATUS<imp-use>
	    Successors according to CFG: BB#10(0x04000000 / 0x80000000 = 3.12%) BB#9(0x7c000000 / 0x80000000 = 96.88%)

2176B	BB#10: derived from LLVM BB %for.end75
	    Predecessors according to CFG: BB#9
2192B		%vreg83<def> = ADDri_r32 %vreg83, 32, %STATUS<imp-def,dead>; GPR32:%vreg83
2208B		%vreg84<def> = ADDri_r32 %vreg84, 32, %STATUS<imp-def,dead>; GPR32:%vreg84
2224B		%vreg85<def> = ADDri_r32 %vreg85, 8, %STATUS<imp-def,dead>; GPR32:%vreg85
2240B		%vreg67<def,dead> = CMPrr_r32 %vreg85, %vreg33, %STATUS<imp-def>; GPR32:%vreg67,%vreg85,%vreg33
2304B		BCC <BB#4>, 8, %STATUS<imp-use>
2320B		BNONE32 <BB#11>, %STATUS<imp-use>
	    Successors according to CFG: BB#4(0x7c000000 / 0x80000000 = 96.88%) BB#11(0x04000000 / 0x80000000 = 3.12%)

2336B	BB#11: derived from LLVM BB %for.end78
	    Predecessors according to CFG: BB#10
2352B		%vreg81<def> = ADDrr_r32 %vreg81, %vreg1, %STATUS<imp-def,dead>; GPR32:%vreg81,%vreg1
2368B		%vreg82<def> = ADDri_r32 %vreg82, 1, %STATUS<imp-def,dead>; GPR32:%vreg82
2384B		%vreg68<def,dead> = CMPrr_r32 %vreg82, %vreg33, %STATUS<imp-def>; GPR32:%vreg68,%vreg82,%vreg33
2432B		BCC <BB#3>, 1, %STATUS<imp-use>
2448B		BNONE32 <BB#12>, %STATUS<imp-use>
	    Successors according to CFG: BB#12(0x04000000 / 0x80000000 = 3.12%) BB#3(0x7c000000 / 0x80000000 = 96.88%)

2464B	BB#12: derived from LLVM BB %for.end81
	    Predecessors according to CFG: BB#1 BB#11
2480B		%vreg77<def> = LDRi32_r32 <fi#1>, 0; mem:LD4[FixedStack1] GPR32:%vreg77
2496B		GID
2512B		%CONFIG<def> = MOVTS32_core %vreg77; GPR32:%vreg77
2528B		GIE %CONFIG<imp-use,kill>
2544B		RTS

# End machine code for function matmac.

# *** IR Dump After Rename Disconnected Subregister Components ***:
# Machine code for function matmac: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=32, align=8, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=4, align=8, at location [SP]
Function Live Ins: %R0 in %vreg30, %R1 in %vreg31, %R2 in %vreg32, %R3 in %vreg33

0B	BB#0: 
	    Live Ins: %R0 %R1 %R2 %R3
16B		GID %CONFIG<imp-def>
32B		%vreg78:isub_hi<def,read-undef> = MOVFS32_core %CONFIG; FPR64_with_isub_hi_in_FPR32:%vreg78
48B		STRi32_r32 %vreg78:isub_hi, <fi#1>, 0; mem:ST4[FixedStack1] FPR64_with_isub_hi_in_FPR32:%vreg78
64B		%vreg73<def> = MOVi32ri 65535; GPR32:%vreg73
96B		%vreg73<def,tied1> = MOVTi32ri %vreg73<tied0>, 65521; GPR32:%vreg73
112B		%vreg78:isub_lo<def> = ANDrr_r32 %vreg78:isub_hi, %vreg73, %STATUS<imp-def>; FPR64_with_isub_hi_in_FPR32:%vreg78 GPR32:%vreg73
144B		%vreg78:isub_hi<def,tied1> = MOVTi32ri %vreg78:isub_hi<tied0>, 72; FPR64_with_isub_hi_in_FPR32:%vreg78
192B		STRi64 %vreg78, <fi#3>, 0; mem:ST4[FixedStack3] ST4[FixedStack2] FPR64_with_isub_hi_in_FPR32:%vreg78
208B		GIE %CONFIG<imp-use,kill>
	    Successors according to CFG: BB#1(?%)

224B	BB#1: derived from LLVM BB %entry
	    Live Ins: %R0 %R1 %R2 %R3
	    Predecessors according to CFG: BB#0
240B		%vreg33<def> = COPY %R3; GPR32:%vreg33
256B		%vreg81<def> = COPY %R2; GPR32:%vreg81
272B		%vreg31<def> = COPY %R1; GPR32:%vreg31
288B		%vreg30<def> = COPY %R0; GPR32:%vreg30
304B		%vreg34<def,dead> = CMPri_r32 %vreg33, 1, %STATUS<imp-def>; GPR32:%vreg34,%vreg33
320B		BCC <BB#12>, 8, %STATUS<imp-use>
336B		BNONE32 <BB#2>, %STATUS<imp-use>
	    Successors according to CFG: BB#2(0x50000000 / 0x80000000 = 62.50%) BB#12(0x30000000 / 0x80000000 = 37.50%)

352B	BB#2: derived from LLVM BB %for.body3.lr.ph.preheader
	    Predecessors according to CFG: BB#1
368B		%vreg1<def> = LSL32ri %vreg33, 2, %STATUS<imp-def,dead>; GPR32:%vreg1,%vreg33
384B		%vreg0<def> = ADDri_r32 %vreg31, 8, %STATUS<imp-def,dead>; GPR32:%vreg0,%vreg31
400B		%vreg36<def> = MOViPTR <fi#0>, 0; GPR32:%vreg36
416B		%vreg11<def> = ADDri_r32 %vreg36, 8, %STATUS<imp-def,dead>; GPR32:%vreg11,%vreg36
432B		%vreg42:isub_hi<def,read-undef> = MOVi32ri 0; FPR64_with_isub_hi_in_FPR32:%vreg42
464B		%vreg82<def> = COPY %vreg42:isub_hi; GPR32:%vreg82 FPR64_with_isub_hi_in_FPR32:%vreg42
	    Successors according to CFG: BB#3(?%)

480B	BB#3: derived from LLVM BB %for.body3.lr.ph
	    Predecessors according to CFG: BB#2 BB#11
528B		%vreg74<def> = LDRi32_r32 <fi#3>, 0; mem:LD4[FixedStack3] GPR32:%vreg74
544B		GID %CONFIG<imp-def,dead>
560B		%CONFIG<def,dead> = MOVTS32_core %vreg74; GPR32:%vreg74
576B		GIE %CONFIG<imp-def,dead>
592B		%vreg38<def> = IMULrr_r32 %vreg82, %vreg33, %STATUS<imp-def,dead>; GPR32:%vreg38,%vreg82,%vreg33
608B		%vreg39<def> = LSL32ri %vreg38, 2, %STATUS<imp-def,dead>; GPR32:%vreg39,%vreg38
624B		%vreg5<def> = ADDrr_r32 %vreg30, %vreg39, %STATUS<imp-def,dead>; GPR32:%vreg5,%vreg30,%vreg39
640B		%vreg83<def> = COPY %vreg81; GPR32:%vreg83,%vreg81
656B		%vreg84<def> = COPY %vreg0; GPR32:%vreg84,%vreg0
672B		%vreg85<def> = COPY %vreg42:isub_hi; GPR32:%vreg85 FPR64_with_isub_hi_in_FPR32:%vreg42
	    Successors according to CFG: BB#4(?%)

688B	BB#4: derived from LLVM BB %for.body9.preheader
	    Predecessors according to CFG: BB#3 BB#10
768B		%vreg42:isub_lo<def> = COPY %vreg42:isub_hi; FPR64_with_isub_hi_in_FPR32:%vreg42
784B		STRi64 %vreg42, <fi#0>, 24; mem:ST8[%1+24] FPR64_with_isub_hi_in_FPR32:%vreg42
800B		STRi64 %vreg42, <fi#0>, 16; mem:ST8[%1+16] FPR64_with_isub_hi_in_FPR32:%vreg42
816B		STRi64 %vreg42, <fi#0>, 8; mem:ST8[%1+8] FPR64_with_isub_hi_in_FPR32:%vreg42
832B		STRi64 %vreg42, <fi#0>, 0; mem:ST8[%1] FPR64_with_isub_hi_in_FPR32:%vreg42
848B		%vreg86<def> = COPY %vreg84; GPR32:%vreg86,%vreg84
864B		%vreg87<def> = COPY %vreg42:isub_hi; GPR32:%vreg87 FPR64_with_isub_hi_in_FPR32:%vreg42
880B		BNONE32 <BB#6>, %STATUS<imp-use>
	    Successors according to CFG: BB#6(?%)

896B	BB#5: derived from LLVM BB %for.cond64.preheader
	    Predecessors according to CFG: BB#8
912B		%vreg91<def> = COPY %vreg83; GPR32:%vreg91,%vreg83
928B		%vreg92<def> = COPY %vreg42:isub_hi; GPR32:%vreg92 FPR64_with_isub_hi_in_FPR32:%vreg42
944B		BNONE32 <BB#9>, %STATUS<imp-use>
	    Successors according to CFG: BB#9(?%)

960B	BB#6: derived from LLVM BB %for.body9
	    Predecessors according to CFG: BB#4 BB#8
1008B		%vreg44<def> = LSL32ri %vreg87, 2, %STATUS<imp-def,dead>; GPR32:%vreg44,%vreg87
1024B		%vreg45<def> = ADDrr_r32 %vreg5, %vreg44, %STATUS<imp-def,dead>; GPR32:%vreg45,%vreg5,%vreg44
1056B		%vreg12<def> = LDRf32 %vreg45, 0; mem:Volatile LD4[%add.ptr10](tbaa=!2) FPR32:%vreg12 GPR32:%vreg45
1072B		%vreg88<def> = COPY %vreg11; GPR32:%vreg88,%vreg11
1088B		%vreg89<def> = COPY %vreg86; GPR32:%vreg89,%vreg86
1104B		%vreg90<def> = COPY %vreg42:isub_hi; GPR32:%vreg90 FPR64_with_isub_hi_in_FPR32:%vreg42
	    Successors according to CFG: BB#7(?%)

1120B	BB#7: derived from LLVM BB %for.body13
	    Predecessors according to CFG: BB#6 BB#7
1184B		%vreg46<def> = LDRf32 %vreg89, -8; mem:Volatile LD4[%scevgep8](tbaa=!2) FPR32:%vreg46 GPR32:%vreg89
1200B		%vreg18<def> = ADDri_r32 %vreg88, 16, %STATUS<imp-def,dead>; GPR32:%vreg18,%vreg88
1216B		%vreg17<def> = ADDri_r32 %vreg89, 16, %STATUS<imp-def,dead>; GPR32:%vreg17,%vreg89
1232B		%vreg47<def> = LDRf32 %vreg89, -4; mem:Volatile LD4[%scevgep9](tbaa=!2) FPR32:%vreg47 GPR32:%vreg89
1248B		%vreg90<def> = ADDri_r32 %vreg90, 4, %STATUS<imp-def,dead>; GPR32:%vreg90
1264B		%vreg48<def> = LDRf32 %vreg89, 0; mem:Volatile LD4[%lsr.iv5](tbaa=!2) FPR32:%vreg48 GPR32:%vreg89
1280B		%vreg49<def> = LDRf32 %vreg89, 4; mem:Volatile LD4[%scevgep7](tbaa=!2) FPR32:%vreg49 GPR32:%vreg89
1296B		%vreg79<def> = LDRf64 %vreg88, -8; mem:LD4[%scevgep17](tbaa=!2) LD4[%scevgep15](tbaa=!2) FPR64_with_isub_hi_in_FPR32:%vreg79 GPR32:%vreg88
1344B		%vreg75<def> = LDRi32_r32 <fi#2>, 0; mem:LD4[FixedStack2] GPR32:%vreg75
1360B		GID %CONFIG<imp-def,dead>
1376B		%CONFIG<def,dead> = MOVTS32_core %vreg75; GPR32:%vreg75
1392B		GIE %CONFIG<imp-def,dead>
1424B		%vreg79:isub_hi<def,tied1> = FMADDrr_r32 %vreg79:isub_hi<tied0>, %vreg12, %vreg46, %STATUS<imp-def,dead>; FPR64_with_isub_hi_in_FPR32:%vreg79 FPR32:%vreg12,%vreg46
1456B		%vreg79:isub_lo<def,tied1> = FMADDrr_r32 %vreg79:isub_lo<tied0>, %vreg12, %vreg47, %STATUS<imp-def,dead>; FPR64_with_isub_hi_in_FPR32:%vreg79 FPR32:%vreg12,%vreg47
1472B		%vreg80:isub_lo<def,read-undef> = COPY %vreg79:isub_hi; FPR64:%vreg80 FPR64_with_isub_hi_in_FPR32:%vreg79
1488B		%vreg80:isub_hi<def> = COPY %vreg79:isub_lo; FPR64:%vreg80 FPR64_with_isub_hi_in_FPR32:%vreg79
1504B		STRf64 %vreg80, %vreg88, -8; mem:ST4[%scevgep17](tbaa=!2) ST4[%scevgep15](tbaa=!2) FPR64:%vreg80 GPR32:%vreg88
1520B		%vreg55<def> = LDRf32 %vreg88, 0; mem:LD4[%lsr.iv1214](tbaa=!2) FPR32:%vreg55 GPR32:%vreg88
1552B		%vreg55<def,tied1> = FMADDrr_r32 %vreg55<tied0>, %vreg12, %vreg48, %STATUS<imp-def,dead>; FPR32:%vreg55,%vreg12,%vreg48
1568B		STRf32 %vreg55, %vreg88, 0; mem:ST4[%lsr.iv1214](tbaa=!2) FPR32:%vreg55 GPR32:%vreg88
1584B		%vreg57<def> = LDRf32 %vreg88, 4; mem:LD4[%scevgep16](tbaa=!2) FPR32:%vreg57 GPR32:%vreg88
1616B		%vreg57<def,tied1> = FMADDrr_r32 %vreg57<tied0>, %vreg12, %vreg49, %STATUS<imp-def,dead>; FPR32:%vreg57,%vreg12,%vreg49
1632B		%vreg58<def,dead> = CMPri_r32 %vreg90, 8, %STATUS<imp-def>; GPR32:%vreg58,%vreg90
1648B		STRf32 %vreg57, %vreg88, 4; mem:ST4[%scevgep16](tbaa=!2) FPR32:%vreg57 GPR32:%vreg88
1664B		%vreg88<def> = COPY %vreg18; GPR32:%vreg88,%vreg18
1680B		%vreg89<def> = COPY %vreg17; GPR32:%vreg89,%vreg17
1712B		BCC <BB#7>, 8, %STATUS<imp-use>
1728B		BNONE32 <BB#8>, %STATUS<imp-use>
	    Successors according to CFG: BB#7(0x7c000000 / 0x80000000 = 96.88%) BB#8(0x04000000 / 0x80000000 = 3.12%)

1744B	BB#8: derived from LLVM BB %for.end60
	    Predecessors according to CFG: BB#7
1760B		%vreg86<def> = ADDrr_r32 %vreg86, %vreg1, %STATUS<imp-def,dead>; GPR32:%vreg86,%vreg1
1776B		%vreg87<def> = ADDri_r32 %vreg87, 1, %STATUS<imp-def,dead>; GPR32:%vreg87
1792B		%vreg59<def,dead> = CMPrr_r32 %vreg87, %vreg33, %STATUS<imp-def>; GPR32:%vreg59,%vreg87,%vreg33
1840B		BCC <BB#5>, 0, %STATUS<imp-use>
1856B		BNONE32 <BB#6>, %STATUS<imp-use>
	    Successors according to CFG: BB#5(0x04000000 / 0x80000000 = 3.12%) BB#6(0x7c000000 / 0x80000000 = 96.88%)

1872B	BB#9: derived from LLVM BB %for.body66
	    Predecessors according to CFG: BB#5 BB#9
1920B		%vreg62<def> = ADDrr_r32 %vreg36, %vreg92, %STATUS<imp-def,dead>; GPR32:%vreg62,%vreg36,%vreg92
1936B		%vreg63<def> = LDRf32 %vreg62, 0; mem:LD4[%sunkaddr30](tbaa=!2) FPR32:%vreg63 GPR32:%vreg62
1952B		%vreg24<def> = ADDri_r32 %vreg91, 4, %STATUS<imp-def,dead>; GPR32:%vreg24,%vreg91
1968B		%vreg92<def> = ADDri_r32 %vreg92, 4, %STATUS<imp-def,dead>; GPR32:%vreg92
1984B		%vreg64<def> = LDRf32 %vreg91, 0; mem:Volatile LD4[%lsr.iv24](tbaa=!2) FPR32:%vreg64 GPR32:%vreg91
2000B		%vreg76<def> = LDRi32_r32 <fi#2>, 0; mem:LD4[FixedStack2] GPR32:%vreg76
2016B		GID %CONFIG<imp-def,dead>
2032B		%CONFIG<def,dead> = MOVTS32_core %vreg76; GPR32:%vreg76
2048B		GIE %CONFIG<imp-def,dead>
2064B		%vreg65<def> = FADDrr_r32 %vreg63, %vreg64, %STATUS<imp-def,dead>; FPR32:%vreg65,%vreg63,%vreg64
2080B		%vreg66<def,dead> = CMPri_r32 %vreg92, 32, %STATUS<imp-def>; GPR32:%vreg66,%vreg92
2096B		STRf32 %vreg65, %vreg91, 0; mem:Volatile ST4[%lsr.iv24](tbaa=!2) FPR32:%vreg65 GPR32:%vreg91
2112B		%vreg91<def> = COPY %vreg24; GPR32:%vreg91,%vreg24
2144B		BCC <BB#9>, 1, %STATUS<imp-use>
2160B		BNONE32 <BB#10>, %STATUS<imp-use>
	    Successors according to CFG: BB#10(0x04000000 / 0x80000000 = 3.12%) BB#9(0x7c000000 / 0x80000000 = 96.88%)

2176B	BB#10: derived from LLVM BB %for.end75
	    Predecessors according to CFG: BB#9
2192B		%vreg83<def> = ADDri_r32 %vreg83, 32, %STATUS<imp-def,dead>; GPR32:%vreg83
2208B		%vreg84<def> = ADDri_r32 %vreg84, 32, %STATUS<imp-def,dead>; GPR32:%vreg84
2224B		%vreg85<def> = ADDri_r32 %vreg85, 8, %STATUS<imp-def,dead>; GPR32:%vreg85
2240B		%vreg67<def,dead> = CMPrr_r32 %vreg85, %vreg33, %STATUS<imp-def>; GPR32:%vreg67,%vreg85,%vreg33
2304B		BCC <BB#4>, 8, %STATUS<imp-use>
2320B		BNONE32 <BB#11>, %STATUS<imp-use>
	    Successors according to CFG: BB#4(0x7c000000 / 0x80000000 = 96.88%) BB#11(0x04000000 / 0x80000000 = 3.12%)

2336B	BB#11: derived from LLVM BB %for.end78
	    Predecessors according to CFG: BB#10
2352B		%vreg81<def> = ADDrr_r32 %vreg81, %vreg1, %STATUS<imp-def,dead>; GPR32:%vreg81,%vreg1
2368B		%vreg82<def> = ADDri_r32 %vreg82, 1, %STATUS<imp-def,dead>; GPR32:%vreg82
2384B		%vreg68<def,dead> = CMPrr_r32 %vreg82, %vreg33, %STATUS<imp-def>; GPR32:%vreg68,%vreg82,%vreg33
2432B		BCC <BB#3>, 1, %STATUS<imp-use>
2448B		BNONE32 <BB#12>, %STATUS<imp-use>
	    Successors according to CFG: BB#12(0x04000000 / 0x80000000 = 3.12%) BB#3(0x7c000000 / 0x80000000 = 96.88%)

2464B	BB#12: derived from LLVM BB %for.end81
	    Predecessors according to CFG: BB#1 BB#11
2480B		%vreg77<def> = LDRi32_r32 <fi#1>, 0; mem:LD4[FixedStack1] GPR32:%vreg77
2496B		GID
2512B		%CONFIG<def> = MOVTS32_core %vreg77; GPR32:%vreg77
2528B		GIE %CONFIG<imp-use,kill>
2544B		RTS

# End machine code for function matmac.

# *** IR Dump Before Machine Instruction Scheduler ***:
# Machine code for function matmac: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=32, align=8, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=4, align=8, at location [SP]
Function Live Ins: %R0 in %vreg30, %R1 in %vreg31, %R2 in %vreg32, %R3 in %vreg33

0B	BB#0: 
	    Live Ins: %R0 %R1 %R2 %R3
16B		GID %CONFIG<imp-def>
32B		%vreg78:isub_hi<def,read-undef> = MOVFS32_core %CONFIG; FPR64_with_isub_hi_in_FPR32:%vreg78
48B		STRi32_r32 %vreg78:isub_hi, <fi#1>, 0; mem:ST4[FixedStack1] FPR64_with_isub_hi_in_FPR32:%vreg78
64B		%vreg73<def> = MOVi32ri 65535; GPR32:%vreg73
96B		%vreg73<def,tied1> = MOVTi32ri %vreg73<tied0>, 65521; GPR32:%vreg73
112B		%vreg78:isub_lo<def> = ANDrr_r32 %vreg78:isub_hi, %vreg73, %STATUS<imp-def>; FPR64_with_isub_hi_in_FPR32:%vreg78 GPR32:%vreg73
144B		%vreg78:isub_hi<def,tied1> = MOVTi32ri %vreg78:isub_hi<tied0>, 72; FPR64_with_isub_hi_in_FPR32:%vreg78
192B		STRi64 %vreg78, <fi#3>, 0; mem:ST4[FixedStack3] ST4[FixedStack2] FPR64_with_isub_hi_in_FPR32:%vreg78
208B		GIE %CONFIG<imp-use,kill>
	    Successors according to CFG: BB#1(?%)

224B	BB#1: derived from LLVM BB %entry
	    Live Ins: %R0 %R1 %R2 %R3
	    Predecessors according to CFG: BB#0
240B		%vreg33<def> = COPY %R3; GPR32:%vreg33
256B		%vreg81<def> = COPY %R2; GPR32:%vreg81
272B		%vreg31<def> = COPY %R1; GPR32:%vreg31
288B		%vreg30<def> = COPY %R0; GPR32:%vreg30
304B		%vreg34<def,dead> = CMPri_r32 %vreg33, 1, %STATUS<imp-def>; GPR32:%vreg34,%vreg33
320B		BCC <BB#12>, 8, %STATUS<imp-use>
336B		BNONE32 <BB#2>, %STATUS<imp-use>
	    Successors according to CFG: BB#2(0x50000000 / 0x80000000 = 62.50%) BB#12(0x30000000 / 0x80000000 = 37.50%)

352B	BB#2: derived from LLVM BB %for.body3.lr.ph.preheader
	    Predecessors according to CFG: BB#1
368B		%vreg1<def> = LSL32ri %vreg33, 2, %STATUS<imp-def,dead>; GPR32:%vreg1,%vreg33
384B		%vreg0<def> = ADDri_r32 %vreg31, 8, %STATUS<imp-def,dead>; GPR32:%vreg0,%vreg31
400B		%vreg36<def> = MOViPTR <fi#0>, 0; GPR32:%vreg36
416B		%vreg11<def> = ADDri_r32 %vreg36, 8, %STATUS<imp-def,dead>; GPR32:%vreg11,%vreg36
432B		%vreg42:isub_hi<def,read-undef> = MOVi32ri 0; FPR64_with_isub_hi_in_FPR32:%vreg42
464B		%vreg82<def> = COPY %vreg42:isub_hi; GPR32:%vreg82 FPR64_with_isub_hi_in_FPR32:%vreg42
	    Successors according to CFG: BB#3(?%)

480B	BB#3: derived from LLVM BB %for.body3.lr.ph
	    Predecessors according to CFG: BB#2 BB#11
528B		%vreg74<def> = LDRi32_r32 <fi#3>, 0; mem:LD4[FixedStack3] GPR32:%vreg74
544B		GID %CONFIG<imp-def,dead>
560B		%CONFIG<def,dead> = MOVTS32_core %vreg74; GPR32:%vreg74
576B		GIE %CONFIG<imp-def,dead>
592B		%vreg38<def> = IMULrr_r32 %vreg82, %vreg33, %STATUS<imp-def,dead>; GPR32:%vreg38,%vreg82,%vreg33
608B		%vreg39<def> = LSL32ri %vreg38, 2, %STATUS<imp-def,dead>; GPR32:%vreg39,%vreg38
624B		%vreg5<def> = ADDrr_r32 %vreg30, %vreg39, %STATUS<imp-def,dead>; GPR32:%vreg5,%vreg30,%vreg39
640B		%vreg83<def> = COPY %vreg81; GPR32:%vreg83,%vreg81
656B		%vreg84<def> = COPY %vreg0; GPR32:%vreg84,%vreg0
672B		%vreg85<def> = COPY %vreg42:isub_hi; GPR32:%vreg85 FPR64_with_isub_hi_in_FPR32:%vreg42
	    Successors according to CFG: BB#4(?%)

688B	BB#4: derived from LLVM BB %for.body9.preheader
	    Predecessors according to CFG: BB#3 BB#10
768B		%vreg42:isub_lo<def> = COPY %vreg42:isub_hi; FPR64_with_isub_hi_in_FPR32:%vreg42
784B		STRi64 %vreg42, <fi#0>, 24; mem:ST8[%1+24] FPR64_with_isub_hi_in_FPR32:%vreg42
800B		STRi64 %vreg42, <fi#0>, 16; mem:ST8[%1+16] FPR64_with_isub_hi_in_FPR32:%vreg42
816B		STRi64 %vreg42, <fi#0>, 8; mem:ST8[%1+8] FPR64_with_isub_hi_in_FPR32:%vreg42
832B		STRi64 %vreg42, <fi#0>, 0; mem:ST8[%1] FPR64_with_isub_hi_in_FPR32:%vreg42
848B		%vreg86<def> = COPY %vreg84; GPR32:%vreg86,%vreg84
864B		%vreg87<def> = COPY %vreg42:isub_hi; GPR32:%vreg87 FPR64_with_isub_hi_in_FPR32:%vreg42
880B		BNONE32 <BB#6>, %STATUS<imp-use>
	    Successors according to CFG: BB#6(?%)

896B	BB#5: derived from LLVM BB %for.cond64.preheader
	    Predecessors according to CFG: BB#8
912B		%vreg91<def> = COPY %vreg83; GPR32:%vreg91,%vreg83
928B		%vreg92<def> = COPY %vreg42:isub_hi; GPR32:%vreg92 FPR64_with_isub_hi_in_FPR32:%vreg42
944B		BNONE32 <BB#9>, %STATUS<imp-use>
	    Successors according to CFG: BB#9(?%)

960B	BB#6: derived from LLVM BB %for.body9
	    Predecessors according to CFG: BB#4 BB#8
1008B		%vreg44<def> = LSL32ri %vreg87, 2, %STATUS<imp-def,dead>; GPR32:%vreg44,%vreg87
1024B		%vreg45<def> = ADDrr_r32 %vreg5, %vreg44, %STATUS<imp-def,dead>; GPR32:%vreg45,%vreg5,%vreg44
1056B		%vreg12<def> = LDRf32 %vreg45, 0; mem:Volatile LD4[%add.ptr10](tbaa=!2) FPR32:%vreg12 GPR32:%vreg45
1072B		%vreg88<def> = COPY %vreg11; GPR32:%vreg88,%vreg11
1088B		%vreg89<def> = COPY %vreg86; GPR32:%vreg89,%vreg86
1104B		%vreg90<def> = COPY %vreg42:isub_hi; GPR32:%vreg90 FPR64_with_isub_hi_in_FPR32:%vreg42
	    Successors according to CFG: BB#7(?%)

1120B	BB#7: derived from LLVM BB %for.body13
	    Predecessors according to CFG: BB#6 BB#7
1184B		%vreg46<def> = LDRf32 %vreg89, -8; mem:Volatile LD4[%scevgep8](tbaa=!2) FPR32:%vreg46 GPR32:%vreg89
1200B		%vreg18<def> = ADDri_r32 %vreg88, 16, %STATUS<imp-def,dead>; GPR32:%vreg18,%vreg88
1216B		%vreg17<def> = ADDri_r32 %vreg89, 16, %STATUS<imp-def,dead>; GPR32:%vreg17,%vreg89
1232B		%vreg47<def> = LDRf32 %vreg89, -4; mem:Volatile LD4[%scevgep9](tbaa=!2) FPR32:%vreg47 GPR32:%vreg89
1248B		%vreg90<def> = ADDri_r32 %vreg90, 4, %STATUS<imp-def,dead>; GPR32:%vreg90
1264B		%vreg48<def> = LDRf32 %vreg89, 0; mem:Volatile LD4[%lsr.iv5](tbaa=!2) FPR32:%vreg48 GPR32:%vreg89
1280B		%vreg49<def> = LDRf32 %vreg89, 4; mem:Volatile LD4[%scevgep7](tbaa=!2) FPR32:%vreg49 GPR32:%vreg89
1296B		%vreg79<def> = LDRf64 %vreg88, -8; mem:LD4[%scevgep17](tbaa=!2) LD4[%scevgep15](tbaa=!2) FPR64_with_isub_hi_in_FPR32:%vreg79 GPR32:%vreg88
1344B		%vreg75<def> = LDRi32_r32 <fi#2>, 0; mem:LD4[FixedStack2] GPR32:%vreg75
1360B		GID %CONFIG<imp-def,dead>
1376B		%CONFIG<def,dead> = MOVTS32_core %vreg75; GPR32:%vreg75
1392B		GIE %CONFIG<imp-def,dead>
1424B		%vreg79:isub_hi<def,tied1> = FMADDrr_r32 %vreg79:isub_hi<tied0>, %vreg12, %vreg46, %STATUS<imp-def,dead>; FPR64_with_isub_hi_in_FPR32:%vreg79 FPR32:%vreg12,%vreg46
1456B		%vreg79:isub_lo<def,tied1> = FMADDrr_r32 %vreg79:isub_lo<tied0>, %vreg12, %vreg47, %STATUS<imp-def,dead>; FPR64_with_isub_hi_in_FPR32:%vreg79 FPR32:%vreg12,%vreg47
1472B		%vreg80:isub_lo<def,read-undef> = COPY %vreg79:isub_hi; FPR64:%vreg80 FPR64_with_isub_hi_in_FPR32:%vreg79
1488B		%vreg80:isub_hi<def> = COPY %vreg79:isub_lo; FPR64:%vreg80 FPR64_with_isub_hi_in_FPR32:%vreg79
1504B		STRf64 %vreg80, %vreg88, -8; mem:ST4[%scevgep17](tbaa=!2) ST4[%scevgep15](tbaa=!2) FPR64:%vreg80 GPR32:%vreg88
1520B		%vreg55<def> = LDRf32 %vreg88, 0; mem:LD4[%lsr.iv1214](tbaa=!2) FPR32:%vreg55 GPR32:%vreg88
1552B		%vreg55<def,tied1> = FMADDrr_r32 %vreg55<tied0>, %vreg12, %vreg48, %STATUS<imp-def,dead>; FPR32:%vreg55,%vreg12,%vreg48
1568B		STRf32 %vreg55, %vreg88, 0; mem:ST4[%lsr.iv1214](tbaa=!2) FPR32:%vreg55 GPR32:%vreg88
1584B		%vreg57<def> = LDRf32 %vreg88, 4; mem:LD4[%scevgep16](tbaa=!2) FPR32:%vreg57 GPR32:%vreg88
1616B		%vreg57<def,tied1> = FMADDrr_r32 %vreg57<tied0>, %vreg12, %vreg49, %STATUS<imp-def,dead>; FPR32:%vreg57,%vreg12,%vreg49
1632B		%vreg58<def,dead> = CMPri_r32 %vreg90, 8, %STATUS<imp-def>; GPR32:%vreg58,%vreg90
1648B		STRf32 %vreg57, %vreg88, 4; mem:ST4[%scevgep16](tbaa=!2) FPR32:%vreg57 GPR32:%vreg88
1664B		%vreg88<def> = COPY %vreg18; GPR32:%vreg88,%vreg18
1680B		%vreg89<def> = COPY %vreg17; GPR32:%vreg89,%vreg17
1712B		BCC <BB#7>, 8, %STATUS<imp-use>
1728B		BNONE32 <BB#8>, %STATUS<imp-use>
	    Successors according to CFG: BB#7(0x7c000000 / 0x80000000 = 96.88%) BB#8(0x04000000 / 0x80000000 = 3.12%)

1744B	BB#8: derived from LLVM BB %for.end60
	    Predecessors according to CFG: BB#7
1760B		%vreg86<def> = ADDrr_r32 %vreg86, %vreg1, %STATUS<imp-def,dead>; GPR32:%vreg86,%vreg1
1776B		%vreg87<def> = ADDri_r32 %vreg87, 1, %STATUS<imp-def,dead>; GPR32:%vreg87
1792B		%vreg59<def,dead> = CMPrr_r32 %vreg87, %vreg33, %STATUS<imp-def>; GPR32:%vreg59,%vreg87,%vreg33
1840B		BCC <BB#5>, 0, %STATUS<imp-use>
1856B		BNONE32 <BB#6>, %STATUS<imp-use>
	    Successors according to CFG: BB#5(0x04000000 / 0x80000000 = 3.12%) BB#6(0x7c000000 / 0x80000000 = 96.88%)

1872B	BB#9: derived from LLVM BB %for.body66
	    Predecessors according to CFG: BB#5 BB#9
1920B		%vreg62<def> = ADDrr_r32 %vreg36, %vreg92, %STATUS<imp-def,dead>; GPR32:%vreg62,%vreg36,%vreg92
1936B		%vreg63<def> = LDRf32 %vreg62, 0; mem:LD4[%sunkaddr30](tbaa=!2) FPR32:%vreg63 GPR32:%vreg62
1952B		%vreg24<def> = ADDri_r32 %vreg91, 4, %STATUS<imp-def,dead>; GPR32:%vreg24,%vreg91
1968B		%vreg92<def> = ADDri_r32 %vreg92, 4, %STATUS<imp-def,dead>; GPR32:%vreg92
1984B		%vreg64<def> = LDRf32 %vreg91, 0; mem:Volatile LD4[%lsr.iv24](tbaa=!2) FPR32:%vreg64 GPR32:%vreg91
2000B		%vreg76<def> = LDRi32_r32 <fi#2>, 0; mem:LD4[FixedStack2] GPR32:%vreg76
2016B		GID %CONFIG<imp-def,dead>
2032B		%CONFIG<def,dead> = MOVTS32_core %vreg76; GPR32:%vreg76
2048B		GIE %CONFIG<imp-def,dead>
2064B		%vreg65<def> = FADDrr_r32 %vreg63, %vreg64, %STATUS<imp-def,dead>; FPR32:%vreg65,%vreg63,%vreg64
2080B		%vreg66<def,dead> = CMPri_r32 %vreg92, 32, %STATUS<imp-def>; GPR32:%vreg66,%vreg92
2096B		STRf32 %vreg65, %vreg91, 0; mem:Volatile ST4[%lsr.iv24](tbaa=!2) FPR32:%vreg65 GPR32:%vreg91
2112B		%vreg91<def> = COPY %vreg24; GPR32:%vreg91,%vreg24
2144B		BCC <BB#9>, 1, %STATUS<imp-use>
2160B		BNONE32 <BB#10>, %STATUS<imp-use>
	    Successors according to CFG: BB#10(0x04000000 / 0x80000000 = 3.12%) BB#9(0x7c000000 / 0x80000000 = 96.88%)

2176B	BB#10: derived from LLVM BB %for.end75
	    Predecessors according to CFG: BB#9
2192B		%vreg83<def> = ADDri_r32 %vreg83, 32, %STATUS<imp-def,dead>; GPR32:%vreg83
2208B		%vreg84<def> = ADDri_r32 %vreg84, 32, %STATUS<imp-def,dead>; GPR32:%vreg84
2224B		%vreg85<def> = ADDri_r32 %vreg85, 8, %STATUS<imp-def,dead>; GPR32:%vreg85
2240B		%vreg67<def,dead> = CMPrr_r32 %vreg85, %vreg33, %STATUS<imp-def>; GPR32:%vreg67,%vreg85,%vreg33
2304B		BCC <BB#4>, 8, %STATUS<imp-use>
2320B		BNONE32 <BB#11>, %STATUS<imp-use>
	    Successors according to CFG: BB#4(0x7c000000 / 0x80000000 = 96.88%) BB#11(0x04000000 / 0x80000000 = 3.12%)

2336B	BB#11: derived from LLVM BB %for.end78
	    Predecessors according to CFG: BB#10
2352B		%vreg81<def> = ADDrr_r32 %vreg81, %vreg1, %STATUS<imp-def,dead>; GPR32:%vreg81,%vreg1
2368B		%vreg82<def> = ADDri_r32 %vreg82, 1, %STATUS<imp-def,dead>; GPR32:%vreg82
2384B		%vreg68<def,dead> = CMPrr_r32 %vreg82, %vreg33, %STATUS<imp-def>; GPR32:%vreg68,%vreg82,%vreg33
2432B		BCC <BB#3>, 1, %STATUS<imp-use>
2448B		BNONE32 <BB#12>, %STATUS<imp-use>
	    Successors according to CFG: BB#12(0x04000000 / 0x80000000 = 3.12%) BB#3(0x7c000000 / 0x80000000 = 96.88%)

2464B	BB#12: derived from LLVM BB %for.end81
	    Predecessors according to CFG: BB#1 BB#11
2480B		%vreg77<def> = LDRi32_r32 <fi#1>, 0; mem:LD4[FixedStack1] GPR32:%vreg77
2496B		GID
2512B		%CONFIG<def> = MOVTS32_core %vreg77; GPR32:%vreg77
2528B		GIE %CONFIG<imp-use,kill>
2544B		RTS

# End machine code for function matmac.

# *** IR Dump After Machine Instruction Scheduler ***:
# Machine code for function matmac: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=32, align=8, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=4, align=8, at location [SP]
Function Live Ins: %R0 in %vreg30, %R1 in %vreg31, %R2 in %vreg32, %R3 in %vreg33

0B	BB#0: 
	    Live Ins: %R0 %R1 %R2 %R3
16B		GID %CONFIG<imp-def>
32B		%vreg78:isub_hi<def,read-undef> = MOVFS32_core %CONFIG; FPR64_with_isub_hi_in_FPR32:%vreg78
48B		STRi32_r32 %vreg78:isub_hi, <fi#1>, 0; mem:ST4[FixedStack1] FPR64_with_isub_hi_in_FPR32:%vreg78
64B		%vreg73<def> = MOVi32ri 65535; GPR32:%vreg73
96B		%vreg73<def,tied1> = MOVTi32ri %vreg73<tied0>, 65521; GPR32:%vreg73
112B		%vreg78:isub_lo<def> = ANDrr_r32 %vreg78:isub_hi, %vreg73, %STATUS<imp-def>; FPR64_with_isub_hi_in_FPR32:%vreg78 GPR32:%vreg73
144B		%vreg78:isub_hi<def,tied1> = MOVTi32ri %vreg78:isub_hi<tied0>, 72; FPR64_with_isub_hi_in_FPR32:%vreg78
192B		STRi64 %vreg78, <fi#3>, 0; mem:ST4[FixedStack3] ST4[FixedStack2] FPR64_with_isub_hi_in_FPR32:%vreg78
208B		GIE %CONFIG<imp-use,kill>
	    Successors according to CFG: BB#1(?%)

224B	BB#1: derived from LLVM BB %entry
	    Live Ins: %R0 %R1 %R2 %R3
	    Predecessors according to CFG: BB#0
240B		%vreg33<def> = COPY %R3; GPR32:%vreg33
256B		%vreg81<def> = COPY %R2; GPR32:%vreg81
272B		%vreg31<def> = COPY %R1; GPR32:%vreg31
288B		%vreg30<def> = COPY %R0; GPR32:%vreg30
304B		%vreg34<def,dead> = CMPri_r32 %vreg33, 1, %STATUS<imp-def>; GPR32:%vreg34,%vreg33
320B		BCC <BB#12>, 8, %STATUS<imp-use>
336B		BNONE32 <BB#2>, %STATUS<imp-use>
	    Successors according to CFG: BB#2(0x50000000 / 0x80000000 = 62.50%) BB#12(0x30000000 / 0x80000000 = 37.50%)

352B	BB#2: derived from LLVM BB %for.body3.lr.ph.preheader
	    Predecessors according to CFG: BB#1
368B		%vreg1<def> = LSL32ri %vreg33, 2, %STATUS<imp-def,dead>; GPR32:%vreg1,%vreg33
384B		%vreg0<def> = ADDri_r32 %vreg31, 8, %STATUS<imp-def,dead>; GPR32:%vreg0,%vreg31
400B		%vreg36<def> = MOViPTR <fi#0>, 0; GPR32:%vreg36
416B		%vreg11<def> = ADDri_r32 %vreg36, 8, %STATUS<imp-def,dead>; GPR32:%vreg11,%vreg36
432B		%vreg42:isub_hi<def,read-undef> = MOVi32ri 0; FPR64_with_isub_hi_in_FPR32:%vreg42
464B		%vreg82<def> = COPY %vreg42:isub_hi; GPR32:%vreg82 FPR64_with_isub_hi_in_FPR32:%vreg42
	    Successors according to CFG: BB#3(?%)

480B	BB#3: derived from LLVM BB %for.body3.lr.ph
	    Predecessors according to CFG: BB#2 BB#11
528B		%vreg74<def> = LDRi32_r32 <fi#3>, 0; mem:LD4[FixedStack3] GPR32:%vreg74
544B		GID %CONFIG<imp-def,dead>
560B		%CONFIG<def,dead> = MOVTS32_core %vreg74; GPR32:%vreg74
576B		GIE %CONFIG<imp-def,dead>
592B		%vreg38<def> = IMULrr_r32 %vreg82, %vreg33, %STATUS<imp-def,dead>; GPR32:%vreg38,%vreg82,%vreg33
608B		%vreg39<def> = LSL32ri %vreg38, 2, %STATUS<imp-def,dead>; GPR32:%vreg39,%vreg38
624B		%vreg5<def> = ADDrr_r32 %vreg30, %vreg39, %STATUS<imp-def,dead>; GPR32:%vreg5,%vreg30,%vreg39
640B		%vreg83<def> = COPY %vreg81; GPR32:%vreg83,%vreg81
656B		%vreg84<def> = COPY %vreg0; GPR32:%vreg84,%vreg0
672B		%vreg85<def> = COPY %vreg42:isub_hi; GPR32:%vreg85 FPR64_with_isub_hi_in_FPR32:%vreg42
	    Successors according to CFG: BB#4(?%)

688B	BB#4: derived from LLVM BB %for.body9.preheader
	    Predecessors according to CFG: BB#3 BB#10
768B		%vreg42:isub_lo<def> = COPY %vreg42:isub_hi; FPR64_with_isub_hi_in_FPR32:%vreg42
784B		STRi64 %vreg42, <fi#0>, 24; mem:ST8[%1+24] FPR64_with_isub_hi_in_FPR32:%vreg42
800B		STRi64 %vreg42, <fi#0>, 16; mem:ST8[%1+16] FPR64_with_isub_hi_in_FPR32:%vreg42
816B		STRi64 %vreg42, <fi#0>, 8; mem:ST8[%1+8] FPR64_with_isub_hi_in_FPR32:%vreg42
832B		STRi64 %vreg42, <fi#0>, 0; mem:ST8[%1] FPR64_with_isub_hi_in_FPR32:%vreg42
848B		%vreg86<def> = COPY %vreg84; GPR32:%vreg86,%vreg84
864B		%vreg87<def> = COPY %vreg42:isub_hi; GPR32:%vreg87 FPR64_with_isub_hi_in_FPR32:%vreg42
880B		BNONE32 <BB#6>, %STATUS<imp-use>
	    Successors according to CFG: BB#6(?%)

896B	BB#5: derived from LLVM BB %for.cond64.preheader
	    Predecessors according to CFG: BB#8
912B		%vreg91<def> = COPY %vreg83; GPR32:%vreg91,%vreg83
928B		%vreg92<def> = COPY %vreg42:isub_hi; GPR32:%vreg92 FPR64_with_isub_hi_in_FPR32:%vreg42
944B		BNONE32 <BB#9>, %STATUS<imp-use>
	    Successors according to CFG: BB#9(?%)

960B	BB#6: derived from LLVM BB %for.body9
	    Predecessors according to CFG: BB#4 BB#8
1008B		%vreg44<def> = LSL32ri %vreg87, 2, %STATUS<imp-def,dead>; GPR32:%vreg44,%vreg87
1024B		%vreg45<def> = ADDrr_r32 %vreg5, %vreg44, %STATUS<imp-def,dead>; GPR32:%vreg45,%vreg5,%vreg44
1056B		%vreg12<def> = LDRf32 %vreg45, 0; mem:Volatile LD4[%add.ptr10](tbaa=!2) FPR32:%vreg12 GPR32:%vreg45
1072B		%vreg88<def> = COPY %vreg11; GPR32:%vreg88,%vreg11
1088B		%vreg89<def> = COPY %vreg86; GPR32:%vreg89,%vreg86
1104B		%vreg90<def> = COPY %vreg42:isub_hi; GPR32:%vreg90 FPR64_with_isub_hi_in_FPR32:%vreg42
	    Successors according to CFG: BB#7(?%)

1120B	BB#7: derived from LLVM BB %for.body13
	    Predecessors according to CFG: BB#6 BB#7
1184B		%vreg46<def> = LDRf32 %vreg89, -8; mem:Volatile LD4[%scevgep8](tbaa=!2) FPR32:%vreg46 GPR32:%vreg89
1200B		%vreg18<def> = ADDri_r32 %vreg88, 16, %STATUS<imp-def,dead>; GPR32:%vreg18,%vreg88
1216B		%vreg17<def> = ADDri_r32 %vreg89, 16, %STATUS<imp-def,dead>; GPR32:%vreg17,%vreg89
1232B		%vreg47<def> = LDRf32 %vreg89, -4; mem:Volatile LD4[%scevgep9](tbaa=!2) FPR32:%vreg47 GPR32:%vreg89
1248B		%vreg90<def> = ADDri_r32 %vreg90, 4, %STATUS<imp-def,dead>; GPR32:%vreg90
1264B		%vreg48<def> = LDRf32 %vreg89, 0; mem:Volatile LD4[%lsr.iv5](tbaa=!2) FPR32:%vreg48 GPR32:%vreg89
1280B		%vreg49<def> = LDRf32 %vreg89, 4; mem:Volatile LD4[%scevgep7](tbaa=!2) FPR32:%vreg49 GPR32:%vreg89
1296B		%vreg79<def> = LDRf64 %vreg88, -8; mem:LD4[%scevgep17](tbaa=!2) LD4[%scevgep15](tbaa=!2) FPR64_with_isub_hi_in_FPR32:%vreg79 GPR32:%vreg88
1344B		%vreg75<def> = LDRi32_r32 <fi#2>, 0; mem:LD4[FixedStack2] GPR32:%vreg75
1360B		GID %CONFIG<imp-def,dead>
1376B		%CONFIG<def,dead> = MOVTS32_core %vreg75; GPR32:%vreg75
1392B		GIE %CONFIG<imp-def,dead>
1424B		%vreg79:isub_hi<def,tied1> = FMADDrr_r32 %vreg79:isub_hi<tied0>, %vreg12, %vreg46, %STATUS<imp-def,dead>; FPR64_with_isub_hi_in_FPR32:%vreg79 FPR32:%vreg12,%vreg46
1456B		%vreg79:isub_lo<def,tied1> = FMADDrr_r32 %vreg79:isub_lo<tied0>, %vreg12, %vreg47, %STATUS<imp-def,dead>; FPR64_with_isub_hi_in_FPR32:%vreg79 FPR32:%vreg12,%vreg47
1472B		%vreg80:isub_lo<def,read-undef> = COPY %vreg79:isub_hi; FPR64:%vreg80 FPR64_with_isub_hi_in_FPR32:%vreg79
1488B		%vreg80:isub_hi<def> = COPY %vreg79:isub_lo; FPR64:%vreg80 FPR64_with_isub_hi_in_FPR32:%vreg79
1504B		STRf64 %vreg80, %vreg88, -8; mem:ST4[%scevgep17](tbaa=!2) ST4[%scevgep15](tbaa=!2) FPR64:%vreg80 GPR32:%vreg88
1520B		%vreg55<def> = LDRf32 %vreg88, 0; mem:LD4[%lsr.iv1214](tbaa=!2) FPR32:%vreg55 GPR32:%vreg88
1552B		%vreg55<def,tied1> = FMADDrr_r32 %vreg55<tied0>, %vreg12, %vreg48, %STATUS<imp-def,dead>; FPR32:%vreg55,%vreg12,%vreg48
1568B		STRf32 %vreg55, %vreg88, 0; mem:ST4[%lsr.iv1214](tbaa=!2) FPR32:%vreg55 GPR32:%vreg88
1584B		%vreg57<def> = LDRf32 %vreg88, 4; mem:LD4[%scevgep16](tbaa=!2) FPR32:%vreg57 GPR32:%vreg88
1616B		%vreg57<def,tied1> = FMADDrr_r32 %vreg57<tied0>, %vreg12, %vreg49, %STATUS<imp-def,dead>; FPR32:%vreg57,%vreg12,%vreg49
1632B		%vreg58<def,dead> = CMPri_r32 %vreg90, 8, %STATUS<imp-def>; GPR32:%vreg58,%vreg90
1648B		STRf32 %vreg57, %vreg88, 4; mem:ST4[%scevgep16](tbaa=!2) FPR32:%vreg57 GPR32:%vreg88
1664B		%vreg88<def> = COPY %vreg18; GPR32:%vreg88,%vreg18
1680B		%vreg89<def> = COPY %vreg17; GPR32:%vreg89,%vreg17
1712B		BCC <BB#7>, 8, %STATUS<imp-use>
1728B		BNONE32 <BB#8>, %STATUS<imp-use>
	    Successors according to CFG: BB#7(0x7c000000 / 0x80000000 = 96.88%) BB#8(0x04000000 / 0x80000000 = 3.12%)

1744B	BB#8: derived from LLVM BB %for.end60
	    Predecessors according to CFG: BB#7
1760B		%vreg86<def> = ADDrr_r32 %vreg86, %vreg1, %STATUS<imp-def,dead>; GPR32:%vreg86,%vreg1
1776B		%vreg87<def> = ADDri_r32 %vreg87, 1, %STATUS<imp-def,dead>; GPR32:%vreg87
1792B		%vreg59<def,dead> = CMPrr_r32 %vreg87, %vreg33, %STATUS<imp-def>; GPR32:%vreg59,%vreg87,%vreg33
1840B		BCC <BB#5>, 0, %STATUS<imp-use>
1856B		BNONE32 <BB#6>, %STATUS<imp-use>
	    Successors according to CFG: BB#5(0x04000000 / 0x80000000 = 3.12%) BB#6(0x7c000000 / 0x80000000 = 96.88%)

1872B	BB#9: derived from LLVM BB %for.body66
	    Predecessors according to CFG: BB#5 BB#9
1920B		%vreg62<def> = ADDrr_r32 %vreg36, %vreg92, %STATUS<imp-def,dead>; GPR32:%vreg62,%vreg36,%vreg92
1936B		%vreg63<def> = LDRf32 %vreg62, 0; mem:LD4[%sunkaddr30](tbaa=!2) FPR32:%vreg63 GPR32:%vreg62
1952B		%vreg24<def> = ADDri_r32 %vreg91, 4, %STATUS<imp-def,dead>; GPR32:%vreg24,%vreg91
1968B		%vreg92<def> = ADDri_r32 %vreg92, 4, %STATUS<imp-def,dead>; GPR32:%vreg92
1984B		%vreg64<def> = LDRf32 %vreg91, 0; mem:Volatile LD4[%lsr.iv24](tbaa=!2) FPR32:%vreg64 GPR32:%vreg91
2000B		%vreg76<def> = LDRi32_r32 <fi#2>, 0; mem:LD4[FixedStack2] GPR32:%vreg76
2016B		GID %CONFIG<imp-def,dead>
2032B		%CONFIG<def,dead> = MOVTS32_core %vreg76; GPR32:%vreg76
2048B		GIE %CONFIG<imp-def,dead>
2064B		%vreg65<def> = FADDrr_r32 %vreg63, %vreg64, %STATUS<imp-def,dead>; FPR32:%vreg65,%vreg63,%vreg64
2080B		%vreg66<def,dead> = CMPri_r32 %vreg92, 32, %STATUS<imp-def>; GPR32:%vreg66,%vreg92
2096B		STRf32 %vreg65, %vreg91, 0; mem:Volatile ST4[%lsr.iv24](tbaa=!2) FPR32:%vreg65 GPR32:%vreg91
2112B		%vreg91<def> = COPY %vreg24; GPR32:%vreg91,%vreg24
2144B		BCC <BB#9>, 1, %STATUS<imp-use>
2160B		BNONE32 <BB#10>, %STATUS<imp-use>
	    Successors according to CFG: BB#10(0x04000000 / 0x80000000 = 3.12%) BB#9(0x7c000000 / 0x80000000 = 96.88%)

2176B	BB#10: derived from LLVM BB %for.end75
	    Predecessors according to CFG: BB#9
2192B		%vreg83<def> = ADDri_r32 %vreg83, 32, %STATUS<imp-def,dead>; GPR32:%vreg83
2208B		%vreg84<def> = ADDri_r32 %vreg84, 32, %STATUS<imp-def,dead>; GPR32:%vreg84
2224B		%vreg85<def> = ADDri_r32 %vreg85, 8, %STATUS<imp-def,dead>; GPR32:%vreg85
2240B		%vreg67<def,dead> = CMPrr_r32 %vreg85, %vreg33, %STATUS<imp-def>; GPR32:%vreg67,%vreg85,%vreg33
2304B		BCC <BB#4>, 8, %STATUS<imp-use>
2320B		BNONE32 <BB#11>, %STATUS<imp-use>
	    Successors according to CFG: BB#4(0x7c000000 / 0x80000000 = 96.88%) BB#11(0x04000000 / 0x80000000 = 3.12%)

2336B	BB#11: derived from LLVM BB %for.end78
	    Predecessors according to CFG: BB#10
2352B		%vreg81<def> = ADDrr_r32 %vreg81, %vreg1, %STATUS<imp-def,dead>; GPR32:%vreg81,%vreg1
2368B		%vreg82<def> = ADDri_r32 %vreg82, 1, %STATUS<imp-def,dead>; GPR32:%vreg82
2384B		%vreg68<def,dead> = CMPrr_r32 %vreg82, %vreg33, %STATUS<imp-def>; GPR32:%vreg68,%vreg82,%vreg33
2432B		BCC <BB#3>, 1, %STATUS<imp-use>
2448B		BNONE32 <BB#12>, %STATUS<imp-use>
	    Successors according to CFG: BB#12(0x04000000 / 0x80000000 = 3.12%) BB#3(0x7c000000 / 0x80000000 = 96.88%)

2464B	BB#12: derived from LLVM BB %for.end81
	    Predecessors according to CFG: BB#1 BB#11
2480B		%vreg77<def> = LDRi32_r32 <fi#1>, 0; mem:LD4[FixedStack1] GPR32:%vreg77
2496B		GID
2512B		%CONFIG<def> = MOVTS32_core %vreg77; GPR32:%vreg77
2528B		GIE %CONFIG<imp-use,kill>
2544B		RTS

# End machine code for function matmac.


block-frequency: matmac
=======================
reverse-post-order-traversal
 - 0: BB0
 - 1: BB1[entry]
 - 2: BB2[for.body3.lr.ph.preheader]
 - 3: BB3[for.body3.lr.ph]
 - 4: BB4[for.body9.preheader]
 - 5: BB6[for.body9]
 - 6: BB7[for.body13]
 - 7: BB8[for.end60]
 - 8: BB5[for.cond64.preheader]
 - 9: BB9[for.body66]
 - 10: BB10[for.end75]
 - 11: BB11[for.end78]
 - 12: BB12[for.end81]
loop-detection
 - loop = BB3[for.body3.lr.ph]
 - loop = BB4[for.body9.preheader]
 - loop = BB6[for.body9]
 - loop = BB9[for.body66]
 - loop = BB7[for.body13]
 - loop = BB6[for.body9]: member = BB8[for.end60]
 - loop = BB4[for.body9.preheader]: member = BB5[for.cond64.preheader]
 - loop = BB4[for.body9.preheader]: member = BB10[for.end75]
 - loop = BB3[for.body3.lr.ph]: member = BB11[for.end78]
compute-mass-in-loop: BB7[for.body13]*
 - node: BB7[for.body13]
  => [backedge] weight = 2080374784
  => [  exit  ] weight = 67108864, succ = BB8[for.end60]
  => mass:  ffffffffffffffff
  => assign f7ffffffffffffff (0800000000000000) [back] to BB7[for.body13]
  => assign 0800000000000000 (0000000000000000) [exit] to BB8[for.end60]
compute-loop-scale: BB7[for.body13]*
 - exit-mass = 0800000000000000 (ffffffffffffffff - f7ffffffffffffff)
 - scale = 32.0
packaging-loop: BB7[for.body13]*
 - node: BB7[for.body13]
compute-mass-in-loop: BB9[for.body66]*
 - node: BB9[for.body66]
  => [  exit  ] weight = 67108864, succ = BB10[for.end75]
  => [backedge] weight = 2080374784
  => mass:  ffffffffffffffff
  => assign f7ffffffffffffff (0800000000000000) [back] to BB9[for.body66]
  => assign 0800000000000000 (0000000000000000) [exit] to BB10[for.end75]
compute-loop-scale: BB9[for.body66]*
 - exit-mass = 0800000000000000 (ffffffffffffffff - f7ffffffffffffff)
 - scale = 32.0
packaging-loop: BB9[for.body66]*
 - node: BB9[for.body66]
compute-mass-in-loop: BB6[for.body9]*
 - node: BB6[for.body9]
  => [ local  ] weight = 2147483648, succ = BB7[for.body13]
  => mass:  ffffffffffffffff
  => assign ffffffffffffffff (0000000000000000) to BB7[for.body13]
 - node: BB7[for.body13]
  => [ local  ] weight = 576460752303423488, succ = BB8[for.end60]
  => mass:  ffffffffffffffff
  => assign ffffffffffffffff (0000000000000000) to BB8[for.end60]
 - node: BB8[for.end60]
  => [  exit  ] weight = 67108864, succ = BB5[for.cond64.preheader]
  => [backedge] weight = 2080374784
  => mass:  ffffffffffffffff
  => assign f7ffffffffffffff (0800000000000000) [back] to BB6[for.body9]
  => assign 0800000000000000 (0000000000000000) [exit] to BB5[for.cond64.preheader]
compute-loop-scale: BB6[for.body9]*
 - exit-mass = 0800000000000000 (ffffffffffffffff - f7ffffffffffffff)
 - scale = 32.0
packaging-loop: BB6[for.body9]*
 - node: BB6[for.body9]
 - node: BB7[for.body13]
 - node: BB8[for.end60]
compute-mass-in-loop: BB4[for.body9.preheader]*
 - node: BB4[for.body9.preheader]
  => [ local  ] weight = 2147483648, succ = BB6[for.body9]
  => mass:  ffffffffffffffff
  => assign ffffffffffffffff (0000000000000000) to BB6[for.body9]
 - node: BB6[for.body9]
  => [ local  ] weight = 576460752303423488, succ = BB5[for.cond64.preheader]
  => mass:  ffffffffffffffff
  => assign ffffffffffffffff (0000000000000000) to BB5[for.cond64.preheader]
 - node: BB5[for.cond64.preheader]
  => [ local  ] weight = 2147483648, succ = BB9[for.body66]
  => mass:  ffffffffffffffff
  => assign ffffffffffffffff (0000000000000000) to BB9[for.body66]
 - node: BB9[for.body66]
  => [ local  ] weight = 576460752303423488, succ = BB10[for.end75]
  => mass:  ffffffffffffffff
  => assign ffffffffffffffff (0000000000000000) to BB10[for.end75]
 - node: BB10[for.end75]
  => [backedge] weight = 2080374784
  => [  exit  ] weight = 67108864, succ = BB11[for.end78]
  => mass:  ffffffffffffffff
  => assign f7ffffffffffffff (0800000000000000) [back] to BB4[for.body9.preheader]
  => assign 0800000000000000 (0000000000000000) [exit] to BB11[for.end78]
compute-loop-scale: BB4[for.body9.preheader]*
 - exit-mass = 0800000000000000 (ffffffffffffffff - f7ffffffffffffff)
 - scale = 32.0
packaging-loop: BB4[for.body9.preheader]*
 - node: BB4[for.body9.preheader]
 - node: BB6[for.body9]
 - node: BB5[for.cond64.preheader]
 - node: BB9[for.body66]
 - node: BB10[for.end75]
compute-mass-in-loop: BB3[for.body3.lr.ph]*
 - node: BB3[for.body3.lr.ph]
  => [ local  ] weight = 2147483648, succ = BB4[for.body9.preheader]
  => mass:  ffffffffffffffff
  => assign ffffffffffffffff (0000000000000000) to BB4[for.body9.preheader]
 - node: BB4[for.body9.preheader]
  => [ local  ] weight = 576460752303423488, succ = BB11[for.end78]
  => mass:  ffffffffffffffff
  => assign ffffffffffffffff (0000000000000000) to BB11[for.end78]
 - node: BB11[for.end78]
  => [  exit  ] weight = 67108864, succ = BB12[for.end81]
  => [backedge] weight = 2080374784
  => mass:  ffffffffffffffff
  => assign f7ffffffffffffff (0800000000000000) [back] to BB3[for.body3.lr.ph]
  => assign 0800000000000000 (0000000000000000) [exit] to BB12[for.end81]
compute-loop-scale: BB3[for.body3.lr.ph]*
 - exit-mass = 0800000000000000 (ffffffffffffffff - f7ffffffffffffff)
 - scale = 32.0
packaging-loop: BB3[for.body3.lr.ph]*
 - node: BB3[for.body3.lr.ph]
 - node: BB4[for.body9.preheader]
 - node: BB11[for.end78]
compute-mass-in-function
 - node: BB0
  => [ local  ] weight = 2147483648, succ = BB1[entry]
  => mass:  ffffffffffffffff
  => assign ffffffffffffffff (0000000000000000) to BB1[entry]
 - node: BB1[entry]
  => [ local  ] weight = 1342177280, succ = BB2[for.body3.lr.ph.preheader]
  => [ local  ] weight = 805306368, succ = BB12[for.end81]
  => mass:  ffffffffffffffff
  => assign 9fffffffffffffff (6000000000000000) to BB2[for.body3.lr.ph.preheader]
  => assign 6000000000000000 (0000000000000000) to BB12[for.end81]
 - node: BB2[for.body3.lr.ph.preheader]
  => [ local  ] weight = 2147483648, succ = BB3[for.body3.lr.ph]
  => mass:  9fffffffffffffff
  => assign 9fffffffffffffff (0000000000000000) to BB3[for.body3.lr.ph]
 - node: BB3[for.body3.lr.ph]
  => [ local  ] weight = 576460752303423488, succ = BB12[for.end81]
  => mass:  9fffffffffffffff
  => assign 9fffffffffffffff (0000000000000000) to BB12[for.end81]
 - node: BB12[for.end81]
  => mass:  ffffffffffffffff
unwrap-loop-package: BB3[for.body3.lr.ph]*: mass = 9fffffffffffffff, scale = 32.0
  => combined-scale = 20.0
 - BB3[for.body3.lr.ph]: 1.0 => 20.0
 - BB4[for.body9.preheader]: 32.0 => 640.0
 - BB11[for.end78]: 1.0 => 20.0
unwrap-loop-package: BB4[for.body9.preheader]*: mass = ffffffffffffffff, scale = 640.0
  => combined-scale = 640.0
 - BB4[for.body9.preheader]: 1.0 => 640.0
 - BB6[for.body9]: 32.0 => 20480.0
 - BB5[for.cond64.preheader]: 1.0 => 640.0
 - BB9[for.body66]: 32.0 => 20480.0
 - BB10[for.end75]: 1.0 => 640.0
unwrap-loop-package: BB6[for.body9]*: mass = ffffffffffffffff, scale = 20480.0
  => combined-scale = 20480.0
 - BB6[for.body9]: 1.0 => 20480.0
 - BB7[for.body13]: 32.0 => 655360.0
 - BB8[for.end60]: 1.0 => 20480.0
unwrap-loop-package: BB9[for.body66]*: mass = ffffffffffffffff, scale = 20480.0
  => combined-scale = 20480.0
 - BB9[for.body66]: 1.0 => 20480.0
unwrap-loop-package: BB7[for.body13]*: mass = ffffffffffffffff, scale = 655360.0
  => combined-scale = 655360.0
 - BB7[for.body13]: 1.0 => 655360.0
float-to-int: min = 0.625, max = 655360.0, factor = 12.8
 - BB0: float = 1.0, scaled = 12.8, int = 12
 - BB1[entry]: float = 1.0, scaled = 12.8, int = 12
 - BB2[for.body3.lr.ph.preheader]: float = 0.625, scaled = 8.0, int = 8
 - BB3[for.body3.lr.ph]: float = 20.0, scaled = 256.0, int = 255
 - BB4[for.body9.preheader]: float = 640.0, scaled = 8192.0, int = 8191
 - BB6[for.body9]: float = 20480.0, scaled = 262144.0, int = 262143
 - BB7[for.body13]: float = 655360.0, scaled = 8388608.0, int = 8388607
 - BB8[for.end60]: float = 20480.0, scaled = 262144.0, int = 262143
 - BB5[for.cond64.preheader]: float = 640.0, scaled = 8192.0, int = 8191
 - BB9[for.body66]: float = 20480.0, scaled = 262144.0, int = 262143
 - BB10[for.end75]: float = 640.0, scaled = 8192.0, int = 8191
 - BB11[for.end78]: float = 20.0, scaled = 256.0, int = 255
 - BB12[for.end81]: float = 1.0, scaled = 12.8, int = 12
block-frequency-info: matmac
 - BB0: float = 1.0, int = 12
 - BB1[entry]: float = 1.0, int = 12
 - BB2[for.body3.lr.ph.preheader]: float = 0.625, int = 8
 - BB3[for.body3.lr.ph]: float = 20.0, int = 255
 - BB4[for.body9.preheader]: float = 640.0, int = 8191
 - BB5[for.cond64.preheader]: float = 640.0, int = 8191
 - BB6[for.body9]: float = 20480.0, int = 262143
 - BB7[for.body13]: float = 655360.0, int = 8388607
 - BB8[for.end60]: float = 20480.0, int = 262143
 - BB9[for.body66]: float = 20480.0, int = 262143
 - BB10[for.end75]: float = 640.0, int = 8191
 - BB11[for.end78]: float = 20.0, int = 255
 - BB12[for.end81]: float = 1.0, int = 12

# *** IR Dump Before Debug Variable Analysis ***:
# Machine code for function matmac: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=32, align=8, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=4, align=8, at location [SP]
Function Live Ins: %R0 in %vreg30, %R1 in %vreg31, %R2 in %vreg32, %R3 in %vreg33

0B	BB#0: 
	    Live Ins: %R0 %R1 %R2 %R3
16B		GID %CONFIG<imp-def>
32B		%vreg78:isub_hi<def,read-undef> = MOVFS32_core %CONFIG; FPR64_with_isub_hi_in_FPR32:%vreg78
48B		STRi32_r32 %vreg78:isub_hi, <fi#1>, 0; mem:ST4[FixedStack1] FPR64_with_isub_hi_in_FPR32:%vreg78
64B		%vreg73<def> = MOVi32ri 65535; GPR32:%vreg73
96B		%vreg73<def,tied1> = MOVTi32ri %vreg73<tied0>, 65521; GPR32:%vreg73
112B		%vreg78:isub_lo<def> = ANDrr_r32 %vreg78:isub_hi, %vreg73, %STATUS<imp-def>; FPR64_with_isub_hi_in_FPR32:%vreg78 GPR32:%vreg73
144B		%vreg78:isub_hi<def,tied1> = MOVTi32ri %vreg78:isub_hi<tied0>, 72; FPR64_with_isub_hi_in_FPR32:%vreg78
192B		STRi64 %vreg78, <fi#3>, 0; mem:ST4[FixedStack3] ST4[FixedStack2] FPR64_with_isub_hi_in_FPR32:%vreg78
208B		GIE %CONFIG<imp-use,kill>
	    Successors according to CFG: BB#1(?%)

224B	BB#1: derived from LLVM BB %entry
	    Live Ins: %R0 %R1 %R2 %R3
	    Predecessors according to CFG: BB#0
240B		%vreg33<def> = COPY %R3; GPR32:%vreg33
256B		%vreg81<def> = COPY %R2; GPR32:%vreg81
272B		%vreg31<def> = COPY %R1; GPR32:%vreg31
288B		%vreg30<def> = COPY %R0; GPR32:%vreg30
304B		%vreg34<def,dead> = CMPri_r32 %vreg33, 1, %STATUS<imp-def>; GPR32:%vreg34,%vreg33
320B		BCC <BB#12>, 8, %STATUS<imp-use>
336B		BNONE32 <BB#2>, %STATUS<imp-use>
	    Successors according to CFG: BB#2(0x50000000 / 0x80000000 = 62.50%) BB#12(0x30000000 / 0x80000000 = 37.50%)

352B	BB#2: derived from LLVM BB %for.body3.lr.ph.preheader
	    Predecessors according to CFG: BB#1
368B		%vreg1<def> = LSL32ri %vreg33, 2, %STATUS<imp-def,dead>; GPR32:%vreg1,%vreg33
384B		%vreg0<def> = ADDri_r32 %vreg31, 8, %STATUS<imp-def,dead>; GPR32:%vreg0,%vreg31
400B		%vreg36<def> = MOViPTR <fi#0>, 0; GPR32:%vreg36
416B		%vreg11<def> = ADDri_r32 %vreg36, 8, %STATUS<imp-def,dead>; GPR32:%vreg11,%vreg36
432B		%vreg42:isub_hi<def,read-undef> = MOVi32ri 0; FPR64_with_isub_hi_in_FPR32:%vreg42
464B		%vreg82<def> = COPY %vreg42:isub_hi; GPR32:%vreg82 FPR64_with_isub_hi_in_FPR32:%vreg42
	    Successors according to CFG: BB#3(?%)

480B	BB#3: derived from LLVM BB %for.body3.lr.ph
	    Predecessors according to CFG: BB#2 BB#11
528B		%vreg74<def> = LDRi32_r32 <fi#3>, 0; mem:LD4[FixedStack3] GPR32:%vreg74
544B		GID %CONFIG<imp-def,dead>
560B		%CONFIG<def,dead> = MOVTS32_core %vreg74; GPR32:%vreg74
576B		GIE %CONFIG<imp-def,dead>
592B		%vreg38<def> = IMULrr_r32 %vreg82, %vreg33, %STATUS<imp-def,dead>; GPR32:%vreg38,%vreg82,%vreg33
608B		%vreg39<def> = LSL32ri %vreg38, 2, %STATUS<imp-def,dead>; GPR32:%vreg39,%vreg38
624B		%vreg5<def> = ADDrr_r32 %vreg30, %vreg39, %STATUS<imp-def,dead>; GPR32:%vreg5,%vreg30,%vreg39
640B		%vreg83<def> = COPY %vreg81; GPR32:%vreg83,%vreg81
656B		%vreg84<def> = COPY %vreg0; GPR32:%vreg84,%vreg0
672B		%vreg85<def> = COPY %vreg42:isub_hi; GPR32:%vreg85 FPR64_with_isub_hi_in_FPR32:%vreg42
	    Successors according to CFG: BB#4(?%)

688B	BB#4: derived from LLVM BB %for.body9.preheader
	    Predecessors according to CFG: BB#3 BB#10
768B		%vreg42:isub_lo<def> = COPY %vreg42:isub_hi; FPR64_with_isub_hi_in_FPR32:%vreg42
784B		STRi64 %vreg42, <fi#0>, 24; mem:ST8[%1+24] FPR64_with_isub_hi_in_FPR32:%vreg42
800B		STRi64 %vreg42, <fi#0>, 16; mem:ST8[%1+16] FPR64_with_isub_hi_in_FPR32:%vreg42
816B		STRi64 %vreg42, <fi#0>, 8; mem:ST8[%1+8] FPR64_with_isub_hi_in_FPR32:%vreg42
832B		STRi64 %vreg42, <fi#0>, 0; mem:ST8[%1] FPR64_with_isub_hi_in_FPR32:%vreg42
848B		%vreg86<def> = COPY %vreg84; GPR32:%vreg86,%vreg84
864B		%vreg87<def> = COPY %vreg42:isub_hi; GPR32:%vreg87 FPR64_with_isub_hi_in_FPR32:%vreg42
880B		BNONE32 <BB#6>, %STATUS<imp-use>
	    Successors according to CFG: BB#6(?%)

896B	BB#5: derived from LLVM BB %for.cond64.preheader
	    Predecessors according to CFG: BB#8
912B		%vreg91<def> = COPY %vreg83; GPR32:%vreg91,%vreg83
928B		%vreg92<def> = COPY %vreg42:isub_hi; GPR32:%vreg92 FPR64_with_isub_hi_in_FPR32:%vreg42
944B		BNONE32 <BB#9>, %STATUS<imp-use>
	    Successors according to CFG: BB#9(?%)

960B	BB#6: derived from LLVM BB %for.body9
	    Predecessors according to CFG: BB#4 BB#8
1008B		%vreg44<def> = LSL32ri %vreg87, 2, %STATUS<imp-def,dead>; GPR32:%vreg44,%vreg87
1024B		%vreg45<def> = ADDrr_r32 %vreg5, %vreg44, %STATUS<imp-def,dead>; GPR32:%vreg45,%vreg5,%vreg44
1056B		%vreg12<def> = LDRf32 %vreg45, 0; mem:Volatile LD4[%add.ptr10](tbaa=!2) FPR32:%vreg12 GPR32:%vreg45
1072B		%vreg88<def> = COPY %vreg11; GPR32:%vreg88,%vreg11
1088B		%vreg89<def> = COPY %vreg86; GPR32:%vreg89,%vreg86
1104B		%vreg90<def> = COPY %vreg42:isub_hi; GPR32:%vreg90 FPR64_with_isub_hi_in_FPR32:%vreg42
	    Successors according to CFG: BB#7(?%)

1120B	BB#7: derived from LLVM BB %for.body13
	    Predecessors according to CFG: BB#6 BB#7
1184B		%vreg46<def> = LDRf32 %vreg89, -8; mem:Volatile LD4[%scevgep8](tbaa=!2) FPR32:%vreg46 GPR32:%vreg89
1200B		%vreg18<def> = ADDri_r32 %vreg88, 16, %STATUS<imp-def,dead>; GPR32:%vreg18,%vreg88
1216B		%vreg17<def> = ADDri_r32 %vreg89, 16, %STATUS<imp-def,dead>; GPR32:%vreg17,%vreg89
1232B		%vreg47<def> = LDRf32 %vreg89, -4; mem:Volatile LD4[%scevgep9](tbaa=!2) FPR32:%vreg47 GPR32:%vreg89
1248B		%vreg90<def> = ADDri_r32 %vreg90, 4, %STATUS<imp-def,dead>; GPR32:%vreg90
1264B		%vreg48<def> = LDRf32 %vreg89, 0; mem:Volatile LD4[%lsr.iv5](tbaa=!2) FPR32:%vreg48 GPR32:%vreg89
1280B		%vreg49<def> = LDRf32 %vreg89, 4; mem:Volatile LD4[%scevgep7](tbaa=!2) FPR32:%vreg49 GPR32:%vreg89
1296B		%vreg79<def> = LDRf64 %vreg88, -8; mem:LD4[%scevgep17](tbaa=!2) LD4[%scevgep15](tbaa=!2) FPR64_with_isub_hi_in_FPR32:%vreg79 GPR32:%vreg88
1344B		%vreg75<def> = LDRi32_r32 <fi#2>, 0; mem:LD4[FixedStack2] GPR32:%vreg75
1360B		GID %CONFIG<imp-def,dead>
1376B		%CONFIG<def,dead> = MOVTS32_core %vreg75; GPR32:%vreg75
1392B		GIE %CONFIG<imp-def,dead>
1424B		%vreg79:isub_hi<def,tied1> = FMADDrr_r32 %vreg79:isub_hi<tied0>, %vreg12, %vreg46, %STATUS<imp-def,dead>; FPR64_with_isub_hi_in_FPR32:%vreg79 FPR32:%vreg12,%vreg46
1456B		%vreg79:isub_lo<def,tied1> = FMADDrr_r32 %vreg79:isub_lo<tied0>, %vreg12, %vreg47, %STATUS<imp-def,dead>; FPR64_with_isub_hi_in_FPR32:%vreg79 FPR32:%vreg12,%vreg47
1472B		%vreg80:isub_lo<def,read-undef> = COPY %vreg79:isub_hi; FPR64:%vreg80 FPR64_with_isub_hi_in_FPR32:%vreg79
1488B		%vreg80:isub_hi<def> = COPY %vreg79:isub_lo; FPR64:%vreg80 FPR64_with_isub_hi_in_FPR32:%vreg79
1504B		STRf64 %vreg80, %vreg88, -8; mem:ST4[%scevgep17](tbaa=!2) ST4[%scevgep15](tbaa=!2) FPR64:%vreg80 GPR32:%vreg88
1520B		%vreg55<def> = LDRf32 %vreg88, 0; mem:LD4[%lsr.iv1214](tbaa=!2) FPR32:%vreg55 GPR32:%vreg88
1552B		%vreg55<def,tied1> = FMADDrr_r32 %vreg55<tied0>, %vreg12, %vreg48, %STATUS<imp-def,dead>; FPR32:%vreg55,%vreg12,%vreg48
1568B		STRf32 %vreg55, %vreg88, 0; mem:ST4[%lsr.iv1214](tbaa=!2) FPR32:%vreg55 GPR32:%vreg88
1584B		%vreg57<def> = LDRf32 %vreg88, 4; mem:LD4[%scevgep16](tbaa=!2) FPR32:%vreg57 GPR32:%vreg88
1616B		%vreg57<def,tied1> = FMADDrr_r32 %vreg57<tied0>, %vreg12, %vreg49, %STATUS<imp-def,dead>; FPR32:%vreg57,%vreg12,%vreg49
1632B		%vreg58<def,dead> = CMPri_r32 %vreg90, 8, %STATUS<imp-def>; GPR32:%vreg58,%vreg90
1648B		STRf32 %vreg57, %vreg88, 4; mem:ST4[%scevgep16](tbaa=!2) FPR32:%vreg57 GPR32:%vreg88
1664B		%vreg88<def> = COPY %vreg18; GPR32:%vreg88,%vreg18
1680B		%vreg89<def> = COPY %vreg17; GPR32:%vreg89,%vreg17
1712B		BCC <BB#7>, 8, %STATUS<imp-use>
1728B		BNONE32 <BB#8>, %STATUS<imp-use>
	    Successors according to CFG: BB#7(0x7c000000 / 0x80000000 = 96.88%) BB#8(0x04000000 / 0x80000000 = 3.12%)

1744B	BB#8: derived from LLVM BB %for.end60
	    Predecessors according to CFG: BB#7
1760B		%vreg86<def> = ADDrr_r32 %vreg86, %vreg1, %STATUS<imp-def,dead>; GPR32:%vreg86,%vreg1
1776B		%vreg87<def> = ADDri_r32 %vreg87, 1, %STATUS<imp-def,dead>; GPR32:%vreg87
1792B		%vreg59<def,dead> = CMPrr_r32 %vreg87, %vreg33, %STATUS<imp-def>; GPR32:%vreg59,%vreg87,%vreg33
1840B		BCC <BB#5>, 0, %STATUS<imp-use>
1856B		BNONE32 <BB#6>, %STATUS<imp-use>
	    Successors according to CFG: BB#5(0x04000000 / 0x80000000 = 3.12%) BB#6(0x7c000000 / 0x80000000 = 96.88%)

1872B	BB#9: derived from LLVM BB %for.body66
	    Predecessors according to CFG: BB#5 BB#9
1920B		%vreg62<def> = ADDrr_r32 %vreg36, %vreg92, %STATUS<imp-def,dead>; GPR32:%vreg62,%vreg36,%vreg92
1936B		%vreg63<def> = LDRf32 %vreg62, 0; mem:LD4[%sunkaddr30](tbaa=!2) FPR32:%vreg63 GPR32:%vreg62
1952B		%vreg24<def> = ADDri_r32 %vreg91, 4, %STATUS<imp-def,dead>; GPR32:%vreg24,%vreg91
1968B		%vreg92<def> = ADDri_r32 %vreg92, 4, %STATUS<imp-def,dead>; GPR32:%vreg92
1984B		%vreg64<def> = LDRf32 %vreg91, 0; mem:Volatile LD4[%lsr.iv24](tbaa=!2) FPR32:%vreg64 GPR32:%vreg91
2000B		%vreg76<def> = LDRi32_r32 <fi#2>, 0; mem:LD4[FixedStack2] GPR32:%vreg76
2016B		GID %CONFIG<imp-def,dead>
2032B		%CONFIG<def,dead> = MOVTS32_core %vreg76; GPR32:%vreg76
2048B		GIE %CONFIG<imp-def,dead>
2064B		%vreg65<def> = FADDrr_r32 %vreg63, %vreg64, %STATUS<imp-def,dead>; FPR32:%vreg65,%vreg63,%vreg64
2080B		%vreg66<def,dead> = CMPri_r32 %vreg92, 32, %STATUS<imp-def>; GPR32:%vreg66,%vreg92
2096B		STRf32 %vreg65, %vreg91, 0; mem:Volatile ST4[%lsr.iv24](tbaa=!2) FPR32:%vreg65 GPR32:%vreg91
2112B		%vreg91<def> = COPY %vreg24; GPR32:%vreg91,%vreg24
2144B		BCC <BB#9>, 1, %STATUS<imp-use>
2160B		BNONE32 <BB#10>, %STATUS<imp-use>
	    Successors according to CFG: BB#10(0x04000000 / 0x80000000 = 3.12%) BB#9(0x7c000000 / 0x80000000 = 96.88%)

2176B	BB#10: derived from LLVM BB %for.end75
	    Predecessors according to CFG: BB#9
2192B		%vreg83<def> = ADDri_r32 %vreg83, 32, %STATUS<imp-def,dead>; GPR32:%vreg83
2208B		%vreg84<def> = ADDri_r32 %vreg84, 32, %STATUS<imp-def,dead>; GPR32:%vreg84
2224B		%vreg85<def> = ADDri_r32 %vreg85, 8, %STATUS<imp-def,dead>; GPR32:%vreg85
2240B		%vreg67<def,dead> = CMPrr_r32 %vreg85, %vreg33, %STATUS<imp-def>; GPR32:%vreg67,%vreg85,%vreg33
2304B		BCC <BB#4>, 8, %STATUS<imp-use>
2320B		BNONE32 <BB#11>, %STATUS<imp-use>
	    Successors according to CFG: BB#4(0x7c000000 / 0x80000000 = 96.88%) BB#11(0x04000000 / 0x80000000 = 3.12%)

2336B	BB#11: derived from LLVM BB %for.end78
	    Predecessors according to CFG: BB#10
2352B		%vreg81<def> = ADDrr_r32 %vreg81, %vreg1, %STATUS<imp-def,dead>; GPR32:%vreg81,%vreg1
2368B		%vreg82<def> = ADDri_r32 %vreg82, 1, %STATUS<imp-def,dead>; GPR32:%vreg82
2384B		%vreg68<def,dead> = CMPrr_r32 %vreg82, %vreg33, %STATUS<imp-def>; GPR32:%vreg68,%vreg82,%vreg33
2432B		BCC <BB#3>, 1, %STATUS<imp-use>
2448B		BNONE32 <BB#12>, %STATUS<imp-use>
	    Successors according to CFG: BB#12(0x04000000 / 0x80000000 = 3.12%) BB#3(0x7c000000 / 0x80000000 = 96.88%)

2464B	BB#12: derived from LLVM BB %for.end81
	    Predecessors according to CFG: BB#1 BB#11
2480B		%vreg77<def> = LDRi32_r32 <fi#1>, 0; mem:LD4[FixedStack1] GPR32:%vreg77
2496B		GID
2512B		%CONFIG<def> = MOVTS32_core %vreg77; GPR32:%vreg77
2528B		GIE %CONFIG<imp-use,kill>
2544B		RTS

# End machine code for function matmac.

# *** IR Dump After Debug Variable Analysis ***:
# Machine code for function matmac: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=32, align=8, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=4, align=8, at location [SP]
Function Live Ins: %R0 in %vreg30, %R1 in %vreg31, %R2 in %vreg32, %R3 in %vreg33

0B	BB#0: 
	    Live Ins: %R0 %R1 %R2 %R3
16B		GID %CONFIG<imp-def>
32B		%vreg78:isub_hi<def,read-undef> = MOVFS32_core %CONFIG; FPR64_with_isub_hi_in_FPR32:%vreg78
48B		STRi32_r32 %vreg78:isub_hi, <fi#1>, 0; mem:ST4[FixedStack1] FPR64_with_isub_hi_in_FPR32:%vreg78
64B		%vreg73<def> = MOVi32ri 65535; GPR32:%vreg73
96B		%vreg73<def,tied1> = MOVTi32ri %vreg73<tied0>, 65521; GPR32:%vreg73
112B		%vreg78:isub_lo<def> = ANDrr_r32 %vreg78:isub_hi, %vreg73, %STATUS<imp-def>; FPR64_with_isub_hi_in_FPR32:%vreg78 GPR32:%vreg73
144B		%vreg78:isub_hi<def,tied1> = MOVTi32ri %vreg78:isub_hi<tied0>, 72; FPR64_with_isub_hi_in_FPR32:%vreg78
192B		STRi64 %vreg78, <fi#3>, 0; mem:ST4[FixedStack3] ST4[FixedStack2] FPR64_with_isub_hi_in_FPR32:%vreg78
208B		GIE %CONFIG<imp-use,kill>
	    Successors according to CFG: BB#1(?%)

224B	BB#1: derived from LLVM BB %entry
	    Live Ins: %R0 %R1 %R2 %R3
	    Predecessors according to CFG: BB#0
240B		%vreg33<def> = COPY %R3; GPR32:%vreg33
256B		%vreg81<def> = COPY %R2; GPR32:%vreg81
272B		%vreg31<def> = COPY %R1; GPR32:%vreg31
288B		%vreg30<def> = COPY %R0; GPR32:%vreg30
304B		%vreg34<def,dead> = CMPri_r32 %vreg33, 1, %STATUS<imp-def>; GPR32:%vreg34,%vreg33
320B		BCC <BB#12>, 8, %STATUS<imp-use>
336B		BNONE32 <BB#2>, %STATUS<imp-use>
	    Successors according to CFG: BB#2(0x50000000 / 0x80000000 = 62.50%) BB#12(0x30000000 / 0x80000000 = 37.50%)

352B	BB#2: derived from LLVM BB %for.body3.lr.ph.preheader
	    Predecessors according to CFG: BB#1
368B		%vreg1<def> = LSL32ri %vreg33, 2, %STATUS<imp-def,dead>; GPR32:%vreg1,%vreg33
384B		%vreg0<def> = ADDri_r32 %vreg31, 8, %STATUS<imp-def,dead>; GPR32:%vreg0,%vreg31
400B		%vreg36<def> = MOViPTR <fi#0>, 0; GPR32:%vreg36
416B		%vreg11<def> = ADDri_r32 %vreg36, 8, %STATUS<imp-def,dead>; GPR32:%vreg11,%vreg36
432B		%vreg42:isub_hi<def,read-undef> = MOVi32ri 0; FPR64_with_isub_hi_in_FPR32:%vreg42
464B		%vreg82<def> = COPY %vreg42:isub_hi; GPR32:%vreg82 FPR64_with_isub_hi_in_FPR32:%vreg42
	    Successors according to CFG: BB#3(?%)

480B	BB#3: derived from LLVM BB %for.body3.lr.ph
	    Predecessors according to CFG: BB#2 BB#11
528B		%vreg74<def> = LDRi32_r32 <fi#3>, 0; mem:LD4[FixedStack3] GPR32:%vreg74
544B		GID %CONFIG<imp-def,dead>
560B		%CONFIG<def,dead> = MOVTS32_core %vreg74; GPR32:%vreg74
576B		GIE %CONFIG<imp-def,dead>
592B		%vreg38<def> = IMULrr_r32 %vreg82, %vreg33, %STATUS<imp-def,dead>; GPR32:%vreg38,%vreg82,%vreg33
608B		%vreg39<def> = LSL32ri %vreg38, 2, %STATUS<imp-def,dead>; GPR32:%vreg39,%vreg38
624B		%vreg5<def> = ADDrr_r32 %vreg30, %vreg39, %STATUS<imp-def,dead>; GPR32:%vreg5,%vreg30,%vreg39
640B		%vreg83<def> = COPY %vreg81; GPR32:%vreg83,%vreg81
656B		%vreg84<def> = COPY %vreg0; GPR32:%vreg84,%vreg0
672B		%vreg85<def> = COPY %vreg42:isub_hi; GPR32:%vreg85 FPR64_with_isub_hi_in_FPR32:%vreg42
	    Successors according to CFG: BB#4(?%)

688B	BB#4: derived from LLVM BB %for.body9.preheader
	    Predecessors according to CFG: BB#3 BB#10
768B		%vreg42:isub_lo<def> = COPY %vreg42:isub_hi; FPR64_with_isub_hi_in_FPR32:%vreg42
784B		STRi64 %vreg42, <fi#0>, 24; mem:ST8[%1+24] FPR64_with_isub_hi_in_FPR32:%vreg42
800B		STRi64 %vreg42, <fi#0>, 16; mem:ST8[%1+16] FPR64_with_isub_hi_in_FPR32:%vreg42
816B		STRi64 %vreg42, <fi#0>, 8; mem:ST8[%1+8] FPR64_with_isub_hi_in_FPR32:%vreg42
832B		STRi64 %vreg42, <fi#0>, 0; mem:ST8[%1] FPR64_with_isub_hi_in_FPR32:%vreg42
848B		%vreg86<def> = COPY %vreg84; GPR32:%vreg86,%vreg84
864B		%vreg87<def> = COPY %vreg42:isub_hi; GPR32:%vreg87 FPR64_with_isub_hi_in_FPR32:%vreg42
880B		BNONE32 <BB#6>, %STATUS<imp-use>
	    Successors according to CFG: BB#6(?%)

896B	BB#5: derived from LLVM BB %for.cond64.preheader
	    Predecessors according to CFG: BB#8
912B		%vreg91<def> = COPY %vreg83; GPR32:%vreg91,%vreg83
928B		%vreg92<def> = COPY %vreg42:isub_hi; GPR32:%vreg92 FPR64_with_isub_hi_in_FPR32:%vreg42
944B		BNONE32 <BB#9>, %STATUS<imp-use>
	    Successors according to CFG: BB#9(?%)

960B	BB#6: derived from LLVM BB %for.body9
	    Predecessors according to CFG: BB#4 BB#8
1008B		%vreg44<def> = LSL32ri %vreg87, 2, %STATUS<imp-def,dead>; GPR32:%vreg44,%vreg87
1024B		%vreg45<def> = ADDrr_r32 %vreg5, %vreg44, %STATUS<imp-def,dead>; GPR32:%vreg45,%vreg5,%vreg44
1056B		%vreg12<def> = LDRf32 %vreg45, 0; mem:Volatile LD4[%add.ptr10](tbaa=!2) FPR32:%vreg12 GPR32:%vreg45
1072B		%vreg88<def> = COPY %vreg11; GPR32:%vreg88,%vreg11
1088B		%vreg89<def> = COPY %vreg86; GPR32:%vreg89,%vreg86
1104B		%vreg90<def> = COPY %vreg42:isub_hi; GPR32:%vreg90 FPR64_with_isub_hi_in_FPR32:%vreg42
	    Successors according to CFG: BB#7(?%)

1120B	BB#7: derived from LLVM BB %for.body13
	    Predecessors according to CFG: BB#6 BB#7
1184B		%vreg46<def> = LDRf32 %vreg89, -8; mem:Volatile LD4[%scevgep8](tbaa=!2) FPR32:%vreg46 GPR32:%vreg89
1200B		%vreg18<def> = ADDri_r32 %vreg88, 16, %STATUS<imp-def,dead>; GPR32:%vreg18,%vreg88
1216B		%vreg17<def> = ADDri_r32 %vreg89, 16, %STATUS<imp-def,dead>; GPR32:%vreg17,%vreg89
1232B		%vreg47<def> = LDRf32 %vreg89, -4; mem:Volatile LD4[%scevgep9](tbaa=!2) FPR32:%vreg47 GPR32:%vreg89
1248B		%vreg90<def> = ADDri_r32 %vreg90, 4, %STATUS<imp-def,dead>; GPR32:%vreg90
1264B		%vreg48<def> = LDRf32 %vreg89, 0; mem:Volatile LD4[%lsr.iv5](tbaa=!2) FPR32:%vreg48 GPR32:%vreg89
1280B		%vreg49<def> = LDRf32 %vreg89, 4; mem:Volatile LD4[%scevgep7](tbaa=!2) FPR32:%vreg49 GPR32:%vreg89
1296B		%vreg79<def> = LDRf64 %vreg88, -8; mem:LD4[%scevgep17](tbaa=!2) LD4[%scevgep15](tbaa=!2) FPR64_with_isub_hi_in_FPR32:%vreg79 GPR32:%vreg88
1344B		%vreg75<def> = LDRi32_r32 <fi#2>, 0; mem:LD4[FixedStack2] GPR32:%vreg75
1360B		GID %CONFIG<imp-def,dead>
1376B		%CONFIG<def,dead> = MOVTS32_core %vreg75; GPR32:%vreg75
1392B		GIE %CONFIG<imp-def,dead>
1424B		%vreg79:isub_hi<def,tied1> = FMADDrr_r32 %vreg79:isub_hi<tied0>, %vreg12, %vreg46, %STATUS<imp-def,dead>; FPR64_with_isub_hi_in_FPR32:%vreg79 FPR32:%vreg12,%vreg46
1456B		%vreg79:isub_lo<def,tied1> = FMADDrr_r32 %vreg79:isub_lo<tied0>, %vreg12, %vreg47, %STATUS<imp-def,dead>; FPR64_with_isub_hi_in_FPR32:%vreg79 FPR32:%vreg12,%vreg47
1472B		%vreg80:isub_lo<def,read-undef> = COPY %vreg79:isub_hi; FPR64:%vreg80 FPR64_with_isub_hi_in_FPR32:%vreg79
1488B		%vreg80:isub_hi<def> = COPY %vreg79:isub_lo; FPR64:%vreg80 FPR64_with_isub_hi_in_FPR32:%vreg79
1504B		STRf64 %vreg80, %vreg88, -8; mem:ST4[%scevgep17](tbaa=!2) ST4[%scevgep15](tbaa=!2) FPR64:%vreg80 GPR32:%vreg88
1520B		%vreg55<def> = LDRf32 %vreg88, 0; mem:LD4[%lsr.iv1214](tbaa=!2) FPR32:%vreg55 GPR32:%vreg88
1552B		%vreg55<def,tied1> = FMADDrr_r32 %vreg55<tied0>, %vreg12, %vreg48, %STATUS<imp-def,dead>; FPR32:%vreg55,%vreg12,%vreg48
1568B		STRf32 %vreg55, %vreg88, 0; mem:ST4[%lsr.iv1214](tbaa=!2) FPR32:%vreg55 GPR32:%vreg88
1584B		%vreg57<def> = LDRf32 %vreg88, 4; mem:LD4[%scevgep16](tbaa=!2) FPR32:%vreg57 GPR32:%vreg88
1616B		%vreg57<def,tied1> = FMADDrr_r32 %vreg57<tied0>, %vreg12, %vreg49, %STATUS<imp-def,dead>; FPR32:%vreg57,%vreg12,%vreg49
1632B		%vreg58<def,dead> = CMPri_r32 %vreg90, 8, %STATUS<imp-def>; GPR32:%vreg58,%vreg90
1648B		STRf32 %vreg57, %vreg88, 4; mem:ST4[%scevgep16](tbaa=!2) FPR32:%vreg57 GPR32:%vreg88
1664B		%vreg88<def> = COPY %vreg18; GPR32:%vreg88,%vreg18
1680B		%vreg89<def> = COPY %vreg17; GPR32:%vreg89,%vreg17
1712B		BCC <BB#7>, 8, %STATUS<imp-use>
1728B		BNONE32 <BB#8>, %STATUS<imp-use>
	    Successors according to CFG: BB#7(0x7c000000 / 0x80000000 = 96.88%) BB#8(0x04000000 / 0x80000000 = 3.12%)

1744B	BB#8: derived from LLVM BB %for.end60
	    Predecessors according to CFG: BB#7
1760B		%vreg86<def> = ADDrr_r32 %vreg86, %vreg1, %STATUS<imp-def,dead>; GPR32:%vreg86,%vreg1
1776B		%vreg87<def> = ADDri_r32 %vreg87, 1, %STATUS<imp-def,dead>; GPR32:%vreg87
1792B		%vreg59<def,dead> = CMPrr_r32 %vreg87, %vreg33, %STATUS<imp-def>; GPR32:%vreg59,%vreg87,%vreg33
1840B		BCC <BB#5>, 0, %STATUS<imp-use>
1856B		BNONE32 <BB#6>, %STATUS<imp-use>
	    Successors according to CFG: BB#5(0x04000000 / 0x80000000 = 3.12%) BB#6(0x7c000000 / 0x80000000 = 96.88%)

1872B	BB#9: derived from LLVM BB %for.body66
	    Predecessors according to CFG: BB#5 BB#9
1920B		%vreg62<def> = ADDrr_r32 %vreg36, %vreg92, %STATUS<imp-def,dead>; GPR32:%vreg62,%vreg36,%vreg92
1936B		%vreg63<def> = LDRf32 %vreg62, 0; mem:LD4[%sunkaddr30](tbaa=!2) FPR32:%vreg63 GPR32:%vreg62
1952B		%vreg24<def> = ADDri_r32 %vreg91, 4, %STATUS<imp-def,dead>; GPR32:%vreg24,%vreg91
1968B		%vreg92<def> = ADDri_r32 %vreg92, 4, %STATUS<imp-def,dead>; GPR32:%vreg92
1984B		%vreg64<def> = LDRf32 %vreg91, 0; mem:Volatile LD4[%lsr.iv24](tbaa=!2) FPR32:%vreg64 GPR32:%vreg91
2000B		%vreg76<def> = LDRi32_r32 <fi#2>, 0; mem:LD4[FixedStack2] GPR32:%vreg76
2016B		GID %CONFIG<imp-def,dead>
2032B		%CONFIG<def,dead> = MOVTS32_core %vreg76; GPR32:%vreg76
2048B		GIE %CONFIG<imp-def,dead>
2064B		%vreg65<def> = FADDrr_r32 %vreg63, %vreg64, %STATUS<imp-def,dead>; FPR32:%vreg65,%vreg63,%vreg64
2080B		%vreg66<def,dead> = CMPri_r32 %vreg92, 32, %STATUS<imp-def>; GPR32:%vreg66,%vreg92
2096B		STRf32 %vreg65, %vreg91, 0; mem:Volatile ST4[%lsr.iv24](tbaa=!2) FPR32:%vreg65 GPR32:%vreg91
2112B		%vreg91<def> = COPY %vreg24; GPR32:%vreg91,%vreg24
2144B		BCC <BB#9>, 1, %STATUS<imp-use>
2160B		BNONE32 <BB#10>, %STATUS<imp-use>
	    Successors according to CFG: BB#10(0x04000000 / 0x80000000 = 3.12%) BB#9(0x7c000000 / 0x80000000 = 96.88%)

2176B	BB#10: derived from LLVM BB %for.end75
	    Predecessors according to CFG: BB#9
2192B		%vreg83<def> = ADDri_r32 %vreg83, 32, %STATUS<imp-def,dead>; GPR32:%vreg83
2208B		%vreg84<def> = ADDri_r32 %vreg84, 32, %STATUS<imp-def,dead>; GPR32:%vreg84
2224B		%vreg85<def> = ADDri_r32 %vreg85, 8, %STATUS<imp-def,dead>; GPR32:%vreg85
2240B		%vreg67<def,dead> = CMPrr_r32 %vreg85, %vreg33, %STATUS<imp-def>; GPR32:%vreg67,%vreg85,%vreg33
2304B		BCC <BB#4>, 8, %STATUS<imp-use>
2320B		BNONE32 <BB#11>, %STATUS<imp-use>
	    Successors according to CFG: BB#4(0x7c000000 / 0x80000000 = 96.88%) BB#11(0x04000000 / 0x80000000 = 3.12%)

2336B	BB#11: derived from LLVM BB %for.end78
	    Predecessors according to CFG: BB#10
2352B		%vreg81<def> = ADDrr_r32 %vreg81, %vreg1, %STATUS<imp-def,dead>; GPR32:%vreg81,%vreg1
2368B		%vreg82<def> = ADDri_r32 %vreg82, 1, %STATUS<imp-def,dead>; GPR32:%vreg82
2384B		%vreg68<def,dead> = CMPrr_r32 %vreg82, %vreg33, %STATUS<imp-def>; GPR32:%vreg68,%vreg82,%vreg33
2432B		BCC <BB#3>, 1, %STATUS<imp-use>
2448B		BNONE32 <BB#12>, %STATUS<imp-use>
	    Successors according to CFG: BB#12(0x04000000 / 0x80000000 = 3.12%) BB#3(0x7c000000 / 0x80000000 = 96.88%)

2464B	BB#12: derived from LLVM BB %for.end81
	    Predecessors according to CFG: BB#1 BB#11
2480B		%vreg77<def> = LDRi32_r32 <fi#1>, 0; mem:LD4[FixedStack1] GPR32:%vreg77
2496B		GID
2512B		%CONFIG<def> = MOVTS32_core %vreg77; GPR32:%vreg77
2528B		GIE %CONFIG<imp-use,kill>
2544B		RTS

# End machine code for function matmac.

# *** IR Dump Before Live Stack Slot Analysis ***:
# Machine code for function matmac: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=32, align=8, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=4, align=8, at location [SP]
Function Live Ins: %R0 in %vreg30, %R1 in %vreg31, %R2 in %vreg32, %R3 in %vreg33

0B	BB#0: 
	    Live Ins: %R0 %R1 %R2 %R3
16B		GID %CONFIG<imp-def>
32B		%vreg78:isub_hi<def,read-undef> = MOVFS32_core %CONFIG; FPR64_with_isub_hi_in_FPR32:%vreg78
48B		STRi32_r32 %vreg78:isub_hi, <fi#1>, 0; mem:ST4[FixedStack1] FPR64_with_isub_hi_in_FPR32:%vreg78
64B		%vreg73<def> = MOVi32ri 65535; GPR32:%vreg73
96B		%vreg73<def,tied1> = MOVTi32ri %vreg73<tied0>, 65521; GPR32:%vreg73
112B		%vreg78:isub_lo<def> = ANDrr_r32 %vreg78:isub_hi, %vreg73, %STATUS<imp-def>; FPR64_with_isub_hi_in_FPR32:%vreg78 GPR32:%vreg73
144B		%vreg78:isub_hi<def,tied1> = MOVTi32ri %vreg78:isub_hi<tied0>, 72; FPR64_with_isub_hi_in_FPR32:%vreg78
192B		STRi64 %vreg78, <fi#3>, 0; mem:ST4[FixedStack3] ST4[FixedStack2] FPR64_with_isub_hi_in_FPR32:%vreg78
208B		GIE %CONFIG<imp-use,kill>
	    Successors according to CFG: BB#1(?%)

224B	BB#1: derived from LLVM BB %entry
	    Live Ins: %R0 %R1 %R2 %R3
	    Predecessors according to CFG: BB#0
240B		%vreg33<def> = COPY %R3; GPR32:%vreg33
256B		%vreg81<def> = COPY %R2; GPR32:%vreg81
272B		%vreg31<def> = COPY %R1; GPR32:%vreg31
288B		%vreg30<def> = COPY %R0; GPR32:%vreg30
304B		%vreg34<def,dead> = CMPri_r32 %vreg33, 1, %STATUS<imp-def>; GPR32:%vreg34,%vreg33
320B		BCC <BB#12>, 8, %STATUS<imp-use>
336B		BNONE32 <BB#2>, %STATUS<imp-use>
	    Successors according to CFG: BB#2(0x50000000 / 0x80000000 = 62.50%) BB#12(0x30000000 / 0x80000000 = 37.50%)

352B	BB#2: derived from LLVM BB %for.body3.lr.ph.preheader
	    Predecessors according to CFG: BB#1
368B		%vreg1<def> = LSL32ri %vreg33, 2, %STATUS<imp-def,dead>; GPR32:%vreg1,%vreg33
384B		%vreg0<def> = ADDri_r32 %vreg31, 8, %STATUS<imp-def,dead>; GPR32:%vreg0,%vreg31
400B		%vreg36<def> = MOViPTR <fi#0>, 0; GPR32:%vreg36
416B		%vreg11<def> = ADDri_r32 %vreg36, 8, %STATUS<imp-def,dead>; GPR32:%vreg11,%vreg36
432B		%vreg42:isub_hi<def,read-undef> = MOVi32ri 0; FPR64_with_isub_hi_in_FPR32:%vreg42
464B		%vreg82<def> = COPY %vreg42:isub_hi; GPR32:%vreg82 FPR64_with_isub_hi_in_FPR32:%vreg42
	    Successors according to CFG: BB#3(?%)

480B	BB#3: derived from LLVM BB %for.body3.lr.ph
	    Predecessors according to CFG: BB#2 BB#11
528B		%vreg74<def> = LDRi32_r32 <fi#3>, 0; mem:LD4[FixedStack3] GPR32:%vreg74
544B		GID %CONFIG<imp-def,dead>
560B		%CONFIG<def,dead> = MOVTS32_core %vreg74; GPR32:%vreg74
576B		GIE %CONFIG<imp-def,dead>
592B		%vreg38<def> = IMULrr_r32 %vreg82, %vreg33, %STATUS<imp-def,dead>; GPR32:%vreg38,%vreg82,%vreg33
608B		%vreg39<def> = LSL32ri %vreg38, 2, %STATUS<imp-def,dead>; GPR32:%vreg39,%vreg38
624B		%vreg5<def> = ADDrr_r32 %vreg30, %vreg39, %STATUS<imp-def,dead>; GPR32:%vreg5,%vreg30,%vreg39
640B		%vreg83<def> = COPY %vreg81; GPR32:%vreg83,%vreg81
656B		%vreg84<def> = COPY %vreg0; GPR32:%vreg84,%vreg0
672B		%vreg85<def> = COPY %vreg42:isub_hi; GPR32:%vreg85 FPR64_with_isub_hi_in_FPR32:%vreg42
	    Successors according to CFG: BB#4(?%)

688B	BB#4: derived from LLVM BB %for.body9.preheader
	    Predecessors according to CFG: BB#3 BB#10
768B		%vreg42:isub_lo<def> = COPY %vreg42:isub_hi; FPR64_with_isub_hi_in_FPR32:%vreg42
784B		STRi64 %vreg42, <fi#0>, 24; mem:ST8[%1+24] FPR64_with_isub_hi_in_FPR32:%vreg42
800B		STRi64 %vreg42, <fi#0>, 16; mem:ST8[%1+16] FPR64_with_isub_hi_in_FPR32:%vreg42
816B		STRi64 %vreg42, <fi#0>, 8; mem:ST8[%1+8] FPR64_with_isub_hi_in_FPR32:%vreg42
832B		STRi64 %vreg42, <fi#0>, 0; mem:ST8[%1] FPR64_with_isub_hi_in_FPR32:%vreg42
848B		%vreg86<def> = COPY %vreg84; GPR32:%vreg86,%vreg84
864B		%vreg87<def> = COPY %vreg42:isub_hi; GPR32:%vreg87 FPR64_with_isub_hi_in_FPR32:%vreg42
880B		BNONE32 <BB#6>, %STATUS<imp-use>
	    Successors according to CFG: BB#6(?%)

896B	BB#5: derived from LLVM BB %for.cond64.preheader
	    Predecessors according to CFG: BB#8
912B		%vreg91<def> = COPY %vreg83; GPR32:%vreg91,%vreg83
928B		%vreg92<def> = COPY %vreg42:isub_hi; GPR32:%vreg92 FPR64_with_isub_hi_in_FPR32:%vreg42
944B		BNONE32 <BB#9>, %STATUS<imp-use>
	    Successors according to CFG: BB#9(?%)

960B	BB#6: derived from LLVM BB %for.body9
	    Predecessors according to CFG: BB#4 BB#8
1008B		%vreg44<def> = LSL32ri %vreg87, 2, %STATUS<imp-def,dead>; GPR32:%vreg44,%vreg87
1024B		%vreg45<def> = ADDrr_r32 %vreg5, %vreg44, %STATUS<imp-def,dead>; GPR32:%vreg45,%vreg5,%vreg44
1056B		%vreg12<def> = LDRf32 %vreg45, 0; mem:Volatile LD4[%add.ptr10](tbaa=!2) FPR32:%vreg12 GPR32:%vreg45
1072B		%vreg88<def> = COPY %vreg11; GPR32:%vreg88,%vreg11
1088B		%vreg89<def> = COPY %vreg86; GPR32:%vreg89,%vreg86
1104B		%vreg90<def> = COPY %vreg42:isub_hi; GPR32:%vreg90 FPR64_with_isub_hi_in_FPR32:%vreg42
	    Successors according to CFG: BB#7(?%)

1120B	BB#7: derived from LLVM BB %for.body13
	    Predecessors according to CFG: BB#6 BB#7
1184B		%vreg46<def> = LDRf32 %vreg89, -8; mem:Volatile LD4[%scevgep8](tbaa=!2) FPR32:%vreg46 GPR32:%vreg89
1200B		%vreg18<def> = ADDri_r32 %vreg88, 16, %STATUS<imp-def,dead>; GPR32:%vreg18,%vreg88
1216B		%vreg17<def> = ADDri_r32 %vreg89, 16, %STATUS<imp-def,dead>; GPR32:%vreg17,%vreg89
1232B		%vreg47<def> = LDRf32 %vreg89, -4; mem:Volatile LD4[%scevgep9](tbaa=!2) FPR32:%vreg47 GPR32:%vreg89
1248B		%vreg90<def> = ADDri_r32 %vreg90, 4, %STATUS<imp-def,dead>; GPR32:%vreg90
1264B		%vreg48<def> = LDRf32 %vreg89, 0; mem:Volatile LD4[%lsr.iv5](tbaa=!2) FPR32:%vreg48 GPR32:%vreg89
1280B		%vreg49<def> = LDRf32 %vreg89, 4; mem:Volatile LD4[%scevgep7](tbaa=!2) FPR32:%vreg49 GPR32:%vreg89
1296B		%vreg79<def> = LDRf64 %vreg88, -8; mem:LD4[%scevgep17](tbaa=!2) LD4[%scevgep15](tbaa=!2) FPR64_with_isub_hi_in_FPR32:%vreg79 GPR32:%vreg88
1344B		%vreg75<def> = LDRi32_r32 <fi#2>, 0; mem:LD4[FixedStack2] GPR32:%vreg75
1360B		GID %CONFIG<imp-def,dead>
1376B		%CONFIG<def,dead> = MOVTS32_core %vreg75; GPR32:%vreg75
1392B		GIE %CONFIG<imp-def,dead>
1424B		%vreg79:isub_hi<def,tied1> = FMADDrr_r32 %vreg79:isub_hi<tied0>, %vreg12, %vreg46, %STATUS<imp-def,dead>; FPR64_with_isub_hi_in_FPR32:%vreg79 FPR32:%vreg12,%vreg46
1456B		%vreg79:isub_lo<def,tied1> = FMADDrr_r32 %vreg79:isub_lo<tied0>, %vreg12, %vreg47, %STATUS<imp-def,dead>; FPR64_with_isub_hi_in_FPR32:%vreg79 FPR32:%vreg12,%vreg47
1472B		%vreg80:isub_lo<def,read-undef> = COPY %vreg79:isub_hi; FPR64:%vreg80 FPR64_with_isub_hi_in_FPR32:%vreg79
1488B		%vreg80:isub_hi<def> = COPY %vreg79:isub_lo; FPR64:%vreg80 FPR64_with_isub_hi_in_FPR32:%vreg79
1504B		STRf64 %vreg80, %vreg88, -8; mem:ST4[%scevgep17](tbaa=!2) ST4[%scevgep15](tbaa=!2) FPR64:%vreg80 GPR32:%vreg88
1520B		%vreg55<def> = LDRf32 %vreg88, 0; mem:LD4[%lsr.iv1214](tbaa=!2) FPR32:%vreg55 GPR32:%vreg88
1552B		%vreg55<def,tied1> = FMADDrr_r32 %vreg55<tied0>, %vreg12, %vreg48, %STATUS<imp-def,dead>; FPR32:%vreg55,%vreg12,%vreg48
1568B		STRf32 %vreg55, %vreg88, 0; mem:ST4[%lsr.iv1214](tbaa=!2) FPR32:%vreg55 GPR32:%vreg88
1584B		%vreg57<def> = LDRf32 %vreg88, 4; mem:LD4[%scevgep16](tbaa=!2) FPR32:%vreg57 GPR32:%vreg88
1616B		%vreg57<def,tied1> = FMADDrr_r32 %vreg57<tied0>, %vreg12, %vreg49, %STATUS<imp-def,dead>; FPR32:%vreg57,%vreg12,%vreg49
1632B		%vreg58<def,dead> = CMPri_r32 %vreg90, 8, %STATUS<imp-def>; GPR32:%vreg58,%vreg90
1648B		STRf32 %vreg57, %vreg88, 4; mem:ST4[%scevgep16](tbaa=!2) FPR32:%vreg57 GPR32:%vreg88
1664B		%vreg88<def> = COPY %vreg18; GPR32:%vreg88,%vreg18
1680B		%vreg89<def> = COPY %vreg17; GPR32:%vreg89,%vreg17
1712B		BCC <BB#7>, 8, %STATUS<imp-use>
1728B		BNONE32 <BB#8>, %STATUS<imp-use>
	    Successors according to CFG: BB#7(0x7c000000 / 0x80000000 = 96.88%) BB#8(0x04000000 / 0x80000000 = 3.12%)

1744B	BB#8: derived from LLVM BB %for.end60
	    Predecessors according to CFG: BB#7
1760B		%vreg86<def> = ADDrr_r32 %vreg86, %vreg1, %STATUS<imp-def,dead>; GPR32:%vreg86,%vreg1
1776B		%vreg87<def> = ADDri_r32 %vreg87, 1, %STATUS<imp-def,dead>; GPR32:%vreg87
1792B		%vreg59<def,dead> = CMPrr_r32 %vreg87, %vreg33, %STATUS<imp-def>; GPR32:%vreg59,%vreg87,%vreg33
1840B		BCC <BB#5>, 0, %STATUS<imp-use>
1856B		BNONE32 <BB#6>, %STATUS<imp-use>
	    Successors according to CFG: BB#5(0x04000000 / 0x80000000 = 3.12%) BB#6(0x7c000000 / 0x80000000 = 96.88%)

1872B	BB#9: derived from LLVM BB %for.body66
	    Predecessors according to CFG: BB#5 BB#9
1920B		%vreg62<def> = ADDrr_r32 %vreg36, %vreg92, %STATUS<imp-def,dead>; GPR32:%vreg62,%vreg36,%vreg92
1936B		%vreg63<def> = LDRf32 %vreg62, 0; mem:LD4[%sunkaddr30](tbaa=!2) FPR32:%vreg63 GPR32:%vreg62
1952B		%vreg24<def> = ADDri_r32 %vreg91, 4, %STATUS<imp-def,dead>; GPR32:%vreg24,%vreg91
1968B		%vreg92<def> = ADDri_r32 %vreg92, 4, %STATUS<imp-def,dead>; GPR32:%vreg92
1984B		%vreg64<def> = LDRf32 %vreg91, 0; mem:Volatile LD4[%lsr.iv24](tbaa=!2) FPR32:%vreg64 GPR32:%vreg91
2000B		%vreg76<def> = LDRi32_r32 <fi#2>, 0; mem:LD4[FixedStack2] GPR32:%vreg76
2016B		GID %CONFIG<imp-def,dead>
2032B		%CONFIG<def,dead> = MOVTS32_core %vreg76; GPR32:%vreg76
2048B		GIE %CONFIG<imp-def,dead>
2064B		%vreg65<def> = FADDrr_r32 %vreg63, %vreg64, %STATUS<imp-def,dead>; FPR32:%vreg65,%vreg63,%vreg64
2080B		%vreg66<def,dead> = CMPri_r32 %vreg92, 32, %STATUS<imp-def>; GPR32:%vreg66,%vreg92
2096B		STRf32 %vreg65, %vreg91, 0; mem:Volatile ST4[%lsr.iv24](tbaa=!2) FPR32:%vreg65 GPR32:%vreg91
2112B		%vreg91<def> = COPY %vreg24; GPR32:%vreg91,%vreg24
2144B		BCC <BB#9>, 1, %STATUS<imp-use>
2160B		BNONE32 <BB#10>, %STATUS<imp-use>
	    Successors according to CFG: BB#10(0x04000000 / 0x80000000 = 3.12%) BB#9(0x7c000000 / 0x80000000 = 96.88%)

2176B	BB#10: derived from LLVM BB %for.end75
	    Predecessors according to CFG: BB#9
2192B		%vreg83<def> = ADDri_r32 %vreg83, 32, %STATUS<imp-def,dead>; GPR32:%vreg83
2208B		%vreg84<def> = ADDri_r32 %vreg84, 32, %STATUS<imp-def,dead>; GPR32:%vreg84
2224B		%vreg85<def> = ADDri_r32 %vreg85, 8, %STATUS<imp-def,dead>; GPR32:%vreg85
2240B		%vreg67<def,dead> = CMPrr_r32 %vreg85, %vreg33, %STATUS<imp-def>; GPR32:%vreg67,%vreg85,%vreg33
2304B		BCC <BB#4>, 8, %STATUS<imp-use>
2320B		BNONE32 <BB#11>, %STATUS<imp-use>
	    Successors according to CFG: BB#4(0x7c000000 / 0x80000000 = 96.88%) BB#11(0x04000000 / 0x80000000 = 3.12%)

2336B	BB#11: derived from LLVM BB %for.end78
	    Predecessors according to CFG: BB#10
2352B		%vreg81<def> = ADDrr_r32 %vreg81, %vreg1, %STATUS<imp-def,dead>; GPR32:%vreg81,%vreg1
2368B		%vreg82<def> = ADDri_r32 %vreg82, 1, %STATUS<imp-def,dead>; GPR32:%vreg82
2384B		%vreg68<def,dead> = CMPrr_r32 %vreg82, %vreg33, %STATUS<imp-def>; GPR32:%vreg68,%vreg82,%vreg33
2432B		BCC <BB#3>, 1, %STATUS<imp-use>
2448B		BNONE32 <BB#12>, %STATUS<imp-use>
	    Successors according to CFG: BB#12(0x04000000 / 0x80000000 = 3.12%) BB#3(0x7c000000 / 0x80000000 = 96.88%)

2464B	BB#12: derived from LLVM BB %for.end81
	    Predecessors according to CFG: BB#1 BB#11
2480B		%vreg77<def> = LDRi32_r32 <fi#1>, 0; mem:LD4[FixedStack1] GPR32:%vreg77
2496B		GID
2512B		%CONFIG<def> = MOVTS32_core %vreg77; GPR32:%vreg77
2528B		GIE %CONFIG<imp-use,kill>
2544B		RTS

# End machine code for function matmac.

# *** IR Dump After Live Stack Slot Analysis ***:
# Machine code for function matmac: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=32, align=8, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=4, align=8, at location [SP]
Function Live Ins: %R0 in %vreg30, %R1 in %vreg31, %R2 in %vreg32, %R3 in %vreg33

0B	BB#0: 
	    Live Ins: %R0 %R1 %R2 %R3
16B		GID %CONFIG<imp-def>
32B		%vreg78:isub_hi<def,read-undef> = MOVFS32_core %CONFIG; FPR64_with_isub_hi_in_FPR32:%vreg78
48B		STRi32_r32 %vreg78:isub_hi, <fi#1>, 0; mem:ST4[FixedStack1] FPR64_with_isub_hi_in_FPR32:%vreg78
64B		%vreg73<def> = MOVi32ri 65535; GPR32:%vreg73
96B		%vreg73<def,tied1> = MOVTi32ri %vreg73<tied0>, 65521; GPR32:%vreg73
112B		%vreg78:isub_lo<def> = ANDrr_r32 %vreg78:isub_hi, %vreg73, %STATUS<imp-def>; FPR64_with_isub_hi_in_FPR32:%vreg78 GPR32:%vreg73
144B		%vreg78:isub_hi<def,tied1> = MOVTi32ri %vreg78:isub_hi<tied0>, 72; FPR64_with_isub_hi_in_FPR32:%vreg78
192B		STRi64 %vreg78, <fi#3>, 0; mem:ST4[FixedStack3] ST4[FixedStack2] FPR64_with_isub_hi_in_FPR32:%vreg78
208B		GIE %CONFIG<imp-use,kill>
	    Successors according to CFG: BB#1(?%)

224B	BB#1: derived from LLVM BB %entry
	    Live Ins: %R0 %R1 %R2 %R3
	    Predecessors according to CFG: BB#0
240B		%vreg33<def> = COPY %R3; GPR32:%vreg33
256B		%vreg81<def> = COPY %R2; GPR32:%vreg81
272B		%vreg31<def> = COPY %R1; GPR32:%vreg31
288B		%vreg30<def> = COPY %R0; GPR32:%vreg30
304B		%vreg34<def,dead> = CMPri_r32 %vreg33, 1, %STATUS<imp-def>; GPR32:%vreg34,%vreg33
320B		BCC <BB#12>, 8, %STATUS<imp-use>
336B		BNONE32 <BB#2>, %STATUS<imp-use>
	    Successors according to CFG: BB#2(0x50000000 / 0x80000000 = 62.50%) BB#12(0x30000000 / 0x80000000 = 37.50%)

352B	BB#2: derived from LLVM BB %for.body3.lr.ph.preheader
	    Predecessors according to CFG: BB#1
368B		%vreg1<def> = LSL32ri %vreg33, 2, %STATUS<imp-def,dead>; GPR32:%vreg1,%vreg33
384B		%vreg0<def> = ADDri_r32 %vreg31, 8, %STATUS<imp-def,dead>; GPR32:%vreg0,%vreg31
400B		%vreg36<def> = MOViPTR <fi#0>, 0; GPR32:%vreg36
416B		%vreg11<def> = ADDri_r32 %vreg36, 8, %STATUS<imp-def,dead>; GPR32:%vreg11,%vreg36
432B		%vreg42:isub_hi<def,read-undef> = MOVi32ri 0; FPR64_with_isub_hi_in_FPR32:%vreg42
464B		%vreg82<def> = COPY %vreg42:isub_hi; GPR32:%vreg82 FPR64_with_isub_hi_in_FPR32:%vreg42
	    Successors according to CFG: BB#3(?%)

480B	BB#3: derived from LLVM BB %for.body3.lr.ph
	    Predecessors according to CFG: BB#2 BB#11
528B		%vreg74<def> = LDRi32_r32 <fi#3>, 0; mem:LD4[FixedStack3] GPR32:%vreg74
544B		GID %CONFIG<imp-def,dead>
560B		%CONFIG<def,dead> = MOVTS32_core %vreg74; GPR32:%vreg74
576B		GIE %CONFIG<imp-def,dead>
592B		%vreg38<def> = IMULrr_r32 %vreg82, %vreg33, %STATUS<imp-def,dead>; GPR32:%vreg38,%vreg82,%vreg33
608B		%vreg39<def> = LSL32ri %vreg38, 2, %STATUS<imp-def,dead>; GPR32:%vreg39,%vreg38
624B		%vreg5<def> = ADDrr_r32 %vreg30, %vreg39, %STATUS<imp-def,dead>; GPR32:%vreg5,%vreg30,%vreg39
640B		%vreg83<def> = COPY %vreg81; GPR32:%vreg83,%vreg81
656B		%vreg84<def> = COPY %vreg0; GPR32:%vreg84,%vreg0
672B		%vreg85<def> = COPY %vreg42:isub_hi; GPR32:%vreg85 FPR64_with_isub_hi_in_FPR32:%vreg42
	    Successors according to CFG: BB#4(?%)

688B	BB#4: derived from LLVM BB %for.body9.preheader
	    Predecessors according to CFG: BB#3 BB#10
768B		%vreg42:isub_lo<def> = COPY %vreg42:isub_hi; FPR64_with_isub_hi_in_FPR32:%vreg42
784B		STRi64 %vreg42, <fi#0>, 24; mem:ST8[%1+24] FPR64_with_isub_hi_in_FPR32:%vreg42
800B		STRi64 %vreg42, <fi#0>, 16; mem:ST8[%1+16] FPR64_with_isub_hi_in_FPR32:%vreg42
816B		STRi64 %vreg42, <fi#0>, 8; mem:ST8[%1+8] FPR64_with_isub_hi_in_FPR32:%vreg42
832B		STRi64 %vreg42, <fi#0>, 0; mem:ST8[%1] FPR64_with_isub_hi_in_FPR32:%vreg42
848B		%vreg86<def> = COPY %vreg84; GPR32:%vreg86,%vreg84
864B		%vreg87<def> = COPY %vreg42:isub_hi; GPR32:%vreg87 FPR64_with_isub_hi_in_FPR32:%vreg42
880B		BNONE32 <BB#6>, %STATUS<imp-use>
	    Successors according to CFG: BB#6(?%)

896B	BB#5: derived from LLVM BB %for.cond64.preheader
	    Predecessors according to CFG: BB#8
912B		%vreg91<def> = COPY %vreg83; GPR32:%vreg91,%vreg83
928B		%vreg92<def> = COPY %vreg42:isub_hi; GPR32:%vreg92 FPR64_with_isub_hi_in_FPR32:%vreg42
944B		BNONE32 <BB#9>, %STATUS<imp-use>
	    Successors according to CFG: BB#9(?%)

960B	BB#6: derived from LLVM BB %for.body9
	    Predecessors according to CFG: BB#4 BB#8
1008B		%vreg44<def> = LSL32ri %vreg87, 2, %STATUS<imp-def,dead>; GPR32:%vreg44,%vreg87
1024B		%vreg45<def> = ADDrr_r32 %vreg5, %vreg44, %STATUS<imp-def,dead>; GPR32:%vreg45,%vreg5,%vreg44
1056B		%vreg12<def> = LDRf32 %vreg45, 0; mem:Volatile LD4[%add.ptr10](tbaa=!2) FPR32:%vreg12 GPR32:%vreg45
1072B		%vreg88<def> = COPY %vreg11; GPR32:%vreg88,%vreg11
1088B		%vreg89<def> = COPY %vreg86; GPR32:%vreg89,%vreg86
1104B		%vreg90<def> = COPY %vreg42:isub_hi; GPR32:%vreg90 FPR64_with_isub_hi_in_FPR32:%vreg42
	    Successors according to CFG: BB#7(?%)

1120B	BB#7: derived from LLVM BB %for.body13
	    Predecessors according to CFG: BB#6 BB#7
1184B		%vreg46<def> = LDRf32 %vreg89, -8; mem:Volatile LD4[%scevgep8](tbaa=!2) FPR32:%vreg46 GPR32:%vreg89
1200B		%vreg18<def> = ADDri_r32 %vreg88, 16, %STATUS<imp-def,dead>; GPR32:%vreg18,%vreg88
1216B		%vreg17<def> = ADDri_r32 %vreg89, 16, %STATUS<imp-def,dead>; GPR32:%vreg17,%vreg89
1232B		%vreg47<def> = LDRf32 %vreg89, -4; mem:Volatile LD4[%scevgep9](tbaa=!2) FPR32:%vreg47 GPR32:%vreg89
1248B		%vreg90<def> = ADDri_r32 %vreg90, 4, %STATUS<imp-def,dead>; GPR32:%vreg90
1264B		%vreg48<def> = LDRf32 %vreg89, 0; mem:Volatile LD4[%lsr.iv5](tbaa=!2) FPR32:%vreg48 GPR32:%vreg89
1280B		%vreg49<def> = LDRf32 %vreg89, 4; mem:Volatile LD4[%scevgep7](tbaa=!2) FPR32:%vreg49 GPR32:%vreg89
1296B		%vreg79<def> = LDRf64 %vreg88, -8; mem:LD4[%scevgep17](tbaa=!2) LD4[%scevgep15](tbaa=!2) FPR64_with_isub_hi_in_FPR32:%vreg79 GPR32:%vreg88
1344B		%vreg75<def> = LDRi32_r32 <fi#2>, 0; mem:LD4[FixedStack2] GPR32:%vreg75
1360B		GID %CONFIG<imp-def,dead>
1376B		%CONFIG<def,dead> = MOVTS32_core %vreg75; GPR32:%vreg75
1392B		GIE %CONFIG<imp-def,dead>
1424B		%vreg79:isub_hi<def,tied1> = FMADDrr_r32 %vreg79:isub_hi<tied0>, %vreg12, %vreg46, %STATUS<imp-def,dead>; FPR64_with_isub_hi_in_FPR32:%vreg79 FPR32:%vreg12,%vreg46
1456B		%vreg79:isub_lo<def,tied1> = FMADDrr_r32 %vreg79:isub_lo<tied0>, %vreg12, %vreg47, %STATUS<imp-def,dead>; FPR64_with_isub_hi_in_FPR32:%vreg79 FPR32:%vreg12,%vreg47
1472B		%vreg80:isub_lo<def,read-undef> = COPY %vreg79:isub_hi; FPR64:%vreg80 FPR64_with_isub_hi_in_FPR32:%vreg79
1488B		%vreg80:isub_hi<def> = COPY %vreg79:isub_lo; FPR64:%vreg80 FPR64_with_isub_hi_in_FPR32:%vreg79
1504B		STRf64 %vreg80, %vreg88, -8; mem:ST4[%scevgep17](tbaa=!2) ST4[%scevgep15](tbaa=!2) FPR64:%vreg80 GPR32:%vreg88
1520B		%vreg55<def> = LDRf32 %vreg88, 0; mem:LD4[%lsr.iv1214](tbaa=!2) FPR32:%vreg55 GPR32:%vreg88
1552B		%vreg55<def,tied1> = FMADDrr_r32 %vreg55<tied0>, %vreg12, %vreg48, %STATUS<imp-def,dead>; FPR32:%vreg55,%vreg12,%vreg48
1568B		STRf32 %vreg55, %vreg88, 0; mem:ST4[%lsr.iv1214](tbaa=!2) FPR32:%vreg55 GPR32:%vreg88
1584B		%vreg57<def> = LDRf32 %vreg88, 4; mem:LD4[%scevgep16](tbaa=!2) FPR32:%vreg57 GPR32:%vreg88
1616B		%vreg57<def,tied1> = FMADDrr_r32 %vreg57<tied0>, %vreg12, %vreg49, %STATUS<imp-def,dead>; FPR32:%vreg57,%vreg12,%vreg49
1632B		%vreg58<def,dead> = CMPri_r32 %vreg90, 8, %STATUS<imp-def>; GPR32:%vreg58,%vreg90
1648B		STRf32 %vreg57, %vreg88, 4; mem:ST4[%scevgep16](tbaa=!2) FPR32:%vreg57 GPR32:%vreg88
1664B		%vreg88<def> = COPY %vreg18; GPR32:%vreg88,%vreg18
1680B		%vreg89<def> = COPY %vreg17; GPR32:%vreg89,%vreg17
1712B		BCC <BB#7>, 8, %STATUS<imp-use>
1728B		BNONE32 <BB#8>, %STATUS<imp-use>
	    Successors according to CFG: BB#7(0x7c000000 / 0x80000000 = 96.88%) BB#8(0x04000000 / 0x80000000 = 3.12%)

1744B	BB#8: derived from LLVM BB %for.end60
	    Predecessors according to CFG: BB#7
1760B		%vreg86<def> = ADDrr_r32 %vreg86, %vreg1, %STATUS<imp-def,dead>; GPR32:%vreg86,%vreg1
1776B		%vreg87<def> = ADDri_r32 %vreg87, 1, %STATUS<imp-def,dead>; GPR32:%vreg87
1792B		%vreg59<def,dead> = CMPrr_r32 %vreg87, %vreg33, %STATUS<imp-def>; GPR32:%vreg59,%vreg87,%vreg33
1840B		BCC <BB#5>, 0, %STATUS<imp-use>
1856B		BNONE32 <BB#6>, %STATUS<imp-use>
	    Successors according to CFG: BB#5(0x04000000 / 0x80000000 = 3.12%) BB#6(0x7c000000 / 0x80000000 = 96.88%)

1872B	BB#9: derived from LLVM BB %for.body66
	    Predecessors according to CFG: BB#5 BB#9
1920B		%vreg62<def> = ADDrr_r32 %vreg36, %vreg92, %STATUS<imp-def,dead>; GPR32:%vreg62,%vreg36,%vreg92
1936B		%vreg63<def> = LDRf32 %vreg62, 0; mem:LD4[%sunkaddr30](tbaa=!2) FPR32:%vreg63 GPR32:%vreg62
1952B		%vreg24<def> = ADDri_r32 %vreg91, 4, %STATUS<imp-def,dead>; GPR32:%vreg24,%vreg91
1968B		%vreg92<def> = ADDri_r32 %vreg92, 4, %STATUS<imp-def,dead>; GPR32:%vreg92
1984B		%vreg64<def> = LDRf32 %vreg91, 0; mem:Volatile LD4[%lsr.iv24](tbaa=!2) FPR32:%vreg64 GPR32:%vreg91
2000B		%vreg76<def> = LDRi32_r32 <fi#2>, 0; mem:LD4[FixedStack2] GPR32:%vreg76
2016B		GID %CONFIG<imp-def,dead>
2032B		%CONFIG<def,dead> = MOVTS32_core %vreg76; GPR32:%vreg76
2048B		GIE %CONFIG<imp-def,dead>
2064B		%vreg65<def> = FADDrr_r32 %vreg63, %vreg64, %STATUS<imp-def,dead>; FPR32:%vreg65,%vreg63,%vreg64
2080B		%vreg66<def,dead> = CMPri_r32 %vreg92, 32, %STATUS<imp-def>; GPR32:%vreg66,%vreg92
2096B		STRf32 %vreg65, %vreg91, 0; mem:Volatile ST4[%lsr.iv24](tbaa=!2) FPR32:%vreg65 GPR32:%vreg91
2112B		%vreg91<def> = COPY %vreg24; GPR32:%vreg91,%vreg24
2144B		BCC <BB#9>, 1, %STATUS<imp-use>
2160B		BNONE32 <BB#10>, %STATUS<imp-use>
	    Successors according to CFG: BB#10(0x04000000 / 0x80000000 = 3.12%) BB#9(0x7c000000 / 0x80000000 = 96.88%)

2176B	BB#10: derived from LLVM BB %for.end75
	    Predecessors according to CFG: BB#9
2192B		%vreg83<def> = ADDri_r32 %vreg83, 32, %STATUS<imp-def,dead>; GPR32:%vreg83
2208B		%vreg84<def> = ADDri_r32 %vreg84, 32, %STATUS<imp-def,dead>; GPR32:%vreg84
2224B		%vreg85<def> = ADDri_r32 %vreg85, 8, %STATUS<imp-def,dead>; GPR32:%vreg85
2240B		%vreg67<def,dead> = CMPrr_r32 %vreg85, %vreg33, %STATUS<imp-def>; GPR32:%vreg67,%vreg85,%vreg33
2304B		BCC <BB#4>, 8, %STATUS<imp-use>
2320B		BNONE32 <BB#11>, %STATUS<imp-use>
	    Successors according to CFG: BB#4(0x7c000000 / 0x80000000 = 96.88%) BB#11(0x04000000 / 0x80000000 = 3.12%)

2336B	BB#11: derived from LLVM BB %for.end78
	    Predecessors according to CFG: BB#10
2352B		%vreg81<def> = ADDrr_r32 %vreg81, %vreg1, %STATUS<imp-def,dead>; GPR32:%vreg81,%vreg1
2368B		%vreg82<def> = ADDri_r32 %vreg82, 1, %STATUS<imp-def,dead>; GPR32:%vreg82
2384B		%vreg68<def,dead> = CMPrr_r32 %vreg82, %vreg33, %STATUS<imp-def>; GPR32:%vreg68,%vreg82,%vreg33
2432B		BCC <BB#3>, 1, %STATUS<imp-use>
2448B		BNONE32 <BB#12>, %STATUS<imp-use>
	    Successors according to CFG: BB#12(0x04000000 / 0x80000000 = 3.12%) BB#3(0x7c000000 / 0x80000000 = 96.88%)

2464B	BB#12: derived from LLVM BB %for.end81
	    Predecessors according to CFG: BB#1 BB#11
2480B		%vreg77<def> = LDRi32_r32 <fi#1>, 0; mem:LD4[FixedStack1] GPR32:%vreg77
2496B		GID
2512B		%CONFIG<def> = MOVTS32_core %vreg77; GPR32:%vreg77
2528B		GIE %CONFIG<imp-use,kill>
2544B		RTS

# End machine code for function matmac.

# *** IR Dump Before Virtual Register Map ***:
# Machine code for function matmac: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=32, align=8, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=4, align=8, at location [SP]
Function Live Ins: %R0 in %vreg30, %R1 in %vreg31, %R2 in %vreg32, %R3 in %vreg33

0B	BB#0: 
	    Live Ins: %R0 %R1 %R2 %R3
16B		GID %CONFIG<imp-def>
32B		%vreg78:isub_hi<def,read-undef> = MOVFS32_core %CONFIG; FPR64_with_isub_hi_in_FPR32:%vreg78
48B		STRi32_r32 %vreg78:isub_hi, <fi#1>, 0; mem:ST4[FixedStack1] FPR64_with_isub_hi_in_FPR32:%vreg78
64B		%vreg73<def> = MOVi32ri 65535; GPR32:%vreg73
96B		%vreg73<def,tied1> = MOVTi32ri %vreg73<tied0>, 65521; GPR32:%vreg73
112B		%vreg78:isub_lo<def> = ANDrr_r32 %vreg78:isub_hi, %vreg73, %STATUS<imp-def>; FPR64_with_isub_hi_in_FPR32:%vreg78 GPR32:%vreg73
144B		%vreg78:isub_hi<def,tied1> = MOVTi32ri %vreg78:isub_hi<tied0>, 72; FPR64_with_isub_hi_in_FPR32:%vreg78
192B		STRi64 %vreg78, <fi#3>, 0; mem:ST4[FixedStack3] ST4[FixedStack2] FPR64_with_isub_hi_in_FPR32:%vreg78
208B		GIE %CONFIG<imp-use,kill>
	    Successors according to CFG: BB#1(?%)

224B	BB#1: derived from LLVM BB %entry
	    Live Ins: %R0 %R1 %R2 %R3
	    Predecessors according to CFG: BB#0
240B		%vreg33<def> = COPY %R3; GPR32:%vreg33
256B		%vreg81<def> = COPY %R2; GPR32:%vreg81
272B		%vreg31<def> = COPY %R1; GPR32:%vreg31
288B		%vreg30<def> = COPY %R0; GPR32:%vreg30
304B		%vreg34<def,dead> = CMPri_r32 %vreg33, 1, %STATUS<imp-def>; GPR32:%vreg34,%vreg33
320B		BCC <BB#12>, 8, %STATUS<imp-use>
336B		BNONE32 <BB#2>, %STATUS<imp-use>
	    Successors according to CFG: BB#2(0x50000000 / 0x80000000 = 62.50%) BB#12(0x30000000 / 0x80000000 = 37.50%)

352B	BB#2: derived from LLVM BB %for.body3.lr.ph.preheader
	    Predecessors according to CFG: BB#1
368B		%vreg1<def> = LSL32ri %vreg33, 2, %STATUS<imp-def,dead>; GPR32:%vreg1,%vreg33
384B		%vreg0<def> = ADDri_r32 %vreg31, 8, %STATUS<imp-def,dead>; GPR32:%vreg0,%vreg31
400B		%vreg36<def> = MOViPTR <fi#0>, 0; GPR32:%vreg36
416B		%vreg11<def> = ADDri_r32 %vreg36, 8, %STATUS<imp-def,dead>; GPR32:%vreg11,%vreg36
432B		%vreg42:isub_hi<def,read-undef> = MOVi32ri 0; FPR64_with_isub_hi_in_FPR32:%vreg42
464B		%vreg82<def> = COPY %vreg42:isub_hi; GPR32:%vreg82 FPR64_with_isub_hi_in_FPR32:%vreg42
	    Successors according to CFG: BB#3(?%)

480B	BB#3: derived from LLVM BB %for.body3.lr.ph
	    Predecessors according to CFG: BB#2 BB#11
528B		%vreg74<def> = LDRi32_r32 <fi#3>, 0; mem:LD4[FixedStack3] GPR32:%vreg74
544B		GID %CONFIG<imp-def,dead>
560B		%CONFIG<def,dead> = MOVTS32_core %vreg74; GPR32:%vreg74
576B		GIE %CONFIG<imp-def,dead>
592B		%vreg38<def> = IMULrr_r32 %vreg82, %vreg33, %STATUS<imp-def,dead>; GPR32:%vreg38,%vreg82,%vreg33
608B		%vreg39<def> = LSL32ri %vreg38, 2, %STATUS<imp-def,dead>; GPR32:%vreg39,%vreg38
624B		%vreg5<def> = ADDrr_r32 %vreg30, %vreg39, %STATUS<imp-def,dead>; GPR32:%vreg5,%vreg30,%vreg39
640B		%vreg83<def> = COPY %vreg81; GPR32:%vreg83,%vreg81
656B		%vreg84<def> = COPY %vreg0; GPR32:%vreg84,%vreg0
672B		%vreg85<def> = COPY %vreg42:isub_hi; GPR32:%vreg85 FPR64_with_isub_hi_in_FPR32:%vreg42
	    Successors according to CFG: BB#4(?%)

688B	BB#4: derived from LLVM BB %for.body9.preheader
	    Predecessors according to CFG: BB#3 BB#10
768B		%vreg42:isub_lo<def> = COPY %vreg42:isub_hi; FPR64_with_isub_hi_in_FPR32:%vreg42
784B		STRi64 %vreg42, <fi#0>, 24; mem:ST8[%1+24] FPR64_with_isub_hi_in_FPR32:%vreg42
800B		STRi64 %vreg42, <fi#0>, 16; mem:ST8[%1+16] FPR64_with_isub_hi_in_FPR32:%vreg42
816B		STRi64 %vreg42, <fi#0>, 8; mem:ST8[%1+8] FPR64_with_isub_hi_in_FPR32:%vreg42
832B		STRi64 %vreg42, <fi#0>, 0; mem:ST8[%1] FPR64_with_isub_hi_in_FPR32:%vreg42
848B		%vreg86<def> = COPY %vreg84; GPR32:%vreg86,%vreg84
864B		%vreg87<def> = COPY %vreg42:isub_hi; GPR32:%vreg87 FPR64_with_isub_hi_in_FPR32:%vreg42
880B		BNONE32 <BB#6>, %STATUS<imp-use>
	    Successors according to CFG: BB#6(?%)

896B	BB#5: derived from LLVM BB %for.cond64.preheader
	    Predecessors according to CFG: BB#8
912B		%vreg91<def> = COPY %vreg83; GPR32:%vreg91,%vreg83
928B		%vreg92<def> = COPY %vreg42:isub_hi; GPR32:%vreg92 FPR64_with_isub_hi_in_FPR32:%vreg42
944B		BNONE32 <BB#9>, %STATUS<imp-use>
	    Successors according to CFG: BB#9(?%)

960B	BB#6: derived from LLVM BB %for.body9
	    Predecessors according to CFG: BB#4 BB#8
1008B		%vreg44<def> = LSL32ri %vreg87, 2, %STATUS<imp-def,dead>; GPR32:%vreg44,%vreg87
1024B		%vreg45<def> = ADDrr_r32 %vreg5, %vreg44, %STATUS<imp-def,dead>; GPR32:%vreg45,%vreg5,%vreg44
1056B		%vreg12<def> = LDRf32 %vreg45, 0; mem:Volatile LD4[%add.ptr10](tbaa=!2) FPR32:%vreg12 GPR32:%vreg45
1072B		%vreg88<def> = COPY %vreg11; GPR32:%vreg88,%vreg11
1088B		%vreg89<def> = COPY %vreg86; GPR32:%vreg89,%vreg86
1104B		%vreg90<def> = COPY %vreg42:isub_hi; GPR32:%vreg90 FPR64_with_isub_hi_in_FPR32:%vreg42
	    Successors according to CFG: BB#7(?%)

1120B	BB#7: derived from LLVM BB %for.body13
	    Predecessors according to CFG: BB#6 BB#7
1184B		%vreg46<def> = LDRf32 %vreg89, -8; mem:Volatile LD4[%scevgep8](tbaa=!2) FPR32:%vreg46 GPR32:%vreg89
1200B		%vreg18<def> = ADDri_r32 %vreg88, 16, %STATUS<imp-def,dead>; GPR32:%vreg18,%vreg88
1216B		%vreg17<def> = ADDri_r32 %vreg89, 16, %STATUS<imp-def,dead>; GPR32:%vreg17,%vreg89
1232B		%vreg47<def> = LDRf32 %vreg89, -4; mem:Volatile LD4[%scevgep9](tbaa=!2) FPR32:%vreg47 GPR32:%vreg89
1248B		%vreg90<def> = ADDri_r32 %vreg90, 4, %STATUS<imp-def,dead>; GPR32:%vreg90
1264B		%vreg48<def> = LDRf32 %vreg89, 0; mem:Volatile LD4[%lsr.iv5](tbaa=!2) FPR32:%vreg48 GPR32:%vreg89
1280B		%vreg49<def> = LDRf32 %vreg89, 4; mem:Volatile LD4[%scevgep7](tbaa=!2) FPR32:%vreg49 GPR32:%vreg89
1296B		%vreg79<def> = LDRf64 %vreg88, -8; mem:LD4[%scevgep17](tbaa=!2) LD4[%scevgep15](tbaa=!2) FPR64_with_isub_hi_in_FPR32:%vreg79 GPR32:%vreg88
1344B		%vreg75<def> = LDRi32_r32 <fi#2>, 0; mem:LD4[FixedStack2] GPR32:%vreg75
1360B		GID %CONFIG<imp-def,dead>
1376B		%CONFIG<def,dead> = MOVTS32_core %vreg75; GPR32:%vreg75
1392B		GIE %CONFIG<imp-def,dead>
1424B		%vreg79:isub_hi<def,tied1> = FMADDrr_r32 %vreg79:isub_hi<tied0>, %vreg12, %vreg46, %STATUS<imp-def,dead>; FPR64_with_isub_hi_in_FPR32:%vreg79 FPR32:%vreg12,%vreg46
1456B		%vreg79:isub_lo<def,tied1> = FMADDrr_r32 %vreg79:isub_lo<tied0>, %vreg12, %vreg47, %STATUS<imp-def,dead>; FPR64_with_isub_hi_in_FPR32:%vreg79 FPR32:%vreg12,%vreg47
1472B		%vreg80:isub_lo<def,read-undef> = COPY %vreg79:isub_hi; FPR64:%vreg80 FPR64_with_isub_hi_in_FPR32:%vreg79
1488B		%vreg80:isub_hi<def> = COPY %vreg79:isub_lo; FPR64:%vreg80 FPR64_with_isub_hi_in_FPR32:%vreg79
1504B		STRf64 %vreg80, %vreg88, -8; mem:ST4[%scevgep17](tbaa=!2) ST4[%scevgep15](tbaa=!2) FPR64:%vreg80 GPR32:%vreg88
1520B		%vreg55<def> = LDRf32 %vreg88, 0; mem:LD4[%lsr.iv1214](tbaa=!2) FPR32:%vreg55 GPR32:%vreg88
1552B		%vreg55<def,tied1> = FMADDrr_r32 %vreg55<tied0>, %vreg12, %vreg48, %STATUS<imp-def,dead>; FPR32:%vreg55,%vreg12,%vreg48
1568B		STRf32 %vreg55, %vreg88, 0; mem:ST4[%lsr.iv1214](tbaa=!2) FPR32:%vreg55 GPR32:%vreg88
1584B		%vreg57<def> = LDRf32 %vreg88, 4; mem:LD4[%scevgep16](tbaa=!2) FPR32:%vreg57 GPR32:%vreg88
1616B		%vreg57<def,tied1> = FMADDrr_r32 %vreg57<tied0>, %vreg12, %vreg49, %STATUS<imp-def,dead>; FPR32:%vreg57,%vreg12,%vreg49
1632B		%vreg58<def,dead> = CMPri_r32 %vreg90, 8, %STATUS<imp-def>; GPR32:%vreg58,%vreg90
1648B		STRf32 %vreg57, %vreg88, 4; mem:ST4[%scevgep16](tbaa=!2) FPR32:%vreg57 GPR32:%vreg88
1664B		%vreg88<def> = COPY %vreg18; GPR32:%vreg88,%vreg18
1680B		%vreg89<def> = COPY %vreg17; GPR32:%vreg89,%vreg17
1712B		BCC <BB#7>, 8, %STATUS<imp-use>
1728B		BNONE32 <BB#8>, %STATUS<imp-use>
	    Successors according to CFG: BB#7(0x7c000000 / 0x80000000 = 96.88%) BB#8(0x04000000 / 0x80000000 = 3.12%)

1744B	BB#8: derived from LLVM BB %for.end60
	    Predecessors according to CFG: BB#7
1760B		%vreg86<def> = ADDrr_r32 %vreg86, %vreg1, %STATUS<imp-def,dead>; GPR32:%vreg86,%vreg1
1776B		%vreg87<def> = ADDri_r32 %vreg87, 1, %STATUS<imp-def,dead>; GPR32:%vreg87
1792B		%vreg59<def,dead> = CMPrr_r32 %vreg87, %vreg33, %STATUS<imp-def>; GPR32:%vreg59,%vreg87,%vreg33
1840B		BCC <BB#5>, 0, %STATUS<imp-use>
1856B		BNONE32 <BB#6>, %STATUS<imp-use>
	    Successors according to CFG: BB#5(0x04000000 / 0x80000000 = 3.12%) BB#6(0x7c000000 / 0x80000000 = 96.88%)

1872B	BB#9: derived from LLVM BB %for.body66
	    Predecessors according to CFG: BB#5 BB#9
1920B		%vreg62<def> = ADDrr_r32 %vreg36, %vreg92, %STATUS<imp-def,dead>; GPR32:%vreg62,%vreg36,%vreg92
1936B		%vreg63<def> = LDRf32 %vreg62, 0; mem:LD4[%sunkaddr30](tbaa=!2) FPR32:%vreg63 GPR32:%vreg62
1952B		%vreg24<def> = ADDri_r32 %vreg91, 4, %STATUS<imp-def,dead>; GPR32:%vreg24,%vreg91
1968B		%vreg92<def> = ADDri_r32 %vreg92, 4, %STATUS<imp-def,dead>; GPR32:%vreg92
1984B		%vreg64<def> = LDRf32 %vreg91, 0; mem:Volatile LD4[%lsr.iv24](tbaa=!2) FPR32:%vreg64 GPR32:%vreg91
2000B		%vreg76<def> = LDRi32_r32 <fi#2>, 0; mem:LD4[FixedStack2] GPR32:%vreg76
2016B		GID %CONFIG<imp-def,dead>
2032B		%CONFIG<def,dead> = MOVTS32_core %vreg76; GPR32:%vreg76
2048B		GIE %CONFIG<imp-def,dead>
2064B		%vreg65<def> = FADDrr_r32 %vreg63, %vreg64, %STATUS<imp-def,dead>; FPR32:%vreg65,%vreg63,%vreg64
2080B		%vreg66<def,dead> = CMPri_r32 %vreg92, 32, %STATUS<imp-def>; GPR32:%vreg66,%vreg92
2096B		STRf32 %vreg65, %vreg91, 0; mem:Volatile ST4[%lsr.iv24](tbaa=!2) FPR32:%vreg65 GPR32:%vreg91
2112B		%vreg91<def> = COPY %vreg24; GPR32:%vreg91,%vreg24
2144B		BCC <BB#9>, 1, %STATUS<imp-use>
2160B		BNONE32 <BB#10>, %STATUS<imp-use>
	    Successors according to CFG: BB#10(0x04000000 / 0x80000000 = 3.12%) BB#9(0x7c000000 / 0x80000000 = 96.88%)

2176B	BB#10: derived from LLVM BB %for.end75
	    Predecessors according to CFG: BB#9
2192B		%vreg83<def> = ADDri_r32 %vreg83, 32, %STATUS<imp-def,dead>; GPR32:%vreg83
2208B		%vreg84<def> = ADDri_r32 %vreg84, 32, %STATUS<imp-def,dead>; GPR32:%vreg84
2224B		%vreg85<def> = ADDri_r32 %vreg85, 8, %STATUS<imp-def,dead>; GPR32:%vreg85
2240B		%vreg67<def,dead> = CMPrr_r32 %vreg85, %vreg33, %STATUS<imp-def>; GPR32:%vreg67,%vreg85,%vreg33
2304B		BCC <BB#4>, 8, %STATUS<imp-use>
2320B		BNONE32 <BB#11>, %STATUS<imp-use>
	    Successors according to CFG: BB#4(0x7c000000 / 0x80000000 = 96.88%) BB#11(0x04000000 / 0x80000000 = 3.12%)

2336B	BB#11: derived from LLVM BB %for.end78
	    Predecessors according to CFG: BB#10
2352B		%vreg81<def> = ADDrr_r32 %vreg81, %vreg1, %STATUS<imp-def,dead>; GPR32:%vreg81,%vreg1
2368B		%vreg82<def> = ADDri_r32 %vreg82, 1, %STATUS<imp-def,dead>; GPR32:%vreg82
2384B		%vreg68<def,dead> = CMPrr_r32 %vreg82, %vreg33, %STATUS<imp-def>; GPR32:%vreg68,%vreg82,%vreg33
2432B		BCC <BB#3>, 1, %STATUS<imp-use>
2448B		BNONE32 <BB#12>, %STATUS<imp-use>
	    Successors according to CFG: BB#12(0x04000000 / 0x80000000 = 3.12%) BB#3(0x7c000000 / 0x80000000 = 96.88%)

2464B	BB#12: derived from LLVM BB %for.end81
	    Predecessors according to CFG: BB#1 BB#11
2480B		%vreg77<def> = LDRi32_r32 <fi#1>, 0; mem:LD4[FixedStack1] GPR32:%vreg77
2496B		GID
2512B		%CONFIG<def> = MOVTS32_core %vreg77; GPR32:%vreg77
2528B		GIE %CONFIG<imp-use,kill>
2544B		RTS

# End machine code for function matmac.

# *** IR Dump After Virtual Register Map ***:
# Machine code for function matmac: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=32, align=8, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=4, align=8, at location [SP]
Function Live Ins: %R0 in %vreg30, %R1 in %vreg31, %R2 in %vreg32, %R3 in %vreg33

0B	BB#0: 
	    Live Ins: %R0 %R1 %R2 %R3
16B		GID %CONFIG<imp-def>
32B		%vreg78:isub_hi<def,read-undef> = MOVFS32_core %CONFIG; FPR64_with_isub_hi_in_FPR32:%vreg78
48B		STRi32_r32 %vreg78:isub_hi, <fi#1>, 0; mem:ST4[FixedStack1] FPR64_with_isub_hi_in_FPR32:%vreg78
64B		%vreg73<def> = MOVi32ri 65535; GPR32:%vreg73
96B		%vreg73<def,tied1> = MOVTi32ri %vreg73<tied0>, 65521; GPR32:%vreg73
112B		%vreg78:isub_lo<def> = ANDrr_r32 %vreg78:isub_hi, %vreg73, %STATUS<imp-def>; FPR64_with_isub_hi_in_FPR32:%vreg78 GPR32:%vreg73
144B		%vreg78:isub_hi<def,tied1> = MOVTi32ri %vreg78:isub_hi<tied0>, 72; FPR64_with_isub_hi_in_FPR32:%vreg78
192B		STRi64 %vreg78, <fi#3>, 0; mem:ST4[FixedStack3] ST4[FixedStack2] FPR64_with_isub_hi_in_FPR32:%vreg78
208B		GIE %CONFIG<imp-use,kill>
	    Successors according to CFG: BB#1(?%)

224B	BB#1: derived from LLVM BB %entry
	    Live Ins: %R0 %R1 %R2 %R3
	    Predecessors according to CFG: BB#0
240B		%vreg33<def> = COPY %R3; GPR32:%vreg33
256B		%vreg81<def> = COPY %R2; GPR32:%vreg81
272B		%vreg31<def> = COPY %R1; GPR32:%vreg31
288B		%vreg30<def> = COPY %R0; GPR32:%vreg30
304B		%vreg34<def,dead> = CMPri_r32 %vreg33, 1, %STATUS<imp-def>; GPR32:%vreg34,%vreg33
320B		BCC <BB#12>, 8, %STATUS<imp-use>
336B		BNONE32 <BB#2>, %STATUS<imp-use>
	    Successors according to CFG: BB#2(0x50000000 / 0x80000000 = 62.50%) BB#12(0x30000000 / 0x80000000 = 37.50%)

352B	BB#2: derived from LLVM BB %for.body3.lr.ph.preheader
	    Predecessors according to CFG: BB#1
368B		%vreg1<def> = LSL32ri %vreg33, 2, %STATUS<imp-def,dead>; GPR32:%vreg1,%vreg33
384B		%vreg0<def> = ADDri_r32 %vreg31, 8, %STATUS<imp-def,dead>; GPR32:%vreg0,%vreg31
400B		%vreg36<def> = MOViPTR <fi#0>, 0; GPR32:%vreg36
416B		%vreg11<def> = ADDri_r32 %vreg36, 8, %STATUS<imp-def,dead>; GPR32:%vreg11,%vreg36
432B		%vreg42:isub_hi<def,read-undef> = MOVi32ri 0; FPR64_with_isub_hi_in_FPR32:%vreg42
464B		%vreg82<def> = COPY %vreg42:isub_hi; GPR32:%vreg82 FPR64_with_isub_hi_in_FPR32:%vreg42
	    Successors according to CFG: BB#3(?%)

480B	BB#3: derived from LLVM BB %for.body3.lr.ph
	    Predecessors according to CFG: BB#2 BB#11
528B		%vreg74<def> = LDRi32_r32 <fi#3>, 0; mem:LD4[FixedStack3] GPR32:%vreg74
544B		GID %CONFIG<imp-def,dead>
560B		%CONFIG<def,dead> = MOVTS32_core %vreg74; GPR32:%vreg74
576B		GIE %CONFIG<imp-def,dead>
592B		%vreg38<def> = IMULrr_r32 %vreg82, %vreg33, %STATUS<imp-def,dead>; GPR32:%vreg38,%vreg82,%vreg33
608B		%vreg39<def> = LSL32ri %vreg38, 2, %STATUS<imp-def,dead>; GPR32:%vreg39,%vreg38
624B		%vreg5<def> = ADDrr_r32 %vreg30, %vreg39, %STATUS<imp-def,dead>; GPR32:%vreg5,%vreg30,%vreg39
640B		%vreg83<def> = COPY %vreg81; GPR32:%vreg83,%vreg81
656B		%vreg84<def> = COPY %vreg0; GPR32:%vreg84,%vreg0
672B		%vreg85<def> = COPY %vreg42:isub_hi; GPR32:%vreg85 FPR64_with_isub_hi_in_FPR32:%vreg42
	    Successors according to CFG: BB#4(?%)

688B	BB#4: derived from LLVM BB %for.body9.preheader
	    Predecessors according to CFG: BB#3 BB#10
768B		%vreg42:isub_lo<def> = COPY %vreg42:isub_hi; FPR64_with_isub_hi_in_FPR32:%vreg42
784B		STRi64 %vreg42, <fi#0>, 24; mem:ST8[%1+24] FPR64_with_isub_hi_in_FPR32:%vreg42
800B		STRi64 %vreg42, <fi#0>, 16; mem:ST8[%1+16] FPR64_with_isub_hi_in_FPR32:%vreg42
816B		STRi64 %vreg42, <fi#0>, 8; mem:ST8[%1+8] FPR64_with_isub_hi_in_FPR32:%vreg42
832B		STRi64 %vreg42, <fi#0>, 0; mem:ST8[%1] FPR64_with_isub_hi_in_FPR32:%vreg42
848B		%vreg86<def> = COPY %vreg84; GPR32:%vreg86,%vreg84
864B		%vreg87<def> = COPY %vreg42:isub_hi; GPR32:%vreg87 FPR64_with_isub_hi_in_FPR32:%vreg42
880B		BNONE32 <BB#6>, %STATUS<imp-use>
	    Successors according to CFG: BB#6(?%)

896B	BB#5: derived from LLVM BB %for.cond64.preheader
	    Predecessors according to CFG: BB#8
912B		%vreg91<def> = COPY %vreg83; GPR32:%vreg91,%vreg83
928B		%vreg92<def> = COPY %vreg42:isub_hi; GPR32:%vreg92 FPR64_with_isub_hi_in_FPR32:%vreg42
944B		BNONE32 <BB#9>, %STATUS<imp-use>
	    Successors according to CFG: BB#9(?%)

960B	BB#6: derived from LLVM BB %for.body9
	    Predecessors according to CFG: BB#4 BB#8
1008B		%vreg44<def> = LSL32ri %vreg87, 2, %STATUS<imp-def,dead>; GPR32:%vreg44,%vreg87
1024B		%vreg45<def> = ADDrr_r32 %vreg5, %vreg44, %STATUS<imp-def,dead>; GPR32:%vreg45,%vreg5,%vreg44
1056B		%vreg12<def> = LDRf32 %vreg45, 0; mem:Volatile LD4[%add.ptr10](tbaa=!2) FPR32:%vreg12 GPR32:%vreg45
1072B		%vreg88<def> = COPY %vreg11; GPR32:%vreg88,%vreg11
1088B		%vreg89<def> = COPY %vreg86; GPR32:%vreg89,%vreg86
1104B		%vreg90<def> = COPY %vreg42:isub_hi; GPR32:%vreg90 FPR64_with_isub_hi_in_FPR32:%vreg42
	    Successors according to CFG: BB#7(?%)

1120B	BB#7: derived from LLVM BB %for.body13
	    Predecessors according to CFG: BB#6 BB#7
1184B		%vreg46<def> = LDRf32 %vreg89, -8; mem:Volatile LD4[%scevgep8](tbaa=!2) FPR32:%vreg46 GPR32:%vreg89
1200B		%vreg18<def> = ADDri_r32 %vreg88, 16, %STATUS<imp-def,dead>; GPR32:%vreg18,%vreg88
1216B		%vreg17<def> = ADDri_r32 %vreg89, 16, %STATUS<imp-def,dead>; GPR32:%vreg17,%vreg89
1232B		%vreg47<def> = LDRf32 %vreg89, -4; mem:Volatile LD4[%scevgep9](tbaa=!2) FPR32:%vreg47 GPR32:%vreg89
1248B		%vreg90<def> = ADDri_r32 %vreg90, 4, %STATUS<imp-def,dead>; GPR32:%vreg90
1264B		%vreg48<def> = LDRf32 %vreg89, 0; mem:Volatile LD4[%lsr.iv5](tbaa=!2) FPR32:%vreg48 GPR32:%vreg89
1280B		%vreg49<def> = LDRf32 %vreg89, 4; mem:Volatile LD4[%scevgep7](tbaa=!2) FPR32:%vreg49 GPR32:%vreg89
1296B		%vreg79<def> = LDRf64 %vreg88, -8; mem:LD4[%scevgep17](tbaa=!2) LD4[%scevgep15](tbaa=!2) FPR64_with_isub_hi_in_FPR32:%vreg79 GPR32:%vreg88
1344B		%vreg75<def> = LDRi32_r32 <fi#2>, 0; mem:LD4[FixedStack2] GPR32:%vreg75
1360B		GID %CONFIG<imp-def,dead>
1376B		%CONFIG<def,dead> = MOVTS32_core %vreg75; GPR32:%vreg75
1392B		GIE %CONFIG<imp-def,dead>
1424B		%vreg79:isub_hi<def,tied1> = FMADDrr_r32 %vreg79:isub_hi<tied0>, %vreg12, %vreg46, %STATUS<imp-def,dead>; FPR64_with_isub_hi_in_FPR32:%vreg79 FPR32:%vreg12,%vreg46
1456B		%vreg79:isub_lo<def,tied1> = FMADDrr_r32 %vreg79:isub_lo<tied0>, %vreg12, %vreg47, %STATUS<imp-def,dead>; FPR64_with_isub_hi_in_FPR32:%vreg79 FPR32:%vreg12,%vreg47
1472B		%vreg80:isub_lo<def,read-undef> = COPY %vreg79:isub_hi; FPR64:%vreg80 FPR64_with_isub_hi_in_FPR32:%vreg79
1488B		%vreg80:isub_hi<def> = COPY %vreg79:isub_lo; FPR64:%vreg80 FPR64_with_isub_hi_in_FPR32:%vreg79
1504B		STRf64 %vreg80, %vreg88, -8; mem:ST4[%scevgep17](tbaa=!2) ST4[%scevgep15](tbaa=!2) FPR64:%vreg80 GPR32:%vreg88
1520B		%vreg55<def> = LDRf32 %vreg88, 0; mem:LD4[%lsr.iv1214](tbaa=!2) FPR32:%vreg55 GPR32:%vreg88
1552B		%vreg55<def,tied1> = FMADDrr_r32 %vreg55<tied0>, %vreg12, %vreg48, %STATUS<imp-def,dead>; FPR32:%vreg55,%vreg12,%vreg48
1568B		STRf32 %vreg55, %vreg88, 0; mem:ST4[%lsr.iv1214](tbaa=!2) FPR32:%vreg55 GPR32:%vreg88
1584B		%vreg57<def> = LDRf32 %vreg88, 4; mem:LD4[%scevgep16](tbaa=!2) FPR32:%vreg57 GPR32:%vreg88
1616B		%vreg57<def,tied1> = FMADDrr_r32 %vreg57<tied0>, %vreg12, %vreg49, %STATUS<imp-def,dead>; FPR32:%vreg57,%vreg12,%vreg49
1632B		%vreg58<def,dead> = CMPri_r32 %vreg90, 8, %STATUS<imp-def>; GPR32:%vreg58,%vreg90
1648B		STRf32 %vreg57, %vreg88, 4; mem:ST4[%scevgep16](tbaa=!2) FPR32:%vreg57 GPR32:%vreg88
1664B		%vreg88<def> = COPY %vreg18; GPR32:%vreg88,%vreg18
1680B		%vreg89<def> = COPY %vreg17; GPR32:%vreg89,%vreg17
1712B		BCC <BB#7>, 8, %STATUS<imp-use>
1728B		BNONE32 <BB#8>, %STATUS<imp-use>
	    Successors according to CFG: BB#7(0x7c000000 / 0x80000000 = 96.88%) BB#8(0x04000000 / 0x80000000 = 3.12%)

1744B	BB#8: derived from LLVM BB %for.end60
	    Predecessors according to CFG: BB#7
1760B		%vreg86<def> = ADDrr_r32 %vreg86, %vreg1, %STATUS<imp-def,dead>; GPR32:%vreg86,%vreg1
1776B		%vreg87<def> = ADDri_r32 %vreg87, 1, %STATUS<imp-def,dead>; GPR32:%vreg87
1792B		%vreg59<def,dead> = CMPrr_r32 %vreg87, %vreg33, %STATUS<imp-def>; GPR32:%vreg59,%vreg87,%vreg33
1840B		BCC <BB#5>, 0, %STATUS<imp-use>
1856B		BNONE32 <BB#6>, %STATUS<imp-use>
	    Successors according to CFG: BB#5(0x04000000 / 0x80000000 = 3.12%) BB#6(0x7c000000 / 0x80000000 = 96.88%)

1872B	BB#9: derived from LLVM BB %for.body66
	    Predecessors according to CFG: BB#5 BB#9
1920B		%vreg62<def> = ADDrr_r32 %vreg36, %vreg92, %STATUS<imp-def,dead>; GPR32:%vreg62,%vreg36,%vreg92
1936B		%vreg63<def> = LDRf32 %vreg62, 0; mem:LD4[%sunkaddr30](tbaa=!2) FPR32:%vreg63 GPR32:%vreg62
1952B		%vreg24<def> = ADDri_r32 %vreg91, 4, %STATUS<imp-def,dead>; GPR32:%vreg24,%vreg91
1968B		%vreg92<def> = ADDri_r32 %vreg92, 4, %STATUS<imp-def,dead>; GPR32:%vreg92
1984B		%vreg64<def> = LDRf32 %vreg91, 0; mem:Volatile LD4[%lsr.iv24](tbaa=!2) FPR32:%vreg64 GPR32:%vreg91
2000B		%vreg76<def> = LDRi32_r32 <fi#2>, 0; mem:LD4[FixedStack2] GPR32:%vreg76
2016B		GID %CONFIG<imp-def,dead>
2032B		%CONFIG<def,dead> = MOVTS32_core %vreg76; GPR32:%vreg76
2048B		GIE %CONFIG<imp-def,dead>
2064B		%vreg65<def> = FADDrr_r32 %vreg63, %vreg64, %STATUS<imp-def,dead>; FPR32:%vreg65,%vreg63,%vreg64
2080B		%vreg66<def,dead> = CMPri_r32 %vreg92, 32, %STATUS<imp-def>; GPR32:%vreg66,%vreg92
2096B		STRf32 %vreg65, %vreg91, 0; mem:Volatile ST4[%lsr.iv24](tbaa=!2) FPR32:%vreg65 GPR32:%vreg91
2112B		%vreg91<def> = COPY %vreg24; GPR32:%vreg91,%vreg24
2144B		BCC <BB#9>, 1, %STATUS<imp-use>
2160B		BNONE32 <BB#10>, %STATUS<imp-use>
	    Successors according to CFG: BB#10(0x04000000 / 0x80000000 = 3.12%) BB#9(0x7c000000 / 0x80000000 = 96.88%)

2176B	BB#10: derived from LLVM BB %for.end75
	    Predecessors according to CFG: BB#9
2192B		%vreg83<def> = ADDri_r32 %vreg83, 32, %STATUS<imp-def,dead>; GPR32:%vreg83
2208B		%vreg84<def> = ADDri_r32 %vreg84, 32, %STATUS<imp-def,dead>; GPR32:%vreg84
2224B		%vreg85<def> = ADDri_r32 %vreg85, 8, %STATUS<imp-def,dead>; GPR32:%vreg85
2240B		%vreg67<def,dead> = CMPrr_r32 %vreg85, %vreg33, %STATUS<imp-def>; GPR32:%vreg67,%vreg85,%vreg33
2304B		BCC <BB#4>, 8, %STATUS<imp-use>
2320B		BNONE32 <BB#11>, %STATUS<imp-use>
	    Successors according to CFG: BB#4(0x7c000000 / 0x80000000 = 96.88%) BB#11(0x04000000 / 0x80000000 = 3.12%)

2336B	BB#11: derived from LLVM BB %for.end78
	    Predecessors according to CFG: BB#10
2352B		%vreg81<def> = ADDrr_r32 %vreg81, %vreg1, %STATUS<imp-def,dead>; GPR32:%vreg81,%vreg1
2368B		%vreg82<def> = ADDri_r32 %vreg82, 1, %STATUS<imp-def,dead>; GPR32:%vreg82
2384B		%vreg68<def,dead> = CMPrr_r32 %vreg82, %vreg33, %STATUS<imp-def>; GPR32:%vreg68,%vreg82,%vreg33
2432B		BCC <BB#3>, 1, %STATUS<imp-use>
2448B		BNONE32 <BB#12>, %STATUS<imp-use>
	    Successors according to CFG: BB#12(0x04000000 / 0x80000000 = 3.12%) BB#3(0x7c000000 / 0x80000000 = 96.88%)

2464B	BB#12: derived from LLVM BB %for.end81
	    Predecessors according to CFG: BB#1 BB#11
2480B		%vreg77<def> = LDRi32_r32 <fi#1>, 0; mem:LD4[FixedStack1] GPR32:%vreg77
2496B		GID
2512B		%CONFIG<def> = MOVTS32_core %vreg77; GPR32:%vreg77
2528B		GIE %CONFIG<imp-use,kill>
2544B		RTS

# End machine code for function matmac.

# *** IR Dump Before Live Register Matrix ***:
# Machine code for function matmac: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=32, align=8, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=4, align=8, at location [SP]
Function Live Ins: %R0 in %vreg30, %R1 in %vreg31, %R2 in %vreg32, %R3 in %vreg33

0B	BB#0: 
	    Live Ins: %R0 %R1 %R2 %R3
16B		GID %CONFIG<imp-def>
32B		%vreg78:isub_hi<def,read-undef> = MOVFS32_core %CONFIG; FPR64_with_isub_hi_in_FPR32:%vreg78
48B		STRi32_r32 %vreg78:isub_hi, <fi#1>, 0; mem:ST4[FixedStack1] FPR64_with_isub_hi_in_FPR32:%vreg78
64B		%vreg73<def> = MOVi32ri 65535; GPR32:%vreg73
96B		%vreg73<def,tied1> = MOVTi32ri %vreg73<tied0>, 65521; GPR32:%vreg73
112B		%vreg78:isub_lo<def> = ANDrr_r32 %vreg78:isub_hi, %vreg73, %STATUS<imp-def>; FPR64_with_isub_hi_in_FPR32:%vreg78 GPR32:%vreg73
144B		%vreg78:isub_hi<def,tied1> = MOVTi32ri %vreg78:isub_hi<tied0>, 72; FPR64_with_isub_hi_in_FPR32:%vreg78
192B		STRi64 %vreg78, <fi#3>, 0; mem:ST4[FixedStack3] ST4[FixedStack2] FPR64_with_isub_hi_in_FPR32:%vreg78
208B		GIE %CONFIG<imp-use,kill>
	    Successors according to CFG: BB#1(?%)

224B	BB#1: derived from LLVM BB %entry
	    Live Ins: %R0 %R1 %R2 %R3
	    Predecessors according to CFG: BB#0
240B		%vreg33<def> = COPY %R3; GPR32:%vreg33
256B		%vreg81<def> = COPY %R2; GPR32:%vreg81
272B		%vreg31<def> = COPY %R1; GPR32:%vreg31
288B		%vreg30<def> = COPY %R0; GPR32:%vreg30
304B		%vreg34<def,dead> = CMPri_r32 %vreg33, 1, %STATUS<imp-def>; GPR32:%vreg34,%vreg33
320B		BCC <BB#12>, 8, %STATUS<imp-use>
336B		BNONE32 <BB#2>, %STATUS<imp-use>
	    Successors according to CFG: BB#2(0x50000000 / 0x80000000 = 62.50%) BB#12(0x30000000 / 0x80000000 = 37.50%)

352B	BB#2: derived from LLVM BB %for.body3.lr.ph.preheader
	    Predecessors according to CFG: BB#1
368B		%vreg1<def> = LSL32ri %vreg33, 2, %STATUS<imp-def,dead>; GPR32:%vreg1,%vreg33
384B		%vreg0<def> = ADDri_r32 %vreg31, 8, %STATUS<imp-def,dead>; GPR32:%vreg0,%vreg31
400B		%vreg36<def> = MOViPTR <fi#0>, 0; GPR32:%vreg36
416B		%vreg11<def> = ADDri_r32 %vreg36, 8, %STATUS<imp-def,dead>; GPR32:%vreg11,%vreg36
432B		%vreg42:isub_hi<def,read-undef> = MOVi32ri 0; FPR64_with_isub_hi_in_FPR32:%vreg42
464B		%vreg82<def> = COPY %vreg42:isub_hi; GPR32:%vreg82 FPR64_with_isub_hi_in_FPR32:%vreg42
	    Successors according to CFG: BB#3(?%)

480B	BB#3: derived from LLVM BB %for.body3.lr.ph
	    Predecessors according to CFG: BB#2 BB#11
528B		%vreg74<def> = LDRi32_r32 <fi#3>, 0; mem:LD4[FixedStack3] GPR32:%vreg74
544B		GID %CONFIG<imp-def,dead>
560B		%CONFIG<def,dead> = MOVTS32_core %vreg74; GPR32:%vreg74
576B		GIE %CONFIG<imp-def,dead>
592B		%vreg38<def> = IMULrr_r32 %vreg82, %vreg33, %STATUS<imp-def,dead>; GPR32:%vreg38,%vreg82,%vreg33
608B		%vreg39<def> = LSL32ri %vreg38, 2, %STATUS<imp-def,dead>; GPR32:%vreg39,%vreg38
624B		%vreg5<def> = ADDrr_r32 %vreg30, %vreg39, %STATUS<imp-def,dead>; GPR32:%vreg5,%vreg30,%vreg39
640B		%vreg83<def> = COPY %vreg81; GPR32:%vreg83,%vreg81
656B		%vreg84<def> = COPY %vreg0; GPR32:%vreg84,%vreg0
672B		%vreg85<def> = COPY %vreg42:isub_hi; GPR32:%vreg85 FPR64_with_isub_hi_in_FPR32:%vreg42
	    Successors according to CFG: BB#4(?%)

688B	BB#4: derived from LLVM BB %for.body9.preheader
	    Predecessors according to CFG: BB#3 BB#10
768B		%vreg42:isub_lo<def> = COPY %vreg42:isub_hi; FPR64_with_isub_hi_in_FPR32:%vreg42
784B		STRi64 %vreg42, <fi#0>, 24; mem:ST8[%1+24] FPR64_with_isub_hi_in_FPR32:%vreg42
800B		STRi64 %vreg42, <fi#0>, 16; mem:ST8[%1+16] FPR64_with_isub_hi_in_FPR32:%vreg42
816B		STRi64 %vreg42, <fi#0>, 8; mem:ST8[%1+8] FPR64_with_isub_hi_in_FPR32:%vreg42
832B		STRi64 %vreg42, <fi#0>, 0; mem:ST8[%1] FPR64_with_isub_hi_in_FPR32:%vreg42
848B		%vreg86<def> = COPY %vreg84; GPR32:%vreg86,%vreg84
864B		%vreg87<def> = COPY %vreg42:isub_hi; GPR32:%vreg87 FPR64_with_isub_hi_in_FPR32:%vreg42
880B		BNONE32 <BB#6>, %STATUS<imp-use>
	    Successors according to CFG: BB#6(?%)

896B	BB#5: derived from LLVM BB %for.cond64.preheader
	    Predecessors according to CFG: BB#8
912B		%vreg91<def> = COPY %vreg83; GPR32:%vreg91,%vreg83
928B		%vreg92<def> = COPY %vreg42:isub_hi; GPR32:%vreg92 FPR64_with_isub_hi_in_FPR32:%vreg42
944B		BNONE32 <BB#9>, %STATUS<imp-use>
	    Successors according to CFG: BB#9(?%)

960B	BB#6: derived from LLVM BB %for.body9
	    Predecessors according to CFG: BB#4 BB#8
1008B		%vreg44<def> = LSL32ri %vreg87, 2, %STATUS<imp-def,dead>; GPR32:%vreg44,%vreg87
1024B		%vreg45<def> = ADDrr_r32 %vreg5, %vreg44, %STATUS<imp-def,dead>; GPR32:%vreg45,%vreg5,%vreg44
1056B		%vreg12<def> = LDRf32 %vreg45, 0; mem:Volatile LD4[%add.ptr10](tbaa=!2) FPR32:%vreg12 GPR32:%vreg45
1072B		%vreg88<def> = COPY %vreg11; GPR32:%vreg88,%vreg11
1088B		%vreg89<def> = COPY %vreg86; GPR32:%vreg89,%vreg86
1104B		%vreg90<def> = COPY %vreg42:isub_hi; GPR32:%vreg90 FPR64_with_isub_hi_in_FPR32:%vreg42
	    Successors according to CFG: BB#7(?%)

1120B	BB#7: derived from LLVM BB %for.body13
	    Predecessors according to CFG: BB#6 BB#7
1184B		%vreg46<def> = LDRf32 %vreg89, -8; mem:Volatile LD4[%scevgep8](tbaa=!2) FPR32:%vreg46 GPR32:%vreg89
1200B		%vreg18<def> = ADDri_r32 %vreg88, 16, %STATUS<imp-def,dead>; GPR32:%vreg18,%vreg88
1216B		%vreg17<def> = ADDri_r32 %vreg89, 16, %STATUS<imp-def,dead>; GPR32:%vreg17,%vreg89
1232B		%vreg47<def> = LDRf32 %vreg89, -4; mem:Volatile LD4[%scevgep9](tbaa=!2) FPR32:%vreg47 GPR32:%vreg89
1248B		%vreg90<def> = ADDri_r32 %vreg90, 4, %STATUS<imp-def,dead>; GPR32:%vreg90
1264B		%vreg48<def> = LDRf32 %vreg89, 0; mem:Volatile LD4[%lsr.iv5](tbaa=!2) FPR32:%vreg48 GPR32:%vreg89
1280B		%vreg49<def> = LDRf32 %vreg89, 4; mem:Volatile LD4[%scevgep7](tbaa=!2) FPR32:%vreg49 GPR32:%vreg89
1296B		%vreg79<def> = LDRf64 %vreg88, -8; mem:LD4[%scevgep17](tbaa=!2) LD4[%scevgep15](tbaa=!2) FPR64_with_isub_hi_in_FPR32:%vreg79 GPR32:%vreg88
1344B		%vreg75<def> = LDRi32_r32 <fi#2>, 0; mem:LD4[FixedStack2] GPR32:%vreg75
1360B		GID %CONFIG<imp-def,dead>
1376B		%CONFIG<def,dead> = MOVTS32_core %vreg75; GPR32:%vreg75
1392B		GIE %CONFIG<imp-def,dead>
1424B		%vreg79:isub_hi<def,tied1> = FMADDrr_r32 %vreg79:isub_hi<tied0>, %vreg12, %vreg46, %STATUS<imp-def,dead>; FPR64_with_isub_hi_in_FPR32:%vreg79 FPR32:%vreg12,%vreg46
1456B		%vreg79:isub_lo<def,tied1> = FMADDrr_r32 %vreg79:isub_lo<tied0>, %vreg12, %vreg47, %STATUS<imp-def,dead>; FPR64_with_isub_hi_in_FPR32:%vreg79 FPR32:%vreg12,%vreg47
1472B		%vreg80:isub_lo<def,read-undef> = COPY %vreg79:isub_hi; FPR64:%vreg80 FPR64_with_isub_hi_in_FPR32:%vreg79
1488B		%vreg80:isub_hi<def> = COPY %vreg79:isub_lo; FPR64:%vreg80 FPR64_with_isub_hi_in_FPR32:%vreg79
1504B		STRf64 %vreg80, %vreg88, -8; mem:ST4[%scevgep17](tbaa=!2) ST4[%scevgep15](tbaa=!2) FPR64:%vreg80 GPR32:%vreg88
1520B		%vreg55<def> = LDRf32 %vreg88, 0; mem:LD4[%lsr.iv1214](tbaa=!2) FPR32:%vreg55 GPR32:%vreg88
1552B		%vreg55<def,tied1> = FMADDrr_r32 %vreg55<tied0>, %vreg12, %vreg48, %STATUS<imp-def,dead>; FPR32:%vreg55,%vreg12,%vreg48
1568B		STRf32 %vreg55, %vreg88, 0; mem:ST4[%lsr.iv1214](tbaa=!2) FPR32:%vreg55 GPR32:%vreg88
1584B		%vreg57<def> = LDRf32 %vreg88, 4; mem:LD4[%scevgep16](tbaa=!2) FPR32:%vreg57 GPR32:%vreg88
1616B		%vreg57<def,tied1> = FMADDrr_r32 %vreg57<tied0>, %vreg12, %vreg49, %STATUS<imp-def,dead>; FPR32:%vreg57,%vreg12,%vreg49
1632B		%vreg58<def,dead> = CMPri_r32 %vreg90, 8, %STATUS<imp-def>; GPR32:%vreg58,%vreg90
1648B		STRf32 %vreg57, %vreg88, 4; mem:ST4[%scevgep16](tbaa=!2) FPR32:%vreg57 GPR32:%vreg88
1664B		%vreg88<def> = COPY %vreg18; GPR32:%vreg88,%vreg18
1680B		%vreg89<def> = COPY %vreg17; GPR32:%vreg89,%vreg17
1712B		BCC <BB#7>, 8, %STATUS<imp-use>
1728B		BNONE32 <BB#8>, %STATUS<imp-use>
	    Successors according to CFG: BB#7(0x7c000000 / 0x80000000 = 96.88%) BB#8(0x04000000 / 0x80000000 = 3.12%)

1744B	BB#8: derived from LLVM BB %for.end60
	    Predecessors according to CFG: BB#7
1760B		%vreg86<def> = ADDrr_r32 %vreg86, %vreg1, %STATUS<imp-def,dead>; GPR32:%vreg86,%vreg1
1776B		%vreg87<def> = ADDri_r32 %vreg87, 1, %STATUS<imp-def,dead>; GPR32:%vreg87
1792B		%vreg59<def,dead> = CMPrr_r32 %vreg87, %vreg33, %STATUS<imp-def>; GPR32:%vreg59,%vreg87,%vreg33
1840B		BCC <BB#5>, 0, %STATUS<imp-use>
1856B		BNONE32 <BB#6>, %STATUS<imp-use>
	    Successors according to CFG: BB#5(0x04000000 / 0x80000000 = 3.12%) BB#6(0x7c000000 / 0x80000000 = 96.88%)

1872B	BB#9: derived from LLVM BB %for.body66
	    Predecessors according to CFG: BB#5 BB#9
1920B		%vreg62<def> = ADDrr_r32 %vreg36, %vreg92, %STATUS<imp-def,dead>; GPR32:%vreg62,%vreg36,%vreg92
1936B		%vreg63<def> = LDRf32 %vreg62, 0; mem:LD4[%sunkaddr30](tbaa=!2) FPR32:%vreg63 GPR32:%vreg62
1952B		%vreg24<def> = ADDri_r32 %vreg91, 4, %STATUS<imp-def,dead>; GPR32:%vreg24,%vreg91
1968B		%vreg92<def> = ADDri_r32 %vreg92, 4, %STATUS<imp-def,dead>; GPR32:%vreg92
1984B		%vreg64<def> = LDRf32 %vreg91, 0; mem:Volatile LD4[%lsr.iv24](tbaa=!2) FPR32:%vreg64 GPR32:%vreg91
2000B		%vreg76<def> = LDRi32_r32 <fi#2>, 0; mem:LD4[FixedStack2] GPR32:%vreg76
2016B		GID %CONFIG<imp-def,dead>
2032B		%CONFIG<def,dead> = MOVTS32_core %vreg76; GPR32:%vreg76
2048B		GIE %CONFIG<imp-def,dead>
2064B		%vreg65<def> = FADDrr_r32 %vreg63, %vreg64, %STATUS<imp-def,dead>; FPR32:%vreg65,%vreg63,%vreg64
2080B		%vreg66<def,dead> = CMPri_r32 %vreg92, 32, %STATUS<imp-def>; GPR32:%vreg66,%vreg92
2096B		STRf32 %vreg65, %vreg91, 0; mem:Volatile ST4[%lsr.iv24](tbaa=!2) FPR32:%vreg65 GPR32:%vreg91
2112B		%vreg91<def> = COPY %vreg24; GPR32:%vreg91,%vreg24
2144B		BCC <BB#9>, 1, %STATUS<imp-use>
2160B		BNONE32 <BB#10>, %STATUS<imp-use>
	    Successors according to CFG: BB#10(0x04000000 / 0x80000000 = 3.12%) BB#9(0x7c000000 / 0x80000000 = 96.88%)

2176B	BB#10: derived from LLVM BB %for.end75
	    Predecessors according to CFG: BB#9
2192B		%vreg83<def> = ADDri_r32 %vreg83, 32, %STATUS<imp-def,dead>; GPR32:%vreg83
2208B		%vreg84<def> = ADDri_r32 %vreg84, 32, %STATUS<imp-def,dead>; GPR32:%vreg84
2224B		%vreg85<def> = ADDri_r32 %vreg85, 8, %STATUS<imp-def,dead>; GPR32:%vreg85
2240B		%vreg67<def,dead> = CMPrr_r32 %vreg85, %vreg33, %STATUS<imp-def>; GPR32:%vreg67,%vreg85,%vreg33
2304B		BCC <BB#4>, 8, %STATUS<imp-use>
2320B		BNONE32 <BB#11>, %STATUS<imp-use>
	    Successors according to CFG: BB#4(0x7c000000 / 0x80000000 = 96.88%) BB#11(0x04000000 / 0x80000000 = 3.12%)

2336B	BB#11: derived from LLVM BB %for.end78
	    Predecessors according to CFG: BB#10
2352B		%vreg81<def> = ADDrr_r32 %vreg81, %vreg1, %STATUS<imp-def,dead>; GPR32:%vreg81,%vreg1
2368B		%vreg82<def> = ADDri_r32 %vreg82, 1, %STATUS<imp-def,dead>; GPR32:%vreg82
2384B		%vreg68<def,dead> = CMPrr_r32 %vreg82, %vreg33, %STATUS<imp-def>; GPR32:%vreg68,%vreg82,%vreg33
2432B		BCC <BB#3>, 1, %STATUS<imp-use>
2448B		BNONE32 <BB#12>, %STATUS<imp-use>
	    Successors according to CFG: BB#12(0x04000000 / 0x80000000 = 3.12%) BB#3(0x7c000000 / 0x80000000 = 96.88%)

2464B	BB#12: derived from LLVM BB %for.end81
	    Predecessors according to CFG: BB#1 BB#11
2480B		%vreg77<def> = LDRi32_r32 <fi#1>, 0; mem:LD4[FixedStack1] GPR32:%vreg77
2496B		GID
2512B		%CONFIG<def> = MOVTS32_core %vreg77; GPR32:%vreg77
2528B		GIE %CONFIG<imp-use,kill>
2544B		RTS

# End machine code for function matmac.

# *** IR Dump After Live Register Matrix ***:
# Machine code for function matmac: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=32, align=8, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=4, align=8, at location [SP]
Function Live Ins: %R0 in %vreg30, %R1 in %vreg31, %R2 in %vreg32, %R3 in %vreg33

0B	BB#0: 
	    Live Ins: %R0 %R1 %R2 %R3
16B		GID %CONFIG<imp-def>
32B		%vreg78:isub_hi<def,read-undef> = MOVFS32_core %CONFIG; FPR64_with_isub_hi_in_FPR32:%vreg78
48B		STRi32_r32 %vreg78:isub_hi, <fi#1>, 0; mem:ST4[FixedStack1] FPR64_with_isub_hi_in_FPR32:%vreg78
64B		%vreg73<def> = MOVi32ri 65535; GPR32:%vreg73
96B		%vreg73<def,tied1> = MOVTi32ri %vreg73<tied0>, 65521; GPR32:%vreg73
112B		%vreg78:isub_lo<def> = ANDrr_r32 %vreg78:isub_hi, %vreg73, %STATUS<imp-def>; FPR64_with_isub_hi_in_FPR32:%vreg78 GPR32:%vreg73
144B		%vreg78:isub_hi<def,tied1> = MOVTi32ri %vreg78:isub_hi<tied0>, 72; FPR64_with_isub_hi_in_FPR32:%vreg78
192B		STRi64 %vreg78, <fi#3>, 0; mem:ST4[FixedStack3] ST4[FixedStack2] FPR64_with_isub_hi_in_FPR32:%vreg78
208B		GIE %CONFIG<imp-use,kill>
	    Successors according to CFG: BB#1(?%)

224B	BB#1: derived from LLVM BB %entry
	    Live Ins: %R0 %R1 %R2 %R3
	    Predecessors according to CFG: BB#0
240B		%vreg33<def> = COPY %R3; GPR32:%vreg33
256B		%vreg81<def> = COPY %R2; GPR32:%vreg81
272B		%vreg31<def> = COPY %R1; GPR32:%vreg31
288B		%vreg30<def> = COPY %R0; GPR32:%vreg30
304B		%vreg34<def,dead> = CMPri_r32 %vreg33, 1, %STATUS<imp-def>; GPR32:%vreg34,%vreg33
320B		BCC <BB#12>, 8, %STATUS<imp-use>
336B		BNONE32 <BB#2>, %STATUS<imp-use>
	    Successors according to CFG: BB#2(0x50000000 / 0x80000000 = 62.50%) BB#12(0x30000000 / 0x80000000 = 37.50%)

352B	BB#2: derived from LLVM BB %for.body3.lr.ph.preheader
	    Predecessors according to CFG: BB#1
368B		%vreg1<def> = LSL32ri %vreg33, 2, %STATUS<imp-def,dead>; GPR32:%vreg1,%vreg33
384B		%vreg0<def> = ADDri_r32 %vreg31, 8, %STATUS<imp-def,dead>; GPR32:%vreg0,%vreg31
400B		%vreg36<def> = MOViPTR <fi#0>, 0; GPR32:%vreg36
416B		%vreg11<def> = ADDri_r32 %vreg36, 8, %STATUS<imp-def,dead>; GPR32:%vreg11,%vreg36
432B		%vreg42:isub_hi<def,read-undef> = MOVi32ri 0; FPR64_with_isub_hi_in_FPR32:%vreg42
464B		%vreg82<def> = COPY %vreg42:isub_hi; GPR32:%vreg82 FPR64_with_isub_hi_in_FPR32:%vreg42
	    Successors according to CFG: BB#3(?%)

480B	BB#3: derived from LLVM BB %for.body3.lr.ph
	    Predecessors according to CFG: BB#2 BB#11
528B		%vreg74<def> = LDRi32_r32 <fi#3>, 0; mem:LD4[FixedStack3] GPR32:%vreg74
544B		GID %CONFIG<imp-def,dead>
560B		%CONFIG<def,dead> = MOVTS32_core %vreg74; GPR32:%vreg74
576B		GIE %CONFIG<imp-def,dead>
592B		%vreg38<def> = IMULrr_r32 %vreg82, %vreg33, %STATUS<imp-def,dead>; GPR32:%vreg38,%vreg82,%vreg33
608B		%vreg39<def> = LSL32ri %vreg38, 2, %STATUS<imp-def,dead>; GPR32:%vreg39,%vreg38
624B		%vreg5<def> = ADDrr_r32 %vreg30, %vreg39, %STATUS<imp-def,dead>; GPR32:%vreg5,%vreg30,%vreg39
640B		%vreg83<def> = COPY %vreg81; GPR32:%vreg83,%vreg81
656B		%vreg84<def> = COPY %vreg0; GPR32:%vreg84,%vreg0
672B		%vreg85<def> = COPY %vreg42:isub_hi; GPR32:%vreg85 FPR64_with_isub_hi_in_FPR32:%vreg42
	    Successors according to CFG: BB#4(?%)

688B	BB#4: derived from LLVM BB %for.body9.preheader
	    Predecessors according to CFG: BB#3 BB#10
768B		%vreg42:isub_lo<def> = COPY %vreg42:isub_hi; FPR64_with_isub_hi_in_FPR32:%vreg42
784B		STRi64 %vreg42, <fi#0>, 24; mem:ST8[%1+24] FPR64_with_isub_hi_in_FPR32:%vreg42
800B		STRi64 %vreg42, <fi#0>, 16; mem:ST8[%1+16] FPR64_with_isub_hi_in_FPR32:%vreg42
816B		STRi64 %vreg42, <fi#0>, 8; mem:ST8[%1+8] FPR64_with_isub_hi_in_FPR32:%vreg42
832B		STRi64 %vreg42, <fi#0>, 0; mem:ST8[%1] FPR64_with_isub_hi_in_FPR32:%vreg42
848B		%vreg86<def> = COPY %vreg84; GPR32:%vreg86,%vreg84
864B		%vreg87<def> = COPY %vreg42:isub_hi; GPR32:%vreg87 FPR64_with_isub_hi_in_FPR32:%vreg42
880B		BNONE32 <BB#6>, %STATUS<imp-use>
	    Successors according to CFG: BB#6(?%)

896B	BB#5: derived from LLVM BB %for.cond64.preheader
	    Predecessors according to CFG: BB#8
912B		%vreg91<def> = COPY %vreg83; GPR32:%vreg91,%vreg83
928B		%vreg92<def> = COPY %vreg42:isub_hi; GPR32:%vreg92 FPR64_with_isub_hi_in_FPR32:%vreg42
944B		BNONE32 <BB#9>, %STATUS<imp-use>
	    Successors according to CFG: BB#9(?%)

960B	BB#6: derived from LLVM BB %for.body9
	    Predecessors according to CFG: BB#4 BB#8
1008B		%vreg44<def> = LSL32ri %vreg87, 2, %STATUS<imp-def,dead>; GPR32:%vreg44,%vreg87
1024B		%vreg45<def> = ADDrr_r32 %vreg5, %vreg44, %STATUS<imp-def,dead>; GPR32:%vreg45,%vreg5,%vreg44
1056B		%vreg12<def> = LDRf32 %vreg45, 0; mem:Volatile LD4[%add.ptr10](tbaa=!2) FPR32:%vreg12 GPR32:%vreg45
1072B		%vreg88<def> = COPY %vreg11; GPR32:%vreg88,%vreg11
1088B		%vreg89<def> = COPY %vreg86; GPR32:%vreg89,%vreg86
1104B		%vreg90<def> = COPY %vreg42:isub_hi; GPR32:%vreg90 FPR64_with_isub_hi_in_FPR32:%vreg42
	    Successors according to CFG: BB#7(?%)

1120B	BB#7: derived from LLVM BB %for.body13
	    Predecessors according to CFG: BB#6 BB#7
1184B		%vreg46<def> = LDRf32 %vreg89, -8; mem:Volatile LD4[%scevgep8](tbaa=!2) FPR32:%vreg46 GPR32:%vreg89
1200B		%vreg18<def> = ADDri_r32 %vreg88, 16, %STATUS<imp-def,dead>; GPR32:%vreg18,%vreg88
1216B		%vreg17<def> = ADDri_r32 %vreg89, 16, %STATUS<imp-def,dead>; GPR32:%vreg17,%vreg89
1232B		%vreg47<def> = LDRf32 %vreg89, -4; mem:Volatile LD4[%scevgep9](tbaa=!2) FPR32:%vreg47 GPR32:%vreg89
1248B		%vreg90<def> = ADDri_r32 %vreg90, 4, %STATUS<imp-def,dead>; GPR32:%vreg90
1264B		%vreg48<def> = LDRf32 %vreg89, 0; mem:Volatile LD4[%lsr.iv5](tbaa=!2) FPR32:%vreg48 GPR32:%vreg89
1280B		%vreg49<def> = LDRf32 %vreg89, 4; mem:Volatile LD4[%scevgep7](tbaa=!2) FPR32:%vreg49 GPR32:%vreg89
1296B		%vreg79<def> = LDRf64 %vreg88, -8; mem:LD4[%scevgep17](tbaa=!2) LD4[%scevgep15](tbaa=!2) FPR64_with_isub_hi_in_FPR32:%vreg79 GPR32:%vreg88
1344B		%vreg75<def> = LDRi32_r32 <fi#2>, 0; mem:LD4[FixedStack2] GPR32:%vreg75
1360B		GID %CONFIG<imp-def,dead>
1376B		%CONFIG<def,dead> = MOVTS32_core %vreg75; GPR32:%vreg75
1392B		GIE %CONFIG<imp-def,dead>
1424B		%vreg79:isub_hi<def,tied1> = FMADDrr_r32 %vreg79:isub_hi<tied0>, %vreg12, %vreg46, %STATUS<imp-def,dead>; FPR64_with_isub_hi_in_FPR32:%vreg79 FPR32:%vreg12,%vreg46
1456B		%vreg79:isub_lo<def,tied1> = FMADDrr_r32 %vreg79:isub_lo<tied0>, %vreg12, %vreg47, %STATUS<imp-def,dead>; FPR64_with_isub_hi_in_FPR32:%vreg79 FPR32:%vreg12,%vreg47
1472B		%vreg80:isub_lo<def,read-undef> = COPY %vreg79:isub_hi; FPR64:%vreg80 FPR64_with_isub_hi_in_FPR32:%vreg79
1488B		%vreg80:isub_hi<def> = COPY %vreg79:isub_lo; FPR64:%vreg80 FPR64_with_isub_hi_in_FPR32:%vreg79
1504B		STRf64 %vreg80, %vreg88, -8; mem:ST4[%scevgep17](tbaa=!2) ST4[%scevgep15](tbaa=!2) FPR64:%vreg80 GPR32:%vreg88
1520B		%vreg55<def> = LDRf32 %vreg88, 0; mem:LD4[%lsr.iv1214](tbaa=!2) FPR32:%vreg55 GPR32:%vreg88
1552B		%vreg55<def,tied1> = FMADDrr_r32 %vreg55<tied0>, %vreg12, %vreg48, %STATUS<imp-def,dead>; FPR32:%vreg55,%vreg12,%vreg48
1568B		STRf32 %vreg55, %vreg88, 0; mem:ST4[%lsr.iv1214](tbaa=!2) FPR32:%vreg55 GPR32:%vreg88
1584B		%vreg57<def> = LDRf32 %vreg88, 4; mem:LD4[%scevgep16](tbaa=!2) FPR32:%vreg57 GPR32:%vreg88
1616B		%vreg57<def,tied1> = FMADDrr_r32 %vreg57<tied0>, %vreg12, %vreg49, %STATUS<imp-def,dead>; FPR32:%vreg57,%vreg12,%vreg49
1632B		%vreg58<def,dead> = CMPri_r32 %vreg90, 8, %STATUS<imp-def>; GPR32:%vreg58,%vreg90
1648B		STRf32 %vreg57, %vreg88, 4; mem:ST4[%scevgep16](tbaa=!2) FPR32:%vreg57 GPR32:%vreg88
1664B		%vreg88<def> = COPY %vreg18; GPR32:%vreg88,%vreg18
1680B		%vreg89<def> = COPY %vreg17; GPR32:%vreg89,%vreg17
1712B		BCC <BB#7>, 8, %STATUS<imp-use>
1728B		BNONE32 <BB#8>, %STATUS<imp-use>
	    Successors according to CFG: BB#7(0x7c000000 / 0x80000000 = 96.88%) BB#8(0x04000000 / 0x80000000 = 3.12%)

1744B	BB#8: derived from LLVM BB %for.end60
	    Predecessors according to CFG: BB#7
1760B		%vreg86<def> = ADDrr_r32 %vreg86, %vreg1, %STATUS<imp-def,dead>; GPR32:%vreg86,%vreg1
1776B		%vreg87<def> = ADDri_r32 %vreg87, 1, %STATUS<imp-def,dead>; GPR32:%vreg87
1792B		%vreg59<def,dead> = CMPrr_r32 %vreg87, %vreg33, %STATUS<imp-def>; GPR32:%vreg59,%vreg87,%vreg33
1840B		BCC <BB#5>, 0, %STATUS<imp-use>
1856B		BNONE32 <BB#6>, %STATUS<imp-use>
	    Successors according to CFG: BB#5(0x04000000 / 0x80000000 = 3.12%) BB#6(0x7c000000 / 0x80000000 = 96.88%)

1872B	BB#9: derived from LLVM BB %for.body66
	    Predecessors according to CFG: BB#5 BB#9
1920B		%vreg62<def> = ADDrr_r32 %vreg36, %vreg92, %STATUS<imp-def,dead>; GPR32:%vreg62,%vreg36,%vreg92
1936B		%vreg63<def> = LDRf32 %vreg62, 0; mem:LD4[%sunkaddr30](tbaa=!2) FPR32:%vreg63 GPR32:%vreg62
1952B		%vreg24<def> = ADDri_r32 %vreg91, 4, %STATUS<imp-def,dead>; GPR32:%vreg24,%vreg91
1968B		%vreg92<def> = ADDri_r32 %vreg92, 4, %STATUS<imp-def,dead>; GPR32:%vreg92
1984B		%vreg64<def> = LDRf32 %vreg91, 0; mem:Volatile LD4[%lsr.iv24](tbaa=!2) FPR32:%vreg64 GPR32:%vreg91
2000B		%vreg76<def> = LDRi32_r32 <fi#2>, 0; mem:LD4[FixedStack2] GPR32:%vreg76
2016B		GID %CONFIG<imp-def,dead>
2032B		%CONFIG<def,dead> = MOVTS32_core %vreg76; GPR32:%vreg76
2048B		GIE %CONFIG<imp-def,dead>
2064B		%vreg65<def> = FADDrr_r32 %vreg63, %vreg64, %STATUS<imp-def,dead>; FPR32:%vreg65,%vreg63,%vreg64
2080B		%vreg66<def,dead> = CMPri_r32 %vreg92, 32, %STATUS<imp-def>; GPR32:%vreg66,%vreg92
2096B		STRf32 %vreg65, %vreg91, 0; mem:Volatile ST4[%lsr.iv24](tbaa=!2) FPR32:%vreg65 GPR32:%vreg91
2112B		%vreg91<def> = COPY %vreg24; GPR32:%vreg91,%vreg24
2144B		BCC <BB#9>, 1, %STATUS<imp-use>
2160B		BNONE32 <BB#10>, %STATUS<imp-use>
	    Successors according to CFG: BB#10(0x04000000 / 0x80000000 = 3.12%) BB#9(0x7c000000 / 0x80000000 = 96.88%)

2176B	BB#10: derived from LLVM BB %for.end75
	    Predecessors according to CFG: BB#9
2192B		%vreg83<def> = ADDri_r32 %vreg83, 32, %STATUS<imp-def,dead>; GPR32:%vreg83
2208B		%vreg84<def> = ADDri_r32 %vreg84, 32, %STATUS<imp-def,dead>; GPR32:%vreg84
2224B		%vreg85<def> = ADDri_r32 %vreg85, 8, %STATUS<imp-def,dead>; GPR32:%vreg85
2240B		%vreg67<def,dead> = CMPrr_r32 %vreg85, %vreg33, %STATUS<imp-def>; GPR32:%vreg67,%vreg85,%vreg33
2304B		BCC <BB#4>, 8, %STATUS<imp-use>
2320B		BNONE32 <BB#11>, %STATUS<imp-use>
	    Successors according to CFG: BB#4(0x7c000000 / 0x80000000 = 96.88%) BB#11(0x04000000 / 0x80000000 = 3.12%)

2336B	BB#11: derived from LLVM BB %for.end78
	    Predecessors according to CFG: BB#10
2352B		%vreg81<def> = ADDrr_r32 %vreg81, %vreg1, %STATUS<imp-def,dead>; GPR32:%vreg81,%vreg1
2368B		%vreg82<def> = ADDri_r32 %vreg82, 1, %STATUS<imp-def,dead>; GPR32:%vreg82
2384B		%vreg68<def,dead> = CMPrr_r32 %vreg82, %vreg33, %STATUS<imp-def>; GPR32:%vreg68,%vreg82,%vreg33
2432B		BCC <BB#3>, 1, %STATUS<imp-use>
2448B		BNONE32 <BB#12>, %STATUS<imp-use>
	    Successors according to CFG: BB#12(0x04000000 / 0x80000000 = 3.12%) BB#3(0x7c000000 / 0x80000000 = 96.88%)

2464B	BB#12: derived from LLVM BB %for.end81
	    Predecessors according to CFG: BB#1 BB#11
2480B		%vreg77<def> = LDRi32_r32 <fi#1>, 0; mem:LD4[FixedStack1] GPR32:%vreg77
2496B		GID
2512B		%CONFIG<def> = MOVTS32_core %vreg77; GPR32:%vreg77
2528B		GIE %CONFIG<imp-use,kill>
2544B		RTS

# End machine code for function matmac.

# *** IR Dump Before Greedy Register Allocator ***:
# Machine code for function matmac: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=32, align=8, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=4, align=8, at location [SP]
Function Live Ins: %R0 in %vreg30, %R1 in %vreg31, %R2 in %vreg32, %R3 in %vreg33

0B	BB#0: 
	    Live Ins: %R0 %R1 %R2 %R3
16B		GID %CONFIG<imp-def>
32B		%vreg78:isub_hi<def,read-undef> = MOVFS32_core %CONFIG; FPR64_with_isub_hi_in_FPR32:%vreg78
48B		STRi32_r32 %vreg78:isub_hi, <fi#1>, 0; mem:ST4[FixedStack1] FPR64_with_isub_hi_in_FPR32:%vreg78
64B		%vreg73<def> = MOVi32ri 65535; GPR32:%vreg73
96B		%vreg73<def,tied1> = MOVTi32ri %vreg73<tied0>, 65521; GPR32:%vreg73
112B		%vreg78:isub_lo<def> = ANDrr_r32 %vreg78:isub_hi, %vreg73, %STATUS<imp-def>; FPR64_with_isub_hi_in_FPR32:%vreg78 GPR32:%vreg73
144B		%vreg78:isub_hi<def,tied1> = MOVTi32ri %vreg78:isub_hi<tied0>, 72; FPR64_with_isub_hi_in_FPR32:%vreg78
192B		STRi64 %vreg78, <fi#3>, 0; mem:ST4[FixedStack3] ST4[FixedStack2] FPR64_with_isub_hi_in_FPR32:%vreg78
208B		GIE %CONFIG<imp-use,kill>
	    Successors according to CFG: BB#1(?%)

224B	BB#1: derived from LLVM BB %entry
	    Live Ins: %R0 %R1 %R2 %R3
	    Predecessors according to CFG: BB#0
240B		%vreg33<def> = COPY %R3; GPR32:%vreg33
256B		%vreg81<def> = COPY %R2; GPR32:%vreg81
272B		%vreg31<def> = COPY %R1; GPR32:%vreg31
288B		%vreg30<def> = COPY %R0; GPR32:%vreg30
304B		%vreg34<def,dead> = CMPri_r32 %vreg33, 1, %STATUS<imp-def>; GPR32:%vreg34,%vreg33
320B		BCC <BB#12>, 8, %STATUS<imp-use>
336B		BNONE32 <BB#2>, %STATUS<imp-use>
	    Successors according to CFG: BB#2(0x50000000 / 0x80000000 = 62.50%) BB#12(0x30000000 / 0x80000000 = 37.50%)

352B	BB#2: derived from LLVM BB %for.body3.lr.ph.preheader
	    Predecessors according to CFG: BB#1
368B		%vreg1<def> = LSL32ri %vreg33, 2, %STATUS<imp-def,dead>; GPR32:%vreg1,%vreg33
384B		%vreg0<def> = ADDri_r32 %vreg31, 8, %STATUS<imp-def,dead>; GPR32:%vreg0,%vreg31
400B		%vreg36<def> = MOViPTR <fi#0>, 0; GPR32:%vreg36
416B		%vreg11<def> = ADDri_r32 %vreg36, 8, %STATUS<imp-def,dead>; GPR32:%vreg11,%vreg36
432B		%vreg42:isub_hi<def,read-undef> = MOVi32ri 0; FPR64_with_isub_hi_in_FPR32:%vreg42
464B		%vreg82<def> = COPY %vreg42:isub_hi; GPR32:%vreg82 FPR64_with_isub_hi_in_FPR32:%vreg42
	    Successors according to CFG: BB#3(?%)

480B	BB#3: derived from LLVM BB %for.body3.lr.ph
	    Predecessors according to CFG: BB#2 BB#11
528B		%vreg74<def> = LDRi32_r32 <fi#3>, 0; mem:LD4[FixedStack3] GPR32:%vreg74
544B		GID %CONFIG<imp-def,dead>
560B		%CONFIG<def,dead> = MOVTS32_core %vreg74; GPR32:%vreg74
576B		GIE %CONFIG<imp-def,dead>
592B		%vreg38<def> = IMULrr_r32 %vreg82, %vreg33, %STATUS<imp-def,dead>; GPR32:%vreg38,%vreg82,%vreg33
608B		%vreg39<def> = LSL32ri %vreg38, 2, %STATUS<imp-def,dead>; GPR32:%vreg39,%vreg38
624B		%vreg5<def> = ADDrr_r32 %vreg30, %vreg39, %STATUS<imp-def,dead>; GPR32:%vreg5,%vreg30,%vreg39
640B		%vreg83<def> = COPY %vreg81; GPR32:%vreg83,%vreg81
656B		%vreg84<def> = COPY %vreg0; GPR32:%vreg84,%vreg0
672B		%vreg85<def> = COPY %vreg42:isub_hi; GPR32:%vreg85 FPR64_with_isub_hi_in_FPR32:%vreg42
	    Successors according to CFG: BB#4(?%)

688B	BB#4: derived from LLVM BB %for.body9.preheader
	    Predecessors according to CFG: BB#3 BB#10
768B		%vreg42:isub_lo<def> = COPY %vreg42:isub_hi; FPR64_with_isub_hi_in_FPR32:%vreg42
784B		STRi64 %vreg42, <fi#0>, 24; mem:ST8[%1+24] FPR64_with_isub_hi_in_FPR32:%vreg42
800B		STRi64 %vreg42, <fi#0>, 16; mem:ST8[%1+16] FPR64_with_isub_hi_in_FPR32:%vreg42
816B		STRi64 %vreg42, <fi#0>, 8; mem:ST8[%1+8] FPR64_with_isub_hi_in_FPR32:%vreg42
832B		STRi64 %vreg42, <fi#0>, 0; mem:ST8[%1] FPR64_with_isub_hi_in_FPR32:%vreg42
848B		%vreg86<def> = COPY %vreg84; GPR32:%vreg86,%vreg84
864B		%vreg87<def> = COPY %vreg42:isub_hi; GPR32:%vreg87 FPR64_with_isub_hi_in_FPR32:%vreg42
880B		BNONE32 <BB#6>, %STATUS<imp-use>
	    Successors according to CFG: BB#6(?%)

896B	BB#5: derived from LLVM BB %for.cond64.preheader
	    Predecessors according to CFG: BB#8
912B		%vreg91<def> = COPY %vreg83; GPR32:%vreg91,%vreg83
928B		%vreg92<def> = COPY %vreg42:isub_hi; GPR32:%vreg92 FPR64_with_isub_hi_in_FPR32:%vreg42
944B		BNONE32 <BB#9>, %STATUS<imp-use>
	    Successors according to CFG: BB#9(?%)

960B	BB#6: derived from LLVM BB %for.body9
	    Predecessors according to CFG: BB#4 BB#8
1008B		%vreg44<def> = LSL32ri %vreg87, 2, %STATUS<imp-def,dead>; GPR32:%vreg44,%vreg87
1024B		%vreg45<def> = ADDrr_r32 %vreg5, %vreg44, %STATUS<imp-def,dead>; GPR32:%vreg45,%vreg5,%vreg44
1056B		%vreg12<def> = LDRf32 %vreg45, 0; mem:Volatile LD4[%add.ptr10](tbaa=!2) FPR32:%vreg12 GPR32:%vreg45
1072B		%vreg88<def> = COPY %vreg11; GPR32:%vreg88,%vreg11
1088B		%vreg89<def> = COPY %vreg86; GPR32:%vreg89,%vreg86
1104B		%vreg90<def> = COPY %vreg42:isub_hi; GPR32:%vreg90 FPR64_with_isub_hi_in_FPR32:%vreg42
	    Successors according to CFG: BB#7(?%)

1120B	BB#7: derived from LLVM BB %for.body13
	    Predecessors according to CFG: BB#6 BB#7
1184B		%vreg46<def> = LDRf32 %vreg89, -8; mem:Volatile LD4[%scevgep8](tbaa=!2) FPR32:%vreg46 GPR32:%vreg89
1200B		%vreg18<def> = ADDri_r32 %vreg88, 16, %STATUS<imp-def,dead>; GPR32:%vreg18,%vreg88
1216B		%vreg17<def> = ADDri_r32 %vreg89, 16, %STATUS<imp-def,dead>; GPR32:%vreg17,%vreg89
1232B		%vreg47<def> = LDRf32 %vreg89, -4; mem:Volatile LD4[%scevgep9](tbaa=!2) FPR32:%vreg47 GPR32:%vreg89
1248B		%vreg90<def> = ADDri_r32 %vreg90, 4, %STATUS<imp-def,dead>; GPR32:%vreg90
1264B		%vreg48<def> = LDRf32 %vreg89, 0; mem:Volatile LD4[%lsr.iv5](tbaa=!2) FPR32:%vreg48 GPR32:%vreg89
1280B		%vreg49<def> = LDRf32 %vreg89, 4; mem:Volatile LD4[%scevgep7](tbaa=!2) FPR32:%vreg49 GPR32:%vreg89
1296B		%vreg79<def> = LDRf64 %vreg88, -8; mem:LD4[%scevgep17](tbaa=!2) LD4[%scevgep15](tbaa=!2) FPR64_with_isub_hi_in_FPR32:%vreg79 GPR32:%vreg88
1344B		%vreg75<def> = LDRi32_r32 <fi#2>, 0; mem:LD4[FixedStack2] GPR32:%vreg75
1360B		GID %CONFIG<imp-def,dead>
1376B		%CONFIG<def,dead> = MOVTS32_core %vreg75; GPR32:%vreg75
1392B		GIE %CONFIG<imp-def,dead>
1424B		%vreg79:isub_hi<def,tied1> = FMADDrr_r32 %vreg79:isub_hi<tied0>, %vreg12, %vreg46, %STATUS<imp-def,dead>; FPR64_with_isub_hi_in_FPR32:%vreg79 FPR32:%vreg12,%vreg46
1456B		%vreg79:isub_lo<def,tied1> = FMADDrr_r32 %vreg79:isub_lo<tied0>, %vreg12, %vreg47, %STATUS<imp-def,dead>; FPR64_with_isub_hi_in_FPR32:%vreg79 FPR32:%vreg12,%vreg47
1472B		%vreg80:isub_lo<def,read-undef> = COPY %vreg79:isub_hi; FPR64:%vreg80 FPR64_with_isub_hi_in_FPR32:%vreg79
1488B		%vreg80:isub_hi<def> = COPY %vreg79:isub_lo; FPR64:%vreg80 FPR64_with_isub_hi_in_FPR32:%vreg79
1504B		STRf64 %vreg80, %vreg88, -8; mem:ST4[%scevgep17](tbaa=!2) ST4[%scevgep15](tbaa=!2) FPR64:%vreg80 GPR32:%vreg88
1520B		%vreg55<def> = LDRf32 %vreg88, 0; mem:LD4[%lsr.iv1214](tbaa=!2) FPR32:%vreg55 GPR32:%vreg88
1552B		%vreg55<def,tied1> = FMADDrr_r32 %vreg55<tied0>, %vreg12, %vreg48, %STATUS<imp-def,dead>; FPR32:%vreg55,%vreg12,%vreg48
1568B		STRf32 %vreg55, %vreg88, 0; mem:ST4[%lsr.iv1214](tbaa=!2) FPR32:%vreg55 GPR32:%vreg88
1584B		%vreg57<def> = LDRf32 %vreg88, 4; mem:LD4[%scevgep16](tbaa=!2) FPR32:%vreg57 GPR32:%vreg88
1616B		%vreg57<def,tied1> = FMADDrr_r32 %vreg57<tied0>, %vreg12, %vreg49, %STATUS<imp-def,dead>; FPR32:%vreg57,%vreg12,%vreg49
1632B		%vreg58<def,dead> = CMPri_r32 %vreg90, 8, %STATUS<imp-def>; GPR32:%vreg58,%vreg90
1648B		STRf32 %vreg57, %vreg88, 4; mem:ST4[%scevgep16](tbaa=!2) FPR32:%vreg57 GPR32:%vreg88
1664B		%vreg88<def> = COPY %vreg18; GPR32:%vreg88,%vreg18
1680B		%vreg89<def> = COPY %vreg17; GPR32:%vreg89,%vreg17
1712B		BCC <BB#7>, 8, %STATUS<imp-use>
1728B		BNONE32 <BB#8>, %STATUS<imp-use>
	    Successors according to CFG: BB#7(0x7c000000 / 0x80000000 = 96.88%) BB#8(0x04000000 / 0x80000000 = 3.12%)

1744B	BB#8: derived from LLVM BB %for.end60
	    Predecessors according to CFG: BB#7
1760B		%vreg86<def> = ADDrr_r32 %vreg86, %vreg1, %STATUS<imp-def,dead>; GPR32:%vreg86,%vreg1
1776B		%vreg87<def> = ADDri_r32 %vreg87, 1, %STATUS<imp-def,dead>; GPR32:%vreg87
1792B		%vreg59<def,dead> = CMPrr_r32 %vreg87, %vreg33, %STATUS<imp-def>; GPR32:%vreg59,%vreg87,%vreg33
1840B		BCC <BB#5>, 0, %STATUS<imp-use>
1856B		BNONE32 <BB#6>, %STATUS<imp-use>
	    Successors according to CFG: BB#5(0x04000000 / 0x80000000 = 3.12%) BB#6(0x7c000000 / 0x80000000 = 96.88%)

1872B	BB#9: derived from LLVM BB %for.body66
	    Predecessors according to CFG: BB#5 BB#9
1920B		%vreg62<def> = ADDrr_r32 %vreg36, %vreg92, %STATUS<imp-def,dead>; GPR32:%vreg62,%vreg36,%vreg92
1936B		%vreg63<def> = LDRf32 %vreg62, 0; mem:LD4[%sunkaddr30](tbaa=!2) FPR32:%vreg63 GPR32:%vreg62
1952B		%vreg24<def> = ADDri_r32 %vreg91, 4, %STATUS<imp-def,dead>; GPR32:%vreg24,%vreg91
1968B		%vreg92<def> = ADDri_r32 %vreg92, 4, %STATUS<imp-def,dead>; GPR32:%vreg92
1984B		%vreg64<def> = LDRf32 %vreg91, 0; mem:Volatile LD4[%lsr.iv24](tbaa=!2) FPR32:%vreg64 GPR32:%vreg91
2000B		%vreg76<def> = LDRi32_r32 <fi#2>, 0; mem:LD4[FixedStack2] GPR32:%vreg76
2016B		GID %CONFIG<imp-def,dead>
2032B		%CONFIG<def,dead> = MOVTS32_core %vreg76; GPR32:%vreg76
2048B		GIE %CONFIG<imp-def,dead>
2064B		%vreg65<def> = FADDrr_r32 %vreg63, %vreg64, %STATUS<imp-def,dead>; FPR32:%vreg65,%vreg63,%vreg64
2080B		%vreg66<def,dead> = CMPri_r32 %vreg92, 32, %STATUS<imp-def>; GPR32:%vreg66,%vreg92
2096B		STRf32 %vreg65, %vreg91, 0; mem:Volatile ST4[%lsr.iv24](tbaa=!2) FPR32:%vreg65 GPR32:%vreg91
2112B		%vreg91<def> = COPY %vreg24; GPR32:%vreg91,%vreg24
2144B		BCC <BB#9>, 1, %STATUS<imp-use>
2160B		BNONE32 <BB#10>, %STATUS<imp-use>
	    Successors according to CFG: BB#10(0x04000000 / 0x80000000 = 3.12%) BB#9(0x7c000000 / 0x80000000 = 96.88%)

2176B	BB#10: derived from LLVM BB %for.end75
	    Predecessors according to CFG: BB#9
2192B		%vreg83<def> = ADDri_r32 %vreg83, 32, %STATUS<imp-def,dead>; GPR32:%vreg83
2208B		%vreg84<def> = ADDri_r32 %vreg84, 32, %STATUS<imp-def,dead>; GPR32:%vreg84
2224B		%vreg85<def> = ADDri_r32 %vreg85, 8, %STATUS<imp-def,dead>; GPR32:%vreg85
2240B		%vreg67<def,dead> = CMPrr_r32 %vreg85, %vreg33, %STATUS<imp-def>; GPR32:%vreg67,%vreg85,%vreg33
2304B		BCC <BB#4>, 8, %STATUS<imp-use>
2320B		BNONE32 <BB#11>, %STATUS<imp-use>
	    Successors according to CFG: BB#4(0x7c000000 / 0x80000000 = 96.88%) BB#11(0x04000000 / 0x80000000 = 3.12%)

2336B	BB#11: derived from LLVM BB %for.end78
	    Predecessors according to CFG: BB#10
2352B		%vreg81<def> = ADDrr_r32 %vreg81, %vreg1, %STATUS<imp-def,dead>; GPR32:%vreg81,%vreg1
2368B		%vreg82<def> = ADDri_r32 %vreg82, 1, %STATUS<imp-def,dead>; GPR32:%vreg82
2384B		%vreg68<def,dead> = CMPrr_r32 %vreg82, %vreg33, %STATUS<imp-def>; GPR32:%vreg68,%vreg82,%vreg33
2432B		BCC <BB#3>, 1, %STATUS<imp-use>
2448B		BNONE32 <BB#12>, %STATUS<imp-use>
	    Successors according to CFG: BB#12(0x04000000 / 0x80000000 = 3.12%) BB#3(0x7c000000 / 0x80000000 = 96.88%)

2464B	BB#12: derived from LLVM BB %for.end81
	    Predecessors according to CFG: BB#1 BB#11
2480B		%vreg77<def> = LDRi32_r32 <fi#1>, 0; mem:LD4[FixedStack1] GPR32:%vreg77
2496B		GID
2512B		%CONFIG<def> = MOVTS32_core %vreg77; GPR32:%vreg77
2528B		GIE %CONFIG<imp-use,kill>
2544B		RTS

# End machine code for function matmac.

********** GREEDY REGISTER ALLOCATION **********
********** Function: matmac
********** Compute Spill Weights **********
********** Function: matmac

isLoadToStackSlot for %vreg0<def> = ADDri_r32 %vreg31, 8, %STATUS<imp-def,dead>; GPR32:%vreg0,%vreg31

isLoadToStackSlot for %vreg5<def> = ADDrr_r32 %vreg30, %vreg39, %STATUS<imp-def,dead>; GPR32:%vreg5,%vreg30,%vreg39

isLoadToStackSlot for %vreg11<def> = ADDri_r32 %vreg36, 8, %STATUS<imp-def,dead>; GPR32:%vreg11,%vreg36

isLoadToStackSlot for %vreg17<def> = ADDri_r32 %vreg89, 16, %STATUS<imp-def,dead>; GPR32:%vreg17,%vreg89

isLoadToStackSlot for %vreg18<def> = ADDri_r32 %vreg88, 16, %STATUS<imp-def,dead>; GPR32:%vreg18,%vreg88

isLoadToStackSlot for %vreg24<def> = ADDri_r32 %vreg91, 4, %STATUS<imp-def,dead>; GPR32:%vreg24,%vreg91

isLoadToStackSlot for %vreg36<def> = MOViPTR <fi#0>, 0; GPR32:%vreg36

isLoadToStackSlot for %vreg65<def> = FADDrr_r32 %vreg63, %vreg64, %STATUS<imp-def,dead>; FPR32:%vreg65,%vreg63,%vreg64
********** INTERVALS **********
R0 [0B,288r:0)  0@0B-phi
R1 [0B,272r:0)  0@0B-phi
R2 [0B,256r:0)  0@0B-phi
R3 [0B,240r:0)  0@0B-phi
%vreg0 [384r,2464B:0)  0@384r
%vreg1 [368r,2464B:0)  0@368r
%vreg5 [624r,2336B:0)  0@624r
%vreg11 [416r,2464B:0)  0@416r
%vreg12 [1056r,1744B:0)  0@1056r
%vreg17 [1216r,1680r:0)  0@1216r
%vreg18 [1200r,1664r:0)  0@1200r
%vreg24 [1952r,2112r:0)  0@1952r
%vreg30 [288r,2464B:0)  0@288r
%vreg31 [272r,384r:0)  0@272r
%vreg33 [240r,2464B:0)  0@240r
%vreg34 [304r,304d:0)  0@304r
%vreg36 [400r,2464B:0)  0@400r
%vreg38 [592r,608r:0)  0@592r
%vreg39 [608r,624r:0)  0@608r
%vreg42 [432r,480B:0)[480B,688B:3)[688B,768r:2)[768r,2464B:1)  0@432r 1@768r 2@688B-phi 3@480B-phi
%vreg44 [1008r,1024r:0)  0@1008r
%vreg45 [1024r,1056r:0)  0@1024r
%vreg46 [1184r,1424r:0)  0@1184r
%vreg47 [1232r,1456r:0)  0@1232r
%vreg48 [1264r,1552r:0)  0@1264r
%vreg49 [1280r,1616r:0)  0@1280r
%vreg55 [1520r,1552r:0)[1552r,1568r:1)  0@1520r 1@1552r
%vreg57 [1584r,1616r:0)[1616r,1648r:1)  0@1584r 1@1616r
%vreg58 [1632r,1632d:0)  0@1632r
%vreg59 [1792r,1792d:0)  0@1792r
%vreg62 [1920r,1936r:0)  0@1920r
%vreg63 [1936r,2064r:0)  0@1936r
%vreg64 [1984r,2064r:0)  0@1984r
%vreg65 [2064r,2096r:0)  0@2064r
%vreg66 [2080r,2080d:0)  0@2080r
%vreg67 [2240r,2240d:0)  0@2240r
%vreg68 [2384r,2384d:0)  0@2384r
%vreg73 [64r,96r:0)[96r,112r:1)  0@64r 1@96r
%vreg74 [528r,560r:0)  0@528r
%vreg75 [1344r,1376r:0)  0@1344r
%vreg76 [2000r,2032r:0)  0@2000r
%vreg77 [2480r,2512r:0)  0@2480r
%vreg78 [32r,112r:0)[112r,144r:1)[144r,192r:2)  0@32r 1@112r 2@144r
%vreg79 [1296r,1424r:0)[1424r,1456r:1)[1456r,1488r:2)  0@1296r 1@1424r 2@1456r
%vreg80 [1472r,1488r:1)[1488r,1504r:0)  0@1488r 1@1472r
%vreg81 [256r,480B:0)[480B,2352r:1)[2352r,2464B:2)  0@256r 1@480B-phi 2@2352r
%vreg82 [464r,480B:0)[480B,2368r:1)[2368r,2464B:2)  0@464r 1@480B-phi 2@2368r
%vreg83 [640r,688B:0)[688B,2192r:1)[2192r,2336B:2)  0@640r 1@688B-phi 2@2192r
%vreg84 [656r,688B:0)[688B,2208r:1)[2208r,2336B:2)  0@656r 1@688B-phi 2@2208r
%vreg85 [672r,688B:0)[688B,2224r:1)[2224r,2336B:2)  0@672r 1@688B-phi 2@2224r
%vreg86 [848r,896B:0)[960B,1760r:1)[1760r,1872B:2)  0@848r 1@960B-phi 2@1760r
%vreg87 [864r,896B:0)[960B,1776r:1)[1776r,1872B:2)  0@864r 1@960B-phi 2@1776r
%vreg88 [1072r,1120B:0)[1120B,1648r:2)[1664r,1744B:1)  0@1072r 1@1664r 2@1120B-phi
%vreg89 [1088r,1120B:0)[1120B,1280r:2)[1680r,1744B:1)  0@1088r 1@1680r 2@1120B-phi
%vreg90 [1104r,1120B:0)[1120B,1248r:1)[1248r,1744B:2)  0@1104r 1@1120B-phi 2@1248r
%vreg91 [912r,960B:0)[1872B,2096r:2)[2112r,2176B:1)  0@912r 1@2112r 2@1872B-phi
%vreg92 [928r,960B:0)[1872B,1968r:1)[1968r,2176B:2)  0@928r 1@1872B-phi 2@1968r
RegMasks:
********** MACHINEINSTRS **********
# Machine code for function matmac: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=32, align=8, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=4, align=8, at location [SP]
Function Live Ins: %R0 in %vreg30, %R1 in %vreg31, %R2 in %vreg32, %R3 in %vreg33

0B	BB#0: 
	    Live Ins: %R0 %R1 %R2 %R3
16B		GID %CONFIG<imp-def>
32B		%vreg78:isub_hi<def,read-undef> = MOVFS32_core %CONFIG; FPR64_with_isub_hi_in_FPR32:%vreg78
48B		STRi32_r32 %vreg78:isub_hi, <fi#1>, 0; mem:ST4[FixedStack1] FPR64_with_isub_hi_in_FPR32:%vreg78
64B		%vreg73<def> = MOVi32ri 65535; GPR32:%vreg73
96B		%vreg73<def,tied1> = MOVTi32ri %vreg73<tied0>, 65521; GPR32:%vreg73
112B		%vreg78:isub_lo<def> = ANDrr_r32 %vreg78:isub_hi, %vreg73, %STATUS<imp-def>; FPR64_with_isub_hi_in_FPR32:%vreg78 GPR32:%vreg73
144B		%vreg78:isub_hi<def,tied1> = MOVTi32ri %vreg78:isub_hi<tied0>, 72; FPR64_with_isub_hi_in_FPR32:%vreg78
192B		STRi64 %vreg78, <fi#3>, 0; mem:ST4[FixedStack3] ST4[FixedStack2] FPR64_with_isub_hi_in_FPR32:%vreg78
208B		GIE %CONFIG<imp-use,kill>
	    Successors according to CFG: BB#1(?%)

224B	BB#1: derived from LLVM BB %entry
	    Live Ins: %R0 %R1 %R2 %R3
	    Predecessors according to CFG: BB#0
240B		%vreg33<def> = COPY %R3; GPR32:%vreg33
256B		%vreg81<def> = COPY %R2; GPR32:%vreg81
272B		%vreg31<def> = COPY %R1; GPR32:%vreg31
288B		%vreg30<def> = COPY %R0; GPR32:%vreg30
304B		%vreg34<def,dead> = CMPri_r32 %vreg33, 1, %STATUS<imp-def>; GPR32:%vreg34,%vreg33
320B		BCC <BB#12>, 8, %STATUS<imp-use>
336B		BNONE32 <BB#2>, %STATUS<imp-use>
	    Successors according to CFG: BB#2(0x50000000 / 0x80000000 = 62.50%) BB#12(0x30000000 / 0x80000000 = 37.50%)

352B	BB#2: derived from LLVM BB %for.body3.lr.ph.preheader
	    Predecessors according to CFG: BB#1
368B		%vreg1<def> = LSL32ri %vreg33, 2, %STATUS<imp-def,dead>; GPR32:%vreg1,%vreg33
384B		%vreg0<def> = ADDri_r32 %vreg31, 8, %STATUS<imp-def,dead>; GPR32:%vreg0,%vreg31
400B		%vreg36<def> = MOViPTR <fi#0>, 0; GPR32:%vreg36
416B		%vreg11<def> = ADDri_r32 %vreg36, 8, %STATUS<imp-def,dead>; GPR32:%vreg11,%vreg36
432B		%vreg42:isub_hi<def,read-undef> = MOVi32ri 0; FPR64_with_isub_hi_in_FPR32:%vreg42
464B		%vreg82<def> = COPY %vreg42:isub_hi; GPR32:%vreg82 FPR64_with_isub_hi_in_FPR32:%vreg42
	    Successors according to CFG: BB#3(?%)

480B	BB#3: derived from LLVM BB %for.body3.lr.ph
	    Predecessors according to CFG: BB#2 BB#11
528B		%vreg74<def> = LDRi32_r32 <fi#3>, 0; mem:LD4[FixedStack3] GPR32:%vreg74
544B		GID %CONFIG<imp-def,dead>
560B		%CONFIG<def,dead> = MOVTS32_core %vreg74; GPR32:%vreg74
576B		GIE %CONFIG<imp-def,dead>
592B		%vreg38<def> = IMULrr_r32 %vreg82, %vreg33, %STATUS<imp-def,dead>; GPR32:%vreg38,%vreg82,%vreg33
608B		%vreg39<def> = LSL32ri %vreg38, 2, %STATUS<imp-def,dead>; GPR32:%vreg39,%vreg38
624B		%vreg5<def> = ADDrr_r32 %vreg30, %vreg39, %STATUS<imp-def,dead>; GPR32:%vreg5,%vreg30,%vreg39
640B		%vreg83<def> = COPY %vreg81; GPR32:%vreg83,%vreg81
656B		%vreg84<def> = COPY %vreg0; GPR32:%vreg84,%vreg0
672B		%vreg85<def> = COPY %vreg42:isub_hi; GPR32:%vreg85 FPR64_with_isub_hi_in_FPR32:%vreg42
	    Successors according to CFG: BB#4(?%)

688B	BB#4: derived from LLVM BB %for.body9.preheader
	    Predecessors according to CFG: BB#3 BB#10
768B		%vreg42:isub_lo<def> = COPY %vreg42:isub_hi; FPR64_with_isub_hi_in_FPR32:%vreg42
784B		STRi64 %vreg42, <fi#0>, 24; mem:ST8[%1+24] FPR64_with_isub_hi_in_FPR32:%vreg42
800B		STRi64 %vreg42, <fi#0>, 16; mem:ST8[%1+16] FPR64_with_isub_hi_in_FPR32:%vreg42
816B		STRi64 %vreg42, <fi#0>, 8; mem:ST8[%1+8] FPR64_with_isub_hi_in_FPR32:%vreg42
832B		STRi64 %vreg42, <fi#0>, 0; mem:ST8[%1] FPR64_with_isub_hi_in_FPR32:%vreg42
848B		%vreg86<def> = COPY %vreg84; GPR32:%vreg86,%vreg84
864B		%vreg87<def> = COPY %vreg42:isub_hi; GPR32:%vreg87 FPR64_with_isub_hi_in_FPR32:%vreg42
880B		BNONE32 <BB#6>, %STATUS<imp-use>
	    Successors according to CFG: BB#6(?%)

896B	BB#5: derived from LLVM BB %for.cond64.preheader
	    Predecessors according to CFG: BB#8
912B		%vreg91<def> = COPY %vreg83; GPR32:%vreg91,%vreg83
928B		%vreg92<def> = COPY %vreg42:isub_hi; GPR32:%vreg92 FPR64_with_isub_hi_in_FPR32:%vreg42
944B		BNONE32 <BB#9>, %STATUS<imp-use>
	    Successors according to CFG: BB#9(?%)

960B	BB#6: derived from LLVM BB %for.body9
	    Predecessors according to CFG: BB#4 BB#8
1008B		%vreg44<def> = LSL32ri %vreg87, 2, %STATUS<imp-def,dead>; GPR32:%vreg44,%vreg87
1024B		%vreg45<def> = ADDrr_r32 %vreg5, %vreg44, %STATUS<imp-def,dead>; GPR32:%vreg45,%vreg5,%vreg44
1056B		%vreg12<def> = LDRf32 %vreg45, 0; mem:Volatile LD4[%add.ptr10](tbaa=!2) FPR32:%vreg12 GPR32:%vreg45
1072B		%vreg88<def> = COPY %vreg11; GPR32:%vreg88,%vreg11
1088B		%vreg89<def> = COPY %vreg86; GPR32:%vreg89,%vreg86
1104B		%vreg90<def> = COPY %vreg42:isub_hi; GPR32:%vreg90 FPR64_with_isub_hi_in_FPR32:%vreg42
	    Successors according to CFG: BB#7(?%)

1120B	BB#7: derived from LLVM BB %for.body13
	    Predecessors according to CFG: BB#6 BB#7
1184B		%vreg46<def> = LDRf32 %vreg89, -8; mem:Volatile LD4[%scevgep8](tbaa=!2) FPR32:%vreg46 GPR32:%vreg89
1200B		%vreg18<def> = ADDri_r32 %vreg88, 16, %STATUS<imp-def,dead>; GPR32:%vreg18,%vreg88
1216B		%vreg17<def> = ADDri_r32 %vreg89, 16, %STATUS<imp-def,dead>; GPR32:%vreg17,%vreg89
1232B		%vreg47<def> = LDRf32 %vreg89, -4; mem:Volatile LD4[%scevgep9](tbaa=!2) FPR32:%vreg47 GPR32:%vreg89
1248B		%vreg90<def> = ADDri_r32 %vreg90, 4, %STATUS<imp-def,dead>; GPR32:%vreg90
1264B		%vreg48<def> = LDRf32 %vreg89, 0; mem:Volatile LD4[%lsr.iv5](tbaa=!2) FPR32:%vreg48 GPR32:%vreg89
1280B		%vreg49<def> = LDRf32 %vreg89, 4; mem:Volatile LD4[%scevgep7](tbaa=!2) FPR32:%vreg49 GPR32:%vreg89
1296B		%vreg79<def> = LDRf64 %vreg88, -8; mem:LD4[%scevgep17](tbaa=!2) LD4[%scevgep15](tbaa=!2) FPR64_with_isub_hi_in_FPR32:%vreg79 GPR32:%vreg88
1344B		%vreg75<def> = LDRi32_r32 <fi#2>, 0; mem:LD4[FixedStack2] GPR32:%vreg75
1360B		GID %CONFIG<imp-def,dead>
1376B		%CONFIG<def,dead> = MOVTS32_core %vreg75; GPR32:%vreg75
1392B		GIE %CONFIG<imp-def,dead>
1424B		%vreg79:isub_hi<def,tied1> = FMADDrr_r32 %vreg79:isub_hi<tied0>, %vreg12, %vreg46, %STATUS<imp-def,dead>; FPR64_with_isub_hi_in_FPR32:%vreg79 FPR32:%vreg12,%vreg46
1456B		%vreg79:isub_lo<def,tied1> = FMADDrr_r32 %vreg79:isub_lo<tied0>, %vreg12, %vreg47, %STATUS<imp-def,dead>; FPR64_with_isub_hi_in_FPR32:%vreg79 FPR32:%vreg12,%vreg47
1472B		%vreg80:isub_lo<def,read-undef> = COPY %vreg79:isub_hi; FPR64:%vreg80 FPR64_with_isub_hi_in_FPR32:%vreg79
1488B		%vreg80:isub_hi<def> = COPY %vreg79:isub_lo; FPR64:%vreg80 FPR64_with_isub_hi_in_FPR32:%vreg79
1504B		STRf64 %vreg80, %vreg88, -8; mem:ST4[%scevgep17](tbaa=!2) ST4[%scevgep15](tbaa=!2) FPR64:%vreg80 GPR32:%vreg88
1520B		%vreg55<def> = LDRf32 %vreg88, 0; mem:LD4[%lsr.iv1214](tbaa=!2) FPR32:%vreg55 GPR32:%vreg88
1552B		%vreg55<def,tied1> = FMADDrr_r32 %vreg55<tied0>, %vreg12, %vreg48, %STATUS<imp-def,dead>; FPR32:%vreg55,%vreg12,%vreg48
1568B		STRf32 %vreg55, %vreg88, 0; mem:ST4[%lsr.iv1214](tbaa=!2) FPR32:%vreg55 GPR32:%vreg88
1584B		%vreg57<def> = LDRf32 %vreg88, 4; mem:LD4[%scevgep16](tbaa=!2) FPR32:%vreg57 GPR32:%vreg88
1616B		%vreg57<def,tied1> = FMADDrr_r32 %vreg57<tied0>, %vreg12, %vreg49, %STATUS<imp-def,dead>; FPR32:%vreg57,%vreg12,%vreg49
1632B		%vreg58<def,dead> = CMPri_r32 %vreg90, 8, %STATUS<imp-def>; GPR32:%vreg58,%vreg90
1648B		STRf32 %vreg57, %vreg88, 4; mem:ST4[%scevgep16](tbaa=!2) FPR32:%vreg57 GPR32:%vreg88
1664B		%vreg88<def> = COPY %vreg18; GPR32:%vreg88,%vreg18
1680B		%vreg89<def> = COPY %vreg17; GPR32:%vreg89,%vreg17
1712B		BCC <BB#7>, 8, %STATUS<imp-use>
1728B		BNONE32 <BB#8>, %STATUS<imp-use>
	    Successors according to CFG: BB#7(0x7c000000 / 0x80000000 = 96.88%) BB#8(0x04000000 / 0x80000000 = 3.12%)

1744B	BB#8: derived from LLVM BB %for.end60
	    Predecessors according to CFG: BB#7
1760B		%vreg86<def> = ADDrr_r32 %vreg86, %vreg1, %STATUS<imp-def,dead>; GPR32:%vreg86,%vreg1
1776B		%vreg87<def> = ADDri_r32 %vreg87, 1, %STATUS<imp-def,dead>; GPR32:%vreg87
1792B		%vreg59<def,dead> = CMPrr_r32 %vreg87, %vreg33, %STATUS<imp-def>; GPR32:%vreg59,%vreg87,%vreg33
1840B		BCC <BB#5>, 0, %STATUS<imp-use>
1856B		BNONE32 <BB#6>, %STATUS<imp-use>
	    Successors according to CFG: BB#5(0x04000000 / 0x80000000 = 3.12%) BB#6(0x7c000000 / 0x80000000 = 96.88%)

1872B	BB#9: derived from LLVM BB %for.body66
	    Predecessors according to CFG: BB#5 BB#9
1920B		%vreg62<def> = ADDrr_r32 %vreg36, %vreg92, %STATUS<imp-def,dead>; GPR32:%vreg62,%vreg36,%vreg92
1936B		%vreg63<def> = LDRf32 %vreg62, 0; mem:LD4[%sunkaddr30](tbaa=!2) FPR32:%vreg63 GPR32:%vreg62
1952B		%vreg24<def> = ADDri_r32 %vreg91, 4, %STATUS<imp-def,dead>; GPR32:%vreg24,%vreg91
1968B		%vreg92<def> = ADDri_r32 %vreg92, 4, %STATUS<imp-def,dead>; GPR32:%vreg92
1984B		%vreg64<def> = LDRf32 %vreg91, 0; mem:Volatile LD4[%lsr.iv24](tbaa=!2) FPR32:%vreg64 GPR32:%vreg91
2000B		%vreg76<def> = LDRi32_r32 <fi#2>, 0; mem:LD4[FixedStack2] GPR32:%vreg76
2016B		GID %CONFIG<imp-def,dead>
2032B		%CONFIG<def,dead> = MOVTS32_core %vreg76; GPR32:%vreg76
2048B		GIE %CONFIG<imp-def,dead>
2064B		%vreg65<def> = FADDrr_r32 %vreg63, %vreg64, %STATUS<imp-def,dead>; FPR32:%vreg65,%vreg63,%vreg64
2080B		%vreg66<def,dead> = CMPri_r32 %vreg92, 32, %STATUS<imp-def>; GPR32:%vreg66,%vreg92
2096B		STRf32 %vreg65, %vreg91, 0; mem:Volatile ST4[%lsr.iv24](tbaa=!2) FPR32:%vreg65 GPR32:%vreg91
2112B		%vreg91<def> = COPY %vreg24; GPR32:%vreg91,%vreg24
2144B		BCC <BB#9>, 1, %STATUS<imp-use>
2160B		BNONE32 <BB#10>, %STATUS<imp-use>
	    Successors according to CFG: BB#10(0x04000000 / 0x80000000 = 3.12%) BB#9(0x7c000000 / 0x80000000 = 96.88%)

2176B	BB#10: derived from LLVM BB %for.end75
	    Predecessors according to CFG: BB#9
2192B		%vreg83<def> = ADDri_r32 %vreg83, 32, %STATUS<imp-def,dead>; GPR32:%vreg83
2208B		%vreg84<def> = ADDri_r32 %vreg84, 32, %STATUS<imp-def,dead>; GPR32:%vreg84
2224B		%vreg85<def> = ADDri_r32 %vreg85, 8, %STATUS<imp-def,dead>; GPR32:%vreg85
2240B		%vreg67<def,dead> = CMPrr_r32 %vreg85, %vreg33, %STATUS<imp-def>; GPR32:%vreg67,%vreg85,%vreg33
2304B		BCC <BB#4>, 8, %STATUS<imp-use>
2320B		BNONE32 <BB#11>, %STATUS<imp-use>
	    Successors according to CFG: BB#4(0x7c000000 / 0x80000000 = 96.88%) BB#11(0x04000000 / 0x80000000 = 3.12%)

2336B	BB#11: derived from LLVM BB %for.end78
	    Predecessors according to CFG: BB#10
2352B		%vreg81<def> = ADDrr_r32 %vreg81, %vreg1, %STATUS<imp-def,dead>; GPR32:%vreg81,%vreg1
2368B		%vreg82<def> = ADDri_r32 %vreg82, 1, %STATUS<imp-def,dead>; GPR32:%vreg82
2384B		%vreg68<def,dead> = CMPrr_r32 %vreg82, %vreg33, %STATUS<imp-def>; GPR32:%vreg68,%vreg82,%vreg33
2432B		BCC <BB#3>, 1, %STATUS<imp-use>
2448B		BNONE32 <BB#12>, %STATUS<imp-use>
	    Successors according to CFG: BB#12(0x04000000 / 0x80000000 = 3.12%) BB#3(0x7c000000 / 0x80000000 = 96.88%)

2464B	BB#12: derived from LLVM BB %for.end81
	    Predecessors according to CFG: BB#1 BB#11
2480B		%vreg77<def> = LDRi32_r32 <fi#1>, 0; mem:LD4[FixedStack1] GPR32:%vreg77
2496B		GID
2512B		%CONFIG<def> = MOVTS32_core %vreg77; GPR32:%vreg77
2528B		GIE %CONFIG<imp-use,kill>
2544B		RTS

# End machine code for function matmac.


selectOrSplit GPR32:%vreg33 [240r,2464B:0)  0@240r w=8.695168e+00
hints: %R3
assigning %vreg33 to %R3: R3 [240r,2464B:0)  0@240r

selectOrSplit GPR32:%vreg81 [256r,480B:0)[480B,2352r:1)[2352r,2464B:2)  0@256r 1@480B-phi 2@2352r w=5.803818e-02
hints: %R2
assigning %vreg81 to %R2: R2 [256r,480B:0)[480B,2352r:1)[2352r,2464B:2)  0@256r 1@480B-phi 2@2352r

selectOrSplit GPR32:%vreg30 [288r,2464B:0)  0@288r w=8.730575e-03
hints: %R0
assigning %vreg30 to %R0: R0 [288r,2464B:0)  0@288r

selectOrSplit GPR32:%vreg31 [272r,384r:0)  0@272r w=3.287761e-03
hints: %R1
assigning %vreg31 to %R1: R1 [272r,384r:0)  0@272r

selectOrSplit GPR32:%vreg1 [368r,2464B:0)  0@368r w=8.767909e+00
assigning %vreg1 to %IP: IP [368r,2464B:0)  0@368r

selectOrSplit GPR32:%vreg0 [384r,2464B:0)  0@384r w=8.932943e-03
assigning %vreg0 to %R1: R1 [384r,2464B:0)  0@384r

selectOrSplit GPR32:%vreg36 [400r,2464B:0)  0@400r w=4.436756e+00
assigning %vreg36 to %R16: R16 [400r,2464B:0)  0@400r

selectOrSplit GPR32:%vreg11 [416r,2464B:0)  0@416r w=9.020595e+00
assigning %vreg11 to %R17: R17 [416r,2464B:0)  0@416r

selectOrSplit FPR64_with_isub_hi_in_FPR32:%vreg42 [432r,480B:0)[480B,688B:3)[688B,768r:2)[768r,2464B:1)  0@432r 1@768r 2@688B-phi 3@480B-phi w=1.124630e+01
assigning %vreg42 to %D9: R18 [432r,480B:0)[480B,688B:3)[688B,768r:2)[768r,2464B:1)  0@432r 1@768r 2@688B-phi 3@480B-phi R19 [432r,480B:0)[480B,688B:3)[688B,768r:2)[768r,2464B:1)  0@432r 1@768r 2@688B-phi 3@480B-phi

selectOrSplit GPR32:%vreg82 [464r,480B:0)[480B,2368r:1)[2368r,2464B:2)  0@464r 1@480B-phi 2@2368r w=7.117042e-02
assigning %vreg82 to %R20: R20 [464r,480B:0)[480B,2368r:1)[2368r,2464B:2)  0@464r 1@480B-phi 2@2368r

selectOrSplit GPR32:%vreg5 [624r,2336B:0)  0@624r w=1.036327e+01
assigning %vreg5 to %R21: R21 [624r,2336B:0)  0@624r

selectOrSplit GPR32:%vreg83 [640r,688B:0)[688B,2192r:1)[2192r,2336B:2)  0@640r 1@688B-phi 2@2192r w=2.314865e+00
assigning %vreg83 to %R22: R22 [640r,688B:0)[688B,2192r:1)[2192r,2336B:2)  0@640r 1@688B-phi 2@2192r

selectOrSplit GPR32:%vreg84 [656r,688B:0)[688B,2208r:1)[2208r,2336B:2)  0@656r 1@688B-phi 2@2208r w=2.332689e+00
assigning %vreg84 to %R23: R23 [656r,688B:0)[688B,2208r:1)[2208r,2336B:2)  0@656r 1@688B-phi 2@2208r

selectOrSplit GPR32:%vreg85 [672r,688B:0)[688B,2224r:1)[2224r,2336B:2)  0@672r 1@688B-phi 2@2224r w=2.327514e+00
assigning %vreg85 to %R24: R24 [672r,688B:0)[688B,2224r:1)[2224r,2336B:2)  0@672r 1@688B-phi 2@2224r

selectOrSplit GPR32:%vreg86 [848r,896B:0)[960B,1760r:1)[1760r,1872B:2)  0@848r 1@960B-phi 2@1760r w=1.142381e+02
assigning %vreg86 to %R25: R25 [848r,896B:0)[960B,1760r:1)[1760r,1872B:2)  0@848r 1@960B-phi 2@1760r

selectOrSplit GPR32:%vreg87 [864r,896B:0)[960B,1776r:1)[1776r,1872B:2)  0@864r 1@960B-phi 2@1776r w=1.307337e+02
assigning %vreg87 to %R26: R26 [864r,896B:0)[960B,1776r:1)[1776r,1872B:2)  0@864r 1@960B-phi 2@1776r

selectOrSplit FPR32:%vreg12 [1056r,1744B:0)  0@1056r w=2.594887e+03
AllocationOrder(FPR32) = [ %R0 %R1 %R2 %R3 %IP %R16 %R17 %R18 %R19 %R20 %R21 %R22 %R23 %R24 %R25 %R26 %R27 %R32 %R33 %R34 %R35 %R36 %R37 %R38 %R39 %R40 %R41 %R42 %R43 %R44 %R45 %R46 %R47 %R48 %R49 %R50 %R51 %R52 %R53 %R54 %R55 %R56 %R57 %R58 %R59 %R60 %R61 %R62 %R63 %R4 %R5 %R6 %R7 %R8 ]
assigning %vreg12 to %R27: R27 [1056r,1744B:0)  0@1056r

selectOrSplit GPR32:%vreg88 [1072r,1120B:0)[1120B,1648r:2)[1664r,1744B:1)  0@1072r 1@1664r 2@1120B-phi w=6.719615e+03
assigning %vreg88 to %R32: R32 [1072r,1120B:0)[1120B,1648r:2)[1664r,1744B:1)  0@1072r 1@1664r 2@1120B-phi

selectOrSplit GPR32:%vreg90 [1104r,1120B:0)[1120B,1248r:1)[1248r,1744B:2)  0@1104r 1@1120B-phi 2@1248r w=4.735260e+03
assigning %vreg90 to %R33: R33 [1104r,1120B:0)[1120B,1248r:1)[1248r,1744B:2)  0@1104r 1@1120B-phi 2@1248r

selectOrSplit GPR32:%vreg91 [912r,960B:0)[1872B,2096r:2)[2112r,2176B:1)  0@912r 1@2112r 2@1872B-phi w=1.812965e+02
assigning %vreg91 to %R25: R25 [912r,960B:0)[1872B,2096r:2)[2112r,2176B:1)  0@912r 1@2112r 2@1872B-phi

selectOrSplit GPR32:%vreg92 [928r,960B:0)[1872B,1968r:1)[1968r,2176B:2)  0@928r 1@1872B-phi 2@1968r w=2.390253e+02
assigning %vreg92 to %R26: R26 [928r,960B:0)[1872B,1968r:1)[1968r,2176B:2)  0@928r 1@1872B-phi 2@1968r

selectOrSplit GPR32:%vreg89 [1088r,1120B:0)[1120B,1280r:2)[1680r,1744B:1)  0@1088r 1@1680r 2@1120B-phi w=8.670324e+03
assigning %vreg89 to %R34: R34 [1088r,1120B:0)[1120B,1280r:2)[1680r,1744B:1)  0@1088r 1@1680r 2@1120B-phi

selectOrSplit GPR32:%vreg73 [64r,96r:0)[96r,112r:1)  0@64r 1@96r w=INF
assigning %vreg73 to %IP: IP [64r,96r:0)[96r,112r:1)  0@64r 1@96r

selectOrSplit GPR32:%vreg34 [304r,304d:0)  0@304r w=INF
assigning %vreg34 to %IP: IP [304r,304d:0)  0@304r

selectOrSplit GPR32:%vreg74 [528r,560r:0)  0@528r w=9.837963e-02
assigning %vreg74 to %R21: R21 [528r,560r:0)  0@528r

selectOrSplit GPR32:%vreg38 [592r,608r:0)  0@592r w=INF
assigning %vreg38 to %R21: R21 [592r,608r:0)  0@592r

selectOrSplit GPR32:%vreg39 [608r,624r:0)  0@608r w=INF
assigning %vreg39 to %R21: R21 [608r,624r:0)  0@608r

selectOrSplit GPR32:%vreg44 [1008r,1024r:0)  0@1008r w=INF
assigning %vreg44 to %R27: R27 [1008r,1024r:0)  0@1008r

selectOrSplit GPR32:%vreg45 [1024r,1056r:0)  0@1024r w=INF
assigning %vreg45 to %R27: R27 [1024r,1056r:0)  0@1024r

selectOrSplit GPR32:%vreg18 [1200r,1664r:0)  0@1200r w=1.634354e+03
hints: %R32
assigning %vreg18 to %R35: R35 [1200r,1664r:0)  0@1200r

selectOrSplit GPR32:%vreg17 [1216r,1680r:0)  0@1216r w=1.634354e+03
hints: %R34
assigning %vreg17 to %R36: R36 [1216r,1680r:0)  0@1216r

selectOrSplit GPR32:%vreg75 [1344r,1376r:0)  0@1344r w=3.236345e+03
assigning %vreg75 to %R34: R34 [1344r,1376r:0)  0@1344r

selectOrSplit GPR32:%vreg58 [1632r,1632d:0)  0@1632r w=INF
assigning %vreg58 to %R34: R34 [1632r,1632d:0)  0@1632r

selectOrSplit GPR32:%vreg59 [1792r,1792d:0)  0@1792r w=INF
assigning %vreg59 to %R27: R27 [1792r,1792d:0)  0@1792r

selectOrSplit GPR32:%vreg62 [1920r,1936r:0)  0@1920r w=INF
assigning %vreg62 to %R27: R27 [1920r,1936r:0)  0@1920r

selectOrSplit GPR32:%vreg24 [1952r,2112r:0)  0@1952r w=7.879894e+01
hints: %R25
assigning %vreg24 to %R27: R27 [1952r,2112r:0)  0@1952r

selectOrSplit GPR32:%vreg76 [2000r,2032r:0)  0@2000r w=1.011354e+02
assigning %vreg76 to %R32: R32 [2000r,2032r:0)  0@2000r

selectOrSplit GPR32:%vreg66 [2080r,2080d:0)  0@2080r w=INF
assigning %vreg66 to %R32: R32 [2080r,2080d:0)  0@2080r

selectOrSplit GPR32:%vreg67 [2240r,2240d:0)  0@2240r w=INF
assigning %vreg67 to %R25: R25 [2240r,2240d:0)  0@2240r

selectOrSplit GPR32:%vreg68 [2384r,2384d:0)  0@2384r w=INF
assigning %vreg68 to %R21: R21 [2384r,2384d:0)  0@2384r

selectOrSplit GPR32:%vreg77 [2480r,2512r:0)  0@2480r w=4.629630e-03
assigning %vreg77 to %R0: R0 [2480r,2512r:0)  0@2480r

selectOrSplit FPR64_with_isub_hi_in_FPR32:%vreg78 [32r,112r:0)[112r,144r:1)[144r,192r:2)  0@32r 1@112r 2@144r w=1.250000e-02
assigning %vreg78 to %D9: R18 [32r,112r:0)[112r,144r:1)[144r,192r:2)  0@32r 1@112r 2@144r R19 [32r,112r:0)[112r,144r:1)[144r,192r:2)  0@32r 1@112r 2@144r

selectOrSplit FPR32:%vreg46 [1184r,1424r:0)  0@1184r w=2.184533e+03
assigning %vreg46 to %R37: R37 [1184r,1424r:0)  0@1184r

selectOrSplit FPR32:%vreg47 [1232r,1456r:0)  0@1232r w=2.240547e+03
assigning %vreg47 to %R38: R38 [1232r,1456r:0)  0@1232r

selectOrSplit FPR32:%vreg48 [1264r,1552r:0)  0@1264r w=2.032124e+03
assigning %vreg48 to %R39: R39 [1264r,1552r:0)  0@1264r

selectOrSplit FPR32:%vreg49 [1280r,1616r:0)  0@1280r w=1.899594e+03
assigning %vreg49 to %R40: R40 [1280r,1616r:0)  0@1280r

selectOrSplit FPR64_with_isub_hi_in_FPR32:%vreg79 [1296r,1424r:0)[1424r,1456r:1)[1456r,1488r:2)  0@1296r 1@1424r 2@1456r w=8.265801e+03
assigning %vreg79 to %D21: R42 [1296r,1424r:0)[1424r,1456r:1)[1456r,1488r:2)  0@1296r 1@1424r 2@1456r R43 [1296r,1424r:0)[1424r,1456r:1)[1456r,1488r:2)  0@1296r 1@1424r 2@1456r

selectOrSplit FPR64:%vreg80 [1472r,1488r:1)[1488r,1504r:0)  0@1488r 1@1472r w=INF
AllocationOrder(FPR64) = [ %D0 %D1 %D9 %D10 %D11 %D12 %D13 %D16 %D17 %D18 %D19 %D20 %D21 %D22 %D23 %D24 %D25 %D26 %D27 %D28 %D29 %D30 %D31 %D2 %D3 ]
assigning %vreg80 to %D22: R44 [1472r,1488r:1)[1488r,1504r:0)  0@1488r 1@1472r R45 [1472r,1488r:1)[1488r,1504r:0)  0@1488r 1@1472r

selectOrSplit FPR32:%vreg55 [1520r,1552r:0)[1552r,1568r:1)  0@1520r 1@1552r w=INF
assigning %vreg55 to %R34: R34 [1520r,1552r:0)[1552r,1568r:1)  0@1520r 1@1552r

selectOrSplit FPR32:%vreg57 [1584r,1616r:0)[1616r,1648r:1)  0@1584r 1@1616r w=6.026298e+03
assigning %vreg57 to %R37: R37 [1584r,1616r:0)[1616r,1648r:1)  0@1584r 1@1616r

selectOrSplit FPR32:%vreg63 [1936r,2064r:0)  0@1936r w=8.274716e+01
assigning %vreg63 to %R33: R33 [1936r,2064r:0)  0@1936r

selectOrSplit FPR32:%vreg64 [1984r,2064r:0)  0@1984r w=9.102187e+01
assigning %vreg64 to %R34: R34 [1984r,2064r:0)  0@1984r

selectOrSplit FPR32:%vreg65 [2064r,2096r:0)  0@2064r w=1.011354e+02
assigning %vreg65 to %R33: R33 [2064r,2096r:0)  0@2064r
# *** IR Dump After Greedy Register Allocator ***:
# Machine code for function matmac: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=32, align=8, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=4, align=8, at location [SP]
Function Live Ins: %R0 in %vreg30, %R1 in %vreg31, %R2 in %vreg32, %R3 in %vreg33

0B	BB#0: 
	    Live Ins: %R0 %R1 %R2 %R3
16B		GID %CONFIG<imp-def>
32B		%vreg78:isub_hi<def,read-undef> = MOVFS32_core %CONFIG; FPR64_with_isub_hi_in_FPR32:%vreg78
48B		STRi32_r32 %vreg78:isub_hi, <fi#1>, 0; mem:ST4[FixedStack1] FPR64_with_isub_hi_in_FPR32:%vreg78
64B		%vreg73<def> = MOVi32ri 65535; GPR32:%vreg73
96B		%vreg73<def,tied1> = MOVTi32ri %vreg73<tied0>, 65521; GPR32:%vreg73
112B		%vreg78:isub_lo<def> = ANDrr_r32 %vreg78:isub_hi, %vreg73, %STATUS<imp-def>; FPR64_with_isub_hi_in_FPR32:%vreg78 GPR32:%vreg73
144B		%vreg78:isub_hi<def,tied1> = MOVTi32ri %vreg78:isub_hi<tied0>, 72; FPR64_with_isub_hi_in_FPR32:%vreg78
192B		STRi64 %vreg78, <fi#3>, 0; mem:ST4[FixedStack3] ST4[FixedStack2] FPR64_with_isub_hi_in_FPR32:%vreg78
208B		GIE %CONFIG<imp-use,kill>
	    Successors according to CFG: BB#1(?%)

224B	BB#1: derived from LLVM BB %entry
	    Live Ins: %R0 %R1 %R2 %R3
	    Predecessors according to CFG: BB#0
240B		%vreg33<def> = COPY %R3; GPR32:%vreg33
256B		%vreg81<def> = COPY %R2; GPR32:%vreg81
272B		%vreg31<def> = COPY %R1; GPR32:%vreg31
288B		%vreg30<def> = COPY %R0; GPR32:%vreg30
304B		%vreg34<def,dead> = CMPri_r32 %vreg33, 1, %STATUS<imp-def>; GPR32:%vreg34,%vreg33
320B		BCC <BB#12>, 8, %STATUS<imp-use>
336B		BNONE32 <BB#2>, %STATUS<imp-use>
	    Successors according to CFG: BB#2(0x50000000 / 0x80000000 = 62.50%) BB#12(0x30000000 / 0x80000000 = 37.50%)

352B	BB#2: derived from LLVM BB %for.body3.lr.ph.preheader
	    Predecessors according to CFG: BB#1
368B		%vreg1<def> = LSL32ri %vreg33, 2, %STATUS<imp-def,dead>; GPR32:%vreg1,%vreg33
384B		%vreg0<def> = ADDri_r32 %vreg31, 8, %STATUS<imp-def,dead>; GPR32:%vreg0,%vreg31
400B		%vreg36<def> = MOViPTR <fi#0>, 0; GPR32:%vreg36
416B		%vreg11<def> = ADDri_r32 %vreg36, 8, %STATUS<imp-def,dead>; GPR32:%vreg11,%vreg36
432B		%vreg42:isub_hi<def,read-undef> = MOVi32ri 0; FPR64_with_isub_hi_in_FPR32:%vreg42
464B		%vreg82<def> = COPY %vreg42:isub_hi; GPR32:%vreg82 FPR64_with_isub_hi_in_FPR32:%vreg42
	    Successors according to CFG: BB#3(?%)

480B	BB#3: derived from LLVM BB %for.body3.lr.ph
	    Predecessors according to CFG: BB#2 BB#11
528B		%vreg74<def> = LDRi32_r32 <fi#3>, 0; mem:LD4[FixedStack3] GPR32:%vreg74
544B		GID %CONFIG<imp-def,dead>
560B		%CONFIG<def,dead> = MOVTS32_core %vreg74; GPR32:%vreg74
576B		GIE %CONFIG<imp-def,dead>
592B		%vreg38<def> = IMULrr_r32 %vreg82, %vreg33, %STATUS<imp-def,dead>; GPR32:%vreg38,%vreg82,%vreg33
608B		%vreg39<def> = LSL32ri %vreg38, 2, %STATUS<imp-def,dead>; GPR32:%vreg39,%vreg38
624B		%vreg5<def> = ADDrr_r32 %vreg30, %vreg39, %STATUS<imp-def,dead>; GPR32:%vreg5,%vreg30,%vreg39
640B		%vreg83<def> = COPY %vreg81; GPR32:%vreg83,%vreg81
656B		%vreg84<def> = COPY %vreg0; GPR32:%vreg84,%vreg0
672B		%vreg85<def> = COPY %vreg42:isub_hi; GPR32:%vreg85 FPR64_with_isub_hi_in_FPR32:%vreg42
	    Successors according to CFG: BB#4(?%)

688B	BB#4: derived from LLVM BB %for.body9.preheader
	    Predecessors according to CFG: BB#3 BB#10
768B		%vreg42:isub_lo<def> = COPY %vreg42:isub_hi; FPR64_with_isub_hi_in_FPR32:%vreg42
784B		STRi64 %vreg42, <fi#0>, 24; mem:ST8[%1+24] FPR64_with_isub_hi_in_FPR32:%vreg42
800B		STRi64 %vreg42, <fi#0>, 16; mem:ST8[%1+16] FPR64_with_isub_hi_in_FPR32:%vreg42
816B		STRi64 %vreg42, <fi#0>, 8; mem:ST8[%1+8] FPR64_with_isub_hi_in_FPR32:%vreg42
832B		STRi64 %vreg42, <fi#0>, 0; mem:ST8[%1] FPR64_with_isub_hi_in_FPR32:%vreg42
848B		%vreg86<def> = COPY %vreg84; GPR32:%vreg86,%vreg84
864B		%vreg87<def> = COPY %vreg42:isub_hi; GPR32:%vreg87 FPR64_with_isub_hi_in_FPR32:%vreg42
880B		BNONE32 <BB#6>, %STATUS<imp-use>
	    Successors according to CFG: BB#6(?%)

896B	BB#5: derived from LLVM BB %for.cond64.preheader
	    Predecessors according to CFG: BB#8
912B		%vreg91<def> = COPY %vreg83; GPR32:%vreg91,%vreg83
928B		%vreg92<def> = COPY %vreg42:isub_hi; GPR32:%vreg92 FPR64_with_isub_hi_in_FPR32:%vreg42
944B		BNONE32 <BB#9>, %STATUS<imp-use>
	    Successors according to CFG: BB#9(?%)

960B	BB#6: derived from LLVM BB %for.body9
	    Predecessors according to CFG: BB#4 BB#8
1008B		%vreg44<def> = LSL32ri %vreg87, 2, %STATUS<imp-def,dead>; GPR32:%vreg44,%vreg87
1024B		%vreg45<def> = ADDrr_r32 %vreg5, %vreg44, %STATUS<imp-def,dead>; GPR32:%vreg45,%vreg5,%vreg44
1056B		%vreg12<def> = LDRf32 %vreg45, 0; mem:Volatile LD4[%add.ptr10](tbaa=!2) FPR32:%vreg12 GPR32:%vreg45
1072B		%vreg88<def> = COPY %vreg11; GPR32:%vreg88,%vreg11
1088B		%vreg89<def> = COPY %vreg86; GPR32:%vreg89,%vreg86
1104B		%vreg90<def> = COPY %vreg42:isub_hi; GPR32:%vreg90 FPR64_with_isub_hi_in_FPR32:%vreg42
	    Successors according to CFG: BB#7(?%)

1120B	BB#7: derived from LLVM BB %for.body13
	    Predecessors according to CFG: BB#6 BB#7
1184B		%vreg46<def> = LDRf32 %vreg89, -8; mem:Volatile LD4[%scevgep8](tbaa=!2) FPR32:%vreg46 GPR32:%vreg89
1200B		%vreg18<def> = ADDri_r32 %vreg88, 16, %STATUS<imp-def,dead>; GPR32:%vreg18,%vreg88
1216B		%vreg17<def> = ADDri_r32 %vreg89, 16, %STATUS<imp-def,dead>; GPR32:%vreg17,%vreg89
1232B		%vreg47<def> = LDRf32 %vreg89, -4; mem:Volatile LD4[%scevgep9](tbaa=!2) FPR32:%vreg47 GPR32:%vreg89
1248B		%vreg90<def> = ADDri_r32 %vreg90, 4, %STATUS<imp-def,dead>; GPR32:%vreg90
1264B		%vreg48<def> = LDRf32 %vreg89, 0; mem:Volatile LD4[%lsr.iv5](tbaa=!2) FPR32:%vreg48 GPR32:%vreg89
1280B		%vreg49<def> = LDRf32 %vreg89, 4; mem:Volatile LD4[%scevgep7](tbaa=!2) FPR32:%vreg49 GPR32:%vreg89
1296B		%vreg79<def> = LDRf64 %vreg88, -8; mem:LD4[%scevgep17](tbaa=!2) LD4[%scevgep15](tbaa=!2) FPR64_with_isub_hi_in_FPR32:%vreg79 GPR32:%vreg88
1344B		%vreg75<def> = LDRi32_r32 <fi#2>, 0; mem:LD4[FixedStack2] GPR32:%vreg75
1360B		GID %CONFIG<imp-def,dead>
1376B		%CONFIG<def,dead> = MOVTS32_core %vreg75; GPR32:%vreg75
1392B		GIE %CONFIG<imp-def,dead>
1424B		%vreg79:isub_hi<def,tied1> = FMADDrr_r32 %vreg79:isub_hi<tied0>, %vreg12, %vreg46, %STATUS<imp-def,dead>; FPR64_with_isub_hi_in_FPR32:%vreg79 FPR32:%vreg12,%vreg46
1456B		%vreg79:isub_lo<def,tied1> = FMADDrr_r32 %vreg79:isub_lo<tied0>, %vreg12, %vreg47, %STATUS<imp-def,dead>; FPR64_with_isub_hi_in_FPR32:%vreg79 FPR32:%vreg12,%vreg47
1472B		%vreg80:isub_lo<def,read-undef> = COPY %vreg79:isub_hi; FPR64:%vreg80 FPR64_with_isub_hi_in_FPR32:%vreg79
1488B		%vreg80:isub_hi<def> = COPY %vreg79:isub_lo; FPR64:%vreg80 FPR64_with_isub_hi_in_FPR32:%vreg79
1504B		STRf64 %vreg80, %vreg88, -8; mem:ST4[%scevgep17](tbaa=!2) ST4[%scevgep15](tbaa=!2) FPR64:%vreg80 GPR32:%vreg88
1520B		%vreg55<def> = LDRf32 %vreg88, 0; mem:LD4[%lsr.iv1214](tbaa=!2) FPR32:%vreg55 GPR32:%vreg88
1552B		%vreg55<def,tied1> = FMADDrr_r32 %vreg55<tied0>, %vreg12, %vreg48, %STATUS<imp-def,dead>; FPR32:%vreg55,%vreg12,%vreg48
1568B		STRf32 %vreg55, %vreg88, 0; mem:ST4[%lsr.iv1214](tbaa=!2) FPR32:%vreg55 GPR32:%vreg88
1584B		%vreg57<def> = LDRf32 %vreg88, 4; mem:LD4[%scevgep16](tbaa=!2) FPR32:%vreg57 GPR32:%vreg88
1616B		%vreg57<def,tied1> = FMADDrr_r32 %vreg57<tied0>, %vreg12, %vreg49, %STATUS<imp-def,dead>; FPR32:%vreg57,%vreg12,%vreg49
1632B		%vreg58<def,dead> = CMPri_r32 %vreg90, 8, %STATUS<imp-def>; GPR32:%vreg58,%vreg90
1648B		STRf32 %vreg57, %vreg88, 4; mem:ST4[%scevgep16](tbaa=!2) FPR32:%vreg57 GPR32:%vreg88
1664B		%vreg88<def> = COPY %vreg18; GPR32:%vreg88,%vreg18
1680B		%vreg89<def> = COPY %vreg17; GPR32:%vreg89,%vreg17
1712B		BCC <BB#7>, 8, %STATUS<imp-use>
1728B		BNONE32 <BB#8>, %STATUS<imp-use>
	    Successors according to CFG: BB#7(0x7c000000 / 0x80000000 = 96.88%) BB#8(0x04000000 / 0x80000000 = 3.12%)

1744B	BB#8: derived from LLVM BB %for.end60
	    Predecessors according to CFG: BB#7
1760B		%vreg86<def> = ADDrr_r32 %vreg86, %vreg1, %STATUS<imp-def,dead>; GPR32:%vreg86,%vreg1
1776B		%vreg87<def> = ADDri_r32 %vreg87, 1, %STATUS<imp-def,dead>; GPR32:%vreg87
1792B		%vreg59<def,dead> = CMPrr_r32 %vreg87, %vreg33, %STATUS<imp-def>; GPR32:%vreg59,%vreg87,%vreg33
1840B		BCC <BB#5>, 0, %STATUS<imp-use>
1856B		BNONE32 <BB#6>, %STATUS<imp-use>
	    Successors according to CFG: BB#5(0x04000000 / 0x80000000 = 3.12%) BB#6(0x7c000000 / 0x80000000 = 96.88%)

1872B	BB#9: derived from LLVM BB %for.body66
	    Predecessors according to CFG: BB#5 BB#9
1920B		%vreg62<def> = ADDrr_r32 %vreg36, %vreg92, %STATUS<imp-def,dead>; GPR32:%vreg62,%vreg36,%vreg92
1936B		%vreg63<def> = LDRf32 %vreg62, 0; mem:LD4[%sunkaddr30](tbaa=!2) FPR32:%vreg63 GPR32:%vreg62
1952B		%vreg24<def> = ADDri_r32 %vreg91, 4, %STATUS<imp-def,dead>; GPR32:%vreg24,%vreg91
1968B		%vreg92<def> = ADDri_r32 %vreg92, 4, %STATUS<imp-def,dead>; GPR32:%vreg92
1984B		%vreg64<def> = LDRf32 %vreg91, 0; mem:Volatile LD4[%lsr.iv24](tbaa=!2) FPR32:%vreg64 GPR32:%vreg91
2000B		%vreg76<def> = LDRi32_r32 <fi#2>, 0; mem:LD4[FixedStack2] GPR32:%vreg76
2016B		GID %CONFIG<imp-def,dead>
2032B		%CONFIG<def,dead> = MOVTS32_core %vreg76; GPR32:%vreg76
2048B		GIE %CONFIG<imp-def,dead>
2064B		%vreg65<def> = FADDrr_r32 %vreg63, %vreg64, %STATUS<imp-def,dead>; FPR32:%vreg65,%vreg63,%vreg64
2080B		%vreg66<def,dead> = CMPri_r32 %vreg92, 32, %STATUS<imp-def>; GPR32:%vreg66,%vreg92
2096B		STRf32 %vreg65, %vreg91, 0; mem:Volatile ST4[%lsr.iv24](tbaa=!2) FPR32:%vreg65 GPR32:%vreg91
2112B		%vreg91<def> = COPY %vreg24; GPR32:%vreg91,%vreg24
2144B		BCC <BB#9>, 1, %STATUS<imp-use>
2160B		BNONE32 <BB#10>, %STATUS<imp-use>
	    Successors according to CFG: BB#10(0x04000000 / 0x80000000 = 3.12%) BB#9(0x7c000000 / 0x80000000 = 96.88%)

2176B	BB#10: derived from LLVM BB %for.end75
	    Predecessors according to CFG: BB#9
2192B		%vreg83<def> = ADDri_r32 %vreg83, 32, %STATUS<imp-def,dead>; GPR32:%vreg83
2208B		%vreg84<def> = ADDri_r32 %vreg84, 32, %STATUS<imp-def,dead>; GPR32:%vreg84
2224B		%vreg85<def> = ADDri_r32 %vreg85, 8, %STATUS<imp-def,dead>; GPR32:%vreg85
2240B		%vreg67<def,dead> = CMPrr_r32 %vreg85, %vreg33, %STATUS<imp-def>; GPR32:%vreg67,%vreg85,%vreg33
2304B		BCC <BB#4>, 8, %STATUS<imp-use>
2320B		BNONE32 <BB#11>, %STATUS<imp-use>
	    Successors according to CFG: BB#4(0x7c000000 / 0x80000000 = 96.88%) BB#11(0x04000000 / 0x80000000 = 3.12%)

2336B	BB#11: derived from LLVM BB %for.end78
	    Predecessors according to CFG: BB#10
2352B		%vreg81<def> = ADDrr_r32 %vreg81, %vreg1, %STATUS<imp-def,dead>; GPR32:%vreg81,%vreg1
2368B		%vreg82<def> = ADDri_r32 %vreg82, 1, %STATUS<imp-def,dead>; GPR32:%vreg82
2384B		%vreg68<def,dead> = CMPrr_r32 %vreg82, %vreg33, %STATUS<imp-def>; GPR32:%vreg68,%vreg82,%vreg33
2432B		BCC <BB#3>, 1, %STATUS<imp-use>
2448B		BNONE32 <BB#12>, %STATUS<imp-use>
	    Successors according to CFG: BB#12(0x04000000 / 0x80000000 = 3.12%) BB#3(0x7c000000 / 0x80000000 = 96.88%)

2464B	BB#12: derived from LLVM BB %for.end81
	    Predecessors according to CFG: BB#1 BB#11
2480B		%vreg77<def> = LDRi32_r32 <fi#1>, 0; mem:LD4[FixedStack1] GPR32:%vreg77
2496B		GID
2512B		%CONFIG<def> = MOVTS32_core %vreg77; GPR32:%vreg77
2528B		GIE %CONFIG<imp-use,kill>
2544B		RTS

# End machine code for function matmac.

# *** IR Dump Before Virtual Register Rewriter ***:
# Machine code for function matmac: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=32, align=8, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=4, align=8, at location [SP]
Function Live Ins: %R0 in %vreg30, %R1 in %vreg31, %R2 in %vreg32, %R3 in %vreg33

0B	BB#0: 
	    Live Ins: %R0 %R1 %R2 %R3
16B		GID %CONFIG<imp-def>
32B		%vreg78:isub_hi<def,read-undef> = MOVFS32_core %CONFIG; FPR64_with_isub_hi_in_FPR32:%vreg78
48B		STRi32_r32 %vreg78:isub_hi, <fi#1>, 0; mem:ST4[FixedStack1] FPR64_with_isub_hi_in_FPR32:%vreg78
64B		%vreg73<def> = MOVi32ri 65535; GPR32:%vreg73
96B		%vreg73<def,tied1> = MOVTi32ri %vreg73<tied0>, 65521; GPR32:%vreg73
112B		%vreg78:isub_lo<def> = ANDrr_r32 %vreg78:isub_hi, %vreg73, %STATUS<imp-def>; FPR64_with_isub_hi_in_FPR32:%vreg78 GPR32:%vreg73
144B		%vreg78:isub_hi<def,tied1> = MOVTi32ri %vreg78:isub_hi<tied0>, 72; FPR64_with_isub_hi_in_FPR32:%vreg78
192B		STRi64 %vreg78, <fi#3>, 0; mem:ST4[FixedStack3] ST4[FixedStack2] FPR64_with_isub_hi_in_FPR32:%vreg78
208B		GIE %CONFIG<imp-use,kill>
	    Successors according to CFG: BB#1(?%)

224B	BB#1: derived from LLVM BB %entry
	    Live Ins: %R0 %R1 %R2 %R3
	    Predecessors according to CFG: BB#0
240B		%vreg33<def> = COPY %R3; GPR32:%vreg33
256B		%vreg81<def> = COPY %R2; GPR32:%vreg81
272B		%vreg31<def> = COPY %R1; GPR32:%vreg31
288B		%vreg30<def> = COPY %R0; GPR32:%vreg30
304B		%vreg34<def,dead> = CMPri_r32 %vreg33, 1, %STATUS<imp-def>; GPR32:%vreg34,%vreg33
320B		BCC <BB#12>, 8, %STATUS<imp-use>
336B		BNONE32 <BB#2>, %STATUS<imp-use>
	    Successors according to CFG: BB#2(0x50000000 / 0x80000000 = 62.50%) BB#12(0x30000000 / 0x80000000 = 37.50%)

352B	BB#2: derived from LLVM BB %for.body3.lr.ph.preheader
	    Predecessors according to CFG: BB#1
368B		%vreg1<def> = LSL32ri %vreg33, 2, %STATUS<imp-def,dead>; GPR32:%vreg1,%vreg33
384B		%vreg0<def> = ADDri_r32 %vreg31, 8, %STATUS<imp-def,dead>; GPR32:%vreg0,%vreg31
400B		%vreg36<def> = MOViPTR <fi#0>, 0; GPR32:%vreg36
416B		%vreg11<def> = ADDri_r32 %vreg36, 8, %STATUS<imp-def,dead>; GPR32:%vreg11,%vreg36
432B		%vreg42:isub_hi<def,read-undef> = MOVi32ri 0; FPR64_with_isub_hi_in_FPR32:%vreg42
464B		%vreg82<def> = COPY %vreg42:isub_hi; GPR32:%vreg82 FPR64_with_isub_hi_in_FPR32:%vreg42
	    Successors according to CFG: BB#3(?%)

480B	BB#3: derived from LLVM BB %for.body3.lr.ph
	    Predecessors according to CFG: BB#2 BB#11
528B		%vreg74<def> = LDRi32_r32 <fi#3>, 0; mem:LD4[FixedStack3] GPR32:%vreg74
544B		GID %CONFIG<imp-def,dead>
560B		%CONFIG<def,dead> = MOVTS32_core %vreg74; GPR32:%vreg74
576B		GIE %CONFIG<imp-def,dead>
592B		%vreg38<def> = IMULrr_r32 %vreg82, %vreg33, %STATUS<imp-def,dead>; GPR32:%vreg38,%vreg82,%vreg33
608B		%vreg39<def> = LSL32ri %vreg38, 2, %STATUS<imp-def,dead>; GPR32:%vreg39,%vreg38
624B		%vreg5<def> = ADDrr_r32 %vreg30, %vreg39, %STATUS<imp-def,dead>; GPR32:%vreg5,%vreg30,%vreg39
640B		%vreg83<def> = COPY %vreg81; GPR32:%vreg83,%vreg81
656B		%vreg84<def> = COPY %vreg0; GPR32:%vreg84,%vreg0
672B		%vreg85<def> = COPY %vreg42:isub_hi; GPR32:%vreg85 FPR64_with_isub_hi_in_FPR32:%vreg42
	    Successors according to CFG: BB#4(?%)

688B	BB#4: derived from LLVM BB %for.body9.preheader
	    Predecessors according to CFG: BB#3 BB#10
768B		%vreg42:isub_lo<def> = COPY %vreg42:isub_hi; FPR64_with_isub_hi_in_FPR32:%vreg42
784B		STRi64 %vreg42, <fi#0>, 24; mem:ST8[%1+24] FPR64_with_isub_hi_in_FPR32:%vreg42
800B		STRi64 %vreg42, <fi#0>, 16; mem:ST8[%1+16] FPR64_with_isub_hi_in_FPR32:%vreg42
816B		STRi64 %vreg42, <fi#0>, 8; mem:ST8[%1+8] FPR64_with_isub_hi_in_FPR32:%vreg42
832B		STRi64 %vreg42, <fi#0>, 0; mem:ST8[%1] FPR64_with_isub_hi_in_FPR32:%vreg42
848B		%vreg86<def> = COPY %vreg84; GPR32:%vreg86,%vreg84
864B		%vreg87<def> = COPY %vreg42:isub_hi; GPR32:%vreg87 FPR64_with_isub_hi_in_FPR32:%vreg42
880B		BNONE32 <BB#6>, %STATUS<imp-use>
	    Successors according to CFG: BB#6(?%)

896B	BB#5: derived from LLVM BB %for.cond64.preheader
	    Predecessors according to CFG: BB#8
912B		%vreg91<def> = COPY %vreg83; GPR32:%vreg91,%vreg83
928B		%vreg92<def> = COPY %vreg42:isub_hi; GPR32:%vreg92 FPR64_with_isub_hi_in_FPR32:%vreg42
944B		BNONE32 <BB#9>, %STATUS<imp-use>
	    Successors according to CFG: BB#9(?%)

960B	BB#6: derived from LLVM BB %for.body9
	    Predecessors according to CFG: BB#4 BB#8
1008B		%vreg44<def> = LSL32ri %vreg87, 2, %STATUS<imp-def,dead>; GPR32:%vreg44,%vreg87
1024B		%vreg45<def> = ADDrr_r32 %vreg5, %vreg44, %STATUS<imp-def,dead>; GPR32:%vreg45,%vreg5,%vreg44
1056B		%vreg12<def> = LDRf32 %vreg45, 0; mem:Volatile LD4[%add.ptr10](tbaa=!2) FPR32:%vreg12 GPR32:%vreg45
1072B		%vreg88<def> = COPY %vreg11; GPR32:%vreg88,%vreg11
1088B		%vreg89<def> = COPY %vreg86; GPR32:%vreg89,%vreg86
1104B		%vreg90<def> = COPY %vreg42:isub_hi; GPR32:%vreg90 FPR64_with_isub_hi_in_FPR32:%vreg42
	    Successors according to CFG: BB#7(?%)

1120B	BB#7: derived from LLVM BB %for.body13
	    Predecessors according to CFG: BB#6 BB#7
1184B		%vreg46<def> = LDRf32 %vreg89, -8; mem:Volatile LD4[%scevgep8](tbaa=!2) FPR32:%vreg46 GPR32:%vreg89
1200B		%vreg18<def> = ADDri_r32 %vreg88, 16, %STATUS<imp-def,dead>; GPR32:%vreg18,%vreg88
1216B		%vreg17<def> = ADDri_r32 %vreg89, 16, %STATUS<imp-def,dead>; GPR32:%vreg17,%vreg89
1232B		%vreg47<def> = LDRf32 %vreg89, -4; mem:Volatile LD4[%scevgep9](tbaa=!2) FPR32:%vreg47 GPR32:%vreg89
1248B		%vreg90<def> = ADDri_r32 %vreg90, 4, %STATUS<imp-def,dead>; GPR32:%vreg90
1264B		%vreg48<def> = LDRf32 %vreg89, 0; mem:Volatile LD4[%lsr.iv5](tbaa=!2) FPR32:%vreg48 GPR32:%vreg89
1280B		%vreg49<def> = LDRf32 %vreg89, 4; mem:Volatile LD4[%scevgep7](tbaa=!2) FPR32:%vreg49 GPR32:%vreg89
1296B		%vreg79<def> = LDRf64 %vreg88, -8; mem:LD4[%scevgep17](tbaa=!2) LD4[%scevgep15](tbaa=!2) FPR64_with_isub_hi_in_FPR32:%vreg79 GPR32:%vreg88
1344B		%vreg75<def> = LDRi32_r32 <fi#2>, 0; mem:LD4[FixedStack2] GPR32:%vreg75
1360B		GID %CONFIG<imp-def,dead>
1376B		%CONFIG<def,dead> = MOVTS32_core %vreg75; GPR32:%vreg75
1392B		GIE %CONFIG<imp-def,dead>
1424B		%vreg79:isub_hi<def,tied1> = FMADDrr_r32 %vreg79:isub_hi<tied0>, %vreg12, %vreg46, %STATUS<imp-def,dead>; FPR64_with_isub_hi_in_FPR32:%vreg79 FPR32:%vreg12,%vreg46
1456B		%vreg79:isub_lo<def,tied1> = FMADDrr_r32 %vreg79:isub_lo<tied0>, %vreg12, %vreg47, %STATUS<imp-def,dead>; FPR64_with_isub_hi_in_FPR32:%vreg79 FPR32:%vreg12,%vreg47
1472B		%vreg80:isub_lo<def,read-undef> = COPY %vreg79:isub_hi; FPR64:%vreg80 FPR64_with_isub_hi_in_FPR32:%vreg79
1488B		%vreg80:isub_hi<def> = COPY %vreg79:isub_lo; FPR64:%vreg80 FPR64_with_isub_hi_in_FPR32:%vreg79
1504B		STRf64 %vreg80, %vreg88, -8; mem:ST4[%scevgep17](tbaa=!2) ST4[%scevgep15](tbaa=!2) FPR64:%vreg80 GPR32:%vreg88
1520B		%vreg55<def> = LDRf32 %vreg88, 0; mem:LD4[%lsr.iv1214](tbaa=!2) FPR32:%vreg55 GPR32:%vreg88
1552B		%vreg55<def,tied1> = FMADDrr_r32 %vreg55<tied0>, %vreg12, %vreg48, %STATUS<imp-def,dead>; FPR32:%vreg55,%vreg12,%vreg48
1568B		STRf32 %vreg55, %vreg88, 0; mem:ST4[%lsr.iv1214](tbaa=!2) FPR32:%vreg55 GPR32:%vreg88
1584B		%vreg57<def> = LDRf32 %vreg88, 4; mem:LD4[%scevgep16](tbaa=!2) FPR32:%vreg57 GPR32:%vreg88
1616B		%vreg57<def,tied1> = FMADDrr_r32 %vreg57<tied0>, %vreg12, %vreg49, %STATUS<imp-def,dead>; FPR32:%vreg57,%vreg12,%vreg49
1632B		%vreg58<def,dead> = CMPri_r32 %vreg90, 8, %STATUS<imp-def>; GPR32:%vreg58,%vreg90
1648B		STRf32 %vreg57, %vreg88, 4; mem:ST4[%scevgep16](tbaa=!2) FPR32:%vreg57 GPR32:%vreg88
1664B		%vreg88<def> = COPY %vreg18; GPR32:%vreg88,%vreg18
1680B		%vreg89<def> = COPY %vreg17; GPR32:%vreg89,%vreg17
1712B		BCC <BB#7>, 8, %STATUS<imp-use>
1728B		BNONE32 <BB#8>, %STATUS<imp-use>
	    Successors according to CFG: BB#7(0x7c000000 / 0x80000000 = 96.88%) BB#8(0x04000000 / 0x80000000 = 3.12%)

1744B	BB#8: derived from LLVM BB %for.end60
	    Predecessors according to CFG: BB#7
1760B		%vreg86<def> = ADDrr_r32 %vreg86, %vreg1, %STATUS<imp-def,dead>; GPR32:%vreg86,%vreg1
1776B		%vreg87<def> = ADDri_r32 %vreg87, 1, %STATUS<imp-def,dead>; GPR32:%vreg87
1792B		%vreg59<def,dead> = CMPrr_r32 %vreg87, %vreg33, %STATUS<imp-def>; GPR32:%vreg59,%vreg87,%vreg33
1840B		BCC <BB#5>, 0, %STATUS<imp-use>
1856B		BNONE32 <BB#6>, %STATUS<imp-use>
	    Successors according to CFG: BB#5(0x04000000 / 0x80000000 = 3.12%) BB#6(0x7c000000 / 0x80000000 = 96.88%)

1872B	BB#9: derived from LLVM BB %for.body66
	    Predecessors according to CFG: BB#5 BB#9
1920B		%vreg62<def> = ADDrr_r32 %vreg36, %vreg92, %STATUS<imp-def,dead>; GPR32:%vreg62,%vreg36,%vreg92
1936B		%vreg63<def> = LDRf32 %vreg62, 0; mem:LD4[%sunkaddr30](tbaa=!2) FPR32:%vreg63 GPR32:%vreg62
1952B		%vreg24<def> = ADDri_r32 %vreg91, 4, %STATUS<imp-def,dead>; GPR32:%vreg24,%vreg91
1968B		%vreg92<def> = ADDri_r32 %vreg92, 4, %STATUS<imp-def,dead>; GPR32:%vreg92
1984B		%vreg64<def> = LDRf32 %vreg91, 0; mem:Volatile LD4[%lsr.iv24](tbaa=!2) FPR32:%vreg64 GPR32:%vreg91
2000B		%vreg76<def> = LDRi32_r32 <fi#2>, 0; mem:LD4[FixedStack2] GPR32:%vreg76
2016B		GID %CONFIG<imp-def,dead>
2032B		%CONFIG<def,dead> = MOVTS32_core %vreg76; GPR32:%vreg76
2048B		GIE %CONFIG<imp-def,dead>
2064B		%vreg65<def> = FADDrr_r32 %vreg63, %vreg64, %STATUS<imp-def,dead>; FPR32:%vreg65,%vreg63,%vreg64
2080B		%vreg66<def,dead> = CMPri_r32 %vreg92, 32, %STATUS<imp-def>; GPR32:%vreg66,%vreg92
2096B		STRf32 %vreg65, %vreg91, 0; mem:Volatile ST4[%lsr.iv24](tbaa=!2) FPR32:%vreg65 GPR32:%vreg91
2112B		%vreg91<def> = COPY %vreg24; GPR32:%vreg91,%vreg24
2144B		BCC <BB#9>, 1, %STATUS<imp-use>
2160B		BNONE32 <BB#10>, %STATUS<imp-use>
	    Successors according to CFG: BB#10(0x04000000 / 0x80000000 = 3.12%) BB#9(0x7c000000 / 0x80000000 = 96.88%)

2176B	BB#10: derived from LLVM BB %for.end75
	    Predecessors according to CFG: BB#9
2192B		%vreg83<def> = ADDri_r32 %vreg83, 32, %STATUS<imp-def,dead>; GPR32:%vreg83
2208B		%vreg84<def> = ADDri_r32 %vreg84, 32, %STATUS<imp-def,dead>; GPR32:%vreg84
2224B		%vreg85<def> = ADDri_r32 %vreg85, 8, %STATUS<imp-def,dead>; GPR32:%vreg85
2240B		%vreg67<def,dead> = CMPrr_r32 %vreg85, %vreg33, %STATUS<imp-def>; GPR32:%vreg67,%vreg85,%vreg33
2304B		BCC <BB#4>, 8, %STATUS<imp-use>
2320B		BNONE32 <BB#11>, %STATUS<imp-use>
	    Successors according to CFG: BB#4(0x7c000000 / 0x80000000 = 96.88%) BB#11(0x04000000 / 0x80000000 = 3.12%)

2336B	BB#11: derived from LLVM BB %for.end78
	    Predecessors according to CFG: BB#10
2352B		%vreg81<def> = ADDrr_r32 %vreg81, %vreg1, %STATUS<imp-def,dead>; GPR32:%vreg81,%vreg1
2368B		%vreg82<def> = ADDri_r32 %vreg82, 1, %STATUS<imp-def,dead>; GPR32:%vreg82
2384B		%vreg68<def,dead> = CMPrr_r32 %vreg82, %vreg33, %STATUS<imp-def>; GPR32:%vreg68,%vreg82,%vreg33
2432B		BCC <BB#3>, 1, %STATUS<imp-use>
2448B		BNONE32 <BB#12>, %STATUS<imp-use>
	    Successors according to CFG: BB#12(0x04000000 / 0x80000000 = 3.12%) BB#3(0x7c000000 / 0x80000000 = 96.88%)

2464B	BB#12: derived from LLVM BB %for.end81
	    Predecessors according to CFG: BB#1 BB#11
2480B		%vreg77<def> = LDRi32_r32 <fi#1>, 0; mem:LD4[FixedStack1] GPR32:%vreg77
2496B		GID
2512B		%CONFIG<def> = MOVTS32_core %vreg77; GPR32:%vreg77
2528B		GIE %CONFIG<imp-use,kill>
2544B		RTS

# End machine code for function matmac.

********** REWRITE VIRTUAL REGISTERS **********
********** Function: matmac
********** REGISTER MAP **********
[%vreg0 -> %R1] GPR32
[%vreg1 -> %IP] GPR32
[%vreg5 -> %R21] GPR32
[%vreg11 -> %R17] GPR32
[%vreg12 -> %R27] FPR32
[%vreg17 -> %R36] GPR32
[%vreg18 -> %R35] GPR32
[%vreg24 -> %R27] GPR32
[%vreg30 -> %R0] GPR32
[%vreg31 -> %R1] GPR32
[%vreg33 -> %R3] GPR32
[%vreg34 -> %IP] GPR32
[%vreg36 -> %R16] GPR32
[%vreg38 -> %R21] GPR32
[%vreg39 -> %R21] GPR32
[%vreg42 -> %D9] FPR64_with_isub_hi_in_FPR32
[%vreg44 -> %R27] GPR32
[%vreg45 -> %R27] GPR32
[%vreg46 -> %R37] FPR32
[%vreg47 -> %R38] FPR32
[%vreg48 -> %R39] FPR32
[%vreg49 -> %R40] FPR32
[%vreg55 -> %R34] FPR32
[%vreg57 -> %R37] FPR32
[%vreg58 -> %R34] GPR32
[%vreg59 -> %R27] GPR32
[%vreg62 -> %R27] GPR32
[%vreg63 -> %R33] FPR32
[%vreg64 -> %R34] FPR32
[%vreg65 -> %R33] FPR32
[%vreg66 -> %R32] GPR32
[%vreg67 -> %R25] GPR32
[%vreg68 -> %R21] GPR32
[%vreg73 -> %IP] GPR32
[%vreg74 -> %R21] GPR32
[%vreg75 -> %R34] GPR32
[%vreg76 -> %R32] GPR32
[%vreg77 -> %R0] GPR32
[%vreg78 -> %D9] FPR64_with_isub_hi_in_FPR32
[%vreg79 -> %D21] FPR64_with_isub_hi_in_FPR32
[%vreg80 -> %D22] FPR64
[%vreg81 -> %R2] GPR32
[%vreg82 -> %R20] GPR32
[%vreg83 -> %R22] GPR32
[%vreg84 -> %R23] GPR32
[%vreg85 -> %R24] GPR32
[%vreg86 -> %R25] GPR32
[%vreg87 -> %R26] GPR32
[%vreg88 -> %R32] GPR32
[%vreg89 -> %R34] GPR32
[%vreg90 -> %R33] GPR32
[%vreg91 -> %R25] GPR32
[%vreg92 -> %R26] GPR32

0B	BB#0: 
	    Live Ins: %R0 %R1 %R2 %R3
16B		GID %CONFIG<imp-def>
32B		%vreg78:isub_hi<def,read-undef> = MOVFS32_core %CONFIG; FPR64_with_isub_hi_in_FPR32:%vreg78
48B		STRi32_r32 %vreg78:isub_hi, <fi#1>, 0; mem:ST4[FixedStack1] FPR64_with_isub_hi_in_FPR32:%vreg78
64B		%vreg73<def> = MOVi32ri 65535; GPR32:%vreg73
96B		%vreg73<def,tied1> = MOVTi32ri %vreg73<kill,tied0>, 65521; GPR32:%vreg73
112B		%vreg78:isub_lo<def> = ANDrr_r32 %vreg78:isub_hi<kill>, %vreg73<kill>, %STATUS<imp-def>; FPR64_with_isub_hi_in_FPR32:%vreg78 GPR32:%vreg73
144B		%vreg78:isub_hi<def,tied1> = MOVTi32ri %vreg78:isub_hi<kill,tied0>, 72; FPR64_with_isub_hi_in_FPR32:%vreg78
192B		STRi64 %vreg78<kill>, <fi#3>, 0; mem:ST4[FixedStack3] ST4[FixedStack2] FPR64_with_isub_hi_in_FPR32:%vreg78
208B		GIE %CONFIG<imp-use,kill>
	    Successors according to CFG: BB#1(?%)
> GID %CONFIG<imp-def>
> %R19<def> = MOVFS32_core %CONFIG, %D9<imp-def>
> STRi32_r32 %R19, <fi#1>, 0; mem:ST4[FixedStack1]
> %IP<def> = MOVi32ri 65535
> %IP<def,tied1> = MOVTi32ri %IP<kill,tied0>, 65521
> %R18<def> = ANDrr_r32 %R19, %IP<kill>, %STATUS<imp-def>, %D9<imp-use,kill>, %D9<imp-def>
> %R19<def,tied1> = MOVTi32ri %R19<tied0>, 72, %D9<imp-use,kill>, %D9<imp-def>
> STRi64 %D9<kill>, <fi#3>, 0; mem:ST4[FixedStack3] ST4[FixedStack2]
> GIE %CONFIG<imp-use,kill>
224B	BB#1: derived from LLVM BB %entry
	    Live Ins: %R0 %R1 %R2 %R3
	    Predecessors according to CFG: BB#0
240B		%vreg33<def> = COPY %R3; GPR32:%vreg33
256B		%vreg81<def> = COPY %R2; GPR32:%vreg81
272B		%vreg31<def> = COPY %R1; GPR32:%vreg31
288B		%vreg30<def> = COPY %R0; GPR32:%vreg30
304B		%vreg34<def,dead> = CMPri_r32 %vreg33, 1, %STATUS<imp-def>; GPR32:%vreg34,%vreg33
320B		BCC <BB#12>, 8, %STATUS<imp-use>
336B		BNONE32 <BB#2>, %STATUS<imp-use>
	    Successors according to CFG: BB#2(0x50000000 / 0x80000000 = 62.50%) BB#12(0x30000000 / 0x80000000 = 37.50%)
> %R3<def> = COPY %R3
Identity copy: %R3<def> = COPY %R3
  deleted.
> %R2<def> = COPY %R2
Identity copy: %R2<def> = COPY %R2
  deleted.
> %R1<def> = COPY %R1
Identity copy: %R1<def> = COPY %R1
  deleted.
> %R0<def> = COPY %R0
Identity copy: %R0<def> = COPY %R0
  deleted.
> %IP<def,dead> = CMPri_r32 %R3, 1, %STATUS<imp-def>
> BCC <BB#12>, 8, %STATUS<imp-use>
> BNONE32 <BB#2>, %STATUS<imp-use>
352B	BB#2: derived from LLVM BB %for.body3.lr.ph.preheader
	    Live Ins: %R0 %R1 %R2 %R3
	    Predecessors according to CFG: BB#1
368B		%vreg1<def> = LSL32ri %vreg33, 2, %STATUS<imp-def,dead>; GPR32:%vreg1,%vreg33
384B		%vreg0<def> = ADDri_r32 %vreg31<kill>, 8, %STATUS<imp-def,dead>; GPR32:%vreg0,%vreg31
400B		%vreg36<def> = MOViPTR <fi#0>, 0; GPR32:%vreg36
416B		%vreg11<def> = ADDri_r32 %vreg36, 8, %STATUS<imp-def,dead>; GPR32:%vreg11,%vreg36
432B		%vreg42:isub_hi<def,read-undef> = MOVi32ri 0; FPR64_with_isub_hi_in_FPR32:%vreg42
464B		%vreg82<def> = COPY %vreg42:isub_hi; GPR32:%vreg82 FPR64_with_isub_hi_in_FPR32:%vreg42
	    Successors according to CFG: BB#3(?%)
> %IP<def> = LSL32ri %R3, 2, %STATUS<imp-def,dead>
> %R1<def> = ADDri_r32 %R1<kill>, 8, %STATUS<imp-def,dead>
> %R16<def> = MOViPTR <fi#0>, 0
> %R17<def> = ADDri_r32 %R16, 8, %STATUS<imp-def,dead>
> %R19<def> = MOVi32ri 0, %D9<imp-def>
> %R20<def> = COPY %R19
480B	BB#3: derived from LLVM BB %for.body3.lr.ph
	    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20
	    Predecessors according to CFG: BB#2 BB#11
528B		%vreg74<def> = LDRi32_r32 <fi#3>, 0; mem:LD4[FixedStack3] GPR32:%vreg74
544B		GID %CONFIG<imp-def,dead>
560B		%CONFIG<def,dead> = MOVTS32_core %vreg74<kill>; GPR32:%vreg74
576B		GIE %CONFIG<imp-def,dead>
592B		%vreg38<def> = IMULrr_r32 %vreg82, %vreg33, %STATUS<imp-def,dead>; GPR32:%vreg38,%vreg82,%vreg33
608B		%vreg39<def> = LSL32ri %vreg38<kill>, 2, %STATUS<imp-def,dead>; GPR32:%vreg39,%vreg38
624B		%vreg5<def> = ADDrr_r32 %vreg30, %vreg39<kill>, %STATUS<imp-def,dead>; GPR32:%vreg5,%vreg30,%vreg39
640B		%vreg83<def> = COPY %vreg81; GPR32:%vreg83,%vreg81
656B		%vreg84<def> = COPY %vreg0; GPR32:%vreg84,%vreg0
672B		%vreg85<def> = COPY %vreg42:isub_hi; GPR32:%vreg85 FPR64_with_isub_hi_in_FPR32:%vreg42
	    Successors according to CFG: BB#4(?%)
> %R21<def> = LDRi32_r32 <fi#3>, 0; mem:LD4[FixedStack3]
> GID %CONFIG<imp-def,dead>
> %CONFIG<def,dead> = MOVTS32_core %R21<kill>
> GIE %CONFIG<imp-def,dead>
> %R21<def> = IMULrr_r32 %R20, %R3, %STATUS<imp-def,dead>
> %R21<def> = LSL32ri %R21<kill>, 2, %STATUS<imp-def,dead>
> %R21<def> = ADDrr_r32 %R0, %R21<kill>, %STATUS<imp-def,dead>
> %R22<def> = COPY %R2
> %R23<def> = COPY %R1
> %R24<def> = COPY %R19
688B	BB#4: derived from LLVM BB %for.body9.preheader
	    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
	    Predecessors according to CFG: BB#3 BB#10
768B		%vreg42:isub_lo<def> = COPY %vreg42:isub_hi<kill>; FPR64_with_isub_hi_in_FPR32:%vreg42
784B		STRi64 %vreg42, <fi#0>, 24; mem:ST8[%1+24] FPR64_with_isub_hi_in_FPR32:%vreg42
800B		STRi64 %vreg42, <fi#0>, 16; mem:ST8[%1+16] FPR64_with_isub_hi_in_FPR32:%vreg42
816B		STRi64 %vreg42, <fi#0>, 8; mem:ST8[%1+8] FPR64_with_isub_hi_in_FPR32:%vreg42
832B		STRi64 %vreg42, <fi#0>, 0; mem:ST8[%1] FPR64_with_isub_hi_in_FPR32:%vreg42
848B		%vreg86<def> = COPY %vreg84; GPR32:%vreg86,%vreg84
864B		%vreg87<def> = COPY %vreg42:isub_hi; GPR32:%vreg87 FPR64_with_isub_hi_in_FPR32:%vreg42
880B		BNONE32 <BB#6>, %STATUS<imp-use>
	    Successors according to CFG: BB#6(?%)
> %R18<def> = COPY %R19, %D9<imp-use,kill>, %D9<imp-def>
> STRi64 %D9, <fi#0>, 24; mem:ST8[%1+24]
> STRi64 %D9, <fi#0>, 16; mem:ST8[%1+16]
> STRi64 %D9, <fi#0>, 8; mem:ST8[%1+8]
> STRi64 %D9, <fi#0>, 0; mem:ST8[%1]
> %R25<def> = COPY %R23
> %R26<def> = COPY %R19
> BNONE32 <BB#6>, %STATUS<imp-use>
896B	BB#5: derived from LLVM BB %for.cond64.preheader
	    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
	    Predecessors according to CFG: BB#8
912B		%vreg91<def> = COPY %vreg83; GPR32:%vreg91,%vreg83
928B		%vreg92<def> = COPY %vreg42:isub_hi; GPR32:%vreg92 FPR64_with_isub_hi_in_FPR32:%vreg42
944B		BNONE32 <BB#9>, %STATUS<imp-use>
	    Successors according to CFG: BB#9(?%)
> %R25<def> = COPY %R22
> %R26<def> = COPY %R19
> BNONE32 <BB#9>, %STATUS<imp-use>
960B	BB#6: derived from LLVM BB %for.body9
	    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
	    Predecessors according to CFG: BB#4 BB#8
1008B		%vreg44<def> = LSL32ri %vreg87, 2, %STATUS<imp-def,dead>; GPR32:%vreg44,%vreg87
1024B		%vreg45<def> = ADDrr_r32 %vreg5, %vreg44<kill>, %STATUS<imp-def,dead>; GPR32:%vreg45,%vreg5,%vreg44
1056B		%vreg12<def> = LDRf32 %vreg45<kill>, 0; mem:Volatile LD4[%add.ptr10](tbaa=!2) FPR32:%vreg12 GPR32:%vreg45
1072B		%vreg88<def> = COPY %vreg11; GPR32:%vreg88,%vreg11
1088B		%vreg89<def> = COPY %vreg86; GPR32:%vreg89,%vreg86
1104B		%vreg90<def> = COPY %vreg42:isub_hi; GPR32:%vreg90 FPR64_with_isub_hi_in_FPR32:%vreg42
	    Successors according to CFG: BB#7(?%)
> %R27<def> = LSL32ri %R26, 2, %STATUS<imp-def,dead>
> %R27<def> = ADDrr_r32 %R21, %R27<kill>, %STATUS<imp-def,dead>
> %R27<def> = LDRf32 %R27<kill>, 0; mem:Volatile LD4[%add.ptr10](tbaa=!2)
> %R32<def> = COPY %R17
> %R34<def> = COPY %R25
> %R33<def> = COPY %R19
1120B	BB#7: derived from LLVM BB %for.body13
	    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26 %R27 %R32 %R33 %R34
	    Predecessors according to CFG: BB#6 BB#7
1184B		%vreg46<def> = LDRf32 %vreg89, -8; mem:Volatile LD4[%scevgep8](tbaa=!2) FPR32:%vreg46 GPR32:%vreg89
1200B		%vreg18<def> = ADDri_r32 %vreg88, 16, %STATUS<imp-def,dead>; GPR32:%vreg18,%vreg88
1216B		%vreg17<def> = ADDri_r32 %vreg89, 16, %STATUS<imp-def,dead>; GPR32:%vreg17,%vreg89
1232B		%vreg47<def> = LDRf32 %vreg89, -4; mem:Volatile LD4[%scevgep9](tbaa=!2) FPR32:%vreg47 GPR32:%vreg89
1248B		%vreg90<def> = ADDri_r32 %vreg90<kill>, 4, %STATUS<imp-def,dead>; GPR32:%vreg90
1264B		%vreg48<def> = LDRf32 %vreg89, 0; mem:Volatile LD4[%lsr.iv5](tbaa=!2) FPR32:%vreg48 GPR32:%vreg89
1280B		%vreg49<def> = LDRf32 %vreg89<kill>, 4; mem:Volatile LD4[%scevgep7](tbaa=!2) FPR32:%vreg49 GPR32:%vreg89
1296B		%vreg79<def> = LDRf64 %vreg88, -8; mem:LD4[%scevgep17](tbaa=!2) LD4[%scevgep15](tbaa=!2) FPR64_with_isub_hi_in_FPR32:%vreg79 GPR32:%vreg88
1344B		%vreg75<def> = LDRi32_r32 <fi#2>, 0; mem:LD4[FixedStack2] GPR32:%vreg75
1360B		GID %CONFIG<imp-def,dead>
1376B		%CONFIG<def,dead> = MOVTS32_core %vreg75<kill>; GPR32:%vreg75
1392B		GIE %CONFIG<imp-def,dead>
1424B		%vreg79:isub_hi<def,tied1> = FMADDrr_r32 %vreg79:isub_hi<kill,tied0>, %vreg12, %vreg46<kill>, %STATUS<imp-def,dead>; FPR64_with_isub_hi_in_FPR32:%vreg79 FPR32:%vreg12,%vreg46
1456B		%vreg79:isub_lo<def,tied1> = FMADDrr_r32 %vreg79:isub_lo<kill,tied0>, %vreg12, %vreg47<kill>, %STATUS<imp-def,dead>; FPR64_with_isub_hi_in_FPR32:%vreg79 FPR32:%vreg12,%vreg47
1472B		%vreg80:isub_lo<def,read-undef> = COPY %vreg79:isub_hi; FPR64:%vreg80 FPR64_with_isub_hi_in_FPR32:%vreg79
1488B		%vreg80:isub_hi<def> = COPY %vreg79:isub_lo<kill>; FPR64:%vreg80 FPR64_with_isub_hi_in_FPR32:%vreg79
1504B		STRf64 %vreg80<kill>, %vreg88, -8; mem:ST4[%scevgep17](tbaa=!2) ST4[%scevgep15](tbaa=!2) FPR64:%vreg80 GPR32:%vreg88
1520B		%vreg55<def> = LDRf32 %vreg88, 0; mem:LD4[%lsr.iv1214](tbaa=!2) FPR32:%vreg55 GPR32:%vreg88
1552B		%vreg55<def,tied1> = FMADDrr_r32 %vreg55<kill,tied0>, %vreg12, %vreg48<kill>, %STATUS<imp-def,dead>; FPR32:%vreg55,%vreg12,%vreg48
1568B		STRf32 %vreg55<kill>, %vreg88, 0; mem:ST4[%lsr.iv1214](tbaa=!2) FPR32:%vreg55 GPR32:%vreg88
1584B		%vreg57<def> = LDRf32 %vreg88, 4; mem:LD4[%scevgep16](tbaa=!2) FPR32:%vreg57 GPR32:%vreg88
1616B		%vreg57<def,tied1> = FMADDrr_r32 %vreg57<kill,tied0>, %vreg12, %vreg49<kill>, %STATUS<imp-def,dead>; FPR32:%vreg57,%vreg12,%vreg49
1632B		%vreg58<def,dead> = CMPri_r32 %vreg90, 8, %STATUS<imp-def>; GPR32:%vreg58,%vreg90
1648B		STRf32 %vreg57<kill>, %vreg88<kill>, 4; mem:ST4[%scevgep16](tbaa=!2) FPR32:%vreg57 GPR32:%vreg88
1664B		%vreg88<def> = COPY %vreg18<kill>; GPR32:%vreg88,%vreg18
1680B		%vreg89<def> = COPY %vreg17<kill>; GPR32:%vreg89,%vreg17
1712B		BCC <BB#7>, 8, %STATUS<imp-use>
1728B		BNONE32 <BB#8>, %STATUS<imp-use>
	    Successors according to CFG: BB#7(0x7c000000 / 0x80000000 = 96.88%) BB#8(0x04000000 / 0x80000000 = 3.12%)
> %R37<def> = LDRf32 %R34, -8; mem:Volatile LD4[%scevgep8](tbaa=!2)
> %R35<def> = ADDri_r32 %R32, 16, %STATUS<imp-def,dead>
> %R36<def> = ADDri_r32 %R34, 16, %STATUS<imp-def,dead>
> %R38<def> = LDRf32 %R34, -4; mem:Volatile LD4[%scevgep9](tbaa=!2)
> %R33<def> = ADDri_r32 %R33<kill>, 4, %STATUS<imp-def,dead>
> %R39<def> = LDRf32 %R34, 0; mem:Volatile LD4[%lsr.iv5](tbaa=!2)
> %R40<def> = LDRf32 %R34<kill>, 4; mem:Volatile LD4[%scevgep7](tbaa=!2)
> %D21<def> = LDRf64 %R32, -8; mem:LD4[%scevgep17](tbaa=!2) LD4[%scevgep15](tbaa=!2)
> %R34<def> = LDRi32_r32 <fi#2>, 0; mem:LD4[FixedStack2]
> GID %CONFIG<imp-def,dead>
> %CONFIG<def,dead> = MOVTS32_core %R34<kill>
> GIE %CONFIG<imp-def,dead>
> %R43<def,tied1> = FMADDrr_r32 %R43<tied0>, %R27, %R37<kill>, %STATUS<imp-def,dead>, %D21<imp-use,kill>, %D21<imp-def>
> %R42<def,tied1> = FMADDrr_r32 %R42<tied0>, %R27, %R38<kill>, %STATUS<imp-def,dead>, %D21<imp-use,kill>, %D21<imp-def>
> %R44<def> = COPY %R43, %D22<imp-def>
> %R45<def> = COPY %R42, %D21<imp-use,kill>, %D22<imp-use,kill>, %D22<imp-def>
> STRf64 %D22<kill>, %R32, -8; mem:ST4[%scevgep17](tbaa=!2) ST4[%scevgep15](tbaa=!2)
> %R34<def> = LDRf32 %R32, 0; mem:LD4[%lsr.iv1214](tbaa=!2)
> %R34<def,tied1> = FMADDrr_r32 %R34<kill,tied0>, %R27, %R39<kill>, %STATUS<imp-def,dead>
> STRf32 %R34<kill>, %R32, 0; mem:ST4[%lsr.iv1214](tbaa=!2)
> %R37<def> = LDRf32 %R32, 4; mem:LD4[%scevgep16](tbaa=!2)
> %R37<def,tied1> = FMADDrr_r32 %R37<kill,tied0>, %R27, %R40<kill>, %STATUS<imp-def,dead>
> %R34<def,dead> = CMPri_r32 %R33, 8, %STATUS<imp-def>
> STRf32 %R37<kill>, %R32<kill>, 4; mem:ST4[%scevgep16](tbaa=!2)
> %R32<def> = COPY %R35<kill>
> %R34<def> = COPY %R36<kill>
> BCC <BB#7>, 8, %STATUS<imp-use>
> BNONE32 <BB#8>, %STATUS<imp-use>
1744B	BB#8: derived from LLVM BB %for.end60
	    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
	    Predecessors according to CFG: BB#7
1760B		%vreg86<def> = ADDrr_r32 %vreg86<kill>, %vreg1, %STATUS<imp-def,dead>; GPR32:%vreg86,%vreg1
1776B		%vreg87<def> = ADDri_r32 %vreg87<kill>, 1, %STATUS<imp-def,dead>; GPR32:%vreg87
1792B		%vreg59<def,dead> = CMPrr_r32 %vreg87, %vreg33, %STATUS<imp-def>; GPR32:%vreg59,%vreg87,%vreg33
1840B		BCC <BB#5>, 0, %STATUS<imp-use>
1856B		BNONE32 <BB#6>, %STATUS<imp-use>
	    Successors according to CFG: BB#5(0x04000000 / 0x80000000 = 3.12%) BB#6(0x7c000000 / 0x80000000 = 96.88%)
> %R25<def> = ADDrr_r32 %R25<kill>, %IP, %STATUS<imp-def,dead>
> %R26<def> = ADDri_r32 %R26<kill>, 1, %STATUS<imp-def,dead>
> %R27<def,dead> = CMPrr_r32 %R26, %R3, %STATUS<imp-def>
> BCC <BB#5>, 0, %STATUS<imp-use>
> BNONE32 <BB#6>, %STATUS<imp-use>
1872B	BB#9: derived from LLVM BB %for.body66
	    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
	    Predecessors according to CFG: BB#5 BB#9
1920B		%vreg62<def> = ADDrr_r32 %vreg36, %vreg92, %STATUS<imp-def,dead>; GPR32:%vreg62,%vreg36,%vreg92
1936B		%vreg63<def> = LDRf32 %vreg62<kill>, 0; mem:LD4[%sunkaddr30](tbaa=!2) FPR32:%vreg63 GPR32:%vreg62
1952B		%vreg24<def> = ADDri_r32 %vreg91, 4, %STATUS<imp-def,dead>; GPR32:%vreg24,%vreg91
1968B		%vreg92<def> = ADDri_r32 %vreg92<kill>, 4, %STATUS<imp-def,dead>; GPR32:%vreg92
1984B		%vreg64<def> = LDRf32 %vreg91, 0; mem:Volatile LD4[%lsr.iv24](tbaa=!2) FPR32:%vreg64 GPR32:%vreg91
2000B		%vreg76<def> = LDRi32_r32 <fi#2>, 0; mem:LD4[FixedStack2] GPR32:%vreg76
2016B		GID %CONFIG<imp-def,dead>
2032B		%CONFIG<def,dead> = MOVTS32_core %vreg76<kill>; GPR32:%vreg76
2048B		GIE %CONFIG<imp-def,dead>
2064B		%vreg65<def> = FADDrr_r32 %vreg63<kill>, %vreg64<kill>, %STATUS<imp-def,dead>; FPR32:%vreg65,%vreg63,%vreg64
2080B		%vreg66<def,dead> = CMPri_r32 %vreg92, 32, %STATUS<imp-def>; GPR32:%vreg66,%vreg92
2096B		STRf32 %vreg65<kill>, %vreg91<kill>, 0; mem:Volatile ST4[%lsr.iv24](tbaa=!2) FPR32:%vreg65 GPR32:%vreg91
2112B		%vreg91<def> = COPY %vreg24<kill>; GPR32:%vreg91,%vreg24
2144B		BCC <BB#9>, 1, %STATUS<imp-use>
2160B		BNONE32 <BB#10>, %STATUS<imp-use>
	    Successors according to CFG: BB#10(0x04000000 / 0x80000000 = 3.12%) BB#9(0x7c000000 / 0x80000000 = 96.88%)
> %R27<def> = ADDrr_r32 %R16, %R26, %STATUS<imp-def,dead>
> %R33<def> = LDRf32 %R27<kill>, 0; mem:LD4[%sunkaddr30](tbaa=!2)
> %R27<def> = ADDri_r32 %R25, 4, %STATUS<imp-def,dead>
> %R26<def> = ADDri_r32 %R26<kill>, 4, %STATUS<imp-def,dead>
> %R34<def> = LDRf32 %R25, 0; mem:Volatile LD4[%lsr.iv24](tbaa=!2)
> %R32<def> = LDRi32_r32 <fi#2>, 0; mem:LD4[FixedStack2]
> GID %CONFIG<imp-def,dead>
> %CONFIG<def,dead> = MOVTS32_core %R32<kill>
> GIE %CONFIG<imp-def,dead>
> %R33<def> = FADDrr_r32 %R33<kill>, %R34<kill>, %STATUS<imp-def,dead>
> %R32<def,dead> = CMPri_r32 %R26, 32, %STATUS<imp-def>
> STRf32 %R33<kill>, %R25<kill>, 0; mem:Volatile ST4[%lsr.iv24](tbaa=!2)
> %R25<def> = COPY %R27<kill>
> BCC <BB#9>, 1, %STATUS<imp-use>
> BNONE32 <BB#10>, %STATUS<imp-use>
2176B	BB#10: derived from LLVM BB %for.end75
	    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
	    Predecessors according to CFG: BB#9
2192B		%vreg83<def> = ADDri_r32 %vreg83<kill>, 32, %STATUS<imp-def,dead>; GPR32:%vreg83
2208B		%vreg84<def> = ADDri_r32 %vreg84<kill>, 32, %STATUS<imp-def,dead>; GPR32:%vreg84
2224B		%vreg85<def> = ADDri_r32 %vreg85<kill>, 8, %STATUS<imp-def,dead>; GPR32:%vreg85
2240B		%vreg67<def,dead> = CMPrr_r32 %vreg85, %vreg33, %STATUS<imp-def>; GPR32:%vreg67,%vreg85,%vreg33
2304B		BCC <BB#4>, 8, %STATUS<imp-use>
2320B		BNONE32 <BB#11>, %STATUS<imp-use>
	    Successors according to CFG: BB#4(0x7c000000 / 0x80000000 = 96.88%) BB#11(0x04000000 / 0x80000000 = 3.12%)
> %R22<def> = ADDri_r32 %R22<kill>, 32, %STATUS<imp-def,dead>
> %R23<def> = ADDri_r32 %R23<kill>, 32, %STATUS<imp-def,dead>
> %R24<def> = ADDri_r32 %R24<kill>, 8, %STATUS<imp-def,dead>
> %R25<def,dead> = CMPrr_r32 %R24, %R3, %STATUS<imp-def>
> BCC <BB#4>, 8, %STATUS<imp-use>
> BNONE32 <BB#11>, %STATUS<imp-use>
2336B	BB#11: derived from LLVM BB %for.end78
	    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20
	    Predecessors according to CFG: BB#10
2352B		%vreg81<def> = ADDrr_r32 %vreg81<kill>, %vreg1, %STATUS<imp-def,dead>; GPR32:%vreg81,%vreg1
2368B		%vreg82<def> = ADDri_r32 %vreg82<kill>, 1, %STATUS<imp-def,dead>; GPR32:%vreg82
2384B		%vreg68<def,dead> = CMPrr_r32 %vreg82, %vreg33, %STATUS<imp-def>; GPR32:%vreg68,%vreg82,%vreg33
2432B		BCC <BB#3>, 1, %STATUS<imp-use>
2448B		BNONE32 <BB#12>, %STATUS<imp-use>
	    Successors according to CFG: BB#12(0x04000000 / 0x80000000 = 3.12%) BB#3(0x7c000000 / 0x80000000 = 96.88%)
> %R2<def> = ADDrr_r32 %R2<kill>, %IP, %STATUS<imp-def,dead>
> %R20<def> = ADDri_r32 %R20<kill>, 1, %STATUS<imp-def,dead>
> %R21<def,dead> = CMPrr_r32 %R20, %R3, %STATUS<imp-def>
> BCC <BB#3>, 1, %STATUS<imp-use>
> BNONE32 <BB#12>, %STATUS<imp-use>
2464B	BB#12: derived from LLVM BB %for.end81
	    Predecessors according to CFG: BB#1 BB#11
2480B		%vreg77<def> = LDRi32_r32 <fi#1>, 0; mem:LD4[FixedStack1] GPR32:%vreg77
2496B		GID
2512B		%CONFIG<def> = MOVTS32_core %vreg77<kill>; GPR32:%vreg77
2528B		GIE %CONFIG<imp-use,kill>
2544B		RTS
> %R0<def> = LDRi32_r32 <fi#1>, 0; mem:LD4[FixedStack1]
> GID
> %CONFIG<def> = MOVTS32_core %R0<kill>
> GIE %CONFIG<imp-use,kill>
> RTS
# *** IR Dump After Virtual Register Rewriter ***:
# Machine code for function matmac: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=32, align=8, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=4, align=8, at location [SP]
Function Live Ins: %R0, %R1, %R2, %R3

0B	BB#0: 
	    Live Ins: %R0 %R1 %R2 %R3
16B		GID %CONFIG<imp-def>
32B		%R19<def> = MOVFS32_core %CONFIG, %D9<imp-def>
48B		STRi32_r32 %R19, <fi#1>, 0; mem:ST4[FixedStack1]
64B		%IP<def> = MOVi32ri 65535
96B		%IP<def,tied1> = MOVTi32ri %IP<kill,tied0>, 65521
112B		%R18<def> = ANDrr_r32 %R19, %IP<kill>, %STATUS<imp-def>, %D9<imp-use,kill>, %D9<imp-def>
144B		%R19<def,tied1> = MOVTi32ri %R19<tied0>, 72, %D9<imp-use,kill>, %D9<imp-def>
192B		STRi64 %D9<kill>, <fi#3>, 0; mem:ST4[FixedStack3] ST4[FixedStack2]
208B		GIE %CONFIG<imp-use,kill>
	    Successors according to CFG: BB#1(?%)

224B	BB#1: derived from LLVM BB %entry
	    Live Ins: %R0 %R1 %R2 %R3
	    Predecessors according to CFG: BB#0
304B		%IP<def,dead> = CMPri_r32 %R3, 1, %STATUS<imp-def>
320B		BCC <BB#12>, 8, %STATUS<imp-use>
336B		BNONE32 <BB#2>, %STATUS<imp-use>
	    Successors according to CFG: BB#2(0x50000000 / 0x80000000 = 62.50%) BB#12(0x30000000 / 0x80000000 = 37.50%)

352B	BB#2: derived from LLVM BB %for.body3.lr.ph.preheader
	    Live Ins: %R0 %R1 %R2 %R3
	    Predecessors according to CFG: BB#1
368B		%IP<def> = LSL32ri %R3, 2, %STATUS<imp-def,dead>
384B		%R1<def> = ADDri_r32 %R1<kill>, 8, %STATUS<imp-def,dead>
400B		%R16<def> = MOViPTR <fi#0>, 0
416B		%R17<def> = ADDri_r32 %R16, 8, %STATUS<imp-def,dead>
432B		%R19<def> = MOVi32ri 0, %D9<imp-def>
464B		%R20<def> = COPY %R19
	    Successors according to CFG: BB#3(?%)

480B	BB#3: derived from LLVM BB %for.body3.lr.ph
	    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20
	    Predecessors according to CFG: BB#2 BB#11
528B		%R21<def> = LDRi32_r32 <fi#3>, 0; mem:LD4[FixedStack3]
544B		GID %CONFIG<imp-def,dead>
560B		%CONFIG<def,dead> = MOVTS32_core %R21<kill>
576B		GIE %CONFIG<imp-def,dead>
592B		%R21<def> = IMULrr_r32 %R20, %R3, %STATUS<imp-def,dead>
608B		%R21<def> = LSL32ri %R21<kill>, 2, %STATUS<imp-def,dead>
624B		%R21<def> = ADDrr_r32 %R0, %R21<kill>, %STATUS<imp-def,dead>
640B		%R22<def> = COPY %R2
656B		%R23<def> = COPY %R1
672B		%R24<def> = COPY %R19
	    Successors according to CFG: BB#4(?%)

688B	BB#4: derived from LLVM BB %for.body9.preheader
	    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
	    Predecessors according to CFG: BB#3 BB#10
768B		%R18<def> = COPY %R19, %D9<imp-use,kill>, %D9<imp-def>
784B		STRi64 %D9, <fi#0>, 24; mem:ST8[%1+24]
800B		STRi64 %D9, <fi#0>, 16; mem:ST8[%1+16]
816B		STRi64 %D9, <fi#0>, 8; mem:ST8[%1+8]
832B		STRi64 %D9, <fi#0>, 0; mem:ST8[%1]
848B		%R25<def> = COPY %R23
864B		%R26<def> = COPY %R19
880B		BNONE32 <BB#6>, %STATUS<imp-use>
	    Successors according to CFG: BB#6(?%)

896B	BB#5: derived from LLVM BB %for.cond64.preheader
	    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
	    Predecessors according to CFG: BB#8
912B		%R25<def> = COPY %R22
928B		%R26<def> = COPY %R19
944B		BNONE32 <BB#9>, %STATUS<imp-use>
	    Successors according to CFG: BB#9(?%)

960B	BB#6: derived from LLVM BB %for.body9
	    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
	    Predecessors according to CFG: BB#4 BB#8
1008B		%R27<def> = LSL32ri %R26, 2, %STATUS<imp-def,dead>
1024B		%R27<def> = ADDrr_r32 %R21, %R27<kill>, %STATUS<imp-def,dead>
1056B		%R27<def> = LDRf32 %R27<kill>, 0; mem:Volatile LD4[%add.ptr10](tbaa=!2)
1072B		%R32<def> = COPY %R17
1088B		%R34<def> = COPY %R25
1104B		%R33<def> = COPY %R19
	    Successors according to CFG: BB#7(?%)

1120B	BB#7: derived from LLVM BB %for.body13
	    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26 %R27 %R32 %R33 %R34
	    Predecessors according to CFG: BB#6 BB#7
1184B		%R37<def> = LDRf32 %R34, -8; mem:Volatile LD4[%scevgep8](tbaa=!2)
1200B		%R35<def> = ADDri_r32 %R32, 16, %STATUS<imp-def,dead>
1216B		%R36<def> = ADDri_r32 %R34, 16, %STATUS<imp-def,dead>
1232B		%R38<def> = LDRf32 %R34, -4; mem:Volatile LD4[%scevgep9](tbaa=!2)
1248B		%R33<def> = ADDri_r32 %R33<kill>, 4, %STATUS<imp-def,dead>
1264B		%R39<def> = LDRf32 %R34, 0; mem:Volatile LD4[%lsr.iv5](tbaa=!2)
1280B		%R40<def> = LDRf32 %R34<kill>, 4; mem:Volatile LD4[%scevgep7](tbaa=!2)
1296B		%D21<def> = LDRf64 %R32, -8; mem:LD4[%scevgep17](tbaa=!2) LD4[%scevgep15](tbaa=!2)
1344B		%R34<def> = LDRi32_r32 <fi#2>, 0; mem:LD4[FixedStack2]
1360B		GID %CONFIG<imp-def,dead>
1376B		%CONFIG<def,dead> = MOVTS32_core %R34<kill>
1392B		GIE %CONFIG<imp-def,dead>
1424B		%R43<def,tied1> = FMADDrr_r32 %R43<tied0>, %R27, %R37<kill>, %STATUS<imp-def,dead>, %D21<imp-use,kill>, %D21<imp-def>
1456B		%R42<def,tied1> = FMADDrr_r32 %R42<tied0>, %R27, %R38<kill>, %STATUS<imp-def,dead>, %D21<imp-use,kill>, %D21<imp-def>
1472B		%R44<def> = COPY %R43, %D22<imp-def>
1488B		%R45<def> = COPY %R42, %D21<imp-use,kill>, %D22<imp-use,kill>, %D22<imp-def>
1504B		STRf64 %D22<kill>, %R32, -8; mem:ST4[%scevgep17](tbaa=!2) ST4[%scevgep15](tbaa=!2)
1520B		%R34<def> = LDRf32 %R32, 0; mem:LD4[%lsr.iv1214](tbaa=!2)
1552B		%R34<def,tied1> = FMADDrr_r32 %R34<kill,tied0>, %R27, %R39<kill>, %STATUS<imp-def,dead>
1568B		STRf32 %R34<kill>, %R32, 0; mem:ST4[%lsr.iv1214](tbaa=!2)
1584B		%R37<def> = LDRf32 %R32, 4; mem:LD4[%scevgep16](tbaa=!2)
1616B		%R37<def,tied1> = FMADDrr_r32 %R37<kill,tied0>, %R27, %R40<kill>, %STATUS<imp-def,dead>
1632B		%R34<def,dead> = CMPri_r32 %R33, 8, %STATUS<imp-def>
1648B		STRf32 %R37<kill>, %R32<kill>, 4; mem:ST4[%scevgep16](tbaa=!2)
1664B		%R32<def> = COPY %R35<kill>
1680B		%R34<def> = COPY %R36<kill>
1712B		BCC <BB#7>, 8, %STATUS<imp-use>
1728B		BNONE32 <BB#8>, %STATUS<imp-use>
	    Successors according to CFG: BB#7(0x7c000000 / 0x80000000 = 96.88%) BB#8(0x04000000 / 0x80000000 = 3.12%)

1744B	BB#8: derived from LLVM BB %for.end60
	    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
	    Predecessors according to CFG: BB#7
1760B		%R25<def> = ADDrr_r32 %R25<kill>, %IP, %STATUS<imp-def,dead>
1776B		%R26<def> = ADDri_r32 %R26<kill>, 1, %STATUS<imp-def,dead>
1792B		%R27<def,dead> = CMPrr_r32 %R26, %R3, %STATUS<imp-def>
1840B		BCC <BB#5>, 0, %STATUS<imp-use>
1856B		BNONE32 <BB#6>, %STATUS<imp-use>
	    Successors according to CFG: BB#5(0x04000000 / 0x80000000 = 3.12%) BB#6(0x7c000000 / 0x80000000 = 96.88%)

1872B	BB#9: derived from LLVM BB %for.body66
	    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
	    Predecessors according to CFG: BB#5 BB#9
1920B		%R27<def> = ADDrr_r32 %R16, %R26, %STATUS<imp-def,dead>
1936B		%R33<def> = LDRf32 %R27<kill>, 0; mem:LD4[%sunkaddr30](tbaa=!2)
1952B		%R27<def> = ADDri_r32 %R25, 4, %STATUS<imp-def,dead>
1968B		%R26<def> = ADDri_r32 %R26<kill>, 4, %STATUS<imp-def,dead>
1984B		%R34<def> = LDRf32 %R25, 0; mem:Volatile LD4[%lsr.iv24](tbaa=!2)
2000B		%R32<def> = LDRi32_r32 <fi#2>, 0; mem:LD4[FixedStack2]
2016B		GID %CONFIG<imp-def,dead>
2032B		%CONFIG<def,dead> = MOVTS32_core %R32<kill>
2048B		GIE %CONFIG<imp-def,dead>
2064B		%R33<def> = FADDrr_r32 %R33<kill>, %R34<kill>, %STATUS<imp-def,dead>
2080B		%R32<def,dead> = CMPri_r32 %R26, 32, %STATUS<imp-def>
2096B		STRf32 %R33<kill>, %R25<kill>, 0; mem:Volatile ST4[%lsr.iv24](tbaa=!2)
2112B		%R25<def> = COPY %R27<kill>
2144B		BCC <BB#9>, 1, %STATUS<imp-use>
2160B		BNONE32 <BB#10>, %STATUS<imp-use>
	    Successors according to CFG: BB#10(0x04000000 / 0x80000000 = 3.12%) BB#9(0x7c000000 / 0x80000000 = 96.88%)

2176B	BB#10: derived from LLVM BB %for.end75
	    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
	    Predecessors according to CFG: BB#9
2192B		%R22<def> = ADDri_r32 %R22<kill>, 32, %STATUS<imp-def,dead>
2208B		%R23<def> = ADDri_r32 %R23<kill>, 32, %STATUS<imp-def,dead>
2224B		%R24<def> = ADDri_r32 %R24<kill>, 8, %STATUS<imp-def,dead>
2240B		%R25<def,dead> = CMPrr_r32 %R24, %R3, %STATUS<imp-def>
2304B		BCC <BB#4>, 8, %STATUS<imp-use>
2320B		BNONE32 <BB#11>, %STATUS<imp-use>
	    Successors according to CFG: BB#4(0x7c000000 / 0x80000000 = 96.88%) BB#11(0x04000000 / 0x80000000 = 3.12%)

2336B	BB#11: derived from LLVM BB %for.end78
	    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20
	    Predecessors according to CFG: BB#10
2352B		%R2<def> = ADDrr_r32 %R2<kill>, %IP, %STATUS<imp-def,dead>
2368B		%R20<def> = ADDri_r32 %R20<kill>, 1, %STATUS<imp-def,dead>
2384B		%R21<def,dead> = CMPrr_r32 %R20, %R3, %STATUS<imp-def>
2432B		BCC <BB#3>, 1, %STATUS<imp-use>
2448B		BNONE32 <BB#12>, %STATUS<imp-use>
	    Successors according to CFG: BB#12(0x04000000 / 0x80000000 = 3.12%) BB#3(0x7c000000 / 0x80000000 = 96.88%)

2464B	BB#12: derived from LLVM BB %for.end81
	    Predecessors according to CFG: BB#1 BB#11
2480B		%R0<def> = LDRi32_r32 <fi#1>, 0; mem:LD4[FixedStack1]
2496B		GID
2512B		%CONFIG<def> = MOVTS32_core %R0<kill>
2528B		GIE %CONFIG<imp-use,kill>
2544B		RTS

# End machine code for function matmac.

# *** IR Dump Before Stack Slot Coloring ***:
# Machine code for function matmac: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=32, align=8, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=4, align=8, at location [SP]
Function Live Ins: %R0, %R1, %R2, %R3

0B	BB#0: 
	    Live Ins: %R0 %R1 %R2 %R3
16B		GID %CONFIG<imp-def>
32B		%R19<def> = MOVFS32_core %CONFIG, %D9<imp-def>
48B		STRi32_r32 %R19, <fi#1>, 0; mem:ST4[FixedStack1]
64B		%IP<def> = MOVi32ri 65535
96B		%IP<def,tied1> = MOVTi32ri %IP<kill,tied0>, 65521
112B		%R18<def> = ANDrr_r32 %R19, %IP<kill>, %STATUS<imp-def>, %D9<imp-use,kill>, %D9<imp-def>
144B		%R19<def,tied1> = MOVTi32ri %R19<tied0>, 72, %D9<imp-use,kill>, %D9<imp-def>
192B		STRi64 %D9<kill>, <fi#3>, 0; mem:ST4[FixedStack3] ST4[FixedStack2]
208B		GIE %CONFIG<imp-use,kill>
	    Successors according to CFG: BB#1(?%)

224B	BB#1: derived from LLVM BB %entry
	    Live Ins: %R0 %R1 %R2 %R3
	    Predecessors according to CFG: BB#0
304B		%IP<def,dead> = CMPri_r32 %R3, 1, %STATUS<imp-def>
320B		BCC <BB#12>, 8, %STATUS<imp-use>
336B		BNONE32 <BB#2>, %STATUS<imp-use>
	    Successors according to CFG: BB#2(0x50000000 / 0x80000000 = 62.50%) BB#12(0x30000000 / 0x80000000 = 37.50%)

352B	BB#2: derived from LLVM BB %for.body3.lr.ph.preheader
	    Live Ins: %R0 %R1 %R2 %R3
	    Predecessors according to CFG: BB#1
368B		%IP<def> = LSL32ri %R3, 2, %STATUS<imp-def,dead>
384B		%R1<def> = ADDri_r32 %R1<kill>, 8, %STATUS<imp-def,dead>
400B		%R16<def> = MOViPTR <fi#0>, 0
416B		%R17<def> = ADDri_r32 %R16, 8, %STATUS<imp-def,dead>
432B		%R19<def> = MOVi32ri 0, %D9<imp-def>
464B		%R20<def> = COPY %R19
	    Successors according to CFG: BB#3(?%)

480B	BB#3: derived from LLVM BB %for.body3.lr.ph
	    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20
	    Predecessors according to CFG: BB#2 BB#11
528B		%R21<def> = LDRi32_r32 <fi#3>, 0; mem:LD4[FixedStack3]
544B		GID %CONFIG<imp-def,dead>
560B		%CONFIG<def,dead> = MOVTS32_core %R21<kill>
576B		GIE %CONFIG<imp-def,dead>
592B		%R21<def> = IMULrr_r32 %R20, %R3, %STATUS<imp-def,dead>
608B		%R21<def> = LSL32ri %R21<kill>, 2, %STATUS<imp-def,dead>
624B		%R21<def> = ADDrr_r32 %R0, %R21<kill>, %STATUS<imp-def,dead>
640B		%R22<def> = COPY %R2
656B		%R23<def> = COPY %R1
672B		%R24<def> = COPY %R19
	    Successors according to CFG: BB#4(?%)

688B	BB#4: derived from LLVM BB %for.body9.preheader
	    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
	    Predecessors according to CFG: BB#3 BB#10
768B		%R18<def> = COPY %R19, %D9<imp-use,kill>, %D9<imp-def>
784B		STRi64 %D9, <fi#0>, 24; mem:ST8[%1+24]
800B		STRi64 %D9, <fi#0>, 16; mem:ST8[%1+16]
816B		STRi64 %D9, <fi#0>, 8; mem:ST8[%1+8]
832B		STRi64 %D9, <fi#0>, 0; mem:ST8[%1]
848B		%R25<def> = COPY %R23
864B		%R26<def> = COPY %R19
880B		BNONE32 <BB#6>, %STATUS<imp-use>
	    Successors according to CFG: BB#6(?%)

896B	BB#5: derived from LLVM BB %for.cond64.preheader
	    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
	    Predecessors according to CFG: BB#8
912B		%R25<def> = COPY %R22
928B		%R26<def> = COPY %R19
944B		BNONE32 <BB#9>, %STATUS<imp-use>
	    Successors according to CFG: BB#9(?%)

960B	BB#6: derived from LLVM BB %for.body9
	    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
	    Predecessors according to CFG: BB#4 BB#8
1008B		%R27<def> = LSL32ri %R26, 2, %STATUS<imp-def,dead>
1024B		%R27<def> = ADDrr_r32 %R21, %R27<kill>, %STATUS<imp-def,dead>
1056B		%R27<def> = LDRf32 %R27<kill>, 0; mem:Volatile LD4[%add.ptr10](tbaa=!2)
1072B		%R32<def> = COPY %R17
1088B		%R34<def> = COPY %R25
1104B		%R33<def> = COPY %R19
	    Successors according to CFG: BB#7(?%)

1120B	BB#7: derived from LLVM BB %for.body13
	    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26 %R27 %R32 %R33 %R34
	    Predecessors according to CFG: BB#6 BB#7
1184B		%R37<def> = LDRf32 %R34, -8; mem:Volatile LD4[%scevgep8](tbaa=!2)
1200B		%R35<def> = ADDri_r32 %R32, 16, %STATUS<imp-def,dead>
1216B		%R36<def> = ADDri_r32 %R34, 16, %STATUS<imp-def,dead>
1232B		%R38<def> = LDRf32 %R34, -4; mem:Volatile LD4[%scevgep9](tbaa=!2)
1248B		%R33<def> = ADDri_r32 %R33<kill>, 4, %STATUS<imp-def,dead>
1264B		%R39<def> = LDRf32 %R34, 0; mem:Volatile LD4[%lsr.iv5](tbaa=!2)
1280B		%R40<def> = LDRf32 %R34<kill>, 4; mem:Volatile LD4[%scevgep7](tbaa=!2)
1296B		%D21<def> = LDRf64 %R32, -8; mem:LD4[%scevgep17](tbaa=!2) LD4[%scevgep15](tbaa=!2)
1344B		%R34<def> = LDRi32_r32 <fi#2>, 0; mem:LD4[FixedStack2]
1360B		GID %CONFIG<imp-def,dead>
1376B		%CONFIG<def,dead> = MOVTS32_core %R34<kill>
1392B		GIE %CONFIG<imp-def,dead>
1424B		%R43<def,tied1> = FMADDrr_r32 %R43<tied0>, %R27, %R37<kill>, %STATUS<imp-def,dead>, %D21<imp-use,kill>, %D21<imp-def>
1456B		%R42<def,tied1> = FMADDrr_r32 %R42<tied0>, %R27, %R38<kill>, %STATUS<imp-def,dead>, %D21<imp-use,kill>, %D21<imp-def>
1472B		%R44<def> = COPY %R43, %D22<imp-def>
1488B		%R45<def> = COPY %R42, %D21<imp-use,kill>, %D22<imp-use,kill>, %D22<imp-def>
1504B		STRf64 %D22<kill>, %R32, -8; mem:ST4[%scevgep17](tbaa=!2) ST4[%scevgep15](tbaa=!2)
1520B		%R34<def> = LDRf32 %R32, 0; mem:LD4[%lsr.iv1214](tbaa=!2)
1552B		%R34<def,tied1> = FMADDrr_r32 %R34<kill,tied0>, %R27, %R39<kill>, %STATUS<imp-def,dead>
1568B		STRf32 %R34<kill>, %R32, 0; mem:ST4[%lsr.iv1214](tbaa=!2)
1584B		%R37<def> = LDRf32 %R32, 4; mem:LD4[%scevgep16](tbaa=!2)
1616B		%R37<def,tied1> = FMADDrr_r32 %R37<kill,tied0>, %R27, %R40<kill>, %STATUS<imp-def,dead>
1632B		%R34<def,dead> = CMPri_r32 %R33, 8, %STATUS<imp-def>
1648B		STRf32 %R37<kill>, %R32<kill>, 4; mem:ST4[%scevgep16](tbaa=!2)
1664B		%R32<def> = COPY %R35<kill>
1680B		%R34<def> = COPY %R36<kill>
1712B		BCC <BB#7>, 8, %STATUS<imp-use>
1728B		BNONE32 <BB#8>, %STATUS<imp-use>
	    Successors according to CFG: BB#7(0x7c000000 / 0x80000000 = 96.88%) BB#8(0x04000000 / 0x80000000 = 3.12%)

1744B	BB#8: derived from LLVM BB %for.end60
	    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
	    Predecessors according to CFG: BB#7
1760B		%R25<def> = ADDrr_r32 %R25<kill>, %IP, %STATUS<imp-def,dead>
1776B		%R26<def> = ADDri_r32 %R26<kill>, 1, %STATUS<imp-def,dead>
1792B		%R27<def,dead> = CMPrr_r32 %R26, %R3, %STATUS<imp-def>
1840B		BCC <BB#5>, 0, %STATUS<imp-use>
1856B		BNONE32 <BB#6>, %STATUS<imp-use>
	    Successors according to CFG: BB#5(0x04000000 / 0x80000000 = 3.12%) BB#6(0x7c000000 / 0x80000000 = 96.88%)

1872B	BB#9: derived from LLVM BB %for.body66
	    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
	    Predecessors according to CFG: BB#5 BB#9
1920B		%R27<def> = ADDrr_r32 %R16, %R26, %STATUS<imp-def,dead>
1936B		%R33<def> = LDRf32 %R27<kill>, 0; mem:LD4[%sunkaddr30](tbaa=!2)
1952B		%R27<def> = ADDri_r32 %R25, 4, %STATUS<imp-def,dead>
1968B		%R26<def> = ADDri_r32 %R26<kill>, 4, %STATUS<imp-def,dead>
1984B		%R34<def> = LDRf32 %R25, 0; mem:Volatile LD4[%lsr.iv24](tbaa=!2)
2000B		%R32<def> = LDRi32_r32 <fi#2>, 0; mem:LD4[FixedStack2]
2016B		GID %CONFIG<imp-def,dead>
2032B		%CONFIG<def,dead> = MOVTS32_core %R32<kill>
2048B		GIE %CONFIG<imp-def,dead>
2064B		%R33<def> = FADDrr_r32 %R33<kill>, %R34<kill>, %STATUS<imp-def,dead>
2080B		%R32<def,dead> = CMPri_r32 %R26, 32, %STATUS<imp-def>
2096B		STRf32 %R33<kill>, %R25<kill>, 0; mem:Volatile ST4[%lsr.iv24](tbaa=!2)
2112B		%R25<def> = COPY %R27<kill>
2144B		BCC <BB#9>, 1, %STATUS<imp-use>
2160B		BNONE32 <BB#10>, %STATUS<imp-use>
	    Successors according to CFG: BB#10(0x04000000 / 0x80000000 = 3.12%) BB#9(0x7c000000 / 0x80000000 = 96.88%)

2176B	BB#10: derived from LLVM BB %for.end75
	    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
	    Predecessors according to CFG: BB#9
2192B		%R22<def> = ADDri_r32 %R22<kill>, 32, %STATUS<imp-def,dead>
2208B		%R23<def> = ADDri_r32 %R23<kill>, 32, %STATUS<imp-def,dead>
2224B		%R24<def> = ADDri_r32 %R24<kill>, 8, %STATUS<imp-def,dead>
2240B		%R25<def,dead> = CMPrr_r32 %R24, %R3, %STATUS<imp-def>
2304B		BCC <BB#4>, 8, %STATUS<imp-use>
2320B		BNONE32 <BB#11>, %STATUS<imp-use>
	    Successors according to CFG: BB#4(0x7c000000 / 0x80000000 = 96.88%) BB#11(0x04000000 / 0x80000000 = 3.12%)

2336B	BB#11: derived from LLVM BB %for.end78
	    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20
	    Predecessors according to CFG: BB#10
2352B		%R2<def> = ADDrr_r32 %R2<kill>, %IP, %STATUS<imp-def,dead>
2368B		%R20<def> = ADDri_r32 %R20<kill>, 1, %STATUS<imp-def,dead>
2384B		%R21<def,dead> = CMPrr_r32 %R20, %R3, %STATUS<imp-def>
2432B		BCC <BB#3>, 1, %STATUS<imp-use>
2448B		BNONE32 <BB#12>, %STATUS<imp-use>
	    Successors according to CFG: BB#12(0x04000000 / 0x80000000 = 3.12%) BB#3(0x7c000000 / 0x80000000 = 96.88%)

2464B	BB#12: derived from LLVM BB %for.end81
	    Predecessors according to CFG: BB#1 BB#11
2480B		%R0<def> = LDRi32_r32 <fi#1>, 0; mem:LD4[FixedStack1]
2496B		GID
2512B		%CONFIG<def> = MOVTS32_core %R0<kill>
2528B		GIE %CONFIG<imp-use,kill>
2544B		RTS

# End machine code for function matmac.

********** Stack Slot Coloring **********
********** Function: matmac
# *** IR Dump After Stack Slot Coloring ***:
# Machine code for function matmac: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=32, align=8, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=4, align=8, at location [SP]
Function Live Ins: %R0, %R1, %R2, %R3

BB#0: 
    Live Ins: %R0 %R1 %R2 %R3
	GID %CONFIG<imp-def>
	%R19<def> = MOVFS32_core %CONFIG, %D9<imp-def>
	STRi32_r32 %R19, <fi#1>, 0; mem:ST4[FixedStack1]
	%IP<def> = MOVi32ri 65535
	%IP<def,tied1> = MOVTi32ri %IP<kill,tied0>, 65521
	%R18<def> = ANDrr_r32 %R19, %IP<kill>, %STATUS<imp-def>, %D9<imp-use,kill>, %D9<imp-def>
	%R19<def,tied1> = MOVTi32ri %R19<tied0>, 72, %D9<imp-use,kill>, %D9<imp-def>
	STRi64 %D9<kill>, <fi#3>, 0; mem:ST4[FixedStack3] ST4[FixedStack2]
	GIE %CONFIG<imp-use,kill>
    Successors according to CFG: BB#1(?%)

BB#1: derived from LLVM BB %entry
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#0
	%IP<def,dead> = CMPri_r32 %R3, 1, %STATUS<imp-def>
	BCC <BB#12>, 8, %STATUS<imp-use>
	BNONE32 <BB#2>, %STATUS<imp-use>
    Successors according to CFG: BB#2(0x50000000 / 0x80000000 = 62.50%) BB#12(0x30000000 / 0x80000000 = 37.50%)

BB#2: derived from LLVM BB %for.body3.lr.ph.preheader
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#1
	%IP<def> = LSL32ri %R3, 2, %STATUS<imp-def,dead>
	%R1<def> = ADDri_r32 %R1<kill>, 8, %STATUS<imp-def,dead>
	%R16<def> = MOViPTR <fi#0>, 0
	%R17<def> = ADDri_r32 %R16, 8, %STATUS<imp-def,dead>
	%R19<def> = MOVi32ri 0, %D9<imp-def>
	%R20<def> = COPY %R19
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %for.body3.lr.ph
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20
    Predecessors according to CFG: BB#2 BB#11
	%R21<def> = LDRi32_r32 <fi#3>, 0; mem:LD4[FixedStack3]
	GID %CONFIG<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %R21<kill>
	GIE %CONFIG<imp-def,dead>
	%R21<def> = IMULrr_r32 %R20, %R3, %STATUS<imp-def,dead>
	%R21<def> = LSL32ri %R21<kill>, 2, %STATUS<imp-def,dead>
	%R21<def> = ADDrr_r32 %R0, %R21<kill>, %STATUS<imp-def,dead>
	%R22<def> = COPY %R2
	%R23<def> = COPY %R1
	%R24<def> = COPY %R19
    Successors according to CFG: BB#4(?%)

BB#4: derived from LLVM BB %for.body9.preheader
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#3 BB#10
	%R18<def> = COPY %R19, %D9<imp-use,kill>, %D9<imp-def>
	STRi64 %D9, <fi#0>, 24; mem:ST8[%1+24]
	STRi64 %D9, <fi#0>, 16; mem:ST8[%1+16]
	STRi64 %D9, <fi#0>, 8; mem:ST8[%1+8]
	STRi64 %D9, <fi#0>, 0; mem:ST8[%1]
	%R25<def> = COPY %R23
	%R26<def> = COPY %R19
	BNONE32 <BB#6>, %STATUS<imp-use>
    Successors according to CFG: BB#6(?%)

BB#5: derived from LLVM BB %for.cond64.preheader
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#8
	%R25<def> = COPY %R22
	%R26<def> = COPY %R19
	BNONE32 <BB#9>, %STATUS<imp-use>
    Successors according to CFG: BB#9(?%)

BB#6: derived from LLVM BB %for.body9
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#4 BB#8
	%R27<def> = LSL32ri %R26, 2, %STATUS<imp-def,dead>
	%R27<def> = ADDrr_r32 %R21, %R27<kill>, %STATUS<imp-def,dead>
	%R27<def> = LDRf32 %R27<kill>, 0; mem:Volatile LD4[%add.ptr10](tbaa=!2)
	%R32<def> = COPY %R17
	%R34<def> = COPY %R25
	%R33<def> = COPY %R19
    Successors according to CFG: BB#7(?%)

BB#7: derived from LLVM BB %for.body13
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26 %R27 %R32 %R33 %R34
    Predecessors according to CFG: BB#6 BB#7
	%R37<def> = LDRf32 %R34, -8; mem:Volatile LD4[%scevgep8](tbaa=!2)
	%R35<def> = ADDri_r32 %R32, 16, %STATUS<imp-def,dead>
	%R36<def> = ADDri_r32 %R34, 16, %STATUS<imp-def,dead>
	%R38<def> = LDRf32 %R34, -4; mem:Volatile LD4[%scevgep9](tbaa=!2)
	%R33<def> = ADDri_r32 %R33<kill>, 4, %STATUS<imp-def,dead>
	%R39<def> = LDRf32 %R34, 0; mem:Volatile LD4[%lsr.iv5](tbaa=!2)
	%R40<def> = LDRf32 %R34<kill>, 4; mem:Volatile LD4[%scevgep7](tbaa=!2)
	%D21<def> = LDRf64 %R32, -8; mem:LD4[%scevgep17](tbaa=!2) LD4[%scevgep15](tbaa=!2)
	%R34<def> = LDRi32_r32 <fi#2>, 0; mem:LD4[FixedStack2]
	GID %CONFIG<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %R34<kill>
	GIE %CONFIG<imp-def,dead>
	%R43<def,tied1> = FMADDrr_r32 %R43<tied0>, %R27, %R37<kill>, %STATUS<imp-def,dead>, %D21<imp-use,kill>, %D21<imp-def>
	%R42<def,tied1> = FMADDrr_r32 %R42<tied0>, %R27, %R38<kill>, %STATUS<imp-def,dead>, %D21<imp-use,kill>, %D21<imp-def>
	%R44<def> = COPY %R43, %D22<imp-def>
	%R45<def> = COPY %R42, %D21<imp-use,kill>, %D22<imp-use,kill>, %D22<imp-def>
	STRf64 %D22<kill>, %R32, -8; mem:ST4[%scevgep17](tbaa=!2) ST4[%scevgep15](tbaa=!2)
	%R34<def> = LDRf32 %R32, 0; mem:LD4[%lsr.iv1214](tbaa=!2)
	%R34<def,tied1> = FMADDrr_r32 %R34<kill,tied0>, %R27, %R39<kill>, %STATUS<imp-def,dead>
	STRf32 %R34<kill>, %R32, 0; mem:ST4[%lsr.iv1214](tbaa=!2)
	%R37<def> = LDRf32 %R32, 4; mem:LD4[%scevgep16](tbaa=!2)
	%R37<def,tied1> = FMADDrr_r32 %R37<kill,tied0>, %R27, %R40<kill>, %STATUS<imp-def,dead>
	%R34<def,dead> = CMPri_r32 %R33, 8, %STATUS<imp-def>
	STRf32 %R37<kill>, %R32<kill>, 4; mem:ST4[%scevgep16](tbaa=!2)
	%R32<def> = COPY %R35<kill>
	%R34<def> = COPY %R36<kill>
	BCC <BB#7>, 8, %STATUS<imp-use>
	BNONE32 <BB#8>, %STATUS<imp-use>
    Successors according to CFG: BB#7(0x7c000000 / 0x80000000 = 96.88%) BB#8(0x04000000 / 0x80000000 = 3.12%)

BB#8: derived from LLVM BB %for.end60
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#7
	%R25<def> = ADDrr_r32 %R25<kill>, %IP, %STATUS<imp-def,dead>
	%R26<def> = ADDri_r32 %R26<kill>, 1, %STATUS<imp-def,dead>
	%R27<def,dead> = CMPrr_r32 %R26, %R3, %STATUS<imp-def>
	BCC <BB#5>, 0, %STATUS<imp-use>
	BNONE32 <BB#6>, %STATUS<imp-use>
    Successors according to CFG: BB#5(0x04000000 / 0x80000000 = 3.12%) BB#6(0x7c000000 / 0x80000000 = 96.88%)

BB#9: derived from LLVM BB %for.body66
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#5 BB#9
	%R27<def> = ADDrr_r32 %R16, %R26, %STATUS<imp-def,dead>
	%R33<def> = LDRf32 %R27<kill>, 0; mem:LD4[%sunkaddr30](tbaa=!2)
	%R27<def> = ADDri_r32 %R25, 4, %STATUS<imp-def,dead>
	%R26<def> = ADDri_r32 %R26<kill>, 4, %STATUS<imp-def,dead>
	%R34<def> = LDRf32 %R25, 0; mem:Volatile LD4[%lsr.iv24](tbaa=!2)
	%R32<def> = LDRi32_r32 <fi#2>, 0; mem:LD4[FixedStack2]
	GID %CONFIG<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %R32<kill>
	GIE %CONFIG<imp-def,dead>
	%R33<def> = FADDrr_r32 %R33<kill>, %R34<kill>, %STATUS<imp-def,dead>
	%R32<def,dead> = CMPri_r32 %R26, 32, %STATUS<imp-def>
	STRf32 %R33<kill>, %R25<kill>, 0; mem:Volatile ST4[%lsr.iv24](tbaa=!2)
	%R25<def> = COPY %R27<kill>
	BCC <BB#9>, 1, %STATUS<imp-use>
	BNONE32 <BB#10>, %STATUS<imp-use>
    Successors according to CFG: BB#10(0x04000000 / 0x80000000 = 3.12%) BB#9(0x7c000000 / 0x80000000 = 96.88%)

BB#10: derived from LLVM BB %for.end75
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#9
	%R22<def> = ADDri_r32 %R22<kill>, 32, %STATUS<imp-def,dead>
	%R23<def> = ADDri_r32 %R23<kill>, 32, %STATUS<imp-def,dead>
	%R24<def> = ADDri_r32 %R24<kill>, 8, %STATUS<imp-def,dead>
	%R25<def,dead> = CMPrr_r32 %R24, %R3, %STATUS<imp-def>
	BCC <BB#4>, 8, %STATUS<imp-use>
	BNONE32 <BB#11>, %STATUS<imp-use>
    Successors according to CFG: BB#4(0x7c000000 / 0x80000000 = 96.88%) BB#11(0x04000000 / 0x80000000 = 3.12%)

BB#11: derived from LLVM BB %for.end78
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20
    Predecessors according to CFG: BB#10
	%R2<def> = ADDrr_r32 %R2<kill>, %IP, %STATUS<imp-def,dead>
	%R20<def> = ADDri_r32 %R20<kill>, 1, %STATUS<imp-def,dead>
	%R21<def,dead> = CMPrr_r32 %R20, %R3, %STATUS<imp-def>
	BCC <BB#3>, 1, %STATUS<imp-use>
	BNONE32 <BB#12>, %STATUS<imp-use>
    Successors according to CFG: BB#12(0x04000000 / 0x80000000 = 3.12%) BB#3(0x7c000000 / 0x80000000 = 96.88%)

BB#12: derived from LLVM BB %for.end81
    Predecessors according to CFG: BB#1 BB#11
	%R0<def> = LDRi32_r32 <fi#1>, 0; mem:LD4[FixedStack1]
	GID
	%CONFIG<def> = MOVTS32_core %R0<kill>
	GIE %CONFIG<imp-use,kill>
	RTS

# End machine code for function matmac.

# *** IR Dump Before Machine Loop Invariant Code Motion ***:
# Machine code for function matmac: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=32, align=8, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=4, align=8, at location [SP]
Function Live Ins: %R0, %R1, %R2, %R3

BB#0: 
    Live Ins: %R0 %R1 %R2 %R3
	GID %CONFIG<imp-def>
	%R19<def> = MOVFS32_core %CONFIG, %D9<imp-def>
	STRi32_r32 %R19, <fi#1>, 0; mem:ST4[FixedStack1]
	%IP<def> = MOVi32ri 65535
	%IP<def,tied1> = MOVTi32ri %IP<kill,tied0>, 65521
	%R18<def> = ANDrr_r32 %R19, %IP<kill>, %STATUS<imp-def>, %D9<imp-use,kill>, %D9<imp-def>
	%R19<def,tied1> = MOVTi32ri %R19<tied0>, 72, %D9<imp-use,kill>, %D9<imp-def>
	STRi64 %D9<kill>, <fi#3>, 0; mem:ST4[FixedStack3] ST4[FixedStack2]
	GIE %CONFIG<imp-use,kill>
    Successors according to CFG: BB#1(?%)

BB#1: derived from LLVM BB %entry
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#0
	%IP<def,dead> = CMPri_r32 %R3, 1, %STATUS<imp-def>
	BCC <BB#12>, 8, %STATUS<imp-use>
	BNONE32 <BB#2>, %STATUS<imp-use>
    Successors according to CFG: BB#2(0x50000000 / 0x80000000 = 62.50%) BB#12(0x30000000 / 0x80000000 = 37.50%)

BB#2: derived from LLVM BB %for.body3.lr.ph.preheader
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#1
	%IP<def> = LSL32ri %R3, 2, %STATUS<imp-def,dead>
	%R1<def> = ADDri_r32 %R1<kill>, 8, %STATUS<imp-def,dead>
	%R16<def> = MOViPTR <fi#0>, 0
	%R17<def> = ADDri_r32 %R16, 8, %STATUS<imp-def,dead>
	%R19<def> = MOVi32ri 0, %D9<imp-def>
	%R20<def> = COPY %R19
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %for.body3.lr.ph
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20
    Predecessors according to CFG: BB#2 BB#11
	%R21<def> = LDRi32_r32 <fi#3>, 0; mem:LD4[FixedStack3]
	GID %CONFIG<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %R21<kill>
	GIE %CONFIG<imp-def,dead>
	%R21<def> = IMULrr_r32 %R20, %R3, %STATUS<imp-def,dead>
	%R21<def> = LSL32ri %R21<kill>, 2, %STATUS<imp-def,dead>
	%R21<def> = ADDrr_r32 %R0, %R21<kill>, %STATUS<imp-def,dead>
	%R22<def> = COPY %R2
	%R23<def> = COPY %R1
	%R24<def> = COPY %R19
    Successors according to CFG: BB#4(?%)

BB#4: derived from LLVM BB %for.body9.preheader
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#3 BB#10
	%R18<def> = COPY %R19, %D9<imp-use,kill>, %D9<imp-def>
	STRi64 %D9, <fi#0>, 24; mem:ST8[%1+24]
	STRi64 %D9, <fi#0>, 16; mem:ST8[%1+16]
	STRi64 %D9, <fi#0>, 8; mem:ST8[%1+8]
	STRi64 %D9, <fi#0>, 0; mem:ST8[%1]
	%R25<def> = COPY %R23
	%R26<def> = COPY %R19
	BNONE32 <BB#6>, %STATUS<imp-use>
    Successors according to CFG: BB#6(?%)

BB#5: derived from LLVM BB %for.cond64.preheader
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#8
	%R25<def> = COPY %R22
	%R26<def> = COPY %R19
	BNONE32 <BB#9>, %STATUS<imp-use>
    Successors according to CFG: BB#9(?%)

BB#6: derived from LLVM BB %for.body9
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#4 BB#8
	%R27<def> = LSL32ri %R26, 2, %STATUS<imp-def,dead>
	%R27<def> = ADDrr_r32 %R21, %R27<kill>, %STATUS<imp-def,dead>
	%R27<def> = LDRf32 %R27<kill>, 0; mem:Volatile LD4[%add.ptr10](tbaa=!2)
	%R32<def> = COPY %R17
	%R34<def> = COPY %R25
	%R33<def> = COPY %R19
    Successors according to CFG: BB#7(?%)

BB#7: derived from LLVM BB %for.body13
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26 %R27 %R32 %R33 %R34
    Predecessors according to CFG: BB#6 BB#7
	%R37<def> = LDRf32 %R34, -8; mem:Volatile LD4[%scevgep8](tbaa=!2)
	%R35<def> = ADDri_r32 %R32, 16, %STATUS<imp-def,dead>
	%R36<def> = ADDri_r32 %R34, 16, %STATUS<imp-def,dead>
	%R38<def> = LDRf32 %R34, -4; mem:Volatile LD4[%scevgep9](tbaa=!2)
	%R33<def> = ADDri_r32 %R33<kill>, 4, %STATUS<imp-def,dead>
	%R39<def> = LDRf32 %R34, 0; mem:Volatile LD4[%lsr.iv5](tbaa=!2)
	%R40<def> = LDRf32 %R34<kill>, 4; mem:Volatile LD4[%scevgep7](tbaa=!2)
	%D21<def> = LDRf64 %R32, -8; mem:LD4[%scevgep17](tbaa=!2) LD4[%scevgep15](tbaa=!2)
	%R34<def> = LDRi32_r32 <fi#2>, 0; mem:LD4[FixedStack2]
	GID %CONFIG<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %R34<kill>
	GIE %CONFIG<imp-def,dead>
	%R43<def,tied1> = FMADDrr_r32 %R43<tied0>, %R27, %R37<kill>, %STATUS<imp-def,dead>, %D21<imp-use,kill>, %D21<imp-def>
	%R42<def,tied1> = FMADDrr_r32 %R42<tied0>, %R27, %R38<kill>, %STATUS<imp-def,dead>, %D21<imp-use,kill>, %D21<imp-def>
	%R44<def> = COPY %R43, %D22<imp-def>
	%R45<def> = COPY %R42, %D21<imp-use,kill>, %D22<imp-use,kill>, %D22<imp-def>
	STRf64 %D22<kill>, %R32, -8; mem:ST4[%scevgep17](tbaa=!2) ST4[%scevgep15](tbaa=!2)
	%R34<def> = LDRf32 %R32, 0; mem:LD4[%lsr.iv1214](tbaa=!2)
	%R34<def,tied1> = FMADDrr_r32 %R34<kill,tied0>, %R27, %R39<kill>, %STATUS<imp-def,dead>
	STRf32 %R34<kill>, %R32, 0; mem:ST4[%lsr.iv1214](tbaa=!2)
	%R37<def> = LDRf32 %R32, 4; mem:LD4[%scevgep16](tbaa=!2)
	%R37<def,tied1> = FMADDrr_r32 %R37<kill,tied0>, %R27, %R40<kill>, %STATUS<imp-def,dead>
	%R34<def,dead> = CMPri_r32 %R33, 8, %STATUS<imp-def>
	STRf32 %R37<kill>, %R32<kill>, 4; mem:ST4[%scevgep16](tbaa=!2)
	%R32<def> = COPY %R35<kill>
	%R34<def> = COPY %R36<kill>
	BCC <BB#7>, 8, %STATUS<imp-use>
	BNONE32 <BB#8>, %STATUS<imp-use>
    Successors according to CFG: BB#7(0x7c000000 / 0x80000000 = 96.88%) BB#8(0x04000000 / 0x80000000 = 3.12%)

BB#8: derived from LLVM BB %for.end60
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#7
	%R25<def> = ADDrr_r32 %R25<kill>, %IP, %STATUS<imp-def,dead>
	%R26<def> = ADDri_r32 %R26<kill>, 1, %STATUS<imp-def,dead>
	%R27<def,dead> = CMPrr_r32 %R26, %R3, %STATUS<imp-def>
	BCC <BB#5>, 0, %STATUS<imp-use>
	BNONE32 <BB#6>, %STATUS<imp-use>
    Successors according to CFG: BB#5(0x04000000 / 0x80000000 = 3.12%) BB#6(0x7c000000 / 0x80000000 = 96.88%)

BB#9: derived from LLVM BB %for.body66
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#5 BB#9
	%R27<def> = ADDrr_r32 %R16, %R26, %STATUS<imp-def,dead>
	%R33<def> = LDRf32 %R27<kill>, 0; mem:LD4[%sunkaddr30](tbaa=!2)
	%R27<def> = ADDri_r32 %R25, 4, %STATUS<imp-def,dead>
	%R26<def> = ADDri_r32 %R26<kill>, 4, %STATUS<imp-def,dead>
	%R34<def> = LDRf32 %R25, 0; mem:Volatile LD4[%lsr.iv24](tbaa=!2)
	%R32<def> = LDRi32_r32 <fi#2>, 0; mem:LD4[FixedStack2]
	GID %CONFIG<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %R32<kill>
	GIE %CONFIG<imp-def,dead>
	%R33<def> = FADDrr_r32 %R33<kill>, %R34<kill>, %STATUS<imp-def,dead>
	%R32<def,dead> = CMPri_r32 %R26, 32, %STATUS<imp-def>
	STRf32 %R33<kill>, %R25<kill>, 0; mem:Volatile ST4[%lsr.iv24](tbaa=!2)
	%R25<def> = COPY %R27<kill>
	BCC <BB#9>, 1, %STATUS<imp-use>
	BNONE32 <BB#10>, %STATUS<imp-use>
    Successors according to CFG: BB#10(0x04000000 / 0x80000000 = 3.12%) BB#9(0x7c000000 / 0x80000000 = 96.88%)

BB#10: derived from LLVM BB %for.end75
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#9
	%R22<def> = ADDri_r32 %R22<kill>, 32, %STATUS<imp-def,dead>
	%R23<def> = ADDri_r32 %R23<kill>, 32, %STATUS<imp-def,dead>
	%R24<def> = ADDri_r32 %R24<kill>, 8, %STATUS<imp-def,dead>
	%R25<def,dead> = CMPrr_r32 %R24, %R3, %STATUS<imp-def>
	BCC <BB#4>, 8, %STATUS<imp-use>
	BNONE32 <BB#11>, %STATUS<imp-use>
    Successors according to CFG: BB#4(0x7c000000 / 0x80000000 = 96.88%) BB#11(0x04000000 / 0x80000000 = 3.12%)

BB#11: derived from LLVM BB %for.end78
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20
    Predecessors according to CFG: BB#10
	%R2<def> = ADDrr_r32 %R2<kill>, %IP, %STATUS<imp-def,dead>
	%R20<def> = ADDri_r32 %R20<kill>, 1, %STATUS<imp-def,dead>
	%R21<def,dead> = CMPrr_r32 %R20, %R3, %STATUS<imp-def>
	BCC <BB#3>, 1, %STATUS<imp-use>
	BNONE32 <BB#12>, %STATUS<imp-use>
    Successors according to CFG: BB#12(0x04000000 / 0x80000000 = 3.12%) BB#3(0x7c000000 / 0x80000000 = 96.88%)

BB#12: derived from LLVM BB %for.end81
    Predecessors according to CFG: BB#1 BB#11
	%R0<def> = LDRi32_r32 <fi#1>, 0; mem:LD4[FixedStack1]
	GID
	%CONFIG<def> = MOVTS32_core %R0<kill>
	GIE %CONFIG<imp-use,kill>
	RTS

# End machine code for function matmac.

******** Post-regalloc Machine LICM: matmac ********

isLoadToStackSlot for %R21<def> = LDRi32_r32 <fi#3>, 0; mem:LD4[FixedStack3]

Found load op for %R21<def> = LDRi32_r32 <fi#3>, 0; mem:LD4[FixedStack3]

isLoadToStackSlot for %R22<def> = COPY %R2

isLoadToStackSlot for %R23<def> = COPY %R1

isLoadToStackSlot for %R24<def> = COPY %R19

isLoadToStackSlot for %R25<def> = COPY %R23

isLoadToStackSlot for %R26<def> = COPY %R19

isLoadToStackSlot for %R27<def> = LSL32ri %R26, 2, %STATUS<imp-def,dead>

isLoadToStackSlot for %R32<def> = COPY %R17

isLoadToStackSlot for %R34<def> = COPY %R25

isLoadToStackSlot for %R33<def> = COPY %R19

isLoadToStackSlot for %R37<def> = LDRf32 %R34, -8; mem:Volatile LD4[%scevgep8](tbaa=!2)

isLoadToStackSlot for %R35<def> = ADDri_r32 %R32, 16, %STATUS<imp-def,dead>

isLoadToStackSlot for %R36<def> = ADDri_r32 %R34, 16, %STATUS<imp-def,dead>

isLoadToStackSlot for %R38<def> = LDRf32 %R34, -4; mem:Volatile LD4[%scevgep9](tbaa=!2)

isLoadToStackSlot for %R39<def> = LDRf32 %R34, 0; mem:Volatile LD4[%lsr.iv5](tbaa=!2)

isLoadToStackSlot for %R40<def> = LDRf32 %R34<kill>, 4; mem:Volatile LD4[%scevgep7](tbaa=!2)
# *** IR Dump After Machine Loop Invariant Code Motion ***:
# Machine code for function matmac: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=32, align=8, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=4, align=8, at location [SP]
Function Live Ins: %R0, %R1, %R2, %R3

BB#0: 
    Live Ins: %R0 %R1 %R2 %R3
	GID %CONFIG<imp-def>
	%R19<def> = MOVFS32_core %CONFIG, %D9<imp-def>
	STRi32_r32 %R19, <fi#1>, 0; mem:ST4[FixedStack1]
	%IP<def> = MOVi32ri 65535
	%IP<def,tied1> = MOVTi32ri %IP<kill,tied0>, 65521
	%R18<def> = ANDrr_r32 %R19, %IP<kill>, %STATUS<imp-def>, %D9<imp-use,kill>, %D9<imp-def>
	%R19<def,tied1> = MOVTi32ri %R19<tied0>, 72, %D9<imp-use,kill>, %D9<imp-def>
	STRi64 %D9<kill>, <fi#3>, 0; mem:ST4[FixedStack3] ST4[FixedStack2]
	GIE %CONFIG<imp-use,kill>
    Successors according to CFG: BB#1(?%)

BB#1: derived from LLVM BB %entry
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#0
	%IP<def,dead> = CMPri_r32 %R3, 1, %STATUS<imp-def>
	BCC <BB#12>, 8, %STATUS<imp-use>
	BNONE32 <BB#2>, %STATUS<imp-use>
    Successors according to CFG: BB#2(0x50000000 / 0x80000000 = 62.50%) BB#12(0x30000000 / 0x80000000 = 37.50%)

BB#2: derived from LLVM BB %for.body3.lr.ph.preheader
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#1
	%IP<def> = LSL32ri %R3, 2, %STATUS<imp-def,dead>
	%R1<def> = ADDri_r32 %R1<kill>, 8, %STATUS<imp-def,dead>
	%R16<def> = MOViPTR <fi#0>, 0
	%R17<def> = ADDri_r32 %R16, 8, %STATUS<imp-def,dead>
	%R19<def> = MOVi32ri 0, %D9<imp-def>
	%R20<def> = COPY %R19
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %for.body3.lr.ph
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20
    Predecessors according to CFG: BB#2 BB#11
	%R21<def> = LDRi32_r32 <fi#3>, 0; mem:LD4[FixedStack3]
	GID %CONFIG<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %R21<kill>
	GIE %CONFIG<imp-def,dead>
	%R21<def> = IMULrr_r32 %R20, %R3, %STATUS<imp-def,dead>
	%R21<def> = LSL32ri %R21<kill>, 2, %STATUS<imp-def,dead>
	%R21<def> = ADDrr_r32 %R0, %R21<kill>, %STATUS<imp-def,dead>
	%R22<def> = COPY %R2
	%R23<def> = COPY %R1
	%R24<def> = COPY %R19
    Successors according to CFG: BB#4(?%)

BB#4: derived from LLVM BB %for.body9.preheader
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#3 BB#10
	%R18<def> = COPY %R19, %D9<imp-use,kill>, %D9<imp-def>
	STRi64 %D9, <fi#0>, 24; mem:ST8[%1+24]
	STRi64 %D9, <fi#0>, 16; mem:ST8[%1+16]
	STRi64 %D9, <fi#0>, 8; mem:ST8[%1+8]
	STRi64 %D9, <fi#0>, 0; mem:ST8[%1]
	%R25<def> = COPY %R23
	%R26<def> = COPY %R19
	BNONE32 <BB#6>, %STATUS<imp-use>
    Successors according to CFG: BB#6(?%)

BB#5: derived from LLVM BB %for.cond64.preheader
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#8
	%R25<def> = COPY %R22
	%R26<def> = COPY %R19
	BNONE32 <BB#9>, %STATUS<imp-use>
    Successors according to CFG: BB#9(?%)

BB#6: derived from LLVM BB %for.body9
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#4 BB#8
	%R27<def> = LSL32ri %R26, 2, %STATUS<imp-def,dead>
	%R27<def> = ADDrr_r32 %R21, %R27<kill>, %STATUS<imp-def,dead>
	%R27<def> = LDRf32 %R27<kill>, 0; mem:Volatile LD4[%add.ptr10](tbaa=!2)
	%R32<def> = COPY %R17
	%R34<def> = COPY %R25
	%R33<def> = COPY %R19
    Successors according to CFG: BB#7(?%)

BB#7: derived from LLVM BB %for.body13
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26 %R27 %R32 %R33 %R34
    Predecessors according to CFG: BB#6 BB#7
	%R37<def> = LDRf32 %R34, -8; mem:Volatile LD4[%scevgep8](tbaa=!2)
	%R35<def> = ADDri_r32 %R32, 16, %STATUS<imp-def,dead>
	%R36<def> = ADDri_r32 %R34, 16, %STATUS<imp-def,dead>
	%R38<def> = LDRf32 %R34, -4; mem:Volatile LD4[%scevgep9](tbaa=!2)
	%R33<def> = ADDri_r32 %R33<kill>, 4, %STATUS<imp-def,dead>
	%R39<def> = LDRf32 %R34, 0; mem:Volatile LD4[%lsr.iv5](tbaa=!2)
	%R40<def> = LDRf32 %R34<kill>, 4; mem:Volatile LD4[%scevgep7](tbaa=!2)
	%D21<def> = LDRf64 %R32, -8; mem:LD4[%scevgep17](tbaa=!2) LD4[%scevgep15](tbaa=!2)
	%R34<def> = LDRi32_r32 <fi#2>, 0; mem:LD4[FixedStack2]
	GID %CONFIG<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %R34<kill>
	GIE %CONFIG<imp-def,dead>
	%R43<def,tied1> = FMADDrr_r32 %R43<tied0>, %R27, %R37<kill>, %STATUS<imp-def,dead>, %D21<imp-use,kill>, %D21<imp-def>
	%R42<def,tied1> = FMADDrr_r32 %R42<tied0>, %R27, %R38<kill>, %STATUS<imp-def,dead>, %D21<imp-use,kill>, %D21<imp-def>
	%R44<def> = COPY %R43, %D22<imp-def>
	%R45<def> = COPY %R42, %D21<imp-use,kill>, %D22<imp-use,kill>, %D22<imp-def>
	STRf64 %D22<kill>, %R32, -8; mem:ST4[%scevgep17](tbaa=!2) ST4[%scevgep15](tbaa=!2)
	%R34<def> = LDRf32 %R32, 0; mem:LD4[%lsr.iv1214](tbaa=!2)
	%R34<def,tied1> = FMADDrr_r32 %R34<kill,tied0>, %R27, %R39<kill>, %STATUS<imp-def,dead>
	STRf32 %R34<kill>, %R32, 0; mem:ST4[%lsr.iv1214](tbaa=!2)
	%R37<def> = LDRf32 %R32, 4; mem:LD4[%scevgep16](tbaa=!2)
	%R37<def,tied1> = FMADDrr_r32 %R37<kill,tied0>, %R27, %R40<kill>, %STATUS<imp-def,dead>
	%R34<def,dead> = CMPri_r32 %R33, 8, %STATUS<imp-def>
	STRf32 %R37<kill>, %R32<kill>, 4; mem:ST4[%scevgep16](tbaa=!2)
	%R32<def> = COPY %R35<kill>
	%R34<def> = COPY %R36<kill>
	BCC <BB#7>, 8, %STATUS<imp-use>
	BNONE32 <BB#8>, %STATUS<imp-use>
    Successors according to CFG: BB#7(0x7c000000 / 0x80000000 = 96.88%) BB#8(0x04000000 / 0x80000000 = 3.12%)

BB#8: derived from LLVM BB %for.end60
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#7
	%R25<def> = ADDrr_r32 %R25<kill>, %IP, %STATUS<imp-def,dead>
	%R26<def> = ADDri_r32 %R26<kill>, 1, %STATUS<imp-def,dead>
	%R27<def,dead> = CMPrr_r32 %R26, %R3, %STATUS<imp-def>
	BCC <BB#5>, 0, %STATUS<imp-use>
	BNONE32 <BB#6>, %STATUS<imp-use>
    Successors according to CFG: BB#5(0x04000000 / 0x80000000 = 3.12%) BB#6(0x7c000000 / 0x80000000 = 96.88%)

BB#9: derived from LLVM BB %for.body66
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#5 BB#9
	%R27<def> = ADDrr_r32 %R16, %R26, %STATUS<imp-def,dead>
	%R33<def> = LDRf32 %R27<kill>, 0; mem:LD4[%sunkaddr30](tbaa=!2)
	%R27<def> = ADDri_r32 %R25, 4, %STATUS<imp-def,dead>
	%R26<def> = ADDri_r32 %R26<kill>, 4, %STATUS<imp-def,dead>
	%R34<def> = LDRf32 %R25, 0; mem:Volatile LD4[%lsr.iv24](tbaa=!2)
	%R32<def> = LDRi32_r32 <fi#2>, 0; mem:LD4[FixedStack2]
	GID %CONFIG<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %R32<kill>
	GIE %CONFIG<imp-def,dead>
	%R33<def> = FADDrr_r32 %R33<kill>, %R34<kill>, %STATUS<imp-def,dead>
	%R32<def,dead> = CMPri_r32 %R26, 32, %STATUS<imp-def>
	STRf32 %R33<kill>, %R25<kill>, 0; mem:Volatile ST4[%lsr.iv24](tbaa=!2)
	%R25<def> = COPY %R27<kill>
	BCC <BB#9>, 1, %STATUS<imp-use>
	BNONE32 <BB#10>, %STATUS<imp-use>
    Successors according to CFG: BB#10(0x04000000 / 0x80000000 = 3.12%) BB#9(0x7c000000 / 0x80000000 = 96.88%)

BB#10: derived from LLVM BB %for.end75
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#9
	%R22<def> = ADDri_r32 %R22<kill>, 32, %STATUS<imp-def,dead>
	%R23<def> = ADDri_r32 %R23<kill>, 32, %STATUS<imp-def,dead>
	%R24<def> = ADDri_r32 %R24<kill>, 8, %STATUS<imp-def,dead>
	%R25<def,dead> = CMPrr_r32 %R24, %R3, %STATUS<imp-def>
	BCC <BB#4>, 8, %STATUS<imp-use>
	BNONE32 <BB#11>, %STATUS<imp-use>
    Successors according to CFG: BB#4(0x7c000000 / 0x80000000 = 96.88%) BB#11(0x04000000 / 0x80000000 = 3.12%)

BB#11: derived from LLVM BB %for.end78
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20
    Predecessors according to CFG: BB#10
	%R2<def> = ADDrr_r32 %R2<kill>, %IP, %STATUS<imp-def,dead>
	%R20<def> = ADDri_r32 %R20<kill>, 1, %STATUS<imp-def,dead>
	%R21<def,dead> = CMPrr_r32 %R20, %R3, %STATUS<imp-def>
	BCC <BB#3>, 1, %STATUS<imp-use>
	BNONE32 <BB#12>, %STATUS<imp-use>
    Successors according to CFG: BB#12(0x04000000 / 0x80000000 = 3.12%) BB#3(0x7c000000 / 0x80000000 = 96.88%)

BB#12: derived from LLVM BB %for.end81
    Predecessors according to CFG: BB#1 BB#11
	%R0<def> = LDRi32_r32 <fi#1>, 0; mem:LD4[FixedStack1]
	GID
	%CONFIG<def> = MOVTS32_core %R0<kill>
	GIE %CONFIG<imp-use,kill>
	RTS

# End machine code for function matmac.


block-frequency: matmac
=======================
reverse-post-order-traversal
 - 0: BB0
 - 1: BB1[entry]
 - 2: BB2[for.body3.lr.ph.preheader]
 - 3: BB3[for.body3.lr.ph]
 - 4: BB4[for.body9.preheader]
 - 5: BB6[for.body9]
 - 6: BB7[for.body13]
 - 7: BB8[for.end60]
 - 8: BB5[for.cond64.preheader]
 - 9: BB9[for.body66]
 - 10: BB10[for.end75]
 - 11: BB11[for.end78]
 - 12: BB12[for.end81]
loop-detection
 - loop = BB3[for.body3.lr.ph]
 - loop = BB4[for.body9.preheader]
 - loop = BB6[for.body9]
 - loop = BB9[for.body66]
 - loop = BB7[for.body13]
 - loop = BB6[for.body9]: member = BB8[for.end60]
 - loop = BB4[for.body9.preheader]: member = BB5[for.cond64.preheader]
 - loop = BB4[for.body9.preheader]: member = BB10[for.end75]
 - loop = BB3[for.body3.lr.ph]: member = BB11[for.end78]
compute-mass-in-loop: BB7[for.body13]*
 - node: BB7[for.body13]
  => [backedge] weight = 2080374784
  => [  exit  ] weight = 67108864, succ = BB8[for.end60]
  => mass:  ffffffffffffffff
  => assign f7ffffffffffffff (0800000000000000) [back] to BB7[for.body13]
  => assign 0800000000000000 (0000000000000000) [exit] to BB8[for.end60]
compute-loop-scale: BB7[for.body13]*
 - exit-mass = 0800000000000000 (ffffffffffffffff - f7ffffffffffffff)
 - scale = 32.0
packaging-loop: BB7[for.body13]*
 - node: BB7[for.body13]
compute-mass-in-loop: BB9[for.body66]*
 - node: BB9[for.body66]
  => [  exit  ] weight = 67108864, succ = BB10[for.end75]
  => [backedge] weight = 2080374784
  => mass:  ffffffffffffffff
  => assign f7ffffffffffffff (0800000000000000) [back] to BB9[for.body66]
  => assign 0800000000000000 (0000000000000000) [exit] to BB10[for.end75]
compute-loop-scale: BB9[for.body66]*
 - exit-mass = 0800000000000000 (ffffffffffffffff - f7ffffffffffffff)
 - scale = 32.0
packaging-loop: BB9[for.body66]*
 - node: BB9[for.body66]
compute-mass-in-loop: BB6[for.body9]*
 - node: BB6[for.body9]
  => [ local  ] weight = 2147483648, succ = BB7[for.body13]
  => mass:  ffffffffffffffff
  => assign ffffffffffffffff (0000000000000000) to BB7[for.body13]
 - node: BB7[for.body13]
  => [ local  ] weight = 576460752303423488, succ = BB8[for.end60]
  => mass:  ffffffffffffffff
  => assign ffffffffffffffff (0000000000000000) to BB8[for.end60]
 - node: BB8[for.end60]
  => [  exit  ] weight = 67108864, succ = BB5[for.cond64.preheader]
  => [backedge] weight = 2080374784
  => mass:  ffffffffffffffff
  => assign f7ffffffffffffff (0800000000000000) [back] to BB6[for.body9]
  => assign 0800000000000000 (0000000000000000) [exit] to BB5[for.cond64.preheader]
compute-loop-scale: BB6[for.body9]*
 - exit-mass = 0800000000000000 (ffffffffffffffff - f7ffffffffffffff)
 - scale = 32.0
packaging-loop: BB6[for.body9]*
 - node: BB6[for.body9]
 - node: BB7[for.body13]
 - node: BB8[for.end60]
compute-mass-in-loop: BB4[for.body9.preheader]*
 - node: BB4[for.body9.preheader]
  => [ local  ] weight = 2147483648, succ = BB6[for.body9]
  => mass:  ffffffffffffffff
  => assign ffffffffffffffff (0000000000000000) to BB6[for.body9]
 - node: BB6[for.body9]
  => [ local  ] weight = 576460752303423488, succ = BB5[for.cond64.preheader]
  => mass:  ffffffffffffffff
  => assign ffffffffffffffff (0000000000000000) to BB5[for.cond64.preheader]
 - node: BB5[for.cond64.preheader]
  => [ local  ] weight = 2147483648, succ = BB9[for.body66]
  => mass:  ffffffffffffffff
  => assign ffffffffffffffff (0000000000000000) to BB9[for.body66]
 - node: BB9[for.body66]
  => [ local  ] weight = 576460752303423488, succ = BB10[for.end75]
  => mass:  ffffffffffffffff
  => assign ffffffffffffffff (0000000000000000) to BB10[for.end75]
 - node: BB10[for.end75]
  => [backedge] weight = 2080374784
  => [  exit  ] weight = 67108864, succ = BB11[for.end78]
  => mass:  ffffffffffffffff
  => assign f7ffffffffffffff (0800000000000000) [back] to BB4[for.body9.preheader]
  => assign 0800000000000000 (0000000000000000) [exit] to BB11[for.end78]
compute-loop-scale: BB4[for.body9.preheader]*
 - exit-mass = 0800000000000000 (ffffffffffffffff - f7ffffffffffffff)
 - scale = 32.0
packaging-loop: BB4[for.body9.preheader]*
 - node: BB4[for.body9.preheader]
 - node: BB6[for.body9]
 - node: BB5[for.cond64.preheader]
 - node: BB9[for.body66]
 - node: BB10[for.end75]
compute-mass-in-loop: BB3[for.body3.lr.ph]*
 - node: BB3[for.body3.lr.ph]
  => [ local  ] weight = 2147483648, succ = BB4[for.body9.preheader]
  => mass:  ffffffffffffffff
  => assign ffffffffffffffff (0000000000000000) to BB4[for.body9.preheader]
 - node: BB4[for.body9.preheader]
  => [ local  ] weight = 576460752303423488, succ = BB11[for.end78]
  => mass:  ffffffffffffffff
  => assign ffffffffffffffff (0000000000000000) to BB11[for.end78]
 - node: BB11[for.end78]
  => [  exit  ] weight = 67108864, succ = BB12[for.end81]
  => [backedge] weight = 2080374784
  => mass:  ffffffffffffffff
  => assign f7ffffffffffffff (0800000000000000) [back] to BB3[for.body3.lr.ph]
  => assign 0800000000000000 (0000000000000000) [exit] to BB12[for.end81]
compute-loop-scale: BB3[for.body3.lr.ph]*
 - exit-mass = 0800000000000000 (ffffffffffffffff - f7ffffffffffffff)
 - scale = 32.0
packaging-loop: BB3[for.body3.lr.ph]*
 - node: BB3[for.body3.lr.ph]
 - node: BB4[for.body9.preheader]
 - node: BB11[for.end78]
compute-mass-in-function
 - node: BB0
  => [ local  ] weight = 2147483648, succ = BB1[entry]
  => mass:  ffffffffffffffff
  => assign ffffffffffffffff (0000000000000000) to BB1[entry]
 - node: BB1[entry]
  => [ local  ] weight = 1342177280, succ = BB2[for.body3.lr.ph.preheader]
  => [ local  ] weight = 805306368, succ = BB12[for.end81]
  => mass:  ffffffffffffffff
  => assign 9fffffffffffffff (6000000000000000) to BB2[for.body3.lr.ph.preheader]
  => assign 6000000000000000 (0000000000000000) to BB12[for.end81]
 - node: BB2[for.body3.lr.ph.preheader]
  => [ local  ] weight = 2147483648, succ = BB3[for.body3.lr.ph]
  => mass:  9fffffffffffffff
  => assign 9fffffffffffffff (0000000000000000) to BB3[for.body3.lr.ph]
 - node: BB3[for.body3.lr.ph]
  => [ local  ] weight = 576460752303423488, succ = BB12[for.end81]
  => mass:  9fffffffffffffff
  => assign 9fffffffffffffff (0000000000000000) to BB12[for.end81]
 - node: BB12[for.end81]
  => mass:  ffffffffffffffff
unwrap-loop-package: BB3[for.body3.lr.ph]*: mass = 9fffffffffffffff, scale = 32.0
  => combined-scale = 20.0
 - BB3[for.body3.lr.ph]: 1.0 => 20.0
 - BB4[for.body9.preheader]: 32.0 => 640.0
 - BB11[for.end78]: 1.0 => 20.0
unwrap-loop-package: BB4[for.body9.preheader]*: mass = ffffffffffffffff, scale = 640.0
  => combined-scale = 640.0
 - BB4[for.body9.preheader]: 1.0 => 640.0
 - BB6[for.body9]: 32.0 => 20480.0
 - BB5[for.cond64.preheader]: 1.0 => 640.0
 - BB9[for.body66]: 32.0 => 20480.0
 - BB10[for.end75]: 1.0 => 640.0
unwrap-loop-package: BB6[for.body9]*: mass = ffffffffffffffff, scale = 20480.0
  => combined-scale = 20480.0
 - BB6[for.body9]: 1.0 => 20480.0
 - BB7[for.body13]: 32.0 => 655360.0
 - BB8[for.end60]: 1.0 => 20480.0
unwrap-loop-package: BB9[for.body66]*: mass = ffffffffffffffff, scale = 20480.0
  => combined-scale = 20480.0
 - BB9[for.body66]: 1.0 => 20480.0
unwrap-loop-package: BB7[for.body13]*: mass = ffffffffffffffff, scale = 655360.0
  => combined-scale = 655360.0
 - BB7[for.body13]: 1.0 => 655360.0
float-to-int: min = 0.625, max = 655360.0, factor = 12.8
 - BB0: float = 1.0, scaled = 12.8, int = 12
 - BB1[entry]: float = 1.0, scaled = 12.8, int = 12
 - BB2[for.body3.lr.ph.preheader]: float = 0.625, scaled = 8.0, int = 8
 - BB3[for.body3.lr.ph]: float = 20.0, scaled = 256.0, int = 255
 - BB4[for.body9.preheader]: float = 640.0, scaled = 8192.0, int = 8191
 - BB6[for.body9]: float = 20480.0, scaled = 262144.0, int = 262143
 - BB7[for.body13]: float = 655360.0, scaled = 8388608.0, int = 8388607
 - BB8[for.end60]: float = 20480.0, scaled = 262144.0, int = 262143
 - BB5[for.cond64.preheader]: float = 640.0, scaled = 8192.0, int = 8191
 - BB9[for.body66]: float = 20480.0, scaled = 262144.0, int = 262143
 - BB10[for.end75]: float = 640.0, scaled = 8192.0, int = 8191
 - BB11[for.end78]: float = 20.0, scaled = 256.0, int = 255
 - BB12[for.end81]: float = 1.0, scaled = 12.8, int = 12
block-frequency-info: matmac
 - BB0: float = 1.0, int = 12
 - BB1[entry]: float = 1.0, int = 12
 - BB2[for.body3.lr.ph.preheader]: float = 0.625, int = 8
 - BB3[for.body3.lr.ph]: float = 20.0, int = 255
 - BB4[for.body9.preheader]: float = 640.0, int = 8191
 - BB5[for.cond64.preheader]: float = 640.0, int = 8191
 - BB6[for.body9]: float = 20480.0, int = 262143
 - BB7[for.body13]: float = 655360.0, int = 8388607
 - BB8[for.end60]: float = 20480.0, int = 262143
 - BB9[for.body66]: float = 20480.0, int = 262143
 - BB10[for.end75]: float = 640.0, int = 8191
 - BB11[for.end78]: float = 20.0, int = 255
 - BB12[for.end81]: float = 1.0, int = 12

# *** IR Dump Before Shrink Wrapping analysis ***:
# Machine code for function matmac: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=32, align=8, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=4, align=8, at location [SP]
Function Live Ins: %R0, %R1, %R2, %R3

BB#0: 
    Live Ins: %R0 %R1 %R2 %R3
	GID %CONFIG<imp-def>
	%R19<def> = MOVFS32_core %CONFIG, %D9<imp-def>
	STRi32_r32 %R19, <fi#1>, 0; mem:ST4[FixedStack1]
	%IP<def> = MOVi32ri 65535
	%IP<def,tied1> = MOVTi32ri %IP<kill,tied0>, 65521
	%R18<def> = ANDrr_r32 %R19, %IP<kill>, %STATUS<imp-def>, %D9<imp-use,kill>, %D9<imp-def>
	%R19<def,tied1> = MOVTi32ri %R19<tied0>, 72, %D9<imp-use,kill>, %D9<imp-def>
	STRi64 %D9<kill>, <fi#3>, 0; mem:ST4[FixedStack3] ST4[FixedStack2]
	GIE %CONFIG<imp-use,kill>
    Successors according to CFG: BB#1(?%)

BB#1: derived from LLVM BB %entry
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#0
	%IP<def,dead> = CMPri_r32 %R3, 1, %STATUS<imp-def>
	BCC <BB#12>, 8, %STATUS<imp-use>
	BNONE32 <BB#2>, %STATUS<imp-use>
    Successors according to CFG: BB#2(0x50000000 / 0x80000000 = 62.50%) BB#12(0x30000000 / 0x80000000 = 37.50%)

BB#2: derived from LLVM BB %for.body3.lr.ph.preheader
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#1
	%IP<def> = LSL32ri %R3, 2, %STATUS<imp-def,dead>
	%R1<def> = ADDri_r32 %R1<kill>, 8, %STATUS<imp-def,dead>
	%R16<def> = MOViPTR <fi#0>, 0
	%R17<def> = ADDri_r32 %R16, 8, %STATUS<imp-def,dead>
	%R19<def> = MOVi32ri 0, %D9<imp-def>
	%R20<def> = COPY %R19
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %for.body3.lr.ph
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20
    Predecessors according to CFG: BB#2 BB#11
	%R21<def> = LDRi32_r32 <fi#3>, 0; mem:LD4[FixedStack3]
	GID %CONFIG<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %R21<kill>
	GIE %CONFIG<imp-def,dead>
	%R21<def> = IMULrr_r32 %R20, %R3, %STATUS<imp-def,dead>
	%R21<def> = LSL32ri %R21<kill>, 2, %STATUS<imp-def,dead>
	%R21<def> = ADDrr_r32 %R0, %R21<kill>, %STATUS<imp-def,dead>
	%R22<def> = COPY %R2
	%R23<def> = COPY %R1
	%R24<def> = COPY %R19
    Successors according to CFG: BB#4(?%)

BB#4: derived from LLVM BB %for.body9.preheader
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#3 BB#10
	%R18<def> = COPY %R19, %D9<imp-use,kill>, %D9<imp-def>
	STRi64 %D9, <fi#0>, 24; mem:ST8[%1+24]
	STRi64 %D9, <fi#0>, 16; mem:ST8[%1+16]
	STRi64 %D9, <fi#0>, 8; mem:ST8[%1+8]
	STRi64 %D9, <fi#0>, 0; mem:ST8[%1]
	%R25<def> = COPY %R23
	%R26<def> = COPY %R19
	BNONE32 <BB#6>, %STATUS<imp-use>
    Successors according to CFG: BB#6(?%)

BB#5: derived from LLVM BB %for.cond64.preheader
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#8
	%R25<def> = COPY %R22
	%R26<def> = COPY %R19
	BNONE32 <BB#9>, %STATUS<imp-use>
    Successors according to CFG: BB#9(?%)

BB#6: derived from LLVM BB %for.body9
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#4 BB#8
	%R27<def> = LSL32ri %R26, 2, %STATUS<imp-def,dead>
	%R27<def> = ADDrr_r32 %R21, %R27<kill>, %STATUS<imp-def,dead>
	%R27<def> = LDRf32 %R27<kill>, 0; mem:Volatile LD4[%add.ptr10](tbaa=!2)
	%R32<def> = COPY %R17
	%R34<def> = COPY %R25
	%R33<def> = COPY %R19
    Successors according to CFG: BB#7(?%)

BB#7: derived from LLVM BB %for.body13
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26 %R27 %R32 %R33 %R34
    Predecessors according to CFG: BB#6 BB#7
	%R37<def> = LDRf32 %R34, -8; mem:Volatile LD4[%scevgep8](tbaa=!2)
	%R35<def> = ADDri_r32 %R32, 16, %STATUS<imp-def,dead>
	%R36<def> = ADDri_r32 %R34, 16, %STATUS<imp-def,dead>
	%R38<def> = LDRf32 %R34, -4; mem:Volatile LD4[%scevgep9](tbaa=!2)
	%R33<def> = ADDri_r32 %R33<kill>, 4, %STATUS<imp-def,dead>
	%R39<def> = LDRf32 %R34, 0; mem:Volatile LD4[%lsr.iv5](tbaa=!2)
	%R40<def> = LDRf32 %R34<kill>, 4; mem:Volatile LD4[%scevgep7](tbaa=!2)
	%D21<def> = LDRf64 %R32, -8; mem:LD4[%scevgep17](tbaa=!2) LD4[%scevgep15](tbaa=!2)
	%R34<def> = LDRi32_r32 <fi#2>, 0; mem:LD4[FixedStack2]
	GID %CONFIG<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %R34<kill>
	GIE %CONFIG<imp-def,dead>
	%R43<def,tied1> = FMADDrr_r32 %R43<tied0>, %R27, %R37<kill>, %STATUS<imp-def,dead>, %D21<imp-use,kill>, %D21<imp-def>
	%R42<def,tied1> = FMADDrr_r32 %R42<tied0>, %R27, %R38<kill>, %STATUS<imp-def,dead>, %D21<imp-use,kill>, %D21<imp-def>
	%R44<def> = COPY %R43, %D22<imp-def>
	%R45<def> = COPY %R42, %D21<imp-use,kill>, %D22<imp-use,kill>, %D22<imp-def>
	STRf64 %D22<kill>, %R32, -8; mem:ST4[%scevgep17](tbaa=!2) ST4[%scevgep15](tbaa=!2)
	%R34<def> = LDRf32 %R32, 0; mem:LD4[%lsr.iv1214](tbaa=!2)
	%R34<def,tied1> = FMADDrr_r32 %R34<kill,tied0>, %R27, %R39<kill>, %STATUS<imp-def,dead>
	STRf32 %R34<kill>, %R32, 0; mem:ST4[%lsr.iv1214](tbaa=!2)
	%R37<def> = LDRf32 %R32, 4; mem:LD4[%scevgep16](tbaa=!2)
	%R37<def,tied1> = FMADDrr_r32 %R37<kill,tied0>, %R27, %R40<kill>, %STATUS<imp-def,dead>
	%R34<def,dead> = CMPri_r32 %R33, 8, %STATUS<imp-def>
	STRf32 %R37<kill>, %R32<kill>, 4; mem:ST4[%scevgep16](tbaa=!2)
	%R32<def> = COPY %R35<kill>
	%R34<def> = COPY %R36<kill>
	BCC <BB#7>, 8, %STATUS<imp-use>
	BNONE32 <BB#8>, %STATUS<imp-use>
    Successors according to CFG: BB#7(0x7c000000 / 0x80000000 = 96.88%) BB#8(0x04000000 / 0x80000000 = 3.12%)

BB#8: derived from LLVM BB %for.end60
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#7
	%R25<def> = ADDrr_r32 %R25<kill>, %IP, %STATUS<imp-def,dead>
	%R26<def> = ADDri_r32 %R26<kill>, 1, %STATUS<imp-def,dead>
	%R27<def,dead> = CMPrr_r32 %R26, %R3, %STATUS<imp-def>
	BCC <BB#5>, 0, %STATUS<imp-use>
	BNONE32 <BB#6>, %STATUS<imp-use>
    Successors according to CFG: BB#5(0x04000000 / 0x80000000 = 3.12%) BB#6(0x7c000000 / 0x80000000 = 96.88%)

BB#9: derived from LLVM BB %for.body66
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#5 BB#9
	%R27<def> = ADDrr_r32 %R16, %R26, %STATUS<imp-def,dead>
	%R33<def> = LDRf32 %R27<kill>, 0; mem:LD4[%sunkaddr30](tbaa=!2)
	%R27<def> = ADDri_r32 %R25, 4, %STATUS<imp-def,dead>
	%R26<def> = ADDri_r32 %R26<kill>, 4, %STATUS<imp-def,dead>
	%R34<def> = LDRf32 %R25, 0; mem:Volatile LD4[%lsr.iv24](tbaa=!2)
	%R32<def> = LDRi32_r32 <fi#2>, 0; mem:LD4[FixedStack2]
	GID %CONFIG<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %R32<kill>
	GIE %CONFIG<imp-def,dead>
	%R33<def> = FADDrr_r32 %R33<kill>, %R34<kill>, %STATUS<imp-def,dead>
	%R32<def,dead> = CMPri_r32 %R26, 32, %STATUS<imp-def>
	STRf32 %R33<kill>, %R25<kill>, 0; mem:Volatile ST4[%lsr.iv24](tbaa=!2)
	%R25<def> = COPY %R27<kill>
	BCC <BB#9>, 1, %STATUS<imp-use>
	BNONE32 <BB#10>, %STATUS<imp-use>
    Successors according to CFG: BB#10(0x04000000 / 0x80000000 = 3.12%) BB#9(0x7c000000 / 0x80000000 = 96.88%)

BB#10: derived from LLVM BB %for.end75
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#9
	%R22<def> = ADDri_r32 %R22<kill>, 32, %STATUS<imp-def,dead>
	%R23<def> = ADDri_r32 %R23<kill>, 32, %STATUS<imp-def,dead>
	%R24<def> = ADDri_r32 %R24<kill>, 8, %STATUS<imp-def,dead>
	%R25<def,dead> = CMPrr_r32 %R24, %R3, %STATUS<imp-def>
	BCC <BB#4>, 8, %STATUS<imp-use>
	BNONE32 <BB#11>, %STATUS<imp-use>
    Successors according to CFG: BB#4(0x7c000000 / 0x80000000 = 96.88%) BB#11(0x04000000 / 0x80000000 = 3.12%)

BB#11: derived from LLVM BB %for.end78
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20
    Predecessors according to CFG: BB#10
	%R2<def> = ADDrr_r32 %R2<kill>, %IP, %STATUS<imp-def,dead>
	%R20<def> = ADDri_r32 %R20<kill>, 1, %STATUS<imp-def,dead>
	%R21<def,dead> = CMPrr_r32 %R20, %R3, %STATUS<imp-def>
	BCC <BB#3>, 1, %STATUS<imp-use>
	BNONE32 <BB#12>, %STATUS<imp-use>
    Successors according to CFG: BB#12(0x04000000 / 0x80000000 = 3.12%) BB#3(0x7c000000 / 0x80000000 = 96.88%)

BB#12: derived from LLVM BB %for.end81
    Predecessors according to CFG: BB#1 BB#11
	%R0<def> = LDRi32_r32 <fi#1>, 0; mem:LD4[FixedStack1]
	GID
	%CONFIG<def> = MOVTS32_core %R0<kill>
	GIE %CONFIG<imp-use,kill>
	RTS

# End machine code for function matmac.

# *** IR Dump After Shrink Wrapping analysis ***:
# Machine code for function matmac: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=32, align=8, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=4, align=8, at location [SP]
Function Live Ins: %R0, %R1, %R2, %R3

BB#0: 
    Live Ins: %R0 %R1 %R2 %R3
	GID %CONFIG<imp-def>
	%R19<def> = MOVFS32_core %CONFIG, %D9<imp-def>
	STRi32_r32 %R19, <fi#1>, 0; mem:ST4[FixedStack1]
	%IP<def> = MOVi32ri 65535
	%IP<def,tied1> = MOVTi32ri %IP<kill,tied0>, 65521
	%R18<def> = ANDrr_r32 %R19, %IP<kill>, %STATUS<imp-def>, %D9<imp-use,kill>, %D9<imp-def>
	%R19<def,tied1> = MOVTi32ri %R19<tied0>, 72, %D9<imp-use,kill>, %D9<imp-def>
	STRi64 %D9<kill>, <fi#3>, 0; mem:ST4[FixedStack3] ST4[FixedStack2]
	GIE %CONFIG<imp-use,kill>
    Successors according to CFG: BB#1(?%)

BB#1: derived from LLVM BB %entry
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#0
	%IP<def,dead> = CMPri_r32 %R3, 1, %STATUS<imp-def>
	BCC <BB#12>, 8, %STATUS<imp-use>
	BNONE32 <BB#2>, %STATUS<imp-use>
    Successors according to CFG: BB#2(0x50000000 / 0x80000000 = 62.50%) BB#12(0x30000000 / 0x80000000 = 37.50%)

BB#2: derived from LLVM BB %for.body3.lr.ph.preheader
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#1
	%IP<def> = LSL32ri %R3, 2, %STATUS<imp-def,dead>
	%R1<def> = ADDri_r32 %R1<kill>, 8, %STATUS<imp-def,dead>
	%R16<def> = MOViPTR <fi#0>, 0
	%R17<def> = ADDri_r32 %R16, 8, %STATUS<imp-def,dead>
	%R19<def> = MOVi32ri 0, %D9<imp-def>
	%R20<def> = COPY %R19
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %for.body3.lr.ph
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20
    Predecessors according to CFG: BB#2 BB#11
	%R21<def> = LDRi32_r32 <fi#3>, 0; mem:LD4[FixedStack3]
	GID %CONFIG<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %R21<kill>
	GIE %CONFIG<imp-def,dead>
	%R21<def> = IMULrr_r32 %R20, %R3, %STATUS<imp-def,dead>
	%R21<def> = LSL32ri %R21<kill>, 2, %STATUS<imp-def,dead>
	%R21<def> = ADDrr_r32 %R0, %R21<kill>, %STATUS<imp-def,dead>
	%R22<def> = COPY %R2
	%R23<def> = COPY %R1
	%R24<def> = COPY %R19
    Successors according to CFG: BB#4(?%)

BB#4: derived from LLVM BB %for.body9.preheader
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#3 BB#10
	%R18<def> = COPY %R19, %D9<imp-use,kill>, %D9<imp-def>
	STRi64 %D9, <fi#0>, 24; mem:ST8[%1+24]
	STRi64 %D9, <fi#0>, 16; mem:ST8[%1+16]
	STRi64 %D9, <fi#0>, 8; mem:ST8[%1+8]
	STRi64 %D9, <fi#0>, 0; mem:ST8[%1]
	%R25<def> = COPY %R23
	%R26<def> = COPY %R19
	BNONE32 <BB#6>, %STATUS<imp-use>
    Successors according to CFG: BB#6(?%)

BB#5: derived from LLVM BB %for.cond64.preheader
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#8
	%R25<def> = COPY %R22
	%R26<def> = COPY %R19
	BNONE32 <BB#9>, %STATUS<imp-use>
    Successors according to CFG: BB#9(?%)

BB#6: derived from LLVM BB %for.body9
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#4 BB#8
	%R27<def> = LSL32ri %R26, 2, %STATUS<imp-def,dead>
	%R27<def> = ADDrr_r32 %R21, %R27<kill>, %STATUS<imp-def,dead>
	%R27<def> = LDRf32 %R27<kill>, 0; mem:Volatile LD4[%add.ptr10](tbaa=!2)
	%R32<def> = COPY %R17
	%R34<def> = COPY %R25
	%R33<def> = COPY %R19
    Successors according to CFG: BB#7(?%)

BB#7: derived from LLVM BB %for.body13
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26 %R27 %R32 %R33 %R34
    Predecessors according to CFG: BB#6 BB#7
	%R37<def> = LDRf32 %R34, -8; mem:Volatile LD4[%scevgep8](tbaa=!2)
	%R35<def> = ADDri_r32 %R32, 16, %STATUS<imp-def,dead>
	%R36<def> = ADDri_r32 %R34, 16, %STATUS<imp-def,dead>
	%R38<def> = LDRf32 %R34, -4; mem:Volatile LD4[%scevgep9](tbaa=!2)
	%R33<def> = ADDri_r32 %R33<kill>, 4, %STATUS<imp-def,dead>
	%R39<def> = LDRf32 %R34, 0; mem:Volatile LD4[%lsr.iv5](tbaa=!2)
	%R40<def> = LDRf32 %R34<kill>, 4; mem:Volatile LD4[%scevgep7](tbaa=!2)
	%D21<def> = LDRf64 %R32, -8; mem:LD4[%scevgep17](tbaa=!2) LD4[%scevgep15](tbaa=!2)
	%R34<def> = LDRi32_r32 <fi#2>, 0; mem:LD4[FixedStack2]
	GID %CONFIG<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %R34<kill>
	GIE %CONFIG<imp-def,dead>
	%R43<def,tied1> = FMADDrr_r32 %R43<tied0>, %R27, %R37<kill>, %STATUS<imp-def,dead>, %D21<imp-use,kill>, %D21<imp-def>
	%R42<def,tied1> = FMADDrr_r32 %R42<tied0>, %R27, %R38<kill>, %STATUS<imp-def,dead>, %D21<imp-use,kill>, %D21<imp-def>
	%R44<def> = COPY %R43, %D22<imp-def>
	%R45<def> = COPY %R42, %D21<imp-use,kill>, %D22<imp-use,kill>, %D22<imp-def>
	STRf64 %D22<kill>, %R32, -8; mem:ST4[%scevgep17](tbaa=!2) ST4[%scevgep15](tbaa=!2)
	%R34<def> = LDRf32 %R32, 0; mem:LD4[%lsr.iv1214](tbaa=!2)
	%R34<def,tied1> = FMADDrr_r32 %R34<kill,tied0>, %R27, %R39<kill>, %STATUS<imp-def,dead>
	STRf32 %R34<kill>, %R32, 0; mem:ST4[%lsr.iv1214](tbaa=!2)
	%R37<def> = LDRf32 %R32, 4; mem:LD4[%scevgep16](tbaa=!2)
	%R37<def,tied1> = FMADDrr_r32 %R37<kill,tied0>, %R27, %R40<kill>, %STATUS<imp-def,dead>
	%R34<def,dead> = CMPri_r32 %R33, 8, %STATUS<imp-def>
	STRf32 %R37<kill>, %R32<kill>, 4; mem:ST4[%scevgep16](tbaa=!2)
	%R32<def> = COPY %R35<kill>
	%R34<def> = COPY %R36<kill>
	BCC <BB#7>, 8, %STATUS<imp-use>
	BNONE32 <BB#8>, %STATUS<imp-use>
    Successors according to CFG: BB#7(0x7c000000 / 0x80000000 = 96.88%) BB#8(0x04000000 / 0x80000000 = 3.12%)

BB#8: derived from LLVM BB %for.end60
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#7
	%R25<def> = ADDrr_r32 %R25<kill>, %IP, %STATUS<imp-def,dead>
	%R26<def> = ADDri_r32 %R26<kill>, 1, %STATUS<imp-def,dead>
	%R27<def,dead> = CMPrr_r32 %R26, %R3, %STATUS<imp-def>
	BCC <BB#5>, 0, %STATUS<imp-use>
	BNONE32 <BB#6>, %STATUS<imp-use>
    Successors according to CFG: BB#5(0x04000000 / 0x80000000 = 3.12%) BB#6(0x7c000000 / 0x80000000 = 96.88%)

BB#9: derived from LLVM BB %for.body66
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#5 BB#9
	%R27<def> = ADDrr_r32 %R16, %R26, %STATUS<imp-def,dead>
	%R33<def> = LDRf32 %R27<kill>, 0; mem:LD4[%sunkaddr30](tbaa=!2)
	%R27<def> = ADDri_r32 %R25, 4, %STATUS<imp-def,dead>
	%R26<def> = ADDri_r32 %R26<kill>, 4, %STATUS<imp-def,dead>
	%R34<def> = LDRf32 %R25, 0; mem:Volatile LD4[%lsr.iv24](tbaa=!2)
	%R32<def> = LDRi32_r32 <fi#2>, 0; mem:LD4[FixedStack2]
	GID %CONFIG<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %R32<kill>
	GIE %CONFIG<imp-def,dead>
	%R33<def> = FADDrr_r32 %R33<kill>, %R34<kill>, %STATUS<imp-def,dead>
	%R32<def,dead> = CMPri_r32 %R26, 32, %STATUS<imp-def>
	STRf32 %R33<kill>, %R25<kill>, 0; mem:Volatile ST4[%lsr.iv24](tbaa=!2)
	%R25<def> = COPY %R27<kill>
	BCC <BB#9>, 1, %STATUS<imp-use>
	BNONE32 <BB#10>, %STATUS<imp-use>
    Successors according to CFG: BB#10(0x04000000 / 0x80000000 = 3.12%) BB#9(0x7c000000 / 0x80000000 = 96.88%)

BB#10: derived from LLVM BB %for.end75
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#9
	%R22<def> = ADDri_r32 %R22<kill>, 32, %STATUS<imp-def,dead>
	%R23<def> = ADDri_r32 %R23<kill>, 32, %STATUS<imp-def,dead>
	%R24<def> = ADDri_r32 %R24<kill>, 8, %STATUS<imp-def,dead>
	%R25<def,dead> = CMPrr_r32 %R24, %R3, %STATUS<imp-def>
	BCC <BB#4>, 8, %STATUS<imp-use>
	BNONE32 <BB#11>, %STATUS<imp-use>
    Successors according to CFG: BB#4(0x7c000000 / 0x80000000 = 96.88%) BB#11(0x04000000 / 0x80000000 = 3.12%)

BB#11: derived from LLVM BB %for.end78
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20
    Predecessors according to CFG: BB#10
	%R2<def> = ADDrr_r32 %R2<kill>, %IP, %STATUS<imp-def,dead>
	%R20<def> = ADDri_r32 %R20<kill>, 1, %STATUS<imp-def,dead>
	%R21<def,dead> = CMPrr_r32 %R20, %R3, %STATUS<imp-def>
	BCC <BB#3>, 1, %STATUS<imp-use>
	BNONE32 <BB#12>, %STATUS<imp-use>
    Successors according to CFG: BB#12(0x04000000 / 0x80000000 = 3.12%) BB#3(0x7c000000 / 0x80000000 = 96.88%)

BB#12: derived from LLVM BB %for.end81
    Predecessors according to CFG: BB#1 BB#11
	%R0<def> = LDRi32_r32 <fi#1>, 0; mem:LD4[FixedStack1]
	GID
	%CONFIG<def> = MOVTS32_core %R0<kill>
	GIE %CONFIG<imp-use,kill>
	RTS

# End machine code for function matmac.

# *** IR Dump Before Prologue/Epilogue Insertion & Frame Finalization ***:
# Machine code for function matmac: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=32, align=8, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=4, align=8, at location [SP]
Function Live Ins: %R0, %R1, %R2, %R3

BB#0: 
    Live Ins: %R0 %R1 %R2 %R3
	GID %CONFIG<imp-def>
	%R19<def> = MOVFS32_core %CONFIG, %D9<imp-def>
	STRi32_r32 %R19, <fi#1>, 0; mem:ST4[FixedStack1]
	%IP<def> = MOVi32ri 65535
	%IP<def,tied1> = MOVTi32ri %IP<kill,tied0>, 65521
	%R18<def> = ANDrr_r32 %R19, %IP<kill>, %STATUS<imp-def>, %D9<imp-use,kill>, %D9<imp-def>
	%R19<def,tied1> = MOVTi32ri %R19<tied0>, 72, %D9<imp-use,kill>, %D9<imp-def>
	STRi64 %D9<kill>, <fi#3>, 0; mem:ST4[FixedStack3] ST4[FixedStack2]
	GIE %CONFIG<imp-use,kill>
    Successors according to CFG: BB#1(?%)

BB#1: derived from LLVM BB %entry
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#0
	%IP<def,dead> = CMPri_r32 %R3, 1, %STATUS<imp-def>
	BCC <BB#12>, 8, %STATUS<imp-use>
	BNONE32 <BB#2>, %STATUS<imp-use>
    Successors according to CFG: BB#2(0x50000000 / 0x80000000 = 62.50%) BB#12(0x30000000 / 0x80000000 = 37.50%)

BB#2: derived from LLVM BB %for.body3.lr.ph.preheader
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#1
	%IP<def> = LSL32ri %R3, 2, %STATUS<imp-def,dead>
	%R1<def> = ADDri_r32 %R1<kill>, 8, %STATUS<imp-def,dead>
	%R16<def> = MOViPTR <fi#0>, 0
	%R17<def> = ADDri_r32 %R16, 8, %STATUS<imp-def,dead>
	%R19<def> = MOVi32ri 0, %D9<imp-def>
	%R20<def> = COPY %R19
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %for.body3.lr.ph
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20
    Predecessors according to CFG: BB#2 BB#11
	%R21<def> = LDRi32_r32 <fi#3>, 0; mem:LD4[FixedStack3]
	GID %CONFIG<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %R21<kill>
	GIE %CONFIG<imp-def,dead>
	%R21<def> = IMULrr_r32 %R20, %R3, %STATUS<imp-def,dead>
	%R21<def> = LSL32ri %R21<kill>, 2, %STATUS<imp-def,dead>
	%R21<def> = ADDrr_r32 %R0, %R21<kill>, %STATUS<imp-def,dead>
	%R22<def> = COPY %R2
	%R23<def> = COPY %R1
	%R24<def> = COPY %R19
    Successors according to CFG: BB#4(?%)

BB#4: derived from LLVM BB %for.body9.preheader
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#3 BB#10
	%R18<def> = COPY %R19, %D9<imp-use,kill>, %D9<imp-def>
	STRi64 %D9, <fi#0>, 24; mem:ST8[%1+24]
	STRi64 %D9, <fi#0>, 16; mem:ST8[%1+16]
	STRi64 %D9, <fi#0>, 8; mem:ST8[%1+8]
	STRi64 %D9, <fi#0>, 0; mem:ST8[%1]
	%R25<def> = COPY %R23
	%R26<def> = COPY %R19
	BNONE32 <BB#6>, %STATUS<imp-use>
    Successors according to CFG: BB#6(?%)

BB#5: derived from LLVM BB %for.cond64.preheader
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#8
	%R25<def> = COPY %R22
	%R26<def> = COPY %R19
	BNONE32 <BB#9>, %STATUS<imp-use>
    Successors according to CFG: BB#9(?%)

BB#6: derived from LLVM BB %for.body9
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#4 BB#8
	%R27<def> = LSL32ri %R26, 2, %STATUS<imp-def,dead>
	%R27<def> = ADDrr_r32 %R21, %R27<kill>, %STATUS<imp-def,dead>
	%R27<def> = LDRf32 %R27<kill>, 0; mem:Volatile LD4[%add.ptr10](tbaa=!2)
	%R32<def> = COPY %R17
	%R34<def> = COPY %R25
	%R33<def> = COPY %R19
    Successors according to CFG: BB#7(?%)

BB#7: derived from LLVM BB %for.body13
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26 %R27 %R32 %R33 %R34
    Predecessors according to CFG: BB#6 BB#7
	%R37<def> = LDRf32 %R34, -8; mem:Volatile LD4[%scevgep8](tbaa=!2)
	%R35<def> = ADDri_r32 %R32, 16, %STATUS<imp-def,dead>
	%R36<def> = ADDri_r32 %R34, 16, %STATUS<imp-def,dead>
	%R38<def> = LDRf32 %R34, -4; mem:Volatile LD4[%scevgep9](tbaa=!2)
	%R33<def> = ADDri_r32 %R33<kill>, 4, %STATUS<imp-def,dead>
	%R39<def> = LDRf32 %R34, 0; mem:Volatile LD4[%lsr.iv5](tbaa=!2)
	%R40<def> = LDRf32 %R34<kill>, 4; mem:Volatile LD4[%scevgep7](tbaa=!2)
	%D21<def> = LDRf64 %R32, -8; mem:LD4[%scevgep17](tbaa=!2) LD4[%scevgep15](tbaa=!2)
	%R34<def> = LDRi32_r32 <fi#2>, 0; mem:LD4[FixedStack2]
	GID %CONFIG<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %R34<kill>
	GIE %CONFIG<imp-def,dead>
	%R43<def,tied1> = FMADDrr_r32 %R43<tied0>, %R27, %R37<kill>, %STATUS<imp-def,dead>, %D21<imp-use,kill>, %D21<imp-def>
	%R42<def,tied1> = FMADDrr_r32 %R42<tied0>, %R27, %R38<kill>, %STATUS<imp-def,dead>, %D21<imp-use,kill>, %D21<imp-def>
	%R44<def> = COPY %R43, %D22<imp-def>
	%R45<def> = COPY %R42, %D21<imp-use,kill>, %D22<imp-use,kill>, %D22<imp-def>
	STRf64 %D22<kill>, %R32, -8; mem:ST4[%scevgep17](tbaa=!2) ST4[%scevgep15](tbaa=!2)
	%R34<def> = LDRf32 %R32, 0; mem:LD4[%lsr.iv1214](tbaa=!2)
	%R34<def,tied1> = FMADDrr_r32 %R34<kill,tied0>, %R27, %R39<kill>, %STATUS<imp-def,dead>
	STRf32 %R34<kill>, %R32, 0; mem:ST4[%lsr.iv1214](tbaa=!2)
	%R37<def> = LDRf32 %R32, 4; mem:LD4[%scevgep16](tbaa=!2)
	%R37<def,tied1> = FMADDrr_r32 %R37<kill,tied0>, %R27, %R40<kill>, %STATUS<imp-def,dead>
	%R34<def,dead> = CMPri_r32 %R33, 8, %STATUS<imp-def>
	STRf32 %R37<kill>, %R32<kill>, 4; mem:ST4[%scevgep16](tbaa=!2)
	%R32<def> = COPY %R35<kill>
	%R34<def> = COPY %R36<kill>
	BCC <BB#7>, 8, %STATUS<imp-use>
	BNONE32 <BB#8>, %STATUS<imp-use>
    Successors according to CFG: BB#7(0x7c000000 / 0x80000000 = 96.88%) BB#8(0x04000000 / 0x80000000 = 3.12%)

BB#8: derived from LLVM BB %for.end60
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#7
	%R25<def> = ADDrr_r32 %R25<kill>, %IP, %STATUS<imp-def,dead>
	%R26<def> = ADDri_r32 %R26<kill>, 1, %STATUS<imp-def,dead>
	%R27<def,dead> = CMPrr_r32 %R26, %R3, %STATUS<imp-def>
	BCC <BB#5>, 0, %STATUS<imp-use>
	BNONE32 <BB#6>, %STATUS<imp-use>
    Successors according to CFG: BB#5(0x04000000 / 0x80000000 = 3.12%) BB#6(0x7c000000 / 0x80000000 = 96.88%)

BB#9: derived from LLVM BB %for.body66
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#5 BB#9
	%R27<def> = ADDrr_r32 %R16, %R26, %STATUS<imp-def,dead>
	%R33<def> = LDRf32 %R27<kill>, 0; mem:LD4[%sunkaddr30](tbaa=!2)
	%R27<def> = ADDri_r32 %R25, 4, %STATUS<imp-def,dead>
	%R26<def> = ADDri_r32 %R26<kill>, 4, %STATUS<imp-def,dead>
	%R34<def> = LDRf32 %R25, 0; mem:Volatile LD4[%lsr.iv24](tbaa=!2)
	%R32<def> = LDRi32_r32 <fi#2>, 0; mem:LD4[FixedStack2]
	GID %CONFIG<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %R32<kill>
	GIE %CONFIG<imp-def,dead>
	%R33<def> = FADDrr_r32 %R33<kill>, %R34<kill>, %STATUS<imp-def,dead>
	%R32<def,dead> = CMPri_r32 %R26, 32, %STATUS<imp-def>
	STRf32 %R33<kill>, %R25<kill>, 0; mem:Volatile ST4[%lsr.iv24](tbaa=!2)
	%R25<def> = COPY %R27<kill>
	BCC <BB#9>, 1, %STATUS<imp-use>
	BNONE32 <BB#10>, %STATUS<imp-use>
    Successors according to CFG: BB#10(0x04000000 / 0x80000000 = 3.12%) BB#9(0x7c000000 / 0x80000000 = 96.88%)

BB#10: derived from LLVM BB %for.end75
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#9
	%R22<def> = ADDri_r32 %R22<kill>, 32, %STATUS<imp-def,dead>
	%R23<def> = ADDri_r32 %R23<kill>, 32, %STATUS<imp-def,dead>
	%R24<def> = ADDri_r32 %R24<kill>, 8, %STATUS<imp-def,dead>
	%R25<def,dead> = CMPrr_r32 %R24, %R3, %STATUS<imp-def>
	BCC <BB#4>, 8, %STATUS<imp-use>
	BNONE32 <BB#11>, %STATUS<imp-use>
    Successors according to CFG: BB#4(0x7c000000 / 0x80000000 = 96.88%) BB#11(0x04000000 / 0x80000000 = 3.12%)

BB#11: derived from LLVM BB %for.end78
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20
    Predecessors according to CFG: BB#10
	%R2<def> = ADDrr_r32 %R2<kill>, %IP, %STATUS<imp-def,dead>
	%R20<def> = ADDri_r32 %R20<kill>, 1, %STATUS<imp-def,dead>
	%R21<def,dead> = CMPrr_r32 %R20, %R3, %STATUS<imp-def>
	BCC <BB#3>, 1, %STATUS<imp-use>
	BNONE32 <BB#12>, %STATUS<imp-use>
    Successors according to CFG: BB#12(0x04000000 / 0x80000000 = 3.12%) BB#3(0x7c000000 / 0x80000000 = 96.88%)

BB#12: derived from LLVM BB %for.end81
    Predecessors according to CFG: BB#1 BB#11
	%R0<def> = LDRi32_r32 <fi#1>, 0; mem:LD4[FixedStack1]
	GID
	%CONFIG<def> = MOVTS32_core %R0<kill>
	GIE %CONFIG<imp-use,kill>
	RTS

# End machine code for function matmac.

*** determineCalleeSaves
Used CSRs:

Has FP: DisableFramePointerElim set
Local frame base offset: 0
alloc FI(2) at SP[-4]
alloc FI(3) at SP[-8]
alloc FI(0) at SP[-40]
alloc FI(1) at SP[-44]

Has FP: DisableFramePointerElim set

Has FP: DisableFramePointerElim set

Function : matmac
<--------->
STRi32_r32 %R19, <fi#1>, 0; mem:ST4[FixedStack1]
FrameIndex : 1
spOffset   : -44
stackSize  : 48

Has FP: DisableFramePointerElim set
Offset     : -44
<--------->

Function : matmac
<--------->
STRi64 %D9<kill>, <fi#3>, 0; mem:ST4[FixedStack3] ST4[FixedStack2]
FrameIndex : 3
spOffset   : -8
stackSize  : 48

Has FP: DisableFramePointerElim set
Offset     : -8
<--------->

Function : matmac
<--------->
%R16<def> = MOViPTR <fi#0>, 0
FrameIndex : 0
spOffset   : -40
stackSize  : 48

Has FP: DisableFramePointerElim set
Offset     : -40
<--------->

Function : matmac
<--------->
%R21<def> = LDRi32_r32 <fi#3>, 0; mem:LD4[FixedStack3]
FrameIndex : 3
spOffset   : -8
stackSize  : 48

Has FP: DisableFramePointerElim set
Offset     : -8
<--------->

Function : matmac
<--------->
STRi64 %D9, <fi#0>, 24; mem:ST8[%1+24]
FrameIndex : 0
spOffset   : -40
stackSize  : 48

Has FP: DisableFramePointerElim set
Offset     : -16
<--------->

Function : matmac
<--------->
STRi64 %D9, <fi#0>, 16; mem:ST8[%1+16]
FrameIndex : 0
spOffset   : -40
stackSize  : 48

Has FP: DisableFramePointerElim set
Offset     : -24
<--------->

Function : matmac
<--------->
STRi64 %D9, <fi#0>, 8; mem:ST8[%1+8]
FrameIndex : 0
spOffset   : -40
stackSize  : 48

Has FP: DisableFramePointerElim set
Offset     : -32
<--------->

Function : matmac
<--------->
STRi64 %D9, <fi#0>, 0; mem:ST8[%1]
FrameIndex : 0
spOffset   : -40
stackSize  : 48

Has FP: DisableFramePointerElim set
Offset     : -40
<--------->

Function : matmac
<--------->
%R34<def> = LDRi32_r32 <fi#2>, 0; mem:LD4[FixedStack2]
FrameIndex : 2
spOffset   : -4
stackSize  : 48

Has FP: DisableFramePointerElim set
Offset     : -4
<--------->

Function : matmac
<--------->
%R32<def> = LDRi32_r32 <fi#2>, 0; mem:LD4[FixedStack2]
FrameIndex : 2
spOffset   : -4
stackSize  : 48

Has FP: DisableFramePointerElim set
Offset     : -4
<--------->

Function : matmac
<--------->
%R0<def> = LDRi32_r32 <fi#1>, 0; mem:LD4[FixedStack1]
FrameIndex : 1
spOffset   : -44
stackSize  : 48

Has FP: DisableFramePointerElim set
Offset     : -44
<--------->
# *** IR Dump After Prologue/Epilogue Insertion & Frame Finalization ***:
# Machine code for function matmac: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=32, align=8, at location [SP-40]
  fi#1: size=4, align=4, at location [SP-44]
  fi#2: size=4, align=4, at location [SP-4]
  fi#3: size=4, align=8, at location [SP-8]
Function Live Ins: %R0, %R1, %R2, %R3

BB#0: 
    Live Ins: %R0 %R1 %R2 %R3
	%SP<def,tied2> = STRi64_pmd %LR, %SP<tied0>, -48; flags: FrameSetup
	%FP<def> = ADDri_r32 %SP, 48, %STATUS<imp-def>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	GID %CONFIG<imp-def>
	%R19<def> = MOVFS32_core %CONFIG, %D9<imp-def>
	STRi32_r32 %R19, %FP, -44; mem:ST4[FixedStack1]
	%IP<def> = MOVi32ri 65535
	%IP<def,tied1> = MOVTi32ri %IP<kill,tied0>, 65521
	%R18<def> = ANDrr_r32 %R19, %IP<kill>, %STATUS<imp-def>, %D9<imp-use,kill>, %D9<imp-def>
	%R19<def,tied1> = MOVTi32ri %R19<tied0>, 72, %D9<imp-use,kill>, %D9<imp-def>
	STRi64 %D9<kill>, %FP, -8; mem:ST4[FixedStack3] ST4[FixedStack2]
	GIE %CONFIG<imp-use,kill>
    Successors according to CFG: BB#1(?%)

BB#1: derived from LLVM BB %entry
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#0
	%IP<def,dead> = CMPri_r32 %R3, 1, %STATUS<imp-def>
	BCC <BB#12>, 8, %STATUS<imp-use>
	BNONE32 <BB#2>, %STATUS<imp-use>
    Successors according to CFG: BB#2(0x50000000 / 0x80000000 = 62.50%) BB#12(0x30000000 / 0x80000000 = 37.50%)

BB#2: derived from LLVM BB %for.body3.lr.ph.preheader
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#1
	%IP<def> = LSL32ri %R3, 2, %STATUS<imp-def,dead>
	%R1<def> = ADDri_r32 %R1<kill>, 8, %STATUS<imp-def,dead>
	%R16<def> = MOViPTR %FP, -40
	%R17<def> = ADDri_r32 %R16, 8, %STATUS<imp-def,dead>
	%R19<def> = MOVi32ri 0, %D9<imp-def>
	%R20<def> = COPY %R19
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %for.body3.lr.ph
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20
    Predecessors according to CFG: BB#2 BB#11
	%R21<def> = LDRi32_r32 %FP, -8; mem:LD4[FixedStack3]
	GID %CONFIG<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %R21<kill>
	GIE %CONFIG<imp-def,dead>
	%R21<def> = IMULrr_r32 %R20, %R3, %STATUS<imp-def,dead>
	%R21<def> = LSL32ri %R21<kill>, 2, %STATUS<imp-def,dead>
	%R21<def> = ADDrr_r32 %R0, %R21<kill>, %STATUS<imp-def,dead>
	%R22<def> = COPY %R2
	%R23<def> = COPY %R1
	%R24<def> = COPY %R19
    Successors according to CFG: BB#4(?%)

BB#4: derived from LLVM BB %for.body9.preheader
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#3 BB#10
	%R18<def> = COPY %R19, %D9<imp-use,kill>, %D9<imp-def>
	STRi64 %D9, %FP, -16; mem:ST8[%1+24]
	STRi64 %D9, %FP, -24; mem:ST8[%1+16]
	STRi64 %D9, %FP, -32; mem:ST8[%1+8]
	STRi64 %D9, %FP, -40; mem:ST8[%1]
	%R25<def> = COPY %R23
	%R26<def> = COPY %R19
	BNONE32 <BB#6>, %STATUS<imp-use>
    Successors according to CFG: BB#6(?%)

BB#5: derived from LLVM BB %for.cond64.preheader
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#8
	%R25<def> = COPY %R22
	%R26<def> = COPY %R19
	BNONE32 <BB#9>, %STATUS<imp-use>
    Successors according to CFG: BB#9(?%)

BB#6: derived from LLVM BB %for.body9
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#4 BB#8
	%R27<def> = LSL32ri %R26, 2, %STATUS<imp-def,dead>
	%R27<def> = ADDrr_r32 %R21, %R27<kill>, %STATUS<imp-def,dead>
	%R27<def> = LDRf32 %R27<kill>, 0; mem:Volatile LD4[%add.ptr10](tbaa=!2)
	%R32<def> = COPY %R17
	%R34<def> = COPY %R25
	%R33<def> = COPY %R19
    Successors according to CFG: BB#7(?%)

BB#7: derived from LLVM BB %for.body13
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26 %R27 %R32 %R33 %R34
    Predecessors according to CFG: BB#6 BB#7
	%R37<def> = LDRf32 %R34, -8; mem:Volatile LD4[%scevgep8](tbaa=!2)
	%R35<def> = ADDri_r32 %R32, 16, %STATUS<imp-def,dead>
	%R36<def> = ADDri_r32 %R34, 16, %STATUS<imp-def,dead>
	%R38<def> = LDRf32 %R34, -4; mem:Volatile LD4[%scevgep9](tbaa=!2)
	%R33<def> = ADDri_r32 %R33<kill>, 4, %STATUS<imp-def,dead>
	%R39<def> = LDRf32 %R34, 0; mem:Volatile LD4[%lsr.iv5](tbaa=!2)
	%R40<def> = LDRf32 %R34<kill>, 4; mem:Volatile LD4[%scevgep7](tbaa=!2)
	%D21<def> = LDRf64 %R32, -8; mem:LD4[%scevgep17](tbaa=!2) LD4[%scevgep15](tbaa=!2)
	%R34<def> = LDRi32_r32 %FP, -4; mem:LD4[FixedStack2]
	GID %CONFIG<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %R34<kill>
	GIE %CONFIG<imp-def,dead>
	%R43<def,tied1> = FMADDrr_r32 %R43<tied0>, %R27, %R37<kill>, %STATUS<imp-def,dead>, %D21<imp-use,kill>, %D21<imp-def>
	%R42<def,tied1> = FMADDrr_r32 %R42<tied0>, %R27, %R38<kill>, %STATUS<imp-def,dead>, %D21<imp-use,kill>, %D21<imp-def>
	%R44<def> = COPY %R43, %D22<imp-def>
	%R45<def> = COPY %R42, %D21<imp-use,kill>, %D22<imp-use,kill>, %D22<imp-def>
	STRf64 %D22<kill>, %R32, -8; mem:ST4[%scevgep17](tbaa=!2) ST4[%scevgep15](tbaa=!2)
	%R34<def> = LDRf32 %R32, 0; mem:LD4[%lsr.iv1214](tbaa=!2)
	%R34<def,tied1> = FMADDrr_r32 %R34<kill,tied0>, %R27, %R39<kill>, %STATUS<imp-def,dead>
	STRf32 %R34<kill>, %R32, 0; mem:ST4[%lsr.iv1214](tbaa=!2)
	%R37<def> = LDRf32 %R32, 4; mem:LD4[%scevgep16](tbaa=!2)
	%R37<def,tied1> = FMADDrr_r32 %R37<kill,tied0>, %R27, %R40<kill>, %STATUS<imp-def,dead>
	%R34<def,dead> = CMPri_r32 %R33, 8, %STATUS<imp-def>
	STRf32 %R37<kill>, %R32<kill>, 4; mem:ST4[%scevgep16](tbaa=!2)
	%R32<def> = COPY %R35<kill>
	%R34<def> = COPY %R36<kill>
	BCC <BB#7>, 8, %STATUS<imp-use>
	BNONE32 <BB#8>, %STATUS<imp-use>
    Successors according to CFG: BB#7(0x7c000000 / 0x80000000 = 96.88%) BB#8(0x04000000 / 0x80000000 = 3.12%)

BB#8: derived from LLVM BB %for.end60
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#7
	%R25<def> = ADDrr_r32 %R25<kill>, %IP, %STATUS<imp-def,dead>
	%R26<def> = ADDri_r32 %R26<kill>, 1, %STATUS<imp-def,dead>
	%R27<def,dead> = CMPrr_r32 %R26, %R3, %STATUS<imp-def>
	BCC <BB#5>, 0, %STATUS<imp-use>
	BNONE32 <BB#6>, %STATUS<imp-use>
    Successors according to CFG: BB#5(0x04000000 / 0x80000000 = 3.12%) BB#6(0x7c000000 / 0x80000000 = 96.88%)

BB#9: derived from LLVM BB %for.body66
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#5 BB#9
	%R27<def> = ADDrr_r32 %R16, %R26, %STATUS<imp-def,dead>
	%R33<def> = LDRf32 %R27<kill>, 0; mem:LD4[%sunkaddr30](tbaa=!2)
	%R27<def> = ADDri_r32 %R25, 4, %STATUS<imp-def,dead>
	%R26<def> = ADDri_r32 %R26<kill>, 4, %STATUS<imp-def,dead>
	%R34<def> = LDRf32 %R25, 0; mem:Volatile LD4[%lsr.iv24](tbaa=!2)
	%R32<def> = LDRi32_r32 %FP, -4; mem:LD4[FixedStack2]
	GID %CONFIG<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %R32<kill>
	GIE %CONFIG<imp-def,dead>
	%R33<def> = FADDrr_r32 %R33<kill>, %R34<kill>, %STATUS<imp-def,dead>
	%R32<def,dead> = CMPri_r32 %R26, 32, %STATUS<imp-def>
	STRf32 %R33<kill>, %R25<kill>, 0; mem:Volatile ST4[%lsr.iv24](tbaa=!2)
	%R25<def> = COPY %R27<kill>
	BCC <BB#9>, 1, %STATUS<imp-use>
	BNONE32 <BB#10>, %STATUS<imp-use>
    Successors according to CFG: BB#10(0x04000000 / 0x80000000 = 3.12%) BB#9(0x7c000000 / 0x80000000 = 96.88%)

BB#10: derived from LLVM BB %for.end75
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#9
	%R22<def> = ADDri_r32 %R22<kill>, 32, %STATUS<imp-def,dead>
	%R23<def> = ADDri_r32 %R23<kill>, 32, %STATUS<imp-def,dead>
	%R24<def> = ADDri_r32 %R24<kill>, 8, %STATUS<imp-def,dead>
	%R25<def,dead> = CMPrr_r32 %R24, %R3, %STATUS<imp-def>
	BCC <BB#4>, 8, %STATUS<imp-use>
	BNONE32 <BB#11>, %STATUS<imp-use>
    Successors according to CFG: BB#4(0x7c000000 / 0x80000000 = 96.88%) BB#11(0x04000000 / 0x80000000 = 3.12%)

BB#11: derived from LLVM BB %for.end78
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20
    Predecessors according to CFG: BB#10
	%R2<def> = ADDrr_r32 %R2<kill>, %IP, %STATUS<imp-def,dead>
	%R20<def> = ADDri_r32 %R20<kill>, 1, %STATUS<imp-def,dead>
	%R21<def,dead> = CMPrr_r32 %R20, %R3, %STATUS<imp-def>
	BCC <BB#3>, 1, %STATUS<imp-use>
	BNONE32 <BB#12>, %STATUS<imp-use>
    Successors according to CFG: BB#12(0x04000000 / 0x80000000 = 3.12%) BB#3(0x7c000000 / 0x80000000 = 96.88%)

BB#12: derived from LLVM BB %for.end81
    Predecessors according to CFG: BB#1 BB#11
	%R0<def> = LDRi32_r32 %FP, -44; mem:LD4[FixedStack1]
	GID
	%CONFIG<def> = MOVTS32_core %R0<kill>
	GIE %CONFIG<imp-use,kill>
	%LR<def> = LDRi64 %SP, 48; flags: FrameSetup
	%SP<def> = ADDri_r32 %SP, 48, %STATUS<imp-def>
	RTS

# End machine code for function matmac.

# *** IR Dump Before Control Flow Optimizer ***:
# Machine code for function matmac: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=32, align=8, at location [SP-40]
  fi#1: size=4, align=4, at location [SP-44]
  fi#2: size=4, align=4, at location [SP-4]
  fi#3: size=4, align=8, at location [SP-8]
Function Live Ins: %R0, %R1, %R2, %R3

BB#0: 
    Live Ins: %R0 %R1 %R2 %R3
	%SP<def,tied2> = STRi64_pmd %LR, %SP<tied0>, -48; flags: FrameSetup
	%FP<def> = ADDri_r32 %SP, 48, %STATUS<imp-def>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	GID %CONFIG<imp-def>
	%R19<def> = MOVFS32_core %CONFIG, %D9<imp-def>
	STRi32_r32 %R19, %FP, -44; mem:ST4[FixedStack1]
	%IP<def> = MOVi32ri 65535
	%IP<def,tied1> = MOVTi32ri %IP<kill,tied0>, 65521
	%R18<def> = ANDrr_r32 %R19, %IP<kill>, %STATUS<imp-def>, %D9<imp-use,kill>, %D9<imp-def>
	%R19<def,tied1> = MOVTi32ri %R19<tied0>, 72, %D9<imp-use,kill>, %D9<imp-def>
	STRi64 %D9<kill>, %FP, -8; mem:ST4[FixedStack3] ST4[FixedStack2]
	GIE %CONFIG<imp-use,kill>
    Successors according to CFG: BB#1(?%)

BB#1: derived from LLVM BB %entry
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#0
	%IP<def,dead> = CMPri_r32 %R3, 1, %STATUS<imp-def>
	BCC <BB#12>, 8, %STATUS<imp-use>
	BNONE32 <BB#2>, %STATUS<imp-use>
    Successors according to CFG: BB#2(0x50000000 / 0x80000000 = 62.50%) BB#12(0x30000000 / 0x80000000 = 37.50%)

BB#2: derived from LLVM BB %for.body3.lr.ph.preheader
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#1
	%IP<def> = LSL32ri %R3, 2, %STATUS<imp-def,dead>
	%R1<def> = ADDri_r32 %R1<kill>, 8, %STATUS<imp-def,dead>
	%R16<def> = MOViPTR %FP, -40
	%R17<def> = ADDri_r32 %R16, 8, %STATUS<imp-def,dead>
	%R19<def> = MOVi32ri 0, %D9<imp-def>
	%R20<def> = COPY %R19
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %for.body3.lr.ph
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20
    Predecessors according to CFG: BB#2 BB#11
	%R21<def> = LDRi32_r32 %FP, -8; mem:LD4[FixedStack3]
	GID %CONFIG<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %R21<kill>
	GIE %CONFIG<imp-def,dead>
	%R21<def> = IMULrr_r32 %R20, %R3, %STATUS<imp-def,dead>
	%R21<def> = LSL32ri %R21<kill>, 2, %STATUS<imp-def,dead>
	%R21<def> = ADDrr_r32 %R0, %R21<kill>, %STATUS<imp-def,dead>
	%R22<def> = COPY %R2
	%R23<def> = COPY %R1
	%R24<def> = COPY %R19
    Successors according to CFG: BB#4(?%)

BB#4: derived from LLVM BB %for.body9.preheader
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#3 BB#10
	%R18<def> = COPY %R19, %D9<imp-use,kill>, %D9<imp-def>
	STRi64 %D9, %FP, -16; mem:ST8[%1+24]
	STRi64 %D9, %FP, -24; mem:ST8[%1+16]
	STRi64 %D9, %FP, -32; mem:ST8[%1+8]
	STRi64 %D9, %FP, -40; mem:ST8[%1]
	%R25<def> = COPY %R23
	%R26<def> = COPY %R19
	BNONE32 <BB#6>, %STATUS<imp-use>
    Successors according to CFG: BB#6(?%)

BB#5: derived from LLVM BB %for.cond64.preheader
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#8
	%R25<def> = COPY %R22
	%R26<def> = COPY %R19
	BNONE32 <BB#9>, %STATUS<imp-use>
    Successors according to CFG: BB#9(?%)

BB#6: derived from LLVM BB %for.body9
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#4 BB#8
	%R27<def> = LSL32ri %R26, 2, %STATUS<imp-def,dead>
	%R27<def> = ADDrr_r32 %R21, %R27<kill>, %STATUS<imp-def,dead>
	%R27<def> = LDRf32 %R27<kill>, 0; mem:Volatile LD4[%add.ptr10](tbaa=!2)
	%R32<def> = COPY %R17
	%R34<def> = COPY %R25
	%R33<def> = COPY %R19
    Successors according to CFG: BB#7(?%)

BB#7: derived from LLVM BB %for.body13
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26 %R27 %R32 %R33 %R34
    Predecessors according to CFG: BB#6 BB#7
	%R37<def> = LDRf32 %R34, -8; mem:Volatile LD4[%scevgep8](tbaa=!2)
	%R35<def> = ADDri_r32 %R32, 16, %STATUS<imp-def,dead>
	%R36<def> = ADDri_r32 %R34, 16, %STATUS<imp-def,dead>
	%R38<def> = LDRf32 %R34, -4; mem:Volatile LD4[%scevgep9](tbaa=!2)
	%R33<def> = ADDri_r32 %R33<kill>, 4, %STATUS<imp-def,dead>
	%R39<def> = LDRf32 %R34, 0; mem:Volatile LD4[%lsr.iv5](tbaa=!2)
	%R40<def> = LDRf32 %R34<kill>, 4; mem:Volatile LD4[%scevgep7](tbaa=!2)
	%D21<def> = LDRf64 %R32, -8; mem:LD4[%scevgep17](tbaa=!2) LD4[%scevgep15](tbaa=!2)
	%R34<def> = LDRi32_r32 %FP, -4; mem:LD4[FixedStack2]
	GID %CONFIG<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %R34<kill>
	GIE %CONFIG<imp-def,dead>
	%R43<def,tied1> = FMADDrr_r32 %R43<tied0>, %R27, %R37<kill>, %STATUS<imp-def,dead>, %D21<imp-use,kill>, %D21<imp-def>
	%R42<def,tied1> = FMADDrr_r32 %R42<tied0>, %R27, %R38<kill>, %STATUS<imp-def,dead>, %D21<imp-use,kill>, %D21<imp-def>
	%R44<def> = COPY %R43, %D22<imp-def>
	%R45<def> = COPY %R42, %D21<imp-use,kill>, %D22<imp-use,kill>, %D22<imp-def>
	STRf64 %D22<kill>, %R32, -8; mem:ST4[%scevgep17](tbaa=!2) ST4[%scevgep15](tbaa=!2)
	%R34<def> = LDRf32 %R32, 0; mem:LD4[%lsr.iv1214](tbaa=!2)
	%R34<def,tied1> = FMADDrr_r32 %R34<kill,tied0>, %R27, %R39<kill>, %STATUS<imp-def,dead>
	STRf32 %R34<kill>, %R32, 0; mem:ST4[%lsr.iv1214](tbaa=!2)
	%R37<def> = LDRf32 %R32, 4; mem:LD4[%scevgep16](tbaa=!2)
	%R37<def,tied1> = FMADDrr_r32 %R37<kill,tied0>, %R27, %R40<kill>, %STATUS<imp-def,dead>
	%R34<def,dead> = CMPri_r32 %R33, 8, %STATUS<imp-def>
	STRf32 %R37<kill>, %R32<kill>, 4; mem:ST4[%scevgep16](tbaa=!2)
	%R32<def> = COPY %R35<kill>
	%R34<def> = COPY %R36<kill>
	BCC <BB#7>, 8, %STATUS<imp-use>
	BNONE32 <BB#8>, %STATUS<imp-use>
    Successors according to CFG: BB#7(0x7c000000 / 0x80000000 = 96.88%) BB#8(0x04000000 / 0x80000000 = 3.12%)

BB#8: derived from LLVM BB %for.end60
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#7
	%R25<def> = ADDrr_r32 %R25<kill>, %IP, %STATUS<imp-def,dead>
	%R26<def> = ADDri_r32 %R26<kill>, 1, %STATUS<imp-def,dead>
	%R27<def,dead> = CMPrr_r32 %R26, %R3, %STATUS<imp-def>
	BCC <BB#5>, 0, %STATUS<imp-use>
	BNONE32 <BB#6>, %STATUS<imp-use>
    Successors according to CFG: BB#5(0x04000000 / 0x80000000 = 3.12%) BB#6(0x7c000000 / 0x80000000 = 96.88%)

BB#9: derived from LLVM BB %for.body66
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#5 BB#9
	%R27<def> = ADDrr_r32 %R16, %R26, %STATUS<imp-def,dead>
	%R33<def> = LDRf32 %R27<kill>, 0; mem:LD4[%sunkaddr30](tbaa=!2)
	%R27<def> = ADDri_r32 %R25, 4, %STATUS<imp-def,dead>
	%R26<def> = ADDri_r32 %R26<kill>, 4, %STATUS<imp-def,dead>
	%R34<def> = LDRf32 %R25, 0; mem:Volatile LD4[%lsr.iv24](tbaa=!2)
	%R32<def> = LDRi32_r32 %FP, -4; mem:LD4[FixedStack2]
	GID %CONFIG<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %R32<kill>
	GIE %CONFIG<imp-def,dead>
	%R33<def> = FADDrr_r32 %R33<kill>, %R34<kill>, %STATUS<imp-def,dead>
	%R32<def,dead> = CMPri_r32 %R26, 32, %STATUS<imp-def>
	STRf32 %R33<kill>, %R25<kill>, 0; mem:Volatile ST4[%lsr.iv24](tbaa=!2)
	%R25<def> = COPY %R27<kill>
	BCC <BB#9>, 1, %STATUS<imp-use>
	BNONE32 <BB#10>, %STATUS<imp-use>
    Successors according to CFG: BB#10(0x04000000 / 0x80000000 = 3.12%) BB#9(0x7c000000 / 0x80000000 = 96.88%)

BB#10: derived from LLVM BB %for.end75
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#9
	%R22<def> = ADDri_r32 %R22<kill>, 32, %STATUS<imp-def,dead>
	%R23<def> = ADDri_r32 %R23<kill>, 32, %STATUS<imp-def,dead>
	%R24<def> = ADDri_r32 %R24<kill>, 8, %STATUS<imp-def,dead>
	%R25<def,dead> = CMPrr_r32 %R24, %R3, %STATUS<imp-def>
	BCC <BB#4>, 8, %STATUS<imp-use>
	BNONE32 <BB#11>, %STATUS<imp-use>
    Successors according to CFG: BB#4(0x7c000000 / 0x80000000 = 96.88%) BB#11(0x04000000 / 0x80000000 = 3.12%)

BB#11: derived from LLVM BB %for.end78
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20
    Predecessors according to CFG: BB#10
	%R2<def> = ADDrr_r32 %R2<kill>, %IP, %STATUS<imp-def,dead>
	%R20<def> = ADDri_r32 %R20<kill>, 1, %STATUS<imp-def,dead>
	%R21<def,dead> = CMPrr_r32 %R20, %R3, %STATUS<imp-def>
	BCC <BB#3>, 1, %STATUS<imp-use>
	BNONE32 <BB#12>, %STATUS<imp-use>
    Successors according to CFG: BB#12(0x04000000 / 0x80000000 = 3.12%) BB#3(0x7c000000 / 0x80000000 = 96.88%)

BB#12: derived from LLVM BB %for.end81
    Predecessors according to CFG: BB#1 BB#11
	%R0<def> = LDRi32_r32 %FP, -44; mem:LD4[FixedStack1]
	GID
	%CONFIG<def> = MOVTS32_core %R0<kill>
	GIE %CONFIG<imp-use,kill>
	%LR<def> = LDRi64 %SP, 48; flags: FrameSetup
	%SP<def> = ADDri_r32 %SP, 48, %STATUS<imp-def>
	RTS

# End machine code for function matmac.


<----------------->
Analyzing block 0
BB#0: 
    Live Ins: %R0 %R1 %R2 %R3
	%SP<def,tied2> = STRi64_pmd %LR, %SP<tied0>, -48; flags: FrameSetup
	%FP<def> = ADDri_r32 %SP, 48, %STATUS<imp-def>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	GID %CONFIG<imp-def>
	%R19<def> = MOVFS32_core %CONFIG, %D9<imp-def>
	STRi32_r32 %R19, %FP, -44; mem:ST4[FixedStack1]
	%IP<def> = MOVi32ri 65535
	%IP<def,tied1> = MOVTi32ri %IP<kill,tied0>, 65521
	%R18<def> = ANDrr_r32 %R19, %IP<kill>, %STATUS<imp-def>, %D9<imp-use,kill>, %D9<imp-def>
	%R19<def,tied1> = MOVTi32ri %R19<tied0>, 72, %D9<imp-use,kill>, %D9<imp-def>
	STRi64 %D9<kill>, %FP, -8; mem:ST4[FixedStack3] ST4[FixedStack2]
	GIE %CONFIG<imp-use,kill>
    Successors according to CFG: BB#1(?%)

<----------------->
Analyzing block 1
BB#1: derived from LLVM BB %entry
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#0
	%IP<def,dead> = CMPri_r32 %R3, 1, %STATUS<imp-def>
	BCC <BB#12>, 8, %STATUS<imp-use>
	BNONE32 <BB#2>, %STATUS<imp-use>
    Successors according to CFG: BB#2(0x50000000 / 0x80000000 = 62.50%) BB#12(0x30000000 / 0x80000000 = 37.50%)

<----------------->
Erasing the jump to successor block 1
# Machine code for function matmac: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=32, align=8, at location [SP-40]
  fi#1: size=4, align=4, at location [SP-44]
  fi#2: size=4, align=4, at location [SP-4]
  fi#3: size=4, align=8, at location [SP-8]
Function Live Ins: %R0, %R1, %R2, %R3

BB#0: 
    Live Ins: %R0 %R1 %R2 %R3
	%SP<def,tied2> = STRi64_pmd %LR, %SP<tied0>, -48; flags: FrameSetup
	%FP<def> = ADDri_r32 %SP, 48, %STATUS<imp-def>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	GID %CONFIG<imp-def>
	%R19<def> = MOVFS32_core %CONFIG, %D9<imp-def>
	STRi32_r32 %R19, %FP, -44; mem:ST4[FixedStack1]
	%IP<def> = MOVi32ri 65535
	%IP<def,tied1> = MOVTi32ri %IP<kill,tied0>, 65521
	%R18<def> = ANDrr_r32 %R19, %IP<kill>, %STATUS<imp-def>, %D9<imp-use,kill>, %D9<imp-def>
	%R19<def,tied1> = MOVTi32ri %R19<tied0>, 72, %D9<imp-use,kill>, %D9<imp-def>
	STRi64 %D9<kill>, %FP, -8; mem:ST4[FixedStack3] ST4[FixedStack2]
	GIE %CONFIG<imp-use,kill>
    Successors according to CFG: BB#1(?%)

BB#1: derived from LLVM BB %entry
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#0
	%IP<def,dead> = CMPri_r32 %R3, 1, %STATUS<imp-def>
	BCC <BB#12>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#2(0x50000000 / 0x80000000 = 62.50%) BB#12(0x30000000 / 0x80000000 = 37.50%)

BB#2: derived from LLVM BB %for.body3.lr.ph.preheader
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#1
	%IP<def> = LSL32ri %R3, 2, %STATUS<imp-def,dead>
	%R1<def> = ADDri_r32 %R1<kill>, 8, %STATUS<imp-def,dead>
	%R16<def> = MOViPTR %FP, -40
	%R17<def> = ADDri_r32 %R16, 8, %STATUS<imp-def,dead>
	%R19<def> = MOVi32ri 0, %D9<imp-def>
	%R20<def> = COPY %R19
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %for.body3.lr.ph
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20
    Predecessors according to CFG: BB#2 BB#11
	%R21<def> = LDRi32_r32 %FP, -8; mem:LD4[FixedStack3]
	GID %CONFIG<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %R21<kill>
	GIE %CONFIG<imp-def,dead>
	%R21<def> = IMULrr_r32 %R20, %R3, %STATUS<imp-def,dead>
	%R21<def> = LSL32ri %R21<kill>, 2, %STATUS<imp-def,dead>
	%R21<def> = ADDrr_r32 %R0, %R21<kill>, %STATUS<imp-def,dead>
	%R22<def> = COPY %R2
	%R23<def> = COPY %R1
	%R24<def> = COPY %R19
    Successors according to CFG: BB#4(?%)

BB#4: derived from LLVM BB %for.body9.preheader
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#3 BB#10
	%R18<def> = COPY %R19, %D9<imp-use,kill>, %D9<imp-def>
	STRi64 %D9, %FP, -16; mem:ST8[%1+24]
	STRi64 %D9, %FP, -24; mem:ST8[%1+16]
	STRi64 %D9, %FP, -32; mem:ST8[%1+8]
	STRi64 %D9, %FP, -40; mem:ST8[%1]
	%R25<def> = COPY %R23
	%R26<def> = COPY %R19
	BNONE32 <BB#6>, %STATUS<imp-use>
    Successors according to CFG: BB#6(?%)

BB#5: derived from LLVM BB %for.cond64.preheader
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#8
	%R25<def> = COPY %R22
	%R26<def> = COPY %R19
	BNONE32 <BB#9>, %STATUS<imp-use>
    Successors according to CFG: BB#9(?%)

BB#6: derived from LLVM BB %for.body9
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#4 BB#8
	%R27<def> = LSL32ri %R26, 2, %STATUS<imp-def,dead>
	%R27<def> = ADDrr_r32 %R21, %R27<kill>, %STATUS<imp-def,dead>
	%R27<def> = LDRf32 %R27<kill>, 0; mem:Volatile LD4[%add.ptr10](tbaa=!2)
	%R32<def> = COPY %R17
	%R34<def> = COPY %R25
	%R33<def> = COPY %R19
    Successors according to CFG: BB#7(?%)

BB#7: derived from LLVM BB %for.body13
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26 %R27 %R32 %R33 %R34
    Predecessors according to CFG: BB#6 BB#7
	%R37<def> = LDRf32 %R34, -8; mem:Volatile LD4[%scevgep8](tbaa=!2)
	%R35<def> = ADDri_r32 %R32, 16, %STATUS<imp-def,dead>
	%R36<def> = ADDri_r32 %R34, 16, %STATUS<imp-def,dead>
	%R38<def> = LDRf32 %R34, -4; mem:Volatile LD4[%scevgep9](tbaa=!2)
	%R33<def> = ADDri_r32 %R33<kill>, 4, %STATUS<imp-def,dead>
	%R39<def> = LDRf32 %R34, 0; mem:Volatile LD4[%lsr.iv5](tbaa=!2)
	%R40<def> = LDRf32 %R34<kill>, 4; mem:Volatile LD4[%scevgep7](tbaa=!2)
	%D21<def> = LDRf64 %R32, -8; mem:LD4[%scevgep17](tbaa=!2) LD4[%scevgep15](tbaa=!2)
	%R34<def> = LDRi32_r32 %FP, -4; mem:LD4[FixedStack2]
	GID %CONFIG<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %R34<kill>
	GIE %CONFIG<imp-def,dead>
	%R43<def,tied1> = FMADDrr_r32 %R43<tied0>, %R27, %R37<kill>, %STATUS<imp-def,dead>, %D21<imp-use,kill>, %D21<imp-def>
	%R42<def,tied1> = FMADDrr_r32 %R42<tied0>, %R27, %R38<kill>, %STATUS<imp-def,dead>, %D21<imp-use,kill>, %D21<imp-def>
	%R44<def> = COPY %R43, %D22<imp-def>
	%R45<def> = COPY %R42, %D21<imp-use,kill>, %D22<imp-use,kill>, %D22<imp-def>
	STRf64 %D22<kill>, %R32, -8; mem:ST4[%scevgep17](tbaa=!2) ST4[%scevgep15](tbaa=!2)
	%R34<def> = LDRf32 %R32, 0; mem:LD4[%lsr.iv1214](tbaa=!2)
	%R34<def,tied1> = FMADDrr_r32 %R34<kill,tied0>, %R27, %R39<kill>, %STATUS<imp-def,dead>
	STRf32 %R34<kill>, %R32, 0; mem:ST4[%lsr.iv1214](tbaa=!2)
	%R37<def> = LDRf32 %R32, 4; mem:LD4[%scevgep16](tbaa=!2)
	%R37<def,tied1> = FMADDrr_r32 %R37<kill,tied0>, %R27, %R40<kill>, %STATUS<imp-def,dead>
	%R34<def,dead> = CMPri_r32 %R33, 8, %STATUS<imp-def>
	STRf32 %R37<kill>, %R32<kill>, 4; mem:ST4[%scevgep16](tbaa=!2)
	%R32<def> = COPY %R35<kill>
	%R34<def> = COPY %R36<kill>
	BCC <BB#7>, 8, %STATUS<imp-use>
	BNONE32 <BB#8>, %STATUS<imp-use>
    Successors according to CFG: BB#7(0x7c000000 / 0x80000000 = 96.88%) BB#8(0x04000000 / 0x80000000 = 3.12%)

BB#8: derived from LLVM BB %for.end60
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#7
	%R25<def> = ADDrr_r32 %R25<kill>, %IP, %STATUS<imp-def,dead>
	%R26<def> = ADDri_r32 %R26<kill>, 1, %STATUS<imp-def,dead>
	%R27<def,dead> = CMPrr_r32 %R26, %R3, %STATUS<imp-def>
	BCC <BB#5>, 0, %STATUS<imp-use>
	BNONE32 <BB#6>, %STATUS<imp-use>
    Successors according to CFG: BB#5(0x04000000 / 0x80000000 = 3.12%) BB#6(0x7c000000 / 0x80000000 = 96.88%)

BB#9: derived from LLVM BB %for.body66
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#5 BB#9
	%R27<def> = ADDrr_r32 %R16, %R26, %STATUS<imp-def,dead>
	%R33<def> = LDRf32 %R27<kill>, 0; mem:LD4[%sunkaddr30](tbaa=!2)
	%R27<def> = ADDri_r32 %R25, 4, %STATUS<imp-def,dead>
	%R26<def> = ADDri_r32 %R26<kill>, 4, %STATUS<imp-def,dead>
	%R34<def> = LDRf32 %R25, 0; mem:Volatile LD4[%lsr.iv24](tbaa=!2)
	%R32<def> = LDRi32_r32 %FP, -4; mem:LD4[FixedStack2]
	GID %CONFIG<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %R32<kill>
	GIE %CONFIG<imp-def,dead>
	%R33<def> = FADDrr_r32 %R33<kill>, %R34<kill>, %STATUS<imp-def,dead>
	%R32<def,dead> = CMPri_r32 %R26, 32, %STATUS<imp-def>
	STRf32 %R33<kill>, %R25<kill>, 0; mem:Volatile ST4[%lsr.iv24](tbaa=!2)
	%R25<def> = COPY %R27<kill>
	BCC <BB#9>, 1, %STATUS<imp-use>
	BNONE32 <BB#10>, %STATUS<imp-use>
    Successors according to CFG: BB#10(0x04000000 / 0x80000000 = 3.12%) BB#9(0x7c000000 / 0x80000000 = 96.88%)

BB#10: derived from LLVM BB %for.end75
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#9
	%R22<def> = ADDri_r32 %R22<kill>, 32, %STATUS<imp-def,dead>
	%R23<def> = ADDri_r32 %R23<kill>, 32, %STATUS<imp-def,dead>
	%R24<def> = ADDri_r32 %R24<kill>, 8, %STATUS<imp-def,dead>
	%R25<def,dead> = CMPrr_r32 %R24, %R3, %STATUS<imp-def>
	BCC <BB#4>, 8, %STATUS<imp-use>
	BNONE32 <BB#11>, %STATUS<imp-use>
    Successors according to CFG: BB#4(0x7c000000 / 0x80000000 = 96.88%) BB#11(0x04000000 / 0x80000000 = 3.12%)

BB#11: derived from LLVM BB %for.end78
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20
    Predecessors according to CFG: BB#10
	%R2<def> = ADDrr_r32 %R2<kill>, %IP, %STATUS<imp-def,dead>
	%R20<def> = ADDri_r32 %R20<kill>, 1, %STATUS<imp-def,dead>
	%R21<def,dead> = CMPrr_r32 %R20, %R3, %STATUS<imp-def>
	BCC <BB#3>, 1, %STATUS<imp-use>
	BNONE32 <BB#12>, %STATUS<imp-use>
    Successors according to CFG: BB#12(0x04000000 / 0x80000000 = 3.12%) BB#3(0x7c000000 / 0x80000000 = 96.88%)

BB#12: derived from LLVM BB %for.end81
    Predecessors according to CFG: BB#1 BB#11
	%R0<def> = LDRi32_r32 %FP, -44; mem:LD4[FixedStack1]
	GID
	%CONFIG<def> = MOVTS32_core %R0<kill>
	GIE %CONFIG<imp-use,kill>
	%LR<def> = LDRi64 %SP, 48; flags: FrameSetup
	%SP<def> = ADDri_r32 %SP, 48, %STATUS<imp-def>
	RTS

# End machine code for function matmac.


<----------------->
Analyzing block 2
BB#2: derived from LLVM BB %for.body3.lr.ph.preheader
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#1
	%IP<def> = LSL32ri %R3, 2, %STATUS<imp-def,dead>
	%R1<def> = ADDri_r32 %R1<kill>, 8, %STATUS<imp-def,dead>
	%R16<def> = MOViPTR %FP, -40
	%R17<def> = ADDri_r32 %R16, 8, %STATUS<imp-def,dead>
	%R19<def> = MOVi32ri 0, %D9<imp-def>
	%R20<def> = COPY %R19
    Successors according to CFG: BB#3(?%)

<----------------->
Analyzing block 3
BB#3: derived from LLVM BB %for.body3.lr.ph
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20
    Predecessors according to CFG: BB#2 BB#11
	%R21<def> = LDRi32_r32 %FP, -8; mem:LD4[FixedStack3]
	GID %CONFIG<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %R21<kill>
	GIE %CONFIG<imp-def,dead>
	%R21<def> = IMULrr_r32 %R20, %R3, %STATUS<imp-def,dead>
	%R21<def> = LSL32ri %R21<kill>, 2, %STATUS<imp-def,dead>
	%R21<def> = ADDrr_r32 %R0, %R21<kill>, %STATUS<imp-def,dead>
	%R22<def> = COPY %R2
	%R23<def> = COPY %R1
	%R24<def> = COPY %R19
    Successors according to CFG: BB#4(?%)

<----------------->
Analyzing block 4
BB#4: derived from LLVM BB %for.body9.preheader
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#3 BB#10
	%R18<def> = COPY %R19, %D9<imp-use,kill>, %D9<imp-def>
	STRi64 %D9, %FP, -16; mem:ST8[%1+24]
	STRi64 %D9, %FP, -24; mem:ST8[%1+16]
	STRi64 %D9, %FP, -32; mem:ST8[%1+8]
	STRi64 %D9, %FP, -40; mem:ST8[%1]
	%R25<def> = COPY %R23
	%R26<def> = COPY %R19
	BNONE32 <BB#6>, %STATUS<imp-use>
    Successors according to CFG: BB#6(?%)

<----------------->
Analyzing block 5
BB#5: derived from LLVM BB %for.cond64.preheader
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#8
	%R25<def> = COPY %R22
	%R26<def> = COPY %R19
	BNONE32 <BB#9>, %STATUS<imp-use>
    Successors according to CFG: BB#9(?%)

<----------------->
Analyzing block 6
BB#6: derived from LLVM BB %for.body9
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#4 BB#8
	%R27<def> = LSL32ri %R26, 2, %STATUS<imp-def,dead>
	%R27<def> = ADDrr_r32 %R21, %R27<kill>, %STATUS<imp-def,dead>
	%R27<def> = LDRf32 %R27<kill>, 0; mem:Volatile LD4[%add.ptr10](tbaa=!2)
	%R32<def> = COPY %R17
	%R34<def> = COPY %R25
	%R33<def> = COPY %R19
    Successors according to CFG: BB#7(?%)

<----------------->
Analyzing block 7
BB#7: derived from LLVM BB %for.body13
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26 %R27 %R32 %R33 %R34
    Predecessors according to CFG: BB#6 BB#7
	%R37<def> = LDRf32 %R34, -8; mem:Volatile LD4[%scevgep8](tbaa=!2)
	%R35<def> = ADDri_r32 %R32, 16, %STATUS<imp-def,dead>
	%R36<def> = ADDri_r32 %R34, 16, %STATUS<imp-def,dead>
	%R38<def> = LDRf32 %R34, -4; mem:Volatile LD4[%scevgep9](tbaa=!2)
	%R33<def> = ADDri_r32 %R33<kill>, 4, %STATUS<imp-def,dead>
	%R39<def> = LDRf32 %R34, 0; mem:Volatile LD4[%lsr.iv5](tbaa=!2)
	%R40<def> = LDRf32 %R34<kill>, 4; mem:Volatile LD4[%scevgep7](tbaa=!2)
	%D21<def> = LDRf64 %R32, -8; mem:LD4[%scevgep17](tbaa=!2) LD4[%scevgep15](tbaa=!2)
	%R34<def> = LDRi32_r32 %FP, -4; mem:LD4[FixedStack2]
	GID %CONFIG<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %R34<kill>
	GIE %CONFIG<imp-def,dead>
	%R43<def,tied1> = FMADDrr_r32 %R43<tied0>, %R27, %R37<kill>, %STATUS<imp-def,dead>, %D21<imp-use,kill>, %D21<imp-def>
	%R42<def,tied1> = FMADDrr_r32 %R42<tied0>, %R27, %R38<kill>, %STATUS<imp-def,dead>, %D21<imp-use,kill>, %D21<imp-def>
	%R44<def> = COPY %R43, %D22<imp-def>
	%R45<def> = COPY %R42, %D21<imp-use,kill>, %D22<imp-use,kill>, %D22<imp-def>
	STRf64 %D22<kill>, %R32, -8; mem:ST4[%scevgep17](tbaa=!2) ST4[%scevgep15](tbaa=!2)
	%R34<def> = LDRf32 %R32, 0; mem:LD4[%lsr.iv1214](tbaa=!2)
	%R34<def,tied1> = FMADDrr_r32 %R34<kill,tied0>, %R27, %R39<kill>, %STATUS<imp-def,dead>
	STRf32 %R34<kill>, %R32, 0; mem:ST4[%lsr.iv1214](tbaa=!2)
	%R37<def> = LDRf32 %R32, 4; mem:LD4[%scevgep16](tbaa=!2)
	%R37<def,tied1> = FMADDrr_r32 %R37<kill,tied0>, %R27, %R40<kill>, %STATUS<imp-def,dead>
	%R34<def,dead> = CMPri_r32 %R33, 8, %STATUS<imp-def>
	STRf32 %R37<kill>, %R32<kill>, 4; mem:ST4[%scevgep16](tbaa=!2)
	%R32<def> = COPY %R35<kill>
	%R34<def> = COPY %R36<kill>
	BCC <BB#7>, 8, %STATUS<imp-use>
	BNONE32 <BB#8>, %STATUS<imp-use>
    Successors according to CFG: BB#7(0x7c000000 / 0x80000000 = 96.88%) BB#8(0x04000000 / 0x80000000 = 3.12%)

<----------------->
Erasing the jump to successor block 7
# Machine code for function matmac: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=32, align=8, at location [SP-40]
  fi#1: size=4, align=4, at location [SP-44]
  fi#2: size=4, align=4, at location [SP-4]
  fi#3: size=4, align=8, at location [SP-8]
Function Live Ins: %R0, %R1, %R2, %R3

BB#0: 
    Live Ins: %R0 %R1 %R2 %R3
	%SP<def,tied2> = STRi64_pmd %LR, %SP<tied0>, -48; flags: FrameSetup
	%FP<def> = ADDri_r32 %SP, 48, %STATUS<imp-def>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	GID %CONFIG<imp-def>
	%R19<def> = MOVFS32_core %CONFIG, %D9<imp-def>
	STRi32_r32 %R19, %FP, -44; mem:ST4[FixedStack1]
	%IP<def> = MOVi32ri 65535
	%IP<def,tied1> = MOVTi32ri %IP<kill,tied0>, 65521
	%R18<def> = ANDrr_r32 %R19, %IP<kill>, %STATUS<imp-def>, %D9<imp-use,kill>, %D9<imp-def>
	%R19<def,tied1> = MOVTi32ri %R19<tied0>, 72, %D9<imp-use,kill>, %D9<imp-def>
	STRi64 %D9<kill>, %FP, -8; mem:ST4[FixedStack3] ST4[FixedStack2]
	GIE %CONFIG<imp-use,kill>
    Successors according to CFG: BB#1(?%)

BB#1: derived from LLVM BB %entry
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#0
	%IP<def,dead> = CMPri_r32 %R3, 1, %STATUS<imp-def>
	BCC <BB#12>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#2(0x50000000 / 0x80000000 = 62.50%) BB#12(0x30000000 / 0x80000000 = 37.50%)

BB#2: derived from LLVM BB %for.body3.lr.ph.preheader
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#1
	%IP<def> = LSL32ri %R3, 2, %STATUS<imp-def,dead>
	%R1<def> = ADDri_r32 %R1<kill>, 8, %STATUS<imp-def,dead>
	%R16<def> = MOViPTR %FP, -40
	%R17<def> = ADDri_r32 %R16, 8, %STATUS<imp-def,dead>
	%R19<def> = MOVi32ri 0, %D9<imp-def>
	%R20<def> = COPY %R19
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %for.body3.lr.ph
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20
    Predecessors according to CFG: BB#2 BB#11
	%R21<def> = LDRi32_r32 %FP, -8; mem:LD4[FixedStack3]
	GID %CONFIG<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %R21<kill>
	GIE %CONFIG<imp-def,dead>
	%R21<def> = IMULrr_r32 %R20, %R3, %STATUS<imp-def,dead>
	%R21<def> = LSL32ri %R21<kill>, 2, %STATUS<imp-def,dead>
	%R21<def> = ADDrr_r32 %R0, %R21<kill>, %STATUS<imp-def,dead>
	%R22<def> = COPY %R2
	%R23<def> = COPY %R1
	%R24<def> = COPY %R19
    Successors according to CFG: BB#4(?%)

BB#4: derived from LLVM BB %for.body9.preheader
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#3 BB#10
	%R18<def> = COPY %R19, %D9<imp-use,kill>, %D9<imp-def>
	STRi64 %D9, %FP, -16; mem:ST8[%1+24]
	STRi64 %D9, %FP, -24; mem:ST8[%1+16]
	STRi64 %D9, %FP, -32; mem:ST8[%1+8]
	STRi64 %D9, %FP, -40; mem:ST8[%1]
	%R25<def> = COPY %R23
	%R26<def> = COPY %R19
	BNONE32 <BB#6>, %STATUS<imp-use>
    Successors according to CFG: BB#6(?%)

BB#5: derived from LLVM BB %for.cond64.preheader
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#8
	%R25<def> = COPY %R22
	%R26<def> = COPY %R19
	BNONE32 <BB#9>, %STATUS<imp-use>
    Successors according to CFG: BB#9(?%)

BB#6: derived from LLVM BB %for.body9
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#4 BB#8
	%R27<def> = LSL32ri %R26, 2, %STATUS<imp-def,dead>
	%R27<def> = ADDrr_r32 %R21, %R27<kill>, %STATUS<imp-def,dead>
	%R27<def> = LDRf32 %R27<kill>, 0; mem:Volatile LD4[%add.ptr10](tbaa=!2)
	%R32<def> = COPY %R17
	%R34<def> = COPY %R25
	%R33<def> = COPY %R19
    Successors according to CFG: BB#7(?%)

BB#7: derived from LLVM BB %for.body13
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26 %R27 %R32 %R33 %R34
    Predecessors according to CFG: BB#6 BB#7
	%R37<def> = LDRf32 %R34, -8; mem:Volatile LD4[%scevgep8](tbaa=!2)
	%R35<def> = ADDri_r32 %R32, 16, %STATUS<imp-def,dead>
	%R36<def> = ADDri_r32 %R34, 16, %STATUS<imp-def,dead>
	%R38<def> = LDRf32 %R34, -4; mem:Volatile LD4[%scevgep9](tbaa=!2)
	%R33<def> = ADDri_r32 %R33<kill>, 4, %STATUS<imp-def,dead>
	%R39<def> = LDRf32 %R34, 0; mem:Volatile LD4[%lsr.iv5](tbaa=!2)
	%R40<def> = LDRf32 %R34<kill>, 4; mem:Volatile LD4[%scevgep7](tbaa=!2)
	%D21<def> = LDRf64 %R32, -8; mem:LD4[%scevgep17](tbaa=!2) LD4[%scevgep15](tbaa=!2)
	%R34<def> = LDRi32_r32 %FP, -4; mem:LD4[FixedStack2]
	GID %CONFIG<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %R34<kill>
	GIE %CONFIG<imp-def,dead>
	%R43<def,tied1> = FMADDrr_r32 %R43<tied0>, %R27, %R37<kill>, %STATUS<imp-def,dead>, %D21<imp-use,kill>, %D21<imp-def>
	%R42<def,tied1> = FMADDrr_r32 %R42<tied0>, %R27, %R38<kill>, %STATUS<imp-def,dead>, %D21<imp-use,kill>, %D21<imp-def>
	%R44<def> = COPY %R43, %D22<imp-def>
	%R45<def> = COPY %R42, %D21<imp-use,kill>, %D22<imp-use,kill>, %D22<imp-def>
	STRf64 %D22<kill>, %R32, -8; mem:ST4[%scevgep17](tbaa=!2) ST4[%scevgep15](tbaa=!2)
	%R34<def> = LDRf32 %R32, 0; mem:LD4[%lsr.iv1214](tbaa=!2)
	%R34<def,tied1> = FMADDrr_r32 %R34<kill,tied0>, %R27, %R39<kill>, %STATUS<imp-def,dead>
	STRf32 %R34<kill>, %R32, 0; mem:ST4[%lsr.iv1214](tbaa=!2)
	%R37<def> = LDRf32 %R32, 4; mem:LD4[%scevgep16](tbaa=!2)
	%R37<def,tied1> = FMADDrr_r32 %R37<kill,tied0>, %R27, %R40<kill>, %STATUS<imp-def,dead>
	%R34<def,dead> = CMPri_r32 %R33, 8, %STATUS<imp-def>
	STRf32 %R37<kill>, %R32<kill>, 4; mem:ST4[%scevgep16](tbaa=!2)
	%R32<def> = COPY %R35<kill>
	%R34<def> = COPY %R36<kill>
	BCC <BB#7>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#7(0x7c000000 / 0x80000000 = 96.88%) BB#8(0x04000000 / 0x80000000 = 3.12%)

BB#8: derived from LLVM BB %for.end60
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#7
	%R25<def> = ADDrr_r32 %R25<kill>, %IP, %STATUS<imp-def,dead>
	%R26<def> = ADDri_r32 %R26<kill>, 1, %STATUS<imp-def,dead>
	%R27<def,dead> = CMPrr_r32 %R26, %R3, %STATUS<imp-def>
	BCC <BB#5>, 0, %STATUS<imp-use>
	BNONE32 <BB#6>, %STATUS<imp-use>
    Successors according to CFG: BB#5(0x04000000 / 0x80000000 = 3.12%) BB#6(0x7c000000 / 0x80000000 = 96.88%)

BB#9: derived from LLVM BB %for.body66
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#5 BB#9
	%R27<def> = ADDrr_r32 %R16, %R26, %STATUS<imp-def,dead>
	%R33<def> = LDRf32 %R27<kill>, 0; mem:LD4[%sunkaddr30](tbaa=!2)
	%R27<def> = ADDri_r32 %R25, 4, %STATUS<imp-def,dead>
	%R26<def> = ADDri_r32 %R26<kill>, 4, %STATUS<imp-def,dead>
	%R34<def> = LDRf32 %R25, 0; mem:Volatile LD4[%lsr.iv24](tbaa=!2)
	%R32<def> = LDRi32_r32 %FP, -4; mem:LD4[FixedStack2]
	GID %CONFIG<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %R32<kill>
	GIE %CONFIG<imp-def,dead>
	%R33<def> = FADDrr_r32 %R33<kill>, %R34<kill>, %STATUS<imp-def,dead>
	%R32<def,dead> = CMPri_r32 %R26, 32, %STATUS<imp-def>
	STRf32 %R33<kill>, %R25<kill>, 0; mem:Volatile ST4[%lsr.iv24](tbaa=!2)
	%R25<def> = COPY %R27<kill>
	BCC <BB#9>, 1, %STATUS<imp-use>
	BNONE32 <BB#10>, %STATUS<imp-use>
    Successors according to CFG: BB#10(0x04000000 / 0x80000000 = 3.12%) BB#9(0x7c000000 / 0x80000000 = 96.88%)

BB#10: derived from LLVM BB %for.end75
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#9
	%R22<def> = ADDri_r32 %R22<kill>, 32, %STATUS<imp-def,dead>
	%R23<def> = ADDri_r32 %R23<kill>, 32, %STATUS<imp-def,dead>
	%R24<def> = ADDri_r32 %R24<kill>, 8, %STATUS<imp-def,dead>
	%R25<def,dead> = CMPrr_r32 %R24, %R3, %STATUS<imp-def>
	BCC <BB#4>, 8, %STATUS<imp-use>
	BNONE32 <BB#11>, %STATUS<imp-use>
    Successors according to CFG: BB#4(0x7c000000 / 0x80000000 = 96.88%) BB#11(0x04000000 / 0x80000000 = 3.12%)

BB#11: derived from LLVM BB %for.end78
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20
    Predecessors according to CFG: BB#10
	%R2<def> = ADDrr_r32 %R2<kill>, %IP, %STATUS<imp-def,dead>
	%R20<def> = ADDri_r32 %R20<kill>, 1, %STATUS<imp-def,dead>
	%R21<def,dead> = CMPrr_r32 %R20, %R3, %STATUS<imp-def>
	BCC <BB#3>, 1, %STATUS<imp-use>
	BNONE32 <BB#12>, %STATUS<imp-use>
    Successors according to CFG: BB#12(0x04000000 / 0x80000000 = 3.12%) BB#3(0x7c000000 / 0x80000000 = 96.88%)

BB#12: derived from LLVM BB %for.end81
    Predecessors according to CFG: BB#1 BB#11
	%R0<def> = LDRi32_r32 %FP, -44; mem:LD4[FixedStack1]
	GID
	%CONFIG<def> = MOVTS32_core %R0<kill>
	GIE %CONFIG<imp-use,kill>
	%LR<def> = LDRi64 %SP, 48; flags: FrameSetup
	%SP<def> = ADDri_r32 %SP, 48, %STATUS<imp-def>
	RTS

# End machine code for function matmac.


<----------------->
Analyzing block 8
BB#8: derived from LLVM BB %for.end60
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#7
	%R25<def> = ADDrr_r32 %R25<kill>, %IP, %STATUS<imp-def,dead>
	%R26<def> = ADDri_r32 %R26<kill>, 1, %STATUS<imp-def,dead>
	%R27<def,dead> = CMPrr_r32 %R26, %R3, %STATUS<imp-def>
	BCC <BB#5>, 0, %STATUS<imp-use>
	BNONE32 <BB#6>, %STATUS<imp-use>
    Successors according to CFG: BB#5(0x04000000 / 0x80000000 = 3.12%) BB#6(0x7c000000 / 0x80000000 = 96.88%)

<----------------->
Analyzing block 9
BB#9: derived from LLVM BB %for.body66
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#5 BB#9
	%R27<def> = ADDrr_r32 %R16, %R26, %STATUS<imp-def,dead>
	%R33<def> = LDRf32 %R27<kill>, 0; mem:LD4[%sunkaddr30](tbaa=!2)
	%R27<def> = ADDri_r32 %R25, 4, %STATUS<imp-def,dead>
	%R26<def> = ADDri_r32 %R26<kill>, 4, %STATUS<imp-def,dead>
	%R34<def> = LDRf32 %R25, 0; mem:Volatile LD4[%lsr.iv24](tbaa=!2)
	%R32<def> = LDRi32_r32 %FP, -4; mem:LD4[FixedStack2]
	GID %CONFIG<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %R32<kill>
	GIE %CONFIG<imp-def,dead>
	%R33<def> = FADDrr_r32 %R33<kill>, %R34<kill>, %STATUS<imp-def,dead>
	%R32<def,dead> = CMPri_r32 %R26, 32, %STATUS<imp-def>
	STRf32 %R33<kill>, %R25<kill>, 0; mem:Volatile ST4[%lsr.iv24](tbaa=!2)
	%R25<def> = COPY %R27<kill>
	BCC <BB#9>, 1, %STATUS<imp-use>
	BNONE32 <BB#10>, %STATUS<imp-use>
    Successors according to CFG: BB#10(0x04000000 / 0x80000000 = 3.12%) BB#9(0x7c000000 / 0x80000000 = 96.88%)

<----------------->
Erasing the jump to successor block 9
# Machine code for function matmac: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=32, align=8, at location [SP-40]
  fi#1: size=4, align=4, at location [SP-44]
  fi#2: size=4, align=4, at location [SP-4]
  fi#3: size=4, align=8, at location [SP-8]
Function Live Ins: %R0, %R1, %R2, %R3

BB#0: 
    Live Ins: %R0 %R1 %R2 %R3
	%SP<def,tied2> = STRi64_pmd %LR, %SP<tied0>, -48; flags: FrameSetup
	%FP<def> = ADDri_r32 %SP, 48, %STATUS<imp-def>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	GID %CONFIG<imp-def>
	%R19<def> = MOVFS32_core %CONFIG, %D9<imp-def>
	STRi32_r32 %R19, %FP, -44; mem:ST4[FixedStack1]
	%IP<def> = MOVi32ri 65535
	%IP<def,tied1> = MOVTi32ri %IP<kill,tied0>, 65521
	%R18<def> = ANDrr_r32 %R19, %IP<kill>, %STATUS<imp-def>, %D9<imp-use,kill>, %D9<imp-def>
	%R19<def,tied1> = MOVTi32ri %R19<tied0>, 72, %D9<imp-use,kill>, %D9<imp-def>
	STRi64 %D9<kill>, %FP, -8; mem:ST4[FixedStack3] ST4[FixedStack2]
	GIE %CONFIG<imp-use,kill>
    Successors according to CFG: BB#1(?%)

BB#1: derived from LLVM BB %entry
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#0
	%IP<def,dead> = CMPri_r32 %R3, 1, %STATUS<imp-def>
	BCC <BB#12>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#2(0x50000000 / 0x80000000 = 62.50%) BB#12(0x30000000 / 0x80000000 = 37.50%)

BB#2: derived from LLVM BB %for.body3.lr.ph.preheader
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#1
	%IP<def> = LSL32ri %R3, 2, %STATUS<imp-def,dead>
	%R1<def> = ADDri_r32 %R1<kill>, 8, %STATUS<imp-def,dead>
	%R16<def> = MOViPTR %FP, -40
	%R17<def> = ADDri_r32 %R16, 8, %STATUS<imp-def,dead>
	%R19<def> = MOVi32ri 0, %D9<imp-def>
	%R20<def> = COPY %R19
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %for.body3.lr.ph
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20
    Predecessors according to CFG: BB#2 BB#11
	%R21<def> = LDRi32_r32 %FP, -8; mem:LD4[FixedStack3]
	GID %CONFIG<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %R21<kill>
	GIE %CONFIG<imp-def,dead>
	%R21<def> = IMULrr_r32 %R20, %R3, %STATUS<imp-def,dead>
	%R21<def> = LSL32ri %R21<kill>, 2, %STATUS<imp-def,dead>
	%R21<def> = ADDrr_r32 %R0, %R21<kill>, %STATUS<imp-def,dead>
	%R22<def> = COPY %R2
	%R23<def> = COPY %R1
	%R24<def> = COPY %R19
    Successors according to CFG: BB#4(?%)

BB#4: derived from LLVM BB %for.body9.preheader
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#3 BB#10
	%R18<def> = COPY %R19, %D9<imp-use,kill>, %D9<imp-def>
	STRi64 %D9, %FP, -16; mem:ST8[%1+24]
	STRi64 %D9, %FP, -24; mem:ST8[%1+16]
	STRi64 %D9, %FP, -32; mem:ST8[%1+8]
	STRi64 %D9, %FP, -40; mem:ST8[%1]
	%R25<def> = COPY %R23
	%R26<def> = COPY %R19
	BNONE32 <BB#6>, %STATUS<imp-use>
    Successors according to CFG: BB#6(?%)

BB#5: derived from LLVM BB %for.cond64.preheader
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#8
	%R25<def> = COPY %R22
	%R26<def> = COPY %R19
	BNONE32 <BB#9>, %STATUS<imp-use>
    Successors according to CFG: BB#9(?%)

BB#6: derived from LLVM BB %for.body9
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#4 BB#8
	%R27<def> = LSL32ri %R26, 2, %STATUS<imp-def,dead>
	%R27<def> = ADDrr_r32 %R21, %R27<kill>, %STATUS<imp-def,dead>
	%R27<def> = LDRf32 %R27<kill>, 0; mem:Volatile LD4[%add.ptr10](tbaa=!2)
	%R32<def> = COPY %R17
	%R34<def> = COPY %R25
	%R33<def> = COPY %R19
    Successors according to CFG: BB#7(?%)

BB#7: derived from LLVM BB %for.body13
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26 %R27 %R32 %R33 %R34
    Predecessors according to CFG: BB#6 BB#7
	%R37<def> = LDRf32 %R34, -8; mem:Volatile LD4[%scevgep8](tbaa=!2)
	%R35<def> = ADDri_r32 %R32, 16, %STATUS<imp-def,dead>
	%R36<def> = ADDri_r32 %R34, 16, %STATUS<imp-def,dead>
	%R38<def> = LDRf32 %R34, -4; mem:Volatile LD4[%scevgep9](tbaa=!2)
	%R33<def> = ADDri_r32 %R33<kill>, 4, %STATUS<imp-def,dead>
	%R39<def> = LDRf32 %R34, 0; mem:Volatile LD4[%lsr.iv5](tbaa=!2)
	%R40<def> = LDRf32 %R34<kill>, 4; mem:Volatile LD4[%scevgep7](tbaa=!2)
	%D21<def> = LDRf64 %R32, -8; mem:LD4[%scevgep17](tbaa=!2) LD4[%scevgep15](tbaa=!2)
	%R34<def> = LDRi32_r32 %FP, -4; mem:LD4[FixedStack2]
	GID %CONFIG<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %R34<kill>
	GIE %CONFIG<imp-def,dead>
	%R43<def,tied1> = FMADDrr_r32 %R43<tied0>, %R27, %R37<kill>, %STATUS<imp-def,dead>, %D21<imp-use,kill>, %D21<imp-def>
	%R42<def,tied1> = FMADDrr_r32 %R42<tied0>, %R27, %R38<kill>, %STATUS<imp-def,dead>, %D21<imp-use,kill>, %D21<imp-def>
	%R44<def> = COPY %R43, %D22<imp-def>
	%R45<def> = COPY %R42, %D21<imp-use,kill>, %D22<imp-use,kill>, %D22<imp-def>
	STRf64 %D22<kill>, %R32, -8; mem:ST4[%scevgep17](tbaa=!2) ST4[%scevgep15](tbaa=!2)
	%R34<def> = LDRf32 %R32, 0; mem:LD4[%lsr.iv1214](tbaa=!2)
	%R34<def,tied1> = FMADDrr_r32 %R34<kill,tied0>, %R27, %R39<kill>, %STATUS<imp-def,dead>
	STRf32 %R34<kill>, %R32, 0; mem:ST4[%lsr.iv1214](tbaa=!2)
	%R37<def> = LDRf32 %R32, 4; mem:LD4[%scevgep16](tbaa=!2)
	%R37<def,tied1> = FMADDrr_r32 %R37<kill,tied0>, %R27, %R40<kill>, %STATUS<imp-def,dead>
	%R34<def,dead> = CMPri_r32 %R33, 8, %STATUS<imp-def>
	STRf32 %R37<kill>, %R32<kill>, 4; mem:ST4[%scevgep16](tbaa=!2)
	%R32<def> = COPY %R35<kill>
	%R34<def> = COPY %R36<kill>
	BCC <BB#7>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#7(0x7c000000 / 0x80000000 = 96.88%) BB#8(0x04000000 / 0x80000000 = 3.12%)

BB#8: derived from LLVM BB %for.end60
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#7
	%R25<def> = ADDrr_r32 %R25<kill>, %IP, %STATUS<imp-def,dead>
	%R26<def> = ADDri_r32 %R26<kill>, 1, %STATUS<imp-def,dead>
	%R27<def,dead> = CMPrr_r32 %R26, %R3, %STATUS<imp-def>
	BCC <BB#5>, 0, %STATUS<imp-use>
	BNONE32 <BB#6>, %STATUS<imp-use>
    Successors according to CFG: BB#5(0x04000000 / 0x80000000 = 3.12%) BB#6(0x7c000000 / 0x80000000 = 96.88%)

BB#9: derived from LLVM BB %for.body66
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#5 BB#9
	%R27<def> = ADDrr_r32 %R16, %R26, %STATUS<imp-def,dead>
	%R33<def> = LDRf32 %R27<kill>, 0; mem:LD4[%sunkaddr30](tbaa=!2)
	%R27<def> = ADDri_r32 %R25, 4, %STATUS<imp-def,dead>
	%R26<def> = ADDri_r32 %R26<kill>, 4, %STATUS<imp-def,dead>
	%R34<def> = LDRf32 %R25, 0; mem:Volatile LD4[%lsr.iv24](tbaa=!2)
	%R32<def> = LDRi32_r32 %FP, -4; mem:LD4[FixedStack2]
	GID %CONFIG<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %R32<kill>
	GIE %CONFIG<imp-def,dead>
	%R33<def> = FADDrr_r32 %R33<kill>, %R34<kill>, %STATUS<imp-def,dead>
	%R32<def,dead> = CMPri_r32 %R26, 32, %STATUS<imp-def>
	STRf32 %R33<kill>, %R25<kill>, 0; mem:Volatile ST4[%lsr.iv24](tbaa=!2)
	%R25<def> = COPY %R27<kill>
	BCC <BB#9>, 1, %STATUS<imp-use>
    Successors according to CFG: BB#10(0x04000000 / 0x80000000 = 3.12%) BB#9(0x7c000000 / 0x80000000 = 96.88%)

BB#10: derived from LLVM BB %for.end75
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#9
	%R22<def> = ADDri_r32 %R22<kill>, 32, %STATUS<imp-def,dead>
	%R23<def> = ADDri_r32 %R23<kill>, 32, %STATUS<imp-def,dead>
	%R24<def> = ADDri_r32 %R24<kill>, 8, %STATUS<imp-def,dead>
	%R25<def,dead> = CMPrr_r32 %R24, %R3, %STATUS<imp-def>
	BCC <BB#4>, 8, %STATUS<imp-use>
	BNONE32 <BB#11>, %STATUS<imp-use>
    Successors according to CFG: BB#4(0x7c000000 / 0x80000000 = 96.88%) BB#11(0x04000000 / 0x80000000 = 3.12%)

BB#11: derived from LLVM BB %for.end78
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20
    Predecessors according to CFG: BB#10
	%R2<def> = ADDrr_r32 %R2<kill>, %IP, %STATUS<imp-def,dead>
	%R20<def> = ADDri_r32 %R20<kill>, 1, %STATUS<imp-def,dead>
	%R21<def,dead> = CMPrr_r32 %R20, %R3, %STATUS<imp-def>
	BCC <BB#3>, 1, %STATUS<imp-use>
	BNONE32 <BB#12>, %STATUS<imp-use>
    Successors according to CFG: BB#12(0x04000000 / 0x80000000 = 3.12%) BB#3(0x7c000000 / 0x80000000 = 96.88%)

BB#12: derived from LLVM BB %for.end81
    Predecessors according to CFG: BB#1 BB#11
	%R0<def> = LDRi32_r32 %FP, -44; mem:LD4[FixedStack1]
	GID
	%CONFIG<def> = MOVTS32_core %R0<kill>
	GIE %CONFIG<imp-use,kill>
	%LR<def> = LDRi64 %SP, 48; flags: FrameSetup
	%SP<def> = ADDri_r32 %SP, 48, %STATUS<imp-def>
	RTS

# End machine code for function matmac.


<----------------->
Analyzing block 10
BB#10: derived from LLVM BB %for.end75
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#9
	%R22<def> = ADDri_r32 %R22<kill>, 32, %STATUS<imp-def,dead>
	%R23<def> = ADDri_r32 %R23<kill>, 32, %STATUS<imp-def,dead>
	%R24<def> = ADDri_r32 %R24<kill>, 8, %STATUS<imp-def,dead>
	%R25<def,dead> = CMPrr_r32 %R24, %R3, %STATUS<imp-def>
	BCC <BB#4>, 8, %STATUS<imp-use>
	BNONE32 <BB#11>, %STATUS<imp-use>
    Successors according to CFG: BB#4(0x7c000000 / 0x80000000 = 96.88%) BB#11(0x04000000 / 0x80000000 = 3.12%)

<----------------->
Erasing the jump to successor block 10
# Machine code for function matmac: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=32, align=8, at location [SP-40]
  fi#1: size=4, align=4, at location [SP-44]
  fi#2: size=4, align=4, at location [SP-4]
  fi#3: size=4, align=8, at location [SP-8]
Function Live Ins: %R0, %R1, %R2, %R3

BB#0: 
    Live Ins: %R0 %R1 %R2 %R3
	%SP<def,tied2> = STRi64_pmd %LR, %SP<tied0>, -48; flags: FrameSetup
	%FP<def> = ADDri_r32 %SP, 48, %STATUS<imp-def>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	GID %CONFIG<imp-def>
	%R19<def> = MOVFS32_core %CONFIG, %D9<imp-def>
	STRi32_r32 %R19, %FP, -44; mem:ST4[FixedStack1]
	%IP<def> = MOVi32ri 65535
	%IP<def,tied1> = MOVTi32ri %IP<kill,tied0>, 65521
	%R18<def> = ANDrr_r32 %R19, %IP<kill>, %STATUS<imp-def>, %D9<imp-use,kill>, %D9<imp-def>
	%R19<def,tied1> = MOVTi32ri %R19<tied0>, 72, %D9<imp-use,kill>, %D9<imp-def>
	STRi64 %D9<kill>, %FP, -8; mem:ST4[FixedStack3] ST4[FixedStack2]
	GIE %CONFIG<imp-use,kill>
    Successors according to CFG: BB#1(?%)

BB#1: derived from LLVM BB %entry
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#0
	%IP<def,dead> = CMPri_r32 %R3, 1, %STATUS<imp-def>
	BCC <BB#12>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#2(0x50000000 / 0x80000000 = 62.50%) BB#12(0x30000000 / 0x80000000 = 37.50%)

BB#2: derived from LLVM BB %for.body3.lr.ph.preheader
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#1
	%IP<def> = LSL32ri %R3, 2, %STATUS<imp-def,dead>
	%R1<def> = ADDri_r32 %R1<kill>, 8, %STATUS<imp-def,dead>
	%R16<def> = MOViPTR %FP, -40
	%R17<def> = ADDri_r32 %R16, 8, %STATUS<imp-def,dead>
	%R19<def> = MOVi32ri 0, %D9<imp-def>
	%R20<def> = COPY %R19
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %for.body3.lr.ph
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20
    Predecessors according to CFG: BB#2 BB#11
	%R21<def> = LDRi32_r32 %FP, -8; mem:LD4[FixedStack3]
	GID %CONFIG<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %R21<kill>
	GIE %CONFIG<imp-def,dead>
	%R21<def> = IMULrr_r32 %R20, %R3, %STATUS<imp-def,dead>
	%R21<def> = LSL32ri %R21<kill>, 2, %STATUS<imp-def,dead>
	%R21<def> = ADDrr_r32 %R0, %R21<kill>, %STATUS<imp-def,dead>
	%R22<def> = COPY %R2
	%R23<def> = COPY %R1
	%R24<def> = COPY %R19
    Successors according to CFG: BB#4(?%)

BB#4: derived from LLVM BB %for.body9.preheader
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#3 BB#10
	%R18<def> = COPY %R19, %D9<imp-use,kill>, %D9<imp-def>
	STRi64 %D9, %FP, -16; mem:ST8[%1+24]
	STRi64 %D9, %FP, -24; mem:ST8[%1+16]
	STRi64 %D9, %FP, -32; mem:ST8[%1+8]
	STRi64 %D9, %FP, -40; mem:ST8[%1]
	%R25<def> = COPY %R23
	%R26<def> = COPY %R19
	BNONE32 <BB#6>, %STATUS<imp-use>
    Successors according to CFG: BB#6(?%)

BB#5: derived from LLVM BB %for.cond64.preheader
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#8
	%R25<def> = COPY %R22
	%R26<def> = COPY %R19
	BNONE32 <BB#9>, %STATUS<imp-use>
    Successors according to CFG: BB#9(?%)

BB#6: derived from LLVM BB %for.body9
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#4 BB#8
	%R27<def> = LSL32ri %R26, 2, %STATUS<imp-def,dead>
	%R27<def> = ADDrr_r32 %R21, %R27<kill>, %STATUS<imp-def,dead>
	%R27<def> = LDRf32 %R27<kill>, 0; mem:Volatile LD4[%add.ptr10](tbaa=!2)
	%R32<def> = COPY %R17
	%R34<def> = COPY %R25
	%R33<def> = COPY %R19
    Successors according to CFG: BB#7(?%)

BB#7: derived from LLVM BB %for.body13
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26 %R27 %R32 %R33 %R34
    Predecessors according to CFG: BB#6 BB#7
	%R37<def> = LDRf32 %R34, -8; mem:Volatile LD4[%scevgep8](tbaa=!2)
	%R35<def> = ADDri_r32 %R32, 16, %STATUS<imp-def,dead>
	%R36<def> = ADDri_r32 %R34, 16, %STATUS<imp-def,dead>
	%R38<def> = LDRf32 %R34, -4; mem:Volatile LD4[%scevgep9](tbaa=!2)
	%R33<def> = ADDri_r32 %R33<kill>, 4, %STATUS<imp-def,dead>
	%R39<def> = LDRf32 %R34, 0; mem:Volatile LD4[%lsr.iv5](tbaa=!2)
	%R40<def> = LDRf32 %R34<kill>, 4; mem:Volatile LD4[%scevgep7](tbaa=!2)
	%D21<def> = LDRf64 %R32, -8; mem:LD4[%scevgep17](tbaa=!2) LD4[%scevgep15](tbaa=!2)
	%R34<def> = LDRi32_r32 %FP, -4; mem:LD4[FixedStack2]
	GID %CONFIG<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %R34<kill>
	GIE %CONFIG<imp-def,dead>
	%R43<def,tied1> = FMADDrr_r32 %R43<tied0>, %R27, %R37<kill>, %STATUS<imp-def,dead>, %D21<imp-use,kill>, %D21<imp-def>
	%R42<def,tied1> = FMADDrr_r32 %R42<tied0>, %R27, %R38<kill>, %STATUS<imp-def,dead>, %D21<imp-use,kill>, %D21<imp-def>
	%R44<def> = COPY %R43, %D22<imp-def>
	%R45<def> = COPY %R42, %D21<imp-use,kill>, %D22<imp-use,kill>, %D22<imp-def>
	STRf64 %D22<kill>, %R32, -8; mem:ST4[%scevgep17](tbaa=!2) ST4[%scevgep15](tbaa=!2)
	%R34<def> = LDRf32 %R32, 0; mem:LD4[%lsr.iv1214](tbaa=!2)
	%R34<def,tied1> = FMADDrr_r32 %R34<kill,tied0>, %R27, %R39<kill>, %STATUS<imp-def,dead>
	STRf32 %R34<kill>, %R32, 0; mem:ST4[%lsr.iv1214](tbaa=!2)
	%R37<def> = LDRf32 %R32, 4; mem:LD4[%scevgep16](tbaa=!2)
	%R37<def,tied1> = FMADDrr_r32 %R37<kill,tied0>, %R27, %R40<kill>, %STATUS<imp-def,dead>
	%R34<def,dead> = CMPri_r32 %R33, 8, %STATUS<imp-def>
	STRf32 %R37<kill>, %R32<kill>, 4; mem:ST4[%scevgep16](tbaa=!2)
	%R32<def> = COPY %R35<kill>
	%R34<def> = COPY %R36<kill>
	BCC <BB#7>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#7(0x7c000000 / 0x80000000 = 96.88%) BB#8(0x04000000 / 0x80000000 = 3.12%)

BB#8: derived from LLVM BB %for.end60
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#7
	%R25<def> = ADDrr_r32 %R25<kill>, %IP, %STATUS<imp-def,dead>
	%R26<def> = ADDri_r32 %R26<kill>, 1, %STATUS<imp-def,dead>
	%R27<def,dead> = CMPrr_r32 %R26, %R3, %STATUS<imp-def>
	BCC <BB#5>, 0, %STATUS<imp-use>
	BNONE32 <BB#6>, %STATUS<imp-use>
    Successors according to CFG: BB#5(0x04000000 / 0x80000000 = 3.12%) BB#6(0x7c000000 / 0x80000000 = 96.88%)

BB#9: derived from LLVM BB %for.body66
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#5 BB#9
	%R27<def> = ADDrr_r32 %R16, %R26, %STATUS<imp-def,dead>
	%R33<def> = LDRf32 %R27<kill>, 0; mem:LD4[%sunkaddr30](tbaa=!2)
	%R27<def> = ADDri_r32 %R25, 4, %STATUS<imp-def,dead>
	%R26<def> = ADDri_r32 %R26<kill>, 4, %STATUS<imp-def,dead>
	%R34<def> = LDRf32 %R25, 0; mem:Volatile LD4[%lsr.iv24](tbaa=!2)
	%R32<def> = LDRi32_r32 %FP, -4; mem:LD4[FixedStack2]
	GID %CONFIG<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %R32<kill>
	GIE %CONFIG<imp-def,dead>
	%R33<def> = FADDrr_r32 %R33<kill>, %R34<kill>, %STATUS<imp-def,dead>
	%R32<def,dead> = CMPri_r32 %R26, 32, %STATUS<imp-def>
	STRf32 %R33<kill>, %R25<kill>, 0; mem:Volatile ST4[%lsr.iv24](tbaa=!2)
	%R25<def> = COPY %R27<kill>
	BCC <BB#9>, 1, %STATUS<imp-use>
    Successors according to CFG: BB#10(0x04000000 / 0x80000000 = 3.12%) BB#9(0x7c000000 / 0x80000000 = 96.88%)

BB#10: derived from LLVM BB %for.end75
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#9
	%R22<def> = ADDri_r32 %R22<kill>, 32, %STATUS<imp-def,dead>
	%R23<def> = ADDri_r32 %R23<kill>, 32, %STATUS<imp-def,dead>
	%R24<def> = ADDri_r32 %R24<kill>, 8, %STATUS<imp-def,dead>
	%R25<def,dead> = CMPrr_r32 %R24, %R3, %STATUS<imp-def>
	BCC <BB#4>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#4(0x7c000000 / 0x80000000 = 96.88%) BB#11(0x04000000 / 0x80000000 = 3.12%)

BB#11: derived from LLVM BB %for.end78
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20
    Predecessors according to CFG: BB#10
	%R2<def> = ADDrr_r32 %R2<kill>, %IP, %STATUS<imp-def,dead>
	%R20<def> = ADDri_r32 %R20<kill>, 1, %STATUS<imp-def,dead>
	%R21<def,dead> = CMPrr_r32 %R20, %R3, %STATUS<imp-def>
	BCC <BB#3>, 1, %STATUS<imp-use>
	BNONE32 <BB#12>, %STATUS<imp-use>
    Successors according to CFG: BB#12(0x04000000 / 0x80000000 = 3.12%) BB#3(0x7c000000 / 0x80000000 = 96.88%)

BB#12: derived from LLVM BB %for.end81
    Predecessors according to CFG: BB#1 BB#11
	%R0<def> = LDRi32_r32 %FP, -44; mem:LD4[FixedStack1]
	GID
	%CONFIG<def> = MOVTS32_core %R0<kill>
	GIE %CONFIG<imp-use,kill>
	%LR<def> = LDRi64 %SP, 48; flags: FrameSetup
	%SP<def> = ADDri_r32 %SP, 48, %STATUS<imp-def>
	RTS

# End machine code for function matmac.


<----------------->
Analyzing block 11
BB#11: derived from LLVM BB %for.end78
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20
    Predecessors according to CFG: BB#10
	%R2<def> = ADDrr_r32 %R2<kill>, %IP, %STATUS<imp-def,dead>
	%R20<def> = ADDri_r32 %R20<kill>, 1, %STATUS<imp-def,dead>
	%R21<def,dead> = CMPrr_r32 %R20, %R3, %STATUS<imp-def>
	BCC <BB#3>, 1, %STATUS<imp-use>
	BNONE32 <BB#12>, %STATUS<imp-use>
    Successors according to CFG: BB#12(0x04000000 / 0x80000000 = 3.12%) BB#3(0x7c000000 / 0x80000000 = 96.88%)

<----------------->
Erasing the jump to successor block 11
# Machine code for function matmac: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=32, align=8, at location [SP-40]
  fi#1: size=4, align=4, at location [SP-44]
  fi#2: size=4, align=4, at location [SP-4]
  fi#3: size=4, align=8, at location [SP-8]
Function Live Ins: %R0, %R1, %R2, %R3

BB#0: 
    Live Ins: %R0 %R1 %R2 %R3
	%SP<def,tied2> = STRi64_pmd %LR, %SP<tied0>, -48; flags: FrameSetup
	%FP<def> = ADDri_r32 %SP, 48, %STATUS<imp-def>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	GID %CONFIG<imp-def>
	%R19<def> = MOVFS32_core %CONFIG, %D9<imp-def>
	STRi32_r32 %R19, %FP, -44; mem:ST4[FixedStack1]
	%IP<def> = MOVi32ri 65535
	%IP<def,tied1> = MOVTi32ri %IP<kill,tied0>, 65521
	%R18<def> = ANDrr_r32 %R19, %IP<kill>, %STATUS<imp-def>, %D9<imp-use,kill>, %D9<imp-def>
	%R19<def,tied1> = MOVTi32ri %R19<tied0>, 72, %D9<imp-use,kill>, %D9<imp-def>
	STRi64 %D9<kill>, %FP, -8; mem:ST4[FixedStack3] ST4[FixedStack2]
	GIE %CONFIG<imp-use,kill>
    Successors according to CFG: BB#1(?%)

BB#1: derived from LLVM BB %entry
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#0
	%IP<def,dead> = CMPri_r32 %R3, 1, %STATUS<imp-def>
	BCC <BB#12>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#2(0x50000000 / 0x80000000 = 62.50%) BB#12(0x30000000 / 0x80000000 = 37.50%)

BB#2: derived from LLVM BB %for.body3.lr.ph.preheader
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#1
	%IP<def> = LSL32ri %R3, 2, %STATUS<imp-def,dead>
	%R1<def> = ADDri_r32 %R1<kill>, 8, %STATUS<imp-def,dead>
	%R16<def> = MOViPTR %FP, -40
	%R17<def> = ADDri_r32 %R16, 8, %STATUS<imp-def,dead>
	%R19<def> = MOVi32ri 0, %D9<imp-def>
	%R20<def> = COPY %R19
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %for.body3.lr.ph
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20
    Predecessors according to CFG: BB#2 BB#11
	%R21<def> = LDRi32_r32 %FP, -8; mem:LD4[FixedStack3]
	GID %CONFIG<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %R21<kill>
	GIE %CONFIG<imp-def,dead>
	%R21<def> = IMULrr_r32 %R20, %R3, %STATUS<imp-def,dead>
	%R21<def> = LSL32ri %R21<kill>, 2, %STATUS<imp-def,dead>
	%R21<def> = ADDrr_r32 %R0, %R21<kill>, %STATUS<imp-def,dead>
	%R22<def> = COPY %R2
	%R23<def> = COPY %R1
	%R24<def> = COPY %R19
    Successors according to CFG: BB#4(?%)

BB#4: derived from LLVM BB %for.body9.preheader
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#3 BB#10
	%R18<def> = COPY %R19, %D9<imp-use,kill>, %D9<imp-def>
	STRi64 %D9, %FP, -16; mem:ST8[%1+24]
	STRi64 %D9, %FP, -24; mem:ST8[%1+16]
	STRi64 %D9, %FP, -32; mem:ST8[%1+8]
	STRi64 %D9, %FP, -40; mem:ST8[%1]
	%R25<def> = COPY %R23
	%R26<def> = COPY %R19
	BNONE32 <BB#6>, %STATUS<imp-use>
    Successors according to CFG: BB#6(?%)

BB#5: derived from LLVM BB %for.cond64.preheader
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#8
	%R25<def> = COPY %R22
	%R26<def> = COPY %R19
	BNONE32 <BB#9>, %STATUS<imp-use>
    Successors according to CFG: BB#9(?%)

BB#6: derived from LLVM BB %for.body9
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#4 BB#8
	%R27<def> = LSL32ri %R26, 2, %STATUS<imp-def,dead>
	%R27<def> = ADDrr_r32 %R21, %R27<kill>, %STATUS<imp-def,dead>
	%R27<def> = LDRf32 %R27<kill>, 0; mem:Volatile LD4[%add.ptr10](tbaa=!2)
	%R32<def> = COPY %R17
	%R34<def> = COPY %R25
	%R33<def> = COPY %R19
    Successors according to CFG: BB#7(?%)

BB#7: derived from LLVM BB %for.body13
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26 %R27 %R32 %R33 %R34
    Predecessors according to CFG: BB#6 BB#7
	%R37<def> = LDRf32 %R34, -8; mem:Volatile LD4[%scevgep8](tbaa=!2)
	%R35<def> = ADDri_r32 %R32, 16, %STATUS<imp-def,dead>
	%R36<def> = ADDri_r32 %R34, 16, %STATUS<imp-def,dead>
	%R38<def> = LDRf32 %R34, -4; mem:Volatile LD4[%scevgep9](tbaa=!2)
	%R33<def> = ADDri_r32 %R33<kill>, 4, %STATUS<imp-def,dead>
	%R39<def> = LDRf32 %R34, 0; mem:Volatile LD4[%lsr.iv5](tbaa=!2)
	%R40<def> = LDRf32 %R34<kill>, 4; mem:Volatile LD4[%scevgep7](tbaa=!2)
	%D21<def> = LDRf64 %R32, -8; mem:LD4[%scevgep17](tbaa=!2) LD4[%scevgep15](tbaa=!2)
	%R34<def> = LDRi32_r32 %FP, -4; mem:LD4[FixedStack2]
	GID %CONFIG<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %R34<kill>
	GIE %CONFIG<imp-def,dead>
	%R43<def,tied1> = FMADDrr_r32 %R43<tied0>, %R27, %R37<kill>, %STATUS<imp-def,dead>, %D21<imp-use,kill>, %D21<imp-def>
	%R42<def,tied1> = FMADDrr_r32 %R42<tied0>, %R27, %R38<kill>, %STATUS<imp-def,dead>, %D21<imp-use,kill>, %D21<imp-def>
	%R44<def> = COPY %R43, %D22<imp-def>
	%R45<def> = COPY %R42, %D21<imp-use,kill>, %D22<imp-use,kill>, %D22<imp-def>
	STRf64 %D22<kill>, %R32, -8; mem:ST4[%scevgep17](tbaa=!2) ST4[%scevgep15](tbaa=!2)
	%R34<def> = LDRf32 %R32, 0; mem:LD4[%lsr.iv1214](tbaa=!2)
	%R34<def,tied1> = FMADDrr_r32 %R34<kill,tied0>, %R27, %R39<kill>, %STATUS<imp-def,dead>
	STRf32 %R34<kill>, %R32, 0; mem:ST4[%lsr.iv1214](tbaa=!2)
	%R37<def> = LDRf32 %R32, 4; mem:LD4[%scevgep16](tbaa=!2)
	%R37<def,tied1> = FMADDrr_r32 %R37<kill,tied0>, %R27, %R40<kill>, %STATUS<imp-def,dead>
	%R34<def,dead> = CMPri_r32 %R33, 8, %STATUS<imp-def>
	STRf32 %R37<kill>, %R32<kill>, 4; mem:ST4[%scevgep16](tbaa=!2)
	%R32<def> = COPY %R35<kill>
	%R34<def> = COPY %R36<kill>
	BCC <BB#7>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#7(0x7c000000 / 0x80000000 = 96.88%) BB#8(0x04000000 / 0x80000000 = 3.12%)

BB#8: derived from LLVM BB %for.end60
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#7
	%R25<def> = ADDrr_r32 %R25<kill>, %IP, %STATUS<imp-def,dead>
	%R26<def> = ADDri_r32 %R26<kill>, 1, %STATUS<imp-def,dead>
	%R27<def,dead> = CMPrr_r32 %R26, %R3, %STATUS<imp-def>
	BCC <BB#5>, 0, %STATUS<imp-use>
	BNONE32 <BB#6>, %STATUS<imp-use>
    Successors according to CFG: BB#5(0x04000000 / 0x80000000 = 3.12%) BB#6(0x7c000000 / 0x80000000 = 96.88%)

BB#9: derived from LLVM BB %for.body66
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#5 BB#9
	%R27<def> = ADDrr_r32 %R16, %R26, %STATUS<imp-def,dead>
	%R33<def> = LDRf32 %R27<kill>, 0; mem:LD4[%sunkaddr30](tbaa=!2)
	%R27<def> = ADDri_r32 %R25, 4, %STATUS<imp-def,dead>
	%R26<def> = ADDri_r32 %R26<kill>, 4, %STATUS<imp-def,dead>
	%R34<def> = LDRf32 %R25, 0; mem:Volatile LD4[%lsr.iv24](tbaa=!2)
	%R32<def> = LDRi32_r32 %FP, -4; mem:LD4[FixedStack2]
	GID %CONFIG<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %R32<kill>
	GIE %CONFIG<imp-def,dead>
	%R33<def> = FADDrr_r32 %R33<kill>, %R34<kill>, %STATUS<imp-def,dead>
	%R32<def,dead> = CMPri_r32 %R26, 32, %STATUS<imp-def>
	STRf32 %R33<kill>, %R25<kill>, 0; mem:Volatile ST4[%lsr.iv24](tbaa=!2)
	%R25<def> = COPY %R27<kill>
	BCC <BB#9>, 1, %STATUS<imp-use>
    Successors according to CFG: BB#10(0x04000000 / 0x80000000 = 3.12%) BB#9(0x7c000000 / 0x80000000 = 96.88%)

BB#10: derived from LLVM BB %for.end75
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#9
	%R22<def> = ADDri_r32 %R22<kill>, 32, %STATUS<imp-def,dead>
	%R23<def> = ADDri_r32 %R23<kill>, 32, %STATUS<imp-def,dead>
	%R24<def> = ADDri_r32 %R24<kill>, 8, %STATUS<imp-def,dead>
	%R25<def,dead> = CMPrr_r32 %R24, %R3, %STATUS<imp-def>
	BCC <BB#4>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#4(0x7c000000 / 0x80000000 = 96.88%) BB#11(0x04000000 / 0x80000000 = 3.12%)

BB#11: derived from LLVM BB %for.end78
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20
    Predecessors according to CFG: BB#10
	%R2<def> = ADDrr_r32 %R2<kill>, %IP, %STATUS<imp-def,dead>
	%R20<def> = ADDri_r32 %R20<kill>, 1, %STATUS<imp-def,dead>
	%R21<def,dead> = CMPrr_r32 %R20, %R3, %STATUS<imp-def>
	BCC <BB#3>, 1, %STATUS<imp-use>
    Successors according to CFG: BB#12(0x04000000 / 0x80000000 = 3.12%) BB#3(0x7c000000 / 0x80000000 = 96.88%)

BB#12: derived from LLVM BB %for.end81
    Predecessors according to CFG: BB#1 BB#11
	%R0<def> = LDRi32_r32 %FP, -44; mem:LD4[FixedStack1]
	GID
	%CONFIG<def> = MOVTS32_core %R0<kill>
	GIE %CONFIG<imp-use,kill>
	%LR<def> = LDRi64 %SP, 48; flags: FrameSetup
	%SP<def> = ADDri_r32 %SP, 48, %STATUS<imp-def>
	RTS

# End machine code for function matmac.


<----------------->
Analyzing block 12
BB#12: derived from LLVM BB %for.end81
    Predecessors according to CFG: BB#1 BB#11
	%R0<def> = LDRi32_r32 %FP, -44; mem:LD4[FixedStack1]
	GID
	%CONFIG<def> = MOVTS32_core %R0<kill>
	GIE %CONFIG<imp-use,kill>
	%LR<def> = LDRi64 %SP, 48; flags: FrameSetup
	%SP<def> = ADDri_r32 %SP, 48, %STATUS<imp-def>
	RTS

<----------------->
Analyzing block 2
BB#2: derived from LLVM BB %for.body3.lr.ph.preheader
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#1
	%IP<def> = LSL32ri %R3, 2, %STATUS<imp-def,dead>
	%R1<def> = ADDri_r32 %R1<kill>, 8, %STATUS<imp-def,dead>
	%R16<def> = MOViPTR %FP, -40
	%R17<def> = ADDri_r32 %R16, 8, %STATUS<imp-def,dead>
	%R19<def> = MOVi32ri 0, %D9<imp-def>
	%R20<def> = COPY %R19
    Successors according to CFG: BB#3(?%)

<----------------->
Analyzing block 11
BB#11: derived from LLVM BB %for.end78
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20
    Predecessors according to CFG: BB#10
	%R2<def> = ADDrr_r32 %R2<kill>, %IP, %STATUS<imp-def,dead>
	%R20<def> = ADDri_r32 %R20<kill>, 1, %STATUS<imp-def,dead>
	%R21<def,dead> = CMPrr_r32 %R20, %R3, %STATUS<imp-def>
	BCC <BB#3>, 1, %STATUS<imp-use>
    Successors according to CFG: BB#12(0x04000000 / 0x80000000 = 3.12%) BB#3(0x7c000000 / 0x80000000 = 96.88%)

<----------------->
Removing branches out of BB#11
# Machine code for function matmac: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=32, align=8, at location [SP-40]
  fi#1: size=4, align=4, at location [SP-44]
  fi#2: size=4, align=4, at location [SP-4]
  fi#3: size=4, align=8, at location [SP-8]
Function Live Ins: %R0, %R1, %R2, %R3

BB#0: 
    Live Ins: %R0 %R1 %R2 %R3
	%SP<def,tied2> = STRi64_pmd %LR, %SP<tied0>, -48; flags: FrameSetup
	%FP<def> = ADDri_r32 %SP, 48, %STATUS<imp-def>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	GID %CONFIG<imp-def>
	%R19<def> = MOVFS32_core %CONFIG, %D9<imp-def>
	STRi32_r32 %R19, %FP, -44; mem:ST4[FixedStack1]
	%IP<def> = MOVi32ri 65535
	%IP<def,tied1> = MOVTi32ri %IP<kill,tied0>, 65521
	%R18<def> = ANDrr_r32 %R19, %IP<kill>, %STATUS<imp-def>, %D9<imp-use,kill>, %D9<imp-def>
	%R19<def,tied1> = MOVTi32ri %R19<tied0>, 72, %D9<imp-use,kill>, %D9<imp-def>
	STRi64 %D9<kill>, %FP, -8; mem:ST4[FixedStack3] ST4[FixedStack2]
	GIE %CONFIG<imp-use,kill>
    Successors according to CFG: BB#1(?%)

BB#1: derived from LLVM BB %entry
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#0
	%IP<def,dead> = CMPri_r32 %R3, 1, %STATUS<imp-def>
	BCC <BB#12>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#2(0x50000000 / 0x80000000 = 62.50%) BB#12(0x30000000 / 0x80000000 = 37.50%)

BB#2: derived from LLVM BB %for.body3.lr.ph.preheader
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#1
	%IP<def> = LSL32ri %R3, 2, %STATUS<imp-def,dead>
	%R1<def> = ADDri_r32 %R1<kill>, 8, %STATUS<imp-def,dead>
	%R16<def> = MOViPTR %FP, -40
	%R17<def> = ADDri_r32 %R16, 8, %STATUS<imp-def,dead>
	%R19<def> = MOVi32ri 0, %D9<imp-def>
	%R20<def> = COPY %R19
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %for.body3.lr.ph
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20
    Predecessors according to CFG: BB#2 BB#11
	%R21<def> = LDRi32_r32 %FP, -8; mem:LD4[FixedStack3]
	GID %CONFIG<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %R21<kill>
	GIE %CONFIG<imp-def,dead>
	%R21<def> = IMULrr_r32 %R20, %R3, %STATUS<imp-def,dead>
	%R21<def> = LSL32ri %R21<kill>, 2, %STATUS<imp-def,dead>
	%R21<def> = ADDrr_r32 %R0, %R21<kill>, %STATUS<imp-def,dead>
	%R22<def> = COPY %R2
	%R23<def> = COPY %R1
	%R24<def> = COPY %R19
    Successors according to CFG: BB#4(?%)

BB#4: derived from LLVM BB %for.body9.preheader
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#3 BB#10
	%R18<def> = COPY %R19, %D9<imp-use,kill>, %D9<imp-def>
	STRi64 %D9, %FP, -16; mem:ST8[%1+24]
	STRi64 %D9, %FP, -24; mem:ST8[%1+16]
	STRi64 %D9, %FP, -32; mem:ST8[%1+8]
	STRi64 %D9, %FP, -40; mem:ST8[%1]
	%R25<def> = COPY %R23
	%R26<def> = COPY %R19
	BNONE32 <BB#6>, %STATUS<imp-use>
    Successors according to CFG: BB#6(?%)

BB#5: derived from LLVM BB %for.cond64.preheader
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#8
	%R25<def> = COPY %R22
	%R26<def> = COPY %R19
	BNONE32 <BB#9>, %STATUS<imp-use>
    Successors according to CFG: BB#9(?%)

BB#6: derived from LLVM BB %for.body9
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#4 BB#8
	%R27<def> = LSL32ri %R26, 2, %STATUS<imp-def,dead>
	%R27<def> = ADDrr_r32 %R21, %R27<kill>, %STATUS<imp-def,dead>
	%R27<def> = LDRf32 %R27<kill>, 0; mem:Volatile LD4[%add.ptr10](tbaa=!2)
	%R32<def> = COPY %R17
	%R34<def> = COPY %R25
	%R33<def> = COPY %R19
    Successors according to CFG: BB#7(?%)

BB#7: derived from LLVM BB %for.body13
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26 %R27 %R32 %R33 %R34
    Predecessors according to CFG: BB#6 BB#7
	%R37<def> = LDRf32 %R34, -8; mem:Volatile LD4[%scevgep8](tbaa=!2)
	%R35<def> = ADDri_r32 %R32, 16, %STATUS<imp-def,dead>
	%R36<def> = ADDri_r32 %R34, 16, %STATUS<imp-def,dead>
	%R38<def> = LDRf32 %R34, -4; mem:Volatile LD4[%scevgep9](tbaa=!2)
	%R33<def> = ADDri_r32 %R33<kill>, 4, %STATUS<imp-def,dead>
	%R39<def> = LDRf32 %R34, 0; mem:Volatile LD4[%lsr.iv5](tbaa=!2)
	%R40<def> = LDRf32 %R34<kill>, 4; mem:Volatile LD4[%scevgep7](tbaa=!2)
	%D21<def> = LDRf64 %R32, -8; mem:LD4[%scevgep17](tbaa=!2) LD4[%scevgep15](tbaa=!2)
	%R34<def> = LDRi32_r32 %FP, -4; mem:LD4[FixedStack2]
	GID %CONFIG<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %R34<kill>
	GIE %CONFIG<imp-def,dead>
	%R43<def,tied1> = FMADDrr_r32 %R43<tied0>, %R27, %R37<kill>, %STATUS<imp-def,dead>, %D21<imp-use,kill>, %D21<imp-def>
	%R42<def,tied1> = FMADDrr_r32 %R42<tied0>, %R27, %R38<kill>, %STATUS<imp-def,dead>, %D21<imp-use,kill>, %D21<imp-def>
	%R44<def> = COPY %R43, %D22<imp-def>
	%R45<def> = COPY %R42, %D21<imp-use,kill>, %D22<imp-use,kill>, %D22<imp-def>
	STRf64 %D22<kill>, %R32, -8; mem:ST4[%scevgep17](tbaa=!2) ST4[%scevgep15](tbaa=!2)
	%R34<def> = LDRf32 %R32, 0; mem:LD4[%lsr.iv1214](tbaa=!2)
	%R34<def,tied1> = FMADDrr_r32 %R34<kill,tied0>, %R27, %R39<kill>, %STATUS<imp-def,dead>
	STRf32 %R34<kill>, %R32, 0; mem:ST4[%lsr.iv1214](tbaa=!2)
	%R37<def> = LDRf32 %R32, 4; mem:LD4[%scevgep16](tbaa=!2)
	%R37<def,tied1> = FMADDrr_r32 %R37<kill,tied0>, %R27, %R40<kill>, %STATUS<imp-def,dead>
	%R34<def,dead> = CMPri_r32 %R33, 8, %STATUS<imp-def>
	STRf32 %R37<kill>, %R32<kill>, 4; mem:ST4[%scevgep16](tbaa=!2)
	%R32<def> = COPY %R35<kill>
	%R34<def> = COPY %R36<kill>
	BCC <BB#7>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#7(0x7c000000 / 0x80000000 = 96.88%) BB#8(0x04000000 / 0x80000000 = 3.12%)

BB#8: derived from LLVM BB %for.end60
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#7
	%R25<def> = ADDrr_r32 %R25<kill>, %IP, %STATUS<imp-def,dead>
	%R26<def> = ADDri_r32 %R26<kill>, 1, %STATUS<imp-def,dead>
	%R27<def,dead> = CMPrr_r32 %R26, %R3, %STATUS<imp-def>
	BCC <BB#5>, 0, %STATUS<imp-use>
	BNONE32 <BB#6>, %STATUS<imp-use>
    Successors according to CFG: BB#5(0x04000000 / 0x80000000 = 3.12%) BB#6(0x7c000000 / 0x80000000 = 96.88%)

BB#9: derived from LLVM BB %for.body66
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#5 BB#9
	%R27<def> = ADDrr_r32 %R16, %R26, %STATUS<imp-def,dead>
	%R33<def> = LDRf32 %R27<kill>, 0; mem:LD4[%sunkaddr30](tbaa=!2)
	%R27<def> = ADDri_r32 %R25, 4, %STATUS<imp-def,dead>
	%R26<def> = ADDri_r32 %R26<kill>, 4, %STATUS<imp-def,dead>
	%R34<def> = LDRf32 %R25, 0; mem:Volatile LD4[%lsr.iv24](tbaa=!2)
	%R32<def> = LDRi32_r32 %FP, -4; mem:LD4[FixedStack2]
	GID %CONFIG<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %R32<kill>
	GIE %CONFIG<imp-def,dead>
	%R33<def> = FADDrr_r32 %R33<kill>, %R34<kill>, %STATUS<imp-def,dead>
	%R32<def,dead> = CMPri_r32 %R26, 32, %STATUS<imp-def>
	STRf32 %R33<kill>, %R25<kill>, 0; mem:Volatile ST4[%lsr.iv24](tbaa=!2)
	%R25<def> = COPY %R27<kill>
	BCC <BB#9>, 1, %STATUS<imp-use>
    Successors according to CFG: BB#10(0x04000000 / 0x80000000 = 3.12%) BB#9(0x7c000000 / 0x80000000 = 96.88%)

BB#10: derived from LLVM BB %for.end75
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#9
	%R22<def> = ADDri_r32 %R22<kill>, 32, %STATUS<imp-def,dead>
	%R23<def> = ADDri_r32 %R23<kill>, 32, %STATUS<imp-def,dead>
	%R24<def> = ADDri_r32 %R24<kill>, 8, %STATUS<imp-def,dead>
	%R25<def,dead> = CMPrr_r32 %R24, %R3, %STATUS<imp-def>
	BCC <BB#4>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#4(0x7c000000 / 0x80000000 = 96.88%) BB#11(0x04000000 / 0x80000000 = 3.12%)

BB#11: derived from LLVM BB %for.end78
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20
    Predecessors according to CFG: BB#10
	%R2<def> = ADDrr_r32 %R2<kill>, %IP, %STATUS<imp-def,dead>
	%R20<def> = ADDri_r32 %R20<kill>, 1, %STATUS<imp-def,dead>
	%R21<def,dead> = CMPrr_r32 %R20, %R3, %STATUS<imp-def>
    Successors according to CFG: BB#12(0x04000000 / 0x80000000 = 3.12%) BB#3(0x7c000000 / 0x80000000 = 96.88%)

BB#12: derived from LLVM BB %for.end81
    Predecessors according to CFG: BB#1 BB#11
	%R0<def> = LDRi32_r32 %FP, -44; mem:LD4[FixedStack1]
	GID
	%CONFIG<def> = MOVTS32_core %R0<kill>
	GIE %CONFIG<imp-use,kill>
	%LR<def> = LDRi64 %SP, 48; flags: FrameSetup
	%SP<def> = ADDri_r32 %SP, 48, %STATUS<imp-def>
	RTS

# End machine code for function matmac.


<----------------->
Inserting branch into BB#11
# Machine code for function matmac: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=32, align=8, at location [SP-40]
  fi#1: size=4, align=4, at location [SP-44]
  fi#2: size=4, align=4, at location [SP-4]
  fi#3: size=4, align=8, at location [SP-8]
Function Live Ins: %R0, %R1, %R2, %R3

BB#0: 
    Live Ins: %R0 %R1 %R2 %R3
	%SP<def,tied2> = STRi64_pmd %LR, %SP<tied0>, -48; flags: FrameSetup
	%FP<def> = ADDri_r32 %SP, 48, %STATUS<imp-def>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	GID %CONFIG<imp-def>
	%R19<def> = MOVFS32_core %CONFIG, %D9<imp-def>
	STRi32_r32 %R19, %FP, -44; mem:ST4[FixedStack1]
	%IP<def> = MOVi32ri 65535
	%IP<def,tied1> = MOVTi32ri %IP<kill,tied0>, 65521
	%R18<def> = ANDrr_r32 %R19, %IP<kill>, %STATUS<imp-def>, %D9<imp-use,kill>, %D9<imp-def>
	%R19<def,tied1> = MOVTi32ri %R19<tied0>, 72, %D9<imp-use,kill>, %D9<imp-def>
	STRi64 %D9<kill>, %FP, -8; mem:ST4[FixedStack3] ST4[FixedStack2]
	GIE %CONFIG<imp-use,kill>
    Successors according to CFG: BB#1(?%)

BB#1: derived from LLVM BB %entry
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#0
	%IP<def,dead> = CMPri_r32 %R3, 1, %STATUS<imp-def>
	BCC <BB#12>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#2(0x50000000 / 0x80000000 = 62.50%) BB#12(0x30000000 / 0x80000000 = 37.50%)

BB#2: derived from LLVM BB %for.body3.lr.ph.preheader
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#1
	%IP<def> = LSL32ri %R3, 2, %STATUS<imp-def,dead>
	%R1<def> = ADDri_r32 %R1<kill>, 8, %STATUS<imp-def,dead>
	%R16<def> = MOViPTR %FP, -40
	%R17<def> = ADDri_r32 %R16, 8, %STATUS<imp-def,dead>
	%R19<def> = MOVi32ri 0, %D9<imp-def>
	%R20<def> = COPY %R19
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %for.body3.lr.ph
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20
    Predecessors according to CFG: BB#2 BB#11
	%R21<def> = LDRi32_r32 %FP, -8; mem:LD4[FixedStack3]
	GID %CONFIG<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %R21<kill>
	GIE %CONFIG<imp-def,dead>
	%R21<def> = IMULrr_r32 %R20, %R3, %STATUS<imp-def,dead>
	%R21<def> = LSL32ri %R21<kill>, 2, %STATUS<imp-def,dead>
	%R21<def> = ADDrr_r32 %R0, %R21<kill>, %STATUS<imp-def,dead>
	%R22<def> = COPY %R2
	%R23<def> = COPY %R1
	%R24<def> = COPY %R19
    Successors according to CFG: BB#4(?%)

BB#4: derived from LLVM BB %for.body9.preheader
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#3 BB#10
	%R18<def> = COPY %R19, %D9<imp-use,kill>, %D9<imp-def>
	STRi64 %D9, %FP, -16; mem:ST8[%1+24]
	STRi64 %D9, %FP, -24; mem:ST8[%1+16]
	STRi64 %D9, %FP, -32; mem:ST8[%1+8]
	STRi64 %D9, %FP, -40; mem:ST8[%1]
	%R25<def> = COPY %R23
	%R26<def> = COPY %R19
	BNONE32 <BB#6>, %STATUS<imp-use>
    Successors according to CFG: BB#6(?%)

BB#5: derived from LLVM BB %for.cond64.preheader
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#8
	%R25<def> = COPY %R22
	%R26<def> = COPY %R19
	BNONE32 <BB#9>, %STATUS<imp-use>
    Successors according to CFG: BB#9(?%)

BB#6: derived from LLVM BB %for.body9
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#4 BB#8
	%R27<def> = LSL32ri %R26, 2, %STATUS<imp-def,dead>
	%R27<def> = ADDrr_r32 %R21, %R27<kill>, %STATUS<imp-def,dead>
	%R27<def> = LDRf32 %R27<kill>, 0; mem:Volatile LD4[%add.ptr10](tbaa=!2)
	%R32<def> = COPY %R17
	%R34<def> = COPY %R25
	%R33<def> = COPY %R19
    Successors according to CFG: BB#7(?%)

BB#7: derived from LLVM BB %for.body13
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26 %R27 %R32 %R33 %R34
    Predecessors according to CFG: BB#6 BB#7
	%R37<def> = LDRf32 %R34, -8; mem:Volatile LD4[%scevgep8](tbaa=!2)
	%R35<def> = ADDri_r32 %R32, 16, %STATUS<imp-def,dead>
	%R36<def> = ADDri_r32 %R34, 16, %STATUS<imp-def,dead>
	%R38<def> = LDRf32 %R34, -4; mem:Volatile LD4[%scevgep9](tbaa=!2)
	%R33<def> = ADDri_r32 %R33<kill>, 4, %STATUS<imp-def,dead>
	%R39<def> = LDRf32 %R34, 0; mem:Volatile LD4[%lsr.iv5](tbaa=!2)
	%R40<def> = LDRf32 %R34<kill>, 4; mem:Volatile LD4[%scevgep7](tbaa=!2)
	%D21<def> = LDRf64 %R32, -8; mem:LD4[%scevgep17](tbaa=!2) LD4[%scevgep15](tbaa=!2)
	%R34<def> = LDRi32_r32 %FP, -4; mem:LD4[FixedStack2]
	GID %CONFIG<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %R34<kill>
	GIE %CONFIG<imp-def,dead>
	%R43<def,tied1> = FMADDrr_r32 %R43<tied0>, %R27, %R37<kill>, %STATUS<imp-def,dead>, %D21<imp-use,kill>, %D21<imp-def>
	%R42<def,tied1> = FMADDrr_r32 %R42<tied0>, %R27, %R38<kill>, %STATUS<imp-def,dead>, %D21<imp-use,kill>, %D21<imp-def>
	%R44<def> = COPY %R43, %D22<imp-def>
	%R45<def> = COPY %R42, %D21<imp-use,kill>, %D22<imp-use,kill>, %D22<imp-def>
	STRf64 %D22<kill>, %R32, -8; mem:ST4[%scevgep17](tbaa=!2) ST4[%scevgep15](tbaa=!2)
	%R34<def> = LDRf32 %R32, 0; mem:LD4[%lsr.iv1214](tbaa=!2)
	%R34<def,tied1> = FMADDrr_r32 %R34<kill,tied0>, %R27, %R39<kill>, %STATUS<imp-def,dead>
	STRf32 %R34<kill>, %R32, 0; mem:ST4[%lsr.iv1214](tbaa=!2)
	%R37<def> = LDRf32 %R32, 4; mem:LD4[%scevgep16](tbaa=!2)
	%R37<def,tied1> = FMADDrr_r32 %R37<kill,tied0>, %R27, %R40<kill>, %STATUS<imp-def,dead>
	%R34<def,dead> = CMPri_r32 %R33, 8, %STATUS<imp-def>
	STRf32 %R37<kill>, %R32<kill>, 4; mem:ST4[%scevgep16](tbaa=!2)
	%R32<def> = COPY %R35<kill>
	%R34<def> = COPY %R36<kill>
	BCC <BB#7>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#7(0x7c000000 / 0x80000000 = 96.88%) BB#8(0x04000000 / 0x80000000 = 3.12%)

BB#8: derived from LLVM BB %for.end60
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#7
	%R25<def> = ADDrr_r32 %R25<kill>, %IP, %STATUS<imp-def,dead>
	%R26<def> = ADDri_r32 %R26<kill>, 1, %STATUS<imp-def,dead>
	%R27<def,dead> = CMPrr_r32 %R26, %R3, %STATUS<imp-def>
	BCC <BB#5>, 0, %STATUS<imp-use>
	BNONE32 <BB#6>, %STATUS<imp-use>
    Successors according to CFG: BB#5(0x04000000 / 0x80000000 = 3.12%) BB#6(0x7c000000 / 0x80000000 = 96.88%)

BB#9: derived from LLVM BB %for.body66
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#5 BB#9
	%R27<def> = ADDrr_r32 %R16, %R26, %STATUS<imp-def,dead>
	%R33<def> = LDRf32 %R27<kill>, 0; mem:LD4[%sunkaddr30](tbaa=!2)
	%R27<def> = ADDri_r32 %R25, 4, %STATUS<imp-def,dead>
	%R26<def> = ADDri_r32 %R26<kill>, 4, %STATUS<imp-def,dead>
	%R34<def> = LDRf32 %R25, 0; mem:Volatile LD4[%lsr.iv24](tbaa=!2)
	%R32<def> = LDRi32_r32 %FP, -4; mem:LD4[FixedStack2]
	GID %CONFIG<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %R32<kill>
	GIE %CONFIG<imp-def,dead>
	%R33<def> = FADDrr_r32 %R33<kill>, %R34<kill>, %STATUS<imp-def,dead>
	%R32<def,dead> = CMPri_r32 %R26, 32, %STATUS<imp-def>
	STRf32 %R33<kill>, %R25<kill>, 0; mem:Volatile ST4[%lsr.iv24](tbaa=!2)
	%R25<def> = COPY %R27<kill>
	BCC <BB#9>, 1, %STATUS<imp-use>
    Successors according to CFG: BB#10(0x04000000 / 0x80000000 = 3.12%) BB#9(0x7c000000 / 0x80000000 = 96.88%)

BB#10: derived from LLVM BB %for.end75
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#9
	%R22<def> = ADDri_r32 %R22<kill>, 32, %STATUS<imp-def,dead>
	%R23<def> = ADDri_r32 %R23<kill>, 32, %STATUS<imp-def,dead>
	%R24<def> = ADDri_r32 %R24<kill>, 8, %STATUS<imp-def,dead>
	%R25<def,dead> = CMPrr_r32 %R24, %R3, %STATUS<imp-def>
	BCC <BB#4>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#4(0x7c000000 / 0x80000000 = 96.88%) BB#11(0x04000000 / 0x80000000 = 3.12%)

BB#11: derived from LLVM BB %for.end78
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20
    Predecessors according to CFG: BB#10
	%R2<def> = ADDrr_r32 %R2<kill>, %IP, %STATUS<imp-def,dead>
	%R20<def> = ADDri_r32 %R20<kill>, 1, %STATUS<imp-def,dead>
	%R21<def,dead> = CMPrr_r32 %R20, %R3, %STATUS<imp-def>
	BCC <BB#12>, 0, %STATUS<imp-use>
    Successors according to CFG: BB#12(0x04000000 / 0x80000000 = 3.12%) BB#3(0x7c000000 / 0x80000000 = 96.88%)

BB#12: derived from LLVM BB %for.end81
    Predecessors according to CFG: BB#1 BB#11
	%R0<def> = LDRi32_r32 %FP, -44; mem:LD4[FixedStack1]
	GID
	%CONFIG<def> = MOVTS32_core %R0<kill>
	GIE %CONFIG<imp-use,kill>
	%LR<def> = LDRi64 %SP, 48; flags: FrameSetup
	%SP<def> = ADDri_r32 %SP, 48, %STATUS<imp-def>
	RTS

# End machine code for function matmac.


TryTailMergeBlocks: BB#2, BB#11
  with successor BB#3
  which has fall-through from BB#2
Looking for common tails of at least 3 instructions

<----------------->
Analyzing block 11
BB#11: derived from LLVM BB %for.end78
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20
    Predecessors according to CFG: BB#10
	%R2<def> = ADDrr_r32 %R2<kill>, %IP, %STATUS<imp-def,dead>
	%R20<def> = ADDri_r32 %R20<kill>, 1, %STATUS<imp-def,dead>
	%R21<def,dead> = CMPrr_r32 %R20, %R3, %STATUS<imp-def>
	BCC <BB#12>, 0, %STATUS<imp-use>
    Successors according to CFG: BB#12(0x04000000 / 0x80000000 = 3.12%) BB#3(0x7c000000 / 0x80000000 = 96.88%)

<----------------->
Removing branches out of BB#11
# Machine code for function matmac: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=32, align=8, at location [SP-40]
  fi#1: size=4, align=4, at location [SP-44]
  fi#2: size=4, align=4, at location [SP-4]
  fi#3: size=4, align=8, at location [SP-8]
Function Live Ins: %R0, %R1, %R2, %R3

BB#0: 
    Live Ins: %R0 %R1 %R2 %R3
	%SP<def,tied2> = STRi64_pmd %LR, %SP<tied0>, -48; flags: FrameSetup
	%FP<def> = ADDri_r32 %SP, 48, %STATUS<imp-def>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	GID %CONFIG<imp-def>
	%R19<def> = MOVFS32_core %CONFIG, %D9<imp-def>
	STRi32_r32 %R19, %FP, -44; mem:ST4[FixedStack1]
	%IP<def> = MOVi32ri 65535
	%IP<def,tied1> = MOVTi32ri %IP<kill,tied0>, 65521
	%R18<def> = ANDrr_r32 %R19, %IP<kill>, %STATUS<imp-def>, %D9<imp-use,kill>, %D9<imp-def>
	%R19<def,tied1> = MOVTi32ri %R19<tied0>, 72, %D9<imp-use,kill>, %D9<imp-def>
	STRi64 %D9<kill>, %FP, -8; mem:ST4[FixedStack3] ST4[FixedStack2]
	GIE %CONFIG<imp-use,kill>
    Successors according to CFG: BB#1(?%)

BB#1: derived from LLVM BB %entry
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#0
	%IP<def,dead> = CMPri_r32 %R3, 1, %STATUS<imp-def>
	BCC <BB#12>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#2(0x50000000 / 0x80000000 = 62.50%) BB#12(0x30000000 / 0x80000000 = 37.50%)

BB#2: derived from LLVM BB %for.body3.lr.ph.preheader
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#1
	%IP<def> = LSL32ri %R3, 2, %STATUS<imp-def,dead>
	%R1<def> = ADDri_r32 %R1<kill>, 8, %STATUS<imp-def,dead>
	%R16<def> = MOViPTR %FP, -40
	%R17<def> = ADDri_r32 %R16, 8, %STATUS<imp-def,dead>
	%R19<def> = MOVi32ri 0, %D9<imp-def>
	%R20<def> = COPY %R19
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %for.body3.lr.ph
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20
    Predecessors according to CFG: BB#2 BB#11
	%R21<def> = LDRi32_r32 %FP, -8; mem:LD4[FixedStack3]
	GID %CONFIG<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %R21<kill>
	GIE %CONFIG<imp-def,dead>
	%R21<def> = IMULrr_r32 %R20, %R3, %STATUS<imp-def,dead>
	%R21<def> = LSL32ri %R21<kill>, 2, %STATUS<imp-def,dead>
	%R21<def> = ADDrr_r32 %R0, %R21<kill>, %STATUS<imp-def,dead>
	%R22<def> = COPY %R2
	%R23<def> = COPY %R1
	%R24<def> = COPY %R19
    Successors according to CFG: BB#4(?%)

BB#4: derived from LLVM BB %for.body9.preheader
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#3 BB#10
	%R18<def> = COPY %R19, %D9<imp-use,kill>, %D9<imp-def>
	STRi64 %D9, %FP, -16; mem:ST8[%1+24]
	STRi64 %D9, %FP, -24; mem:ST8[%1+16]
	STRi64 %D9, %FP, -32; mem:ST8[%1+8]
	STRi64 %D9, %FP, -40; mem:ST8[%1]
	%R25<def> = COPY %R23
	%R26<def> = COPY %R19
	BNONE32 <BB#6>, %STATUS<imp-use>
    Successors according to CFG: BB#6(?%)

BB#5: derived from LLVM BB %for.cond64.preheader
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#8
	%R25<def> = COPY %R22
	%R26<def> = COPY %R19
	BNONE32 <BB#9>, %STATUS<imp-use>
    Successors according to CFG: BB#9(?%)

BB#6: derived from LLVM BB %for.body9
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#4 BB#8
	%R27<def> = LSL32ri %R26, 2, %STATUS<imp-def,dead>
	%R27<def> = ADDrr_r32 %R21, %R27<kill>, %STATUS<imp-def,dead>
	%R27<def> = LDRf32 %R27<kill>, 0; mem:Volatile LD4[%add.ptr10](tbaa=!2)
	%R32<def> = COPY %R17
	%R34<def> = COPY %R25
	%R33<def> = COPY %R19
    Successors according to CFG: BB#7(?%)

BB#7: derived from LLVM BB %for.body13
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26 %R27 %R32 %R33 %R34
    Predecessors according to CFG: BB#6 BB#7
	%R37<def> = LDRf32 %R34, -8; mem:Volatile LD4[%scevgep8](tbaa=!2)
	%R35<def> = ADDri_r32 %R32, 16, %STATUS<imp-def,dead>
	%R36<def> = ADDri_r32 %R34, 16, %STATUS<imp-def,dead>
	%R38<def> = LDRf32 %R34, -4; mem:Volatile LD4[%scevgep9](tbaa=!2)
	%R33<def> = ADDri_r32 %R33<kill>, 4, %STATUS<imp-def,dead>
	%R39<def> = LDRf32 %R34, 0; mem:Volatile LD4[%lsr.iv5](tbaa=!2)
	%R40<def> = LDRf32 %R34<kill>, 4; mem:Volatile LD4[%scevgep7](tbaa=!2)
	%D21<def> = LDRf64 %R32, -8; mem:LD4[%scevgep17](tbaa=!2) LD4[%scevgep15](tbaa=!2)
	%R34<def> = LDRi32_r32 %FP, -4; mem:LD4[FixedStack2]
	GID %CONFIG<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %R34<kill>
	GIE %CONFIG<imp-def,dead>
	%R43<def,tied1> = FMADDrr_r32 %R43<tied0>, %R27, %R37<kill>, %STATUS<imp-def,dead>, %D21<imp-use,kill>, %D21<imp-def>
	%R42<def,tied1> = FMADDrr_r32 %R42<tied0>, %R27, %R38<kill>, %STATUS<imp-def,dead>, %D21<imp-use,kill>, %D21<imp-def>
	%R44<def> = COPY %R43, %D22<imp-def>
	%R45<def> = COPY %R42, %D21<imp-use,kill>, %D22<imp-use,kill>, %D22<imp-def>
	STRf64 %D22<kill>, %R32, -8; mem:ST4[%scevgep17](tbaa=!2) ST4[%scevgep15](tbaa=!2)
	%R34<def> = LDRf32 %R32, 0; mem:LD4[%lsr.iv1214](tbaa=!2)
	%R34<def,tied1> = FMADDrr_r32 %R34<kill,tied0>, %R27, %R39<kill>, %STATUS<imp-def,dead>
	STRf32 %R34<kill>, %R32, 0; mem:ST4[%lsr.iv1214](tbaa=!2)
	%R37<def> = LDRf32 %R32, 4; mem:LD4[%scevgep16](tbaa=!2)
	%R37<def,tied1> = FMADDrr_r32 %R37<kill,tied0>, %R27, %R40<kill>, %STATUS<imp-def,dead>
	%R34<def,dead> = CMPri_r32 %R33, 8, %STATUS<imp-def>
	STRf32 %R37<kill>, %R32<kill>, 4; mem:ST4[%scevgep16](tbaa=!2)
	%R32<def> = COPY %R35<kill>
	%R34<def> = COPY %R36<kill>
	BCC <BB#7>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#7(0x7c000000 / 0x80000000 = 96.88%) BB#8(0x04000000 / 0x80000000 = 3.12%)

BB#8: derived from LLVM BB %for.end60
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#7
	%R25<def> = ADDrr_r32 %R25<kill>, %IP, %STATUS<imp-def,dead>
	%R26<def> = ADDri_r32 %R26<kill>, 1, %STATUS<imp-def,dead>
	%R27<def,dead> = CMPrr_r32 %R26, %R3, %STATUS<imp-def>
	BCC <BB#5>, 0, %STATUS<imp-use>
	BNONE32 <BB#6>, %STATUS<imp-use>
    Successors according to CFG: BB#5(0x04000000 / 0x80000000 = 3.12%) BB#6(0x7c000000 / 0x80000000 = 96.88%)

BB#9: derived from LLVM BB %for.body66
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#5 BB#9
	%R27<def> = ADDrr_r32 %R16, %R26, %STATUS<imp-def,dead>
	%R33<def> = LDRf32 %R27<kill>, 0; mem:LD4[%sunkaddr30](tbaa=!2)
	%R27<def> = ADDri_r32 %R25, 4, %STATUS<imp-def,dead>
	%R26<def> = ADDri_r32 %R26<kill>, 4, %STATUS<imp-def,dead>
	%R34<def> = LDRf32 %R25, 0; mem:Volatile LD4[%lsr.iv24](tbaa=!2)
	%R32<def> = LDRi32_r32 %FP, -4; mem:LD4[FixedStack2]
	GID %CONFIG<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %R32<kill>
	GIE %CONFIG<imp-def,dead>
	%R33<def> = FADDrr_r32 %R33<kill>, %R34<kill>, %STATUS<imp-def,dead>
	%R32<def,dead> = CMPri_r32 %R26, 32, %STATUS<imp-def>
	STRf32 %R33<kill>, %R25<kill>, 0; mem:Volatile ST4[%lsr.iv24](tbaa=!2)
	%R25<def> = COPY %R27<kill>
	BCC <BB#9>, 1, %STATUS<imp-use>
    Successors according to CFG: BB#10(0x04000000 / 0x80000000 = 3.12%) BB#9(0x7c000000 / 0x80000000 = 96.88%)

BB#10: derived from LLVM BB %for.end75
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#9
	%R22<def> = ADDri_r32 %R22<kill>, 32, %STATUS<imp-def,dead>
	%R23<def> = ADDri_r32 %R23<kill>, 32, %STATUS<imp-def,dead>
	%R24<def> = ADDri_r32 %R24<kill>, 8, %STATUS<imp-def,dead>
	%R25<def,dead> = CMPrr_r32 %R24, %R3, %STATUS<imp-def>
	BCC <BB#4>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#4(0x7c000000 / 0x80000000 = 96.88%) BB#11(0x04000000 / 0x80000000 = 3.12%)

BB#11: derived from LLVM BB %for.end78
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20
    Predecessors according to CFG: BB#10
	%R2<def> = ADDrr_r32 %R2<kill>, %IP, %STATUS<imp-def,dead>
	%R20<def> = ADDri_r32 %R20<kill>, 1, %STATUS<imp-def,dead>
	%R21<def,dead> = CMPrr_r32 %R20, %R3, %STATUS<imp-def>
    Successors according to CFG: BB#12(0x04000000 / 0x80000000 = 3.12%) BB#3(0x7c000000 / 0x80000000 = 96.88%)

BB#12: derived from LLVM BB %for.end81
    Predecessors according to CFG: BB#1 BB#11
	%R0<def> = LDRi32_r32 %FP, -44; mem:LD4[FixedStack1]
	GID
	%CONFIG<def> = MOVTS32_core %R0<kill>
	GIE %CONFIG<imp-use,kill>
	%LR<def> = LDRi64 %SP, 48; flags: FrameSetup
	%SP<def> = ADDri_r32 %SP, 48, %STATUS<imp-def>
	RTS

# End machine code for function matmac.


<----------------->
Inserting branch into BB#11
# Machine code for function matmac: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=32, align=8, at location [SP-40]
  fi#1: size=4, align=4, at location [SP-44]
  fi#2: size=4, align=4, at location [SP-4]
  fi#3: size=4, align=8, at location [SP-8]
Function Live Ins: %R0, %R1, %R2, %R3

BB#0: 
    Live Ins: %R0 %R1 %R2 %R3
	%SP<def,tied2> = STRi64_pmd %LR, %SP<tied0>, -48; flags: FrameSetup
	%FP<def> = ADDri_r32 %SP, 48, %STATUS<imp-def>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	GID %CONFIG<imp-def>
	%R19<def> = MOVFS32_core %CONFIG, %D9<imp-def>
	STRi32_r32 %R19, %FP, -44; mem:ST4[FixedStack1]
	%IP<def> = MOVi32ri 65535
	%IP<def,tied1> = MOVTi32ri %IP<kill,tied0>, 65521
	%R18<def> = ANDrr_r32 %R19, %IP<kill>, %STATUS<imp-def>, %D9<imp-use,kill>, %D9<imp-def>
	%R19<def,tied1> = MOVTi32ri %R19<tied0>, 72, %D9<imp-use,kill>, %D9<imp-def>
	STRi64 %D9<kill>, %FP, -8; mem:ST4[FixedStack3] ST4[FixedStack2]
	GIE %CONFIG<imp-use,kill>
    Successors according to CFG: BB#1(?%)

BB#1: derived from LLVM BB %entry
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#0
	%IP<def,dead> = CMPri_r32 %R3, 1, %STATUS<imp-def>
	BCC <BB#12>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#2(0x50000000 / 0x80000000 = 62.50%) BB#12(0x30000000 / 0x80000000 = 37.50%)

BB#2: derived from LLVM BB %for.body3.lr.ph.preheader
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#1
	%IP<def> = LSL32ri %R3, 2, %STATUS<imp-def,dead>
	%R1<def> = ADDri_r32 %R1<kill>, 8, %STATUS<imp-def,dead>
	%R16<def> = MOViPTR %FP, -40
	%R17<def> = ADDri_r32 %R16, 8, %STATUS<imp-def,dead>
	%R19<def> = MOVi32ri 0, %D9<imp-def>
	%R20<def> = COPY %R19
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %for.body3.lr.ph
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20
    Predecessors according to CFG: BB#2 BB#11
	%R21<def> = LDRi32_r32 %FP, -8; mem:LD4[FixedStack3]
	GID %CONFIG<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %R21<kill>
	GIE %CONFIG<imp-def,dead>
	%R21<def> = IMULrr_r32 %R20, %R3, %STATUS<imp-def,dead>
	%R21<def> = LSL32ri %R21<kill>, 2, %STATUS<imp-def,dead>
	%R21<def> = ADDrr_r32 %R0, %R21<kill>, %STATUS<imp-def,dead>
	%R22<def> = COPY %R2
	%R23<def> = COPY %R1
	%R24<def> = COPY %R19
    Successors according to CFG: BB#4(?%)

BB#4: derived from LLVM BB %for.body9.preheader
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#3 BB#10
	%R18<def> = COPY %R19, %D9<imp-use,kill>, %D9<imp-def>
	STRi64 %D9, %FP, -16; mem:ST8[%1+24]
	STRi64 %D9, %FP, -24; mem:ST8[%1+16]
	STRi64 %D9, %FP, -32; mem:ST8[%1+8]
	STRi64 %D9, %FP, -40; mem:ST8[%1]
	%R25<def> = COPY %R23
	%R26<def> = COPY %R19
	BNONE32 <BB#6>, %STATUS<imp-use>
    Successors according to CFG: BB#6(?%)

BB#5: derived from LLVM BB %for.cond64.preheader
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#8
	%R25<def> = COPY %R22
	%R26<def> = COPY %R19
	BNONE32 <BB#9>, %STATUS<imp-use>
    Successors according to CFG: BB#9(?%)

BB#6: derived from LLVM BB %for.body9
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#4 BB#8
	%R27<def> = LSL32ri %R26, 2, %STATUS<imp-def,dead>
	%R27<def> = ADDrr_r32 %R21, %R27<kill>, %STATUS<imp-def,dead>
	%R27<def> = LDRf32 %R27<kill>, 0; mem:Volatile LD4[%add.ptr10](tbaa=!2)
	%R32<def> = COPY %R17
	%R34<def> = COPY %R25
	%R33<def> = COPY %R19
    Successors according to CFG: BB#7(?%)

BB#7: derived from LLVM BB %for.body13
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26 %R27 %R32 %R33 %R34
    Predecessors according to CFG: BB#6 BB#7
	%R37<def> = LDRf32 %R34, -8; mem:Volatile LD4[%scevgep8](tbaa=!2)
	%R35<def> = ADDri_r32 %R32, 16, %STATUS<imp-def,dead>
	%R36<def> = ADDri_r32 %R34, 16, %STATUS<imp-def,dead>
	%R38<def> = LDRf32 %R34, -4; mem:Volatile LD4[%scevgep9](tbaa=!2)
	%R33<def> = ADDri_r32 %R33<kill>, 4, %STATUS<imp-def,dead>
	%R39<def> = LDRf32 %R34, 0; mem:Volatile LD4[%lsr.iv5](tbaa=!2)
	%R40<def> = LDRf32 %R34<kill>, 4; mem:Volatile LD4[%scevgep7](tbaa=!2)
	%D21<def> = LDRf64 %R32, -8; mem:LD4[%scevgep17](tbaa=!2) LD4[%scevgep15](tbaa=!2)
	%R34<def> = LDRi32_r32 %FP, -4; mem:LD4[FixedStack2]
	GID %CONFIG<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %R34<kill>
	GIE %CONFIG<imp-def,dead>
	%R43<def,tied1> = FMADDrr_r32 %R43<tied0>, %R27, %R37<kill>, %STATUS<imp-def,dead>, %D21<imp-use,kill>, %D21<imp-def>
	%R42<def,tied1> = FMADDrr_r32 %R42<tied0>, %R27, %R38<kill>, %STATUS<imp-def,dead>, %D21<imp-use,kill>, %D21<imp-def>
	%R44<def> = COPY %R43, %D22<imp-def>
	%R45<def> = COPY %R42, %D21<imp-use,kill>, %D22<imp-use,kill>, %D22<imp-def>
	STRf64 %D22<kill>, %R32, -8; mem:ST4[%scevgep17](tbaa=!2) ST4[%scevgep15](tbaa=!2)
	%R34<def> = LDRf32 %R32, 0; mem:LD4[%lsr.iv1214](tbaa=!2)
	%R34<def,tied1> = FMADDrr_r32 %R34<kill,tied0>, %R27, %R39<kill>, %STATUS<imp-def,dead>
	STRf32 %R34<kill>, %R32, 0; mem:ST4[%lsr.iv1214](tbaa=!2)
	%R37<def> = LDRf32 %R32, 4; mem:LD4[%scevgep16](tbaa=!2)
	%R37<def,tied1> = FMADDrr_r32 %R37<kill,tied0>, %R27, %R40<kill>, %STATUS<imp-def,dead>
	%R34<def,dead> = CMPri_r32 %R33, 8, %STATUS<imp-def>
	STRf32 %R37<kill>, %R32<kill>, 4; mem:ST4[%scevgep16](tbaa=!2)
	%R32<def> = COPY %R35<kill>
	%R34<def> = COPY %R36<kill>
	BCC <BB#7>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#7(0x7c000000 / 0x80000000 = 96.88%) BB#8(0x04000000 / 0x80000000 = 3.12%)

BB#8: derived from LLVM BB %for.end60
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#7
	%R25<def> = ADDrr_r32 %R25<kill>, %IP, %STATUS<imp-def,dead>
	%R26<def> = ADDri_r32 %R26<kill>, 1, %STATUS<imp-def,dead>
	%R27<def,dead> = CMPrr_r32 %R26, %R3, %STATUS<imp-def>
	BCC <BB#5>, 0, %STATUS<imp-use>
	BNONE32 <BB#6>, %STATUS<imp-use>
    Successors according to CFG: BB#5(0x04000000 / 0x80000000 = 3.12%) BB#6(0x7c000000 / 0x80000000 = 96.88%)

BB#9: derived from LLVM BB %for.body66
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#5 BB#9
	%R27<def> = ADDrr_r32 %R16, %R26, %STATUS<imp-def,dead>
	%R33<def> = LDRf32 %R27<kill>, 0; mem:LD4[%sunkaddr30](tbaa=!2)
	%R27<def> = ADDri_r32 %R25, 4, %STATUS<imp-def,dead>
	%R26<def> = ADDri_r32 %R26<kill>, 4, %STATUS<imp-def,dead>
	%R34<def> = LDRf32 %R25, 0; mem:Volatile LD4[%lsr.iv24](tbaa=!2)
	%R32<def> = LDRi32_r32 %FP, -4; mem:LD4[FixedStack2]
	GID %CONFIG<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %R32<kill>
	GIE %CONFIG<imp-def,dead>
	%R33<def> = FADDrr_r32 %R33<kill>, %R34<kill>, %STATUS<imp-def,dead>
	%R32<def,dead> = CMPri_r32 %R26, 32, %STATUS<imp-def>
	STRf32 %R33<kill>, %R25<kill>, 0; mem:Volatile ST4[%lsr.iv24](tbaa=!2)
	%R25<def> = COPY %R27<kill>
	BCC <BB#9>, 1, %STATUS<imp-use>
    Successors according to CFG: BB#10(0x04000000 / 0x80000000 = 3.12%) BB#9(0x7c000000 / 0x80000000 = 96.88%)

BB#10: derived from LLVM BB %for.end75
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#9
	%R22<def> = ADDri_r32 %R22<kill>, 32, %STATUS<imp-def,dead>
	%R23<def> = ADDri_r32 %R23<kill>, 32, %STATUS<imp-def,dead>
	%R24<def> = ADDri_r32 %R24<kill>, 8, %STATUS<imp-def,dead>
	%R25<def,dead> = CMPrr_r32 %R24, %R3, %STATUS<imp-def>
	BCC <BB#4>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#4(0x7c000000 / 0x80000000 = 96.88%) BB#11(0x04000000 / 0x80000000 = 3.12%)

BB#11: derived from LLVM BB %for.end78
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20
    Predecessors according to CFG: BB#10
	%R2<def> = ADDrr_r32 %R2<kill>, %IP, %STATUS<imp-def,dead>
	%R20<def> = ADDri_r32 %R20<kill>, 1, %STATUS<imp-def,dead>
	%R21<def,dead> = CMPrr_r32 %R20, %R3, %STATUS<imp-def>
	BCC <BB#3>, 1, %STATUS<imp-use>
    Successors according to CFG: BB#12(0x04000000 / 0x80000000 = 3.12%) BB#3(0x7c000000 / 0x80000000 = 96.88%)

BB#12: derived from LLVM BB %for.end81
    Predecessors according to CFG: BB#1 BB#11
	%R0<def> = LDRi32_r32 %FP, -44; mem:LD4[FixedStack1]
	GID
	%CONFIG<def> = MOVTS32_core %R0<kill>
	GIE %CONFIG<imp-use,kill>
	%LR<def> = LDRi64 %SP, 48; flags: FrameSetup
	%SP<def> = ADDri_r32 %SP, 48, %STATUS<imp-def>
	RTS

# End machine code for function matmac.


<----------------->
Analyzing block 3
BB#3: derived from LLVM BB %for.body3.lr.ph
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20
    Predecessors according to CFG: BB#2 BB#11
	%R21<def> = LDRi32_r32 %FP, -8; mem:LD4[FixedStack3]
	GID %CONFIG<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %R21<kill>
	GIE %CONFIG<imp-def,dead>
	%R21<def> = IMULrr_r32 %R20, %R3, %STATUS<imp-def,dead>
	%R21<def> = LSL32ri %R21<kill>, 2, %STATUS<imp-def,dead>
	%R21<def> = ADDrr_r32 %R0, %R21<kill>, %STATUS<imp-def,dead>
	%R22<def> = COPY %R2
	%R23<def> = COPY %R1
	%R24<def> = COPY %R19
    Successors according to CFG: BB#4(?%)

<----------------->
Analyzing block 10
BB#10: derived from LLVM BB %for.end75
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#9
	%R22<def> = ADDri_r32 %R22<kill>, 32, %STATUS<imp-def,dead>
	%R23<def> = ADDri_r32 %R23<kill>, 32, %STATUS<imp-def,dead>
	%R24<def> = ADDri_r32 %R24<kill>, 8, %STATUS<imp-def,dead>
	%R25<def,dead> = CMPrr_r32 %R24, %R3, %STATUS<imp-def>
	BCC <BB#4>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#4(0x7c000000 / 0x80000000 = 96.88%) BB#11(0x04000000 / 0x80000000 = 3.12%)

<----------------->
Removing branches out of BB#10
# Machine code for function matmac: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=32, align=8, at location [SP-40]
  fi#1: size=4, align=4, at location [SP-44]
  fi#2: size=4, align=4, at location [SP-4]
  fi#3: size=4, align=8, at location [SP-8]
Function Live Ins: %R0, %R1, %R2, %R3

BB#0: 
    Live Ins: %R0 %R1 %R2 %R3
	%SP<def,tied2> = STRi64_pmd %LR, %SP<tied0>, -48; flags: FrameSetup
	%FP<def> = ADDri_r32 %SP, 48, %STATUS<imp-def>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	GID %CONFIG<imp-def>
	%R19<def> = MOVFS32_core %CONFIG, %D9<imp-def>
	STRi32_r32 %R19, %FP, -44; mem:ST4[FixedStack1]
	%IP<def> = MOVi32ri 65535
	%IP<def,tied1> = MOVTi32ri %IP<kill,tied0>, 65521
	%R18<def> = ANDrr_r32 %R19, %IP<kill>, %STATUS<imp-def>, %D9<imp-use,kill>, %D9<imp-def>
	%R19<def,tied1> = MOVTi32ri %R19<tied0>, 72, %D9<imp-use,kill>, %D9<imp-def>
	STRi64 %D9<kill>, %FP, -8; mem:ST4[FixedStack3] ST4[FixedStack2]
	GIE %CONFIG<imp-use,kill>
    Successors according to CFG: BB#1(?%)

BB#1: derived from LLVM BB %entry
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#0
	%IP<def,dead> = CMPri_r32 %R3, 1, %STATUS<imp-def>
	BCC <BB#12>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#2(0x50000000 / 0x80000000 = 62.50%) BB#12(0x30000000 / 0x80000000 = 37.50%)

BB#2: derived from LLVM BB %for.body3.lr.ph.preheader
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#1
	%IP<def> = LSL32ri %R3, 2, %STATUS<imp-def,dead>
	%R1<def> = ADDri_r32 %R1<kill>, 8, %STATUS<imp-def,dead>
	%R16<def> = MOViPTR %FP, -40
	%R17<def> = ADDri_r32 %R16, 8, %STATUS<imp-def,dead>
	%R19<def> = MOVi32ri 0, %D9<imp-def>
	%R20<def> = COPY %R19
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %for.body3.lr.ph
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20
    Predecessors according to CFG: BB#2 BB#11
	%R21<def> = LDRi32_r32 %FP, -8; mem:LD4[FixedStack3]
	GID %CONFIG<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %R21<kill>
	GIE %CONFIG<imp-def,dead>
	%R21<def> = IMULrr_r32 %R20, %R3, %STATUS<imp-def,dead>
	%R21<def> = LSL32ri %R21<kill>, 2, %STATUS<imp-def,dead>
	%R21<def> = ADDrr_r32 %R0, %R21<kill>, %STATUS<imp-def,dead>
	%R22<def> = COPY %R2
	%R23<def> = COPY %R1
	%R24<def> = COPY %R19
    Successors according to CFG: BB#4(?%)

BB#4: derived from LLVM BB %for.body9.preheader
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#3 BB#10
	%R18<def> = COPY %R19, %D9<imp-use,kill>, %D9<imp-def>
	STRi64 %D9, %FP, -16; mem:ST8[%1+24]
	STRi64 %D9, %FP, -24; mem:ST8[%1+16]
	STRi64 %D9, %FP, -32; mem:ST8[%1+8]
	STRi64 %D9, %FP, -40; mem:ST8[%1]
	%R25<def> = COPY %R23
	%R26<def> = COPY %R19
	BNONE32 <BB#6>, %STATUS<imp-use>
    Successors according to CFG: BB#6(?%)

BB#5: derived from LLVM BB %for.cond64.preheader
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#8
	%R25<def> = COPY %R22
	%R26<def> = COPY %R19
	BNONE32 <BB#9>, %STATUS<imp-use>
    Successors according to CFG: BB#9(?%)

BB#6: derived from LLVM BB %for.body9
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#4 BB#8
	%R27<def> = LSL32ri %R26, 2, %STATUS<imp-def,dead>
	%R27<def> = ADDrr_r32 %R21, %R27<kill>, %STATUS<imp-def,dead>
	%R27<def> = LDRf32 %R27<kill>, 0; mem:Volatile LD4[%add.ptr10](tbaa=!2)
	%R32<def> = COPY %R17
	%R34<def> = COPY %R25
	%R33<def> = COPY %R19
    Successors according to CFG: BB#7(?%)

BB#7: derived from LLVM BB %for.body13
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26 %R27 %R32 %R33 %R34
    Predecessors according to CFG: BB#6 BB#7
	%R37<def> = LDRf32 %R34, -8; mem:Volatile LD4[%scevgep8](tbaa=!2)
	%R35<def> = ADDri_r32 %R32, 16, %STATUS<imp-def,dead>
	%R36<def> = ADDri_r32 %R34, 16, %STATUS<imp-def,dead>
	%R38<def> = LDRf32 %R34, -4; mem:Volatile LD4[%scevgep9](tbaa=!2)
	%R33<def> = ADDri_r32 %R33<kill>, 4, %STATUS<imp-def,dead>
	%R39<def> = LDRf32 %R34, 0; mem:Volatile LD4[%lsr.iv5](tbaa=!2)
	%R40<def> = LDRf32 %R34<kill>, 4; mem:Volatile LD4[%scevgep7](tbaa=!2)
	%D21<def> = LDRf64 %R32, -8; mem:LD4[%scevgep17](tbaa=!2) LD4[%scevgep15](tbaa=!2)
	%R34<def> = LDRi32_r32 %FP, -4; mem:LD4[FixedStack2]
	GID %CONFIG<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %R34<kill>
	GIE %CONFIG<imp-def,dead>
	%R43<def,tied1> = FMADDrr_r32 %R43<tied0>, %R27, %R37<kill>, %STATUS<imp-def,dead>, %D21<imp-use,kill>, %D21<imp-def>
	%R42<def,tied1> = FMADDrr_r32 %R42<tied0>, %R27, %R38<kill>, %STATUS<imp-def,dead>, %D21<imp-use,kill>, %D21<imp-def>
	%R44<def> = COPY %R43, %D22<imp-def>
	%R45<def> = COPY %R42, %D21<imp-use,kill>, %D22<imp-use,kill>, %D22<imp-def>
	STRf64 %D22<kill>, %R32, -8; mem:ST4[%scevgep17](tbaa=!2) ST4[%scevgep15](tbaa=!2)
	%R34<def> = LDRf32 %R32, 0; mem:LD4[%lsr.iv1214](tbaa=!2)
	%R34<def,tied1> = FMADDrr_r32 %R34<kill,tied0>, %R27, %R39<kill>, %STATUS<imp-def,dead>
	STRf32 %R34<kill>, %R32, 0; mem:ST4[%lsr.iv1214](tbaa=!2)
	%R37<def> = LDRf32 %R32, 4; mem:LD4[%scevgep16](tbaa=!2)
	%R37<def,tied1> = FMADDrr_r32 %R37<kill,tied0>, %R27, %R40<kill>, %STATUS<imp-def,dead>
	%R34<def,dead> = CMPri_r32 %R33, 8, %STATUS<imp-def>
	STRf32 %R37<kill>, %R32<kill>, 4; mem:ST4[%scevgep16](tbaa=!2)
	%R32<def> = COPY %R35<kill>
	%R34<def> = COPY %R36<kill>
	BCC <BB#7>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#7(0x7c000000 / 0x80000000 = 96.88%) BB#8(0x04000000 / 0x80000000 = 3.12%)

BB#8: derived from LLVM BB %for.end60
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#7
	%R25<def> = ADDrr_r32 %R25<kill>, %IP, %STATUS<imp-def,dead>
	%R26<def> = ADDri_r32 %R26<kill>, 1, %STATUS<imp-def,dead>
	%R27<def,dead> = CMPrr_r32 %R26, %R3, %STATUS<imp-def>
	BCC <BB#5>, 0, %STATUS<imp-use>
	BNONE32 <BB#6>, %STATUS<imp-use>
    Successors according to CFG: BB#5(0x04000000 / 0x80000000 = 3.12%) BB#6(0x7c000000 / 0x80000000 = 96.88%)

BB#9: derived from LLVM BB %for.body66
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#5 BB#9
	%R27<def> = ADDrr_r32 %R16, %R26, %STATUS<imp-def,dead>
	%R33<def> = LDRf32 %R27<kill>, 0; mem:LD4[%sunkaddr30](tbaa=!2)
	%R27<def> = ADDri_r32 %R25, 4, %STATUS<imp-def,dead>
	%R26<def> = ADDri_r32 %R26<kill>, 4, %STATUS<imp-def,dead>
	%R34<def> = LDRf32 %R25, 0; mem:Volatile LD4[%lsr.iv24](tbaa=!2)
	%R32<def> = LDRi32_r32 %FP, -4; mem:LD4[FixedStack2]
	GID %CONFIG<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %R32<kill>
	GIE %CONFIG<imp-def,dead>
	%R33<def> = FADDrr_r32 %R33<kill>, %R34<kill>, %STATUS<imp-def,dead>
	%R32<def,dead> = CMPri_r32 %R26, 32, %STATUS<imp-def>
	STRf32 %R33<kill>, %R25<kill>, 0; mem:Volatile ST4[%lsr.iv24](tbaa=!2)
	%R25<def> = COPY %R27<kill>
	BCC <BB#9>, 1, %STATUS<imp-use>
    Successors according to CFG: BB#10(0x04000000 / 0x80000000 = 3.12%) BB#9(0x7c000000 / 0x80000000 = 96.88%)

BB#10: derived from LLVM BB %for.end75
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#9
	%R22<def> = ADDri_r32 %R22<kill>, 32, %STATUS<imp-def,dead>
	%R23<def> = ADDri_r32 %R23<kill>, 32, %STATUS<imp-def,dead>
	%R24<def> = ADDri_r32 %R24<kill>, 8, %STATUS<imp-def,dead>
	%R25<def,dead> = CMPrr_r32 %R24, %R3, %STATUS<imp-def>
    Successors according to CFG: BB#4(0x7c000000 / 0x80000000 = 96.88%) BB#11(0x04000000 / 0x80000000 = 3.12%)

BB#11: derived from LLVM BB %for.end78
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20
    Predecessors according to CFG: BB#10
	%R2<def> = ADDrr_r32 %R2<kill>, %IP, %STATUS<imp-def,dead>
	%R20<def> = ADDri_r32 %R20<kill>, 1, %STATUS<imp-def,dead>
	%R21<def,dead> = CMPrr_r32 %R20, %R3, %STATUS<imp-def>
	BCC <BB#3>, 1, %STATUS<imp-use>
    Successors according to CFG: BB#12(0x04000000 / 0x80000000 = 3.12%) BB#3(0x7c000000 / 0x80000000 = 96.88%)

BB#12: derived from LLVM BB %for.end81
    Predecessors according to CFG: BB#1 BB#11
	%R0<def> = LDRi32_r32 %FP, -44; mem:LD4[FixedStack1]
	GID
	%CONFIG<def> = MOVTS32_core %R0<kill>
	GIE %CONFIG<imp-use,kill>
	%LR<def> = LDRi64 %SP, 48; flags: FrameSetup
	%SP<def> = ADDri_r32 %SP, 48, %STATUS<imp-def>
	RTS

# End machine code for function matmac.


<----------------->
Inserting branch into BB#10
# Machine code for function matmac: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=32, align=8, at location [SP-40]
  fi#1: size=4, align=4, at location [SP-44]
  fi#2: size=4, align=4, at location [SP-4]
  fi#3: size=4, align=8, at location [SP-8]
Function Live Ins: %R0, %R1, %R2, %R3

BB#0: 
    Live Ins: %R0 %R1 %R2 %R3
	%SP<def,tied2> = STRi64_pmd %LR, %SP<tied0>, -48; flags: FrameSetup
	%FP<def> = ADDri_r32 %SP, 48, %STATUS<imp-def>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	GID %CONFIG<imp-def>
	%R19<def> = MOVFS32_core %CONFIG, %D9<imp-def>
	STRi32_r32 %R19, %FP, -44; mem:ST4[FixedStack1]
	%IP<def> = MOVi32ri 65535
	%IP<def,tied1> = MOVTi32ri %IP<kill,tied0>, 65521
	%R18<def> = ANDrr_r32 %R19, %IP<kill>, %STATUS<imp-def>, %D9<imp-use,kill>, %D9<imp-def>
	%R19<def,tied1> = MOVTi32ri %R19<tied0>, 72, %D9<imp-use,kill>, %D9<imp-def>
	STRi64 %D9<kill>, %FP, -8; mem:ST4[FixedStack3] ST4[FixedStack2]
	GIE %CONFIG<imp-use,kill>
    Successors according to CFG: BB#1(?%)

BB#1: derived from LLVM BB %entry
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#0
	%IP<def,dead> = CMPri_r32 %R3, 1, %STATUS<imp-def>
	BCC <BB#12>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#2(0x50000000 / 0x80000000 = 62.50%) BB#12(0x30000000 / 0x80000000 = 37.50%)

BB#2: derived from LLVM BB %for.body3.lr.ph.preheader
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#1
	%IP<def> = LSL32ri %R3, 2, %STATUS<imp-def,dead>
	%R1<def> = ADDri_r32 %R1<kill>, 8, %STATUS<imp-def,dead>
	%R16<def> = MOViPTR %FP, -40
	%R17<def> = ADDri_r32 %R16, 8, %STATUS<imp-def,dead>
	%R19<def> = MOVi32ri 0, %D9<imp-def>
	%R20<def> = COPY %R19
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %for.body3.lr.ph
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20
    Predecessors according to CFG: BB#2 BB#11
	%R21<def> = LDRi32_r32 %FP, -8; mem:LD4[FixedStack3]
	GID %CONFIG<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %R21<kill>
	GIE %CONFIG<imp-def,dead>
	%R21<def> = IMULrr_r32 %R20, %R3, %STATUS<imp-def,dead>
	%R21<def> = LSL32ri %R21<kill>, 2, %STATUS<imp-def,dead>
	%R21<def> = ADDrr_r32 %R0, %R21<kill>, %STATUS<imp-def,dead>
	%R22<def> = COPY %R2
	%R23<def> = COPY %R1
	%R24<def> = COPY %R19
    Successors according to CFG: BB#4(?%)

BB#4: derived from LLVM BB %for.body9.preheader
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#3 BB#10
	%R18<def> = COPY %R19, %D9<imp-use,kill>, %D9<imp-def>
	STRi64 %D9, %FP, -16; mem:ST8[%1+24]
	STRi64 %D9, %FP, -24; mem:ST8[%1+16]
	STRi64 %D9, %FP, -32; mem:ST8[%1+8]
	STRi64 %D9, %FP, -40; mem:ST8[%1]
	%R25<def> = COPY %R23
	%R26<def> = COPY %R19
	BNONE32 <BB#6>, %STATUS<imp-use>
    Successors according to CFG: BB#6(?%)

BB#5: derived from LLVM BB %for.cond64.preheader
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#8
	%R25<def> = COPY %R22
	%R26<def> = COPY %R19
	BNONE32 <BB#9>, %STATUS<imp-use>
    Successors according to CFG: BB#9(?%)

BB#6: derived from LLVM BB %for.body9
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#4 BB#8
	%R27<def> = LSL32ri %R26, 2, %STATUS<imp-def,dead>
	%R27<def> = ADDrr_r32 %R21, %R27<kill>, %STATUS<imp-def,dead>
	%R27<def> = LDRf32 %R27<kill>, 0; mem:Volatile LD4[%add.ptr10](tbaa=!2)
	%R32<def> = COPY %R17
	%R34<def> = COPY %R25
	%R33<def> = COPY %R19
    Successors according to CFG: BB#7(?%)

BB#7: derived from LLVM BB %for.body13
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26 %R27 %R32 %R33 %R34
    Predecessors according to CFG: BB#6 BB#7
	%R37<def> = LDRf32 %R34, -8; mem:Volatile LD4[%scevgep8](tbaa=!2)
	%R35<def> = ADDri_r32 %R32, 16, %STATUS<imp-def,dead>
	%R36<def> = ADDri_r32 %R34, 16, %STATUS<imp-def,dead>
	%R38<def> = LDRf32 %R34, -4; mem:Volatile LD4[%scevgep9](tbaa=!2)
	%R33<def> = ADDri_r32 %R33<kill>, 4, %STATUS<imp-def,dead>
	%R39<def> = LDRf32 %R34, 0; mem:Volatile LD4[%lsr.iv5](tbaa=!2)
	%R40<def> = LDRf32 %R34<kill>, 4; mem:Volatile LD4[%scevgep7](tbaa=!2)
	%D21<def> = LDRf64 %R32, -8; mem:LD4[%scevgep17](tbaa=!2) LD4[%scevgep15](tbaa=!2)
	%R34<def> = LDRi32_r32 %FP, -4; mem:LD4[FixedStack2]
	GID %CONFIG<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %R34<kill>
	GIE %CONFIG<imp-def,dead>
	%R43<def,tied1> = FMADDrr_r32 %R43<tied0>, %R27, %R37<kill>, %STATUS<imp-def,dead>, %D21<imp-use,kill>, %D21<imp-def>
	%R42<def,tied1> = FMADDrr_r32 %R42<tied0>, %R27, %R38<kill>, %STATUS<imp-def,dead>, %D21<imp-use,kill>, %D21<imp-def>
	%R44<def> = COPY %R43, %D22<imp-def>
	%R45<def> = COPY %R42, %D21<imp-use,kill>, %D22<imp-use,kill>, %D22<imp-def>
	STRf64 %D22<kill>, %R32, -8; mem:ST4[%scevgep17](tbaa=!2) ST4[%scevgep15](tbaa=!2)
	%R34<def> = LDRf32 %R32, 0; mem:LD4[%lsr.iv1214](tbaa=!2)
	%R34<def,tied1> = FMADDrr_r32 %R34<kill,tied0>, %R27, %R39<kill>, %STATUS<imp-def,dead>
	STRf32 %R34<kill>, %R32, 0; mem:ST4[%lsr.iv1214](tbaa=!2)
	%R37<def> = LDRf32 %R32, 4; mem:LD4[%scevgep16](tbaa=!2)
	%R37<def,tied1> = FMADDrr_r32 %R37<kill,tied0>, %R27, %R40<kill>, %STATUS<imp-def,dead>
	%R34<def,dead> = CMPri_r32 %R33, 8, %STATUS<imp-def>
	STRf32 %R37<kill>, %R32<kill>, 4; mem:ST4[%scevgep16](tbaa=!2)
	%R32<def> = COPY %R35<kill>
	%R34<def> = COPY %R36<kill>
	BCC <BB#7>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#7(0x7c000000 / 0x80000000 = 96.88%) BB#8(0x04000000 / 0x80000000 = 3.12%)

BB#8: derived from LLVM BB %for.end60
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#7
	%R25<def> = ADDrr_r32 %R25<kill>, %IP, %STATUS<imp-def,dead>
	%R26<def> = ADDri_r32 %R26<kill>, 1, %STATUS<imp-def,dead>
	%R27<def,dead> = CMPrr_r32 %R26, %R3, %STATUS<imp-def>
	BCC <BB#5>, 0, %STATUS<imp-use>
	BNONE32 <BB#6>, %STATUS<imp-use>
    Successors according to CFG: BB#5(0x04000000 / 0x80000000 = 3.12%) BB#6(0x7c000000 / 0x80000000 = 96.88%)

BB#9: derived from LLVM BB %for.body66
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#5 BB#9
	%R27<def> = ADDrr_r32 %R16, %R26, %STATUS<imp-def,dead>
	%R33<def> = LDRf32 %R27<kill>, 0; mem:LD4[%sunkaddr30](tbaa=!2)
	%R27<def> = ADDri_r32 %R25, 4, %STATUS<imp-def,dead>
	%R26<def> = ADDri_r32 %R26<kill>, 4, %STATUS<imp-def,dead>
	%R34<def> = LDRf32 %R25, 0; mem:Volatile LD4[%lsr.iv24](tbaa=!2)
	%R32<def> = LDRi32_r32 %FP, -4; mem:LD4[FixedStack2]
	GID %CONFIG<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %R32<kill>
	GIE %CONFIG<imp-def,dead>
	%R33<def> = FADDrr_r32 %R33<kill>, %R34<kill>, %STATUS<imp-def,dead>
	%R32<def,dead> = CMPri_r32 %R26, 32, %STATUS<imp-def>
	STRf32 %R33<kill>, %R25<kill>, 0; mem:Volatile ST4[%lsr.iv24](tbaa=!2)
	%R25<def> = COPY %R27<kill>
	BCC <BB#9>, 1, %STATUS<imp-use>
    Successors according to CFG: BB#10(0x04000000 / 0x80000000 = 3.12%) BB#9(0x7c000000 / 0x80000000 = 96.88%)

BB#10: derived from LLVM BB %for.end75
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#9
	%R22<def> = ADDri_r32 %R22<kill>, 32, %STATUS<imp-def,dead>
	%R23<def> = ADDri_r32 %R23<kill>, 32, %STATUS<imp-def,dead>
	%R24<def> = ADDri_r32 %R24<kill>, 8, %STATUS<imp-def,dead>
	%R25<def,dead> = CMPrr_r32 %R24, %R3, %STATUS<imp-def>
	BCC <BB#11>, 7, %STATUS<imp-use>
    Successors according to CFG: BB#4(0x7c000000 / 0x80000000 = 96.88%) BB#11(0x04000000 / 0x80000000 = 3.12%)

BB#11: derived from LLVM BB %for.end78
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20
    Predecessors according to CFG: BB#10
	%R2<def> = ADDrr_r32 %R2<kill>, %IP, %STATUS<imp-def,dead>
	%R20<def> = ADDri_r32 %R20<kill>, 1, %STATUS<imp-def,dead>
	%R21<def,dead> = CMPrr_r32 %R20, %R3, %STATUS<imp-def>
	BCC <BB#3>, 1, %STATUS<imp-use>
    Successors according to CFG: BB#12(0x04000000 / 0x80000000 = 3.12%) BB#3(0x7c000000 / 0x80000000 = 96.88%)

BB#12: derived from LLVM BB %for.end81
    Predecessors according to CFG: BB#1 BB#11
	%R0<def> = LDRi32_r32 %FP, -44; mem:LD4[FixedStack1]
	GID
	%CONFIG<def> = MOVTS32_core %R0<kill>
	GIE %CONFIG<imp-use,kill>
	%LR<def> = LDRi64 %SP, 48; flags: FrameSetup
	%SP<def> = ADDri_r32 %SP, 48, %STATUS<imp-def>
	RTS

# End machine code for function matmac.


TryTailMergeBlocks: BB#3, BB#10
  with successor BB#4
  which has fall-through from BB#3
Looking for common tails of at least 3 instructions

<----------------->
Analyzing block 10
BB#10: derived from LLVM BB %for.end75
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#9
	%R22<def> = ADDri_r32 %R22<kill>, 32, %STATUS<imp-def,dead>
	%R23<def> = ADDri_r32 %R23<kill>, 32, %STATUS<imp-def,dead>
	%R24<def> = ADDri_r32 %R24<kill>, 8, %STATUS<imp-def,dead>
	%R25<def,dead> = CMPrr_r32 %R24, %R3, %STATUS<imp-def>
	BCC <BB#11>, 7, %STATUS<imp-use>
    Successors according to CFG: BB#4(0x7c000000 / 0x80000000 = 96.88%) BB#11(0x04000000 / 0x80000000 = 3.12%)

<----------------->
Removing branches out of BB#10
# Machine code for function matmac: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=32, align=8, at location [SP-40]
  fi#1: size=4, align=4, at location [SP-44]
  fi#2: size=4, align=4, at location [SP-4]
  fi#3: size=4, align=8, at location [SP-8]
Function Live Ins: %R0, %R1, %R2, %R3

BB#0: 
    Live Ins: %R0 %R1 %R2 %R3
	%SP<def,tied2> = STRi64_pmd %LR, %SP<tied0>, -48; flags: FrameSetup
	%FP<def> = ADDri_r32 %SP, 48, %STATUS<imp-def>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	GID %CONFIG<imp-def>
	%R19<def> = MOVFS32_core %CONFIG, %D9<imp-def>
	STRi32_r32 %R19, %FP, -44; mem:ST4[FixedStack1]
	%IP<def> = MOVi32ri 65535
	%IP<def,tied1> = MOVTi32ri %IP<kill,tied0>, 65521
	%R18<def> = ANDrr_r32 %R19, %IP<kill>, %STATUS<imp-def>, %D9<imp-use,kill>, %D9<imp-def>
	%R19<def,tied1> = MOVTi32ri %R19<tied0>, 72, %D9<imp-use,kill>, %D9<imp-def>
	STRi64 %D9<kill>, %FP, -8; mem:ST4[FixedStack3] ST4[FixedStack2]
	GIE %CONFIG<imp-use,kill>
    Successors according to CFG: BB#1(?%)

BB#1: derived from LLVM BB %entry
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#0
	%IP<def,dead> = CMPri_r32 %R3, 1, %STATUS<imp-def>
	BCC <BB#12>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#2(0x50000000 / 0x80000000 = 62.50%) BB#12(0x30000000 / 0x80000000 = 37.50%)

BB#2: derived from LLVM BB %for.body3.lr.ph.preheader
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#1
	%IP<def> = LSL32ri %R3, 2, %STATUS<imp-def,dead>
	%R1<def> = ADDri_r32 %R1<kill>, 8, %STATUS<imp-def,dead>
	%R16<def> = MOViPTR %FP, -40
	%R17<def> = ADDri_r32 %R16, 8, %STATUS<imp-def,dead>
	%R19<def> = MOVi32ri 0, %D9<imp-def>
	%R20<def> = COPY %R19
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %for.body3.lr.ph
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20
    Predecessors according to CFG: BB#2 BB#11
	%R21<def> = LDRi32_r32 %FP, -8; mem:LD4[FixedStack3]
	GID %CONFIG<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %R21<kill>
	GIE %CONFIG<imp-def,dead>
	%R21<def> = IMULrr_r32 %R20, %R3, %STATUS<imp-def,dead>
	%R21<def> = LSL32ri %R21<kill>, 2, %STATUS<imp-def,dead>
	%R21<def> = ADDrr_r32 %R0, %R21<kill>, %STATUS<imp-def,dead>
	%R22<def> = COPY %R2
	%R23<def> = COPY %R1
	%R24<def> = COPY %R19
    Successors according to CFG: BB#4(?%)

BB#4: derived from LLVM BB %for.body9.preheader
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#3 BB#10
	%R18<def> = COPY %R19, %D9<imp-use,kill>, %D9<imp-def>
	STRi64 %D9, %FP, -16; mem:ST8[%1+24]
	STRi64 %D9, %FP, -24; mem:ST8[%1+16]
	STRi64 %D9, %FP, -32; mem:ST8[%1+8]
	STRi64 %D9, %FP, -40; mem:ST8[%1]
	%R25<def> = COPY %R23
	%R26<def> = COPY %R19
	BNONE32 <BB#6>, %STATUS<imp-use>
    Successors according to CFG: BB#6(?%)

BB#5: derived from LLVM BB %for.cond64.preheader
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#8
	%R25<def> = COPY %R22
	%R26<def> = COPY %R19
	BNONE32 <BB#9>, %STATUS<imp-use>
    Successors according to CFG: BB#9(?%)

BB#6: derived from LLVM BB %for.body9
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#4 BB#8
	%R27<def> = LSL32ri %R26, 2, %STATUS<imp-def,dead>
	%R27<def> = ADDrr_r32 %R21, %R27<kill>, %STATUS<imp-def,dead>
	%R27<def> = LDRf32 %R27<kill>, 0; mem:Volatile LD4[%add.ptr10](tbaa=!2)
	%R32<def> = COPY %R17
	%R34<def> = COPY %R25
	%R33<def> = COPY %R19
    Successors according to CFG: BB#7(?%)

BB#7: derived from LLVM BB %for.body13
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26 %R27 %R32 %R33 %R34
    Predecessors according to CFG: BB#6 BB#7
	%R37<def> = LDRf32 %R34, -8; mem:Volatile LD4[%scevgep8](tbaa=!2)
	%R35<def> = ADDri_r32 %R32, 16, %STATUS<imp-def,dead>
	%R36<def> = ADDri_r32 %R34, 16, %STATUS<imp-def,dead>
	%R38<def> = LDRf32 %R34, -4; mem:Volatile LD4[%scevgep9](tbaa=!2)
	%R33<def> = ADDri_r32 %R33<kill>, 4, %STATUS<imp-def,dead>
	%R39<def> = LDRf32 %R34, 0; mem:Volatile LD4[%lsr.iv5](tbaa=!2)
	%R40<def> = LDRf32 %R34<kill>, 4; mem:Volatile LD4[%scevgep7](tbaa=!2)
	%D21<def> = LDRf64 %R32, -8; mem:LD4[%scevgep17](tbaa=!2) LD4[%scevgep15](tbaa=!2)
	%R34<def> = LDRi32_r32 %FP, -4; mem:LD4[FixedStack2]
	GID %CONFIG<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %R34<kill>
	GIE %CONFIG<imp-def,dead>
	%R43<def,tied1> = FMADDrr_r32 %R43<tied0>, %R27, %R37<kill>, %STATUS<imp-def,dead>, %D21<imp-use,kill>, %D21<imp-def>
	%R42<def,tied1> = FMADDrr_r32 %R42<tied0>, %R27, %R38<kill>, %STATUS<imp-def,dead>, %D21<imp-use,kill>, %D21<imp-def>
	%R44<def> = COPY %R43, %D22<imp-def>
	%R45<def> = COPY %R42, %D21<imp-use,kill>, %D22<imp-use,kill>, %D22<imp-def>
	STRf64 %D22<kill>, %R32, -8; mem:ST4[%scevgep17](tbaa=!2) ST4[%scevgep15](tbaa=!2)
	%R34<def> = LDRf32 %R32, 0; mem:LD4[%lsr.iv1214](tbaa=!2)
	%R34<def,tied1> = FMADDrr_r32 %R34<kill,tied0>, %R27, %R39<kill>, %STATUS<imp-def,dead>
	STRf32 %R34<kill>, %R32, 0; mem:ST4[%lsr.iv1214](tbaa=!2)
	%R37<def> = LDRf32 %R32, 4; mem:LD4[%scevgep16](tbaa=!2)
	%R37<def,tied1> = FMADDrr_r32 %R37<kill,tied0>, %R27, %R40<kill>, %STATUS<imp-def,dead>
	%R34<def,dead> = CMPri_r32 %R33, 8, %STATUS<imp-def>
	STRf32 %R37<kill>, %R32<kill>, 4; mem:ST4[%scevgep16](tbaa=!2)
	%R32<def> = COPY %R35<kill>
	%R34<def> = COPY %R36<kill>
	BCC <BB#7>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#7(0x7c000000 / 0x80000000 = 96.88%) BB#8(0x04000000 / 0x80000000 = 3.12%)

BB#8: derived from LLVM BB %for.end60
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#7
	%R25<def> = ADDrr_r32 %R25<kill>, %IP, %STATUS<imp-def,dead>
	%R26<def> = ADDri_r32 %R26<kill>, 1, %STATUS<imp-def,dead>
	%R27<def,dead> = CMPrr_r32 %R26, %R3, %STATUS<imp-def>
	BCC <BB#5>, 0, %STATUS<imp-use>
	BNONE32 <BB#6>, %STATUS<imp-use>
    Successors according to CFG: BB#5(0x04000000 / 0x80000000 = 3.12%) BB#6(0x7c000000 / 0x80000000 = 96.88%)

BB#9: derived from LLVM BB %for.body66
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#5 BB#9
	%R27<def> = ADDrr_r32 %R16, %R26, %STATUS<imp-def,dead>
	%R33<def> = LDRf32 %R27<kill>, 0; mem:LD4[%sunkaddr30](tbaa=!2)
	%R27<def> = ADDri_r32 %R25, 4, %STATUS<imp-def,dead>
	%R26<def> = ADDri_r32 %R26<kill>, 4, %STATUS<imp-def,dead>
	%R34<def> = LDRf32 %R25, 0; mem:Volatile LD4[%lsr.iv24](tbaa=!2)
	%R32<def> = LDRi32_r32 %FP, -4; mem:LD4[FixedStack2]
	GID %CONFIG<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %R32<kill>
	GIE %CONFIG<imp-def,dead>
	%R33<def> = FADDrr_r32 %R33<kill>, %R34<kill>, %STATUS<imp-def,dead>
	%R32<def,dead> = CMPri_r32 %R26, 32, %STATUS<imp-def>
	STRf32 %R33<kill>, %R25<kill>, 0; mem:Volatile ST4[%lsr.iv24](tbaa=!2)
	%R25<def> = COPY %R27<kill>
	BCC <BB#9>, 1, %STATUS<imp-use>
    Successors according to CFG: BB#10(0x04000000 / 0x80000000 = 3.12%) BB#9(0x7c000000 / 0x80000000 = 96.88%)

BB#10: derived from LLVM BB %for.end75
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#9
	%R22<def> = ADDri_r32 %R22<kill>, 32, %STATUS<imp-def,dead>
	%R23<def> = ADDri_r32 %R23<kill>, 32, %STATUS<imp-def,dead>
	%R24<def> = ADDri_r32 %R24<kill>, 8, %STATUS<imp-def,dead>
	%R25<def,dead> = CMPrr_r32 %R24, %R3, %STATUS<imp-def>
    Successors according to CFG: BB#4(0x7c000000 / 0x80000000 = 96.88%) BB#11(0x04000000 / 0x80000000 = 3.12%)

BB#11: derived from LLVM BB %for.end78
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20
    Predecessors according to CFG: BB#10
	%R2<def> = ADDrr_r32 %R2<kill>, %IP, %STATUS<imp-def,dead>
	%R20<def> = ADDri_r32 %R20<kill>, 1, %STATUS<imp-def,dead>
	%R21<def,dead> = CMPrr_r32 %R20, %R3, %STATUS<imp-def>
	BCC <BB#3>, 1, %STATUS<imp-use>
    Successors according to CFG: BB#12(0x04000000 / 0x80000000 = 3.12%) BB#3(0x7c000000 / 0x80000000 = 96.88%)

BB#12: derived from LLVM BB %for.end81
    Predecessors according to CFG: BB#1 BB#11
	%R0<def> = LDRi32_r32 %FP, -44; mem:LD4[FixedStack1]
	GID
	%CONFIG<def> = MOVTS32_core %R0<kill>
	GIE %CONFIG<imp-use,kill>
	%LR<def> = LDRi64 %SP, 48; flags: FrameSetup
	%SP<def> = ADDri_r32 %SP, 48, %STATUS<imp-def>
	RTS

# End machine code for function matmac.


<----------------->
Inserting branch into BB#10
# Machine code for function matmac: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=32, align=8, at location [SP-40]
  fi#1: size=4, align=4, at location [SP-44]
  fi#2: size=4, align=4, at location [SP-4]
  fi#3: size=4, align=8, at location [SP-8]
Function Live Ins: %R0, %R1, %R2, %R3

BB#0: 
    Live Ins: %R0 %R1 %R2 %R3
	%SP<def,tied2> = STRi64_pmd %LR, %SP<tied0>, -48; flags: FrameSetup
	%FP<def> = ADDri_r32 %SP, 48, %STATUS<imp-def>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	GID %CONFIG<imp-def>
	%R19<def> = MOVFS32_core %CONFIG, %D9<imp-def>
	STRi32_r32 %R19, %FP, -44; mem:ST4[FixedStack1]
	%IP<def> = MOVi32ri 65535
	%IP<def,tied1> = MOVTi32ri %IP<kill,tied0>, 65521
	%R18<def> = ANDrr_r32 %R19, %IP<kill>, %STATUS<imp-def>, %D9<imp-use,kill>, %D9<imp-def>
	%R19<def,tied1> = MOVTi32ri %R19<tied0>, 72, %D9<imp-use,kill>, %D9<imp-def>
	STRi64 %D9<kill>, %FP, -8; mem:ST4[FixedStack3] ST4[FixedStack2]
	GIE %CONFIG<imp-use,kill>
    Successors according to CFG: BB#1(?%)

BB#1: derived from LLVM BB %entry
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#0
	%IP<def,dead> = CMPri_r32 %R3, 1, %STATUS<imp-def>
	BCC <BB#12>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#2(0x50000000 / 0x80000000 = 62.50%) BB#12(0x30000000 / 0x80000000 = 37.50%)

BB#2: derived from LLVM BB %for.body3.lr.ph.preheader
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#1
	%IP<def> = LSL32ri %R3, 2, %STATUS<imp-def,dead>
	%R1<def> = ADDri_r32 %R1<kill>, 8, %STATUS<imp-def,dead>
	%R16<def> = MOViPTR %FP, -40
	%R17<def> = ADDri_r32 %R16, 8, %STATUS<imp-def,dead>
	%R19<def> = MOVi32ri 0, %D9<imp-def>
	%R20<def> = COPY %R19
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %for.body3.lr.ph
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20
    Predecessors according to CFG: BB#2 BB#11
	%R21<def> = LDRi32_r32 %FP, -8; mem:LD4[FixedStack3]
	GID %CONFIG<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %R21<kill>
	GIE %CONFIG<imp-def,dead>
	%R21<def> = IMULrr_r32 %R20, %R3, %STATUS<imp-def,dead>
	%R21<def> = LSL32ri %R21<kill>, 2, %STATUS<imp-def,dead>
	%R21<def> = ADDrr_r32 %R0, %R21<kill>, %STATUS<imp-def,dead>
	%R22<def> = COPY %R2
	%R23<def> = COPY %R1
	%R24<def> = COPY %R19
    Successors according to CFG: BB#4(?%)

BB#4: derived from LLVM BB %for.body9.preheader
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#3 BB#10
	%R18<def> = COPY %R19, %D9<imp-use,kill>, %D9<imp-def>
	STRi64 %D9, %FP, -16; mem:ST8[%1+24]
	STRi64 %D9, %FP, -24; mem:ST8[%1+16]
	STRi64 %D9, %FP, -32; mem:ST8[%1+8]
	STRi64 %D9, %FP, -40; mem:ST8[%1]
	%R25<def> = COPY %R23
	%R26<def> = COPY %R19
	BNONE32 <BB#6>, %STATUS<imp-use>
    Successors according to CFG: BB#6(?%)

BB#5: derived from LLVM BB %for.cond64.preheader
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#8
	%R25<def> = COPY %R22
	%R26<def> = COPY %R19
	BNONE32 <BB#9>, %STATUS<imp-use>
    Successors according to CFG: BB#9(?%)

BB#6: derived from LLVM BB %for.body9
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#4 BB#8
	%R27<def> = LSL32ri %R26, 2, %STATUS<imp-def,dead>
	%R27<def> = ADDrr_r32 %R21, %R27<kill>, %STATUS<imp-def,dead>
	%R27<def> = LDRf32 %R27<kill>, 0; mem:Volatile LD4[%add.ptr10](tbaa=!2)
	%R32<def> = COPY %R17
	%R34<def> = COPY %R25
	%R33<def> = COPY %R19
    Successors according to CFG: BB#7(?%)

BB#7: derived from LLVM BB %for.body13
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26 %R27 %R32 %R33 %R34
    Predecessors according to CFG: BB#6 BB#7
	%R37<def> = LDRf32 %R34, -8; mem:Volatile LD4[%scevgep8](tbaa=!2)
	%R35<def> = ADDri_r32 %R32, 16, %STATUS<imp-def,dead>
	%R36<def> = ADDri_r32 %R34, 16, %STATUS<imp-def,dead>
	%R38<def> = LDRf32 %R34, -4; mem:Volatile LD4[%scevgep9](tbaa=!2)
	%R33<def> = ADDri_r32 %R33<kill>, 4, %STATUS<imp-def,dead>
	%R39<def> = LDRf32 %R34, 0; mem:Volatile LD4[%lsr.iv5](tbaa=!2)
	%R40<def> = LDRf32 %R34<kill>, 4; mem:Volatile LD4[%scevgep7](tbaa=!2)
	%D21<def> = LDRf64 %R32, -8; mem:LD4[%scevgep17](tbaa=!2) LD4[%scevgep15](tbaa=!2)
	%R34<def> = LDRi32_r32 %FP, -4; mem:LD4[FixedStack2]
	GID %CONFIG<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %R34<kill>
	GIE %CONFIG<imp-def,dead>
	%R43<def,tied1> = FMADDrr_r32 %R43<tied0>, %R27, %R37<kill>, %STATUS<imp-def,dead>, %D21<imp-use,kill>, %D21<imp-def>
	%R42<def,tied1> = FMADDrr_r32 %R42<tied0>, %R27, %R38<kill>, %STATUS<imp-def,dead>, %D21<imp-use,kill>, %D21<imp-def>
	%R44<def> = COPY %R43, %D22<imp-def>
	%R45<def> = COPY %R42, %D21<imp-use,kill>, %D22<imp-use,kill>, %D22<imp-def>
	STRf64 %D22<kill>, %R32, -8; mem:ST4[%scevgep17](tbaa=!2) ST4[%scevgep15](tbaa=!2)
	%R34<def> = LDRf32 %R32, 0; mem:LD4[%lsr.iv1214](tbaa=!2)
	%R34<def,tied1> = FMADDrr_r32 %R34<kill,tied0>, %R27, %R39<kill>, %STATUS<imp-def,dead>
	STRf32 %R34<kill>, %R32, 0; mem:ST4[%lsr.iv1214](tbaa=!2)
	%R37<def> = LDRf32 %R32, 4; mem:LD4[%scevgep16](tbaa=!2)
	%R37<def,tied1> = FMADDrr_r32 %R37<kill,tied0>, %R27, %R40<kill>, %STATUS<imp-def,dead>
	%R34<def,dead> = CMPri_r32 %R33, 8, %STATUS<imp-def>
	STRf32 %R37<kill>, %R32<kill>, 4; mem:ST4[%scevgep16](tbaa=!2)
	%R32<def> = COPY %R35<kill>
	%R34<def> = COPY %R36<kill>
	BCC <BB#7>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#7(0x7c000000 / 0x80000000 = 96.88%) BB#8(0x04000000 / 0x80000000 = 3.12%)

BB#8: derived from LLVM BB %for.end60
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#7
	%R25<def> = ADDrr_r32 %R25<kill>, %IP, %STATUS<imp-def,dead>
	%R26<def> = ADDri_r32 %R26<kill>, 1, %STATUS<imp-def,dead>
	%R27<def,dead> = CMPrr_r32 %R26, %R3, %STATUS<imp-def>
	BCC <BB#5>, 0, %STATUS<imp-use>
	BNONE32 <BB#6>, %STATUS<imp-use>
    Successors according to CFG: BB#5(0x04000000 / 0x80000000 = 3.12%) BB#6(0x7c000000 / 0x80000000 = 96.88%)

BB#9: derived from LLVM BB %for.body66
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#5 BB#9
	%R27<def> = ADDrr_r32 %R16, %R26, %STATUS<imp-def,dead>
	%R33<def> = LDRf32 %R27<kill>, 0; mem:LD4[%sunkaddr30](tbaa=!2)
	%R27<def> = ADDri_r32 %R25, 4, %STATUS<imp-def,dead>
	%R26<def> = ADDri_r32 %R26<kill>, 4, %STATUS<imp-def,dead>
	%R34<def> = LDRf32 %R25, 0; mem:Volatile LD4[%lsr.iv24](tbaa=!2)
	%R32<def> = LDRi32_r32 %FP, -4; mem:LD4[FixedStack2]
	GID %CONFIG<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %R32<kill>
	GIE %CONFIG<imp-def,dead>
	%R33<def> = FADDrr_r32 %R33<kill>, %R34<kill>, %STATUS<imp-def,dead>
	%R32<def,dead> = CMPri_r32 %R26, 32, %STATUS<imp-def>
	STRf32 %R33<kill>, %R25<kill>, 0; mem:Volatile ST4[%lsr.iv24](tbaa=!2)
	%R25<def> = COPY %R27<kill>
	BCC <BB#9>, 1, %STATUS<imp-use>
    Successors according to CFG: BB#10(0x04000000 / 0x80000000 = 3.12%) BB#9(0x7c000000 / 0x80000000 = 96.88%)

BB#10: derived from LLVM BB %for.end75
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#9
	%R22<def> = ADDri_r32 %R22<kill>, 32, %STATUS<imp-def,dead>
	%R23<def> = ADDri_r32 %R23<kill>, 32, %STATUS<imp-def,dead>
	%R24<def> = ADDri_r32 %R24<kill>, 8, %STATUS<imp-def,dead>
	%R25<def,dead> = CMPrr_r32 %R24, %R3, %STATUS<imp-def>
	BCC <BB#4>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#4(0x7c000000 / 0x80000000 = 96.88%) BB#11(0x04000000 / 0x80000000 = 3.12%)

BB#11: derived from LLVM BB %for.end78
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20
    Predecessors according to CFG: BB#10
	%R2<def> = ADDrr_r32 %R2<kill>, %IP, %STATUS<imp-def,dead>
	%R20<def> = ADDri_r32 %R20<kill>, 1, %STATUS<imp-def,dead>
	%R21<def,dead> = CMPrr_r32 %R20, %R3, %STATUS<imp-def>
	BCC <BB#3>, 1, %STATUS<imp-use>
    Successors according to CFG: BB#12(0x04000000 / 0x80000000 = 3.12%) BB#3(0x7c000000 / 0x80000000 = 96.88%)

BB#12: derived from LLVM BB %for.end81
    Predecessors according to CFG: BB#1 BB#11
	%R0<def> = LDRi32_r32 %FP, -44; mem:LD4[FixedStack1]
	GID
	%CONFIG<def> = MOVTS32_core %R0<kill>
	GIE %CONFIG<imp-use,kill>
	%LR<def> = LDRi64 %SP, 48; flags: FrameSetup
	%SP<def> = ADDri_r32 %SP, 48, %STATUS<imp-def>
	RTS

# End machine code for function matmac.


<----------------->
Analyzing block 4
BB#4: derived from LLVM BB %for.body9.preheader
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#3 BB#10
	%R18<def> = COPY %R19, %D9<imp-use,kill>, %D9<imp-def>
	STRi64 %D9, %FP, -16; mem:ST8[%1+24]
	STRi64 %D9, %FP, -24; mem:ST8[%1+16]
	STRi64 %D9, %FP, -32; mem:ST8[%1+8]
	STRi64 %D9, %FP, -40; mem:ST8[%1]
	%R25<def> = COPY %R23
	%R26<def> = COPY %R19
	BNONE32 <BB#6>, %STATUS<imp-use>
    Successors according to CFG: BB#6(?%)

<----------------->
Removing branches out of BB#4
# Machine code for function matmac: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=32, align=8, at location [SP-40]
  fi#1: size=4, align=4, at location [SP-44]
  fi#2: size=4, align=4, at location [SP-4]
  fi#3: size=4, align=8, at location [SP-8]
Function Live Ins: %R0, %R1, %R2, %R3

BB#0: 
    Live Ins: %R0 %R1 %R2 %R3
	%SP<def,tied2> = STRi64_pmd %LR, %SP<tied0>, -48; flags: FrameSetup
	%FP<def> = ADDri_r32 %SP, 48, %STATUS<imp-def>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	GID %CONFIG<imp-def>
	%R19<def> = MOVFS32_core %CONFIG, %D9<imp-def>
	STRi32_r32 %R19, %FP, -44; mem:ST4[FixedStack1]
	%IP<def> = MOVi32ri 65535
	%IP<def,tied1> = MOVTi32ri %IP<kill,tied0>, 65521
	%R18<def> = ANDrr_r32 %R19, %IP<kill>, %STATUS<imp-def>, %D9<imp-use,kill>, %D9<imp-def>
	%R19<def,tied1> = MOVTi32ri %R19<tied0>, 72, %D9<imp-use,kill>, %D9<imp-def>
	STRi64 %D9<kill>, %FP, -8; mem:ST4[FixedStack3] ST4[FixedStack2]
	GIE %CONFIG<imp-use,kill>
    Successors according to CFG: BB#1(?%)

BB#1: derived from LLVM BB %entry
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#0
	%IP<def,dead> = CMPri_r32 %R3, 1, %STATUS<imp-def>
	BCC <BB#12>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#2(0x50000000 / 0x80000000 = 62.50%) BB#12(0x30000000 / 0x80000000 = 37.50%)

BB#2: derived from LLVM BB %for.body3.lr.ph.preheader
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#1
	%IP<def> = LSL32ri %R3, 2, %STATUS<imp-def,dead>
	%R1<def> = ADDri_r32 %R1<kill>, 8, %STATUS<imp-def,dead>
	%R16<def> = MOViPTR %FP, -40
	%R17<def> = ADDri_r32 %R16, 8, %STATUS<imp-def,dead>
	%R19<def> = MOVi32ri 0, %D9<imp-def>
	%R20<def> = COPY %R19
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %for.body3.lr.ph
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20
    Predecessors according to CFG: BB#2 BB#11
	%R21<def> = LDRi32_r32 %FP, -8; mem:LD4[FixedStack3]
	GID %CONFIG<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %R21<kill>
	GIE %CONFIG<imp-def,dead>
	%R21<def> = IMULrr_r32 %R20, %R3, %STATUS<imp-def,dead>
	%R21<def> = LSL32ri %R21<kill>, 2, %STATUS<imp-def,dead>
	%R21<def> = ADDrr_r32 %R0, %R21<kill>, %STATUS<imp-def,dead>
	%R22<def> = COPY %R2
	%R23<def> = COPY %R1
	%R24<def> = COPY %R19
    Successors according to CFG: BB#4(?%)

BB#4: derived from LLVM BB %for.body9.preheader
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#3 BB#10
	%R18<def> = COPY %R19, %D9<imp-use,kill>, %D9<imp-def>
	STRi64 %D9, %FP, -16; mem:ST8[%1+24]
	STRi64 %D9, %FP, -24; mem:ST8[%1+16]
	STRi64 %D9, %FP, -32; mem:ST8[%1+8]
	STRi64 %D9, %FP, -40; mem:ST8[%1]
	%R25<def> = COPY %R23
	%R26<def> = COPY %R19
    Successors according to CFG: BB#6(?%)

BB#5: derived from LLVM BB %for.cond64.preheader
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#8
	%R25<def> = COPY %R22
	%R26<def> = COPY %R19
	BNONE32 <BB#9>, %STATUS<imp-use>
    Successors according to CFG: BB#9(?%)

BB#6: derived from LLVM BB %for.body9
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#4 BB#8
	%R27<def> = LSL32ri %R26, 2, %STATUS<imp-def,dead>
	%R27<def> = ADDrr_r32 %R21, %R27<kill>, %STATUS<imp-def,dead>
	%R27<def> = LDRf32 %R27<kill>, 0; mem:Volatile LD4[%add.ptr10](tbaa=!2)
	%R32<def> = COPY %R17
	%R34<def> = COPY %R25
	%R33<def> = COPY %R19
    Successors according to CFG: BB#7(?%)

BB#7: derived from LLVM BB %for.body13
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26 %R27 %R32 %R33 %R34
    Predecessors according to CFG: BB#6 BB#7
	%R37<def> = LDRf32 %R34, -8; mem:Volatile LD4[%scevgep8](tbaa=!2)
	%R35<def> = ADDri_r32 %R32, 16, %STATUS<imp-def,dead>
	%R36<def> = ADDri_r32 %R34, 16, %STATUS<imp-def,dead>
	%R38<def> = LDRf32 %R34, -4; mem:Volatile LD4[%scevgep9](tbaa=!2)
	%R33<def> = ADDri_r32 %R33<kill>, 4, %STATUS<imp-def,dead>
	%R39<def> = LDRf32 %R34, 0; mem:Volatile LD4[%lsr.iv5](tbaa=!2)
	%R40<def> = LDRf32 %R34<kill>, 4; mem:Volatile LD4[%scevgep7](tbaa=!2)
	%D21<def> = LDRf64 %R32, -8; mem:LD4[%scevgep17](tbaa=!2) LD4[%scevgep15](tbaa=!2)
	%R34<def> = LDRi32_r32 %FP, -4; mem:LD4[FixedStack2]
	GID %CONFIG<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %R34<kill>
	GIE %CONFIG<imp-def,dead>
	%R43<def,tied1> = FMADDrr_r32 %R43<tied0>, %R27, %R37<kill>, %STATUS<imp-def,dead>, %D21<imp-use,kill>, %D21<imp-def>
	%R42<def,tied1> = FMADDrr_r32 %R42<tied0>, %R27, %R38<kill>, %STATUS<imp-def,dead>, %D21<imp-use,kill>, %D21<imp-def>
	%R44<def> = COPY %R43, %D22<imp-def>
	%R45<def> = COPY %R42, %D21<imp-use,kill>, %D22<imp-use,kill>, %D22<imp-def>
	STRf64 %D22<kill>, %R32, -8; mem:ST4[%scevgep17](tbaa=!2) ST4[%scevgep15](tbaa=!2)
	%R34<def> = LDRf32 %R32, 0; mem:LD4[%lsr.iv1214](tbaa=!2)
	%R34<def,tied1> = FMADDrr_r32 %R34<kill,tied0>, %R27, %R39<kill>, %STATUS<imp-def,dead>
	STRf32 %R34<kill>, %R32, 0; mem:ST4[%lsr.iv1214](tbaa=!2)
	%R37<def> = LDRf32 %R32, 4; mem:LD4[%scevgep16](tbaa=!2)
	%R37<def,tied1> = FMADDrr_r32 %R37<kill,tied0>, %R27, %R40<kill>, %STATUS<imp-def,dead>
	%R34<def,dead> = CMPri_r32 %R33, 8, %STATUS<imp-def>
	STRf32 %R37<kill>, %R32<kill>, 4; mem:ST4[%scevgep16](tbaa=!2)
	%R32<def> = COPY %R35<kill>
	%R34<def> = COPY %R36<kill>
	BCC <BB#7>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#7(0x7c000000 / 0x80000000 = 96.88%) BB#8(0x04000000 / 0x80000000 = 3.12%)

BB#8: derived from LLVM BB %for.end60
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#7
	%R25<def> = ADDrr_r32 %R25<kill>, %IP, %STATUS<imp-def,dead>
	%R26<def> = ADDri_r32 %R26<kill>, 1, %STATUS<imp-def,dead>
	%R27<def,dead> = CMPrr_r32 %R26, %R3, %STATUS<imp-def>
	BCC <BB#5>, 0, %STATUS<imp-use>
	BNONE32 <BB#6>, %STATUS<imp-use>
    Successors according to CFG: BB#5(0x04000000 / 0x80000000 = 3.12%) BB#6(0x7c000000 / 0x80000000 = 96.88%)

BB#9: derived from LLVM BB %for.body66
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#5 BB#9
	%R27<def> = ADDrr_r32 %R16, %R26, %STATUS<imp-def,dead>
	%R33<def> = LDRf32 %R27<kill>, 0; mem:LD4[%sunkaddr30](tbaa=!2)
	%R27<def> = ADDri_r32 %R25, 4, %STATUS<imp-def,dead>
	%R26<def> = ADDri_r32 %R26<kill>, 4, %STATUS<imp-def,dead>
	%R34<def> = LDRf32 %R25, 0; mem:Volatile LD4[%lsr.iv24](tbaa=!2)
	%R32<def> = LDRi32_r32 %FP, -4; mem:LD4[FixedStack2]
	GID %CONFIG<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %R32<kill>
	GIE %CONFIG<imp-def,dead>
	%R33<def> = FADDrr_r32 %R33<kill>, %R34<kill>, %STATUS<imp-def,dead>
	%R32<def,dead> = CMPri_r32 %R26, 32, %STATUS<imp-def>
	STRf32 %R33<kill>, %R25<kill>, 0; mem:Volatile ST4[%lsr.iv24](tbaa=!2)
	%R25<def> = COPY %R27<kill>
	BCC <BB#9>, 1, %STATUS<imp-use>
    Successors according to CFG: BB#10(0x04000000 / 0x80000000 = 3.12%) BB#9(0x7c000000 / 0x80000000 = 96.88%)

BB#10: derived from LLVM BB %for.end75
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#9
	%R22<def> = ADDri_r32 %R22<kill>, 32, %STATUS<imp-def,dead>
	%R23<def> = ADDri_r32 %R23<kill>, 32, %STATUS<imp-def,dead>
	%R24<def> = ADDri_r32 %R24<kill>, 8, %STATUS<imp-def,dead>
	%R25<def,dead> = CMPrr_r32 %R24, %R3, %STATUS<imp-def>
	BCC <BB#4>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#4(0x7c000000 / 0x80000000 = 96.88%) BB#11(0x04000000 / 0x80000000 = 3.12%)

BB#11: derived from LLVM BB %for.end78
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20
    Predecessors according to CFG: BB#10
	%R2<def> = ADDrr_r32 %R2<kill>, %IP, %STATUS<imp-def,dead>
	%R20<def> = ADDri_r32 %R20<kill>, 1, %STATUS<imp-def,dead>
	%R21<def,dead> = CMPrr_r32 %R20, %R3, %STATUS<imp-def>
	BCC <BB#3>, 1, %STATUS<imp-use>
    Successors according to CFG: BB#12(0x04000000 / 0x80000000 = 3.12%) BB#3(0x7c000000 / 0x80000000 = 96.88%)

BB#12: derived from LLVM BB %for.end81
    Predecessors according to CFG: BB#1 BB#11
	%R0<def> = LDRi32_r32 %FP, -44; mem:LD4[FixedStack1]
	GID
	%CONFIG<def> = MOVTS32_core %R0<kill>
	GIE %CONFIG<imp-use,kill>
	%LR<def> = LDRi64 %SP, 48; flags: FrameSetup
	%SP<def> = ADDri_r32 %SP, 48, %STATUS<imp-def>
	RTS

# End machine code for function matmac.


<----------------->
Analyzing block 8
BB#8: derived from LLVM BB %for.end60
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#7
	%R25<def> = ADDrr_r32 %R25<kill>, %IP, %STATUS<imp-def,dead>
	%R26<def> = ADDri_r32 %R26<kill>, 1, %STATUS<imp-def,dead>
	%R27<def,dead> = CMPrr_r32 %R26, %R3, %STATUS<imp-def>
	BCC <BB#5>, 0, %STATUS<imp-use>
	BNONE32 <BB#6>, %STATUS<imp-use>
    Successors according to CFG: BB#5(0x04000000 / 0x80000000 = 3.12%) BB#6(0x7c000000 / 0x80000000 = 96.88%)

<----------------->
Removing branches out of BB#8
# Machine code for function matmac: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=32, align=8, at location [SP-40]
  fi#1: size=4, align=4, at location [SP-44]
  fi#2: size=4, align=4, at location [SP-4]
  fi#3: size=4, align=8, at location [SP-8]
Function Live Ins: %R0, %R1, %R2, %R3

BB#0: 
    Live Ins: %R0 %R1 %R2 %R3
	%SP<def,tied2> = STRi64_pmd %LR, %SP<tied0>, -48; flags: FrameSetup
	%FP<def> = ADDri_r32 %SP, 48, %STATUS<imp-def>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	GID %CONFIG<imp-def>
	%R19<def> = MOVFS32_core %CONFIG, %D9<imp-def>
	STRi32_r32 %R19, %FP, -44; mem:ST4[FixedStack1]
	%IP<def> = MOVi32ri 65535
	%IP<def,tied1> = MOVTi32ri %IP<kill,tied0>, 65521
	%R18<def> = ANDrr_r32 %R19, %IP<kill>, %STATUS<imp-def>, %D9<imp-use,kill>, %D9<imp-def>
	%R19<def,tied1> = MOVTi32ri %R19<tied0>, 72, %D9<imp-use,kill>, %D9<imp-def>
	STRi64 %D9<kill>, %FP, -8; mem:ST4[FixedStack3] ST4[FixedStack2]
	GIE %CONFIG<imp-use,kill>
    Successors according to CFG: BB#1(?%)

BB#1: derived from LLVM BB %entry
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#0
	%IP<def,dead> = CMPri_r32 %R3, 1, %STATUS<imp-def>
	BCC <BB#12>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#2(0x50000000 / 0x80000000 = 62.50%) BB#12(0x30000000 / 0x80000000 = 37.50%)

BB#2: derived from LLVM BB %for.body3.lr.ph.preheader
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#1
	%IP<def> = LSL32ri %R3, 2, %STATUS<imp-def,dead>
	%R1<def> = ADDri_r32 %R1<kill>, 8, %STATUS<imp-def,dead>
	%R16<def> = MOViPTR %FP, -40
	%R17<def> = ADDri_r32 %R16, 8, %STATUS<imp-def,dead>
	%R19<def> = MOVi32ri 0, %D9<imp-def>
	%R20<def> = COPY %R19
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %for.body3.lr.ph
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20
    Predecessors according to CFG: BB#2 BB#11
	%R21<def> = LDRi32_r32 %FP, -8; mem:LD4[FixedStack3]
	GID %CONFIG<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %R21<kill>
	GIE %CONFIG<imp-def,dead>
	%R21<def> = IMULrr_r32 %R20, %R3, %STATUS<imp-def,dead>
	%R21<def> = LSL32ri %R21<kill>, 2, %STATUS<imp-def,dead>
	%R21<def> = ADDrr_r32 %R0, %R21<kill>, %STATUS<imp-def,dead>
	%R22<def> = COPY %R2
	%R23<def> = COPY %R1
	%R24<def> = COPY %R19
    Successors according to CFG: BB#4(?%)

BB#4: derived from LLVM BB %for.body9.preheader
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#3 BB#10
	%R18<def> = COPY %R19, %D9<imp-use,kill>, %D9<imp-def>
	STRi64 %D9, %FP, -16; mem:ST8[%1+24]
	STRi64 %D9, %FP, -24; mem:ST8[%1+16]
	STRi64 %D9, %FP, -32; mem:ST8[%1+8]
	STRi64 %D9, %FP, -40; mem:ST8[%1]
	%R25<def> = COPY %R23
	%R26<def> = COPY %R19
    Successors according to CFG: BB#6(?%)

BB#5: derived from LLVM BB %for.cond64.preheader
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#8
	%R25<def> = COPY %R22
	%R26<def> = COPY %R19
	BNONE32 <BB#9>, %STATUS<imp-use>
    Successors according to CFG: BB#9(?%)

BB#6: derived from LLVM BB %for.body9
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#4 BB#8
	%R27<def> = LSL32ri %R26, 2, %STATUS<imp-def,dead>
	%R27<def> = ADDrr_r32 %R21, %R27<kill>, %STATUS<imp-def,dead>
	%R27<def> = LDRf32 %R27<kill>, 0; mem:Volatile LD4[%add.ptr10](tbaa=!2)
	%R32<def> = COPY %R17
	%R34<def> = COPY %R25
	%R33<def> = COPY %R19
    Successors according to CFG: BB#7(?%)

BB#7: derived from LLVM BB %for.body13
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26 %R27 %R32 %R33 %R34
    Predecessors according to CFG: BB#6 BB#7
	%R37<def> = LDRf32 %R34, -8; mem:Volatile LD4[%scevgep8](tbaa=!2)
	%R35<def> = ADDri_r32 %R32, 16, %STATUS<imp-def,dead>
	%R36<def> = ADDri_r32 %R34, 16, %STATUS<imp-def,dead>
	%R38<def> = LDRf32 %R34, -4; mem:Volatile LD4[%scevgep9](tbaa=!2)
	%R33<def> = ADDri_r32 %R33<kill>, 4, %STATUS<imp-def,dead>
	%R39<def> = LDRf32 %R34, 0; mem:Volatile LD4[%lsr.iv5](tbaa=!2)
	%R40<def> = LDRf32 %R34<kill>, 4; mem:Volatile LD4[%scevgep7](tbaa=!2)
	%D21<def> = LDRf64 %R32, -8; mem:LD4[%scevgep17](tbaa=!2) LD4[%scevgep15](tbaa=!2)
	%R34<def> = LDRi32_r32 %FP, -4; mem:LD4[FixedStack2]
	GID %CONFIG<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %R34<kill>
	GIE %CONFIG<imp-def,dead>
	%R43<def,tied1> = FMADDrr_r32 %R43<tied0>, %R27, %R37<kill>, %STATUS<imp-def,dead>, %D21<imp-use,kill>, %D21<imp-def>
	%R42<def,tied1> = FMADDrr_r32 %R42<tied0>, %R27, %R38<kill>, %STATUS<imp-def,dead>, %D21<imp-use,kill>, %D21<imp-def>
	%R44<def> = COPY %R43, %D22<imp-def>
	%R45<def> = COPY %R42, %D21<imp-use,kill>, %D22<imp-use,kill>, %D22<imp-def>
	STRf64 %D22<kill>, %R32, -8; mem:ST4[%scevgep17](tbaa=!2) ST4[%scevgep15](tbaa=!2)
	%R34<def> = LDRf32 %R32, 0; mem:LD4[%lsr.iv1214](tbaa=!2)
	%R34<def,tied1> = FMADDrr_r32 %R34<kill,tied0>, %R27, %R39<kill>, %STATUS<imp-def,dead>
	STRf32 %R34<kill>, %R32, 0; mem:ST4[%lsr.iv1214](tbaa=!2)
	%R37<def> = LDRf32 %R32, 4; mem:LD4[%scevgep16](tbaa=!2)
	%R37<def,tied1> = FMADDrr_r32 %R37<kill,tied0>, %R27, %R40<kill>, %STATUS<imp-def,dead>
	%R34<def,dead> = CMPri_r32 %R33, 8, %STATUS<imp-def>
	STRf32 %R37<kill>, %R32<kill>, 4; mem:ST4[%scevgep16](tbaa=!2)
	%R32<def> = COPY %R35<kill>
	%R34<def> = COPY %R36<kill>
	BCC <BB#7>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#7(0x7c000000 / 0x80000000 = 96.88%) BB#8(0x04000000 / 0x80000000 = 3.12%)

BB#8: derived from LLVM BB %for.end60
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#7
	%R25<def> = ADDrr_r32 %R25<kill>, %IP, %STATUS<imp-def,dead>
	%R26<def> = ADDri_r32 %R26<kill>, 1, %STATUS<imp-def,dead>
	%R27<def,dead> = CMPrr_r32 %R26, %R3, %STATUS<imp-def>
    Successors according to CFG: BB#5(0x04000000 / 0x80000000 = 3.12%) BB#6(0x7c000000 / 0x80000000 = 96.88%)

BB#9: derived from LLVM BB %for.body66
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#5 BB#9
	%R27<def> = ADDrr_r32 %R16, %R26, %STATUS<imp-def,dead>
	%R33<def> = LDRf32 %R27<kill>, 0; mem:LD4[%sunkaddr30](tbaa=!2)
	%R27<def> = ADDri_r32 %R25, 4, %STATUS<imp-def,dead>
	%R26<def> = ADDri_r32 %R26<kill>, 4, %STATUS<imp-def,dead>
	%R34<def> = LDRf32 %R25, 0; mem:Volatile LD4[%lsr.iv24](tbaa=!2)
	%R32<def> = LDRi32_r32 %FP, -4; mem:LD4[FixedStack2]
	GID %CONFIG<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %R32<kill>
	GIE %CONFIG<imp-def,dead>
	%R33<def> = FADDrr_r32 %R33<kill>, %R34<kill>, %STATUS<imp-def,dead>
	%R32<def,dead> = CMPri_r32 %R26, 32, %STATUS<imp-def>
	STRf32 %R33<kill>, %R25<kill>, 0; mem:Volatile ST4[%lsr.iv24](tbaa=!2)
	%R25<def> = COPY %R27<kill>
	BCC <BB#9>, 1, %STATUS<imp-use>
    Successors according to CFG: BB#10(0x04000000 / 0x80000000 = 3.12%) BB#9(0x7c000000 / 0x80000000 = 96.88%)

BB#10: derived from LLVM BB %for.end75
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#9
	%R22<def> = ADDri_r32 %R22<kill>, 32, %STATUS<imp-def,dead>
	%R23<def> = ADDri_r32 %R23<kill>, 32, %STATUS<imp-def,dead>
	%R24<def> = ADDri_r32 %R24<kill>, 8, %STATUS<imp-def,dead>
	%R25<def,dead> = CMPrr_r32 %R24, %R3, %STATUS<imp-def>
	BCC <BB#4>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#4(0x7c000000 / 0x80000000 = 96.88%) BB#11(0x04000000 / 0x80000000 = 3.12%)

BB#11: derived from LLVM BB %for.end78
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20
    Predecessors according to CFG: BB#10
	%R2<def> = ADDrr_r32 %R2<kill>, %IP, %STATUS<imp-def,dead>
	%R20<def> = ADDri_r32 %R20<kill>, 1, %STATUS<imp-def,dead>
	%R21<def,dead> = CMPrr_r32 %R20, %R3, %STATUS<imp-def>
	BCC <BB#3>, 1, %STATUS<imp-use>
    Successors according to CFG: BB#12(0x04000000 / 0x80000000 = 3.12%) BB#3(0x7c000000 / 0x80000000 = 96.88%)

BB#12: derived from LLVM BB %for.end81
    Predecessors according to CFG: BB#1 BB#11
	%R0<def> = LDRi32_r32 %FP, -44; mem:LD4[FixedStack1]
	GID
	%CONFIG<def> = MOVTS32_core %R0<kill>
	GIE %CONFIG<imp-use,kill>
	%LR<def> = LDRi64 %SP, 48; flags: FrameSetup
	%SP<def> = ADDri_r32 %SP, 48, %STATUS<imp-def>
	RTS

# End machine code for function matmac.


<----------------->
Inserting branch into BB#8
# Machine code for function matmac: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=32, align=8, at location [SP-40]
  fi#1: size=4, align=4, at location [SP-44]
  fi#2: size=4, align=4, at location [SP-4]
  fi#3: size=4, align=8, at location [SP-8]
Function Live Ins: %R0, %R1, %R2, %R3

BB#0: 
    Live Ins: %R0 %R1 %R2 %R3
	%SP<def,tied2> = STRi64_pmd %LR, %SP<tied0>, -48; flags: FrameSetup
	%FP<def> = ADDri_r32 %SP, 48, %STATUS<imp-def>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	GID %CONFIG<imp-def>
	%R19<def> = MOVFS32_core %CONFIG, %D9<imp-def>
	STRi32_r32 %R19, %FP, -44; mem:ST4[FixedStack1]
	%IP<def> = MOVi32ri 65535
	%IP<def,tied1> = MOVTi32ri %IP<kill,tied0>, 65521
	%R18<def> = ANDrr_r32 %R19, %IP<kill>, %STATUS<imp-def>, %D9<imp-use,kill>, %D9<imp-def>
	%R19<def,tied1> = MOVTi32ri %R19<tied0>, 72, %D9<imp-use,kill>, %D9<imp-def>
	STRi64 %D9<kill>, %FP, -8; mem:ST4[FixedStack3] ST4[FixedStack2]
	GIE %CONFIG<imp-use,kill>
    Successors according to CFG: BB#1(?%)

BB#1: derived from LLVM BB %entry
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#0
	%IP<def,dead> = CMPri_r32 %R3, 1, %STATUS<imp-def>
	BCC <BB#12>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#2(0x50000000 / 0x80000000 = 62.50%) BB#12(0x30000000 / 0x80000000 = 37.50%)

BB#2: derived from LLVM BB %for.body3.lr.ph.preheader
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#1
	%IP<def> = LSL32ri %R3, 2, %STATUS<imp-def,dead>
	%R1<def> = ADDri_r32 %R1<kill>, 8, %STATUS<imp-def,dead>
	%R16<def> = MOViPTR %FP, -40
	%R17<def> = ADDri_r32 %R16, 8, %STATUS<imp-def,dead>
	%R19<def> = MOVi32ri 0, %D9<imp-def>
	%R20<def> = COPY %R19
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %for.body3.lr.ph
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20
    Predecessors according to CFG: BB#2 BB#11
	%R21<def> = LDRi32_r32 %FP, -8; mem:LD4[FixedStack3]
	GID %CONFIG<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %R21<kill>
	GIE %CONFIG<imp-def,dead>
	%R21<def> = IMULrr_r32 %R20, %R3, %STATUS<imp-def,dead>
	%R21<def> = LSL32ri %R21<kill>, 2, %STATUS<imp-def,dead>
	%R21<def> = ADDrr_r32 %R0, %R21<kill>, %STATUS<imp-def,dead>
	%R22<def> = COPY %R2
	%R23<def> = COPY %R1
	%R24<def> = COPY %R19
    Successors according to CFG: BB#4(?%)

BB#4: derived from LLVM BB %for.body9.preheader
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#3 BB#10
	%R18<def> = COPY %R19, %D9<imp-use,kill>, %D9<imp-def>
	STRi64 %D9, %FP, -16; mem:ST8[%1+24]
	STRi64 %D9, %FP, -24; mem:ST8[%1+16]
	STRi64 %D9, %FP, -32; mem:ST8[%1+8]
	STRi64 %D9, %FP, -40; mem:ST8[%1]
	%R25<def> = COPY %R23
	%R26<def> = COPY %R19
    Successors according to CFG: BB#6(?%)

BB#5: derived from LLVM BB %for.cond64.preheader
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#8
	%R25<def> = COPY %R22
	%R26<def> = COPY %R19
	BNONE32 <BB#9>, %STATUS<imp-use>
    Successors according to CFG: BB#9(?%)

BB#6: derived from LLVM BB %for.body9
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#4 BB#8
	%R27<def> = LSL32ri %R26, 2, %STATUS<imp-def,dead>
	%R27<def> = ADDrr_r32 %R21, %R27<kill>, %STATUS<imp-def,dead>
	%R27<def> = LDRf32 %R27<kill>, 0; mem:Volatile LD4[%add.ptr10](tbaa=!2)
	%R32<def> = COPY %R17
	%R34<def> = COPY %R25
	%R33<def> = COPY %R19
    Successors according to CFG: BB#7(?%)

BB#7: derived from LLVM BB %for.body13
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26 %R27 %R32 %R33 %R34
    Predecessors according to CFG: BB#6 BB#7
	%R37<def> = LDRf32 %R34, -8; mem:Volatile LD4[%scevgep8](tbaa=!2)
	%R35<def> = ADDri_r32 %R32, 16, %STATUS<imp-def,dead>
	%R36<def> = ADDri_r32 %R34, 16, %STATUS<imp-def,dead>
	%R38<def> = LDRf32 %R34, -4; mem:Volatile LD4[%scevgep9](tbaa=!2)
	%R33<def> = ADDri_r32 %R33<kill>, 4, %STATUS<imp-def,dead>
	%R39<def> = LDRf32 %R34, 0; mem:Volatile LD4[%lsr.iv5](tbaa=!2)
	%R40<def> = LDRf32 %R34<kill>, 4; mem:Volatile LD4[%scevgep7](tbaa=!2)
	%D21<def> = LDRf64 %R32, -8; mem:LD4[%scevgep17](tbaa=!2) LD4[%scevgep15](tbaa=!2)
	%R34<def> = LDRi32_r32 %FP, -4; mem:LD4[FixedStack2]
	GID %CONFIG<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %R34<kill>
	GIE %CONFIG<imp-def,dead>
	%R43<def,tied1> = FMADDrr_r32 %R43<tied0>, %R27, %R37<kill>, %STATUS<imp-def,dead>, %D21<imp-use,kill>, %D21<imp-def>
	%R42<def,tied1> = FMADDrr_r32 %R42<tied0>, %R27, %R38<kill>, %STATUS<imp-def,dead>, %D21<imp-use,kill>, %D21<imp-def>
	%R44<def> = COPY %R43, %D22<imp-def>
	%R45<def> = COPY %R42, %D21<imp-use,kill>, %D22<imp-use,kill>, %D22<imp-def>
	STRf64 %D22<kill>, %R32, -8; mem:ST4[%scevgep17](tbaa=!2) ST4[%scevgep15](tbaa=!2)
	%R34<def> = LDRf32 %R32, 0; mem:LD4[%lsr.iv1214](tbaa=!2)
	%R34<def,tied1> = FMADDrr_r32 %R34<kill,tied0>, %R27, %R39<kill>, %STATUS<imp-def,dead>
	STRf32 %R34<kill>, %R32, 0; mem:ST4[%lsr.iv1214](tbaa=!2)
	%R37<def> = LDRf32 %R32, 4; mem:LD4[%scevgep16](tbaa=!2)
	%R37<def,tied1> = FMADDrr_r32 %R37<kill,tied0>, %R27, %R40<kill>, %STATUS<imp-def,dead>
	%R34<def,dead> = CMPri_r32 %R33, 8, %STATUS<imp-def>
	STRf32 %R37<kill>, %R32<kill>, 4; mem:ST4[%scevgep16](tbaa=!2)
	%R32<def> = COPY %R35<kill>
	%R34<def> = COPY %R36<kill>
	BCC <BB#7>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#7(0x7c000000 / 0x80000000 = 96.88%) BB#8(0x04000000 / 0x80000000 = 3.12%)

BB#8: derived from LLVM BB %for.end60
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#7
	%R25<def> = ADDrr_r32 %R25<kill>, %IP, %STATUS<imp-def,dead>
	%R26<def> = ADDri_r32 %R26<kill>, 1, %STATUS<imp-def,dead>
	%R27<def,dead> = CMPrr_r32 %R26, %R3, %STATUS<imp-def>
	BCC <BB#5>, 0, %STATUS<imp-use>
    Successors according to CFG: BB#5(0x04000000 / 0x80000000 = 3.12%) BB#6(0x7c000000 / 0x80000000 = 96.88%)

BB#9: derived from LLVM BB %for.body66
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#5 BB#9
	%R27<def> = ADDrr_r32 %R16, %R26, %STATUS<imp-def,dead>
	%R33<def> = LDRf32 %R27<kill>, 0; mem:LD4[%sunkaddr30](tbaa=!2)
	%R27<def> = ADDri_r32 %R25, 4, %STATUS<imp-def,dead>
	%R26<def> = ADDri_r32 %R26<kill>, 4, %STATUS<imp-def,dead>
	%R34<def> = LDRf32 %R25, 0; mem:Volatile LD4[%lsr.iv24](tbaa=!2)
	%R32<def> = LDRi32_r32 %FP, -4; mem:LD4[FixedStack2]
	GID %CONFIG<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %R32<kill>
	GIE %CONFIG<imp-def,dead>
	%R33<def> = FADDrr_r32 %R33<kill>, %R34<kill>, %STATUS<imp-def,dead>
	%R32<def,dead> = CMPri_r32 %R26, 32, %STATUS<imp-def>
	STRf32 %R33<kill>, %R25<kill>, 0; mem:Volatile ST4[%lsr.iv24](tbaa=!2)
	%R25<def> = COPY %R27<kill>
	BCC <BB#9>, 1, %STATUS<imp-use>
    Successors according to CFG: BB#10(0x04000000 / 0x80000000 = 3.12%) BB#9(0x7c000000 / 0x80000000 = 96.88%)

BB#10: derived from LLVM BB %for.end75
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#9
	%R22<def> = ADDri_r32 %R22<kill>, 32, %STATUS<imp-def,dead>
	%R23<def> = ADDri_r32 %R23<kill>, 32, %STATUS<imp-def,dead>
	%R24<def> = ADDri_r32 %R24<kill>, 8, %STATUS<imp-def,dead>
	%R25<def,dead> = CMPrr_r32 %R24, %R3, %STATUS<imp-def>
	BCC <BB#4>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#4(0x7c000000 / 0x80000000 = 96.88%) BB#11(0x04000000 / 0x80000000 = 3.12%)

BB#11: derived from LLVM BB %for.end78
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20
    Predecessors according to CFG: BB#10
	%R2<def> = ADDrr_r32 %R2<kill>, %IP, %STATUS<imp-def,dead>
	%R20<def> = ADDri_r32 %R20<kill>, 1, %STATUS<imp-def,dead>
	%R21<def,dead> = CMPrr_r32 %R20, %R3, %STATUS<imp-def>
	BCC <BB#3>, 1, %STATUS<imp-use>
    Successors according to CFG: BB#12(0x04000000 / 0x80000000 = 3.12%) BB#3(0x7c000000 / 0x80000000 = 96.88%)

BB#12: derived from LLVM BB %for.end81
    Predecessors according to CFG: BB#1 BB#11
	%R0<def> = LDRi32_r32 %FP, -44; mem:LD4[FixedStack1]
	GID
	%CONFIG<def> = MOVTS32_core %R0<kill>
	GIE %CONFIG<imp-use,kill>
	%LR<def> = LDRi64 %SP, 48; flags: FrameSetup
	%SP<def> = ADDri_r32 %SP, 48, %STATUS<imp-def>
	RTS

# End machine code for function matmac.


TryTailMergeBlocks: BB#4, BB#8
  with successor BB#6
  which has fall-through from BB#5
Looking for common tails of at least 3 instructions

<----------------->
Analyzing block 4
BB#4: derived from LLVM BB %for.body9.preheader
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#3 BB#10
	%R18<def> = COPY %R19, %D9<imp-use,kill>, %D9<imp-def>
	STRi64 %D9, %FP, -16; mem:ST8[%1+24]
	STRi64 %D9, %FP, -24; mem:ST8[%1+16]
	STRi64 %D9, %FP, -32; mem:ST8[%1+8]
	STRi64 %D9, %FP, -40; mem:ST8[%1]
	%R25<def> = COPY %R23
	%R26<def> = COPY %R19
    Successors according to CFG: BB#6(?%)

<----------------->
Inserting branch into BB#4

<----------------->
Analyzing block 8
BB#8: derived from LLVM BB %for.end60
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#7
	%R25<def> = ADDrr_r32 %R25<kill>, %IP, %STATUS<imp-def,dead>
	%R26<def> = ADDri_r32 %R26<kill>, 1, %STATUS<imp-def,dead>
	%R27<def,dead> = CMPrr_r32 %R26, %R3, %STATUS<imp-def>
	BCC <BB#5>, 0, %STATUS<imp-use>
    Successors according to CFG: BB#5(0x04000000 / 0x80000000 = 3.12%) BB#6(0x7c000000 / 0x80000000 = 96.88%)

<----------------->
Inserting branch into BB#8

<----------------->
Analyzing block 6
BB#6: derived from LLVM BB %for.body9
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#4 BB#8
	%R27<def> = LSL32ri %R26, 2, %STATUS<imp-def,dead>
	%R27<def> = ADDrr_r32 %R21, %R27<kill>, %STATUS<imp-def,dead>
	%R27<def> = LDRf32 %R27<kill>, 0; mem:Volatile LD4[%add.ptr10](tbaa=!2)
	%R32<def> = COPY %R17
	%R34<def> = COPY %R25
	%R33<def> = COPY %R19
    Successors according to CFG: BB#7(?%)

<----------------->
Analyzing block 5
BB#5: derived from LLVM BB %for.cond64.preheader
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#8
	%R25<def> = COPY %R22
	%R26<def> = COPY %R19
	BNONE32 <BB#9>, %STATUS<imp-use>
    Successors according to CFG: BB#9(?%)

<----------------->
Removing branches out of BB#5
# Machine code for function matmac: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=32, align=8, at location [SP-40]
  fi#1: size=4, align=4, at location [SP-44]
  fi#2: size=4, align=4, at location [SP-4]
  fi#3: size=4, align=8, at location [SP-8]
Function Live Ins: %R0, %R1, %R2, %R3

BB#0: 
    Live Ins: %R0 %R1 %R2 %R3
	%SP<def,tied2> = STRi64_pmd %LR, %SP<tied0>, -48; flags: FrameSetup
	%FP<def> = ADDri_r32 %SP, 48, %STATUS<imp-def>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	GID %CONFIG<imp-def>
	%R19<def> = MOVFS32_core %CONFIG, %D9<imp-def>
	STRi32_r32 %R19, %FP, -44; mem:ST4[FixedStack1]
	%IP<def> = MOVi32ri 65535
	%IP<def,tied1> = MOVTi32ri %IP<kill,tied0>, 65521
	%R18<def> = ANDrr_r32 %R19, %IP<kill>, %STATUS<imp-def>, %D9<imp-use,kill>, %D9<imp-def>
	%R19<def,tied1> = MOVTi32ri %R19<tied0>, 72, %D9<imp-use,kill>, %D9<imp-def>
	STRi64 %D9<kill>, %FP, -8; mem:ST4[FixedStack3] ST4[FixedStack2]
	GIE %CONFIG<imp-use,kill>
    Successors according to CFG: BB#1(?%)

BB#1: derived from LLVM BB %entry
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#0
	%IP<def,dead> = CMPri_r32 %R3, 1, %STATUS<imp-def>
	BCC <BB#12>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#2(0x50000000 / 0x80000000 = 62.50%) BB#12(0x30000000 / 0x80000000 = 37.50%)

BB#2: derived from LLVM BB %for.body3.lr.ph.preheader
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#1
	%IP<def> = LSL32ri %R3, 2, %STATUS<imp-def,dead>
	%R1<def> = ADDri_r32 %R1<kill>, 8, %STATUS<imp-def,dead>
	%R16<def> = MOViPTR %FP, -40
	%R17<def> = ADDri_r32 %R16, 8, %STATUS<imp-def,dead>
	%R19<def> = MOVi32ri 0, %D9<imp-def>
	%R20<def> = COPY %R19
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %for.body3.lr.ph
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20
    Predecessors according to CFG: BB#2 BB#11
	%R21<def> = LDRi32_r32 %FP, -8; mem:LD4[FixedStack3]
	GID %CONFIG<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %R21<kill>
	GIE %CONFIG<imp-def,dead>
	%R21<def> = IMULrr_r32 %R20, %R3, %STATUS<imp-def,dead>
	%R21<def> = LSL32ri %R21<kill>, 2, %STATUS<imp-def,dead>
	%R21<def> = ADDrr_r32 %R0, %R21<kill>, %STATUS<imp-def,dead>
	%R22<def> = COPY %R2
	%R23<def> = COPY %R1
	%R24<def> = COPY %R19
    Successors according to CFG: BB#4(?%)

BB#4: derived from LLVM BB %for.body9.preheader
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#3 BB#10
	%R18<def> = COPY %R19, %D9<imp-use,kill>, %D9<imp-def>
	STRi64 %D9, %FP, -16; mem:ST8[%1+24]
	STRi64 %D9, %FP, -24; mem:ST8[%1+16]
	STRi64 %D9, %FP, -32; mem:ST8[%1+8]
	STRi64 %D9, %FP, -40; mem:ST8[%1]
	%R25<def> = COPY %R23
	%R26<def> = COPY %R19
	BNONE32 <BB#6>, %STATUS<imp-use>
    Successors according to CFG: BB#6(?%)

BB#5: derived from LLVM BB %for.cond64.preheader
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#8
	%R25<def> = COPY %R22
	%R26<def> = COPY %R19
    Successors according to CFG: BB#9(?%)

BB#6: derived from LLVM BB %for.body9
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#4 BB#8
	%R27<def> = LSL32ri %R26, 2, %STATUS<imp-def,dead>
	%R27<def> = ADDrr_r32 %R21, %R27<kill>, %STATUS<imp-def,dead>
	%R27<def> = LDRf32 %R27<kill>, 0; mem:Volatile LD4[%add.ptr10](tbaa=!2)
	%R32<def> = COPY %R17
	%R34<def> = COPY %R25
	%R33<def> = COPY %R19
    Successors according to CFG: BB#7(?%)

BB#7: derived from LLVM BB %for.body13
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26 %R27 %R32 %R33 %R34
    Predecessors according to CFG: BB#6 BB#7
	%R37<def> = LDRf32 %R34, -8; mem:Volatile LD4[%scevgep8](tbaa=!2)
	%R35<def> = ADDri_r32 %R32, 16, %STATUS<imp-def,dead>
	%R36<def> = ADDri_r32 %R34, 16, %STATUS<imp-def,dead>
	%R38<def> = LDRf32 %R34, -4; mem:Volatile LD4[%scevgep9](tbaa=!2)
	%R33<def> = ADDri_r32 %R33<kill>, 4, %STATUS<imp-def,dead>
	%R39<def> = LDRf32 %R34, 0; mem:Volatile LD4[%lsr.iv5](tbaa=!2)
	%R40<def> = LDRf32 %R34<kill>, 4; mem:Volatile LD4[%scevgep7](tbaa=!2)
	%D21<def> = LDRf64 %R32, -8; mem:LD4[%scevgep17](tbaa=!2) LD4[%scevgep15](tbaa=!2)
	%R34<def> = LDRi32_r32 %FP, -4; mem:LD4[FixedStack2]
	GID %CONFIG<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %R34<kill>
	GIE %CONFIG<imp-def,dead>
	%R43<def,tied1> = FMADDrr_r32 %R43<tied0>, %R27, %R37<kill>, %STATUS<imp-def,dead>, %D21<imp-use,kill>, %D21<imp-def>
	%R42<def,tied1> = FMADDrr_r32 %R42<tied0>, %R27, %R38<kill>, %STATUS<imp-def,dead>, %D21<imp-use,kill>, %D21<imp-def>
	%R44<def> = COPY %R43, %D22<imp-def>
	%R45<def> = COPY %R42, %D21<imp-use,kill>, %D22<imp-use,kill>, %D22<imp-def>
	STRf64 %D22<kill>, %R32, -8; mem:ST4[%scevgep17](tbaa=!2) ST4[%scevgep15](tbaa=!2)
	%R34<def> = LDRf32 %R32, 0; mem:LD4[%lsr.iv1214](tbaa=!2)
	%R34<def,tied1> = FMADDrr_r32 %R34<kill,tied0>, %R27, %R39<kill>, %STATUS<imp-def,dead>
	STRf32 %R34<kill>, %R32, 0; mem:ST4[%lsr.iv1214](tbaa=!2)
	%R37<def> = LDRf32 %R32, 4; mem:LD4[%scevgep16](tbaa=!2)
	%R37<def,tied1> = FMADDrr_r32 %R37<kill,tied0>, %R27, %R40<kill>, %STATUS<imp-def,dead>
	%R34<def,dead> = CMPri_r32 %R33, 8, %STATUS<imp-def>
	STRf32 %R37<kill>, %R32<kill>, 4; mem:ST4[%scevgep16](tbaa=!2)
	%R32<def> = COPY %R35<kill>
	%R34<def> = COPY %R36<kill>
	BCC <BB#7>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#7(0x7c000000 / 0x80000000 = 96.88%) BB#8(0x04000000 / 0x80000000 = 3.12%)

BB#8: derived from LLVM BB %for.end60
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#7
	%R25<def> = ADDrr_r32 %R25<kill>, %IP, %STATUS<imp-def,dead>
	%R26<def> = ADDri_r32 %R26<kill>, 1, %STATUS<imp-def,dead>
	%R27<def,dead> = CMPrr_r32 %R26, %R3, %STATUS<imp-def>
	BCC <BB#5>, 0, %STATUS<imp-use>
	BNONE32 <BB#6>, %STATUS<imp-use>
    Successors according to CFG: BB#5(0x04000000 / 0x80000000 = 3.12%) BB#6(0x7c000000 / 0x80000000 = 96.88%)

BB#9: derived from LLVM BB %for.body66
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#5 BB#9
	%R27<def> = ADDrr_r32 %R16, %R26, %STATUS<imp-def,dead>
	%R33<def> = LDRf32 %R27<kill>, 0; mem:LD4[%sunkaddr30](tbaa=!2)
	%R27<def> = ADDri_r32 %R25, 4, %STATUS<imp-def,dead>
	%R26<def> = ADDri_r32 %R26<kill>, 4, %STATUS<imp-def,dead>
	%R34<def> = LDRf32 %R25, 0; mem:Volatile LD4[%lsr.iv24](tbaa=!2)
	%R32<def> = LDRi32_r32 %FP, -4; mem:LD4[FixedStack2]
	GID %CONFIG<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %R32<kill>
	GIE %CONFIG<imp-def,dead>
	%R33<def> = FADDrr_r32 %R33<kill>, %R34<kill>, %STATUS<imp-def,dead>
	%R32<def,dead> = CMPri_r32 %R26, 32, %STATUS<imp-def>
	STRf32 %R33<kill>, %R25<kill>, 0; mem:Volatile ST4[%lsr.iv24](tbaa=!2)
	%R25<def> = COPY %R27<kill>
	BCC <BB#9>, 1, %STATUS<imp-use>
    Successors according to CFG: BB#10(0x04000000 / 0x80000000 = 3.12%) BB#9(0x7c000000 / 0x80000000 = 96.88%)

BB#10: derived from LLVM BB %for.end75
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#9
	%R22<def> = ADDri_r32 %R22<kill>, 32, %STATUS<imp-def,dead>
	%R23<def> = ADDri_r32 %R23<kill>, 32, %STATUS<imp-def,dead>
	%R24<def> = ADDri_r32 %R24<kill>, 8, %STATUS<imp-def,dead>
	%R25<def,dead> = CMPrr_r32 %R24, %R3, %STATUS<imp-def>
	BCC <BB#4>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#4(0x7c000000 / 0x80000000 = 96.88%) BB#11(0x04000000 / 0x80000000 = 3.12%)

BB#11: derived from LLVM BB %for.end78
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20
    Predecessors according to CFG: BB#10
	%R2<def> = ADDrr_r32 %R2<kill>, %IP, %STATUS<imp-def,dead>
	%R20<def> = ADDri_r32 %R20<kill>, 1, %STATUS<imp-def,dead>
	%R21<def,dead> = CMPrr_r32 %R20, %R3, %STATUS<imp-def>
	BCC <BB#3>, 1, %STATUS<imp-use>
    Successors according to CFG: BB#12(0x04000000 / 0x80000000 = 3.12%) BB#3(0x7c000000 / 0x80000000 = 96.88%)

BB#12: derived from LLVM BB %for.end81
    Predecessors according to CFG: BB#1 BB#11
	%R0<def> = LDRi32_r32 %FP, -44; mem:LD4[FixedStack1]
	GID
	%CONFIG<def> = MOVTS32_core %R0<kill>
	GIE %CONFIG<imp-use,kill>
	%LR<def> = LDRi64 %SP, 48; flags: FrameSetup
	%SP<def> = ADDri_r32 %SP, 48, %STATUS<imp-def>
	RTS

# End machine code for function matmac.


<----------------->
Analyzing block 5
BB#5: derived from LLVM BB %for.cond64.preheader
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#8
	%R25<def> = COPY %R22
	%R26<def> = COPY %R19
    Successors according to CFG: BB#9(?%)

<----------------->
Inserting branch into BB#5

<----------------->
Analyzing block 1
BB#1: derived from LLVM BB %entry
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#0
	%IP<def,dead> = CMPri_r32 %R3, 1, %STATUS<imp-def>
	BCC <BB#12>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#2(0x50000000 / 0x80000000 = 62.50%) BB#12(0x30000000 / 0x80000000 = 37.50%)

<----------------->
Removing branches out of BB#1
# Machine code for function matmac: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=32, align=8, at location [SP-40]
  fi#1: size=4, align=4, at location [SP-44]
  fi#2: size=4, align=4, at location [SP-4]
  fi#3: size=4, align=8, at location [SP-8]
Function Live Ins: %R0, %R1, %R2, %R3

BB#0: 
    Live Ins: %R0 %R1 %R2 %R3
	%SP<def,tied2> = STRi64_pmd %LR, %SP<tied0>, -48; flags: FrameSetup
	%FP<def> = ADDri_r32 %SP, 48, %STATUS<imp-def>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	GID %CONFIG<imp-def>
	%R19<def> = MOVFS32_core %CONFIG, %D9<imp-def>
	STRi32_r32 %R19, %FP, -44; mem:ST4[FixedStack1]
	%IP<def> = MOVi32ri 65535
	%IP<def,tied1> = MOVTi32ri %IP<kill,tied0>, 65521
	%R18<def> = ANDrr_r32 %R19, %IP<kill>, %STATUS<imp-def>, %D9<imp-use,kill>, %D9<imp-def>
	%R19<def,tied1> = MOVTi32ri %R19<tied0>, 72, %D9<imp-use,kill>, %D9<imp-def>
	STRi64 %D9<kill>, %FP, -8; mem:ST4[FixedStack3] ST4[FixedStack2]
	GIE %CONFIG<imp-use,kill>
    Successors according to CFG: BB#1(?%)

BB#1: derived from LLVM BB %entry
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#0
	%IP<def,dead> = CMPri_r32 %R3, 1, %STATUS<imp-def>
    Successors according to CFG: BB#2(0x50000000 / 0x80000000 = 62.50%) BB#12(0x30000000 / 0x80000000 = 37.50%)

BB#2: derived from LLVM BB %for.body3.lr.ph.preheader
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#1
	%IP<def> = LSL32ri %R3, 2, %STATUS<imp-def,dead>
	%R1<def> = ADDri_r32 %R1<kill>, 8, %STATUS<imp-def,dead>
	%R16<def> = MOViPTR %FP, -40
	%R17<def> = ADDri_r32 %R16, 8, %STATUS<imp-def,dead>
	%R19<def> = MOVi32ri 0, %D9<imp-def>
	%R20<def> = COPY %R19
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %for.body3.lr.ph
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20
    Predecessors according to CFG: BB#2 BB#11
	%R21<def> = LDRi32_r32 %FP, -8; mem:LD4[FixedStack3]
	GID %CONFIG<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %R21<kill>
	GIE %CONFIG<imp-def,dead>
	%R21<def> = IMULrr_r32 %R20, %R3, %STATUS<imp-def,dead>
	%R21<def> = LSL32ri %R21<kill>, 2, %STATUS<imp-def,dead>
	%R21<def> = ADDrr_r32 %R0, %R21<kill>, %STATUS<imp-def,dead>
	%R22<def> = COPY %R2
	%R23<def> = COPY %R1
	%R24<def> = COPY %R19
    Successors according to CFG: BB#4(?%)

BB#4: derived from LLVM BB %for.body9.preheader
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#3 BB#10
	%R18<def> = COPY %R19, %D9<imp-use,kill>, %D9<imp-def>
	STRi64 %D9, %FP, -16; mem:ST8[%1+24]
	STRi64 %D9, %FP, -24; mem:ST8[%1+16]
	STRi64 %D9, %FP, -32; mem:ST8[%1+8]
	STRi64 %D9, %FP, -40; mem:ST8[%1]
	%R25<def> = COPY %R23
	%R26<def> = COPY %R19
	BNONE32 <BB#6>, %STATUS<imp-use>
    Successors according to CFG: BB#6(?%)

BB#5: derived from LLVM BB %for.cond64.preheader
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#8
	%R25<def> = COPY %R22
	%R26<def> = COPY %R19
	BNONE32 <BB#9>, %STATUS<imp-use>
    Successors according to CFG: BB#9(?%)

BB#6: derived from LLVM BB %for.body9
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#4 BB#8
	%R27<def> = LSL32ri %R26, 2, %STATUS<imp-def,dead>
	%R27<def> = ADDrr_r32 %R21, %R27<kill>, %STATUS<imp-def,dead>
	%R27<def> = LDRf32 %R27<kill>, 0; mem:Volatile LD4[%add.ptr10](tbaa=!2)
	%R32<def> = COPY %R17
	%R34<def> = COPY %R25
	%R33<def> = COPY %R19
    Successors according to CFG: BB#7(?%)

BB#7: derived from LLVM BB %for.body13
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26 %R27 %R32 %R33 %R34
    Predecessors according to CFG: BB#6 BB#7
	%R37<def> = LDRf32 %R34, -8; mem:Volatile LD4[%scevgep8](tbaa=!2)
	%R35<def> = ADDri_r32 %R32, 16, %STATUS<imp-def,dead>
	%R36<def> = ADDri_r32 %R34, 16, %STATUS<imp-def,dead>
	%R38<def> = LDRf32 %R34, -4; mem:Volatile LD4[%scevgep9](tbaa=!2)
	%R33<def> = ADDri_r32 %R33<kill>, 4, %STATUS<imp-def,dead>
	%R39<def> = LDRf32 %R34, 0; mem:Volatile LD4[%lsr.iv5](tbaa=!2)
	%R40<def> = LDRf32 %R34<kill>, 4; mem:Volatile LD4[%scevgep7](tbaa=!2)
	%D21<def> = LDRf64 %R32, -8; mem:LD4[%scevgep17](tbaa=!2) LD4[%scevgep15](tbaa=!2)
	%R34<def> = LDRi32_r32 %FP, -4; mem:LD4[FixedStack2]
	GID %CONFIG<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %R34<kill>
	GIE %CONFIG<imp-def,dead>
	%R43<def,tied1> = FMADDrr_r32 %R43<tied0>, %R27, %R37<kill>, %STATUS<imp-def,dead>, %D21<imp-use,kill>, %D21<imp-def>
	%R42<def,tied1> = FMADDrr_r32 %R42<tied0>, %R27, %R38<kill>, %STATUS<imp-def,dead>, %D21<imp-use,kill>, %D21<imp-def>
	%R44<def> = COPY %R43, %D22<imp-def>
	%R45<def> = COPY %R42, %D21<imp-use,kill>, %D22<imp-use,kill>, %D22<imp-def>
	STRf64 %D22<kill>, %R32, -8; mem:ST4[%scevgep17](tbaa=!2) ST4[%scevgep15](tbaa=!2)
	%R34<def> = LDRf32 %R32, 0; mem:LD4[%lsr.iv1214](tbaa=!2)
	%R34<def,tied1> = FMADDrr_r32 %R34<kill,tied0>, %R27, %R39<kill>, %STATUS<imp-def,dead>
	STRf32 %R34<kill>, %R32, 0; mem:ST4[%lsr.iv1214](tbaa=!2)
	%R37<def> = LDRf32 %R32, 4; mem:LD4[%scevgep16](tbaa=!2)
	%R37<def,tied1> = FMADDrr_r32 %R37<kill,tied0>, %R27, %R40<kill>, %STATUS<imp-def,dead>
	%R34<def,dead> = CMPri_r32 %R33, 8, %STATUS<imp-def>
	STRf32 %R37<kill>, %R32<kill>, 4; mem:ST4[%scevgep16](tbaa=!2)
	%R32<def> = COPY %R35<kill>
	%R34<def> = COPY %R36<kill>
	BCC <BB#7>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#7(0x7c000000 / 0x80000000 = 96.88%) BB#8(0x04000000 / 0x80000000 = 3.12%)

BB#8: derived from LLVM BB %for.end60
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#7
	%R25<def> = ADDrr_r32 %R25<kill>, %IP, %STATUS<imp-def,dead>
	%R26<def> = ADDri_r32 %R26<kill>, 1, %STATUS<imp-def,dead>
	%R27<def,dead> = CMPrr_r32 %R26, %R3, %STATUS<imp-def>
	BCC <BB#5>, 0, %STATUS<imp-use>
	BNONE32 <BB#6>, %STATUS<imp-use>
    Successors according to CFG: BB#5(0x04000000 / 0x80000000 = 3.12%) BB#6(0x7c000000 / 0x80000000 = 96.88%)

BB#9: derived from LLVM BB %for.body66
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#5 BB#9
	%R27<def> = ADDrr_r32 %R16, %R26, %STATUS<imp-def,dead>
	%R33<def> = LDRf32 %R27<kill>, 0; mem:LD4[%sunkaddr30](tbaa=!2)
	%R27<def> = ADDri_r32 %R25, 4, %STATUS<imp-def,dead>
	%R26<def> = ADDri_r32 %R26<kill>, 4, %STATUS<imp-def,dead>
	%R34<def> = LDRf32 %R25, 0; mem:Volatile LD4[%lsr.iv24](tbaa=!2)
	%R32<def> = LDRi32_r32 %FP, -4; mem:LD4[FixedStack2]
	GID %CONFIG<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %R32<kill>
	GIE %CONFIG<imp-def,dead>
	%R33<def> = FADDrr_r32 %R33<kill>, %R34<kill>, %STATUS<imp-def,dead>
	%R32<def,dead> = CMPri_r32 %R26, 32, %STATUS<imp-def>
	STRf32 %R33<kill>, %R25<kill>, 0; mem:Volatile ST4[%lsr.iv24](tbaa=!2)
	%R25<def> = COPY %R27<kill>
	BCC <BB#9>, 1, %STATUS<imp-use>
    Successors according to CFG: BB#10(0x04000000 / 0x80000000 = 3.12%) BB#9(0x7c000000 / 0x80000000 = 96.88%)

BB#10: derived from LLVM BB %for.end75
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#9
	%R22<def> = ADDri_r32 %R22<kill>, 32, %STATUS<imp-def,dead>
	%R23<def> = ADDri_r32 %R23<kill>, 32, %STATUS<imp-def,dead>
	%R24<def> = ADDri_r32 %R24<kill>, 8, %STATUS<imp-def,dead>
	%R25<def,dead> = CMPrr_r32 %R24, %R3, %STATUS<imp-def>
	BCC <BB#4>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#4(0x7c000000 / 0x80000000 = 96.88%) BB#11(0x04000000 / 0x80000000 = 3.12%)

BB#11: derived from LLVM BB %for.end78
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20
    Predecessors according to CFG: BB#10
	%R2<def> = ADDrr_r32 %R2<kill>, %IP, %STATUS<imp-def,dead>
	%R20<def> = ADDri_r32 %R20<kill>, 1, %STATUS<imp-def,dead>
	%R21<def,dead> = CMPrr_r32 %R20, %R3, %STATUS<imp-def>
	BCC <BB#3>, 1, %STATUS<imp-use>
    Successors according to CFG: BB#12(0x04000000 / 0x80000000 = 3.12%) BB#3(0x7c000000 / 0x80000000 = 96.88%)

BB#12: derived from LLVM BB %for.end81
    Predecessors according to CFG: BB#1 BB#11
	%R0<def> = LDRi32_r32 %FP, -44; mem:LD4[FixedStack1]
	GID
	%CONFIG<def> = MOVTS32_core %R0<kill>
	GIE %CONFIG<imp-use,kill>
	%LR<def> = LDRi64 %SP, 48; flags: FrameSetup
	%SP<def> = ADDri_r32 %SP, 48, %STATUS<imp-def>
	RTS

# End machine code for function matmac.


<----------------->
Inserting branch into BB#1
# Machine code for function matmac: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=32, align=8, at location [SP-40]
  fi#1: size=4, align=4, at location [SP-44]
  fi#2: size=4, align=4, at location [SP-4]
  fi#3: size=4, align=8, at location [SP-8]
Function Live Ins: %R0, %R1, %R2, %R3

BB#0: 
    Live Ins: %R0 %R1 %R2 %R3
	%SP<def,tied2> = STRi64_pmd %LR, %SP<tied0>, -48; flags: FrameSetup
	%FP<def> = ADDri_r32 %SP, 48, %STATUS<imp-def>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	GID %CONFIG<imp-def>
	%R19<def> = MOVFS32_core %CONFIG, %D9<imp-def>
	STRi32_r32 %R19, %FP, -44; mem:ST4[FixedStack1]
	%IP<def> = MOVi32ri 65535
	%IP<def,tied1> = MOVTi32ri %IP<kill,tied0>, 65521
	%R18<def> = ANDrr_r32 %R19, %IP<kill>, %STATUS<imp-def>, %D9<imp-use,kill>, %D9<imp-def>
	%R19<def,tied1> = MOVTi32ri %R19<tied0>, 72, %D9<imp-use,kill>, %D9<imp-def>
	STRi64 %D9<kill>, %FP, -8; mem:ST4[FixedStack3] ST4[FixedStack2]
	GIE %CONFIG<imp-use,kill>
    Successors according to CFG: BB#1(?%)

BB#1: derived from LLVM BB %entry
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#0
	%IP<def,dead> = CMPri_r32 %R3, 1, %STATUS<imp-def>
	BCC <BB#2>, 7, %STATUS<imp-use>
    Successors according to CFG: BB#2(0x50000000 / 0x80000000 = 62.50%) BB#12(0x30000000 / 0x80000000 = 37.50%)

BB#2: derived from LLVM BB %for.body3.lr.ph.preheader
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#1
	%IP<def> = LSL32ri %R3, 2, %STATUS<imp-def,dead>
	%R1<def> = ADDri_r32 %R1<kill>, 8, %STATUS<imp-def,dead>
	%R16<def> = MOViPTR %FP, -40
	%R17<def> = ADDri_r32 %R16, 8, %STATUS<imp-def,dead>
	%R19<def> = MOVi32ri 0, %D9<imp-def>
	%R20<def> = COPY %R19
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %for.body3.lr.ph
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20
    Predecessors according to CFG: BB#2 BB#11
	%R21<def> = LDRi32_r32 %FP, -8; mem:LD4[FixedStack3]
	GID %CONFIG<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %R21<kill>
	GIE %CONFIG<imp-def,dead>
	%R21<def> = IMULrr_r32 %R20, %R3, %STATUS<imp-def,dead>
	%R21<def> = LSL32ri %R21<kill>, 2, %STATUS<imp-def,dead>
	%R21<def> = ADDrr_r32 %R0, %R21<kill>, %STATUS<imp-def,dead>
	%R22<def> = COPY %R2
	%R23<def> = COPY %R1
	%R24<def> = COPY %R19
    Successors according to CFG: BB#4(?%)

BB#4: derived from LLVM BB %for.body9.preheader
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#3 BB#10
	%R18<def> = COPY %R19, %D9<imp-use,kill>, %D9<imp-def>
	STRi64 %D9, %FP, -16; mem:ST8[%1+24]
	STRi64 %D9, %FP, -24; mem:ST8[%1+16]
	STRi64 %D9, %FP, -32; mem:ST8[%1+8]
	STRi64 %D9, %FP, -40; mem:ST8[%1]
	%R25<def> = COPY %R23
	%R26<def> = COPY %R19
	BNONE32 <BB#6>, %STATUS<imp-use>
    Successors according to CFG: BB#6(?%)

BB#5: derived from LLVM BB %for.cond64.preheader
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#8
	%R25<def> = COPY %R22
	%R26<def> = COPY %R19
	BNONE32 <BB#9>, %STATUS<imp-use>
    Successors according to CFG: BB#9(?%)

BB#6: derived from LLVM BB %for.body9
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#4 BB#8
	%R27<def> = LSL32ri %R26, 2, %STATUS<imp-def,dead>
	%R27<def> = ADDrr_r32 %R21, %R27<kill>, %STATUS<imp-def,dead>
	%R27<def> = LDRf32 %R27<kill>, 0; mem:Volatile LD4[%add.ptr10](tbaa=!2)
	%R32<def> = COPY %R17
	%R34<def> = COPY %R25
	%R33<def> = COPY %R19
    Successors according to CFG: BB#7(?%)

BB#7: derived from LLVM BB %for.body13
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26 %R27 %R32 %R33 %R34
    Predecessors according to CFG: BB#6 BB#7
	%R37<def> = LDRf32 %R34, -8; mem:Volatile LD4[%scevgep8](tbaa=!2)
	%R35<def> = ADDri_r32 %R32, 16, %STATUS<imp-def,dead>
	%R36<def> = ADDri_r32 %R34, 16, %STATUS<imp-def,dead>
	%R38<def> = LDRf32 %R34, -4; mem:Volatile LD4[%scevgep9](tbaa=!2)
	%R33<def> = ADDri_r32 %R33<kill>, 4, %STATUS<imp-def,dead>
	%R39<def> = LDRf32 %R34, 0; mem:Volatile LD4[%lsr.iv5](tbaa=!2)
	%R40<def> = LDRf32 %R34<kill>, 4; mem:Volatile LD4[%scevgep7](tbaa=!2)
	%D21<def> = LDRf64 %R32, -8; mem:LD4[%scevgep17](tbaa=!2) LD4[%scevgep15](tbaa=!2)
	%R34<def> = LDRi32_r32 %FP, -4; mem:LD4[FixedStack2]
	GID %CONFIG<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %R34<kill>
	GIE %CONFIG<imp-def,dead>
	%R43<def,tied1> = FMADDrr_r32 %R43<tied0>, %R27, %R37<kill>, %STATUS<imp-def,dead>, %D21<imp-use,kill>, %D21<imp-def>
	%R42<def,tied1> = FMADDrr_r32 %R42<tied0>, %R27, %R38<kill>, %STATUS<imp-def,dead>, %D21<imp-use,kill>, %D21<imp-def>
	%R44<def> = COPY %R43, %D22<imp-def>
	%R45<def> = COPY %R42, %D21<imp-use,kill>, %D22<imp-use,kill>, %D22<imp-def>
	STRf64 %D22<kill>, %R32, -8; mem:ST4[%scevgep17](tbaa=!2) ST4[%scevgep15](tbaa=!2)
	%R34<def> = LDRf32 %R32, 0; mem:LD4[%lsr.iv1214](tbaa=!2)
	%R34<def,tied1> = FMADDrr_r32 %R34<kill,tied0>, %R27, %R39<kill>, %STATUS<imp-def,dead>
	STRf32 %R34<kill>, %R32, 0; mem:ST4[%lsr.iv1214](tbaa=!2)
	%R37<def> = LDRf32 %R32, 4; mem:LD4[%scevgep16](tbaa=!2)
	%R37<def,tied1> = FMADDrr_r32 %R37<kill,tied0>, %R27, %R40<kill>, %STATUS<imp-def,dead>
	%R34<def,dead> = CMPri_r32 %R33, 8, %STATUS<imp-def>
	STRf32 %R37<kill>, %R32<kill>, 4; mem:ST4[%scevgep16](tbaa=!2)
	%R32<def> = COPY %R35<kill>
	%R34<def> = COPY %R36<kill>
	BCC <BB#7>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#7(0x7c000000 / 0x80000000 = 96.88%) BB#8(0x04000000 / 0x80000000 = 3.12%)

BB#8: derived from LLVM BB %for.end60
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#7
	%R25<def> = ADDrr_r32 %R25<kill>, %IP, %STATUS<imp-def,dead>
	%R26<def> = ADDri_r32 %R26<kill>, 1, %STATUS<imp-def,dead>
	%R27<def,dead> = CMPrr_r32 %R26, %R3, %STATUS<imp-def>
	BCC <BB#5>, 0, %STATUS<imp-use>
	BNONE32 <BB#6>, %STATUS<imp-use>
    Successors according to CFG: BB#5(0x04000000 / 0x80000000 = 3.12%) BB#6(0x7c000000 / 0x80000000 = 96.88%)

BB#9: derived from LLVM BB %for.body66
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#5 BB#9
	%R27<def> = ADDrr_r32 %R16, %R26, %STATUS<imp-def,dead>
	%R33<def> = LDRf32 %R27<kill>, 0; mem:LD4[%sunkaddr30](tbaa=!2)
	%R27<def> = ADDri_r32 %R25, 4, %STATUS<imp-def,dead>
	%R26<def> = ADDri_r32 %R26<kill>, 4, %STATUS<imp-def,dead>
	%R34<def> = LDRf32 %R25, 0; mem:Volatile LD4[%lsr.iv24](tbaa=!2)
	%R32<def> = LDRi32_r32 %FP, -4; mem:LD4[FixedStack2]
	GID %CONFIG<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %R32<kill>
	GIE %CONFIG<imp-def,dead>
	%R33<def> = FADDrr_r32 %R33<kill>, %R34<kill>, %STATUS<imp-def,dead>
	%R32<def,dead> = CMPri_r32 %R26, 32, %STATUS<imp-def>
	STRf32 %R33<kill>, %R25<kill>, 0; mem:Volatile ST4[%lsr.iv24](tbaa=!2)
	%R25<def> = COPY %R27<kill>
	BCC <BB#9>, 1, %STATUS<imp-use>
    Successors according to CFG: BB#10(0x04000000 / 0x80000000 = 3.12%) BB#9(0x7c000000 / 0x80000000 = 96.88%)

BB#10: derived from LLVM BB %for.end75
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#9
	%R22<def> = ADDri_r32 %R22<kill>, 32, %STATUS<imp-def,dead>
	%R23<def> = ADDri_r32 %R23<kill>, 32, %STATUS<imp-def,dead>
	%R24<def> = ADDri_r32 %R24<kill>, 8, %STATUS<imp-def,dead>
	%R25<def,dead> = CMPrr_r32 %R24, %R3, %STATUS<imp-def>
	BCC <BB#4>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#4(0x7c000000 / 0x80000000 = 96.88%) BB#11(0x04000000 / 0x80000000 = 3.12%)

BB#11: derived from LLVM BB %for.end78
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20
    Predecessors according to CFG: BB#10
	%R2<def> = ADDrr_r32 %R2<kill>, %IP, %STATUS<imp-def,dead>
	%R20<def> = ADDri_r32 %R20<kill>, 1, %STATUS<imp-def,dead>
	%R21<def,dead> = CMPrr_r32 %R20, %R3, %STATUS<imp-def>
	BCC <BB#3>, 1, %STATUS<imp-use>
    Successors according to CFG: BB#12(0x04000000 / 0x80000000 = 3.12%) BB#3(0x7c000000 / 0x80000000 = 96.88%)

BB#12: derived from LLVM BB %for.end81
    Predecessors according to CFG: BB#1 BB#11
	%R0<def> = LDRi32_r32 %FP, -44; mem:LD4[FixedStack1]
	GID
	%CONFIG<def> = MOVTS32_core %R0<kill>
	GIE %CONFIG<imp-use,kill>
	%LR<def> = LDRi64 %SP, 48; flags: FrameSetup
	%SP<def> = ADDri_r32 %SP, 48, %STATUS<imp-def>
	RTS

# End machine code for function matmac.


<----------------->
Analyzing block 11
BB#11: derived from LLVM BB %for.end78
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20
    Predecessors according to CFG: BB#10
	%R2<def> = ADDrr_r32 %R2<kill>, %IP, %STATUS<imp-def,dead>
	%R20<def> = ADDri_r32 %R20<kill>, 1, %STATUS<imp-def,dead>
	%R21<def,dead> = CMPrr_r32 %R20, %R3, %STATUS<imp-def>
	BCC <BB#3>, 1, %STATUS<imp-use>
    Successors according to CFG: BB#12(0x04000000 / 0x80000000 = 3.12%) BB#3(0x7c000000 / 0x80000000 = 96.88%)

TryTailMergeBlocks: BB#1, BB#11
  with successor BB#12
  which has fall-through from BB#11
Looking for common tails of at least 3 instructions

<----------------->
Analyzing block 1
BB#1: derived from LLVM BB %entry
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#0
	%IP<def,dead> = CMPri_r32 %R3, 1, %STATUS<imp-def>
	BCC <BB#2>, 7, %STATUS<imp-use>
    Successors according to CFG: BB#2(0x50000000 / 0x80000000 = 62.50%) BB#12(0x30000000 / 0x80000000 = 37.50%)

<----------------->
Removing branches out of BB#1
# Machine code for function matmac: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=32, align=8, at location [SP-40]
  fi#1: size=4, align=4, at location [SP-44]
  fi#2: size=4, align=4, at location [SP-4]
  fi#3: size=4, align=8, at location [SP-8]
Function Live Ins: %R0, %R1, %R2, %R3

BB#0: 
    Live Ins: %R0 %R1 %R2 %R3
	%SP<def,tied2> = STRi64_pmd %LR, %SP<tied0>, -48; flags: FrameSetup
	%FP<def> = ADDri_r32 %SP, 48, %STATUS<imp-def>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	GID %CONFIG<imp-def>
	%R19<def> = MOVFS32_core %CONFIG, %D9<imp-def>
	STRi32_r32 %R19, %FP, -44; mem:ST4[FixedStack1]
	%IP<def> = MOVi32ri 65535
	%IP<def,tied1> = MOVTi32ri %IP<kill,tied0>, 65521
	%R18<def> = ANDrr_r32 %R19, %IP<kill>, %STATUS<imp-def>, %D9<imp-use,kill>, %D9<imp-def>
	%R19<def,tied1> = MOVTi32ri %R19<tied0>, 72, %D9<imp-use,kill>, %D9<imp-def>
	STRi64 %D9<kill>, %FP, -8; mem:ST4[FixedStack3] ST4[FixedStack2]
	GIE %CONFIG<imp-use,kill>
    Successors according to CFG: BB#1(?%)

BB#1: derived from LLVM BB %entry
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#0
	%IP<def,dead> = CMPri_r32 %R3, 1, %STATUS<imp-def>
    Successors according to CFG: BB#2(0x50000000 / 0x80000000 = 62.50%) BB#12(0x30000000 / 0x80000000 = 37.50%)

BB#2: derived from LLVM BB %for.body3.lr.ph.preheader
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#1
	%IP<def> = LSL32ri %R3, 2, %STATUS<imp-def,dead>
	%R1<def> = ADDri_r32 %R1<kill>, 8, %STATUS<imp-def,dead>
	%R16<def> = MOViPTR %FP, -40
	%R17<def> = ADDri_r32 %R16, 8, %STATUS<imp-def,dead>
	%R19<def> = MOVi32ri 0, %D9<imp-def>
	%R20<def> = COPY %R19
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %for.body3.lr.ph
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20
    Predecessors according to CFG: BB#2 BB#11
	%R21<def> = LDRi32_r32 %FP, -8; mem:LD4[FixedStack3]
	GID %CONFIG<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %R21<kill>
	GIE %CONFIG<imp-def,dead>
	%R21<def> = IMULrr_r32 %R20, %R3, %STATUS<imp-def,dead>
	%R21<def> = LSL32ri %R21<kill>, 2, %STATUS<imp-def,dead>
	%R21<def> = ADDrr_r32 %R0, %R21<kill>, %STATUS<imp-def,dead>
	%R22<def> = COPY %R2
	%R23<def> = COPY %R1
	%R24<def> = COPY %R19
    Successors according to CFG: BB#4(?%)

BB#4: derived from LLVM BB %for.body9.preheader
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#3 BB#10
	%R18<def> = COPY %R19, %D9<imp-use,kill>, %D9<imp-def>
	STRi64 %D9, %FP, -16; mem:ST8[%1+24]
	STRi64 %D9, %FP, -24; mem:ST8[%1+16]
	STRi64 %D9, %FP, -32; mem:ST8[%1+8]
	STRi64 %D9, %FP, -40; mem:ST8[%1]
	%R25<def> = COPY %R23
	%R26<def> = COPY %R19
	BNONE32 <BB#6>, %STATUS<imp-use>
    Successors according to CFG: BB#6(?%)

BB#5: derived from LLVM BB %for.cond64.preheader
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#8
	%R25<def> = COPY %R22
	%R26<def> = COPY %R19
	BNONE32 <BB#9>, %STATUS<imp-use>
    Successors according to CFG: BB#9(?%)

BB#6: derived from LLVM BB %for.body9
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#4 BB#8
	%R27<def> = LSL32ri %R26, 2, %STATUS<imp-def,dead>
	%R27<def> = ADDrr_r32 %R21, %R27<kill>, %STATUS<imp-def,dead>
	%R27<def> = LDRf32 %R27<kill>, 0; mem:Volatile LD4[%add.ptr10](tbaa=!2)
	%R32<def> = COPY %R17
	%R34<def> = COPY %R25
	%R33<def> = COPY %R19
    Successors according to CFG: BB#7(?%)

BB#7: derived from LLVM BB %for.body13
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26 %R27 %R32 %R33 %R34
    Predecessors according to CFG: BB#6 BB#7
	%R37<def> = LDRf32 %R34, -8; mem:Volatile LD4[%scevgep8](tbaa=!2)
	%R35<def> = ADDri_r32 %R32, 16, %STATUS<imp-def,dead>
	%R36<def> = ADDri_r32 %R34, 16, %STATUS<imp-def,dead>
	%R38<def> = LDRf32 %R34, -4; mem:Volatile LD4[%scevgep9](tbaa=!2)
	%R33<def> = ADDri_r32 %R33<kill>, 4, %STATUS<imp-def,dead>
	%R39<def> = LDRf32 %R34, 0; mem:Volatile LD4[%lsr.iv5](tbaa=!2)
	%R40<def> = LDRf32 %R34<kill>, 4; mem:Volatile LD4[%scevgep7](tbaa=!2)
	%D21<def> = LDRf64 %R32, -8; mem:LD4[%scevgep17](tbaa=!2) LD4[%scevgep15](tbaa=!2)
	%R34<def> = LDRi32_r32 %FP, -4; mem:LD4[FixedStack2]
	GID %CONFIG<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %R34<kill>
	GIE %CONFIG<imp-def,dead>
	%R43<def,tied1> = FMADDrr_r32 %R43<tied0>, %R27, %R37<kill>, %STATUS<imp-def,dead>, %D21<imp-use,kill>, %D21<imp-def>
	%R42<def,tied1> = FMADDrr_r32 %R42<tied0>, %R27, %R38<kill>, %STATUS<imp-def,dead>, %D21<imp-use,kill>, %D21<imp-def>
	%R44<def> = COPY %R43, %D22<imp-def>
	%R45<def> = COPY %R42, %D21<imp-use,kill>, %D22<imp-use,kill>, %D22<imp-def>
	STRf64 %D22<kill>, %R32, -8; mem:ST4[%scevgep17](tbaa=!2) ST4[%scevgep15](tbaa=!2)
	%R34<def> = LDRf32 %R32, 0; mem:LD4[%lsr.iv1214](tbaa=!2)
	%R34<def,tied1> = FMADDrr_r32 %R34<kill,tied0>, %R27, %R39<kill>, %STATUS<imp-def,dead>
	STRf32 %R34<kill>, %R32, 0; mem:ST4[%lsr.iv1214](tbaa=!2)
	%R37<def> = LDRf32 %R32, 4; mem:LD4[%scevgep16](tbaa=!2)
	%R37<def,tied1> = FMADDrr_r32 %R37<kill,tied0>, %R27, %R40<kill>, %STATUS<imp-def,dead>
	%R34<def,dead> = CMPri_r32 %R33, 8, %STATUS<imp-def>
	STRf32 %R37<kill>, %R32<kill>, 4; mem:ST4[%scevgep16](tbaa=!2)
	%R32<def> = COPY %R35<kill>
	%R34<def> = COPY %R36<kill>
	BCC <BB#7>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#7(0x7c000000 / 0x80000000 = 96.88%) BB#8(0x04000000 / 0x80000000 = 3.12%)

BB#8: derived from LLVM BB %for.end60
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#7
	%R25<def> = ADDrr_r32 %R25<kill>, %IP, %STATUS<imp-def,dead>
	%R26<def> = ADDri_r32 %R26<kill>, 1, %STATUS<imp-def,dead>
	%R27<def,dead> = CMPrr_r32 %R26, %R3, %STATUS<imp-def>
	BCC <BB#5>, 0, %STATUS<imp-use>
	BNONE32 <BB#6>, %STATUS<imp-use>
    Successors according to CFG: BB#5(0x04000000 / 0x80000000 = 3.12%) BB#6(0x7c000000 / 0x80000000 = 96.88%)

BB#9: derived from LLVM BB %for.body66
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#5 BB#9
	%R27<def> = ADDrr_r32 %R16, %R26, %STATUS<imp-def,dead>
	%R33<def> = LDRf32 %R27<kill>, 0; mem:LD4[%sunkaddr30](tbaa=!2)
	%R27<def> = ADDri_r32 %R25, 4, %STATUS<imp-def,dead>
	%R26<def> = ADDri_r32 %R26<kill>, 4, %STATUS<imp-def,dead>
	%R34<def> = LDRf32 %R25, 0; mem:Volatile LD4[%lsr.iv24](tbaa=!2)
	%R32<def> = LDRi32_r32 %FP, -4; mem:LD4[FixedStack2]
	GID %CONFIG<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %R32<kill>
	GIE %CONFIG<imp-def,dead>
	%R33<def> = FADDrr_r32 %R33<kill>, %R34<kill>, %STATUS<imp-def,dead>
	%R32<def,dead> = CMPri_r32 %R26, 32, %STATUS<imp-def>
	STRf32 %R33<kill>, %R25<kill>, 0; mem:Volatile ST4[%lsr.iv24](tbaa=!2)
	%R25<def> = COPY %R27<kill>
	BCC <BB#9>, 1, %STATUS<imp-use>
    Successors according to CFG: BB#10(0x04000000 / 0x80000000 = 3.12%) BB#9(0x7c000000 / 0x80000000 = 96.88%)

BB#10: derived from LLVM BB %for.end75
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#9
	%R22<def> = ADDri_r32 %R22<kill>, 32, %STATUS<imp-def,dead>
	%R23<def> = ADDri_r32 %R23<kill>, 32, %STATUS<imp-def,dead>
	%R24<def> = ADDri_r32 %R24<kill>, 8, %STATUS<imp-def,dead>
	%R25<def,dead> = CMPrr_r32 %R24, %R3, %STATUS<imp-def>
	BCC <BB#4>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#4(0x7c000000 / 0x80000000 = 96.88%) BB#11(0x04000000 / 0x80000000 = 3.12%)

BB#11: derived from LLVM BB %for.end78
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20
    Predecessors according to CFG: BB#10
	%R2<def> = ADDrr_r32 %R2<kill>, %IP, %STATUS<imp-def,dead>
	%R20<def> = ADDri_r32 %R20<kill>, 1, %STATUS<imp-def,dead>
	%R21<def,dead> = CMPrr_r32 %R20, %R3, %STATUS<imp-def>
	BCC <BB#3>, 1, %STATUS<imp-use>
    Successors according to CFG: BB#12(0x04000000 / 0x80000000 = 3.12%) BB#3(0x7c000000 / 0x80000000 = 96.88%)

BB#12: derived from LLVM BB %for.end81
    Predecessors according to CFG: BB#1 BB#11
	%R0<def> = LDRi32_r32 %FP, -44; mem:LD4[FixedStack1]
	GID
	%CONFIG<def> = MOVTS32_core %R0<kill>
	GIE %CONFIG<imp-use,kill>
	%LR<def> = LDRi64 %SP, 48; flags: FrameSetup
	%SP<def> = ADDri_r32 %SP, 48, %STATUS<imp-def>
	RTS

# End machine code for function matmac.


<----------------->
Inserting branch into BB#1
# Machine code for function matmac: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=32, align=8, at location [SP-40]
  fi#1: size=4, align=4, at location [SP-44]
  fi#2: size=4, align=4, at location [SP-4]
  fi#3: size=4, align=8, at location [SP-8]
Function Live Ins: %R0, %R1, %R2, %R3

BB#0: 
    Live Ins: %R0 %R1 %R2 %R3
	%SP<def,tied2> = STRi64_pmd %LR, %SP<tied0>, -48; flags: FrameSetup
	%FP<def> = ADDri_r32 %SP, 48, %STATUS<imp-def>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	GID %CONFIG<imp-def>
	%R19<def> = MOVFS32_core %CONFIG, %D9<imp-def>
	STRi32_r32 %R19, %FP, -44; mem:ST4[FixedStack1]
	%IP<def> = MOVi32ri 65535
	%IP<def,tied1> = MOVTi32ri %IP<kill,tied0>, 65521
	%R18<def> = ANDrr_r32 %R19, %IP<kill>, %STATUS<imp-def>, %D9<imp-use,kill>, %D9<imp-def>
	%R19<def,tied1> = MOVTi32ri %R19<tied0>, 72, %D9<imp-use,kill>, %D9<imp-def>
	STRi64 %D9<kill>, %FP, -8; mem:ST4[FixedStack3] ST4[FixedStack2]
	GIE %CONFIG<imp-use,kill>
    Successors according to CFG: BB#1(?%)

BB#1: derived from LLVM BB %entry
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#0
	%IP<def,dead> = CMPri_r32 %R3, 1, %STATUS<imp-def>
	BCC <BB#12>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#2(0x50000000 / 0x80000000 = 62.50%) BB#12(0x30000000 / 0x80000000 = 37.50%)

BB#2: derived from LLVM BB %for.body3.lr.ph.preheader
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#1
	%IP<def> = LSL32ri %R3, 2, %STATUS<imp-def,dead>
	%R1<def> = ADDri_r32 %R1<kill>, 8, %STATUS<imp-def,dead>
	%R16<def> = MOViPTR %FP, -40
	%R17<def> = ADDri_r32 %R16, 8, %STATUS<imp-def,dead>
	%R19<def> = MOVi32ri 0, %D9<imp-def>
	%R20<def> = COPY %R19
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %for.body3.lr.ph
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20
    Predecessors according to CFG: BB#2 BB#11
	%R21<def> = LDRi32_r32 %FP, -8; mem:LD4[FixedStack3]
	GID %CONFIG<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %R21<kill>
	GIE %CONFIG<imp-def,dead>
	%R21<def> = IMULrr_r32 %R20, %R3, %STATUS<imp-def,dead>
	%R21<def> = LSL32ri %R21<kill>, 2, %STATUS<imp-def,dead>
	%R21<def> = ADDrr_r32 %R0, %R21<kill>, %STATUS<imp-def,dead>
	%R22<def> = COPY %R2
	%R23<def> = COPY %R1
	%R24<def> = COPY %R19
    Successors according to CFG: BB#4(?%)

BB#4: derived from LLVM BB %for.body9.preheader
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#3 BB#10
	%R18<def> = COPY %R19, %D9<imp-use,kill>, %D9<imp-def>
	STRi64 %D9, %FP, -16; mem:ST8[%1+24]
	STRi64 %D9, %FP, -24; mem:ST8[%1+16]
	STRi64 %D9, %FP, -32; mem:ST8[%1+8]
	STRi64 %D9, %FP, -40; mem:ST8[%1]
	%R25<def> = COPY %R23
	%R26<def> = COPY %R19
	BNONE32 <BB#6>, %STATUS<imp-use>
    Successors according to CFG: BB#6(?%)

BB#5: derived from LLVM BB %for.cond64.preheader
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#8
	%R25<def> = COPY %R22
	%R26<def> = COPY %R19
	BNONE32 <BB#9>, %STATUS<imp-use>
    Successors according to CFG: BB#9(?%)

BB#6: derived from LLVM BB %for.body9
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#4 BB#8
	%R27<def> = LSL32ri %R26, 2, %STATUS<imp-def,dead>
	%R27<def> = ADDrr_r32 %R21, %R27<kill>, %STATUS<imp-def,dead>
	%R27<def> = LDRf32 %R27<kill>, 0; mem:Volatile LD4[%add.ptr10](tbaa=!2)
	%R32<def> = COPY %R17
	%R34<def> = COPY %R25
	%R33<def> = COPY %R19
    Successors according to CFG: BB#7(?%)

BB#7: derived from LLVM BB %for.body13
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26 %R27 %R32 %R33 %R34
    Predecessors according to CFG: BB#6 BB#7
	%R37<def> = LDRf32 %R34, -8; mem:Volatile LD4[%scevgep8](tbaa=!2)
	%R35<def> = ADDri_r32 %R32, 16, %STATUS<imp-def,dead>
	%R36<def> = ADDri_r32 %R34, 16, %STATUS<imp-def,dead>
	%R38<def> = LDRf32 %R34, -4; mem:Volatile LD4[%scevgep9](tbaa=!2)
	%R33<def> = ADDri_r32 %R33<kill>, 4, %STATUS<imp-def,dead>
	%R39<def> = LDRf32 %R34, 0; mem:Volatile LD4[%lsr.iv5](tbaa=!2)
	%R40<def> = LDRf32 %R34<kill>, 4; mem:Volatile LD4[%scevgep7](tbaa=!2)
	%D21<def> = LDRf64 %R32, -8; mem:LD4[%scevgep17](tbaa=!2) LD4[%scevgep15](tbaa=!2)
	%R34<def> = LDRi32_r32 %FP, -4; mem:LD4[FixedStack2]
	GID %CONFIG<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %R34<kill>
	GIE %CONFIG<imp-def,dead>
	%R43<def,tied1> = FMADDrr_r32 %R43<tied0>, %R27, %R37<kill>, %STATUS<imp-def,dead>, %D21<imp-use,kill>, %D21<imp-def>
	%R42<def,tied1> = FMADDrr_r32 %R42<tied0>, %R27, %R38<kill>, %STATUS<imp-def,dead>, %D21<imp-use,kill>, %D21<imp-def>
	%R44<def> = COPY %R43, %D22<imp-def>
	%R45<def> = COPY %R42, %D21<imp-use,kill>, %D22<imp-use,kill>, %D22<imp-def>
	STRf64 %D22<kill>, %R32, -8; mem:ST4[%scevgep17](tbaa=!2) ST4[%scevgep15](tbaa=!2)
	%R34<def> = LDRf32 %R32, 0; mem:LD4[%lsr.iv1214](tbaa=!2)
	%R34<def,tied1> = FMADDrr_r32 %R34<kill,tied0>, %R27, %R39<kill>, %STATUS<imp-def,dead>
	STRf32 %R34<kill>, %R32, 0; mem:ST4[%lsr.iv1214](tbaa=!2)
	%R37<def> = LDRf32 %R32, 4; mem:LD4[%scevgep16](tbaa=!2)
	%R37<def,tied1> = FMADDrr_r32 %R37<kill,tied0>, %R27, %R40<kill>, %STATUS<imp-def,dead>
	%R34<def,dead> = CMPri_r32 %R33, 8, %STATUS<imp-def>
	STRf32 %R37<kill>, %R32<kill>, 4; mem:ST4[%scevgep16](tbaa=!2)
	%R32<def> = COPY %R35<kill>
	%R34<def> = COPY %R36<kill>
	BCC <BB#7>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#7(0x7c000000 / 0x80000000 = 96.88%) BB#8(0x04000000 / 0x80000000 = 3.12%)

BB#8: derived from LLVM BB %for.end60
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#7
	%R25<def> = ADDrr_r32 %R25<kill>, %IP, %STATUS<imp-def,dead>
	%R26<def> = ADDri_r32 %R26<kill>, 1, %STATUS<imp-def,dead>
	%R27<def,dead> = CMPrr_r32 %R26, %R3, %STATUS<imp-def>
	BCC <BB#5>, 0, %STATUS<imp-use>
	BNONE32 <BB#6>, %STATUS<imp-use>
    Successors according to CFG: BB#5(0x04000000 / 0x80000000 = 3.12%) BB#6(0x7c000000 / 0x80000000 = 96.88%)

BB#9: derived from LLVM BB %for.body66
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#5 BB#9
	%R27<def> = ADDrr_r32 %R16, %R26, %STATUS<imp-def,dead>
	%R33<def> = LDRf32 %R27<kill>, 0; mem:LD4[%sunkaddr30](tbaa=!2)
	%R27<def> = ADDri_r32 %R25, 4, %STATUS<imp-def,dead>
	%R26<def> = ADDri_r32 %R26<kill>, 4, %STATUS<imp-def,dead>
	%R34<def> = LDRf32 %R25, 0; mem:Volatile LD4[%lsr.iv24](tbaa=!2)
	%R32<def> = LDRi32_r32 %FP, -4; mem:LD4[FixedStack2]
	GID %CONFIG<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %R32<kill>
	GIE %CONFIG<imp-def,dead>
	%R33<def> = FADDrr_r32 %R33<kill>, %R34<kill>, %STATUS<imp-def,dead>
	%R32<def,dead> = CMPri_r32 %R26, 32, %STATUS<imp-def>
	STRf32 %R33<kill>, %R25<kill>, 0; mem:Volatile ST4[%lsr.iv24](tbaa=!2)
	%R25<def> = COPY %R27<kill>
	BCC <BB#9>, 1, %STATUS<imp-use>
    Successors according to CFG: BB#10(0x04000000 / 0x80000000 = 3.12%) BB#9(0x7c000000 / 0x80000000 = 96.88%)

BB#10: derived from LLVM BB %for.end75
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#9
	%R22<def> = ADDri_r32 %R22<kill>, 32, %STATUS<imp-def,dead>
	%R23<def> = ADDri_r32 %R23<kill>, 32, %STATUS<imp-def,dead>
	%R24<def> = ADDri_r32 %R24<kill>, 8, %STATUS<imp-def,dead>
	%R25<def,dead> = CMPrr_r32 %R24, %R3, %STATUS<imp-def>
	BCC <BB#4>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#4(0x7c000000 / 0x80000000 = 96.88%) BB#11(0x04000000 / 0x80000000 = 3.12%)

BB#11: derived from LLVM BB %for.end78
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20
    Predecessors according to CFG: BB#10
	%R2<def> = ADDrr_r32 %R2<kill>, %IP, %STATUS<imp-def,dead>
	%R20<def> = ADDri_r32 %R20<kill>, 1, %STATUS<imp-def,dead>
	%R21<def,dead> = CMPrr_r32 %R20, %R3, %STATUS<imp-def>
	BCC <BB#3>, 1, %STATUS<imp-use>
    Successors according to CFG: BB#12(0x04000000 / 0x80000000 = 3.12%) BB#3(0x7c000000 / 0x80000000 = 96.88%)

BB#12: derived from LLVM BB %for.end81
    Predecessors according to CFG: BB#1 BB#11
	%R0<def> = LDRi32_r32 %FP, -44; mem:LD4[FixedStack1]
	GID
	%CONFIG<def> = MOVTS32_core %R0<kill>
	GIE %CONFIG<imp-use,kill>
	%LR<def> = LDRi64 %SP, 48; flags: FrameSetup
	%SP<def> = ADDri_r32 %SP, 48, %STATUS<imp-def>
	RTS

# End machine code for function matmac.


<----------------->
Analyzing block 0
BB#0: 
    Live Ins: %R0 %R1 %R2 %R3
	%SP<def,tied2> = STRi64_pmd %LR, %SP<tied0>, -48; flags: FrameSetup
	%FP<def> = ADDri_r32 %SP, 48, %STATUS<imp-def>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	GID %CONFIG<imp-def>
	%R19<def> = MOVFS32_core %CONFIG, %D9<imp-def>
	STRi32_r32 %R19, %FP, -44; mem:ST4[FixedStack1]
	%IP<def> = MOVi32ri 65535
	%IP<def,tied1> = MOVTi32ri %IP<kill,tied0>, 65521
	%R18<def> = ANDrr_r32 %R19, %IP<kill>, %STATUS<imp-def>, %D9<imp-use,kill>, %D9<imp-def>
	%R19<def,tied1> = MOVTi32ri %R19<tied0>, 72, %D9<imp-use,kill>, %D9<imp-def>
	STRi64 %D9<kill>, %FP, -8; mem:ST4[FixedStack3] ST4[FixedStack2]
	GIE %CONFIG<imp-use,kill>
    Successors according to CFG: BB#1(?%)

<----------------->
Analyzing block 1
BB#1: derived from LLVM BB %entry
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#0
	%IP<def,dead> = CMPri_r32 %R3, 1, %STATUS<imp-def>
	BCC <BB#12>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#2(0x50000000 / 0x80000000 = 62.50%) BB#12(0x30000000 / 0x80000000 = 37.50%)

<----------------->
Analyzing block 0
BB#0: 
    Live Ins: %R0 %R1 %R2 %R3
	%SP<def,tied2> = STRi64_pmd %LR, %SP<tied0>, -48; flags: FrameSetup
	%FP<def> = ADDri_r32 %SP, 48, %STATUS<imp-def>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	GID %CONFIG<imp-def>
	%R19<def> = MOVFS32_core %CONFIG, %D9<imp-def>
	STRi32_r32 %R19, %FP, -44; mem:ST4[FixedStack1]
	%IP<def> = MOVi32ri 65535
	%IP<def,tied1> = MOVTi32ri %IP<kill,tied0>, 65521
	%R18<def> = ANDrr_r32 %R19, %IP<kill>, %STATUS<imp-def>, %D9<imp-use,kill>, %D9<imp-def>
	%R19<def,tied1> = MOVTi32ri %R19<tied0>, 72, %D9<imp-use,kill>, %D9<imp-def>
	STRi64 %D9<kill>, %FP, -8; mem:ST4[FixedStack3] ST4[FixedStack2]
	GIE %CONFIG<imp-use,kill>
    Successors according to CFG: BB#1(?%)

<----------------->
Analyzing block 1
BB#1: derived from LLVM BB %entry
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#0
	%IP<def,dead> = CMPri_r32 %R3, 1, %STATUS<imp-def>
	BCC <BB#12>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#2(0x50000000 / 0x80000000 = 62.50%) BB#12(0x30000000 / 0x80000000 = 37.50%)

<----------------->
Analyzing block 0
BB#0: 
    Live Ins: %R0 %R1 %R2 %R3
	%SP<def,tied2> = STRi64_pmd %LR, %SP<tied0>, -48; flags: FrameSetup
	%FP<def> = ADDri_r32 %SP, 48, %STATUS<imp-def>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	GID %CONFIG<imp-def>
	%R19<def> = MOVFS32_core %CONFIG, %D9<imp-def>
	STRi32_r32 %R19, %FP, -44; mem:ST4[FixedStack1]
	%IP<def> = MOVi32ri 65535
	%IP<def,tied1> = MOVTi32ri %IP<kill,tied0>, 65521
	%R18<def> = ANDrr_r32 %R19, %IP<kill>, %STATUS<imp-def>, %D9<imp-use,kill>, %D9<imp-def>
	%R19<def,tied1> = MOVTi32ri %R19<tied0>, 72, %D9<imp-use,kill>, %D9<imp-def>
	STRi64 %D9<kill>, %FP, -8; mem:ST4[FixedStack3] ST4[FixedStack2]
	GIE %CONFIG<imp-use,kill>
    Successors according to CFG: BB#1(?%)

<----------------->
Analyzing block 0
BB#0: 
    Live Ins: %R0 %R1 %R2 %R3
	%SP<def,tied2> = STRi64_pmd %LR, %SP<tied0>, -48; flags: FrameSetup
	%FP<def> = ADDri_r32 %SP, 48, %STATUS<imp-def>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	GID %CONFIG<imp-def>
	%R19<def> = MOVFS32_core %CONFIG, %D9<imp-def>
	STRi32_r32 %R19, %FP, -44; mem:ST4[FixedStack1]
	%IP<def> = MOVi32ri 65535
	%IP<def,tied1> = MOVTi32ri %IP<kill,tied0>, 65521
	%R18<def> = ANDrr_r32 %R19, %IP<kill>, %STATUS<imp-def>, %D9<imp-use,kill>, %D9<imp-def>
	%R19<def,tied1> = MOVTi32ri %R19<tied0>, 72, %D9<imp-use,kill>, %D9<imp-def>
	STRi64 %D9<kill>, %FP, -8; mem:ST4[FixedStack3] ST4[FixedStack2]
	GIE %CONFIG<imp-use,kill>
    Successors according to CFG: BB#1(?%)

<----------------->
Analyzing block 1
BB#1: derived from LLVM BB %entry
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#0
	%IP<def,dead> = CMPri_r32 %R3, 1, %STATUS<imp-def>
	BCC <BB#12>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#2(0x50000000 / 0x80000000 = 62.50%) BB#12(0x30000000 / 0x80000000 = 37.50%)

<----------------->
Analyzing block 2
BB#2: derived from LLVM BB %for.body3.lr.ph.preheader
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#1
	%IP<def> = LSL32ri %R3, 2, %STATUS<imp-def,dead>
	%R1<def> = ADDri_r32 %R1<kill>, 8, %STATUS<imp-def,dead>
	%R16<def> = MOViPTR %FP, -40
	%R17<def> = ADDri_r32 %R16, 8, %STATUS<imp-def,dead>
	%R19<def> = MOVi32ri 0, %D9<imp-def>
	%R20<def> = COPY %R19
    Successors according to CFG: BB#3(?%)

<----------------->
Analyzing block 1
BB#1: derived from LLVM BB %entry
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#0
	%IP<def,dead> = CMPri_r32 %R3, 1, %STATUS<imp-def>
	BCC <BB#12>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#2(0x50000000 / 0x80000000 = 62.50%) BB#12(0x30000000 / 0x80000000 = 37.50%)

<----------------->
Analyzing block 2
BB#2: derived from LLVM BB %for.body3.lr.ph.preheader
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#1
	%IP<def> = LSL32ri %R3, 2, %STATUS<imp-def,dead>
	%R1<def> = ADDri_r32 %R1<kill>, 8, %STATUS<imp-def,dead>
	%R16<def> = MOViPTR %FP, -40
	%R17<def> = ADDri_r32 %R16, 8, %STATUS<imp-def,dead>
	%R19<def> = MOVi32ri 0, %D9<imp-def>
	%R20<def> = COPY %R19
    Successors according to CFG: BB#3(?%)

<----------------->
Analyzing block 3
BB#3: derived from LLVM BB %for.body3.lr.ph
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20
    Predecessors according to CFG: BB#2 BB#11
	%R21<def> = LDRi32_r32 %FP, -8; mem:LD4[FixedStack3]
	GID %CONFIG<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %R21<kill>
	GIE %CONFIG<imp-def,dead>
	%R21<def> = IMULrr_r32 %R20, %R3, %STATUS<imp-def,dead>
	%R21<def> = LSL32ri %R21<kill>, 2, %STATUS<imp-def,dead>
	%R21<def> = ADDrr_r32 %R0, %R21<kill>, %STATUS<imp-def,dead>
	%R22<def> = COPY %R2
	%R23<def> = COPY %R1
	%R24<def> = COPY %R19
    Successors according to CFG: BB#4(?%)

<----------------->
Analyzing block 2
BB#2: derived from LLVM BB %for.body3.lr.ph.preheader
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#1
	%IP<def> = LSL32ri %R3, 2, %STATUS<imp-def,dead>
	%R1<def> = ADDri_r32 %R1<kill>, 8, %STATUS<imp-def,dead>
	%R16<def> = MOViPTR %FP, -40
	%R17<def> = ADDri_r32 %R16, 8, %STATUS<imp-def,dead>
	%R19<def> = MOVi32ri 0, %D9<imp-def>
	%R20<def> = COPY %R19
    Successors according to CFG: BB#3(?%)

<----------------->
Analyzing block 3
BB#3: derived from LLVM BB %for.body3.lr.ph
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20
    Predecessors according to CFG: BB#2 BB#11
	%R21<def> = LDRi32_r32 %FP, -8; mem:LD4[FixedStack3]
	GID %CONFIG<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %R21<kill>
	GIE %CONFIG<imp-def,dead>
	%R21<def> = IMULrr_r32 %R20, %R3, %STATUS<imp-def,dead>
	%R21<def> = LSL32ri %R21<kill>, 2, %STATUS<imp-def,dead>
	%R21<def> = ADDrr_r32 %R0, %R21<kill>, %STATUS<imp-def,dead>
	%R22<def> = COPY %R2
	%R23<def> = COPY %R1
	%R24<def> = COPY %R19
    Successors according to CFG: BB#4(?%)

<----------------->
Analyzing block 4
BB#4: derived from LLVM BB %for.body9.preheader
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#3 BB#10
	%R18<def> = COPY %R19, %D9<imp-use,kill>, %D9<imp-def>
	STRi64 %D9, %FP, -16; mem:ST8[%1+24]
	STRi64 %D9, %FP, -24; mem:ST8[%1+16]
	STRi64 %D9, %FP, -32; mem:ST8[%1+8]
	STRi64 %D9, %FP, -40; mem:ST8[%1]
	%R25<def> = COPY %R23
	%R26<def> = COPY %R19
	BNONE32 <BB#6>, %STATUS<imp-use>
    Successors according to CFG: BB#6(?%)

<----------------->
Analyzing block 3
BB#3: derived from LLVM BB %for.body3.lr.ph
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20
    Predecessors according to CFG: BB#2 BB#11
	%R21<def> = LDRi32_r32 %FP, -8; mem:LD4[FixedStack3]
	GID %CONFIG<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %R21<kill>
	GIE %CONFIG<imp-def,dead>
	%R21<def> = IMULrr_r32 %R20, %R3, %STATUS<imp-def,dead>
	%R21<def> = LSL32ri %R21<kill>, 2, %STATUS<imp-def,dead>
	%R21<def> = ADDrr_r32 %R0, %R21<kill>, %STATUS<imp-def,dead>
	%R22<def> = COPY %R2
	%R23<def> = COPY %R1
	%R24<def> = COPY %R19
    Successors according to CFG: BB#4(?%)

<----------------->
Analyzing block 4
BB#4: derived from LLVM BB %for.body9.preheader
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#3 BB#10
	%R18<def> = COPY %R19, %D9<imp-use,kill>, %D9<imp-def>
	STRi64 %D9, %FP, -16; mem:ST8[%1+24]
	STRi64 %D9, %FP, -24; mem:ST8[%1+16]
	STRi64 %D9, %FP, -32; mem:ST8[%1+8]
	STRi64 %D9, %FP, -40; mem:ST8[%1]
	%R25<def> = COPY %R23
	%R26<def> = COPY %R19
	BNONE32 <BB#6>, %STATUS<imp-use>
    Successors according to CFG: BB#6(?%)

<----------------->
Analyzing block 5
BB#5: derived from LLVM BB %for.cond64.preheader
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#8
	%R25<def> = COPY %R22
	%R26<def> = COPY %R19
	BNONE32 <BB#9>, %STATUS<imp-use>
    Successors according to CFG: BB#9(?%)

<----------------->
Analyzing block 8
BB#8: derived from LLVM BB %for.end60
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#7
	%R25<def> = ADDrr_r32 %R25<kill>, %IP, %STATUS<imp-def,dead>
	%R26<def> = ADDri_r32 %R26<kill>, 1, %STATUS<imp-def,dead>
	%R27<def,dead> = CMPrr_r32 %R26, %R3, %STATUS<imp-def>
	BCC <BB#5>, 0, %STATUS<imp-use>
	BNONE32 <BB#6>, %STATUS<imp-use>
    Successors according to CFG: BB#5(0x04000000 / 0x80000000 = 3.12%) BB#6(0x7c000000 / 0x80000000 = 96.88%)

<----------------->
Analyzing block 8
BB#8: derived from LLVM BB %for.end60
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#7
	%R25<def> = ADDrr_r32 %R25<kill>, %IP, %STATUS<imp-def,dead>
	%R26<def> = ADDri_r32 %R26<kill>, 1, %STATUS<imp-def,dead>
	%R27<def,dead> = CMPrr_r32 %R26, %R3, %STATUS<imp-def>
	BCC <BB#5>, 0, %STATUS<imp-use>
	BNONE32 <BB#6>, %STATUS<imp-use>
    Successors according to CFG: BB#5(0x04000000 / 0x80000000 = 3.12%) BB#6(0x7c000000 / 0x80000000 = 96.88%)

<----------------->
Removing branches out of BB#8
# Machine code for function matmac: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=32, align=8, at location [SP-40]
  fi#1: size=4, align=4, at location [SP-44]
  fi#2: size=4, align=4, at location [SP-4]
  fi#3: size=4, align=8, at location [SP-8]
Function Live Ins: %R0, %R1, %R2, %R3

BB#0: 
    Live Ins: %R0 %R1 %R2 %R3
	%SP<def,tied2> = STRi64_pmd %LR, %SP<tied0>, -48; flags: FrameSetup
	%FP<def> = ADDri_r32 %SP, 48, %STATUS<imp-def>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	GID %CONFIG<imp-def>
	%R19<def> = MOVFS32_core %CONFIG, %D9<imp-def>
	STRi32_r32 %R19, %FP, -44; mem:ST4[FixedStack1]
	%IP<def> = MOVi32ri 65535
	%IP<def,tied1> = MOVTi32ri %IP<kill,tied0>, 65521
	%R18<def> = ANDrr_r32 %R19, %IP<kill>, %STATUS<imp-def>, %D9<imp-use,kill>, %D9<imp-def>
	%R19<def,tied1> = MOVTi32ri %R19<tied0>, 72, %D9<imp-use,kill>, %D9<imp-def>
	STRi64 %D9<kill>, %FP, -8; mem:ST4[FixedStack3] ST4[FixedStack2]
	GIE %CONFIG<imp-use,kill>
    Successors according to CFG: BB#1(?%)

BB#1: derived from LLVM BB %entry
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#0
	%IP<def,dead> = CMPri_r32 %R3, 1, %STATUS<imp-def>
	BCC <BB#12>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#2(0x50000000 / 0x80000000 = 62.50%) BB#12(0x30000000 / 0x80000000 = 37.50%)

BB#2: derived from LLVM BB %for.body3.lr.ph.preheader
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#1
	%IP<def> = LSL32ri %R3, 2, %STATUS<imp-def,dead>
	%R1<def> = ADDri_r32 %R1<kill>, 8, %STATUS<imp-def,dead>
	%R16<def> = MOViPTR %FP, -40
	%R17<def> = ADDri_r32 %R16, 8, %STATUS<imp-def,dead>
	%R19<def> = MOVi32ri 0, %D9<imp-def>
	%R20<def> = COPY %R19
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %for.body3.lr.ph
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20
    Predecessors according to CFG: BB#2 BB#11
	%R21<def> = LDRi32_r32 %FP, -8; mem:LD4[FixedStack3]
	GID %CONFIG<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %R21<kill>
	GIE %CONFIG<imp-def,dead>
	%R21<def> = IMULrr_r32 %R20, %R3, %STATUS<imp-def,dead>
	%R21<def> = LSL32ri %R21<kill>, 2, %STATUS<imp-def,dead>
	%R21<def> = ADDrr_r32 %R0, %R21<kill>, %STATUS<imp-def,dead>
	%R22<def> = COPY %R2
	%R23<def> = COPY %R1
	%R24<def> = COPY %R19
    Successors according to CFG: BB#4(?%)

BB#4: derived from LLVM BB %for.body9.preheader
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#3 BB#10
	%R18<def> = COPY %R19, %D9<imp-use,kill>, %D9<imp-def>
	STRi64 %D9, %FP, -16; mem:ST8[%1+24]
	STRi64 %D9, %FP, -24; mem:ST8[%1+16]
	STRi64 %D9, %FP, -32; mem:ST8[%1+8]
	STRi64 %D9, %FP, -40; mem:ST8[%1]
	%R25<def> = COPY %R23
	%R26<def> = COPY %R19
	BNONE32 <BB#6>, %STATUS<imp-use>
    Successors according to CFG: BB#6(?%)

BB#6: derived from LLVM BB %for.body9
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#4 BB#8
	%R27<def> = LSL32ri %R26, 2, %STATUS<imp-def,dead>
	%R27<def> = ADDrr_r32 %R21, %R27<kill>, %STATUS<imp-def,dead>
	%R27<def> = LDRf32 %R27<kill>, 0; mem:Volatile LD4[%add.ptr10](tbaa=!2)
	%R32<def> = COPY %R17
	%R34<def> = COPY %R25
	%R33<def> = COPY %R19
    Successors according to CFG: BB#7(?%)

BB#7: derived from LLVM BB %for.body13
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26 %R27 %R32 %R33 %R34
    Predecessors according to CFG: BB#6 BB#7
	%R37<def> = LDRf32 %R34, -8; mem:Volatile LD4[%scevgep8](tbaa=!2)
	%R35<def> = ADDri_r32 %R32, 16, %STATUS<imp-def,dead>
	%R36<def> = ADDri_r32 %R34, 16, %STATUS<imp-def,dead>
	%R38<def> = LDRf32 %R34, -4; mem:Volatile LD4[%scevgep9](tbaa=!2)
	%R33<def> = ADDri_r32 %R33<kill>, 4, %STATUS<imp-def,dead>
	%R39<def> = LDRf32 %R34, 0; mem:Volatile LD4[%lsr.iv5](tbaa=!2)
	%R40<def> = LDRf32 %R34<kill>, 4; mem:Volatile LD4[%scevgep7](tbaa=!2)
	%D21<def> = LDRf64 %R32, -8; mem:LD4[%scevgep17](tbaa=!2) LD4[%scevgep15](tbaa=!2)
	%R34<def> = LDRi32_r32 %FP, -4; mem:LD4[FixedStack2]
	GID %CONFIG<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %R34<kill>
	GIE %CONFIG<imp-def,dead>
	%R43<def,tied1> = FMADDrr_r32 %R43<tied0>, %R27, %R37<kill>, %STATUS<imp-def,dead>, %D21<imp-use,kill>, %D21<imp-def>
	%R42<def,tied1> = FMADDrr_r32 %R42<tied0>, %R27, %R38<kill>, %STATUS<imp-def,dead>, %D21<imp-use,kill>, %D21<imp-def>
	%R44<def> = COPY %R43, %D22<imp-def>
	%R45<def> = COPY %R42, %D21<imp-use,kill>, %D22<imp-use,kill>, %D22<imp-def>
	STRf64 %D22<kill>, %R32, -8; mem:ST4[%scevgep17](tbaa=!2) ST4[%scevgep15](tbaa=!2)
	%R34<def> = LDRf32 %R32, 0; mem:LD4[%lsr.iv1214](tbaa=!2)
	%R34<def,tied1> = FMADDrr_r32 %R34<kill,tied0>, %R27, %R39<kill>, %STATUS<imp-def,dead>
	STRf32 %R34<kill>, %R32, 0; mem:ST4[%lsr.iv1214](tbaa=!2)
	%R37<def> = LDRf32 %R32, 4; mem:LD4[%scevgep16](tbaa=!2)
	%R37<def,tied1> = FMADDrr_r32 %R37<kill,tied0>, %R27, %R40<kill>, %STATUS<imp-def,dead>
	%R34<def,dead> = CMPri_r32 %R33, 8, %STATUS<imp-def>
	STRf32 %R37<kill>, %R32<kill>, 4; mem:ST4[%scevgep16](tbaa=!2)
	%R32<def> = COPY %R35<kill>
	%R34<def> = COPY %R36<kill>
	BCC <BB#7>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#7(0x7c000000 / 0x80000000 = 96.88%) BB#8(0x04000000 / 0x80000000 = 3.12%)

BB#8: derived from LLVM BB %for.end60
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#7
	%R25<def> = ADDrr_r32 %R25<kill>, %IP, %STATUS<imp-def,dead>
	%R26<def> = ADDri_r32 %R26<kill>, 1, %STATUS<imp-def,dead>
	%R27<def,dead> = CMPrr_r32 %R26, %R3, %STATUS<imp-def>
    Successors according to CFG: BB#5(0x04000000 / 0x80000000 = 3.12%) BB#6(0x7c000000 / 0x80000000 = 96.88%)

BB#5: derived from LLVM BB %for.cond64.preheader
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#8
	%R25<def> = COPY %R22
	%R26<def> = COPY %R19
	BNONE32 <BB#9>, %STATUS<imp-use>
    Successors according to CFG: BB#9(?%)

BB#9: derived from LLVM BB %for.body66
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#5 BB#9
	%R27<def> = ADDrr_r32 %R16, %R26, %STATUS<imp-def,dead>
	%R33<def> = LDRf32 %R27<kill>, 0; mem:LD4[%sunkaddr30](tbaa=!2)
	%R27<def> = ADDri_r32 %R25, 4, %STATUS<imp-def,dead>
	%R26<def> = ADDri_r32 %R26<kill>, 4, %STATUS<imp-def,dead>
	%R34<def> = LDRf32 %R25, 0; mem:Volatile LD4[%lsr.iv24](tbaa=!2)
	%R32<def> = LDRi32_r32 %FP, -4; mem:LD4[FixedStack2]
	GID %CONFIG<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %R32<kill>
	GIE %CONFIG<imp-def,dead>
	%R33<def> = FADDrr_r32 %R33<kill>, %R34<kill>, %STATUS<imp-def,dead>
	%R32<def,dead> = CMPri_r32 %R26, 32, %STATUS<imp-def>
	STRf32 %R33<kill>, %R25<kill>, 0; mem:Volatile ST4[%lsr.iv24](tbaa=!2)
	%R25<def> = COPY %R27<kill>
	BCC <BB#9>, 1, %STATUS<imp-use>
    Successors according to CFG: BB#10(0x04000000 / 0x80000000 = 3.12%) BB#9(0x7c000000 / 0x80000000 = 96.88%)

BB#10: derived from LLVM BB %for.end75
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#9
	%R22<def> = ADDri_r32 %R22<kill>, 32, %STATUS<imp-def,dead>
	%R23<def> = ADDri_r32 %R23<kill>, 32, %STATUS<imp-def,dead>
	%R24<def> = ADDri_r32 %R24<kill>, 8, %STATUS<imp-def,dead>
	%R25<def,dead> = CMPrr_r32 %R24, %R3, %STATUS<imp-def>
	BCC <BB#4>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#4(0x7c000000 / 0x80000000 = 96.88%) BB#11(0x04000000 / 0x80000000 = 3.12%)

BB#11: derived from LLVM BB %for.end78
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20
    Predecessors according to CFG: BB#10
	%R2<def> = ADDrr_r32 %R2<kill>, %IP, %STATUS<imp-def,dead>
	%R20<def> = ADDri_r32 %R20<kill>, 1, %STATUS<imp-def,dead>
	%R21<def,dead> = CMPrr_r32 %R20, %R3, %STATUS<imp-def>
	BCC <BB#3>, 1, %STATUS<imp-use>
    Successors according to CFG: BB#12(0x04000000 / 0x80000000 = 3.12%) BB#3(0x7c000000 / 0x80000000 = 96.88%)

BB#12: derived from LLVM BB %for.end81
    Predecessors according to CFG: BB#1 BB#11
	%R0<def> = LDRi32_r32 %FP, -44; mem:LD4[FixedStack1]
	GID
	%CONFIG<def> = MOVTS32_core %R0<kill>
	GIE %CONFIG<imp-use,kill>
	%LR<def> = LDRi64 %SP, 48; flags: FrameSetup
	%SP<def> = ADDri_r32 %SP, 48, %STATUS<imp-def>
	RTS

# End machine code for function matmac.


<----------------->
Inserting branch into BB#8
# Machine code for function matmac: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=32, align=8, at location [SP-40]
  fi#1: size=4, align=4, at location [SP-44]
  fi#2: size=4, align=4, at location [SP-4]
  fi#3: size=4, align=8, at location [SP-8]
Function Live Ins: %R0, %R1, %R2, %R3

BB#0: 
    Live Ins: %R0 %R1 %R2 %R3
	%SP<def,tied2> = STRi64_pmd %LR, %SP<tied0>, -48; flags: FrameSetup
	%FP<def> = ADDri_r32 %SP, 48, %STATUS<imp-def>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	GID %CONFIG<imp-def>
	%R19<def> = MOVFS32_core %CONFIG, %D9<imp-def>
	STRi32_r32 %R19, %FP, -44; mem:ST4[FixedStack1]
	%IP<def> = MOVi32ri 65535
	%IP<def,tied1> = MOVTi32ri %IP<kill,tied0>, 65521
	%R18<def> = ANDrr_r32 %R19, %IP<kill>, %STATUS<imp-def>, %D9<imp-use,kill>, %D9<imp-def>
	%R19<def,tied1> = MOVTi32ri %R19<tied0>, 72, %D9<imp-use,kill>, %D9<imp-def>
	STRi64 %D9<kill>, %FP, -8; mem:ST4[FixedStack3] ST4[FixedStack2]
	GIE %CONFIG<imp-use,kill>
    Successors according to CFG: BB#1(?%)

BB#1: derived from LLVM BB %entry
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#0
	%IP<def,dead> = CMPri_r32 %R3, 1, %STATUS<imp-def>
	BCC <BB#12>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#2(0x50000000 / 0x80000000 = 62.50%) BB#12(0x30000000 / 0x80000000 = 37.50%)

BB#2: derived from LLVM BB %for.body3.lr.ph.preheader
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#1
	%IP<def> = LSL32ri %R3, 2, %STATUS<imp-def,dead>
	%R1<def> = ADDri_r32 %R1<kill>, 8, %STATUS<imp-def,dead>
	%R16<def> = MOViPTR %FP, -40
	%R17<def> = ADDri_r32 %R16, 8, %STATUS<imp-def,dead>
	%R19<def> = MOVi32ri 0, %D9<imp-def>
	%R20<def> = COPY %R19
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %for.body3.lr.ph
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20
    Predecessors according to CFG: BB#2 BB#11
	%R21<def> = LDRi32_r32 %FP, -8; mem:LD4[FixedStack3]
	GID %CONFIG<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %R21<kill>
	GIE %CONFIG<imp-def,dead>
	%R21<def> = IMULrr_r32 %R20, %R3, %STATUS<imp-def,dead>
	%R21<def> = LSL32ri %R21<kill>, 2, %STATUS<imp-def,dead>
	%R21<def> = ADDrr_r32 %R0, %R21<kill>, %STATUS<imp-def,dead>
	%R22<def> = COPY %R2
	%R23<def> = COPY %R1
	%R24<def> = COPY %R19
    Successors according to CFG: BB#4(?%)

BB#4: derived from LLVM BB %for.body9.preheader
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#3 BB#10
	%R18<def> = COPY %R19, %D9<imp-use,kill>, %D9<imp-def>
	STRi64 %D9, %FP, -16; mem:ST8[%1+24]
	STRi64 %D9, %FP, -24; mem:ST8[%1+16]
	STRi64 %D9, %FP, -32; mem:ST8[%1+8]
	STRi64 %D9, %FP, -40; mem:ST8[%1]
	%R25<def> = COPY %R23
	%R26<def> = COPY %R19
	BNONE32 <BB#6>, %STATUS<imp-use>
    Successors according to CFG: BB#6(?%)

BB#6: derived from LLVM BB %for.body9
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#4 BB#8
	%R27<def> = LSL32ri %R26, 2, %STATUS<imp-def,dead>
	%R27<def> = ADDrr_r32 %R21, %R27<kill>, %STATUS<imp-def,dead>
	%R27<def> = LDRf32 %R27<kill>, 0; mem:Volatile LD4[%add.ptr10](tbaa=!2)
	%R32<def> = COPY %R17
	%R34<def> = COPY %R25
	%R33<def> = COPY %R19
    Successors according to CFG: BB#7(?%)

BB#7: derived from LLVM BB %for.body13
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26 %R27 %R32 %R33 %R34
    Predecessors according to CFG: BB#6 BB#7
	%R37<def> = LDRf32 %R34, -8; mem:Volatile LD4[%scevgep8](tbaa=!2)
	%R35<def> = ADDri_r32 %R32, 16, %STATUS<imp-def,dead>
	%R36<def> = ADDri_r32 %R34, 16, %STATUS<imp-def,dead>
	%R38<def> = LDRf32 %R34, -4; mem:Volatile LD4[%scevgep9](tbaa=!2)
	%R33<def> = ADDri_r32 %R33<kill>, 4, %STATUS<imp-def,dead>
	%R39<def> = LDRf32 %R34, 0; mem:Volatile LD4[%lsr.iv5](tbaa=!2)
	%R40<def> = LDRf32 %R34<kill>, 4; mem:Volatile LD4[%scevgep7](tbaa=!2)
	%D21<def> = LDRf64 %R32, -8; mem:LD4[%scevgep17](tbaa=!2) LD4[%scevgep15](tbaa=!2)
	%R34<def> = LDRi32_r32 %FP, -4; mem:LD4[FixedStack2]
	GID %CONFIG<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %R34<kill>
	GIE %CONFIG<imp-def,dead>
	%R43<def,tied1> = FMADDrr_r32 %R43<tied0>, %R27, %R37<kill>, %STATUS<imp-def,dead>, %D21<imp-use,kill>, %D21<imp-def>
	%R42<def,tied1> = FMADDrr_r32 %R42<tied0>, %R27, %R38<kill>, %STATUS<imp-def,dead>, %D21<imp-use,kill>, %D21<imp-def>
	%R44<def> = COPY %R43, %D22<imp-def>
	%R45<def> = COPY %R42, %D21<imp-use,kill>, %D22<imp-use,kill>, %D22<imp-def>
	STRf64 %D22<kill>, %R32, -8; mem:ST4[%scevgep17](tbaa=!2) ST4[%scevgep15](tbaa=!2)
	%R34<def> = LDRf32 %R32, 0; mem:LD4[%lsr.iv1214](tbaa=!2)
	%R34<def,tied1> = FMADDrr_r32 %R34<kill,tied0>, %R27, %R39<kill>, %STATUS<imp-def,dead>
	STRf32 %R34<kill>, %R32, 0; mem:ST4[%lsr.iv1214](tbaa=!2)
	%R37<def> = LDRf32 %R32, 4; mem:LD4[%scevgep16](tbaa=!2)
	%R37<def,tied1> = FMADDrr_r32 %R37<kill,tied0>, %R27, %R40<kill>, %STATUS<imp-def,dead>
	%R34<def,dead> = CMPri_r32 %R33, 8, %STATUS<imp-def>
	STRf32 %R37<kill>, %R32<kill>, 4; mem:ST4[%scevgep16](tbaa=!2)
	%R32<def> = COPY %R35<kill>
	%R34<def> = COPY %R36<kill>
	BCC <BB#7>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#7(0x7c000000 / 0x80000000 = 96.88%) BB#8(0x04000000 / 0x80000000 = 3.12%)

BB#8: derived from LLVM BB %for.end60
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#7
	%R25<def> = ADDrr_r32 %R25<kill>, %IP, %STATUS<imp-def,dead>
	%R26<def> = ADDri_r32 %R26<kill>, 1, %STATUS<imp-def,dead>
	%R27<def,dead> = CMPrr_r32 %R26, %R3, %STATUS<imp-def>
	BCC <BB#6>, 1, %STATUS<imp-use>
    Successors according to CFG: BB#5(0x04000000 / 0x80000000 = 3.12%) BB#6(0x7c000000 / 0x80000000 = 96.88%)

BB#5: derived from LLVM BB %for.cond64.preheader
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#8
	%R25<def> = COPY %R22
	%R26<def> = COPY %R19
	BNONE32 <BB#9>, %STATUS<imp-use>
    Successors according to CFG: BB#9(?%)

BB#9: derived from LLVM BB %for.body66
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#5 BB#9
	%R27<def> = ADDrr_r32 %R16, %R26, %STATUS<imp-def,dead>
	%R33<def> = LDRf32 %R27<kill>, 0; mem:LD4[%sunkaddr30](tbaa=!2)
	%R27<def> = ADDri_r32 %R25, 4, %STATUS<imp-def,dead>
	%R26<def> = ADDri_r32 %R26<kill>, 4, %STATUS<imp-def,dead>
	%R34<def> = LDRf32 %R25, 0; mem:Volatile LD4[%lsr.iv24](tbaa=!2)
	%R32<def> = LDRi32_r32 %FP, -4; mem:LD4[FixedStack2]
	GID %CONFIG<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %R32<kill>
	GIE %CONFIG<imp-def,dead>
	%R33<def> = FADDrr_r32 %R33<kill>, %R34<kill>, %STATUS<imp-def,dead>
	%R32<def,dead> = CMPri_r32 %R26, 32, %STATUS<imp-def>
	STRf32 %R33<kill>, %R25<kill>, 0; mem:Volatile ST4[%lsr.iv24](tbaa=!2)
	%R25<def> = COPY %R27<kill>
	BCC <BB#9>, 1, %STATUS<imp-use>
    Successors according to CFG: BB#10(0x04000000 / 0x80000000 = 3.12%) BB#9(0x7c000000 / 0x80000000 = 96.88%)

BB#10: derived from LLVM BB %for.end75
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#9
	%R22<def> = ADDri_r32 %R22<kill>, 32, %STATUS<imp-def,dead>
	%R23<def> = ADDri_r32 %R23<kill>, 32, %STATUS<imp-def,dead>
	%R24<def> = ADDri_r32 %R24<kill>, 8, %STATUS<imp-def,dead>
	%R25<def,dead> = CMPrr_r32 %R24, %R3, %STATUS<imp-def>
	BCC <BB#4>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#4(0x7c000000 / 0x80000000 = 96.88%) BB#11(0x04000000 / 0x80000000 = 3.12%)

BB#11: derived from LLVM BB %for.end78
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20
    Predecessors according to CFG: BB#10
	%R2<def> = ADDrr_r32 %R2<kill>, %IP, %STATUS<imp-def,dead>
	%R20<def> = ADDri_r32 %R20<kill>, 1, %STATUS<imp-def,dead>
	%R21<def,dead> = CMPrr_r32 %R20, %R3, %STATUS<imp-def>
	BCC <BB#3>, 1, %STATUS<imp-use>
    Successors according to CFG: BB#12(0x04000000 / 0x80000000 = 3.12%) BB#3(0x7c000000 / 0x80000000 = 96.88%)

BB#12: derived from LLVM BB %for.end81
    Predecessors according to CFG: BB#1 BB#11
	%R0<def> = LDRi32_r32 %FP, -44; mem:LD4[FixedStack1]
	GID
	%CONFIG<def> = MOVTS32_core %R0<kill>
	GIE %CONFIG<imp-use,kill>
	%LR<def> = LDRi64 %SP, 48; flags: FrameSetup
	%SP<def> = ADDri_r32 %SP, 48, %STATUS<imp-def>
	RTS

# End machine code for function matmac.


<----------------->
Analyzing block 8
BB#8: derived from LLVM BB %for.end60
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#7
	%R25<def> = ADDrr_r32 %R25<kill>, %IP, %STATUS<imp-def,dead>
	%R26<def> = ADDri_r32 %R26<kill>, 1, %STATUS<imp-def,dead>
	%R27<def,dead> = CMPrr_r32 %R26, %R3, %STATUS<imp-def>
	BCC <BB#6>, 1, %STATUS<imp-use>
    Successors according to CFG: BB#5(0x04000000 / 0x80000000 = 3.12%) BB#6(0x7c000000 / 0x80000000 = 96.88%)

<----------------->
Analyzing block 5
BB#5: derived from LLVM BB %for.cond64.preheader
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#8
	%R25<def> = COPY %R22
	%R26<def> = COPY %R19
	BNONE32 <BB#9>, %STATUS<imp-use>
    Successors according to CFG: BB#9(?%)

<----------------->
Erasing the jump to successor block 5
# Machine code for function matmac: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=32, align=8, at location [SP-40]
  fi#1: size=4, align=4, at location [SP-44]
  fi#2: size=4, align=4, at location [SP-4]
  fi#3: size=4, align=8, at location [SP-8]
Function Live Ins: %R0, %R1, %R2, %R3

BB#0: 
    Live Ins: %R0 %R1 %R2 %R3
	%SP<def,tied2> = STRi64_pmd %LR, %SP<tied0>, -48; flags: FrameSetup
	%FP<def> = ADDri_r32 %SP, 48, %STATUS<imp-def>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	GID %CONFIG<imp-def>
	%R19<def> = MOVFS32_core %CONFIG, %D9<imp-def>
	STRi32_r32 %R19, %FP, -44; mem:ST4[FixedStack1]
	%IP<def> = MOVi32ri 65535
	%IP<def,tied1> = MOVTi32ri %IP<kill,tied0>, 65521
	%R18<def> = ANDrr_r32 %R19, %IP<kill>, %STATUS<imp-def>, %D9<imp-use,kill>, %D9<imp-def>
	%R19<def,tied1> = MOVTi32ri %R19<tied0>, 72, %D9<imp-use,kill>, %D9<imp-def>
	STRi64 %D9<kill>, %FP, -8; mem:ST4[FixedStack3] ST4[FixedStack2]
	GIE %CONFIG<imp-use,kill>
    Successors according to CFG: BB#1(?%)

BB#1: derived from LLVM BB %entry
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#0
	%IP<def,dead> = CMPri_r32 %R3, 1, %STATUS<imp-def>
	BCC <BB#12>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#2(0x50000000 / 0x80000000 = 62.50%) BB#12(0x30000000 / 0x80000000 = 37.50%)

BB#2: derived from LLVM BB %for.body3.lr.ph.preheader
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#1
	%IP<def> = LSL32ri %R3, 2, %STATUS<imp-def,dead>
	%R1<def> = ADDri_r32 %R1<kill>, 8, %STATUS<imp-def,dead>
	%R16<def> = MOViPTR %FP, -40
	%R17<def> = ADDri_r32 %R16, 8, %STATUS<imp-def,dead>
	%R19<def> = MOVi32ri 0, %D9<imp-def>
	%R20<def> = COPY %R19
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %for.body3.lr.ph
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20
    Predecessors according to CFG: BB#2 BB#11
	%R21<def> = LDRi32_r32 %FP, -8; mem:LD4[FixedStack3]
	GID %CONFIG<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %R21<kill>
	GIE %CONFIG<imp-def,dead>
	%R21<def> = IMULrr_r32 %R20, %R3, %STATUS<imp-def,dead>
	%R21<def> = LSL32ri %R21<kill>, 2, %STATUS<imp-def,dead>
	%R21<def> = ADDrr_r32 %R0, %R21<kill>, %STATUS<imp-def,dead>
	%R22<def> = COPY %R2
	%R23<def> = COPY %R1
	%R24<def> = COPY %R19
    Successors according to CFG: BB#4(?%)

BB#4: derived from LLVM BB %for.body9.preheader
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#3 BB#10
	%R18<def> = COPY %R19, %D9<imp-use,kill>, %D9<imp-def>
	STRi64 %D9, %FP, -16; mem:ST8[%1+24]
	STRi64 %D9, %FP, -24; mem:ST8[%1+16]
	STRi64 %D9, %FP, -32; mem:ST8[%1+8]
	STRi64 %D9, %FP, -40; mem:ST8[%1]
	%R25<def> = COPY %R23
	%R26<def> = COPY %R19
	BNONE32 <BB#6>, %STATUS<imp-use>
    Successors according to CFG: BB#6(?%)

BB#6: derived from LLVM BB %for.body9
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#4 BB#8
	%R27<def> = LSL32ri %R26, 2, %STATUS<imp-def,dead>
	%R27<def> = ADDrr_r32 %R21, %R27<kill>, %STATUS<imp-def,dead>
	%R27<def> = LDRf32 %R27<kill>, 0; mem:Volatile LD4[%add.ptr10](tbaa=!2)
	%R32<def> = COPY %R17
	%R34<def> = COPY %R25
	%R33<def> = COPY %R19
    Successors according to CFG: BB#7(?%)

BB#7: derived from LLVM BB %for.body13
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26 %R27 %R32 %R33 %R34
    Predecessors according to CFG: BB#6 BB#7
	%R37<def> = LDRf32 %R34, -8; mem:Volatile LD4[%scevgep8](tbaa=!2)
	%R35<def> = ADDri_r32 %R32, 16, %STATUS<imp-def,dead>
	%R36<def> = ADDri_r32 %R34, 16, %STATUS<imp-def,dead>
	%R38<def> = LDRf32 %R34, -4; mem:Volatile LD4[%scevgep9](tbaa=!2)
	%R33<def> = ADDri_r32 %R33<kill>, 4, %STATUS<imp-def,dead>
	%R39<def> = LDRf32 %R34, 0; mem:Volatile LD4[%lsr.iv5](tbaa=!2)
	%R40<def> = LDRf32 %R34<kill>, 4; mem:Volatile LD4[%scevgep7](tbaa=!2)
	%D21<def> = LDRf64 %R32, -8; mem:LD4[%scevgep17](tbaa=!2) LD4[%scevgep15](tbaa=!2)
	%R34<def> = LDRi32_r32 %FP, -4; mem:LD4[FixedStack2]
	GID %CONFIG<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %R34<kill>
	GIE %CONFIG<imp-def,dead>
	%R43<def,tied1> = FMADDrr_r32 %R43<tied0>, %R27, %R37<kill>, %STATUS<imp-def,dead>, %D21<imp-use,kill>, %D21<imp-def>
	%R42<def,tied1> = FMADDrr_r32 %R42<tied0>, %R27, %R38<kill>, %STATUS<imp-def,dead>, %D21<imp-use,kill>, %D21<imp-def>
	%R44<def> = COPY %R43, %D22<imp-def>
	%R45<def> = COPY %R42, %D21<imp-use,kill>, %D22<imp-use,kill>, %D22<imp-def>
	STRf64 %D22<kill>, %R32, -8; mem:ST4[%scevgep17](tbaa=!2) ST4[%scevgep15](tbaa=!2)
	%R34<def> = LDRf32 %R32, 0; mem:LD4[%lsr.iv1214](tbaa=!2)
	%R34<def,tied1> = FMADDrr_r32 %R34<kill,tied0>, %R27, %R39<kill>, %STATUS<imp-def,dead>
	STRf32 %R34<kill>, %R32, 0; mem:ST4[%lsr.iv1214](tbaa=!2)
	%R37<def> = LDRf32 %R32, 4; mem:LD4[%scevgep16](tbaa=!2)
	%R37<def,tied1> = FMADDrr_r32 %R37<kill,tied0>, %R27, %R40<kill>, %STATUS<imp-def,dead>
	%R34<def,dead> = CMPri_r32 %R33, 8, %STATUS<imp-def>
	STRf32 %R37<kill>, %R32<kill>, 4; mem:ST4[%scevgep16](tbaa=!2)
	%R32<def> = COPY %R35<kill>
	%R34<def> = COPY %R36<kill>
	BCC <BB#7>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#7(0x7c000000 / 0x80000000 = 96.88%) BB#8(0x04000000 / 0x80000000 = 3.12%)

BB#8: derived from LLVM BB %for.end60
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#7
	%R25<def> = ADDrr_r32 %R25<kill>, %IP, %STATUS<imp-def,dead>
	%R26<def> = ADDri_r32 %R26<kill>, 1, %STATUS<imp-def,dead>
	%R27<def,dead> = CMPrr_r32 %R26, %R3, %STATUS<imp-def>
	BCC <BB#6>, 1, %STATUS<imp-use>
    Successors according to CFG: BB#5(0x04000000 / 0x80000000 = 3.12%) BB#6(0x7c000000 / 0x80000000 = 96.88%)

BB#5: derived from LLVM BB %for.cond64.preheader
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#8
	%R25<def> = COPY %R22
	%R26<def> = COPY %R19
    Successors according to CFG: BB#9(?%)

BB#9: derived from LLVM BB %for.body66
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#5 BB#9
	%R27<def> = ADDrr_r32 %R16, %R26, %STATUS<imp-def,dead>
	%R33<def> = LDRf32 %R27<kill>, 0; mem:LD4[%sunkaddr30](tbaa=!2)
	%R27<def> = ADDri_r32 %R25, 4, %STATUS<imp-def,dead>
	%R26<def> = ADDri_r32 %R26<kill>, 4, %STATUS<imp-def,dead>
	%R34<def> = LDRf32 %R25, 0; mem:Volatile LD4[%lsr.iv24](tbaa=!2)
	%R32<def> = LDRi32_r32 %FP, -4; mem:LD4[FixedStack2]
	GID %CONFIG<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %R32<kill>
	GIE %CONFIG<imp-def,dead>
	%R33<def> = FADDrr_r32 %R33<kill>, %R34<kill>, %STATUS<imp-def,dead>
	%R32<def,dead> = CMPri_r32 %R26, 32, %STATUS<imp-def>
	STRf32 %R33<kill>, %R25<kill>, 0; mem:Volatile ST4[%lsr.iv24](tbaa=!2)
	%R25<def> = COPY %R27<kill>
	BCC <BB#9>, 1, %STATUS<imp-use>
    Successors according to CFG: BB#10(0x04000000 / 0x80000000 = 3.12%) BB#9(0x7c000000 / 0x80000000 = 96.88%)

BB#10: derived from LLVM BB %for.end75
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#9
	%R22<def> = ADDri_r32 %R22<kill>, 32, %STATUS<imp-def,dead>
	%R23<def> = ADDri_r32 %R23<kill>, 32, %STATUS<imp-def,dead>
	%R24<def> = ADDri_r32 %R24<kill>, 8, %STATUS<imp-def,dead>
	%R25<def,dead> = CMPrr_r32 %R24, %R3, %STATUS<imp-def>
	BCC <BB#4>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#4(0x7c000000 / 0x80000000 = 96.88%) BB#11(0x04000000 / 0x80000000 = 3.12%)

BB#11: derived from LLVM BB %for.end78
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20
    Predecessors according to CFG: BB#10
	%R2<def> = ADDrr_r32 %R2<kill>, %IP, %STATUS<imp-def,dead>
	%R20<def> = ADDri_r32 %R20<kill>, 1, %STATUS<imp-def,dead>
	%R21<def,dead> = CMPrr_r32 %R20, %R3, %STATUS<imp-def>
	BCC <BB#3>, 1, %STATUS<imp-use>
    Successors according to CFG: BB#12(0x04000000 / 0x80000000 = 3.12%) BB#3(0x7c000000 / 0x80000000 = 96.88%)

BB#12: derived from LLVM BB %for.end81
    Predecessors according to CFG: BB#1 BB#11
	%R0<def> = LDRi32_r32 %FP, -44; mem:LD4[FixedStack1]
	GID
	%CONFIG<def> = MOVTS32_core %R0<kill>
	GIE %CONFIG<imp-use,kill>
	%LR<def> = LDRi64 %SP, 48; flags: FrameSetup
	%SP<def> = ADDri_r32 %SP, 48, %STATUS<imp-def>
	RTS

# End machine code for function matmac.


<----------------->
Analyzing block 8
BB#8: derived from LLVM BB %for.end60
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#7
	%R25<def> = ADDrr_r32 %R25<kill>, %IP, %STATUS<imp-def,dead>
	%R26<def> = ADDri_r32 %R26<kill>, 1, %STATUS<imp-def,dead>
	%R27<def,dead> = CMPrr_r32 %R26, %R3, %STATUS<imp-def>
	BCC <BB#6>, 1, %STATUS<imp-use>
    Successors according to CFG: BB#5(0x04000000 / 0x80000000 = 3.12%) BB#6(0x7c000000 / 0x80000000 = 96.88%)

<----------------->
Analyzing block 4
BB#4: derived from LLVM BB %for.body9.preheader
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#3 BB#10
	%R18<def> = COPY %R19, %D9<imp-use,kill>, %D9<imp-def>
	STRi64 %D9, %FP, -16; mem:ST8[%1+24]
	STRi64 %D9, %FP, -24; mem:ST8[%1+16]
	STRi64 %D9, %FP, -32; mem:ST8[%1+8]
	STRi64 %D9, %FP, -40; mem:ST8[%1]
	%R25<def> = COPY %R23
	%R26<def> = COPY %R19
	BNONE32 <BB#6>, %STATUS<imp-use>
    Successors according to CFG: BB#6(?%)

<----------------->
Erasing the jump to successor block 4
# Machine code for function matmac: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=32, align=8, at location [SP-40]
  fi#1: size=4, align=4, at location [SP-44]
  fi#2: size=4, align=4, at location [SP-4]
  fi#3: size=4, align=8, at location [SP-8]
Function Live Ins: %R0, %R1, %R2, %R3

BB#0: 
    Live Ins: %R0 %R1 %R2 %R3
	%SP<def,tied2> = STRi64_pmd %LR, %SP<tied0>, -48; flags: FrameSetup
	%FP<def> = ADDri_r32 %SP, 48, %STATUS<imp-def>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	GID %CONFIG<imp-def>
	%R19<def> = MOVFS32_core %CONFIG, %D9<imp-def>
	STRi32_r32 %R19, %FP, -44; mem:ST4[FixedStack1]
	%IP<def> = MOVi32ri 65535
	%IP<def,tied1> = MOVTi32ri %IP<kill,tied0>, 65521
	%R18<def> = ANDrr_r32 %R19, %IP<kill>, %STATUS<imp-def>, %D9<imp-use,kill>, %D9<imp-def>
	%R19<def,tied1> = MOVTi32ri %R19<tied0>, 72, %D9<imp-use,kill>, %D9<imp-def>
	STRi64 %D9<kill>, %FP, -8; mem:ST4[FixedStack3] ST4[FixedStack2]
	GIE %CONFIG<imp-use,kill>
    Successors according to CFG: BB#1(?%)

BB#1: derived from LLVM BB %entry
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#0
	%IP<def,dead> = CMPri_r32 %R3, 1, %STATUS<imp-def>
	BCC <BB#12>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#2(0x50000000 / 0x80000000 = 62.50%) BB#12(0x30000000 / 0x80000000 = 37.50%)

BB#2: derived from LLVM BB %for.body3.lr.ph.preheader
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#1
	%IP<def> = LSL32ri %R3, 2, %STATUS<imp-def,dead>
	%R1<def> = ADDri_r32 %R1<kill>, 8, %STATUS<imp-def,dead>
	%R16<def> = MOViPTR %FP, -40
	%R17<def> = ADDri_r32 %R16, 8, %STATUS<imp-def,dead>
	%R19<def> = MOVi32ri 0, %D9<imp-def>
	%R20<def> = COPY %R19
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %for.body3.lr.ph
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20
    Predecessors according to CFG: BB#2 BB#11
	%R21<def> = LDRi32_r32 %FP, -8; mem:LD4[FixedStack3]
	GID %CONFIG<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %R21<kill>
	GIE %CONFIG<imp-def,dead>
	%R21<def> = IMULrr_r32 %R20, %R3, %STATUS<imp-def,dead>
	%R21<def> = LSL32ri %R21<kill>, 2, %STATUS<imp-def,dead>
	%R21<def> = ADDrr_r32 %R0, %R21<kill>, %STATUS<imp-def,dead>
	%R22<def> = COPY %R2
	%R23<def> = COPY %R1
	%R24<def> = COPY %R19
    Successors according to CFG: BB#4(?%)

BB#4: derived from LLVM BB %for.body9.preheader
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#3 BB#10
	%R18<def> = COPY %R19, %D9<imp-use,kill>, %D9<imp-def>
	STRi64 %D9, %FP, -16; mem:ST8[%1+24]
	STRi64 %D9, %FP, -24; mem:ST8[%1+16]
	STRi64 %D9, %FP, -32; mem:ST8[%1+8]
	STRi64 %D9, %FP, -40; mem:ST8[%1]
	%R25<def> = COPY %R23
	%R26<def> = COPY %R19
    Successors according to CFG: BB#6(?%)

BB#6: derived from LLVM BB %for.body9
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#4 BB#8
	%R27<def> = LSL32ri %R26, 2, %STATUS<imp-def,dead>
	%R27<def> = ADDrr_r32 %R21, %R27<kill>, %STATUS<imp-def,dead>
	%R27<def> = LDRf32 %R27<kill>, 0; mem:Volatile LD4[%add.ptr10](tbaa=!2)
	%R32<def> = COPY %R17
	%R34<def> = COPY %R25
	%R33<def> = COPY %R19
    Successors according to CFG: BB#7(?%)

BB#7: derived from LLVM BB %for.body13
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26 %R27 %R32 %R33 %R34
    Predecessors according to CFG: BB#6 BB#7
	%R37<def> = LDRf32 %R34, -8; mem:Volatile LD4[%scevgep8](tbaa=!2)
	%R35<def> = ADDri_r32 %R32, 16, %STATUS<imp-def,dead>
	%R36<def> = ADDri_r32 %R34, 16, %STATUS<imp-def,dead>
	%R38<def> = LDRf32 %R34, -4; mem:Volatile LD4[%scevgep9](tbaa=!2)
	%R33<def> = ADDri_r32 %R33<kill>, 4, %STATUS<imp-def,dead>
	%R39<def> = LDRf32 %R34, 0; mem:Volatile LD4[%lsr.iv5](tbaa=!2)
	%R40<def> = LDRf32 %R34<kill>, 4; mem:Volatile LD4[%scevgep7](tbaa=!2)
	%D21<def> = LDRf64 %R32, -8; mem:LD4[%scevgep17](tbaa=!2) LD4[%scevgep15](tbaa=!2)
	%R34<def> = LDRi32_r32 %FP, -4; mem:LD4[FixedStack2]
	GID %CONFIG<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %R34<kill>
	GIE %CONFIG<imp-def,dead>
	%R43<def,tied1> = FMADDrr_r32 %R43<tied0>, %R27, %R37<kill>, %STATUS<imp-def,dead>, %D21<imp-use,kill>, %D21<imp-def>
	%R42<def,tied1> = FMADDrr_r32 %R42<tied0>, %R27, %R38<kill>, %STATUS<imp-def,dead>, %D21<imp-use,kill>, %D21<imp-def>
	%R44<def> = COPY %R43, %D22<imp-def>
	%R45<def> = COPY %R42, %D21<imp-use,kill>, %D22<imp-use,kill>, %D22<imp-def>
	STRf64 %D22<kill>, %R32, -8; mem:ST4[%scevgep17](tbaa=!2) ST4[%scevgep15](tbaa=!2)
	%R34<def> = LDRf32 %R32, 0; mem:LD4[%lsr.iv1214](tbaa=!2)
	%R34<def,tied1> = FMADDrr_r32 %R34<kill,tied0>, %R27, %R39<kill>, %STATUS<imp-def,dead>
	STRf32 %R34<kill>, %R32, 0; mem:ST4[%lsr.iv1214](tbaa=!2)
	%R37<def> = LDRf32 %R32, 4; mem:LD4[%scevgep16](tbaa=!2)
	%R37<def,tied1> = FMADDrr_r32 %R37<kill,tied0>, %R27, %R40<kill>, %STATUS<imp-def,dead>
	%R34<def,dead> = CMPri_r32 %R33, 8, %STATUS<imp-def>
	STRf32 %R37<kill>, %R32<kill>, 4; mem:ST4[%scevgep16](tbaa=!2)
	%R32<def> = COPY %R35<kill>
	%R34<def> = COPY %R36<kill>
	BCC <BB#7>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#7(0x7c000000 / 0x80000000 = 96.88%) BB#8(0x04000000 / 0x80000000 = 3.12%)

BB#8: derived from LLVM BB %for.end60
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#7
	%R25<def> = ADDrr_r32 %R25<kill>, %IP, %STATUS<imp-def,dead>
	%R26<def> = ADDri_r32 %R26<kill>, 1, %STATUS<imp-def,dead>
	%R27<def,dead> = CMPrr_r32 %R26, %R3, %STATUS<imp-def>
	BCC <BB#6>, 1, %STATUS<imp-use>
    Successors according to CFG: BB#5(0x04000000 / 0x80000000 = 3.12%) BB#6(0x7c000000 / 0x80000000 = 96.88%)

BB#5: derived from LLVM BB %for.cond64.preheader
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#8
	%R25<def> = COPY %R22
	%R26<def> = COPY %R19
    Successors according to CFG: BB#9(?%)

BB#9: derived from LLVM BB %for.body66
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#5 BB#9
	%R27<def> = ADDrr_r32 %R16, %R26, %STATUS<imp-def,dead>
	%R33<def> = LDRf32 %R27<kill>, 0; mem:LD4[%sunkaddr30](tbaa=!2)
	%R27<def> = ADDri_r32 %R25, 4, %STATUS<imp-def,dead>
	%R26<def> = ADDri_r32 %R26<kill>, 4, %STATUS<imp-def,dead>
	%R34<def> = LDRf32 %R25, 0; mem:Volatile LD4[%lsr.iv24](tbaa=!2)
	%R32<def> = LDRi32_r32 %FP, -4; mem:LD4[FixedStack2]
	GID %CONFIG<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %R32<kill>
	GIE %CONFIG<imp-def,dead>
	%R33<def> = FADDrr_r32 %R33<kill>, %R34<kill>, %STATUS<imp-def,dead>
	%R32<def,dead> = CMPri_r32 %R26, 32, %STATUS<imp-def>
	STRf32 %R33<kill>, %R25<kill>, 0; mem:Volatile ST4[%lsr.iv24](tbaa=!2)
	%R25<def> = COPY %R27<kill>
	BCC <BB#9>, 1, %STATUS<imp-use>
    Successors according to CFG: BB#10(0x04000000 / 0x80000000 = 3.12%) BB#9(0x7c000000 / 0x80000000 = 96.88%)

BB#10: derived from LLVM BB %for.end75
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#9
	%R22<def> = ADDri_r32 %R22<kill>, 32, %STATUS<imp-def,dead>
	%R23<def> = ADDri_r32 %R23<kill>, 32, %STATUS<imp-def,dead>
	%R24<def> = ADDri_r32 %R24<kill>, 8, %STATUS<imp-def,dead>
	%R25<def,dead> = CMPrr_r32 %R24, %R3, %STATUS<imp-def>
	BCC <BB#4>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#4(0x7c000000 / 0x80000000 = 96.88%) BB#11(0x04000000 / 0x80000000 = 3.12%)

BB#11: derived from LLVM BB %for.end78
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20
    Predecessors according to CFG: BB#10
	%R2<def> = ADDrr_r32 %R2<kill>, %IP, %STATUS<imp-def,dead>
	%R20<def> = ADDri_r32 %R20<kill>, 1, %STATUS<imp-def,dead>
	%R21<def,dead> = CMPrr_r32 %R20, %R3, %STATUS<imp-def>
	BCC <BB#3>, 1, %STATUS<imp-use>
    Successors according to CFG: BB#12(0x04000000 / 0x80000000 = 3.12%) BB#3(0x7c000000 / 0x80000000 = 96.88%)

BB#12: derived from LLVM BB %for.end81
    Predecessors according to CFG: BB#1 BB#11
	%R0<def> = LDRi32_r32 %FP, -44; mem:LD4[FixedStack1]
	GID
	%CONFIG<def> = MOVTS32_core %R0<kill>
	GIE %CONFIG<imp-use,kill>
	%LR<def> = LDRi64 %SP, 48; flags: FrameSetup
	%SP<def> = ADDri_r32 %SP, 48, %STATUS<imp-def>
	RTS

# End machine code for function matmac.


<----------------->
Analyzing block 6
BB#6: derived from LLVM BB %for.body9
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#4 BB#8
	%R27<def> = LSL32ri %R26, 2, %STATUS<imp-def,dead>
	%R27<def> = ADDrr_r32 %R21, %R27<kill>, %STATUS<imp-def,dead>
	%R27<def> = LDRf32 %R27<kill>, 0; mem:Volatile LD4[%add.ptr10](tbaa=!2)
	%R32<def> = COPY %R17
	%R34<def> = COPY %R25
	%R33<def> = COPY %R19
    Successors according to CFG: BB#7(?%)

<----------------->
Analyzing block 4
BB#4: derived from LLVM BB %for.body9.preheader
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#3 BB#10
	%R18<def> = COPY %R19, %D9<imp-use,kill>, %D9<imp-def>
	STRi64 %D9, %FP, -16; mem:ST8[%1+24]
	STRi64 %D9, %FP, -24; mem:ST8[%1+16]
	STRi64 %D9, %FP, -32; mem:ST8[%1+8]
	STRi64 %D9, %FP, -40; mem:ST8[%1]
	%R25<def> = COPY %R23
	%R26<def> = COPY %R19
    Successors according to CFG: BB#6(?%)

<----------------->
Analyzing block 6
BB#6: derived from LLVM BB %for.body9
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#4 BB#8
	%R27<def> = LSL32ri %R26, 2, %STATUS<imp-def,dead>
	%R27<def> = ADDrr_r32 %R21, %R27<kill>, %STATUS<imp-def,dead>
	%R27<def> = LDRf32 %R27<kill>, 0; mem:Volatile LD4[%add.ptr10](tbaa=!2)
	%R32<def> = COPY %R17
	%R34<def> = COPY %R25
	%R33<def> = COPY %R19
    Successors according to CFG: BB#7(?%)

<----------------->
Analyzing block 7
BB#7: derived from LLVM BB %for.body13
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26 %R27 %R32 %R33 %R34
    Predecessors according to CFG: BB#6 BB#7
	%R37<def> = LDRf32 %R34, -8; mem:Volatile LD4[%scevgep8](tbaa=!2)
	%R35<def> = ADDri_r32 %R32, 16, %STATUS<imp-def,dead>
	%R36<def> = ADDri_r32 %R34, 16, %STATUS<imp-def,dead>
	%R38<def> = LDRf32 %R34, -4; mem:Volatile LD4[%scevgep9](tbaa=!2)
	%R33<def> = ADDri_r32 %R33<kill>, 4, %STATUS<imp-def,dead>
	%R39<def> = LDRf32 %R34, 0; mem:Volatile LD4[%lsr.iv5](tbaa=!2)
	%R40<def> = LDRf32 %R34<kill>, 4; mem:Volatile LD4[%scevgep7](tbaa=!2)
	%D21<def> = LDRf64 %R32, -8; mem:LD4[%scevgep17](tbaa=!2) LD4[%scevgep15](tbaa=!2)
	%R34<def> = LDRi32_r32 %FP, -4; mem:LD4[FixedStack2]
	GID %CONFIG<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %R34<kill>
	GIE %CONFIG<imp-def,dead>
	%R43<def,tied1> = FMADDrr_r32 %R43<tied0>, %R27, %R37<kill>, %STATUS<imp-def,dead>, %D21<imp-use,kill>, %D21<imp-def>
	%R42<def,tied1> = FMADDrr_r32 %R42<tied0>, %R27, %R38<kill>, %STATUS<imp-def,dead>, %D21<imp-use,kill>, %D21<imp-def>
	%R44<def> = COPY %R43, %D22<imp-def>
	%R45<def> = COPY %R42, %D21<imp-use,kill>, %D22<imp-use,kill>, %D22<imp-def>
	STRf64 %D22<kill>, %R32, -8; mem:ST4[%scevgep17](tbaa=!2) ST4[%scevgep15](tbaa=!2)
	%R34<def> = LDRf32 %R32, 0; mem:LD4[%lsr.iv1214](tbaa=!2)
	%R34<def,tied1> = FMADDrr_r32 %R34<kill,tied0>, %R27, %R39<kill>, %STATUS<imp-def,dead>
	STRf32 %R34<kill>, %R32, 0; mem:ST4[%lsr.iv1214](tbaa=!2)
	%R37<def> = LDRf32 %R32, 4; mem:LD4[%scevgep16](tbaa=!2)
	%R37<def,tied1> = FMADDrr_r32 %R37<kill,tied0>, %R27, %R40<kill>, %STATUS<imp-def,dead>
	%R34<def,dead> = CMPri_r32 %R33, 8, %STATUS<imp-def>
	STRf32 %R37<kill>, %R32<kill>, 4; mem:ST4[%scevgep16](tbaa=!2)
	%R32<def> = COPY %R35<kill>
	%R34<def> = COPY %R36<kill>
	BCC <BB#7>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#7(0x7c000000 / 0x80000000 = 96.88%) BB#8(0x04000000 / 0x80000000 = 3.12%)

<----------------->
Analyzing block 6
BB#6: derived from LLVM BB %for.body9
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#4 BB#8
	%R27<def> = LSL32ri %R26, 2, %STATUS<imp-def,dead>
	%R27<def> = ADDrr_r32 %R21, %R27<kill>, %STATUS<imp-def,dead>
	%R27<def> = LDRf32 %R27<kill>, 0; mem:Volatile LD4[%add.ptr10](tbaa=!2)
	%R32<def> = COPY %R17
	%R34<def> = COPY %R25
	%R33<def> = COPY %R19
    Successors according to CFG: BB#7(?%)

<----------------->
Analyzing block 7
BB#7: derived from LLVM BB %for.body13
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26 %R27 %R32 %R33 %R34
    Predecessors according to CFG: BB#6 BB#7
	%R37<def> = LDRf32 %R34, -8; mem:Volatile LD4[%scevgep8](tbaa=!2)
	%R35<def> = ADDri_r32 %R32, 16, %STATUS<imp-def,dead>
	%R36<def> = ADDri_r32 %R34, 16, %STATUS<imp-def,dead>
	%R38<def> = LDRf32 %R34, -4; mem:Volatile LD4[%scevgep9](tbaa=!2)
	%R33<def> = ADDri_r32 %R33<kill>, 4, %STATUS<imp-def,dead>
	%R39<def> = LDRf32 %R34, 0; mem:Volatile LD4[%lsr.iv5](tbaa=!2)
	%R40<def> = LDRf32 %R34<kill>, 4; mem:Volatile LD4[%scevgep7](tbaa=!2)
	%D21<def> = LDRf64 %R32, -8; mem:LD4[%scevgep17](tbaa=!2) LD4[%scevgep15](tbaa=!2)
	%R34<def> = LDRi32_r32 %FP, -4; mem:LD4[FixedStack2]
	GID %CONFIG<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %R34<kill>
	GIE %CONFIG<imp-def,dead>
	%R43<def,tied1> = FMADDrr_r32 %R43<tied0>, %R27, %R37<kill>, %STATUS<imp-def,dead>, %D21<imp-use,kill>, %D21<imp-def>
	%R42<def,tied1> = FMADDrr_r32 %R42<tied0>, %R27, %R38<kill>, %STATUS<imp-def,dead>, %D21<imp-use,kill>, %D21<imp-def>
	%R44<def> = COPY %R43, %D22<imp-def>
	%R45<def> = COPY %R42, %D21<imp-use,kill>, %D22<imp-use,kill>, %D22<imp-def>
	STRf64 %D22<kill>, %R32, -8; mem:ST4[%scevgep17](tbaa=!2) ST4[%scevgep15](tbaa=!2)
	%R34<def> = LDRf32 %R32, 0; mem:LD4[%lsr.iv1214](tbaa=!2)
	%R34<def,tied1> = FMADDrr_r32 %R34<kill,tied0>, %R27, %R39<kill>, %STATUS<imp-def,dead>
	STRf32 %R34<kill>, %R32, 0; mem:ST4[%lsr.iv1214](tbaa=!2)
	%R37<def> = LDRf32 %R32, 4; mem:LD4[%scevgep16](tbaa=!2)
	%R37<def,tied1> = FMADDrr_r32 %R37<kill,tied0>, %R27, %R40<kill>, %STATUS<imp-def,dead>
	%R34<def,dead> = CMPri_r32 %R33, 8, %STATUS<imp-def>
	STRf32 %R37<kill>, %R32<kill>, 4; mem:ST4[%scevgep16](tbaa=!2)
	%R32<def> = COPY %R35<kill>
	%R34<def> = COPY %R36<kill>
	BCC <BB#7>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#7(0x7c000000 / 0x80000000 = 96.88%) BB#8(0x04000000 / 0x80000000 = 3.12%)

<----------------->
Analyzing block 8
BB#8: derived from LLVM BB %for.end60
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#7
	%R25<def> = ADDrr_r32 %R25<kill>, %IP, %STATUS<imp-def,dead>
	%R26<def> = ADDri_r32 %R26<kill>, 1, %STATUS<imp-def,dead>
	%R27<def,dead> = CMPrr_r32 %R26, %R3, %STATUS<imp-def>
	BCC <BB#6>, 1, %STATUS<imp-use>
    Successors according to CFG: BB#5(0x04000000 / 0x80000000 = 3.12%) BB#6(0x7c000000 / 0x80000000 = 96.88%)

<----------------->
Analyzing block 7
BB#7: derived from LLVM BB %for.body13
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26 %R27 %R32 %R33 %R34
    Predecessors according to CFG: BB#6 BB#7
	%R37<def> = LDRf32 %R34, -8; mem:Volatile LD4[%scevgep8](tbaa=!2)
	%R35<def> = ADDri_r32 %R32, 16, %STATUS<imp-def,dead>
	%R36<def> = ADDri_r32 %R34, 16, %STATUS<imp-def,dead>
	%R38<def> = LDRf32 %R34, -4; mem:Volatile LD4[%scevgep9](tbaa=!2)
	%R33<def> = ADDri_r32 %R33<kill>, 4, %STATUS<imp-def,dead>
	%R39<def> = LDRf32 %R34, 0; mem:Volatile LD4[%lsr.iv5](tbaa=!2)
	%R40<def> = LDRf32 %R34<kill>, 4; mem:Volatile LD4[%scevgep7](tbaa=!2)
	%D21<def> = LDRf64 %R32, -8; mem:LD4[%scevgep17](tbaa=!2) LD4[%scevgep15](tbaa=!2)
	%R34<def> = LDRi32_r32 %FP, -4; mem:LD4[FixedStack2]
	GID %CONFIG<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %R34<kill>
	GIE %CONFIG<imp-def,dead>
	%R43<def,tied1> = FMADDrr_r32 %R43<tied0>, %R27, %R37<kill>, %STATUS<imp-def,dead>, %D21<imp-use,kill>, %D21<imp-def>
	%R42<def,tied1> = FMADDrr_r32 %R42<tied0>, %R27, %R38<kill>, %STATUS<imp-def,dead>, %D21<imp-use,kill>, %D21<imp-def>
	%R44<def> = COPY %R43, %D22<imp-def>
	%R45<def> = COPY %R42, %D21<imp-use,kill>, %D22<imp-use,kill>, %D22<imp-def>
	STRf64 %D22<kill>, %R32, -8; mem:ST4[%scevgep17](tbaa=!2) ST4[%scevgep15](tbaa=!2)
	%R34<def> = LDRf32 %R32, 0; mem:LD4[%lsr.iv1214](tbaa=!2)
	%R34<def,tied1> = FMADDrr_r32 %R34<kill,tied0>, %R27, %R39<kill>, %STATUS<imp-def,dead>
	STRf32 %R34<kill>, %R32, 0; mem:ST4[%lsr.iv1214](tbaa=!2)
	%R37<def> = LDRf32 %R32, 4; mem:LD4[%scevgep16](tbaa=!2)
	%R37<def,tied1> = FMADDrr_r32 %R37<kill,tied0>, %R27, %R40<kill>, %STATUS<imp-def,dead>
	%R34<def,dead> = CMPri_r32 %R33, 8, %STATUS<imp-def>
	STRf32 %R37<kill>, %R32<kill>, 4; mem:ST4[%scevgep16](tbaa=!2)
	%R32<def> = COPY %R35<kill>
	%R34<def> = COPY %R36<kill>
	BCC <BB#7>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#7(0x7c000000 / 0x80000000 = 96.88%) BB#8(0x04000000 / 0x80000000 = 3.12%)

<----------------->
Analyzing block 8
BB#8: derived from LLVM BB %for.end60
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#7
	%R25<def> = ADDrr_r32 %R25<kill>, %IP, %STATUS<imp-def,dead>
	%R26<def> = ADDri_r32 %R26<kill>, 1, %STATUS<imp-def,dead>
	%R27<def,dead> = CMPrr_r32 %R26, %R3, %STATUS<imp-def>
	BCC <BB#6>, 1, %STATUS<imp-use>
    Successors according to CFG: BB#5(0x04000000 / 0x80000000 = 3.12%) BB#6(0x7c000000 / 0x80000000 = 96.88%)

<----------------->
Analyzing block 5
BB#5: derived from LLVM BB %for.cond64.preheader
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#8
	%R25<def> = COPY %R22
	%R26<def> = COPY %R19
    Successors according to CFG: BB#9(?%)

<----------------->
Analyzing block 8
BB#8: derived from LLVM BB %for.end60
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#7
	%R25<def> = ADDrr_r32 %R25<kill>, %IP, %STATUS<imp-def,dead>
	%R26<def> = ADDri_r32 %R26<kill>, 1, %STATUS<imp-def,dead>
	%R27<def,dead> = CMPrr_r32 %R26, %R3, %STATUS<imp-def>
	BCC <BB#6>, 1, %STATUS<imp-use>
    Successors according to CFG: BB#5(0x04000000 / 0x80000000 = 3.12%) BB#6(0x7c000000 / 0x80000000 = 96.88%)

<----------------->
Analyzing block 5
BB#5: derived from LLVM BB %for.cond64.preheader
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#8
	%R25<def> = COPY %R22
	%R26<def> = COPY %R19
    Successors according to CFG: BB#9(?%)

<----------------->
Analyzing block 9
BB#9: derived from LLVM BB %for.body66
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#5 BB#9
	%R27<def> = ADDrr_r32 %R16, %R26, %STATUS<imp-def,dead>
	%R33<def> = LDRf32 %R27<kill>, 0; mem:LD4[%sunkaddr30](tbaa=!2)
	%R27<def> = ADDri_r32 %R25, 4, %STATUS<imp-def,dead>
	%R26<def> = ADDri_r32 %R26<kill>, 4, %STATUS<imp-def,dead>
	%R34<def> = LDRf32 %R25, 0; mem:Volatile LD4[%lsr.iv24](tbaa=!2)
	%R32<def> = LDRi32_r32 %FP, -4; mem:LD4[FixedStack2]
	GID %CONFIG<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %R32<kill>
	GIE %CONFIG<imp-def,dead>
	%R33<def> = FADDrr_r32 %R33<kill>, %R34<kill>, %STATUS<imp-def,dead>
	%R32<def,dead> = CMPri_r32 %R26, 32, %STATUS<imp-def>
	STRf32 %R33<kill>, %R25<kill>, 0; mem:Volatile ST4[%lsr.iv24](tbaa=!2)
	%R25<def> = COPY %R27<kill>
	BCC <BB#9>, 1, %STATUS<imp-use>
    Successors according to CFG: BB#10(0x04000000 / 0x80000000 = 3.12%) BB#9(0x7c000000 / 0x80000000 = 96.88%)

<----------------->
Analyzing block 5
BB#5: derived from LLVM BB %for.cond64.preheader
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#8
	%R25<def> = COPY %R22
	%R26<def> = COPY %R19
    Successors according to CFG: BB#9(?%)

<----------------->
Analyzing block 9
BB#9: derived from LLVM BB %for.body66
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#5 BB#9
	%R27<def> = ADDrr_r32 %R16, %R26, %STATUS<imp-def,dead>
	%R33<def> = LDRf32 %R27<kill>, 0; mem:LD4[%sunkaddr30](tbaa=!2)
	%R27<def> = ADDri_r32 %R25, 4, %STATUS<imp-def,dead>
	%R26<def> = ADDri_r32 %R26<kill>, 4, %STATUS<imp-def,dead>
	%R34<def> = LDRf32 %R25, 0; mem:Volatile LD4[%lsr.iv24](tbaa=!2)
	%R32<def> = LDRi32_r32 %FP, -4; mem:LD4[FixedStack2]
	GID %CONFIG<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %R32<kill>
	GIE %CONFIG<imp-def,dead>
	%R33<def> = FADDrr_r32 %R33<kill>, %R34<kill>, %STATUS<imp-def,dead>
	%R32<def,dead> = CMPri_r32 %R26, 32, %STATUS<imp-def>
	STRf32 %R33<kill>, %R25<kill>, 0; mem:Volatile ST4[%lsr.iv24](tbaa=!2)
	%R25<def> = COPY %R27<kill>
	BCC <BB#9>, 1, %STATUS<imp-use>
    Successors according to CFG: BB#10(0x04000000 / 0x80000000 = 3.12%) BB#9(0x7c000000 / 0x80000000 = 96.88%)

<----------------->
Analyzing block 10
BB#10: derived from LLVM BB %for.end75
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#9
	%R22<def> = ADDri_r32 %R22<kill>, 32, %STATUS<imp-def,dead>
	%R23<def> = ADDri_r32 %R23<kill>, 32, %STATUS<imp-def,dead>
	%R24<def> = ADDri_r32 %R24<kill>, 8, %STATUS<imp-def,dead>
	%R25<def,dead> = CMPrr_r32 %R24, %R3, %STATUS<imp-def>
	BCC <BB#4>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#4(0x7c000000 / 0x80000000 = 96.88%) BB#11(0x04000000 / 0x80000000 = 3.12%)

<----------------->
Analyzing block 9
BB#9: derived from LLVM BB %for.body66
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#5 BB#9
	%R27<def> = ADDrr_r32 %R16, %R26, %STATUS<imp-def,dead>
	%R33<def> = LDRf32 %R27<kill>, 0; mem:LD4[%sunkaddr30](tbaa=!2)
	%R27<def> = ADDri_r32 %R25, 4, %STATUS<imp-def,dead>
	%R26<def> = ADDri_r32 %R26<kill>, 4, %STATUS<imp-def,dead>
	%R34<def> = LDRf32 %R25, 0; mem:Volatile LD4[%lsr.iv24](tbaa=!2)
	%R32<def> = LDRi32_r32 %FP, -4; mem:LD4[FixedStack2]
	GID %CONFIG<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %R32<kill>
	GIE %CONFIG<imp-def,dead>
	%R33<def> = FADDrr_r32 %R33<kill>, %R34<kill>, %STATUS<imp-def,dead>
	%R32<def,dead> = CMPri_r32 %R26, 32, %STATUS<imp-def>
	STRf32 %R33<kill>, %R25<kill>, 0; mem:Volatile ST4[%lsr.iv24](tbaa=!2)
	%R25<def> = COPY %R27<kill>
	BCC <BB#9>, 1, %STATUS<imp-use>
    Successors according to CFG: BB#10(0x04000000 / 0x80000000 = 3.12%) BB#9(0x7c000000 / 0x80000000 = 96.88%)

<----------------->
Analyzing block 10
BB#10: derived from LLVM BB %for.end75
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#9
	%R22<def> = ADDri_r32 %R22<kill>, 32, %STATUS<imp-def,dead>
	%R23<def> = ADDri_r32 %R23<kill>, 32, %STATUS<imp-def,dead>
	%R24<def> = ADDri_r32 %R24<kill>, 8, %STATUS<imp-def,dead>
	%R25<def,dead> = CMPrr_r32 %R24, %R3, %STATUS<imp-def>
	BCC <BB#4>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#4(0x7c000000 / 0x80000000 = 96.88%) BB#11(0x04000000 / 0x80000000 = 3.12%)

<----------------->
Analyzing block 11
BB#11: derived from LLVM BB %for.end78
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20
    Predecessors according to CFG: BB#10
	%R2<def> = ADDrr_r32 %R2<kill>, %IP, %STATUS<imp-def,dead>
	%R20<def> = ADDri_r32 %R20<kill>, 1, %STATUS<imp-def,dead>
	%R21<def,dead> = CMPrr_r32 %R20, %R3, %STATUS<imp-def>
	BCC <BB#3>, 1, %STATUS<imp-use>
    Successors according to CFG: BB#12(0x04000000 / 0x80000000 = 3.12%) BB#3(0x7c000000 / 0x80000000 = 96.88%)

<----------------->
Analyzing block 10
BB#10: derived from LLVM BB %for.end75
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#9
	%R22<def> = ADDri_r32 %R22<kill>, 32, %STATUS<imp-def,dead>
	%R23<def> = ADDri_r32 %R23<kill>, 32, %STATUS<imp-def,dead>
	%R24<def> = ADDri_r32 %R24<kill>, 8, %STATUS<imp-def,dead>
	%R25<def,dead> = CMPrr_r32 %R24, %R3, %STATUS<imp-def>
	BCC <BB#4>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#4(0x7c000000 / 0x80000000 = 96.88%) BB#11(0x04000000 / 0x80000000 = 3.12%)

<----------------->
Analyzing block 11
BB#11: derived from LLVM BB %for.end78
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20
    Predecessors according to CFG: BB#10
	%R2<def> = ADDrr_r32 %R2<kill>, %IP, %STATUS<imp-def,dead>
	%R20<def> = ADDri_r32 %R20<kill>, 1, %STATUS<imp-def,dead>
	%R21<def,dead> = CMPrr_r32 %R20, %R3, %STATUS<imp-def>
	BCC <BB#3>, 1, %STATUS<imp-use>
    Successors according to CFG: BB#12(0x04000000 / 0x80000000 = 3.12%) BB#3(0x7c000000 / 0x80000000 = 96.88%)

<----------------->
Analyzing block 12
BB#12: derived from LLVM BB %for.end81
    Predecessors according to CFG: BB#1 BB#11
	%R0<def> = LDRi32_r32 %FP, -44; mem:LD4[FixedStack1]
	GID
	%CONFIG<def> = MOVTS32_core %R0<kill>
	GIE %CONFIG<imp-use,kill>
	%LR<def> = LDRi64 %SP, 48; flags: FrameSetup
	%SP<def> = ADDri_r32 %SP, 48, %STATUS<imp-def>
	RTS

<----------------->
Analyzing block 11
BB#11: derived from LLVM BB %for.end78
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20
    Predecessors according to CFG: BB#10
	%R2<def> = ADDrr_r32 %R2<kill>, %IP, %STATUS<imp-def,dead>
	%R20<def> = ADDri_r32 %R20<kill>, 1, %STATUS<imp-def,dead>
	%R21<def,dead> = CMPrr_r32 %R20, %R3, %STATUS<imp-def>
	BCC <BB#3>, 1, %STATUS<imp-use>
    Successors according to CFG: BB#12(0x04000000 / 0x80000000 = 3.12%) BB#3(0x7c000000 / 0x80000000 = 96.88%)

<----------------->
Analyzing block 0
BB#0: 
    Live Ins: %R0 %R1 %R2 %R3
	%SP<def,tied2> = STRi64_pmd %LR, %SP<tied0>, -48; flags: FrameSetup
	%FP<def> = ADDri_r32 %SP, 48, %STATUS<imp-def>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	GID %CONFIG<imp-def>
	%R19<def> = MOVFS32_core %CONFIG, %D9<imp-def>
	STRi32_r32 %R19, %FP, -44; mem:ST4[FixedStack1]
	%IP<def> = MOVi32ri 65535
	%IP<def,tied1> = MOVTi32ri %IP<kill,tied0>, 65521
	%R18<def> = ANDrr_r32 %R19, %IP<kill>, %STATUS<imp-def>, %D9<imp-use,kill>, %D9<imp-def>
	%R19<def,tied1> = MOVTi32ri %R19<tied0>, 72, %D9<imp-use,kill>, %D9<imp-def>
	STRi64 %D9<kill>, %FP, -8; mem:ST4[FixedStack3] ST4[FixedStack2]
	GIE %CONFIG<imp-use,kill>
    Successors according to CFG: BB#1(?%)

<----------------->
Analyzing block 1
BB#1: derived from LLVM BB %entry
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#0
	%IP<def,dead> = CMPri_r32 %R3, 1, %STATUS<imp-def>
	BCC <BB#12>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#2(0x50000000 / 0x80000000 = 62.50%) BB#12(0x30000000 / 0x80000000 = 37.50%)

<----------------->
Analyzing block 2
BB#2: derived from LLVM BB %for.body3.lr.ph.preheader
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#1
	%IP<def> = LSL32ri %R3, 2, %STATUS<imp-def,dead>
	%R1<def> = ADDri_r32 %R1<kill>, 8, %STATUS<imp-def,dead>
	%R16<def> = MOViPTR %FP, -40
	%R17<def> = ADDri_r32 %R16, 8, %STATUS<imp-def,dead>
	%R19<def> = MOVi32ri 0, %D9<imp-def>
	%R20<def> = COPY %R19
    Successors according to CFG: BB#3(?%)

<----------------->
Analyzing block 3
BB#3: derived from LLVM BB %for.body3.lr.ph
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20
    Predecessors according to CFG: BB#2 BB#11
	%R21<def> = LDRi32_r32 %FP, -8; mem:LD4[FixedStack3]
	GID %CONFIG<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %R21<kill>
	GIE %CONFIG<imp-def,dead>
	%R21<def> = IMULrr_r32 %R20, %R3, %STATUS<imp-def,dead>
	%R21<def> = LSL32ri %R21<kill>, 2, %STATUS<imp-def,dead>
	%R21<def> = ADDrr_r32 %R0, %R21<kill>, %STATUS<imp-def,dead>
	%R22<def> = COPY %R2
	%R23<def> = COPY %R1
	%R24<def> = COPY %R19
    Successors according to CFG: BB#4(?%)

<----------------->
Analyzing block 4
BB#4: derived from LLVM BB %for.body9.preheader
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#3 BB#10
	%R18<def> = COPY %R19, %D9<imp-use,kill>, %D9<imp-def>
	STRi64 %D9, %FP, -16; mem:ST8[%1+24]
	STRi64 %D9, %FP, -24; mem:ST8[%1+16]
	STRi64 %D9, %FP, -32; mem:ST8[%1+8]
	STRi64 %D9, %FP, -40; mem:ST8[%1]
	%R25<def> = COPY %R23
	%R26<def> = COPY %R19
    Successors according to CFG: BB#6(?%)

<----------------->
Analyzing block 6
BB#6: derived from LLVM BB %for.body9
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#4 BB#8
	%R27<def> = LSL32ri %R26, 2, %STATUS<imp-def,dead>
	%R27<def> = ADDrr_r32 %R21, %R27<kill>, %STATUS<imp-def,dead>
	%R27<def> = LDRf32 %R27<kill>, 0; mem:Volatile LD4[%add.ptr10](tbaa=!2)
	%R32<def> = COPY %R17
	%R34<def> = COPY %R25
	%R33<def> = COPY %R19
    Successors according to CFG: BB#7(?%)

<----------------->
Analyzing block 7
BB#7: derived from LLVM BB %for.body13
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26 %R27 %R32 %R33 %R34
    Predecessors according to CFG: BB#6 BB#7
	%R37<def> = LDRf32 %R34, -8; mem:Volatile LD4[%scevgep8](tbaa=!2)
	%R35<def> = ADDri_r32 %R32, 16, %STATUS<imp-def,dead>
	%R36<def> = ADDri_r32 %R34, 16, %STATUS<imp-def,dead>
	%R38<def> = LDRf32 %R34, -4; mem:Volatile LD4[%scevgep9](tbaa=!2)
	%R33<def> = ADDri_r32 %R33<kill>, 4, %STATUS<imp-def,dead>
	%R39<def> = LDRf32 %R34, 0; mem:Volatile LD4[%lsr.iv5](tbaa=!2)
	%R40<def> = LDRf32 %R34<kill>, 4; mem:Volatile LD4[%scevgep7](tbaa=!2)
	%D21<def> = LDRf64 %R32, -8; mem:LD4[%scevgep17](tbaa=!2) LD4[%scevgep15](tbaa=!2)
	%R34<def> = LDRi32_r32 %FP, -4; mem:LD4[FixedStack2]
	GID %CONFIG<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %R34<kill>
	GIE %CONFIG<imp-def,dead>
	%R43<def,tied1> = FMADDrr_r32 %R43<tied0>, %R27, %R37<kill>, %STATUS<imp-def,dead>, %D21<imp-use,kill>, %D21<imp-def>
	%R42<def,tied1> = FMADDrr_r32 %R42<tied0>, %R27, %R38<kill>, %STATUS<imp-def,dead>, %D21<imp-use,kill>, %D21<imp-def>
	%R44<def> = COPY %R43, %D22<imp-def>
	%R45<def> = COPY %R42, %D21<imp-use,kill>, %D22<imp-use,kill>, %D22<imp-def>
	STRf64 %D22<kill>, %R32, -8; mem:ST4[%scevgep17](tbaa=!2) ST4[%scevgep15](tbaa=!2)
	%R34<def> = LDRf32 %R32, 0; mem:LD4[%lsr.iv1214](tbaa=!2)
	%R34<def,tied1> = FMADDrr_r32 %R34<kill,tied0>, %R27, %R39<kill>, %STATUS<imp-def,dead>
	STRf32 %R34<kill>, %R32, 0; mem:ST4[%lsr.iv1214](tbaa=!2)
	%R37<def> = LDRf32 %R32, 4; mem:LD4[%scevgep16](tbaa=!2)
	%R37<def,tied1> = FMADDrr_r32 %R37<kill,tied0>, %R27, %R40<kill>, %STATUS<imp-def,dead>
	%R34<def,dead> = CMPri_r32 %R33, 8, %STATUS<imp-def>
	STRf32 %R37<kill>, %R32<kill>, 4; mem:ST4[%scevgep16](tbaa=!2)
	%R32<def> = COPY %R35<kill>
	%R34<def> = COPY %R36<kill>
	BCC <BB#7>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#7(0x7c000000 / 0x80000000 = 96.88%) BB#8(0x04000000 / 0x80000000 = 3.12%)

<----------------->
Analyzing block 8
BB#8: derived from LLVM BB %for.end60
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#7
	%R25<def> = ADDrr_r32 %R25<kill>, %IP, %STATUS<imp-def,dead>
	%R26<def> = ADDri_r32 %R26<kill>, 1, %STATUS<imp-def,dead>
	%R27<def,dead> = CMPrr_r32 %R26, %R3, %STATUS<imp-def>
	BCC <BB#6>, 1, %STATUS<imp-use>
    Successors according to CFG: BB#5(0x04000000 / 0x80000000 = 3.12%) BB#6(0x7c000000 / 0x80000000 = 96.88%)

<----------------->
Analyzing block 5
BB#5: derived from LLVM BB %for.cond64.preheader
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#8
	%R25<def> = COPY %R22
	%R26<def> = COPY %R19
    Successors according to CFG: BB#9(?%)

<----------------->
Analyzing block 9
BB#9: derived from LLVM BB %for.body66
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#5 BB#9
	%R27<def> = ADDrr_r32 %R16, %R26, %STATUS<imp-def,dead>
	%R33<def> = LDRf32 %R27<kill>, 0; mem:LD4[%sunkaddr30](tbaa=!2)
	%R27<def> = ADDri_r32 %R25, 4, %STATUS<imp-def,dead>
	%R26<def> = ADDri_r32 %R26<kill>, 4, %STATUS<imp-def,dead>
	%R34<def> = LDRf32 %R25, 0; mem:Volatile LD4[%lsr.iv24](tbaa=!2)
	%R32<def> = LDRi32_r32 %FP, -4; mem:LD4[FixedStack2]
	GID %CONFIG<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %R32<kill>
	GIE %CONFIG<imp-def,dead>
	%R33<def> = FADDrr_r32 %R33<kill>, %R34<kill>, %STATUS<imp-def,dead>
	%R32<def,dead> = CMPri_r32 %R26, 32, %STATUS<imp-def>
	STRf32 %R33<kill>, %R25<kill>, 0; mem:Volatile ST4[%lsr.iv24](tbaa=!2)
	%R25<def> = COPY %R27<kill>
	BCC <BB#9>, 1, %STATUS<imp-use>
    Successors according to CFG: BB#10(0x04000000 / 0x80000000 = 3.12%) BB#9(0x7c000000 / 0x80000000 = 96.88%)

<----------------->
Analyzing block 10
BB#10: derived from LLVM BB %for.end75
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#9
	%R22<def> = ADDri_r32 %R22<kill>, 32, %STATUS<imp-def,dead>
	%R23<def> = ADDri_r32 %R23<kill>, 32, %STATUS<imp-def,dead>
	%R24<def> = ADDri_r32 %R24<kill>, 8, %STATUS<imp-def,dead>
	%R25<def,dead> = CMPrr_r32 %R24, %R3, %STATUS<imp-def>
	BCC <BB#4>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#4(0x7c000000 / 0x80000000 = 96.88%) BB#11(0x04000000 / 0x80000000 = 3.12%)

<----------------->
Analyzing block 11
BB#11: derived from LLVM BB %for.end78
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20
    Predecessors according to CFG: BB#10
	%R2<def> = ADDrr_r32 %R2<kill>, %IP, %STATUS<imp-def,dead>
	%R20<def> = ADDri_r32 %R20<kill>, 1, %STATUS<imp-def,dead>
	%R21<def,dead> = CMPrr_r32 %R20, %R3, %STATUS<imp-def>
	BCC <BB#3>, 1, %STATUS<imp-use>
    Successors according to CFG: BB#12(0x04000000 / 0x80000000 = 3.12%) BB#3(0x7c000000 / 0x80000000 = 96.88%)

<----------------->
Analyzing block 12
BB#12: derived from LLVM BB %for.end81
    Predecessors according to CFG: BB#1 BB#11
	%R0<def> = LDRi32_r32 %FP, -44; mem:LD4[FixedStack1]
	GID
	%CONFIG<def> = MOVTS32_core %R0<kill>
	GIE %CONFIG<imp-use,kill>
	%LR<def> = LDRi64 %SP, 48; flags: FrameSetup
	%SP<def> = ADDri_r32 %SP, 48, %STATUS<imp-def>
	RTS

<----------------->
Analyzing block 2
BB#2: derived from LLVM BB %for.body3.lr.ph.preheader
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#1
	%IP<def> = LSL32ri %R3, 2, %STATUS<imp-def,dead>
	%R1<def> = ADDri_r32 %R1<kill>, 8, %STATUS<imp-def,dead>
	%R16<def> = MOViPTR %FP, -40
	%R17<def> = ADDri_r32 %R16, 8, %STATUS<imp-def,dead>
	%R19<def> = MOVi32ri 0, %D9<imp-def>
	%R20<def> = COPY %R19
    Successors according to CFG: BB#3(?%)

<----------------->
Analyzing block 11
BB#11: derived from LLVM BB %for.end78
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20
    Predecessors according to CFG: BB#10
	%R2<def> = ADDrr_r32 %R2<kill>, %IP, %STATUS<imp-def,dead>
	%R20<def> = ADDri_r32 %R20<kill>, 1, %STATUS<imp-def,dead>
	%R21<def,dead> = CMPrr_r32 %R20, %R3, %STATUS<imp-def>
	BCC <BB#3>, 1, %STATUS<imp-use>
    Successors according to CFG: BB#12(0x04000000 / 0x80000000 = 3.12%) BB#3(0x7c000000 / 0x80000000 = 96.88%)

<----------------->
Removing branches out of BB#11
# Machine code for function matmac: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=32, align=8, at location [SP-40]
  fi#1: size=4, align=4, at location [SP-44]
  fi#2: size=4, align=4, at location [SP-4]
  fi#3: size=4, align=8, at location [SP-8]
Function Live Ins: %R0, %R1, %R2, %R3

BB#0: 
    Live Ins: %R0 %R1 %R2 %R3
	%SP<def,tied2> = STRi64_pmd %LR, %SP<tied0>, -48; flags: FrameSetup
	%FP<def> = ADDri_r32 %SP, 48, %STATUS<imp-def>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	GID %CONFIG<imp-def>
	%R19<def> = MOVFS32_core %CONFIG, %D9<imp-def>
	STRi32_r32 %R19, %FP, -44; mem:ST4[FixedStack1]
	%IP<def> = MOVi32ri 65535
	%IP<def,tied1> = MOVTi32ri %IP<kill,tied0>, 65521
	%R18<def> = ANDrr_r32 %R19, %IP<kill>, %STATUS<imp-def>, %D9<imp-use,kill>, %D9<imp-def>
	%R19<def,tied1> = MOVTi32ri %R19<tied0>, 72, %D9<imp-use,kill>, %D9<imp-def>
	STRi64 %D9<kill>, %FP, -8; mem:ST4[FixedStack3] ST4[FixedStack2]
	GIE %CONFIG<imp-use,kill>
    Successors according to CFG: BB#1(?%)

BB#1: derived from LLVM BB %entry
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#0
	%IP<def,dead> = CMPri_r32 %R3, 1, %STATUS<imp-def>
	BCC <BB#12>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#2(0x50000000 / 0x80000000 = 62.50%) BB#12(0x30000000 / 0x80000000 = 37.50%)

BB#2: derived from LLVM BB %for.body3.lr.ph.preheader
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#1
	%IP<def> = LSL32ri %R3, 2, %STATUS<imp-def,dead>
	%R1<def> = ADDri_r32 %R1<kill>, 8, %STATUS<imp-def,dead>
	%R16<def> = MOViPTR %FP, -40
	%R17<def> = ADDri_r32 %R16, 8, %STATUS<imp-def,dead>
	%R19<def> = MOVi32ri 0, %D9<imp-def>
	%R20<def> = COPY %R19
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %for.body3.lr.ph
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20
    Predecessors according to CFG: BB#2 BB#11
	%R21<def> = LDRi32_r32 %FP, -8; mem:LD4[FixedStack3]
	GID %CONFIG<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %R21<kill>
	GIE %CONFIG<imp-def,dead>
	%R21<def> = IMULrr_r32 %R20, %R3, %STATUS<imp-def,dead>
	%R21<def> = LSL32ri %R21<kill>, 2, %STATUS<imp-def,dead>
	%R21<def> = ADDrr_r32 %R0, %R21<kill>, %STATUS<imp-def,dead>
	%R22<def> = COPY %R2
	%R23<def> = COPY %R1
	%R24<def> = COPY %R19
    Successors according to CFG: BB#4(?%)

BB#4: derived from LLVM BB %for.body9.preheader
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#3 BB#10
	%R18<def> = COPY %R19, %D9<imp-use,kill>, %D9<imp-def>
	STRi64 %D9, %FP, -16; mem:ST8[%1+24]
	STRi64 %D9, %FP, -24; mem:ST8[%1+16]
	STRi64 %D9, %FP, -32; mem:ST8[%1+8]
	STRi64 %D9, %FP, -40; mem:ST8[%1]
	%R25<def> = COPY %R23
	%R26<def> = COPY %R19
    Successors according to CFG: BB#6(?%)

BB#6: derived from LLVM BB %for.body9
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#4 BB#8
	%R27<def> = LSL32ri %R26, 2, %STATUS<imp-def,dead>
	%R27<def> = ADDrr_r32 %R21, %R27<kill>, %STATUS<imp-def,dead>
	%R27<def> = LDRf32 %R27<kill>, 0; mem:Volatile LD4[%add.ptr10](tbaa=!2)
	%R32<def> = COPY %R17
	%R34<def> = COPY %R25
	%R33<def> = COPY %R19
    Successors according to CFG: BB#7(?%)

BB#7: derived from LLVM BB %for.body13
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26 %R27 %R32 %R33 %R34
    Predecessors according to CFG: BB#6 BB#7
	%R37<def> = LDRf32 %R34, -8; mem:Volatile LD4[%scevgep8](tbaa=!2)
	%R35<def> = ADDri_r32 %R32, 16, %STATUS<imp-def,dead>
	%R36<def> = ADDri_r32 %R34, 16, %STATUS<imp-def,dead>
	%R38<def> = LDRf32 %R34, -4; mem:Volatile LD4[%scevgep9](tbaa=!2)
	%R33<def> = ADDri_r32 %R33<kill>, 4, %STATUS<imp-def,dead>
	%R39<def> = LDRf32 %R34, 0; mem:Volatile LD4[%lsr.iv5](tbaa=!2)
	%R40<def> = LDRf32 %R34<kill>, 4; mem:Volatile LD4[%scevgep7](tbaa=!2)
	%D21<def> = LDRf64 %R32, -8; mem:LD4[%scevgep17](tbaa=!2) LD4[%scevgep15](tbaa=!2)
	%R34<def> = LDRi32_r32 %FP, -4; mem:LD4[FixedStack2]
	GID %CONFIG<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %R34<kill>
	GIE %CONFIG<imp-def,dead>
	%R43<def,tied1> = FMADDrr_r32 %R43<tied0>, %R27, %R37<kill>, %STATUS<imp-def,dead>, %D21<imp-use,kill>, %D21<imp-def>
	%R42<def,tied1> = FMADDrr_r32 %R42<tied0>, %R27, %R38<kill>, %STATUS<imp-def,dead>, %D21<imp-use,kill>, %D21<imp-def>
	%R44<def> = COPY %R43, %D22<imp-def>
	%R45<def> = COPY %R42, %D21<imp-use,kill>, %D22<imp-use,kill>, %D22<imp-def>
	STRf64 %D22<kill>, %R32, -8; mem:ST4[%scevgep17](tbaa=!2) ST4[%scevgep15](tbaa=!2)
	%R34<def> = LDRf32 %R32, 0; mem:LD4[%lsr.iv1214](tbaa=!2)
	%R34<def,tied1> = FMADDrr_r32 %R34<kill,tied0>, %R27, %R39<kill>, %STATUS<imp-def,dead>
	STRf32 %R34<kill>, %R32, 0; mem:ST4[%lsr.iv1214](tbaa=!2)
	%R37<def> = LDRf32 %R32, 4; mem:LD4[%scevgep16](tbaa=!2)
	%R37<def,tied1> = FMADDrr_r32 %R37<kill,tied0>, %R27, %R40<kill>, %STATUS<imp-def,dead>
	%R34<def,dead> = CMPri_r32 %R33, 8, %STATUS<imp-def>
	STRf32 %R37<kill>, %R32<kill>, 4; mem:ST4[%scevgep16](tbaa=!2)
	%R32<def> = COPY %R35<kill>
	%R34<def> = COPY %R36<kill>
	BCC <BB#7>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#7(0x7c000000 / 0x80000000 = 96.88%) BB#8(0x04000000 / 0x80000000 = 3.12%)

BB#8: derived from LLVM BB %for.end60
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#7
	%R25<def> = ADDrr_r32 %R25<kill>, %IP, %STATUS<imp-def,dead>
	%R26<def> = ADDri_r32 %R26<kill>, 1, %STATUS<imp-def,dead>
	%R27<def,dead> = CMPrr_r32 %R26, %R3, %STATUS<imp-def>
	BCC <BB#6>, 1, %STATUS<imp-use>
    Successors according to CFG: BB#5(0x04000000 / 0x80000000 = 3.12%) BB#6(0x7c000000 / 0x80000000 = 96.88%)

BB#5: derived from LLVM BB %for.cond64.preheader
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#8
	%R25<def> = COPY %R22
	%R26<def> = COPY %R19
    Successors according to CFG: BB#9(?%)

BB#9: derived from LLVM BB %for.body66
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#5 BB#9
	%R27<def> = ADDrr_r32 %R16, %R26, %STATUS<imp-def,dead>
	%R33<def> = LDRf32 %R27<kill>, 0; mem:LD4[%sunkaddr30](tbaa=!2)
	%R27<def> = ADDri_r32 %R25, 4, %STATUS<imp-def,dead>
	%R26<def> = ADDri_r32 %R26<kill>, 4, %STATUS<imp-def,dead>
	%R34<def> = LDRf32 %R25, 0; mem:Volatile LD4[%lsr.iv24](tbaa=!2)
	%R32<def> = LDRi32_r32 %FP, -4; mem:LD4[FixedStack2]
	GID %CONFIG<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %R32<kill>
	GIE %CONFIG<imp-def,dead>
	%R33<def> = FADDrr_r32 %R33<kill>, %R34<kill>, %STATUS<imp-def,dead>
	%R32<def,dead> = CMPri_r32 %R26, 32, %STATUS<imp-def>
	STRf32 %R33<kill>, %R25<kill>, 0; mem:Volatile ST4[%lsr.iv24](tbaa=!2)
	%R25<def> = COPY %R27<kill>
	BCC <BB#9>, 1, %STATUS<imp-use>
    Successors according to CFG: BB#10(0x04000000 / 0x80000000 = 3.12%) BB#9(0x7c000000 / 0x80000000 = 96.88%)

BB#10: derived from LLVM BB %for.end75
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#9
	%R22<def> = ADDri_r32 %R22<kill>, 32, %STATUS<imp-def,dead>
	%R23<def> = ADDri_r32 %R23<kill>, 32, %STATUS<imp-def,dead>
	%R24<def> = ADDri_r32 %R24<kill>, 8, %STATUS<imp-def,dead>
	%R25<def,dead> = CMPrr_r32 %R24, %R3, %STATUS<imp-def>
	BCC <BB#4>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#4(0x7c000000 / 0x80000000 = 96.88%) BB#11(0x04000000 / 0x80000000 = 3.12%)

BB#11: derived from LLVM BB %for.end78
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20
    Predecessors according to CFG: BB#10
	%R2<def> = ADDrr_r32 %R2<kill>, %IP, %STATUS<imp-def,dead>
	%R20<def> = ADDri_r32 %R20<kill>, 1, %STATUS<imp-def,dead>
	%R21<def,dead> = CMPrr_r32 %R20, %R3, %STATUS<imp-def>
    Successors according to CFG: BB#12(0x04000000 / 0x80000000 = 3.12%) BB#3(0x7c000000 / 0x80000000 = 96.88%)

BB#12: derived from LLVM BB %for.end81
    Predecessors according to CFG: BB#1 BB#11
	%R0<def> = LDRi32_r32 %FP, -44; mem:LD4[FixedStack1]
	GID
	%CONFIG<def> = MOVTS32_core %R0<kill>
	GIE %CONFIG<imp-use,kill>
	%LR<def> = LDRi64 %SP, 48; flags: FrameSetup
	%SP<def> = ADDri_r32 %SP, 48, %STATUS<imp-def>
	RTS

# End machine code for function matmac.


<----------------->
Inserting branch into BB#11
# Machine code for function matmac: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=32, align=8, at location [SP-40]
  fi#1: size=4, align=4, at location [SP-44]
  fi#2: size=4, align=4, at location [SP-4]
  fi#3: size=4, align=8, at location [SP-8]
Function Live Ins: %R0, %R1, %R2, %R3

BB#0: 
    Live Ins: %R0 %R1 %R2 %R3
	%SP<def,tied2> = STRi64_pmd %LR, %SP<tied0>, -48; flags: FrameSetup
	%FP<def> = ADDri_r32 %SP, 48, %STATUS<imp-def>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	GID %CONFIG<imp-def>
	%R19<def> = MOVFS32_core %CONFIG, %D9<imp-def>
	STRi32_r32 %R19, %FP, -44; mem:ST4[FixedStack1]
	%IP<def> = MOVi32ri 65535
	%IP<def,tied1> = MOVTi32ri %IP<kill,tied0>, 65521
	%R18<def> = ANDrr_r32 %R19, %IP<kill>, %STATUS<imp-def>, %D9<imp-use,kill>, %D9<imp-def>
	%R19<def,tied1> = MOVTi32ri %R19<tied0>, 72, %D9<imp-use,kill>, %D9<imp-def>
	STRi64 %D9<kill>, %FP, -8; mem:ST4[FixedStack3] ST4[FixedStack2]
	GIE %CONFIG<imp-use,kill>
    Successors according to CFG: BB#1(?%)

BB#1: derived from LLVM BB %entry
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#0
	%IP<def,dead> = CMPri_r32 %R3, 1, %STATUS<imp-def>
	BCC <BB#12>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#2(0x50000000 / 0x80000000 = 62.50%) BB#12(0x30000000 / 0x80000000 = 37.50%)

BB#2: derived from LLVM BB %for.body3.lr.ph.preheader
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#1
	%IP<def> = LSL32ri %R3, 2, %STATUS<imp-def,dead>
	%R1<def> = ADDri_r32 %R1<kill>, 8, %STATUS<imp-def,dead>
	%R16<def> = MOViPTR %FP, -40
	%R17<def> = ADDri_r32 %R16, 8, %STATUS<imp-def,dead>
	%R19<def> = MOVi32ri 0, %D9<imp-def>
	%R20<def> = COPY %R19
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %for.body3.lr.ph
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20
    Predecessors according to CFG: BB#2 BB#11
	%R21<def> = LDRi32_r32 %FP, -8; mem:LD4[FixedStack3]
	GID %CONFIG<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %R21<kill>
	GIE %CONFIG<imp-def,dead>
	%R21<def> = IMULrr_r32 %R20, %R3, %STATUS<imp-def,dead>
	%R21<def> = LSL32ri %R21<kill>, 2, %STATUS<imp-def,dead>
	%R21<def> = ADDrr_r32 %R0, %R21<kill>, %STATUS<imp-def,dead>
	%R22<def> = COPY %R2
	%R23<def> = COPY %R1
	%R24<def> = COPY %R19
    Successors according to CFG: BB#4(?%)

BB#4: derived from LLVM BB %for.body9.preheader
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#3 BB#10
	%R18<def> = COPY %R19, %D9<imp-use,kill>, %D9<imp-def>
	STRi64 %D9, %FP, -16; mem:ST8[%1+24]
	STRi64 %D9, %FP, -24; mem:ST8[%1+16]
	STRi64 %D9, %FP, -32; mem:ST8[%1+8]
	STRi64 %D9, %FP, -40; mem:ST8[%1]
	%R25<def> = COPY %R23
	%R26<def> = COPY %R19
    Successors according to CFG: BB#6(?%)

BB#6: derived from LLVM BB %for.body9
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#4 BB#8
	%R27<def> = LSL32ri %R26, 2, %STATUS<imp-def,dead>
	%R27<def> = ADDrr_r32 %R21, %R27<kill>, %STATUS<imp-def,dead>
	%R27<def> = LDRf32 %R27<kill>, 0; mem:Volatile LD4[%add.ptr10](tbaa=!2)
	%R32<def> = COPY %R17
	%R34<def> = COPY %R25
	%R33<def> = COPY %R19
    Successors according to CFG: BB#7(?%)

BB#7: derived from LLVM BB %for.body13
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26 %R27 %R32 %R33 %R34
    Predecessors according to CFG: BB#6 BB#7
	%R37<def> = LDRf32 %R34, -8; mem:Volatile LD4[%scevgep8](tbaa=!2)
	%R35<def> = ADDri_r32 %R32, 16, %STATUS<imp-def,dead>
	%R36<def> = ADDri_r32 %R34, 16, %STATUS<imp-def,dead>
	%R38<def> = LDRf32 %R34, -4; mem:Volatile LD4[%scevgep9](tbaa=!2)
	%R33<def> = ADDri_r32 %R33<kill>, 4, %STATUS<imp-def,dead>
	%R39<def> = LDRf32 %R34, 0; mem:Volatile LD4[%lsr.iv5](tbaa=!2)
	%R40<def> = LDRf32 %R34<kill>, 4; mem:Volatile LD4[%scevgep7](tbaa=!2)
	%D21<def> = LDRf64 %R32, -8; mem:LD4[%scevgep17](tbaa=!2) LD4[%scevgep15](tbaa=!2)
	%R34<def> = LDRi32_r32 %FP, -4; mem:LD4[FixedStack2]
	GID %CONFIG<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %R34<kill>
	GIE %CONFIG<imp-def,dead>
	%R43<def,tied1> = FMADDrr_r32 %R43<tied0>, %R27, %R37<kill>, %STATUS<imp-def,dead>, %D21<imp-use,kill>, %D21<imp-def>
	%R42<def,tied1> = FMADDrr_r32 %R42<tied0>, %R27, %R38<kill>, %STATUS<imp-def,dead>, %D21<imp-use,kill>, %D21<imp-def>
	%R44<def> = COPY %R43, %D22<imp-def>
	%R45<def> = COPY %R42, %D21<imp-use,kill>, %D22<imp-use,kill>, %D22<imp-def>
	STRf64 %D22<kill>, %R32, -8; mem:ST4[%scevgep17](tbaa=!2) ST4[%scevgep15](tbaa=!2)
	%R34<def> = LDRf32 %R32, 0; mem:LD4[%lsr.iv1214](tbaa=!2)
	%R34<def,tied1> = FMADDrr_r32 %R34<kill,tied0>, %R27, %R39<kill>, %STATUS<imp-def,dead>
	STRf32 %R34<kill>, %R32, 0; mem:ST4[%lsr.iv1214](tbaa=!2)
	%R37<def> = LDRf32 %R32, 4; mem:LD4[%scevgep16](tbaa=!2)
	%R37<def,tied1> = FMADDrr_r32 %R37<kill,tied0>, %R27, %R40<kill>, %STATUS<imp-def,dead>
	%R34<def,dead> = CMPri_r32 %R33, 8, %STATUS<imp-def>
	STRf32 %R37<kill>, %R32<kill>, 4; mem:ST4[%scevgep16](tbaa=!2)
	%R32<def> = COPY %R35<kill>
	%R34<def> = COPY %R36<kill>
	BCC <BB#7>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#7(0x7c000000 / 0x80000000 = 96.88%) BB#8(0x04000000 / 0x80000000 = 3.12%)

BB#8: derived from LLVM BB %for.end60
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#7
	%R25<def> = ADDrr_r32 %R25<kill>, %IP, %STATUS<imp-def,dead>
	%R26<def> = ADDri_r32 %R26<kill>, 1, %STATUS<imp-def,dead>
	%R27<def,dead> = CMPrr_r32 %R26, %R3, %STATUS<imp-def>
	BCC <BB#6>, 1, %STATUS<imp-use>
    Successors according to CFG: BB#5(0x04000000 / 0x80000000 = 3.12%) BB#6(0x7c000000 / 0x80000000 = 96.88%)

BB#5: derived from LLVM BB %for.cond64.preheader
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#8
	%R25<def> = COPY %R22
	%R26<def> = COPY %R19
    Successors according to CFG: BB#9(?%)

BB#9: derived from LLVM BB %for.body66
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#5 BB#9
	%R27<def> = ADDrr_r32 %R16, %R26, %STATUS<imp-def,dead>
	%R33<def> = LDRf32 %R27<kill>, 0; mem:LD4[%sunkaddr30](tbaa=!2)
	%R27<def> = ADDri_r32 %R25, 4, %STATUS<imp-def,dead>
	%R26<def> = ADDri_r32 %R26<kill>, 4, %STATUS<imp-def,dead>
	%R34<def> = LDRf32 %R25, 0; mem:Volatile LD4[%lsr.iv24](tbaa=!2)
	%R32<def> = LDRi32_r32 %FP, -4; mem:LD4[FixedStack2]
	GID %CONFIG<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %R32<kill>
	GIE %CONFIG<imp-def,dead>
	%R33<def> = FADDrr_r32 %R33<kill>, %R34<kill>, %STATUS<imp-def,dead>
	%R32<def,dead> = CMPri_r32 %R26, 32, %STATUS<imp-def>
	STRf32 %R33<kill>, %R25<kill>, 0; mem:Volatile ST4[%lsr.iv24](tbaa=!2)
	%R25<def> = COPY %R27<kill>
	BCC <BB#9>, 1, %STATUS<imp-use>
    Successors according to CFG: BB#10(0x04000000 / 0x80000000 = 3.12%) BB#9(0x7c000000 / 0x80000000 = 96.88%)

BB#10: derived from LLVM BB %for.end75
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#9
	%R22<def> = ADDri_r32 %R22<kill>, 32, %STATUS<imp-def,dead>
	%R23<def> = ADDri_r32 %R23<kill>, 32, %STATUS<imp-def,dead>
	%R24<def> = ADDri_r32 %R24<kill>, 8, %STATUS<imp-def,dead>
	%R25<def,dead> = CMPrr_r32 %R24, %R3, %STATUS<imp-def>
	BCC <BB#4>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#4(0x7c000000 / 0x80000000 = 96.88%) BB#11(0x04000000 / 0x80000000 = 3.12%)

BB#11: derived from LLVM BB %for.end78
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20
    Predecessors according to CFG: BB#10
	%R2<def> = ADDrr_r32 %R2<kill>, %IP, %STATUS<imp-def,dead>
	%R20<def> = ADDri_r32 %R20<kill>, 1, %STATUS<imp-def,dead>
	%R21<def,dead> = CMPrr_r32 %R20, %R3, %STATUS<imp-def>
	BCC <BB#12>, 0, %STATUS<imp-use>
    Successors according to CFG: BB#12(0x04000000 / 0x80000000 = 3.12%) BB#3(0x7c000000 / 0x80000000 = 96.88%)

BB#12: derived from LLVM BB %for.end81
    Predecessors according to CFG: BB#1 BB#11
	%R0<def> = LDRi32_r32 %FP, -44; mem:LD4[FixedStack1]
	GID
	%CONFIG<def> = MOVTS32_core %R0<kill>
	GIE %CONFIG<imp-use,kill>
	%LR<def> = LDRi64 %SP, 48; flags: FrameSetup
	%SP<def> = ADDri_r32 %SP, 48, %STATUS<imp-def>
	RTS

# End machine code for function matmac.


TryTailMergeBlocks: BB#2, BB#11
  with successor BB#3
  which has fall-through from BB#2
Looking for common tails of at least 3 instructions

<----------------->
Analyzing block 11
BB#11: derived from LLVM BB %for.end78
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20
    Predecessors according to CFG: BB#10
	%R2<def> = ADDrr_r32 %R2<kill>, %IP, %STATUS<imp-def,dead>
	%R20<def> = ADDri_r32 %R20<kill>, 1, %STATUS<imp-def,dead>
	%R21<def,dead> = CMPrr_r32 %R20, %R3, %STATUS<imp-def>
	BCC <BB#12>, 0, %STATUS<imp-use>
    Successors according to CFG: BB#12(0x04000000 / 0x80000000 = 3.12%) BB#3(0x7c000000 / 0x80000000 = 96.88%)

<----------------->
Removing branches out of BB#11
# Machine code for function matmac: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=32, align=8, at location [SP-40]
  fi#1: size=4, align=4, at location [SP-44]
  fi#2: size=4, align=4, at location [SP-4]
  fi#3: size=4, align=8, at location [SP-8]
Function Live Ins: %R0, %R1, %R2, %R3

BB#0: 
    Live Ins: %R0 %R1 %R2 %R3
	%SP<def,tied2> = STRi64_pmd %LR, %SP<tied0>, -48; flags: FrameSetup
	%FP<def> = ADDri_r32 %SP, 48, %STATUS<imp-def>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	GID %CONFIG<imp-def>
	%R19<def> = MOVFS32_core %CONFIG, %D9<imp-def>
	STRi32_r32 %R19, %FP, -44; mem:ST4[FixedStack1]
	%IP<def> = MOVi32ri 65535
	%IP<def,tied1> = MOVTi32ri %IP<kill,tied0>, 65521
	%R18<def> = ANDrr_r32 %R19, %IP<kill>, %STATUS<imp-def>, %D9<imp-use,kill>, %D9<imp-def>
	%R19<def,tied1> = MOVTi32ri %R19<tied0>, 72, %D9<imp-use,kill>, %D9<imp-def>
	STRi64 %D9<kill>, %FP, -8; mem:ST4[FixedStack3] ST4[FixedStack2]
	GIE %CONFIG<imp-use,kill>
    Successors according to CFG: BB#1(?%)

BB#1: derived from LLVM BB %entry
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#0
	%IP<def,dead> = CMPri_r32 %R3, 1, %STATUS<imp-def>
	BCC <BB#12>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#2(0x50000000 / 0x80000000 = 62.50%) BB#12(0x30000000 / 0x80000000 = 37.50%)

BB#2: derived from LLVM BB %for.body3.lr.ph.preheader
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#1
	%IP<def> = LSL32ri %R3, 2, %STATUS<imp-def,dead>
	%R1<def> = ADDri_r32 %R1<kill>, 8, %STATUS<imp-def,dead>
	%R16<def> = MOViPTR %FP, -40
	%R17<def> = ADDri_r32 %R16, 8, %STATUS<imp-def,dead>
	%R19<def> = MOVi32ri 0, %D9<imp-def>
	%R20<def> = COPY %R19
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %for.body3.lr.ph
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20
    Predecessors according to CFG: BB#2 BB#11
	%R21<def> = LDRi32_r32 %FP, -8; mem:LD4[FixedStack3]
	GID %CONFIG<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %R21<kill>
	GIE %CONFIG<imp-def,dead>
	%R21<def> = IMULrr_r32 %R20, %R3, %STATUS<imp-def,dead>
	%R21<def> = LSL32ri %R21<kill>, 2, %STATUS<imp-def,dead>
	%R21<def> = ADDrr_r32 %R0, %R21<kill>, %STATUS<imp-def,dead>
	%R22<def> = COPY %R2
	%R23<def> = COPY %R1
	%R24<def> = COPY %R19
    Successors according to CFG: BB#4(?%)

BB#4: derived from LLVM BB %for.body9.preheader
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#3 BB#10
	%R18<def> = COPY %R19, %D9<imp-use,kill>, %D9<imp-def>
	STRi64 %D9, %FP, -16; mem:ST8[%1+24]
	STRi64 %D9, %FP, -24; mem:ST8[%1+16]
	STRi64 %D9, %FP, -32; mem:ST8[%1+8]
	STRi64 %D9, %FP, -40; mem:ST8[%1]
	%R25<def> = COPY %R23
	%R26<def> = COPY %R19
    Successors according to CFG: BB#6(?%)

BB#6: derived from LLVM BB %for.body9
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#4 BB#8
	%R27<def> = LSL32ri %R26, 2, %STATUS<imp-def,dead>
	%R27<def> = ADDrr_r32 %R21, %R27<kill>, %STATUS<imp-def,dead>
	%R27<def> = LDRf32 %R27<kill>, 0; mem:Volatile LD4[%add.ptr10](tbaa=!2)
	%R32<def> = COPY %R17
	%R34<def> = COPY %R25
	%R33<def> = COPY %R19
    Successors according to CFG: BB#7(?%)

BB#7: derived from LLVM BB %for.body13
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26 %R27 %R32 %R33 %R34
    Predecessors according to CFG: BB#6 BB#7
	%R37<def> = LDRf32 %R34, -8; mem:Volatile LD4[%scevgep8](tbaa=!2)
	%R35<def> = ADDri_r32 %R32, 16, %STATUS<imp-def,dead>
	%R36<def> = ADDri_r32 %R34, 16, %STATUS<imp-def,dead>
	%R38<def> = LDRf32 %R34, -4; mem:Volatile LD4[%scevgep9](tbaa=!2)
	%R33<def> = ADDri_r32 %R33<kill>, 4, %STATUS<imp-def,dead>
	%R39<def> = LDRf32 %R34, 0; mem:Volatile LD4[%lsr.iv5](tbaa=!2)
	%R40<def> = LDRf32 %R34<kill>, 4; mem:Volatile LD4[%scevgep7](tbaa=!2)
	%D21<def> = LDRf64 %R32, -8; mem:LD4[%scevgep17](tbaa=!2) LD4[%scevgep15](tbaa=!2)
	%R34<def> = LDRi32_r32 %FP, -4; mem:LD4[FixedStack2]
	GID %CONFIG<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %R34<kill>
	GIE %CONFIG<imp-def,dead>
	%R43<def,tied1> = FMADDrr_r32 %R43<tied0>, %R27, %R37<kill>, %STATUS<imp-def,dead>, %D21<imp-use,kill>, %D21<imp-def>
	%R42<def,tied1> = FMADDrr_r32 %R42<tied0>, %R27, %R38<kill>, %STATUS<imp-def,dead>, %D21<imp-use,kill>, %D21<imp-def>
	%R44<def> = COPY %R43, %D22<imp-def>
	%R45<def> = COPY %R42, %D21<imp-use,kill>, %D22<imp-use,kill>, %D22<imp-def>
	STRf64 %D22<kill>, %R32, -8; mem:ST4[%scevgep17](tbaa=!2) ST4[%scevgep15](tbaa=!2)
	%R34<def> = LDRf32 %R32, 0; mem:LD4[%lsr.iv1214](tbaa=!2)
	%R34<def,tied1> = FMADDrr_r32 %R34<kill,tied0>, %R27, %R39<kill>, %STATUS<imp-def,dead>
	STRf32 %R34<kill>, %R32, 0; mem:ST4[%lsr.iv1214](tbaa=!2)
	%R37<def> = LDRf32 %R32, 4; mem:LD4[%scevgep16](tbaa=!2)
	%R37<def,tied1> = FMADDrr_r32 %R37<kill,tied0>, %R27, %R40<kill>, %STATUS<imp-def,dead>
	%R34<def,dead> = CMPri_r32 %R33, 8, %STATUS<imp-def>
	STRf32 %R37<kill>, %R32<kill>, 4; mem:ST4[%scevgep16](tbaa=!2)
	%R32<def> = COPY %R35<kill>
	%R34<def> = COPY %R36<kill>
	BCC <BB#7>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#7(0x7c000000 / 0x80000000 = 96.88%) BB#8(0x04000000 / 0x80000000 = 3.12%)

BB#8: derived from LLVM BB %for.end60
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#7
	%R25<def> = ADDrr_r32 %R25<kill>, %IP, %STATUS<imp-def,dead>
	%R26<def> = ADDri_r32 %R26<kill>, 1, %STATUS<imp-def,dead>
	%R27<def,dead> = CMPrr_r32 %R26, %R3, %STATUS<imp-def>
	BCC <BB#6>, 1, %STATUS<imp-use>
    Successors according to CFG: BB#5(0x04000000 / 0x80000000 = 3.12%) BB#6(0x7c000000 / 0x80000000 = 96.88%)

BB#5: derived from LLVM BB %for.cond64.preheader
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#8
	%R25<def> = COPY %R22
	%R26<def> = COPY %R19
    Successors according to CFG: BB#9(?%)

BB#9: derived from LLVM BB %for.body66
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#5 BB#9
	%R27<def> = ADDrr_r32 %R16, %R26, %STATUS<imp-def,dead>
	%R33<def> = LDRf32 %R27<kill>, 0; mem:LD4[%sunkaddr30](tbaa=!2)
	%R27<def> = ADDri_r32 %R25, 4, %STATUS<imp-def,dead>
	%R26<def> = ADDri_r32 %R26<kill>, 4, %STATUS<imp-def,dead>
	%R34<def> = LDRf32 %R25, 0; mem:Volatile LD4[%lsr.iv24](tbaa=!2)
	%R32<def> = LDRi32_r32 %FP, -4; mem:LD4[FixedStack2]
	GID %CONFIG<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %R32<kill>
	GIE %CONFIG<imp-def,dead>
	%R33<def> = FADDrr_r32 %R33<kill>, %R34<kill>, %STATUS<imp-def,dead>
	%R32<def,dead> = CMPri_r32 %R26, 32, %STATUS<imp-def>
	STRf32 %R33<kill>, %R25<kill>, 0; mem:Volatile ST4[%lsr.iv24](tbaa=!2)
	%R25<def> = COPY %R27<kill>
	BCC <BB#9>, 1, %STATUS<imp-use>
    Successors according to CFG: BB#10(0x04000000 / 0x80000000 = 3.12%) BB#9(0x7c000000 / 0x80000000 = 96.88%)

BB#10: derived from LLVM BB %for.end75
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#9
	%R22<def> = ADDri_r32 %R22<kill>, 32, %STATUS<imp-def,dead>
	%R23<def> = ADDri_r32 %R23<kill>, 32, %STATUS<imp-def,dead>
	%R24<def> = ADDri_r32 %R24<kill>, 8, %STATUS<imp-def,dead>
	%R25<def,dead> = CMPrr_r32 %R24, %R3, %STATUS<imp-def>
	BCC <BB#4>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#4(0x7c000000 / 0x80000000 = 96.88%) BB#11(0x04000000 / 0x80000000 = 3.12%)

BB#11: derived from LLVM BB %for.end78
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20
    Predecessors according to CFG: BB#10
	%R2<def> = ADDrr_r32 %R2<kill>, %IP, %STATUS<imp-def,dead>
	%R20<def> = ADDri_r32 %R20<kill>, 1, %STATUS<imp-def,dead>
	%R21<def,dead> = CMPrr_r32 %R20, %R3, %STATUS<imp-def>
    Successors according to CFG: BB#12(0x04000000 / 0x80000000 = 3.12%) BB#3(0x7c000000 / 0x80000000 = 96.88%)

BB#12: derived from LLVM BB %for.end81
    Predecessors according to CFG: BB#1 BB#11
	%R0<def> = LDRi32_r32 %FP, -44; mem:LD4[FixedStack1]
	GID
	%CONFIG<def> = MOVTS32_core %R0<kill>
	GIE %CONFIG<imp-use,kill>
	%LR<def> = LDRi64 %SP, 48; flags: FrameSetup
	%SP<def> = ADDri_r32 %SP, 48, %STATUS<imp-def>
	RTS

# End machine code for function matmac.


<----------------->
Inserting branch into BB#11
# Machine code for function matmac: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=32, align=8, at location [SP-40]
  fi#1: size=4, align=4, at location [SP-44]
  fi#2: size=4, align=4, at location [SP-4]
  fi#3: size=4, align=8, at location [SP-8]
Function Live Ins: %R0, %R1, %R2, %R3

BB#0: 
    Live Ins: %R0 %R1 %R2 %R3
	%SP<def,tied2> = STRi64_pmd %LR, %SP<tied0>, -48; flags: FrameSetup
	%FP<def> = ADDri_r32 %SP, 48, %STATUS<imp-def>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	GID %CONFIG<imp-def>
	%R19<def> = MOVFS32_core %CONFIG, %D9<imp-def>
	STRi32_r32 %R19, %FP, -44; mem:ST4[FixedStack1]
	%IP<def> = MOVi32ri 65535
	%IP<def,tied1> = MOVTi32ri %IP<kill,tied0>, 65521
	%R18<def> = ANDrr_r32 %R19, %IP<kill>, %STATUS<imp-def>, %D9<imp-use,kill>, %D9<imp-def>
	%R19<def,tied1> = MOVTi32ri %R19<tied0>, 72, %D9<imp-use,kill>, %D9<imp-def>
	STRi64 %D9<kill>, %FP, -8; mem:ST4[FixedStack3] ST4[FixedStack2]
	GIE %CONFIG<imp-use,kill>
    Successors according to CFG: BB#1(?%)

BB#1: derived from LLVM BB %entry
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#0
	%IP<def,dead> = CMPri_r32 %R3, 1, %STATUS<imp-def>
	BCC <BB#12>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#2(0x50000000 / 0x80000000 = 62.50%) BB#12(0x30000000 / 0x80000000 = 37.50%)

BB#2: derived from LLVM BB %for.body3.lr.ph.preheader
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#1
	%IP<def> = LSL32ri %R3, 2, %STATUS<imp-def,dead>
	%R1<def> = ADDri_r32 %R1<kill>, 8, %STATUS<imp-def,dead>
	%R16<def> = MOViPTR %FP, -40
	%R17<def> = ADDri_r32 %R16, 8, %STATUS<imp-def,dead>
	%R19<def> = MOVi32ri 0, %D9<imp-def>
	%R20<def> = COPY %R19
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %for.body3.lr.ph
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20
    Predecessors according to CFG: BB#2 BB#11
	%R21<def> = LDRi32_r32 %FP, -8; mem:LD4[FixedStack3]
	GID %CONFIG<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %R21<kill>
	GIE %CONFIG<imp-def,dead>
	%R21<def> = IMULrr_r32 %R20, %R3, %STATUS<imp-def,dead>
	%R21<def> = LSL32ri %R21<kill>, 2, %STATUS<imp-def,dead>
	%R21<def> = ADDrr_r32 %R0, %R21<kill>, %STATUS<imp-def,dead>
	%R22<def> = COPY %R2
	%R23<def> = COPY %R1
	%R24<def> = COPY %R19
    Successors according to CFG: BB#4(?%)

BB#4: derived from LLVM BB %for.body9.preheader
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#3 BB#10
	%R18<def> = COPY %R19, %D9<imp-use,kill>, %D9<imp-def>
	STRi64 %D9, %FP, -16; mem:ST8[%1+24]
	STRi64 %D9, %FP, -24; mem:ST8[%1+16]
	STRi64 %D9, %FP, -32; mem:ST8[%1+8]
	STRi64 %D9, %FP, -40; mem:ST8[%1]
	%R25<def> = COPY %R23
	%R26<def> = COPY %R19
    Successors according to CFG: BB#6(?%)

BB#6: derived from LLVM BB %for.body9
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#4 BB#8
	%R27<def> = LSL32ri %R26, 2, %STATUS<imp-def,dead>
	%R27<def> = ADDrr_r32 %R21, %R27<kill>, %STATUS<imp-def,dead>
	%R27<def> = LDRf32 %R27<kill>, 0; mem:Volatile LD4[%add.ptr10](tbaa=!2)
	%R32<def> = COPY %R17
	%R34<def> = COPY %R25
	%R33<def> = COPY %R19
    Successors according to CFG: BB#7(?%)

BB#7: derived from LLVM BB %for.body13
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26 %R27 %R32 %R33 %R34
    Predecessors according to CFG: BB#6 BB#7
	%R37<def> = LDRf32 %R34, -8; mem:Volatile LD4[%scevgep8](tbaa=!2)
	%R35<def> = ADDri_r32 %R32, 16, %STATUS<imp-def,dead>
	%R36<def> = ADDri_r32 %R34, 16, %STATUS<imp-def,dead>
	%R38<def> = LDRf32 %R34, -4; mem:Volatile LD4[%scevgep9](tbaa=!2)
	%R33<def> = ADDri_r32 %R33<kill>, 4, %STATUS<imp-def,dead>
	%R39<def> = LDRf32 %R34, 0; mem:Volatile LD4[%lsr.iv5](tbaa=!2)
	%R40<def> = LDRf32 %R34<kill>, 4; mem:Volatile LD4[%scevgep7](tbaa=!2)
	%D21<def> = LDRf64 %R32, -8; mem:LD4[%scevgep17](tbaa=!2) LD4[%scevgep15](tbaa=!2)
	%R34<def> = LDRi32_r32 %FP, -4; mem:LD4[FixedStack2]
	GID %CONFIG<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %R34<kill>
	GIE %CONFIG<imp-def,dead>
	%R43<def,tied1> = FMADDrr_r32 %R43<tied0>, %R27, %R37<kill>, %STATUS<imp-def,dead>, %D21<imp-use,kill>, %D21<imp-def>
	%R42<def,tied1> = FMADDrr_r32 %R42<tied0>, %R27, %R38<kill>, %STATUS<imp-def,dead>, %D21<imp-use,kill>, %D21<imp-def>
	%R44<def> = COPY %R43, %D22<imp-def>
	%R45<def> = COPY %R42, %D21<imp-use,kill>, %D22<imp-use,kill>, %D22<imp-def>
	STRf64 %D22<kill>, %R32, -8; mem:ST4[%scevgep17](tbaa=!2) ST4[%scevgep15](tbaa=!2)
	%R34<def> = LDRf32 %R32, 0; mem:LD4[%lsr.iv1214](tbaa=!2)
	%R34<def,tied1> = FMADDrr_r32 %R34<kill,tied0>, %R27, %R39<kill>, %STATUS<imp-def,dead>
	STRf32 %R34<kill>, %R32, 0; mem:ST4[%lsr.iv1214](tbaa=!2)
	%R37<def> = LDRf32 %R32, 4; mem:LD4[%scevgep16](tbaa=!2)
	%R37<def,tied1> = FMADDrr_r32 %R37<kill,tied0>, %R27, %R40<kill>, %STATUS<imp-def,dead>
	%R34<def,dead> = CMPri_r32 %R33, 8, %STATUS<imp-def>
	STRf32 %R37<kill>, %R32<kill>, 4; mem:ST4[%scevgep16](tbaa=!2)
	%R32<def> = COPY %R35<kill>
	%R34<def> = COPY %R36<kill>
	BCC <BB#7>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#7(0x7c000000 / 0x80000000 = 96.88%) BB#8(0x04000000 / 0x80000000 = 3.12%)

BB#8: derived from LLVM BB %for.end60
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#7
	%R25<def> = ADDrr_r32 %R25<kill>, %IP, %STATUS<imp-def,dead>
	%R26<def> = ADDri_r32 %R26<kill>, 1, %STATUS<imp-def,dead>
	%R27<def,dead> = CMPrr_r32 %R26, %R3, %STATUS<imp-def>
	BCC <BB#6>, 1, %STATUS<imp-use>
    Successors according to CFG: BB#5(0x04000000 / 0x80000000 = 3.12%) BB#6(0x7c000000 / 0x80000000 = 96.88%)

BB#5: derived from LLVM BB %for.cond64.preheader
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#8
	%R25<def> = COPY %R22
	%R26<def> = COPY %R19
    Successors according to CFG: BB#9(?%)

BB#9: derived from LLVM BB %for.body66
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#5 BB#9
	%R27<def> = ADDrr_r32 %R16, %R26, %STATUS<imp-def,dead>
	%R33<def> = LDRf32 %R27<kill>, 0; mem:LD4[%sunkaddr30](tbaa=!2)
	%R27<def> = ADDri_r32 %R25, 4, %STATUS<imp-def,dead>
	%R26<def> = ADDri_r32 %R26<kill>, 4, %STATUS<imp-def,dead>
	%R34<def> = LDRf32 %R25, 0; mem:Volatile LD4[%lsr.iv24](tbaa=!2)
	%R32<def> = LDRi32_r32 %FP, -4; mem:LD4[FixedStack2]
	GID %CONFIG<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %R32<kill>
	GIE %CONFIG<imp-def,dead>
	%R33<def> = FADDrr_r32 %R33<kill>, %R34<kill>, %STATUS<imp-def,dead>
	%R32<def,dead> = CMPri_r32 %R26, 32, %STATUS<imp-def>
	STRf32 %R33<kill>, %R25<kill>, 0; mem:Volatile ST4[%lsr.iv24](tbaa=!2)
	%R25<def> = COPY %R27<kill>
	BCC <BB#9>, 1, %STATUS<imp-use>
    Successors according to CFG: BB#10(0x04000000 / 0x80000000 = 3.12%) BB#9(0x7c000000 / 0x80000000 = 96.88%)

BB#10: derived from LLVM BB %for.end75
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#9
	%R22<def> = ADDri_r32 %R22<kill>, 32, %STATUS<imp-def,dead>
	%R23<def> = ADDri_r32 %R23<kill>, 32, %STATUS<imp-def,dead>
	%R24<def> = ADDri_r32 %R24<kill>, 8, %STATUS<imp-def,dead>
	%R25<def,dead> = CMPrr_r32 %R24, %R3, %STATUS<imp-def>
	BCC <BB#4>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#4(0x7c000000 / 0x80000000 = 96.88%) BB#11(0x04000000 / 0x80000000 = 3.12%)

BB#11: derived from LLVM BB %for.end78
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20
    Predecessors according to CFG: BB#10
	%R2<def> = ADDrr_r32 %R2<kill>, %IP, %STATUS<imp-def,dead>
	%R20<def> = ADDri_r32 %R20<kill>, 1, %STATUS<imp-def,dead>
	%R21<def,dead> = CMPrr_r32 %R20, %R3, %STATUS<imp-def>
	BCC <BB#3>, 1, %STATUS<imp-use>
    Successors according to CFG: BB#12(0x04000000 / 0x80000000 = 3.12%) BB#3(0x7c000000 / 0x80000000 = 96.88%)

BB#12: derived from LLVM BB %for.end81
    Predecessors according to CFG: BB#1 BB#11
	%R0<def> = LDRi32_r32 %FP, -44; mem:LD4[FixedStack1]
	GID
	%CONFIG<def> = MOVTS32_core %R0<kill>
	GIE %CONFIG<imp-use,kill>
	%LR<def> = LDRi64 %SP, 48; flags: FrameSetup
	%SP<def> = ADDri_r32 %SP, 48, %STATUS<imp-def>
	RTS

# End machine code for function matmac.


<----------------->
Analyzing block 3
BB#3: derived from LLVM BB %for.body3.lr.ph
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20
    Predecessors according to CFG: BB#2 BB#11
	%R21<def> = LDRi32_r32 %FP, -8; mem:LD4[FixedStack3]
	GID %CONFIG<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %R21<kill>
	GIE %CONFIG<imp-def,dead>
	%R21<def> = IMULrr_r32 %R20, %R3, %STATUS<imp-def,dead>
	%R21<def> = LSL32ri %R21<kill>, 2, %STATUS<imp-def,dead>
	%R21<def> = ADDrr_r32 %R0, %R21<kill>, %STATUS<imp-def,dead>
	%R22<def> = COPY %R2
	%R23<def> = COPY %R1
	%R24<def> = COPY %R19
    Successors according to CFG: BB#4(?%)

<----------------->
Analyzing block 10
BB#10: derived from LLVM BB %for.end75
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#9
	%R22<def> = ADDri_r32 %R22<kill>, 32, %STATUS<imp-def,dead>
	%R23<def> = ADDri_r32 %R23<kill>, 32, %STATUS<imp-def,dead>
	%R24<def> = ADDri_r32 %R24<kill>, 8, %STATUS<imp-def,dead>
	%R25<def,dead> = CMPrr_r32 %R24, %R3, %STATUS<imp-def>
	BCC <BB#4>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#4(0x7c000000 / 0x80000000 = 96.88%) BB#11(0x04000000 / 0x80000000 = 3.12%)

<----------------->
Removing branches out of BB#10
# Machine code for function matmac: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=32, align=8, at location [SP-40]
  fi#1: size=4, align=4, at location [SP-44]
  fi#2: size=4, align=4, at location [SP-4]
  fi#3: size=4, align=8, at location [SP-8]
Function Live Ins: %R0, %R1, %R2, %R3

BB#0: 
    Live Ins: %R0 %R1 %R2 %R3
	%SP<def,tied2> = STRi64_pmd %LR, %SP<tied0>, -48; flags: FrameSetup
	%FP<def> = ADDri_r32 %SP, 48, %STATUS<imp-def>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	GID %CONFIG<imp-def>
	%R19<def> = MOVFS32_core %CONFIG, %D9<imp-def>
	STRi32_r32 %R19, %FP, -44; mem:ST4[FixedStack1]
	%IP<def> = MOVi32ri 65535
	%IP<def,tied1> = MOVTi32ri %IP<kill,tied0>, 65521
	%R18<def> = ANDrr_r32 %R19, %IP<kill>, %STATUS<imp-def>, %D9<imp-use,kill>, %D9<imp-def>
	%R19<def,tied1> = MOVTi32ri %R19<tied0>, 72, %D9<imp-use,kill>, %D9<imp-def>
	STRi64 %D9<kill>, %FP, -8; mem:ST4[FixedStack3] ST4[FixedStack2]
	GIE %CONFIG<imp-use,kill>
    Successors according to CFG: BB#1(?%)

BB#1: derived from LLVM BB %entry
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#0
	%IP<def,dead> = CMPri_r32 %R3, 1, %STATUS<imp-def>
	BCC <BB#12>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#2(0x50000000 / 0x80000000 = 62.50%) BB#12(0x30000000 / 0x80000000 = 37.50%)

BB#2: derived from LLVM BB %for.body3.lr.ph.preheader
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#1
	%IP<def> = LSL32ri %R3, 2, %STATUS<imp-def,dead>
	%R1<def> = ADDri_r32 %R1<kill>, 8, %STATUS<imp-def,dead>
	%R16<def> = MOViPTR %FP, -40
	%R17<def> = ADDri_r32 %R16, 8, %STATUS<imp-def,dead>
	%R19<def> = MOVi32ri 0, %D9<imp-def>
	%R20<def> = COPY %R19
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %for.body3.lr.ph
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20
    Predecessors according to CFG: BB#2 BB#11
	%R21<def> = LDRi32_r32 %FP, -8; mem:LD4[FixedStack3]
	GID %CONFIG<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %R21<kill>
	GIE %CONFIG<imp-def,dead>
	%R21<def> = IMULrr_r32 %R20, %R3, %STATUS<imp-def,dead>
	%R21<def> = LSL32ri %R21<kill>, 2, %STATUS<imp-def,dead>
	%R21<def> = ADDrr_r32 %R0, %R21<kill>, %STATUS<imp-def,dead>
	%R22<def> = COPY %R2
	%R23<def> = COPY %R1
	%R24<def> = COPY %R19
    Successors according to CFG: BB#4(?%)

BB#4: derived from LLVM BB %for.body9.preheader
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#3 BB#10
	%R18<def> = COPY %R19, %D9<imp-use,kill>, %D9<imp-def>
	STRi64 %D9, %FP, -16; mem:ST8[%1+24]
	STRi64 %D9, %FP, -24; mem:ST8[%1+16]
	STRi64 %D9, %FP, -32; mem:ST8[%1+8]
	STRi64 %D9, %FP, -40; mem:ST8[%1]
	%R25<def> = COPY %R23
	%R26<def> = COPY %R19
    Successors according to CFG: BB#6(?%)

BB#6: derived from LLVM BB %for.body9
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#4 BB#8
	%R27<def> = LSL32ri %R26, 2, %STATUS<imp-def,dead>
	%R27<def> = ADDrr_r32 %R21, %R27<kill>, %STATUS<imp-def,dead>
	%R27<def> = LDRf32 %R27<kill>, 0; mem:Volatile LD4[%add.ptr10](tbaa=!2)
	%R32<def> = COPY %R17
	%R34<def> = COPY %R25
	%R33<def> = COPY %R19
    Successors according to CFG: BB#7(?%)

BB#7: derived from LLVM BB %for.body13
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26 %R27 %R32 %R33 %R34
    Predecessors according to CFG: BB#6 BB#7
	%R37<def> = LDRf32 %R34, -8; mem:Volatile LD4[%scevgep8](tbaa=!2)
	%R35<def> = ADDri_r32 %R32, 16, %STATUS<imp-def,dead>
	%R36<def> = ADDri_r32 %R34, 16, %STATUS<imp-def,dead>
	%R38<def> = LDRf32 %R34, -4; mem:Volatile LD4[%scevgep9](tbaa=!2)
	%R33<def> = ADDri_r32 %R33<kill>, 4, %STATUS<imp-def,dead>
	%R39<def> = LDRf32 %R34, 0; mem:Volatile LD4[%lsr.iv5](tbaa=!2)
	%R40<def> = LDRf32 %R34<kill>, 4; mem:Volatile LD4[%scevgep7](tbaa=!2)
	%D21<def> = LDRf64 %R32, -8; mem:LD4[%scevgep17](tbaa=!2) LD4[%scevgep15](tbaa=!2)
	%R34<def> = LDRi32_r32 %FP, -4; mem:LD4[FixedStack2]
	GID %CONFIG<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %R34<kill>
	GIE %CONFIG<imp-def,dead>
	%R43<def,tied1> = FMADDrr_r32 %R43<tied0>, %R27, %R37<kill>, %STATUS<imp-def,dead>, %D21<imp-use,kill>, %D21<imp-def>
	%R42<def,tied1> = FMADDrr_r32 %R42<tied0>, %R27, %R38<kill>, %STATUS<imp-def,dead>, %D21<imp-use,kill>, %D21<imp-def>
	%R44<def> = COPY %R43, %D22<imp-def>
	%R45<def> = COPY %R42, %D21<imp-use,kill>, %D22<imp-use,kill>, %D22<imp-def>
	STRf64 %D22<kill>, %R32, -8; mem:ST4[%scevgep17](tbaa=!2) ST4[%scevgep15](tbaa=!2)
	%R34<def> = LDRf32 %R32, 0; mem:LD4[%lsr.iv1214](tbaa=!2)
	%R34<def,tied1> = FMADDrr_r32 %R34<kill,tied0>, %R27, %R39<kill>, %STATUS<imp-def,dead>
	STRf32 %R34<kill>, %R32, 0; mem:ST4[%lsr.iv1214](tbaa=!2)
	%R37<def> = LDRf32 %R32, 4; mem:LD4[%scevgep16](tbaa=!2)
	%R37<def,tied1> = FMADDrr_r32 %R37<kill,tied0>, %R27, %R40<kill>, %STATUS<imp-def,dead>
	%R34<def,dead> = CMPri_r32 %R33, 8, %STATUS<imp-def>
	STRf32 %R37<kill>, %R32<kill>, 4; mem:ST4[%scevgep16](tbaa=!2)
	%R32<def> = COPY %R35<kill>
	%R34<def> = COPY %R36<kill>
	BCC <BB#7>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#7(0x7c000000 / 0x80000000 = 96.88%) BB#8(0x04000000 / 0x80000000 = 3.12%)

BB#8: derived from LLVM BB %for.end60
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#7
	%R25<def> = ADDrr_r32 %R25<kill>, %IP, %STATUS<imp-def,dead>
	%R26<def> = ADDri_r32 %R26<kill>, 1, %STATUS<imp-def,dead>
	%R27<def,dead> = CMPrr_r32 %R26, %R3, %STATUS<imp-def>
	BCC <BB#6>, 1, %STATUS<imp-use>
    Successors according to CFG: BB#5(0x04000000 / 0x80000000 = 3.12%) BB#6(0x7c000000 / 0x80000000 = 96.88%)

BB#5: derived from LLVM BB %for.cond64.preheader
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#8
	%R25<def> = COPY %R22
	%R26<def> = COPY %R19
    Successors according to CFG: BB#9(?%)

BB#9: derived from LLVM BB %for.body66
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#5 BB#9
	%R27<def> = ADDrr_r32 %R16, %R26, %STATUS<imp-def,dead>
	%R33<def> = LDRf32 %R27<kill>, 0; mem:LD4[%sunkaddr30](tbaa=!2)
	%R27<def> = ADDri_r32 %R25, 4, %STATUS<imp-def,dead>
	%R26<def> = ADDri_r32 %R26<kill>, 4, %STATUS<imp-def,dead>
	%R34<def> = LDRf32 %R25, 0; mem:Volatile LD4[%lsr.iv24](tbaa=!2)
	%R32<def> = LDRi32_r32 %FP, -4; mem:LD4[FixedStack2]
	GID %CONFIG<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %R32<kill>
	GIE %CONFIG<imp-def,dead>
	%R33<def> = FADDrr_r32 %R33<kill>, %R34<kill>, %STATUS<imp-def,dead>
	%R32<def,dead> = CMPri_r32 %R26, 32, %STATUS<imp-def>
	STRf32 %R33<kill>, %R25<kill>, 0; mem:Volatile ST4[%lsr.iv24](tbaa=!2)
	%R25<def> = COPY %R27<kill>
	BCC <BB#9>, 1, %STATUS<imp-use>
    Successors according to CFG: BB#10(0x04000000 / 0x80000000 = 3.12%) BB#9(0x7c000000 / 0x80000000 = 96.88%)

BB#10: derived from LLVM BB %for.end75
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#9
	%R22<def> = ADDri_r32 %R22<kill>, 32, %STATUS<imp-def,dead>
	%R23<def> = ADDri_r32 %R23<kill>, 32, %STATUS<imp-def,dead>
	%R24<def> = ADDri_r32 %R24<kill>, 8, %STATUS<imp-def,dead>
	%R25<def,dead> = CMPrr_r32 %R24, %R3, %STATUS<imp-def>
    Successors according to CFG: BB#4(0x7c000000 / 0x80000000 = 96.88%) BB#11(0x04000000 / 0x80000000 = 3.12%)

BB#11: derived from LLVM BB %for.end78
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20
    Predecessors according to CFG: BB#10
	%R2<def> = ADDrr_r32 %R2<kill>, %IP, %STATUS<imp-def,dead>
	%R20<def> = ADDri_r32 %R20<kill>, 1, %STATUS<imp-def,dead>
	%R21<def,dead> = CMPrr_r32 %R20, %R3, %STATUS<imp-def>
	BCC <BB#3>, 1, %STATUS<imp-use>
    Successors according to CFG: BB#12(0x04000000 / 0x80000000 = 3.12%) BB#3(0x7c000000 / 0x80000000 = 96.88%)

BB#12: derived from LLVM BB %for.end81
    Predecessors according to CFG: BB#1 BB#11
	%R0<def> = LDRi32_r32 %FP, -44; mem:LD4[FixedStack1]
	GID
	%CONFIG<def> = MOVTS32_core %R0<kill>
	GIE %CONFIG<imp-use,kill>
	%LR<def> = LDRi64 %SP, 48; flags: FrameSetup
	%SP<def> = ADDri_r32 %SP, 48, %STATUS<imp-def>
	RTS

# End machine code for function matmac.


<----------------->
Inserting branch into BB#10
# Machine code for function matmac: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=32, align=8, at location [SP-40]
  fi#1: size=4, align=4, at location [SP-44]
  fi#2: size=4, align=4, at location [SP-4]
  fi#3: size=4, align=8, at location [SP-8]
Function Live Ins: %R0, %R1, %R2, %R3

BB#0: 
    Live Ins: %R0 %R1 %R2 %R3
	%SP<def,tied2> = STRi64_pmd %LR, %SP<tied0>, -48; flags: FrameSetup
	%FP<def> = ADDri_r32 %SP, 48, %STATUS<imp-def>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	GID %CONFIG<imp-def>
	%R19<def> = MOVFS32_core %CONFIG, %D9<imp-def>
	STRi32_r32 %R19, %FP, -44; mem:ST4[FixedStack1]
	%IP<def> = MOVi32ri 65535
	%IP<def,tied1> = MOVTi32ri %IP<kill,tied0>, 65521
	%R18<def> = ANDrr_r32 %R19, %IP<kill>, %STATUS<imp-def>, %D9<imp-use,kill>, %D9<imp-def>
	%R19<def,tied1> = MOVTi32ri %R19<tied0>, 72, %D9<imp-use,kill>, %D9<imp-def>
	STRi64 %D9<kill>, %FP, -8; mem:ST4[FixedStack3] ST4[FixedStack2]
	GIE %CONFIG<imp-use,kill>
    Successors according to CFG: BB#1(?%)

BB#1: derived from LLVM BB %entry
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#0
	%IP<def,dead> = CMPri_r32 %R3, 1, %STATUS<imp-def>
	BCC <BB#12>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#2(0x50000000 / 0x80000000 = 62.50%) BB#12(0x30000000 / 0x80000000 = 37.50%)

BB#2: derived from LLVM BB %for.body3.lr.ph.preheader
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#1
	%IP<def> = LSL32ri %R3, 2, %STATUS<imp-def,dead>
	%R1<def> = ADDri_r32 %R1<kill>, 8, %STATUS<imp-def,dead>
	%R16<def> = MOViPTR %FP, -40
	%R17<def> = ADDri_r32 %R16, 8, %STATUS<imp-def,dead>
	%R19<def> = MOVi32ri 0, %D9<imp-def>
	%R20<def> = COPY %R19
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %for.body3.lr.ph
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20
    Predecessors according to CFG: BB#2 BB#11
	%R21<def> = LDRi32_r32 %FP, -8; mem:LD4[FixedStack3]
	GID %CONFIG<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %R21<kill>
	GIE %CONFIG<imp-def,dead>
	%R21<def> = IMULrr_r32 %R20, %R3, %STATUS<imp-def,dead>
	%R21<def> = LSL32ri %R21<kill>, 2, %STATUS<imp-def,dead>
	%R21<def> = ADDrr_r32 %R0, %R21<kill>, %STATUS<imp-def,dead>
	%R22<def> = COPY %R2
	%R23<def> = COPY %R1
	%R24<def> = COPY %R19
    Successors according to CFG: BB#4(?%)

BB#4: derived from LLVM BB %for.body9.preheader
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#3 BB#10
	%R18<def> = COPY %R19, %D9<imp-use,kill>, %D9<imp-def>
	STRi64 %D9, %FP, -16; mem:ST8[%1+24]
	STRi64 %D9, %FP, -24; mem:ST8[%1+16]
	STRi64 %D9, %FP, -32; mem:ST8[%1+8]
	STRi64 %D9, %FP, -40; mem:ST8[%1]
	%R25<def> = COPY %R23
	%R26<def> = COPY %R19
    Successors according to CFG: BB#6(?%)

BB#6: derived from LLVM BB %for.body9
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#4 BB#8
	%R27<def> = LSL32ri %R26, 2, %STATUS<imp-def,dead>
	%R27<def> = ADDrr_r32 %R21, %R27<kill>, %STATUS<imp-def,dead>
	%R27<def> = LDRf32 %R27<kill>, 0; mem:Volatile LD4[%add.ptr10](tbaa=!2)
	%R32<def> = COPY %R17
	%R34<def> = COPY %R25
	%R33<def> = COPY %R19
    Successors according to CFG: BB#7(?%)

BB#7: derived from LLVM BB %for.body13
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26 %R27 %R32 %R33 %R34
    Predecessors according to CFG: BB#6 BB#7
	%R37<def> = LDRf32 %R34, -8; mem:Volatile LD4[%scevgep8](tbaa=!2)
	%R35<def> = ADDri_r32 %R32, 16, %STATUS<imp-def,dead>
	%R36<def> = ADDri_r32 %R34, 16, %STATUS<imp-def,dead>
	%R38<def> = LDRf32 %R34, -4; mem:Volatile LD4[%scevgep9](tbaa=!2)
	%R33<def> = ADDri_r32 %R33<kill>, 4, %STATUS<imp-def,dead>
	%R39<def> = LDRf32 %R34, 0; mem:Volatile LD4[%lsr.iv5](tbaa=!2)
	%R40<def> = LDRf32 %R34<kill>, 4; mem:Volatile LD4[%scevgep7](tbaa=!2)
	%D21<def> = LDRf64 %R32, -8; mem:LD4[%scevgep17](tbaa=!2) LD4[%scevgep15](tbaa=!2)
	%R34<def> = LDRi32_r32 %FP, -4; mem:LD4[FixedStack2]
	GID %CONFIG<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %R34<kill>
	GIE %CONFIG<imp-def,dead>
	%R43<def,tied1> = FMADDrr_r32 %R43<tied0>, %R27, %R37<kill>, %STATUS<imp-def,dead>, %D21<imp-use,kill>, %D21<imp-def>
	%R42<def,tied1> = FMADDrr_r32 %R42<tied0>, %R27, %R38<kill>, %STATUS<imp-def,dead>, %D21<imp-use,kill>, %D21<imp-def>
	%R44<def> = COPY %R43, %D22<imp-def>
	%R45<def> = COPY %R42, %D21<imp-use,kill>, %D22<imp-use,kill>, %D22<imp-def>
	STRf64 %D22<kill>, %R32, -8; mem:ST4[%scevgep17](tbaa=!2) ST4[%scevgep15](tbaa=!2)
	%R34<def> = LDRf32 %R32, 0; mem:LD4[%lsr.iv1214](tbaa=!2)
	%R34<def,tied1> = FMADDrr_r32 %R34<kill,tied0>, %R27, %R39<kill>, %STATUS<imp-def,dead>
	STRf32 %R34<kill>, %R32, 0; mem:ST4[%lsr.iv1214](tbaa=!2)
	%R37<def> = LDRf32 %R32, 4; mem:LD4[%scevgep16](tbaa=!2)
	%R37<def,tied1> = FMADDrr_r32 %R37<kill,tied0>, %R27, %R40<kill>, %STATUS<imp-def,dead>
	%R34<def,dead> = CMPri_r32 %R33, 8, %STATUS<imp-def>
	STRf32 %R37<kill>, %R32<kill>, 4; mem:ST4[%scevgep16](tbaa=!2)
	%R32<def> = COPY %R35<kill>
	%R34<def> = COPY %R36<kill>
	BCC <BB#7>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#7(0x7c000000 / 0x80000000 = 96.88%) BB#8(0x04000000 / 0x80000000 = 3.12%)

BB#8: derived from LLVM BB %for.end60
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#7
	%R25<def> = ADDrr_r32 %R25<kill>, %IP, %STATUS<imp-def,dead>
	%R26<def> = ADDri_r32 %R26<kill>, 1, %STATUS<imp-def,dead>
	%R27<def,dead> = CMPrr_r32 %R26, %R3, %STATUS<imp-def>
	BCC <BB#6>, 1, %STATUS<imp-use>
    Successors according to CFG: BB#5(0x04000000 / 0x80000000 = 3.12%) BB#6(0x7c000000 / 0x80000000 = 96.88%)

BB#5: derived from LLVM BB %for.cond64.preheader
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#8
	%R25<def> = COPY %R22
	%R26<def> = COPY %R19
    Successors according to CFG: BB#9(?%)

BB#9: derived from LLVM BB %for.body66
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#5 BB#9
	%R27<def> = ADDrr_r32 %R16, %R26, %STATUS<imp-def,dead>
	%R33<def> = LDRf32 %R27<kill>, 0; mem:LD4[%sunkaddr30](tbaa=!2)
	%R27<def> = ADDri_r32 %R25, 4, %STATUS<imp-def,dead>
	%R26<def> = ADDri_r32 %R26<kill>, 4, %STATUS<imp-def,dead>
	%R34<def> = LDRf32 %R25, 0; mem:Volatile LD4[%lsr.iv24](tbaa=!2)
	%R32<def> = LDRi32_r32 %FP, -4; mem:LD4[FixedStack2]
	GID %CONFIG<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %R32<kill>
	GIE %CONFIG<imp-def,dead>
	%R33<def> = FADDrr_r32 %R33<kill>, %R34<kill>, %STATUS<imp-def,dead>
	%R32<def,dead> = CMPri_r32 %R26, 32, %STATUS<imp-def>
	STRf32 %R33<kill>, %R25<kill>, 0; mem:Volatile ST4[%lsr.iv24](tbaa=!2)
	%R25<def> = COPY %R27<kill>
	BCC <BB#9>, 1, %STATUS<imp-use>
    Successors according to CFG: BB#10(0x04000000 / 0x80000000 = 3.12%) BB#9(0x7c000000 / 0x80000000 = 96.88%)

BB#10: derived from LLVM BB %for.end75
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#9
	%R22<def> = ADDri_r32 %R22<kill>, 32, %STATUS<imp-def,dead>
	%R23<def> = ADDri_r32 %R23<kill>, 32, %STATUS<imp-def,dead>
	%R24<def> = ADDri_r32 %R24<kill>, 8, %STATUS<imp-def,dead>
	%R25<def,dead> = CMPrr_r32 %R24, %R3, %STATUS<imp-def>
	BCC <BB#11>, 7, %STATUS<imp-use>
    Successors according to CFG: BB#4(0x7c000000 / 0x80000000 = 96.88%) BB#11(0x04000000 / 0x80000000 = 3.12%)

BB#11: derived from LLVM BB %for.end78
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20
    Predecessors according to CFG: BB#10
	%R2<def> = ADDrr_r32 %R2<kill>, %IP, %STATUS<imp-def,dead>
	%R20<def> = ADDri_r32 %R20<kill>, 1, %STATUS<imp-def,dead>
	%R21<def,dead> = CMPrr_r32 %R20, %R3, %STATUS<imp-def>
	BCC <BB#3>, 1, %STATUS<imp-use>
    Successors according to CFG: BB#12(0x04000000 / 0x80000000 = 3.12%) BB#3(0x7c000000 / 0x80000000 = 96.88%)

BB#12: derived from LLVM BB %for.end81
    Predecessors according to CFG: BB#1 BB#11
	%R0<def> = LDRi32_r32 %FP, -44; mem:LD4[FixedStack1]
	GID
	%CONFIG<def> = MOVTS32_core %R0<kill>
	GIE %CONFIG<imp-use,kill>
	%LR<def> = LDRi64 %SP, 48; flags: FrameSetup
	%SP<def> = ADDri_r32 %SP, 48, %STATUS<imp-def>
	RTS

# End machine code for function matmac.


TryTailMergeBlocks: BB#3, BB#10
  with successor BB#4
  which has fall-through from BB#3
Looking for common tails of at least 3 instructions

<----------------->
Analyzing block 10
BB#10: derived from LLVM BB %for.end75
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#9
	%R22<def> = ADDri_r32 %R22<kill>, 32, %STATUS<imp-def,dead>
	%R23<def> = ADDri_r32 %R23<kill>, 32, %STATUS<imp-def,dead>
	%R24<def> = ADDri_r32 %R24<kill>, 8, %STATUS<imp-def,dead>
	%R25<def,dead> = CMPrr_r32 %R24, %R3, %STATUS<imp-def>
	BCC <BB#11>, 7, %STATUS<imp-use>
    Successors according to CFG: BB#4(0x7c000000 / 0x80000000 = 96.88%) BB#11(0x04000000 / 0x80000000 = 3.12%)

<----------------->
Removing branches out of BB#10
# Machine code for function matmac: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=32, align=8, at location [SP-40]
  fi#1: size=4, align=4, at location [SP-44]
  fi#2: size=4, align=4, at location [SP-4]
  fi#3: size=4, align=8, at location [SP-8]
Function Live Ins: %R0, %R1, %R2, %R3

BB#0: 
    Live Ins: %R0 %R1 %R2 %R3
	%SP<def,tied2> = STRi64_pmd %LR, %SP<tied0>, -48; flags: FrameSetup
	%FP<def> = ADDri_r32 %SP, 48, %STATUS<imp-def>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	GID %CONFIG<imp-def>
	%R19<def> = MOVFS32_core %CONFIG, %D9<imp-def>
	STRi32_r32 %R19, %FP, -44; mem:ST4[FixedStack1]
	%IP<def> = MOVi32ri 65535
	%IP<def,tied1> = MOVTi32ri %IP<kill,tied0>, 65521
	%R18<def> = ANDrr_r32 %R19, %IP<kill>, %STATUS<imp-def>, %D9<imp-use,kill>, %D9<imp-def>
	%R19<def,tied1> = MOVTi32ri %R19<tied0>, 72, %D9<imp-use,kill>, %D9<imp-def>
	STRi64 %D9<kill>, %FP, -8; mem:ST4[FixedStack3] ST4[FixedStack2]
	GIE %CONFIG<imp-use,kill>
    Successors according to CFG: BB#1(?%)

BB#1: derived from LLVM BB %entry
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#0
	%IP<def,dead> = CMPri_r32 %R3, 1, %STATUS<imp-def>
	BCC <BB#12>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#2(0x50000000 / 0x80000000 = 62.50%) BB#12(0x30000000 / 0x80000000 = 37.50%)

BB#2: derived from LLVM BB %for.body3.lr.ph.preheader
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#1
	%IP<def> = LSL32ri %R3, 2, %STATUS<imp-def,dead>
	%R1<def> = ADDri_r32 %R1<kill>, 8, %STATUS<imp-def,dead>
	%R16<def> = MOViPTR %FP, -40
	%R17<def> = ADDri_r32 %R16, 8, %STATUS<imp-def,dead>
	%R19<def> = MOVi32ri 0, %D9<imp-def>
	%R20<def> = COPY %R19
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %for.body3.lr.ph
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20
    Predecessors according to CFG: BB#2 BB#11
	%R21<def> = LDRi32_r32 %FP, -8; mem:LD4[FixedStack3]
	GID %CONFIG<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %R21<kill>
	GIE %CONFIG<imp-def,dead>
	%R21<def> = IMULrr_r32 %R20, %R3, %STATUS<imp-def,dead>
	%R21<def> = LSL32ri %R21<kill>, 2, %STATUS<imp-def,dead>
	%R21<def> = ADDrr_r32 %R0, %R21<kill>, %STATUS<imp-def,dead>
	%R22<def> = COPY %R2
	%R23<def> = COPY %R1
	%R24<def> = COPY %R19
    Successors according to CFG: BB#4(?%)

BB#4: derived from LLVM BB %for.body9.preheader
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#3 BB#10
	%R18<def> = COPY %R19, %D9<imp-use,kill>, %D9<imp-def>
	STRi64 %D9, %FP, -16; mem:ST8[%1+24]
	STRi64 %D9, %FP, -24; mem:ST8[%1+16]
	STRi64 %D9, %FP, -32; mem:ST8[%1+8]
	STRi64 %D9, %FP, -40; mem:ST8[%1]
	%R25<def> = COPY %R23
	%R26<def> = COPY %R19
    Successors according to CFG: BB#6(?%)

BB#6: derived from LLVM BB %for.body9
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#4 BB#8
	%R27<def> = LSL32ri %R26, 2, %STATUS<imp-def,dead>
	%R27<def> = ADDrr_r32 %R21, %R27<kill>, %STATUS<imp-def,dead>
	%R27<def> = LDRf32 %R27<kill>, 0; mem:Volatile LD4[%add.ptr10](tbaa=!2)
	%R32<def> = COPY %R17
	%R34<def> = COPY %R25
	%R33<def> = COPY %R19
    Successors according to CFG: BB#7(?%)

BB#7: derived from LLVM BB %for.body13
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26 %R27 %R32 %R33 %R34
    Predecessors according to CFG: BB#6 BB#7
	%R37<def> = LDRf32 %R34, -8; mem:Volatile LD4[%scevgep8](tbaa=!2)
	%R35<def> = ADDri_r32 %R32, 16, %STATUS<imp-def,dead>
	%R36<def> = ADDri_r32 %R34, 16, %STATUS<imp-def,dead>
	%R38<def> = LDRf32 %R34, -4; mem:Volatile LD4[%scevgep9](tbaa=!2)
	%R33<def> = ADDri_r32 %R33<kill>, 4, %STATUS<imp-def,dead>
	%R39<def> = LDRf32 %R34, 0; mem:Volatile LD4[%lsr.iv5](tbaa=!2)
	%R40<def> = LDRf32 %R34<kill>, 4; mem:Volatile LD4[%scevgep7](tbaa=!2)
	%D21<def> = LDRf64 %R32, -8; mem:LD4[%scevgep17](tbaa=!2) LD4[%scevgep15](tbaa=!2)
	%R34<def> = LDRi32_r32 %FP, -4; mem:LD4[FixedStack2]
	GID %CONFIG<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %R34<kill>
	GIE %CONFIG<imp-def,dead>
	%R43<def,tied1> = FMADDrr_r32 %R43<tied0>, %R27, %R37<kill>, %STATUS<imp-def,dead>, %D21<imp-use,kill>, %D21<imp-def>
	%R42<def,tied1> = FMADDrr_r32 %R42<tied0>, %R27, %R38<kill>, %STATUS<imp-def,dead>, %D21<imp-use,kill>, %D21<imp-def>
	%R44<def> = COPY %R43, %D22<imp-def>
	%R45<def> = COPY %R42, %D21<imp-use,kill>, %D22<imp-use,kill>, %D22<imp-def>
	STRf64 %D22<kill>, %R32, -8; mem:ST4[%scevgep17](tbaa=!2) ST4[%scevgep15](tbaa=!2)
	%R34<def> = LDRf32 %R32, 0; mem:LD4[%lsr.iv1214](tbaa=!2)
	%R34<def,tied1> = FMADDrr_r32 %R34<kill,tied0>, %R27, %R39<kill>, %STATUS<imp-def,dead>
	STRf32 %R34<kill>, %R32, 0; mem:ST4[%lsr.iv1214](tbaa=!2)
	%R37<def> = LDRf32 %R32, 4; mem:LD4[%scevgep16](tbaa=!2)
	%R37<def,tied1> = FMADDrr_r32 %R37<kill,tied0>, %R27, %R40<kill>, %STATUS<imp-def,dead>
	%R34<def,dead> = CMPri_r32 %R33, 8, %STATUS<imp-def>
	STRf32 %R37<kill>, %R32<kill>, 4; mem:ST4[%scevgep16](tbaa=!2)
	%R32<def> = COPY %R35<kill>
	%R34<def> = COPY %R36<kill>
	BCC <BB#7>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#7(0x7c000000 / 0x80000000 = 96.88%) BB#8(0x04000000 / 0x80000000 = 3.12%)

BB#8: derived from LLVM BB %for.end60
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#7
	%R25<def> = ADDrr_r32 %R25<kill>, %IP, %STATUS<imp-def,dead>
	%R26<def> = ADDri_r32 %R26<kill>, 1, %STATUS<imp-def,dead>
	%R27<def,dead> = CMPrr_r32 %R26, %R3, %STATUS<imp-def>
	BCC <BB#6>, 1, %STATUS<imp-use>
    Successors according to CFG: BB#5(0x04000000 / 0x80000000 = 3.12%) BB#6(0x7c000000 / 0x80000000 = 96.88%)

BB#5: derived from LLVM BB %for.cond64.preheader
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#8
	%R25<def> = COPY %R22
	%R26<def> = COPY %R19
    Successors according to CFG: BB#9(?%)

BB#9: derived from LLVM BB %for.body66
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#5 BB#9
	%R27<def> = ADDrr_r32 %R16, %R26, %STATUS<imp-def,dead>
	%R33<def> = LDRf32 %R27<kill>, 0; mem:LD4[%sunkaddr30](tbaa=!2)
	%R27<def> = ADDri_r32 %R25, 4, %STATUS<imp-def,dead>
	%R26<def> = ADDri_r32 %R26<kill>, 4, %STATUS<imp-def,dead>
	%R34<def> = LDRf32 %R25, 0; mem:Volatile LD4[%lsr.iv24](tbaa=!2)
	%R32<def> = LDRi32_r32 %FP, -4; mem:LD4[FixedStack2]
	GID %CONFIG<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %R32<kill>
	GIE %CONFIG<imp-def,dead>
	%R33<def> = FADDrr_r32 %R33<kill>, %R34<kill>, %STATUS<imp-def,dead>
	%R32<def,dead> = CMPri_r32 %R26, 32, %STATUS<imp-def>
	STRf32 %R33<kill>, %R25<kill>, 0; mem:Volatile ST4[%lsr.iv24](tbaa=!2)
	%R25<def> = COPY %R27<kill>
	BCC <BB#9>, 1, %STATUS<imp-use>
    Successors according to CFG: BB#10(0x04000000 / 0x80000000 = 3.12%) BB#9(0x7c000000 / 0x80000000 = 96.88%)

BB#10: derived from LLVM BB %for.end75
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#9
	%R22<def> = ADDri_r32 %R22<kill>, 32, %STATUS<imp-def,dead>
	%R23<def> = ADDri_r32 %R23<kill>, 32, %STATUS<imp-def,dead>
	%R24<def> = ADDri_r32 %R24<kill>, 8, %STATUS<imp-def,dead>
	%R25<def,dead> = CMPrr_r32 %R24, %R3, %STATUS<imp-def>
    Successors according to CFG: BB#4(0x7c000000 / 0x80000000 = 96.88%) BB#11(0x04000000 / 0x80000000 = 3.12%)

BB#11: derived from LLVM BB %for.end78
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20
    Predecessors according to CFG: BB#10
	%R2<def> = ADDrr_r32 %R2<kill>, %IP, %STATUS<imp-def,dead>
	%R20<def> = ADDri_r32 %R20<kill>, 1, %STATUS<imp-def,dead>
	%R21<def,dead> = CMPrr_r32 %R20, %R3, %STATUS<imp-def>
	BCC <BB#3>, 1, %STATUS<imp-use>
    Successors according to CFG: BB#12(0x04000000 / 0x80000000 = 3.12%) BB#3(0x7c000000 / 0x80000000 = 96.88%)

BB#12: derived from LLVM BB %for.end81
    Predecessors according to CFG: BB#1 BB#11
	%R0<def> = LDRi32_r32 %FP, -44; mem:LD4[FixedStack1]
	GID
	%CONFIG<def> = MOVTS32_core %R0<kill>
	GIE %CONFIG<imp-use,kill>
	%LR<def> = LDRi64 %SP, 48; flags: FrameSetup
	%SP<def> = ADDri_r32 %SP, 48, %STATUS<imp-def>
	RTS

# End machine code for function matmac.


<----------------->
Inserting branch into BB#10
# Machine code for function matmac: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=32, align=8, at location [SP-40]
  fi#1: size=4, align=4, at location [SP-44]
  fi#2: size=4, align=4, at location [SP-4]
  fi#3: size=4, align=8, at location [SP-8]
Function Live Ins: %R0, %R1, %R2, %R3

BB#0: 
    Live Ins: %R0 %R1 %R2 %R3
	%SP<def,tied2> = STRi64_pmd %LR, %SP<tied0>, -48; flags: FrameSetup
	%FP<def> = ADDri_r32 %SP, 48, %STATUS<imp-def>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	GID %CONFIG<imp-def>
	%R19<def> = MOVFS32_core %CONFIG, %D9<imp-def>
	STRi32_r32 %R19, %FP, -44; mem:ST4[FixedStack1]
	%IP<def> = MOVi32ri 65535
	%IP<def,tied1> = MOVTi32ri %IP<kill,tied0>, 65521
	%R18<def> = ANDrr_r32 %R19, %IP<kill>, %STATUS<imp-def>, %D9<imp-use,kill>, %D9<imp-def>
	%R19<def,tied1> = MOVTi32ri %R19<tied0>, 72, %D9<imp-use,kill>, %D9<imp-def>
	STRi64 %D9<kill>, %FP, -8; mem:ST4[FixedStack3] ST4[FixedStack2]
	GIE %CONFIG<imp-use,kill>
    Successors according to CFG: BB#1(?%)

BB#1: derived from LLVM BB %entry
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#0
	%IP<def,dead> = CMPri_r32 %R3, 1, %STATUS<imp-def>
	BCC <BB#12>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#2(0x50000000 / 0x80000000 = 62.50%) BB#12(0x30000000 / 0x80000000 = 37.50%)

BB#2: derived from LLVM BB %for.body3.lr.ph.preheader
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#1
	%IP<def> = LSL32ri %R3, 2, %STATUS<imp-def,dead>
	%R1<def> = ADDri_r32 %R1<kill>, 8, %STATUS<imp-def,dead>
	%R16<def> = MOViPTR %FP, -40
	%R17<def> = ADDri_r32 %R16, 8, %STATUS<imp-def,dead>
	%R19<def> = MOVi32ri 0, %D9<imp-def>
	%R20<def> = COPY %R19
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %for.body3.lr.ph
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20
    Predecessors according to CFG: BB#2 BB#11
	%R21<def> = LDRi32_r32 %FP, -8; mem:LD4[FixedStack3]
	GID %CONFIG<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %R21<kill>
	GIE %CONFIG<imp-def,dead>
	%R21<def> = IMULrr_r32 %R20, %R3, %STATUS<imp-def,dead>
	%R21<def> = LSL32ri %R21<kill>, 2, %STATUS<imp-def,dead>
	%R21<def> = ADDrr_r32 %R0, %R21<kill>, %STATUS<imp-def,dead>
	%R22<def> = COPY %R2
	%R23<def> = COPY %R1
	%R24<def> = COPY %R19
    Successors according to CFG: BB#4(?%)

BB#4: derived from LLVM BB %for.body9.preheader
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#3 BB#10
	%R18<def> = COPY %R19, %D9<imp-use,kill>, %D9<imp-def>
	STRi64 %D9, %FP, -16; mem:ST8[%1+24]
	STRi64 %D9, %FP, -24; mem:ST8[%1+16]
	STRi64 %D9, %FP, -32; mem:ST8[%1+8]
	STRi64 %D9, %FP, -40; mem:ST8[%1]
	%R25<def> = COPY %R23
	%R26<def> = COPY %R19
    Successors according to CFG: BB#6(?%)

BB#6: derived from LLVM BB %for.body9
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#4 BB#8
	%R27<def> = LSL32ri %R26, 2, %STATUS<imp-def,dead>
	%R27<def> = ADDrr_r32 %R21, %R27<kill>, %STATUS<imp-def,dead>
	%R27<def> = LDRf32 %R27<kill>, 0; mem:Volatile LD4[%add.ptr10](tbaa=!2)
	%R32<def> = COPY %R17
	%R34<def> = COPY %R25
	%R33<def> = COPY %R19
    Successors according to CFG: BB#7(?%)

BB#7: derived from LLVM BB %for.body13
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26 %R27 %R32 %R33 %R34
    Predecessors according to CFG: BB#6 BB#7
	%R37<def> = LDRf32 %R34, -8; mem:Volatile LD4[%scevgep8](tbaa=!2)
	%R35<def> = ADDri_r32 %R32, 16, %STATUS<imp-def,dead>
	%R36<def> = ADDri_r32 %R34, 16, %STATUS<imp-def,dead>
	%R38<def> = LDRf32 %R34, -4; mem:Volatile LD4[%scevgep9](tbaa=!2)
	%R33<def> = ADDri_r32 %R33<kill>, 4, %STATUS<imp-def,dead>
	%R39<def> = LDRf32 %R34, 0; mem:Volatile LD4[%lsr.iv5](tbaa=!2)
	%R40<def> = LDRf32 %R34<kill>, 4; mem:Volatile LD4[%scevgep7](tbaa=!2)
	%D21<def> = LDRf64 %R32, -8; mem:LD4[%scevgep17](tbaa=!2) LD4[%scevgep15](tbaa=!2)
	%R34<def> = LDRi32_r32 %FP, -4; mem:LD4[FixedStack2]
	GID %CONFIG<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %R34<kill>
	GIE %CONFIG<imp-def,dead>
	%R43<def,tied1> = FMADDrr_r32 %R43<tied0>, %R27, %R37<kill>, %STATUS<imp-def,dead>, %D21<imp-use,kill>, %D21<imp-def>
	%R42<def,tied1> = FMADDrr_r32 %R42<tied0>, %R27, %R38<kill>, %STATUS<imp-def,dead>, %D21<imp-use,kill>, %D21<imp-def>
	%R44<def> = COPY %R43, %D22<imp-def>
	%R45<def> = COPY %R42, %D21<imp-use,kill>, %D22<imp-use,kill>, %D22<imp-def>
	STRf64 %D22<kill>, %R32, -8; mem:ST4[%scevgep17](tbaa=!2) ST4[%scevgep15](tbaa=!2)
	%R34<def> = LDRf32 %R32, 0; mem:LD4[%lsr.iv1214](tbaa=!2)
	%R34<def,tied1> = FMADDrr_r32 %R34<kill,tied0>, %R27, %R39<kill>, %STATUS<imp-def,dead>
	STRf32 %R34<kill>, %R32, 0; mem:ST4[%lsr.iv1214](tbaa=!2)
	%R37<def> = LDRf32 %R32, 4; mem:LD4[%scevgep16](tbaa=!2)
	%R37<def,tied1> = FMADDrr_r32 %R37<kill,tied0>, %R27, %R40<kill>, %STATUS<imp-def,dead>
	%R34<def,dead> = CMPri_r32 %R33, 8, %STATUS<imp-def>
	STRf32 %R37<kill>, %R32<kill>, 4; mem:ST4[%scevgep16](tbaa=!2)
	%R32<def> = COPY %R35<kill>
	%R34<def> = COPY %R36<kill>
	BCC <BB#7>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#7(0x7c000000 / 0x80000000 = 96.88%) BB#8(0x04000000 / 0x80000000 = 3.12%)

BB#8: derived from LLVM BB %for.end60
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#7
	%R25<def> = ADDrr_r32 %R25<kill>, %IP, %STATUS<imp-def,dead>
	%R26<def> = ADDri_r32 %R26<kill>, 1, %STATUS<imp-def,dead>
	%R27<def,dead> = CMPrr_r32 %R26, %R3, %STATUS<imp-def>
	BCC <BB#6>, 1, %STATUS<imp-use>
    Successors according to CFG: BB#5(0x04000000 / 0x80000000 = 3.12%) BB#6(0x7c000000 / 0x80000000 = 96.88%)

BB#5: derived from LLVM BB %for.cond64.preheader
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#8
	%R25<def> = COPY %R22
	%R26<def> = COPY %R19
    Successors according to CFG: BB#9(?%)

BB#9: derived from LLVM BB %for.body66
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#5 BB#9
	%R27<def> = ADDrr_r32 %R16, %R26, %STATUS<imp-def,dead>
	%R33<def> = LDRf32 %R27<kill>, 0; mem:LD4[%sunkaddr30](tbaa=!2)
	%R27<def> = ADDri_r32 %R25, 4, %STATUS<imp-def,dead>
	%R26<def> = ADDri_r32 %R26<kill>, 4, %STATUS<imp-def,dead>
	%R34<def> = LDRf32 %R25, 0; mem:Volatile LD4[%lsr.iv24](tbaa=!2)
	%R32<def> = LDRi32_r32 %FP, -4; mem:LD4[FixedStack2]
	GID %CONFIG<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %R32<kill>
	GIE %CONFIG<imp-def,dead>
	%R33<def> = FADDrr_r32 %R33<kill>, %R34<kill>, %STATUS<imp-def,dead>
	%R32<def,dead> = CMPri_r32 %R26, 32, %STATUS<imp-def>
	STRf32 %R33<kill>, %R25<kill>, 0; mem:Volatile ST4[%lsr.iv24](tbaa=!2)
	%R25<def> = COPY %R27<kill>
	BCC <BB#9>, 1, %STATUS<imp-use>
    Successors according to CFG: BB#10(0x04000000 / 0x80000000 = 3.12%) BB#9(0x7c000000 / 0x80000000 = 96.88%)

BB#10: derived from LLVM BB %for.end75
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#9
	%R22<def> = ADDri_r32 %R22<kill>, 32, %STATUS<imp-def,dead>
	%R23<def> = ADDri_r32 %R23<kill>, 32, %STATUS<imp-def,dead>
	%R24<def> = ADDri_r32 %R24<kill>, 8, %STATUS<imp-def,dead>
	%R25<def,dead> = CMPrr_r32 %R24, %R3, %STATUS<imp-def>
	BCC <BB#4>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#4(0x7c000000 / 0x80000000 = 96.88%) BB#11(0x04000000 / 0x80000000 = 3.12%)

BB#11: derived from LLVM BB %for.end78
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20
    Predecessors according to CFG: BB#10
	%R2<def> = ADDrr_r32 %R2<kill>, %IP, %STATUS<imp-def,dead>
	%R20<def> = ADDri_r32 %R20<kill>, 1, %STATUS<imp-def,dead>
	%R21<def,dead> = CMPrr_r32 %R20, %R3, %STATUS<imp-def>
	BCC <BB#3>, 1, %STATUS<imp-use>
    Successors according to CFG: BB#12(0x04000000 / 0x80000000 = 3.12%) BB#3(0x7c000000 / 0x80000000 = 96.88%)

BB#12: derived from LLVM BB %for.end81
    Predecessors according to CFG: BB#1 BB#11
	%R0<def> = LDRi32_r32 %FP, -44; mem:LD4[FixedStack1]
	GID
	%CONFIG<def> = MOVTS32_core %R0<kill>
	GIE %CONFIG<imp-use,kill>
	%LR<def> = LDRi64 %SP, 48; flags: FrameSetup
	%SP<def> = ADDri_r32 %SP, 48, %STATUS<imp-def>
	RTS

# End machine code for function matmac.


<----------------->
Analyzing block 4
BB#4: derived from LLVM BB %for.body9.preheader
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#3 BB#10
	%R18<def> = COPY %R19, %D9<imp-use,kill>, %D9<imp-def>
	STRi64 %D9, %FP, -16; mem:ST8[%1+24]
	STRi64 %D9, %FP, -24; mem:ST8[%1+16]
	STRi64 %D9, %FP, -32; mem:ST8[%1+8]
	STRi64 %D9, %FP, -40; mem:ST8[%1]
	%R25<def> = COPY %R23
	%R26<def> = COPY %R19
    Successors according to CFG: BB#6(?%)

<----------------->
Analyzing block 8
BB#8: derived from LLVM BB %for.end60
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#7
	%R25<def> = ADDrr_r32 %R25<kill>, %IP, %STATUS<imp-def,dead>
	%R26<def> = ADDri_r32 %R26<kill>, 1, %STATUS<imp-def,dead>
	%R27<def,dead> = CMPrr_r32 %R26, %R3, %STATUS<imp-def>
	BCC <BB#6>, 1, %STATUS<imp-use>
    Successors according to CFG: BB#5(0x04000000 / 0x80000000 = 3.12%) BB#6(0x7c000000 / 0x80000000 = 96.88%)

<----------------->
Removing branches out of BB#8
# Machine code for function matmac: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=32, align=8, at location [SP-40]
  fi#1: size=4, align=4, at location [SP-44]
  fi#2: size=4, align=4, at location [SP-4]
  fi#3: size=4, align=8, at location [SP-8]
Function Live Ins: %R0, %R1, %R2, %R3

BB#0: 
    Live Ins: %R0 %R1 %R2 %R3
	%SP<def,tied2> = STRi64_pmd %LR, %SP<tied0>, -48; flags: FrameSetup
	%FP<def> = ADDri_r32 %SP, 48, %STATUS<imp-def>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	GID %CONFIG<imp-def>
	%R19<def> = MOVFS32_core %CONFIG, %D9<imp-def>
	STRi32_r32 %R19, %FP, -44; mem:ST4[FixedStack1]
	%IP<def> = MOVi32ri 65535
	%IP<def,tied1> = MOVTi32ri %IP<kill,tied0>, 65521
	%R18<def> = ANDrr_r32 %R19, %IP<kill>, %STATUS<imp-def>, %D9<imp-use,kill>, %D9<imp-def>
	%R19<def,tied1> = MOVTi32ri %R19<tied0>, 72, %D9<imp-use,kill>, %D9<imp-def>
	STRi64 %D9<kill>, %FP, -8; mem:ST4[FixedStack3] ST4[FixedStack2]
	GIE %CONFIG<imp-use,kill>
    Successors according to CFG: BB#1(?%)

BB#1: derived from LLVM BB %entry
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#0
	%IP<def,dead> = CMPri_r32 %R3, 1, %STATUS<imp-def>
	BCC <BB#12>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#2(0x50000000 / 0x80000000 = 62.50%) BB#12(0x30000000 / 0x80000000 = 37.50%)

BB#2: derived from LLVM BB %for.body3.lr.ph.preheader
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#1
	%IP<def> = LSL32ri %R3, 2, %STATUS<imp-def,dead>
	%R1<def> = ADDri_r32 %R1<kill>, 8, %STATUS<imp-def,dead>
	%R16<def> = MOViPTR %FP, -40
	%R17<def> = ADDri_r32 %R16, 8, %STATUS<imp-def,dead>
	%R19<def> = MOVi32ri 0, %D9<imp-def>
	%R20<def> = COPY %R19
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %for.body3.lr.ph
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20
    Predecessors according to CFG: BB#2 BB#11
	%R21<def> = LDRi32_r32 %FP, -8; mem:LD4[FixedStack3]
	GID %CONFIG<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %R21<kill>
	GIE %CONFIG<imp-def,dead>
	%R21<def> = IMULrr_r32 %R20, %R3, %STATUS<imp-def,dead>
	%R21<def> = LSL32ri %R21<kill>, 2, %STATUS<imp-def,dead>
	%R21<def> = ADDrr_r32 %R0, %R21<kill>, %STATUS<imp-def,dead>
	%R22<def> = COPY %R2
	%R23<def> = COPY %R1
	%R24<def> = COPY %R19
    Successors according to CFG: BB#4(?%)

BB#4: derived from LLVM BB %for.body9.preheader
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#3 BB#10
	%R18<def> = COPY %R19, %D9<imp-use,kill>, %D9<imp-def>
	STRi64 %D9, %FP, -16; mem:ST8[%1+24]
	STRi64 %D9, %FP, -24; mem:ST8[%1+16]
	STRi64 %D9, %FP, -32; mem:ST8[%1+8]
	STRi64 %D9, %FP, -40; mem:ST8[%1]
	%R25<def> = COPY %R23
	%R26<def> = COPY %R19
    Successors according to CFG: BB#6(?%)

BB#6: derived from LLVM BB %for.body9
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#4 BB#8
	%R27<def> = LSL32ri %R26, 2, %STATUS<imp-def,dead>
	%R27<def> = ADDrr_r32 %R21, %R27<kill>, %STATUS<imp-def,dead>
	%R27<def> = LDRf32 %R27<kill>, 0; mem:Volatile LD4[%add.ptr10](tbaa=!2)
	%R32<def> = COPY %R17
	%R34<def> = COPY %R25
	%R33<def> = COPY %R19
    Successors according to CFG: BB#7(?%)

BB#7: derived from LLVM BB %for.body13
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26 %R27 %R32 %R33 %R34
    Predecessors according to CFG: BB#6 BB#7
	%R37<def> = LDRf32 %R34, -8; mem:Volatile LD4[%scevgep8](tbaa=!2)
	%R35<def> = ADDri_r32 %R32, 16, %STATUS<imp-def,dead>
	%R36<def> = ADDri_r32 %R34, 16, %STATUS<imp-def,dead>
	%R38<def> = LDRf32 %R34, -4; mem:Volatile LD4[%scevgep9](tbaa=!2)
	%R33<def> = ADDri_r32 %R33<kill>, 4, %STATUS<imp-def,dead>
	%R39<def> = LDRf32 %R34, 0; mem:Volatile LD4[%lsr.iv5](tbaa=!2)
	%R40<def> = LDRf32 %R34<kill>, 4; mem:Volatile LD4[%scevgep7](tbaa=!2)
	%D21<def> = LDRf64 %R32, -8; mem:LD4[%scevgep17](tbaa=!2) LD4[%scevgep15](tbaa=!2)
	%R34<def> = LDRi32_r32 %FP, -4; mem:LD4[FixedStack2]
	GID %CONFIG<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %R34<kill>
	GIE %CONFIG<imp-def,dead>
	%R43<def,tied1> = FMADDrr_r32 %R43<tied0>, %R27, %R37<kill>, %STATUS<imp-def,dead>, %D21<imp-use,kill>, %D21<imp-def>
	%R42<def,tied1> = FMADDrr_r32 %R42<tied0>, %R27, %R38<kill>, %STATUS<imp-def,dead>, %D21<imp-use,kill>, %D21<imp-def>
	%R44<def> = COPY %R43, %D22<imp-def>
	%R45<def> = COPY %R42, %D21<imp-use,kill>, %D22<imp-use,kill>, %D22<imp-def>
	STRf64 %D22<kill>, %R32, -8; mem:ST4[%scevgep17](tbaa=!2) ST4[%scevgep15](tbaa=!2)
	%R34<def> = LDRf32 %R32, 0; mem:LD4[%lsr.iv1214](tbaa=!2)
	%R34<def,tied1> = FMADDrr_r32 %R34<kill,tied0>, %R27, %R39<kill>, %STATUS<imp-def,dead>
	STRf32 %R34<kill>, %R32, 0; mem:ST4[%lsr.iv1214](tbaa=!2)
	%R37<def> = LDRf32 %R32, 4; mem:LD4[%scevgep16](tbaa=!2)
	%R37<def,tied1> = FMADDrr_r32 %R37<kill,tied0>, %R27, %R40<kill>, %STATUS<imp-def,dead>
	%R34<def,dead> = CMPri_r32 %R33, 8, %STATUS<imp-def>
	STRf32 %R37<kill>, %R32<kill>, 4; mem:ST4[%scevgep16](tbaa=!2)
	%R32<def> = COPY %R35<kill>
	%R34<def> = COPY %R36<kill>
	BCC <BB#7>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#7(0x7c000000 / 0x80000000 = 96.88%) BB#8(0x04000000 / 0x80000000 = 3.12%)

BB#8: derived from LLVM BB %for.end60
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#7
	%R25<def> = ADDrr_r32 %R25<kill>, %IP, %STATUS<imp-def,dead>
	%R26<def> = ADDri_r32 %R26<kill>, 1, %STATUS<imp-def,dead>
	%R27<def,dead> = CMPrr_r32 %R26, %R3, %STATUS<imp-def>
    Successors according to CFG: BB#5(0x04000000 / 0x80000000 = 3.12%) BB#6(0x7c000000 / 0x80000000 = 96.88%)

BB#5: derived from LLVM BB %for.cond64.preheader
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#8
	%R25<def> = COPY %R22
	%R26<def> = COPY %R19
    Successors according to CFG: BB#9(?%)

BB#9: derived from LLVM BB %for.body66
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#5 BB#9
	%R27<def> = ADDrr_r32 %R16, %R26, %STATUS<imp-def,dead>
	%R33<def> = LDRf32 %R27<kill>, 0; mem:LD4[%sunkaddr30](tbaa=!2)
	%R27<def> = ADDri_r32 %R25, 4, %STATUS<imp-def,dead>
	%R26<def> = ADDri_r32 %R26<kill>, 4, %STATUS<imp-def,dead>
	%R34<def> = LDRf32 %R25, 0; mem:Volatile LD4[%lsr.iv24](tbaa=!2)
	%R32<def> = LDRi32_r32 %FP, -4; mem:LD4[FixedStack2]
	GID %CONFIG<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %R32<kill>
	GIE %CONFIG<imp-def,dead>
	%R33<def> = FADDrr_r32 %R33<kill>, %R34<kill>, %STATUS<imp-def,dead>
	%R32<def,dead> = CMPri_r32 %R26, 32, %STATUS<imp-def>
	STRf32 %R33<kill>, %R25<kill>, 0; mem:Volatile ST4[%lsr.iv24](tbaa=!2)
	%R25<def> = COPY %R27<kill>
	BCC <BB#9>, 1, %STATUS<imp-use>
    Successors according to CFG: BB#10(0x04000000 / 0x80000000 = 3.12%) BB#9(0x7c000000 / 0x80000000 = 96.88%)

BB#10: derived from LLVM BB %for.end75
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#9
	%R22<def> = ADDri_r32 %R22<kill>, 32, %STATUS<imp-def,dead>
	%R23<def> = ADDri_r32 %R23<kill>, 32, %STATUS<imp-def,dead>
	%R24<def> = ADDri_r32 %R24<kill>, 8, %STATUS<imp-def,dead>
	%R25<def,dead> = CMPrr_r32 %R24, %R3, %STATUS<imp-def>
	BCC <BB#4>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#4(0x7c000000 / 0x80000000 = 96.88%) BB#11(0x04000000 / 0x80000000 = 3.12%)

BB#11: derived from LLVM BB %for.end78
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20
    Predecessors according to CFG: BB#10
	%R2<def> = ADDrr_r32 %R2<kill>, %IP, %STATUS<imp-def,dead>
	%R20<def> = ADDri_r32 %R20<kill>, 1, %STATUS<imp-def,dead>
	%R21<def,dead> = CMPrr_r32 %R20, %R3, %STATUS<imp-def>
	BCC <BB#3>, 1, %STATUS<imp-use>
    Successors according to CFG: BB#12(0x04000000 / 0x80000000 = 3.12%) BB#3(0x7c000000 / 0x80000000 = 96.88%)

BB#12: derived from LLVM BB %for.end81
    Predecessors according to CFG: BB#1 BB#11
	%R0<def> = LDRi32_r32 %FP, -44; mem:LD4[FixedStack1]
	GID
	%CONFIG<def> = MOVTS32_core %R0<kill>
	GIE %CONFIG<imp-use,kill>
	%LR<def> = LDRi64 %SP, 48; flags: FrameSetup
	%SP<def> = ADDri_r32 %SP, 48, %STATUS<imp-def>
	RTS

# End machine code for function matmac.


<----------------->
Inserting branch into BB#8
# Machine code for function matmac: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=32, align=8, at location [SP-40]
  fi#1: size=4, align=4, at location [SP-44]
  fi#2: size=4, align=4, at location [SP-4]
  fi#3: size=4, align=8, at location [SP-8]
Function Live Ins: %R0, %R1, %R2, %R3

BB#0: 
    Live Ins: %R0 %R1 %R2 %R3
	%SP<def,tied2> = STRi64_pmd %LR, %SP<tied0>, -48; flags: FrameSetup
	%FP<def> = ADDri_r32 %SP, 48, %STATUS<imp-def>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	GID %CONFIG<imp-def>
	%R19<def> = MOVFS32_core %CONFIG, %D9<imp-def>
	STRi32_r32 %R19, %FP, -44; mem:ST4[FixedStack1]
	%IP<def> = MOVi32ri 65535
	%IP<def,tied1> = MOVTi32ri %IP<kill,tied0>, 65521
	%R18<def> = ANDrr_r32 %R19, %IP<kill>, %STATUS<imp-def>, %D9<imp-use,kill>, %D9<imp-def>
	%R19<def,tied1> = MOVTi32ri %R19<tied0>, 72, %D9<imp-use,kill>, %D9<imp-def>
	STRi64 %D9<kill>, %FP, -8; mem:ST4[FixedStack3] ST4[FixedStack2]
	GIE %CONFIG<imp-use,kill>
    Successors according to CFG: BB#1(?%)

BB#1: derived from LLVM BB %entry
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#0
	%IP<def,dead> = CMPri_r32 %R3, 1, %STATUS<imp-def>
	BCC <BB#12>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#2(0x50000000 / 0x80000000 = 62.50%) BB#12(0x30000000 / 0x80000000 = 37.50%)

BB#2: derived from LLVM BB %for.body3.lr.ph.preheader
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#1
	%IP<def> = LSL32ri %R3, 2, %STATUS<imp-def,dead>
	%R1<def> = ADDri_r32 %R1<kill>, 8, %STATUS<imp-def,dead>
	%R16<def> = MOViPTR %FP, -40
	%R17<def> = ADDri_r32 %R16, 8, %STATUS<imp-def,dead>
	%R19<def> = MOVi32ri 0, %D9<imp-def>
	%R20<def> = COPY %R19
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %for.body3.lr.ph
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20
    Predecessors according to CFG: BB#2 BB#11
	%R21<def> = LDRi32_r32 %FP, -8; mem:LD4[FixedStack3]
	GID %CONFIG<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %R21<kill>
	GIE %CONFIG<imp-def,dead>
	%R21<def> = IMULrr_r32 %R20, %R3, %STATUS<imp-def,dead>
	%R21<def> = LSL32ri %R21<kill>, 2, %STATUS<imp-def,dead>
	%R21<def> = ADDrr_r32 %R0, %R21<kill>, %STATUS<imp-def,dead>
	%R22<def> = COPY %R2
	%R23<def> = COPY %R1
	%R24<def> = COPY %R19
    Successors according to CFG: BB#4(?%)

BB#4: derived from LLVM BB %for.body9.preheader
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#3 BB#10
	%R18<def> = COPY %R19, %D9<imp-use,kill>, %D9<imp-def>
	STRi64 %D9, %FP, -16; mem:ST8[%1+24]
	STRi64 %D9, %FP, -24; mem:ST8[%1+16]
	STRi64 %D9, %FP, -32; mem:ST8[%1+8]
	STRi64 %D9, %FP, -40; mem:ST8[%1]
	%R25<def> = COPY %R23
	%R26<def> = COPY %R19
    Successors according to CFG: BB#6(?%)

BB#6: derived from LLVM BB %for.body9
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#4 BB#8
	%R27<def> = LSL32ri %R26, 2, %STATUS<imp-def,dead>
	%R27<def> = ADDrr_r32 %R21, %R27<kill>, %STATUS<imp-def,dead>
	%R27<def> = LDRf32 %R27<kill>, 0; mem:Volatile LD4[%add.ptr10](tbaa=!2)
	%R32<def> = COPY %R17
	%R34<def> = COPY %R25
	%R33<def> = COPY %R19
    Successors according to CFG: BB#7(?%)

BB#7: derived from LLVM BB %for.body13
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26 %R27 %R32 %R33 %R34
    Predecessors according to CFG: BB#6 BB#7
	%R37<def> = LDRf32 %R34, -8; mem:Volatile LD4[%scevgep8](tbaa=!2)
	%R35<def> = ADDri_r32 %R32, 16, %STATUS<imp-def,dead>
	%R36<def> = ADDri_r32 %R34, 16, %STATUS<imp-def,dead>
	%R38<def> = LDRf32 %R34, -4; mem:Volatile LD4[%scevgep9](tbaa=!2)
	%R33<def> = ADDri_r32 %R33<kill>, 4, %STATUS<imp-def,dead>
	%R39<def> = LDRf32 %R34, 0; mem:Volatile LD4[%lsr.iv5](tbaa=!2)
	%R40<def> = LDRf32 %R34<kill>, 4; mem:Volatile LD4[%scevgep7](tbaa=!2)
	%D21<def> = LDRf64 %R32, -8; mem:LD4[%scevgep17](tbaa=!2) LD4[%scevgep15](tbaa=!2)
	%R34<def> = LDRi32_r32 %FP, -4; mem:LD4[FixedStack2]
	GID %CONFIG<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %R34<kill>
	GIE %CONFIG<imp-def,dead>
	%R43<def,tied1> = FMADDrr_r32 %R43<tied0>, %R27, %R37<kill>, %STATUS<imp-def,dead>, %D21<imp-use,kill>, %D21<imp-def>
	%R42<def,tied1> = FMADDrr_r32 %R42<tied0>, %R27, %R38<kill>, %STATUS<imp-def,dead>, %D21<imp-use,kill>, %D21<imp-def>
	%R44<def> = COPY %R43, %D22<imp-def>
	%R45<def> = COPY %R42, %D21<imp-use,kill>, %D22<imp-use,kill>, %D22<imp-def>
	STRf64 %D22<kill>, %R32, -8; mem:ST4[%scevgep17](tbaa=!2) ST4[%scevgep15](tbaa=!2)
	%R34<def> = LDRf32 %R32, 0; mem:LD4[%lsr.iv1214](tbaa=!2)
	%R34<def,tied1> = FMADDrr_r32 %R34<kill,tied0>, %R27, %R39<kill>, %STATUS<imp-def,dead>
	STRf32 %R34<kill>, %R32, 0; mem:ST4[%lsr.iv1214](tbaa=!2)
	%R37<def> = LDRf32 %R32, 4; mem:LD4[%scevgep16](tbaa=!2)
	%R37<def,tied1> = FMADDrr_r32 %R37<kill,tied0>, %R27, %R40<kill>, %STATUS<imp-def,dead>
	%R34<def,dead> = CMPri_r32 %R33, 8, %STATUS<imp-def>
	STRf32 %R37<kill>, %R32<kill>, 4; mem:ST4[%scevgep16](tbaa=!2)
	%R32<def> = COPY %R35<kill>
	%R34<def> = COPY %R36<kill>
	BCC <BB#7>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#7(0x7c000000 / 0x80000000 = 96.88%) BB#8(0x04000000 / 0x80000000 = 3.12%)

BB#8: derived from LLVM BB %for.end60
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#7
	%R25<def> = ADDrr_r32 %R25<kill>, %IP, %STATUS<imp-def,dead>
	%R26<def> = ADDri_r32 %R26<kill>, 1, %STATUS<imp-def,dead>
	%R27<def,dead> = CMPrr_r32 %R26, %R3, %STATUS<imp-def>
	BCC <BB#5>, 0, %STATUS<imp-use>
    Successors according to CFG: BB#5(0x04000000 / 0x80000000 = 3.12%) BB#6(0x7c000000 / 0x80000000 = 96.88%)

BB#5: derived from LLVM BB %for.cond64.preheader
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#8
	%R25<def> = COPY %R22
	%R26<def> = COPY %R19
    Successors according to CFG: BB#9(?%)

BB#9: derived from LLVM BB %for.body66
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#5 BB#9
	%R27<def> = ADDrr_r32 %R16, %R26, %STATUS<imp-def,dead>
	%R33<def> = LDRf32 %R27<kill>, 0; mem:LD4[%sunkaddr30](tbaa=!2)
	%R27<def> = ADDri_r32 %R25, 4, %STATUS<imp-def,dead>
	%R26<def> = ADDri_r32 %R26<kill>, 4, %STATUS<imp-def,dead>
	%R34<def> = LDRf32 %R25, 0; mem:Volatile LD4[%lsr.iv24](tbaa=!2)
	%R32<def> = LDRi32_r32 %FP, -4; mem:LD4[FixedStack2]
	GID %CONFIG<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %R32<kill>
	GIE %CONFIG<imp-def,dead>
	%R33<def> = FADDrr_r32 %R33<kill>, %R34<kill>, %STATUS<imp-def,dead>
	%R32<def,dead> = CMPri_r32 %R26, 32, %STATUS<imp-def>
	STRf32 %R33<kill>, %R25<kill>, 0; mem:Volatile ST4[%lsr.iv24](tbaa=!2)
	%R25<def> = COPY %R27<kill>
	BCC <BB#9>, 1, %STATUS<imp-use>
    Successors according to CFG: BB#10(0x04000000 / 0x80000000 = 3.12%) BB#9(0x7c000000 / 0x80000000 = 96.88%)

BB#10: derived from LLVM BB %for.end75
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#9
	%R22<def> = ADDri_r32 %R22<kill>, 32, %STATUS<imp-def,dead>
	%R23<def> = ADDri_r32 %R23<kill>, 32, %STATUS<imp-def,dead>
	%R24<def> = ADDri_r32 %R24<kill>, 8, %STATUS<imp-def,dead>
	%R25<def,dead> = CMPrr_r32 %R24, %R3, %STATUS<imp-def>
	BCC <BB#4>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#4(0x7c000000 / 0x80000000 = 96.88%) BB#11(0x04000000 / 0x80000000 = 3.12%)

BB#11: derived from LLVM BB %for.end78
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20
    Predecessors according to CFG: BB#10
	%R2<def> = ADDrr_r32 %R2<kill>, %IP, %STATUS<imp-def,dead>
	%R20<def> = ADDri_r32 %R20<kill>, 1, %STATUS<imp-def,dead>
	%R21<def,dead> = CMPrr_r32 %R20, %R3, %STATUS<imp-def>
	BCC <BB#3>, 1, %STATUS<imp-use>
    Successors according to CFG: BB#12(0x04000000 / 0x80000000 = 3.12%) BB#3(0x7c000000 / 0x80000000 = 96.88%)

BB#12: derived from LLVM BB %for.end81
    Predecessors according to CFG: BB#1 BB#11
	%R0<def> = LDRi32_r32 %FP, -44; mem:LD4[FixedStack1]
	GID
	%CONFIG<def> = MOVTS32_core %R0<kill>
	GIE %CONFIG<imp-use,kill>
	%LR<def> = LDRi64 %SP, 48; flags: FrameSetup
	%SP<def> = ADDri_r32 %SP, 48, %STATUS<imp-def>
	RTS

# End machine code for function matmac.


TryTailMergeBlocks: BB#4, BB#8
  with successor BB#6
  which has fall-through from BB#4
Looking for common tails of at least 3 instructions

<----------------->
Analyzing block 8
BB#8: derived from LLVM BB %for.end60
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#7
	%R25<def> = ADDrr_r32 %R25<kill>, %IP, %STATUS<imp-def,dead>
	%R26<def> = ADDri_r32 %R26<kill>, 1, %STATUS<imp-def,dead>
	%R27<def,dead> = CMPrr_r32 %R26, %R3, %STATUS<imp-def>
	BCC <BB#5>, 0, %STATUS<imp-use>
    Successors according to CFG: BB#5(0x04000000 / 0x80000000 = 3.12%) BB#6(0x7c000000 / 0x80000000 = 96.88%)

<----------------->
Removing branches out of BB#8
# Machine code for function matmac: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=32, align=8, at location [SP-40]
  fi#1: size=4, align=4, at location [SP-44]
  fi#2: size=4, align=4, at location [SP-4]
  fi#3: size=4, align=8, at location [SP-8]
Function Live Ins: %R0, %R1, %R2, %R3

BB#0: 
    Live Ins: %R0 %R1 %R2 %R3
	%SP<def,tied2> = STRi64_pmd %LR, %SP<tied0>, -48; flags: FrameSetup
	%FP<def> = ADDri_r32 %SP, 48, %STATUS<imp-def>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	GID %CONFIG<imp-def>
	%R19<def> = MOVFS32_core %CONFIG, %D9<imp-def>
	STRi32_r32 %R19, %FP, -44; mem:ST4[FixedStack1]
	%IP<def> = MOVi32ri 65535
	%IP<def,tied1> = MOVTi32ri %IP<kill,tied0>, 65521
	%R18<def> = ANDrr_r32 %R19, %IP<kill>, %STATUS<imp-def>, %D9<imp-use,kill>, %D9<imp-def>
	%R19<def,tied1> = MOVTi32ri %R19<tied0>, 72, %D9<imp-use,kill>, %D9<imp-def>
	STRi64 %D9<kill>, %FP, -8; mem:ST4[FixedStack3] ST4[FixedStack2]
	GIE %CONFIG<imp-use,kill>
    Successors according to CFG: BB#1(?%)

BB#1: derived from LLVM BB %entry
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#0
	%IP<def,dead> = CMPri_r32 %R3, 1, %STATUS<imp-def>
	BCC <BB#12>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#2(0x50000000 / 0x80000000 = 62.50%) BB#12(0x30000000 / 0x80000000 = 37.50%)

BB#2: derived from LLVM BB %for.body3.lr.ph.preheader
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#1
	%IP<def> = LSL32ri %R3, 2, %STATUS<imp-def,dead>
	%R1<def> = ADDri_r32 %R1<kill>, 8, %STATUS<imp-def,dead>
	%R16<def> = MOViPTR %FP, -40
	%R17<def> = ADDri_r32 %R16, 8, %STATUS<imp-def,dead>
	%R19<def> = MOVi32ri 0, %D9<imp-def>
	%R20<def> = COPY %R19
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %for.body3.lr.ph
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20
    Predecessors according to CFG: BB#2 BB#11
	%R21<def> = LDRi32_r32 %FP, -8; mem:LD4[FixedStack3]
	GID %CONFIG<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %R21<kill>
	GIE %CONFIG<imp-def,dead>
	%R21<def> = IMULrr_r32 %R20, %R3, %STATUS<imp-def,dead>
	%R21<def> = LSL32ri %R21<kill>, 2, %STATUS<imp-def,dead>
	%R21<def> = ADDrr_r32 %R0, %R21<kill>, %STATUS<imp-def,dead>
	%R22<def> = COPY %R2
	%R23<def> = COPY %R1
	%R24<def> = COPY %R19
    Successors according to CFG: BB#4(?%)

BB#4: derived from LLVM BB %for.body9.preheader
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#3 BB#10
	%R18<def> = COPY %R19, %D9<imp-use,kill>, %D9<imp-def>
	STRi64 %D9, %FP, -16; mem:ST8[%1+24]
	STRi64 %D9, %FP, -24; mem:ST8[%1+16]
	STRi64 %D9, %FP, -32; mem:ST8[%1+8]
	STRi64 %D9, %FP, -40; mem:ST8[%1]
	%R25<def> = COPY %R23
	%R26<def> = COPY %R19
    Successors according to CFG: BB#6(?%)

BB#6: derived from LLVM BB %for.body9
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#4 BB#8
	%R27<def> = LSL32ri %R26, 2, %STATUS<imp-def,dead>
	%R27<def> = ADDrr_r32 %R21, %R27<kill>, %STATUS<imp-def,dead>
	%R27<def> = LDRf32 %R27<kill>, 0; mem:Volatile LD4[%add.ptr10](tbaa=!2)
	%R32<def> = COPY %R17
	%R34<def> = COPY %R25
	%R33<def> = COPY %R19
    Successors according to CFG: BB#7(?%)

BB#7: derived from LLVM BB %for.body13
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26 %R27 %R32 %R33 %R34
    Predecessors according to CFG: BB#6 BB#7
	%R37<def> = LDRf32 %R34, -8; mem:Volatile LD4[%scevgep8](tbaa=!2)
	%R35<def> = ADDri_r32 %R32, 16, %STATUS<imp-def,dead>
	%R36<def> = ADDri_r32 %R34, 16, %STATUS<imp-def,dead>
	%R38<def> = LDRf32 %R34, -4; mem:Volatile LD4[%scevgep9](tbaa=!2)
	%R33<def> = ADDri_r32 %R33<kill>, 4, %STATUS<imp-def,dead>
	%R39<def> = LDRf32 %R34, 0; mem:Volatile LD4[%lsr.iv5](tbaa=!2)
	%R40<def> = LDRf32 %R34<kill>, 4; mem:Volatile LD4[%scevgep7](tbaa=!2)
	%D21<def> = LDRf64 %R32, -8; mem:LD4[%scevgep17](tbaa=!2) LD4[%scevgep15](tbaa=!2)
	%R34<def> = LDRi32_r32 %FP, -4; mem:LD4[FixedStack2]
	GID %CONFIG<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %R34<kill>
	GIE %CONFIG<imp-def,dead>
	%R43<def,tied1> = FMADDrr_r32 %R43<tied0>, %R27, %R37<kill>, %STATUS<imp-def,dead>, %D21<imp-use,kill>, %D21<imp-def>
	%R42<def,tied1> = FMADDrr_r32 %R42<tied0>, %R27, %R38<kill>, %STATUS<imp-def,dead>, %D21<imp-use,kill>, %D21<imp-def>
	%R44<def> = COPY %R43, %D22<imp-def>
	%R45<def> = COPY %R42, %D21<imp-use,kill>, %D22<imp-use,kill>, %D22<imp-def>
	STRf64 %D22<kill>, %R32, -8; mem:ST4[%scevgep17](tbaa=!2) ST4[%scevgep15](tbaa=!2)
	%R34<def> = LDRf32 %R32, 0; mem:LD4[%lsr.iv1214](tbaa=!2)
	%R34<def,tied1> = FMADDrr_r32 %R34<kill,tied0>, %R27, %R39<kill>, %STATUS<imp-def,dead>
	STRf32 %R34<kill>, %R32, 0; mem:ST4[%lsr.iv1214](tbaa=!2)
	%R37<def> = LDRf32 %R32, 4; mem:LD4[%scevgep16](tbaa=!2)
	%R37<def,tied1> = FMADDrr_r32 %R37<kill,tied0>, %R27, %R40<kill>, %STATUS<imp-def,dead>
	%R34<def,dead> = CMPri_r32 %R33, 8, %STATUS<imp-def>
	STRf32 %R37<kill>, %R32<kill>, 4; mem:ST4[%scevgep16](tbaa=!2)
	%R32<def> = COPY %R35<kill>
	%R34<def> = COPY %R36<kill>
	BCC <BB#7>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#7(0x7c000000 / 0x80000000 = 96.88%) BB#8(0x04000000 / 0x80000000 = 3.12%)

BB#8: derived from LLVM BB %for.end60
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#7
	%R25<def> = ADDrr_r32 %R25<kill>, %IP, %STATUS<imp-def,dead>
	%R26<def> = ADDri_r32 %R26<kill>, 1, %STATUS<imp-def,dead>
	%R27<def,dead> = CMPrr_r32 %R26, %R3, %STATUS<imp-def>
    Successors according to CFG: BB#5(0x04000000 / 0x80000000 = 3.12%) BB#6(0x7c000000 / 0x80000000 = 96.88%)

BB#5: derived from LLVM BB %for.cond64.preheader
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#8
	%R25<def> = COPY %R22
	%R26<def> = COPY %R19
    Successors according to CFG: BB#9(?%)

BB#9: derived from LLVM BB %for.body66
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#5 BB#9
	%R27<def> = ADDrr_r32 %R16, %R26, %STATUS<imp-def,dead>
	%R33<def> = LDRf32 %R27<kill>, 0; mem:LD4[%sunkaddr30](tbaa=!2)
	%R27<def> = ADDri_r32 %R25, 4, %STATUS<imp-def,dead>
	%R26<def> = ADDri_r32 %R26<kill>, 4, %STATUS<imp-def,dead>
	%R34<def> = LDRf32 %R25, 0; mem:Volatile LD4[%lsr.iv24](tbaa=!2)
	%R32<def> = LDRi32_r32 %FP, -4; mem:LD4[FixedStack2]
	GID %CONFIG<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %R32<kill>
	GIE %CONFIG<imp-def,dead>
	%R33<def> = FADDrr_r32 %R33<kill>, %R34<kill>, %STATUS<imp-def,dead>
	%R32<def,dead> = CMPri_r32 %R26, 32, %STATUS<imp-def>
	STRf32 %R33<kill>, %R25<kill>, 0; mem:Volatile ST4[%lsr.iv24](tbaa=!2)
	%R25<def> = COPY %R27<kill>
	BCC <BB#9>, 1, %STATUS<imp-use>
    Successors according to CFG: BB#10(0x04000000 / 0x80000000 = 3.12%) BB#9(0x7c000000 / 0x80000000 = 96.88%)

BB#10: derived from LLVM BB %for.end75
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#9
	%R22<def> = ADDri_r32 %R22<kill>, 32, %STATUS<imp-def,dead>
	%R23<def> = ADDri_r32 %R23<kill>, 32, %STATUS<imp-def,dead>
	%R24<def> = ADDri_r32 %R24<kill>, 8, %STATUS<imp-def,dead>
	%R25<def,dead> = CMPrr_r32 %R24, %R3, %STATUS<imp-def>
	BCC <BB#4>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#4(0x7c000000 / 0x80000000 = 96.88%) BB#11(0x04000000 / 0x80000000 = 3.12%)

BB#11: derived from LLVM BB %for.end78
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20
    Predecessors according to CFG: BB#10
	%R2<def> = ADDrr_r32 %R2<kill>, %IP, %STATUS<imp-def,dead>
	%R20<def> = ADDri_r32 %R20<kill>, 1, %STATUS<imp-def,dead>
	%R21<def,dead> = CMPrr_r32 %R20, %R3, %STATUS<imp-def>
	BCC <BB#3>, 1, %STATUS<imp-use>
    Successors according to CFG: BB#12(0x04000000 / 0x80000000 = 3.12%) BB#3(0x7c000000 / 0x80000000 = 96.88%)

BB#12: derived from LLVM BB %for.end81
    Predecessors according to CFG: BB#1 BB#11
	%R0<def> = LDRi32_r32 %FP, -44; mem:LD4[FixedStack1]
	GID
	%CONFIG<def> = MOVTS32_core %R0<kill>
	GIE %CONFIG<imp-use,kill>
	%LR<def> = LDRi64 %SP, 48; flags: FrameSetup
	%SP<def> = ADDri_r32 %SP, 48, %STATUS<imp-def>
	RTS

# End machine code for function matmac.


<----------------->
Inserting branch into BB#8
# Machine code for function matmac: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=32, align=8, at location [SP-40]
  fi#1: size=4, align=4, at location [SP-44]
  fi#2: size=4, align=4, at location [SP-4]
  fi#3: size=4, align=8, at location [SP-8]
Function Live Ins: %R0, %R1, %R2, %R3

BB#0: 
    Live Ins: %R0 %R1 %R2 %R3
	%SP<def,tied2> = STRi64_pmd %LR, %SP<tied0>, -48; flags: FrameSetup
	%FP<def> = ADDri_r32 %SP, 48, %STATUS<imp-def>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	GID %CONFIG<imp-def>
	%R19<def> = MOVFS32_core %CONFIG, %D9<imp-def>
	STRi32_r32 %R19, %FP, -44; mem:ST4[FixedStack1]
	%IP<def> = MOVi32ri 65535
	%IP<def,tied1> = MOVTi32ri %IP<kill,tied0>, 65521
	%R18<def> = ANDrr_r32 %R19, %IP<kill>, %STATUS<imp-def>, %D9<imp-use,kill>, %D9<imp-def>
	%R19<def,tied1> = MOVTi32ri %R19<tied0>, 72, %D9<imp-use,kill>, %D9<imp-def>
	STRi64 %D9<kill>, %FP, -8; mem:ST4[FixedStack3] ST4[FixedStack2]
	GIE %CONFIG<imp-use,kill>
    Successors according to CFG: BB#1(?%)

BB#1: derived from LLVM BB %entry
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#0
	%IP<def,dead> = CMPri_r32 %R3, 1, %STATUS<imp-def>
	BCC <BB#12>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#2(0x50000000 / 0x80000000 = 62.50%) BB#12(0x30000000 / 0x80000000 = 37.50%)

BB#2: derived from LLVM BB %for.body3.lr.ph.preheader
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#1
	%IP<def> = LSL32ri %R3, 2, %STATUS<imp-def,dead>
	%R1<def> = ADDri_r32 %R1<kill>, 8, %STATUS<imp-def,dead>
	%R16<def> = MOViPTR %FP, -40
	%R17<def> = ADDri_r32 %R16, 8, %STATUS<imp-def,dead>
	%R19<def> = MOVi32ri 0, %D9<imp-def>
	%R20<def> = COPY %R19
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %for.body3.lr.ph
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20
    Predecessors according to CFG: BB#2 BB#11
	%R21<def> = LDRi32_r32 %FP, -8; mem:LD4[FixedStack3]
	GID %CONFIG<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %R21<kill>
	GIE %CONFIG<imp-def,dead>
	%R21<def> = IMULrr_r32 %R20, %R3, %STATUS<imp-def,dead>
	%R21<def> = LSL32ri %R21<kill>, 2, %STATUS<imp-def,dead>
	%R21<def> = ADDrr_r32 %R0, %R21<kill>, %STATUS<imp-def,dead>
	%R22<def> = COPY %R2
	%R23<def> = COPY %R1
	%R24<def> = COPY %R19
    Successors according to CFG: BB#4(?%)

BB#4: derived from LLVM BB %for.body9.preheader
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#3 BB#10
	%R18<def> = COPY %R19, %D9<imp-use,kill>, %D9<imp-def>
	STRi64 %D9, %FP, -16; mem:ST8[%1+24]
	STRi64 %D9, %FP, -24; mem:ST8[%1+16]
	STRi64 %D9, %FP, -32; mem:ST8[%1+8]
	STRi64 %D9, %FP, -40; mem:ST8[%1]
	%R25<def> = COPY %R23
	%R26<def> = COPY %R19
    Successors according to CFG: BB#6(?%)

BB#6: derived from LLVM BB %for.body9
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#4 BB#8
	%R27<def> = LSL32ri %R26, 2, %STATUS<imp-def,dead>
	%R27<def> = ADDrr_r32 %R21, %R27<kill>, %STATUS<imp-def,dead>
	%R27<def> = LDRf32 %R27<kill>, 0; mem:Volatile LD4[%add.ptr10](tbaa=!2)
	%R32<def> = COPY %R17
	%R34<def> = COPY %R25
	%R33<def> = COPY %R19
    Successors according to CFG: BB#7(?%)

BB#7: derived from LLVM BB %for.body13
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26 %R27 %R32 %R33 %R34
    Predecessors according to CFG: BB#6 BB#7
	%R37<def> = LDRf32 %R34, -8; mem:Volatile LD4[%scevgep8](tbaa=!2)
	%R35<def> = ADDri_r32 %R32, 16, %STATUS<imp-def,dead>
	%R36<def> = ADDri_r32 %R34, 16, %STATUS<imp-def,dead>
	%R38<def> = LDRf32 %R34, -4; mem:Volatile LD4[%scevgep9](tbaa=!2)
	%R33<def> = ADDri_r32 %R33<kill>, 4, %STATUS<imp-def,dead>
	%R39<def> = LDRf32 %R34, 0; mem:Volatile LD4[%lsr.iv5](tbaa=!2)
	%R40<def> = LDRf32 %R34<kill>, 4; mem:Volatile LD4[%scevgep7](tbaa=!2)
	%D21<def> = LDRf64 %R32, -8; mem:LD4[%scevgep17](tbaa=!2) LD4[%scevgep15](tbaa=!2)
	%R34<def> = LDRi32_r32 %FP, -4; mem:LD4[FixedStack2]
	GID %CONFIG<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %R34<kill>
	GIE %CONFIG<imp-def,dead>
	%R43<def,tied1> = FMADDrr_r32 %R43<tied0>, %R27, %R37<kill>, %STATUS<imp-def,dead>, %D21<imp-use,kill>, %D21<imp-def>
	%R42<def,tied1> = FMADDrr_r32 %R42<tied0>, %R27, %R38<kill>, %STATUS<imp-def,dead>, %D21<imp-use,kill>, %D21<imp-def>
	%R44<def> = COPY %R43, %D22<imp-def>
	%R45<def> = COPY %R42, %D21<imp-use,kill>, %D22<imp-use,kill>, %D22<imp-def>
	STRf64 %D22<kill>, %R32, -8; mem:ST4[%scevgep17](tbaa=!2) ST4[%scevgep15](tbaa=!2)
	%R34<def> = LDRf32 %R32, 0; mem:LD4[%lsr.iv1214](tbaa=!2)
	%R34<def,tied1> = FMADDrr_r32 %R34<kill,tied0>, %R27, %R39<kill>, %STATUS<imp-def,dead>
	STRf32 %R34<kill>, %R32, 0; mem:ST4[%lsr.iv1214](tbaa=!2)
	%R37<def> = LDRf32 %R32, 4; mem:LD4[%scevgep16](tbaa=!2)
	%R37<def,tied1> = FMADDrr_r32 %R37<kill,tied0>, %R27, %R40<kill>, %STATUS<imp-def,dead>
	%R34<def,dead> = CMPri_r32 %R33, 8, %STATUS<imp-def>
	STRf32 %R37<kill>, %R32<kill>, 4; mem:ST4[%scevgep16](tbaa=!2)
	%R32<def> = COPY %R35<kill>
	%R34<def> = COPY %R36<kill>
	BCC <BB#7>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#7(0x7c000000 / 0x80000000 = 96.88%) BB#8(0x04000000 / 0x80000000 = 3.12%)

BB#8: derived from LLVM BB %for.end60
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#7
	%R25<def> = ADDrr_r32 %R25<kill>, %IP, %STATUS<imp-def,dead>
	%R26<def> = ADDri_r32 %R26<kill>, 1, %STATUS<imp-def,dead>
	%R27<def,dead> = CMPrr_r32 %R26, %R3, %STATUS<imp-def>
	BCC <BB#6>, 1, %STATUS<imp-use>
    Successors according to CFG: BB#5(0x04000000 / 0x80000000 = 3.12%) BB#6(0x7c000000 / 0x80000000 = 96.88%)

BB#5: derived from LLVM BB %for.cond64.preheader
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#8
	%R25<def> = COPY %R22
	%R26<def> = COPY %R19
    Successors according to CFG: BB#9(?%)

BB#9: derived from LLVM BB %for.body66
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#5 BB#9
	%R27<def> = ADDrr_r32 %R16, %R26, %STATUS<imp-def,dead>
	%R33<def> = LDRf32 %R27<kill>, 0; mem:LD4[%sunkaddr30](tbaa=!2)
	%R27<def> = ADDri_r32 %R25, 4, %STATUS<imp-def,dead>
	%R26<def> = ADDri_r32 %R26<kill>, 4, %STATUS<imp-def,dead>
	%R34<def> = LDRf32 %R25, 0; mem:Volatile LD4[%lsr.iv24](tbaa=!2)
	%R32<def> = LDRi32_r32 %FP, -4; mem:LD4[FixedStack2]
	GID %CONFIG<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %R32<kill>
	GIE %CONFIG<imp-def,dead>
	%R33<def> = FADDrr_r32 %R33<kill>, %R34<kill>, %STATUS<imp-def,dead>
	%R32<def,dead> = CMPri_r32 %R26, 32, %STATUS<imp-def>
	STRf32 %R33<kill>, %R25<kill>, 0; mem:Volatile ST4[%lsr.iv24](tbaa=!2)
	%R25<def> = COPY %R27<kill>
	BCC <BB#9>, 1, %STATUS<imp-use>
    Successors according to CFG: BB#10(0x04000000 / 0x80000000 = 3.12%) BB#9(0x7c000000 / 0x80000000 = 96.88%)

BB#10: derived from LLVM BB %for.end75
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#9
	%R22<def> = ADDri_r32 %R22<kill>, 32, %STATUS<imp-def,dead>
	%R23<def> = ADDri_r32 %R23<kill>, 32, %STATUS<imp-def,dead>
	%R24<def> = ADDri_r32 %R24<kill>, 8, %STATUS<imp-def,dead>
	%R25<def,dead> = CMPrr_r32 %R24, %R3, %STATUS<imp-def>
	BCC <BB#4>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#4(0x7c000000 / 0x80000000 = 96.88%) BB#11(0x04000000 / 0x80000000 = 3.12%)

BB#11: derived from LLVM BB %for.end78
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20
    Predecessors according to CFG: BB#10
	%R2<def> = ADDrr_r32 %R2<kill>, %IP, %STATUS<imp-def,dead>
	%R20<def> = ADDri_r32 %R20<kill>, 1, %STATUS<imp-def,dead>
	%R21<def,dead> = CMPrr_r32 %R20, %R3, %STATUS<imp-def>
	BCC <BB#3>, 1, %STATUS<imp-use>
    Successors according to CFG: BB#12(0x04000000 / 0x80000000 = 3.12%) BB#3(0x7c000000 / 0x80000000 = 96.88%)

BB#12: derived from LLVM BB %for.end81
    Predecessors according to CFG: BB#1 BB#11
	%R0<def> = LDRi32_r32 %FP, -44; mem:LD4[FixedStack1]
	GID
	%CONFIG<def> = MOVTS32_core %R0<kill>
	GIE %CONFIG<imp-use,kill>
	%LR<def> = LDRi64 %SP, 48; flags: FrameSetup
	%SP<def> = ADDri_r32 %SP, 48, %STATUS<imp-def>
	RTS

# End machine code for function matmac.


<----------------->
Analyzing block 6
BB#6: derived from LLVM BB %for.body9
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#4 BB#8
	%R27<def> = LSL32ri %R26, 2, %STATUS<imp-def,dead>
	%R27<def> = ADDrr_r32 %R21, %R27<kill>, %STATUS<imp-def,dead>
	%R27<def> = LDRf32 %R27<kill>, 0; mem:Volatile LD4[%add.ptr10](tbaa=!2)
	%R32<def> = COPY %R17
	%R34<def> = COPY %R25
	%R33<def> = COPY %R19
    Successors according to CFG: BB#7(?%)

<----------------->
Analyzing block 5
BB#5: derived from LLVM BB %for.cond64.preheader
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#8
	%R25<def> = COPY %R22
	%R26<def> = COPY %R19
    Successors according to CFG: BB#9(?%)

<----------------->
Analyzing block 1
BB#1: derived from LLVM BB %entry
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#0
	%IP<def,dead> = CMPri_r32 %R3, 1, %STATUS<imp-def>
	BCC <BB#12>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#2(0x50000000 / 0x80000000 = 62.50%) BB#12(0x30000000 / 0x80000000 = 37.50%)

<----------------->
Removing branches out of BB#1
# Machine code for function matmac: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=32, align=8, at location [SP-40]
  fi#1: size=4, align=4, at location [SP-44]
  fi#2: size=4, align=4, at location [SP-4]
  fi#3: size=4, align=8, at location [SP-8]
Function Live Ins: %R0, %R1, %R2, %R3

BB#0: 
    Live Ins: %R0 %R1 %R2 %R3
	%SP<def,tied2> = STRi64_pmd %LR, %SP<tied0>, -48; flags: FrameSetup
	%FP<def> = ADDri_r32 %SP, 48, %STATUS<imp-def>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	GID %CONFIG<imp-def>
	%R19<def> = MOVFS32_core %CONFIG, %D9<imp-def>
	STRi32_r32 %R19, %FP, -44; mem:ST4[FixedStack1]
	%IP<def> = MOVi32ri 65535
	%IP<def,tied1> = MOVTi32ri %IP<kill,tied0>, 65521
	%R18<def> = ANDrr_r32 %R19, %IP<kill>, %STATUS<imp-def>, %D9<imp-use,kill>, %D9<imp-def>
	%R19<def,tied1> = MOVTi32ri %R19<tied0>, 72, %D9<imp-use,kill>, %D9<imp-def>
	STRi64 %D9<kill>, %FP, -8; mem:ST4[FixedStack3] ST4[FixedStack2]
	GIE %CONFIG<imp-use,kill>
    Successors according to CFG: BB#1(?%)

BB#1: derived from LLVM BB %entry
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#0
	%IP<def,dead> = CMPri_r32 %R3, 1, %STATUS<imp-def>
    Successors according to CFG: BB#2(0x50000000 / 0x80000000 = 62.50%) BB#12(0x30000000 / 0x80000000 = 37.50%)

BB#2: derived from LLVM BB %for.body3.lr.ph.preheader
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#1
	%IP<def> = LSL32ri %R3, 2, %STATUS<imp-def,dead>
	%R1<def> = ADDri_r32 %R1<kill>, 8, %STATUS<imp-def,dead>
	%R16<def> = MOViPTR %FP, -40
	%R17<def> = ADDri_r32 %R16, 8, %STATUS<imp-def,dead>
	%R19<def> = MOVi32ri 0, %D9<imp-def>
	%R20<def> = COPY %R19
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %for.body3.lr.ph
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20
    Predecessors according to CFG: BB#2 BB#11
	%R21<def> = LDRi32_r32 %FP, -8; mem:LD4[FixedStack3]
	GID %CONFIG<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %R21<kill>
	GIE %CONFIG<imp-def,dead>
	%R21<def> = IMULrr_r32 %R20, %R3, %STATUS<imp-def,dead>
	%R21<def> = LSL32ri %R21<kill>, 2, %STATUS<imp-def,dead>
	%R21<def> = ADDrr_r32 %R0, %R21<kill>, %STATUS<imp-def,dead>
	%R22<def> = COPY %R2
	%R23<def> = COPY %R1
	%R24<def> = COPY %R19
    Successors according to CFG: BB#4(?%)

BB#4: derived from LLVM BB %for.body9.preheader
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#3 BB#10
	%R18<def> = COPY %R19, %D9<imp-use,kill>, %D9<imp-def>
	STRi64 %D9, %FP, -16; mem:ST8[%1+24]
	STRi64 %D9, %FP, -24; mem:ST8[%1+16]
	STRi64 %D9, %FP, -32; mem:ST8[%1+8]
	STRi64 %D9, %FP, -40; mem:ST8[%1]
	%R25<def> = COPY %R23
	%R26<def> = COPY %R19
    Successors according to CFG: BB#6(?%)

BB#6: derived from LLVM BB %for.body9
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#4 BB#8
	%R27<def> = LSL32ri %R26, 2, %STATUS<imp-def,dead>
	%R27<def> = ADDrr_r32 %R21, %R27<kill>, %STATUS<imp-def,dead>
	%R27<def> = LDRf32 %R27<kill>, 0; mem:Volatile LD4[%add.ptr10](tbaa=!2)
	%R32<def> = COPY %R17
	%R34<def> = COPY %R25
	%R33<def> = COPY %R19
    Successors according to CFG: BB#7(?%)

BB#7: derived from LLVM BB %for.body13
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26 %R27 %R32 %R33 %R34
    Predecessors according to CFG: BB#6 BB#7
	%R37<def> = LDRf32 %R34, -8; mem:Volatile LD4[%scevgep8](tbaa=!2)
	%R35<def> = ADDri_r32 %R32, 16, %STATUS<imp-def,dead>
	%R36<def> = ADDri_r32 %R34, 16, %STATUS<imp-def,dead>
	%R38<def> = LDRf32 %R34, -4; mem:Volatile LD4[%scevgep9](tbaa=!2)
	%R33<def> = ADDri_r32 %R33<kill>, 4, %STATUS<imp-def,dead>
	%R39<def> = LDRf32 %R34, 0; mem:Volatile LD4[%lsr.iv5](tbaa=!2)
	%R40<def> = LDRf32 %R34<kill>, 4; mem:Volatile LD4[%scevgep7](tbaa=!2)
	%D21<def> = LDRf64 %R32, -8; mem:LD4[%scevgep17](tbaa=!2) LD4[%scevgep15](tbaa=!2)
	%R34<def> = LDRi32_r32 %FP, -4; mem:LD4[FixedStack2]
	GID %CONFIG<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %R34<kill>
	GIE %CONFIG<imp-def,dead>
	%R43<def,tied1> = FMADDrr_r32 %R43<tied0>, %R27, %R37<kill>, %STATUS<imp-def,dead>, %D21<imp-use,kill>, %D21<imp-def>
	%R42<def,tied1> = FMADDrr_r32 %R42<tied0>, %R27, %R38<kill>, %STATUS<imp-def,dead>, %D21<imp-use,kill>, %D21<imp-def>
	%R44<def> = COPY %R43, %D22<imp-def>
	%R45<def> = COPY %R42, %D21<imp-use,kill>, %D22<imp-use,kill>, %D22<imp-def>
	STRf64 %D22<kill>, %R32, -8; mem:ST4[%scevgep17](tbaa=!2) ST4[%scevgep15](tbaa=!2)
	%R34<def> = LDRf32 %R32, 0; mem:LD4[%lsr.iv1214](tbaa=!2)
	%R34<def,tied1> = FMADDrr_r32 %R34<kill,tied0>, %R27, %R39<kill>, %STATUS<imp-def,dead>
	STRf32 %R34<kill>, %R32, 0; mem:ST4[%lsr.iv1214](tbaa=!2)
	%R37<def> = LDRf32 %R32, 4; mem:LD4[%scevgep16](tbaa=!2)
	%R37<def,tied1> = FMADDrr_r32 %R37<kill,tied0>, %R27, %R40<kill>, %STATUS<imp-def,dead>
	%R34<def,dead> = CMPri_r32 %R33, 8, %STATUS<imp-def>
	STRf32 %R37<kill>, %R32<kill>, 4; mem:ST4[%scevgep16](tbaa=!2)
	%R32<def> = COPY %R35<kill>
	%R34<def> = COPY %R36<kill>
	BCC <BB#7>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#7(0x7c000000 / 0x80000000 = 96.88%) BB#8(0x04000000 / 0x80000000 = 3.12%)

BB#8: derived from LLVM BB %for.end60
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#7
	%R25<def> = ADDrr_r32 %R25<kill>, %IP, %STATUS<imp-def,dead>
	%R26<def> = ADDri_r32 %R26<kill>, 1, %STATUS<imp-def,dead>
	%R27<def,dead> = CMPrr_r32 %R26, %R3, %STATUS<imp-def>
	BCC <BB#6>, 1, %STATUS<imp-use>
    Successors according to CFG: BB#5(0x04000000 / 0x80000000 = 3.12%) BB#6(0x7c000000 / 0x80000000 = 96.88%)

BB#5: derived from LLVM BB %for.cond64.preheader
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#8
	%R25<def> = COPY %R22
	%R26<def> = COPY %R19
    Successors according to CFG: BB#9(?%)

BB#9: derived from LLVM BB %for.body66
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#5 BB#9
	%R27<def> = ADDrr_r32 %R16, %R26, %STATUS<imp-def,dead>
	%R33<def> = LDRf32 %R27<kill>, 0; mem:LD4[%sunkaddr30](tbaa=!2)
	%R27<def> = ADDri_r32 %R25, 4, %STATUS<imp-def,dead>
	%R26<def> = ADDri_r32 %R26<kill>, 4, %STATUS<imp-def,dead>
	%R34<def> = LDRf32 %R25, 0; mem:Volatile LD4[%lsr.iv24](tbaa=!2)
	%R32<def> = LDRi32_r32 %FP, -4; mem:LD4[FixedStack2]
	GID %CONFIG<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %R32<kill>
	GIE %CONFIG<imp-def,dead>
	%R33<def> = FADDrr_r32 %R33<kill>, %R34<kill>, %STATUS<imp-def,dead>
	%R32<def,dead> = CMPri_r32 %R26, 32, %STATUS<imp-def>
	STRf32 %R33<kill>, %R25<kill>, 0; mem:Volatile ST4[%lsr.iv24](tbaa=!2)
	%R25<def> = COPY %R27<kill>
	BCC <BB#9>, 1, %STATUS<imp-use>
    Successors according to CFG: BB#10(0x04000000 / 0x80000000 = 3.12%) BB#9(0x7c000000 / 0x80000000 = 96.88%)

BB#10: derived from LLVM BB %for.end75
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#9
	%R22<def> = ADDri_r32 %R22<kill>, 32, %STATUS<imp-def,dead>
	%R23<def> = ADDri_r32 %R23<kill>, 32, %STATUS<imp-def,dead>
	%R24<def> = ADDri_r32 %R24<kill>, 8, %STATUS<imp-def,dead>
	%R25<def,dead> = CMPrr_r32 %R24, %R3, %STATUS<imp-def>
	BCC <BB#4>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#4(0x7c000000 / 0x80000000 = 96.88%) BB#11(0x04000000 / 0x80000000 = 3.12%)

BB#11: derived from LLVM BB %for.end78
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20
    Predecessors according to CFG: BB#10
	%R2<def> = ADDrr_r32 %R2<kill>, %IP, %STATUS<imp-def,dead>
	%R20<def> = ADDri_r32 %R20<kill>, 1, %STATUS<imp-def,dead>
	%R21<def,dead> = CMPrr_r32 %R20, %R3, %STATUS<imp-def>
	BCC <BB#3>, 1, %STATUS<imp-use>
    Successors according to CFG: BB#12(0x04000000 / 0x80000000 = 3.12%) BB#3(0x7c000000 / 0x80000000 = 96.88%)

BB#12: derived from LLVM BB %for.end81
    Predecessors according to CFG: BB#1 BB#11
	%R0<def> = LDRi32_r32 %FP, -44; mem:LD4[FixedStack1]
	GID
	%CONFIG<def> = MOVTS32_core %R0<kill>
	GIE %CONFIG<imp-use,kill>
	%LR<def> = LDRi64 %SP, 48; flags: FrameSetup
	%SP<def> = ADDri_r32 %SP, 48, %STATUS<imp-def>
	RTS

# End machine code for function matmac.


<----------------->
Inserting branch into BB#1
# Machine code for function matmac: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=32, align=8, at location [SP-40]
  fi#1: size=4, align=4, at location [SP-44]
  fi#2: size=4, align=4, at location [SP-4]
  fi#3: size=4, align=8, at location [SP-8]
Function Live Ins: %R0, %R1, %R2, %R3

BB#0: 
    Live Ins: %R0 %R1 %R2 %R3
	%SP<def,tied2> = STRi64_pmd %LR, %SP<tied0>, -48; flags: FrameSetup
	%FP<def> = ADDri_r32 %SP, 48, %STATUS<imp-def>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	GID %CONFIG<imp-def>
	%R19<def> = MOVFS32_core %CONFIG, %D9<imp-def>
	STRi32_r32 %R19, %FP, -44; mem:ST4[FixedStack1]
	%IP<def> = MOVi32ri 65535
	%IP<def,tied1> = MOVTi32ri %IP<kill,tied0>, 65521
	%R18<def> = ANDrr_r32 %R19, %IP<kill>, %STATUS<imp-def>, %D9<imp-use,kill>, %D9<imp-def>
	%R19<def,tied1> = MOVTi32ri %R19<tied0>, 72, %D9<imp-use,kill>, %D9<imp-def>
	STRi64 %D9<kill>, %FP, -8; mem:ST4[FixedStack3] ST4[FixedStack2]
	GIE %CONFIG<imp-use,kill>
    Successors according to CFG: BB#1(?%)

BB#1: derived from LLVM BB %entry
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#0
	%IP<def,dead> = CMPri_r32 %R3, 1, %STATUS<imp-def>
	BCC <BB#2>, 7, %STATUS<imp-use>
    Successors according to CFG: BB#2(0x50000000 / 0x80000000 = 62.50%) BB#12(0x30000000 / 0x80000000 = 37.50%)

BB#2: derived from LLVM BB %for.body3.lr.ph.preheader
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#1
	%IP<def> = LSL32ri %R3, 2, %STATUS<imp-def,dead>
	%R1<def> = ADDri_r32 %R1<kill>, 8, %STATUS<imp-def,dead>
	%R16<def> = MOViPTR %FP, -40
	%R17<def> = ADDri_r32 %R16, 8, %STATUS<imp-def,dead>
	%R19<def> = MOVi32ri 0, %D9<imp-def>
	%R20<def> = COPY %R19
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %for.body3.lr.ph
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20
    Predecessors according to CFG: BB#2 BB#11
	%R21<def> = LDRi32_r32 %FP, -8; mem:LD4[FixedStack3]
	GID %CONFIG<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %R21<kill>
	GIE %CONFIG<imp-def,dead>
	%R21<def> = IMULrr_r32 %R20, %R3, %STATUS<imp-def,dead>
	%R21<def> = LSL32ri %R21<kill>, 2, %STATUS<imp-def,dead>
	%R21<def> = ADDrr_r32 %R0, %R21<kill>, %STATUS<imp-def,dead>
	%R22<def> = COPY %R2
	%R23<def> = COPY %R1
	%R24<def> = COPY %R19
    Successors according to CFG: BB#4(?%)

BB#4: derived from LLVM BB %for.body9.preheader
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#3 BB#10
	%R18<def> = COPY %R19, %D9<imp-use,kill>, %D9<imp-def>
	STRi64 %D9, %FP, -16; mem:ST8[%1+24]
	STRi64 %D9, %FP, -24; mem:ST8[%1+16]
	STRi64 %D9, %FP, -32; mem:ST8[%1+8]
	STRi64 %D9, %FP, -40; mem:ST8[%1]
	%R25<def> = COPY %R23
	%R26<def> = COPY %R19
    Successors according to CFG: BB#6(?%)

BB#6: derived from LLVM BB %for.body9
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#4 BB#8
	%R27<def> = LSL32ri %R26, 2, %STATUS<imp-def,dead>
	%R27<def> = ADDrr_r32 %R21, %R27<kill>, %STATUS<imp-def,dead>
	%R27<def> = LDRf32 %R27<kill>, 0; mem:Volatile LD4[%add.ptr10](tbaa=!2)
	%R32<def> = COPY %R17
	%R34<def> = COPY %R25
	%R33<def> = COPY %R19
    Successors according to CFG: BB#7(?%)

BB#7: derived from LLVM BB %for.body13
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26 %R27 %R32 %R33 %R34
    Predecessors according to CFG: BB#6 BB#7
	%R37<def> = LDRf32 %R34, -8; mem:Volatile LD4[%scevgep8](tbaa=!2)
	%R35<def> = ADDri_r32 %R32, 16, %STATUS<imp-def,dead>
	%R36<def> = ADDri_r32 %R34, 16, %STATUS<imp-def,dead>
	%R38<def> = LDRf32 %R34, -4; mem:Volatile LD4[%scevgep9](tbaa=!2)
	%R33<def> = ADDri_r32 %R33<kill>, 4, %STATUS<imp-def,dead>
	%R39<def> = LDRf32 %R34, 0; mem:Volatile LD4[%lsr.iv5](tbaa=!2)
	%R40<def> = LDRf32 %R34<kill>, 4; mem:Volatile LD4[%scevgep7](tbaa=!2)
	%D21<def> = LDRf64 %R32, -8; mem:LD4[%scevgep17](tbaa=!2) LD4[%scevgep15](tbaa=!2)
	%R34<def> = LDRi32_r32 %FP, -4; mem:LD4[FixedStack2]
	GID %CONFIG<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %R34<kill>
	GIE %CONFIG<imp-def,dead>
	%R43<def,tied1> = FMADDrr_r32 %R43<tied0>, %R27, %R37<kill>, %STATUS<imp-def,dead>, %D21<imp-use,kill>, %D21<imp-def>
	%R42<def,tied1> = FMADDrr_r32 %R42<tied0>, %R27, %R38<kill>, %STATUS<imp-def,dead>, %D21<imp-use,kill>, %D21<imp-def>
	%R44<def> = COPY %R43, %D22<imp-def>
	%R45<def> = COPY %R42, %D21<imp-use,kill>, %D22<imp-use,kill>, %D22<imp-def>
	STRf64 %D22<kill>, %R32, -8; mem:ST4[%scevgep17](tbaa=!2) ST4[%scevgep15](tbaa=!2)
	%R34<def> = LDRf32 %R32, 0; mem:LD4[%lsr.iv1214](tbaa=!2)
	%R34<def,tied1> = FMADDrr_r32 %R34<kill,tied0>, %R27, %R39<kill>, %STATUS<imp-def,dead>
	STRf32 %R34<kill>, %R32, 0; mem:ST4[%lsr.iv1214](tbaa=!2)
	%R37<def> = LDRf32 %R32, 4; mem:LD4[%scevgep16](tbaa=!2)
	%R37<def,tied1> = FMADDrr_r32 %R37<kill,tied0>, %R27, %R40<kill>, %STATUS<imp-def,dead>
	%R34<def,dead> = CMPri_r32 %R33, 8, %STATUS<imp-def>
	STRf32 %R37<kill>, %R32<kill>, 4; mem:ST4[%scevgep16](tbaa=!2)
	%R32<def> = COPY %R35<kill>
	%R34<def> = COPY %R36<kill>
	BCC <BB#7>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#7(0x7c000000 / 0x80000000 = 96.88%) BB#8(0x04000000 / 0x80000000 = 3.12%)

BB#8: derived from LLVM BB %for.end60
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#7
	%R25<def> = ADDrr_r32 %R25<kill>, %IP, %STATUS<imp-def,dead>
	%R26<def> = ADDri_r32 %R26<kill>, 1, %STATUS<imp-def,dead>
	%R27<def,dead> = CMPrr_r32 %R26, %R3, %STATUS<imp-def>
	BCC <BB#6>, 1, %STATUS<imp-use>
    Successors according to CFG: BB#5(0x04000000 / 0x80000000 = 3.12%) BB#6(0x7c000000 / 0x80000000 = 96.88%)

BB#5: derived from LLVM BB %for.cond64.preheader
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#8
	%R25<def> = COPY %R22
	%R26<def> = COPY %R19
    Successors according to CFG: BB#9(?%)

BB#9: derived from LLVM BB %for.body66
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#5 BB#9
	%R27<def> = ADDrr_r32 %R16, %R26, %STATUS<imp-def,dead>
	%R33<def> = LDRf32 %R27<kill>, 0; mem:LD4[%sunkaddr30](tbaa=!2)
	%R27<def> = ADDri_r32 %R25, 4, %STATUS<imp-def,dead>
	%R26<def> = ADDri_r32 %R26<kill>, 4, %STATUS<imp-def,dead>
	%R34<def> = LDRf32 %R25, 0; mem:Volatile LD4[%lsr.iv24](tbaa=!2)
	%R32<def> = LDRi32_r32 %FP, -4; mem:LD4[FixedStack2]
	GID %CONFIG<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %R32<kill>
	GIE %CONFIG<imp-def,dead>
	%R33<def> = FADDrr_r32 %R33<kill>, %R34<kill>, %STATUS<imp-def,dead>
	%R32<def,dead> = CMPri_r32 %R26, 32, %STATUS<imp-def>
	STRf32 %R33<kill>, %R25<kill>, 0; mem:Volatile ST4[%lsr.iv24](tbaa=!2)
	%R25<def> = COPY %R27<kill>
	BCC <BB#9>, 1, %STATUS<imp-use>
    Successors according to CFG: BB#10(0x04000000 / 0x80000000 = 3.12%) BB#9(0x7c000000 / 0x80000000 = 96.88%)

BB#10: derived from LLVM BB %for.end75
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#9
	%R22<def> = ADDri_r32 %R22<kill>, 32, %STATUS<imp-def,dead>
	%R23<def> = ADDri_r32 %R23<kill>, 32, %STATUS<imp-def,dead>
	%R24<def> = ADDri_r32 %R24<kill>, 8, %STATUS<imp-def,dead>
	%R25<def,dead> = CMPrr_r32 %R24, %R3, %STATUS<imp-def>
	BCC <BB#4>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#4(0x7c000000 / 0x80000000 = 96.88%) BB#11(0x04000000 / 0x80000000 = 3.12%)

BB#11: derived from LLVM BB %for.end78
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20
    Predecessors according to CFG: BB#10
	%R2<def> = ADDrr_r32 %R2<kill>, %IP, %STATUS<imp-def,dead>
	%R20<def> = ADDri_r32 %R20<kill>, 1, %STATUS<imp-def,dead>
	%R21<def,dead> = CMPrr_r32 %R20, %R3, %STATUS<imp-def>
	BCC <BB#3>, 1, %STATUS<imp-use>
    Successors according to CFG: BB#12(0x04000000 / 0x80000000 = 3.12%) BB#3(0x7c000000 / 0x80000000 = 96.88%)

BB#12: derived from LLVM BB %for.end81
    Predecessors according to CFG: BB#1 BB#11
	%R0<def> = LDRi32_r32 %FP, -44; mem:LD4[FixedStack1]
	GID
	%CONFIG<def> = MOVTS32_core %R0<kill>
	GIE %CONFIG<imp-use,kill>
	%LR<def> = LDRi64 %SP, 48; flags: FrameSetup
	%SP<def> = ADDri_r32 %SP, 48, %STATUS<imp-def>
	RTS

# End machine code for function matmac.


<----------------->
Analyzing block 11
BB#11: derived from LLVM BB %for.end78
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20
    Predecessors according to CFG: BB#10
	%R2<def> = ADDrr_r32 %R2<kill>, %IP, %STATUS<imp-def,dead>
	%R20<def> = ADDri_r32 %R20<kill>, 1, %STATUS<imp-def,dead>
	%R21<def,dead> = CMPrr_r32 %R20, %R3, %STATUS<imp-def>
	BCC <BB#3>, 1, %STATUS<imp-use>
    Successors according to CFG: BB#12(0x04000000 / 0x80000000 = 3.12%) BB#3(0x7c000000 / 0x80000000 = 96.88%)

TryTailMergeBlocks: BB#1, BB#11
  with successor BB#12
  which has fall-through from BB#11
Looking for common tails of at least 3 instructions

<----------------->
Analyzing block 1
BB#1: derived from LLVM BB %entry
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#0
	%IP<def,dead> = CMPri_r32 %R3, 1, %STATUS<imp-def>
	BCC <BB#2>, 7, %STATUS<imp-use>
    Successors according to CFG: BB#2(0x50000000 / 0x80000000 = 62.50%) BB#12(0x30000000 / 0x80000000 = 37.50%)

<----------------->
Removing branches out of BB#1
# Machine code for function matmac: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=32, align=8, at location [SP-40]
  fi#1: size=4, align=4, at location [SP-44]
  fi#2: size=4, align=4, at location [SP-4]
  fi#3: size=4, align=8, at location [SP-8]
Function Live Ins: %R0, %R1, %R2, %R3

BB#0: 
    Live Ins: %R0 %R1 %R2 %R3
	%SP<def,tied2> = STRi64_pmd %LR, %SP<tied0>, -48; flags: FrameSetup
	%FP<def> = ADDri_r32 %SP, 48, %STATUS<imp-def>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	GID %CONFIG<imp-def>
	%R19<def> = MOVFS32_core %CONFIG, %D9<imp-def>
	STRi32_r32 %R19, %FP, -44; mem:ST4[FixedStack1]
	%IP<def> = MOVi32ri 65535
	%IP<def,tied1> = MOVTi32ri %IP<kill,tied0>, 65521
	%R18<def> = ANDrr_r32 %R19, %IP<kill>, %STATUS<imp-def>, %D9<imp-use,kill>, %D9<imp-def>
	%R19<def,tied1> = MOVTi32ri %R19<tied0>, 72, %D9<imp-use,kill>, %D9<imp-def>
	STRi64 %D9<kill>, %FP, -8; mem:ST4[FixedStack3] ST4[FixedStack2]
	GIE %CONFIG<imp-use,kill>
    Successors according to CFG: BB#1(?%)

BB#1: derived from LLVM BB %entry
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#0
	%IP<def,dead> = CMPri_r32 %R3, 1, %STATUS<imp-def>
    Successors according to CFG: BB#2(0x50000000 / 0x80000000 = 62.50%) BB#12(0x30000000 / 0x80000000 = 37.50%)

BB#2: derived from LLVM BB %for.body3.lr.ph.preheader
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#1
	%IP<def> = LSL32ri %R3, 2, %STATUS<imp-def,dead>
	%R1<def> = ADDri_r32 %R1<kill>, 8, %STATUS<imp-def,dead>
	%R16<def> = MOViPTR %FP, -40
	%R17<def> = ADDri_r32 %R16, 8, %STATUS<imp-def,dead>
	%R19<def> = MOVi32ri 0, %D9<imp-def>
	%R20<def> = COPY %R19
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %for.body3.lr.ph
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20
    Predecessors according to CFG: BB#2 BB#11
	%R21<def> = LDRi32_r32 %FP, -8; mem:LD4[FixedStack3]
	GID %CONFIG<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %R21<kill>
	GIE %CONFIG<imp-def,dead>
	%R21<def> = IMULrr_r32 %R20, %R3, %STATUS<imp-def,dead>
	%R21<def> = LSL32ri %R21<kill>, 2, %STATUS<imp-def,dead>
	%R21<def> = ADDrr_r32 %R0, %R21<kill>, %STATUS<imp-def,dead>
	%R22<def> = COPY %R2
	%R23<def> = COPY %R1
	%R24<def> = COPY %R19
    Successors according to CFG: BB#4(?%)

BB#4: derived from LLVM BB %for.body9.preheader
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#3 BB#10
	%R18<def> = COPY %R19, %D9<imp-use,kill>, %D9<imp-def>
	STRi64 %D9, %FP, -16; mem:ST8[%1+24]
	STRi64 %D9, %FP, -24; mem:ST8[%1+16]
	STRi64 %D9, %FP, -32; mem:ST8[%1+8]
	STRi64 %D9, %FP, -40; mem:ST8[%1]
	%R25<def> = COPY %R23
	%R26<def> = COPY %R19
    Successors according to CFG: BB#6(?%)

BB#6: derived from LLVM BB %for.body9
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#4 BB#8
	%R27<def> = LSL32ri %R26, 2, %STATUS<imp-def,dead>
	%R27<def> = ADDrr_r32 %R21, %R27<kill>, %STATUS<imp-def,dead>
	%R27<def> = LDRf32 %R27<kill>, 0; mem:Volatile LD4[%add.ptr10](tbaa=!2)
	%R32<def> = COPY %R17
	%R34<def> = COPY %R25
	%R33<def> = COPY %R19
    Successors according to CFG: BB#7(?%)

BB#7: derived from LLVM BB %for.body13
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26 %R27 %R32 %R33 %R34
    Predecessors according to CFG: BB#6 BB#7
	%R37<def> = LDRf32 %R34, -8; mem:Volatile LD4[%scevgep8](tbaa=!2)
	%R35<def> = ADDri_r32 %R32, 16, %STATUS<imp-def,dead>
	%R36<def> = ADDri_r32 %R34, 16, %STATUS<imp-def,dead>
	%R38<def> = LDRf32 %R34, -4; mem:Volatile LD4[%scevgep9](tbaa=!2)
	%R33<def> = ADDri_r32 %R33<kill>, 4, %STATUS<imp-def,dead>
	%R39<def> = LDRf32 %R34, 0; mem:Volatile LD4[%lsr.iv5](tbaa=!2)
	%R40<def> = LDRf32 %R34<kill>, 4; mem:Volatile LD4[%scevgep7](tbaa=!2)
	%D21<def> = LDRf64 %R32, -8; mem:LD4[%scevgep17](tbaa=!2) LD4[%scevgep15](tbaa=!2)
	%R34<def> = LDRi32_r32 %FP, -4; mem:LD4[FixedStack2]
	GID %CONFIG<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %R34<kill>
	GIE %CONFIG<imp-def,dead>
	%R43<def,tied1> = FMADDrr_r32 %R43<tied0>, %R27, %R37<kill>, %STATUS<imp-def,dead>, %D21<imp-use,kill>, %D21<imp-def>
	%R42<def,tied1> = FMADDrr_r32 %R42<tied0>, %R27, %R38<kill>, %STATUS<imp-def,dead>, %D21<imp-use,kill>, %D21<imp-def>
	%R44<def> = COPY %R43, %D22<imp-def>
	%R45<def> = COPY %R42, %D21<imp-use,kill>, %D22<imp-use,kill>, %D22<imp-def>
	STRf64 %D22<kill>, %R32, -8; mem:ST4[%scevgep17](tbaa=!2) ST4[%scevgep15](tbaa=!2)
	%R34<def> = LDRf32 %R32, 0; mem:LD4[%lsr.iv1214](tbaa=!2)
	%R34<def,tied1> = FMADDrr_r32 %R34<kill,tied0>, %R27, %R39<kill>, %STATUS<imp-def,dead>
	STRf32 %R34<kill>, %R32, 0; mem:ST4[%lsr.iv1214](tbaa=!2)
	%R37<def> = LDRf32 %R32, 4; mem:LD4[%scevgep16](tbaa=!2)
	%R37<def,tied1> = FMADDrr_r32 %R37<kill,tied0>, %R27, %R40<kill>, %STATUS<imp-def,dead>
	%R34<def,dead> = CMPri_r32 %R33, 8, %STATUS<imp-def>
	STRf32 %R37<kill>, %R32<kill>, 4; mem:ST4[%scevgep16](tbaa=!2)
	%R32<def> = COPY %R35<kill>
	%R34<def> = COPY %R36<kill>
	BCC <BB#7>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#7(0x7c000000 / 0x80000000 = 96.88%) BB#8(0x04000000 / 0x80000000 = 3.12%)

BB#8: derived from LLVM BB %for.end60
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#7
	%R25<def> = ADDrr_r32 %R25<kill>, %IP, %STATUS<imp-def,dead>
	%R26<def> = ADDri_r32 %R26<kill>, 1, %STATUS<imp-def,dead>
	%R27<def,dead> = CMPrr_r32 %R26, %R3, %STATUS<imp-def>
	BCC <BB#6>, 1, %STATUS<imp-use>
    Successors according to CFG: BB#5(0x04000000 / 0x80000000 = 3.12%) BB#6(0x7c000000 / 0x80000000 = 96.88%)

BB#5: derived from LLVM BB %for.cond64.preheader
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#8
	%R25<def> = COPY %R22
	%R26<def> = COPY %R19
    Successors according to CFG: BB#9(?%)

BB#9: derived from LLVM BB %for.body66
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#5 BB#9
	%R27<def> = ADDrr_r32 %R16, %R26, %STATUS<imp-def,dead>
	%R33<def> = LDRf32 %R27<kill>, 0; mem:LD4[%sunkaddr30](tbaa=!2)
	%R27<def> = ADDri_r32 %R25, 4, %STATUS<imp-def,dead>
	%R26<def> = ADDri_r32 %R26<kill>, 4, %STATUS<imp-def,dead>
	%R34<def> = LDRf32 %R25, 0; mem:Volatile LD4[%lsr.iv24](tbaa=!2)
	%R32<def> = LDRi32_r32 %FP, -4; mem:LD4[FixedStack2]
	GID %CONFIG<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %R32<kill>
	GIE %CONFIG<imp-def,dead>
	%R33<def> = FADDrr_r32 %R33<kill>, %R34<kill>, %STATUS<imp-def,dead>
	%R32<def,dead> = CMPri_r32 %R26, 32, %STATUS<imp-def>
	STRf32 %R33<kill>, %R25<kill>, 0; mem:Volatile ST4[%lsr.iv24](tbaa=!2)
	%R25<def> = COPY %R27<kill>
	BCC <BB#9>, 1, %STATUS<imp-use>
    Successors according to CFG: BB#10(0x04000000 / 0x80000000 = 3.12%) BB#9(0x7c000000 / 0x80000000 = 96.88%)

BB#10: derived from LLVM BB %for.end75
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#9
	%R22<def> = ADDri_r32 %R22<kill>, 32, %STATUS<imp-def,dead>
	%R23<def> = ADDri_r32 %R23<kill>, 32, %STATUS<imp-def,dead>
	%R24<def> = ADDri_r32 %R24<kill>, 8, %STATUS<imp-def,dead>
	%R25<def,dead> = CMPrr_r32 %R24, %R3, %STATUS<imp-def>
	BCC <BB#4>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#4(0x7c000000 / 0x80000000 = 96.88%) BB#11(0x04000000 / 0x80000000 = 3.12%)

BB#11: derived from LLVM BB %for.end78
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20
    Predecessors according to CFG: BB#10
	%R2<def> = ADDrr_r32 %R2<kill>, %IP, %STATUS<imp-def,dead>
	%R20<def> = ADDri_r32 %R20<kill>, 1, %STATUS<imp-def,dead>
	%R21<def,dead> = CMPrr_r32 %R20, %R3, %STATUS<imp-def>
	BCC <BB#3>, 1, %STATUS<imp-use>
    Successors according to CFG: BB#12(0x04000000 / 0x80000000 = 3.12%) BB#3(0x7c000000 / 0x80000000 = 96.88%)

BB#12: derived from LLVM BB %for.end81
    Predecessors according to CFG: BB#1 BB#11
	%R0<def> = LDRi32_r32 %FP, -44; mem:LD4[FixedStack1]
	GID
	%CONFIG<def> = MOVTS32_core %R0<kill>
	GIE %CONFIG<imp-use,kill>
	%LR<def> = LDRi64 %SP, 48; flags: FrameSetup
	%SP<def> = ADDri_r32 %SP, 48, %STATUS<imp-def>
	RTS

# End machine code for function matmac.


<----------------->
Inserting branch into BB#1
# Machine code for function matmac: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=32, align=8, at location [SP-40]
  fi#1: size=4, align=4, at location [SP-44]
  fi#2: size=4, align=4, at location [SP-4]
  fi#3: size=4, align=8, at location [SP-8]
Function Live Ins: %R0, %R1, %R2, %R3

BB#0: 
    Live Ins: %R0 %R1 %R2 %R3
	%SP<def,tied2> = STRi64_pmd %LR, %SP<tied0>, -48; flags: FrameSetup
	%FP<def> = ADDri_r32 %SP, 48, %STATUS<imp-def>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	GID %CONFIG<imp-def>
	%R19<def> = MOVFS32_core %CONFIG, %D9<imp-def>
	STRi32_r32 %R19, %FP, -44; mem:ST4[FixedStack1]
	%IP<def> = MOVi32ri 65535
	%IP<def,tied1> = MOVTi32ri %IP<kill,tied0>, 65521
	%R18<def> = ANDrr_r32 %R19, %IP<kill>, %STATUS<imp-def>, %D9<imp-use,kill>, %D9<imp-def>
	%R19<def,tied1> = MOVTi32ri %R19<tied0>, 72, %D9<imp-use,kill>, %D9<imp-def>
	STRi64 %D9<kill>, %FP, -8; mem:ST4[FixedStack3] ST4[FixedStack2]
	GIE %CONFIG<imp-use,kill>
    Successors according to CFG: BB#1(?%)

BB#1: derived from LLVM BB %entry
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#0
	%IP<def,dead> = CMPri_r32 %R3, 1, %STATUS<imp-def>
	BCC <BB#12>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#2(0x50000000 / 0x80000000 = 62.50%) BB#12(0x30000000 / 0x80000000 = 37.50%)

BB#2: derived from LLVM BB %for.body3.lr.ph.preheader
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#1
	%IP<def> = LSL32ri %R3, 2, %STATUS<imp-def,dead>
	%R1<def> = ADDri_r32 %R1<kill>, 8, %STATUS<imp-def,dead>
	%R16<def> = MOViPTR %FP, -40
	%R17<def> = ADDri_r32 %R16, 8, %STATUS<imp-def,dead>
	%R19<def> = MOVi32ri 0, %D9<imp-def>
	%R20<def> = COPY %R19
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %for.body3.lr.ph
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20
    Predecessors according to CFG: BB#2 BB#11
	%R21<def> = LDRi32_r32 %FP, -8; mem:LD4[FixedStack3]
	GID %CONFIG<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %R21<kill>
	GIE %CONFIG<imp-def,dead>
	%R21<def> = IMULrr_r32 %R20, %R3, %STATUS<imp-def,dead>
	%R21<def> = LSL32ri %R21<kill>, 2, %STATUS<imp-def,dead>
	%R21<def> = ADDrr_r32 %R0, %R21<kill>, %STATUS<imp-def,dead>
	%R22<def> = COPY %R2
	%R23<def> = COPY %R1
	%R24<def> = COPY %R19
    Successors according to CFG: BB#4(?%)

BB#4: derived from LLVM BB %for.body9.preheader
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#3 BB#10
	%R18<def> = COPY %R19, %D9<imp-use,kill>, %D9<imp-def>
	STRi64 %D9, %FP, -16; mem:ST8[%1+24]
	STRi64 %D9, %FP, -24; mem:ST8[%1+16]
	STRi64 %D9, %FP, -32; mem:ST8[%1+8]
	STRi64 %D9, %FP, -40; mem:ST8[%1]
	%R25<def> = COPY %R23
	%R26<def> = COPY %R19
    Successors according to CFG: BB#6(?%)

BB#6: derived from LLVM BB %for.body9
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#4 BB#8
	%R27<def> = LSL32ri %R26, 2, %STATUS<imp-def,dead>
	%R27<def> = ADDrr_r32 %R21, %R27<kill>, %STATUS<imp-def,dead>
	%R27<def> = LDRf32 %R27<kill>, 0; mem:Volatile LD4[%add.ptr10](tbaa=!2)
	%R32<def> = COPY %R17
	%R34<def> = COPY %R25
	%R33<def> = COPY %R19
    Successors according to CFG: BB#7(?%)

BB#7: derived from LLVM BB %for.body13
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26 %R27 %R32 %R33 %R34
    Predecessors according to CFG: BB#6 BB#7
	%R37<def> = LDRf32 %R34, -8; mem:Volatile LD4[%scevgep8](tbaa=!2)
	%R35<def> = ADDri_r32 %R32, 16, %STATUS<imp-def,dead>
	%R36<def> = ADDri_r32 %R34, 16, %STATUS<imp-def,dead>
	%R38<def> = LDRf32 %R34, -4; mem:Volatile LD4[%scevgep9](tbaa=!2)
	%R33<def> = ADDri_r32 %R33<kill>, 4, %STATUS<imp-def,dead>
	%R39<def> = LDRf32 %R34, 0; mem:Volatile LD4[%lsr.iv5](tbaa=!2)
	%R40<def> = LDRf32 %R34<kill>, 4; mem:Volatile LD4[%scevgep7](tbaa=!2)
	%D21<def> = LDRf64 %R32, -8; mem:LD4[%scevgep17](tbaa=!2) LD4[%scevgep15](tbaa=!2)
	%R34<def> = LDRi32_r32 %FP, -4; mem:LD4[FixedStack2]
	GID %CONFIG<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %R34<kill>
	GIE %CONFIG<imp-def,dead>
	%R43<def,tied1> = FMADDrr_r32 %R43<tied0>, %R27, %R37<kill>, %STATUS<imp-def,dead>, %D21<imp-use,kill>, %D21<imp-def>
	%R42<def,tied1> = FMADDrr_r32 %R42<tied0>, %R27, %R38<kill>, %STATUS<imp-def,dead>, %D21<imp-use,kill>, %D21<imp-def>
	%R44<def> = COPY %R43, %D22<imp-def>
	%R45<def> = COPY %R42, %D21<imp-use,kill>, %D22<imp-use,kill>, %D22<imp-def>
	STRf64 %D22<kill>, %R32, -8; mem:ST4[%scevgep17](tbaa=!2) ST4[%scevgep15](tbaa=!2)
	%R34<def> = LDRf32 %R32, 0; mem:LD4[%lsr.iv1214](tbaa=!2)
	%R34<def,tied1> = FMADDrr_r32 %R34<kill,tied0>, %R27, %R39<kill>, %STATUS<imp-def,dead>
	STRf32 %R34<kill>, %R32, 0; mem:ST4[%lsr.iv1214](tbaa=!2)
	%R37<def> = LDRf32 %R32, 4; mem:LD4[%scevgep16](tbaa=!2)
	%R37<def,tied1> = FMADDrr_r32 %R37<kill,tied0>, %R27, %R40<kill>, %STATUS<imp-def,dead>
	%R34<def,dead> = CMPri_r32 %R33, 8, %STATUS<imp-def>
	STRf32 %R37<kill>, %R32<kill>, 4; mem:ST4[%scevgep16](tbaa=!2)
	%R32<def> = COPY %R35<kill>
	%R34<def> = COPY %R36<kill>
	BCC <BB#7>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#7(0x7c000000 / 0x80000000 = 96.88%) BB#8(0x04000000 / 0x80000000 = 3.12%)

BB#8: derived from LLVM BB %for.end60
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#7
	%R25<def> = ADDrr_r32 %R25<kill>, %IP, %STATUS<imp-def,dead>
	%R26<def> = ADDri_r32 %R26<kill>, 1, %STATUS<imp-def,dead>
	%R27<def,dead> = CMPrr_r32 %R26, %R3, %STATUS<imp-def>
	BCC <BB#6>, 1, %STATUS<imp-use>
    Successors according to CFG: BB#5(0x04000000 / 0x80000000 = 3.12%) BB#6(0x7c000000 / 0x80000000 = 96.88%)

BB#5: derived from LLVM BB %for.cond64.preheader
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#8
	%R25<def> = COPY %R22
	%R26<def> = COPY %R19
    Successors according to CFG: BB#9(?%)

BB#9: derived from LLVM BB %for.body66
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#5 BB#9
	%R27<def> = ADDrr_r32 %R16, %R26, %STATUS<imp-def,dead>
	%R33<def> = LDRf32 %R27<kill>, 0; mem:LD4[%sunkaddr30](tbaa=!2)
	%R27<def> = ADDri_r32 %R25, 4, %STATUS<imp-def,dead>
	%R26<def> = ADDri_r32 %R26<kill>, 4, %STATUS<imp-def,dead>
	%R34<def> = LDRf32 %R25, 0; mem:Volatile LD4[%lsr.iv24](tbaa=!2)
	%R32<def> = LDRi32_r32 %FP, -4; mem:LD4[FixedStack2]
	GID %CONFIG<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %R32<kill>
	GIE %CONFIG<imp-def,dead>
	%R33<def> = FADDrr_r32 %R33<kill>, %R34<kill>, %STATUS<imp-def,dead>
	%R32<def,dead> = CMPri_r32 %R26, 32, %STATUS<imp-def>
	STRf32 %R33<kill>, %R25<kill>, 0; mem:Volatile ST4[%lsr.iv24](tbaa=!2)
	%R25<def> = COPY %R27<kill>
	BCC <BB#9>, 1, %STATUS<imp-use>
    Successors according to CFG: BB#10(0x04000000 / 0x80000000 = 3.12%) BB#9(0x7c000000 / 0x80000000 = 96.88%)

BB#10: derived from LLVM BB %for.end75
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#9
	%R22<def> = ADDri_r32 %R22<kill>, 32, %STATUS<imp-def,dead>
	%R23<def> = ADDri_r32 %R23<kill>, 32, %STATUS<imp-def,dead>
	%R24<def> = ADDri_r32 %R24<kill>, 8, %STATUS<imp-def,dead>
	%R25<def,dead> = CMPrr_r32 %R24, %R3, %STATUS<imp-def>
	BCC <BB#4>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#4(0x7c000000 / 0x80000000 = 96.88%) BB#11(0x04000000 / 0x80000000 = 3.12%)

BB#11: derived from LLVM BB %for.end78
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20
    Predecessors according to CFG: BB#10
	%R2<def> = ADDrr_r32 %R2<kill>, %IP, %STATUS<imp-def,dead>
	%R20<def> = ADDri_r32 %R20<kill>, 1, %STATUS<imp-def,dead>
	%R21<def,dead> = CMPrr_r32 %R20, %R3, %STATUS<imp-def>
	BCC <BB#3>, 1, %STATUS<imp-use>
    Successors according to CFG: BB#12(0x04000000 / 0x80000000 = 3.12%) BB#3(0x7c000000 / 0x80000000 = 96.88%)

BB#12: derived from LLVM BB %for.end81
    Predecessors according to CFG: BB#1 BB#11
	%R0<def> = LDRi32_r32 %FP, -44; mem:LD4[FixedStack1]
	GID
	%CONFIG<def> = MOVTS32_core %R0<kill>
	GIE %CONFIG<imp-use,kill>
	%LR<def> = LDRi64 %SP, 48; flags: FrameSetup
	%SP<def> = ADDri_r32 %SP, 48, %STATUS<imp-def>
	RTS

# End machine code for function matmac.


<----------------->
Analyzing block 0
BB#0: 
    Live Ins: %R0 %R1 %R2 %R3
	%SP<def,tied2> = STRi64_pmd %LR, %SP<tied0>, -48; flags: FrameSetup
	%FP<def> = ADDri_r32 %SP, 48, %STATUS<imp-def>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	GID %CONFIG<imp-def>
	%R19<def> = MOVFS32_core %CONFIG, %D9<imp-def>
	STRi32_r32 %R19, %FP, -44; mem:ST4[FixedStack1]
	%IP<def> = MOVi32ri 65535
	%IP<def,tied1> = MOVTi32ri %IP<kill,tied0>, 65521
	%R18<def> = ANDrr_r32 %R19, %IP<kill>, %STATUS<imp-def>, %D9<imp-use,kill>, %D9<imp-def>
	%R19<def,tied1> = MOVTi32ri %R19<tied0>, 72, %D9<imp-use,kill>, %D9<imp-def>
	STRi64 %D9<kill>, %FP, -8; mem:ST4[FixedStack3] ST4[FixedStack2]
	GIE %CONFIG<imp-use,kill>
    Successors according to CFG: BB#1(?%)

<----------------->
Analyzing block 1
BB#1: derived from LLVM BB %entry
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#0
	%IP<def,dead> = CMPri_r32 %R3, 1, %STATUS<imp-def>
	BCC <BB#12>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#2(0x50000000 / 0x80000000 = 62.50%) BB#12(0x30000000 / 0x80000000 = 37.50%)

<----------------->
Analyzing block 0
BB#0: 
    Live Ins: %R0 %R1 %R2 %R3
	%SP<def,tied2> = STRi64_pmd %LR, %SP<tied0>, -48; flags: FrameSetup
	%FP<def> = ADDri_r32 %SP, 48, %STATUS<imp-def>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	GID %CONFIG<imp-def>
	%R19<def> = MOVFS32_core %CONFIG, %D9<imp-def>
	STRi32_r32 %R19, %FP, -44; mem:ST4[FixedStack1]
	%IP<def> = MOVi32ri 65535
	%IP<def,tied1> = MOVTi32ri %IP<kill,tied0>, 65521
	%R18<def> = ANDrr_r32 %R19, %IP<kill>, %STATUS<imp-def>, %D9<imp-use,kill>, %D9<imp-def>
	%R19<def,tied1> = MOVTi32ri %R19<tied0>, 72, %D9<imp-use,kill>, %D9<imp-def>
	STRi64 %D9<kill>, %FP, -8; mem:ST4[FixedStack3] ST4[FixedStack2]
	GIE %CONFIG<imp-use,kill>
    Successors according to CFG: BB#1(?%)

<----------------->
Analyzing block 1
BB#1: derived from LLVM BB %entry
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#0
	%IP<def,dead> = CMPri_r32 %R3, 1, %STATUS<imp-def>
	BCC <BB#12>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#2(0x50000000 / 0x80000000 = 62.50%) BB#12(0x30000000 / 0x80000000 = 37.50%)

<----------------->
Analyzing block 0
BB#0: 
    Live Ins: %R0 %R1 %R2 %R3
	%SP<def,tied2> = STRi64_pmd %LR, %SP<tied0>, -48; flags: FrameSetup
	%FP<def> = ADDri_r32 %SP, 48, %STATUS<imp-def>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	GID %CONFIG<imp-def>
	%R19<def> = MOVFS32_core %CONFIG, %D9<imp-def>
	STRi32_r32 %R19, %FP, -44; mem:ST4[FixedStack1]
	%IP<def> = MOVi32ri 65535
	%IP<def,tied1> = MOVTi32ri %IP<kill,tied0>, 65521
	%R18<def> = ANDrr_r32 %R19, %IP<kill>, %STATUS<imp-def>, %D9<imp-use,kill>, %D9<imp-def>
	%R19<def,tied1> = MOVTi32ri %R19<tied0>, 72, %D9<imp-use,kill>, %D9<imp-def>
	STRi64 %D9<kill>, %FP, -8; mem:ST4[FixedStack3] ST4[FixedStack2]
	GIE %CONFIG<imp-use,kill>
    Successors according to CFG: BB#1(?%)

<----------------->
Analyzing block 0
BB#0: 
    Live Ins: %R0 %R1 %R2 %R3
	%SP<def,tied2> = STRi64_pmd %LR, %SP<tied0>, -48; flags: FrameSetup
	%FP<def> = ADDri_r32 %SP, 48, %STATUS<imp-def>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	GID %CONFIG<imp-def>
	%R19<def> = MOVFS32_core %CONFIG, %D9<imp-def>
	STRi32_r32 %R19, %FP, -44; mem:ST4[FixedStack1]
	%IP<def> = MOVi32ri 65535
	%IP<def,tied1> = MOVTi32ri %IP<kill,tied0>, 65521
	%R18<def> = ANDrr_r32 %R19, %IP<kill>, %STATUS<imp-def>, %D9<imp-use,kill>, %D9<imp-def>
	%R19<def,tied1> = MOVTi32ri %R19<tied0>, 72, %D9<imp-use,kill>, %D9<imp-def>
	STRi64 %D9<kill>, %FP, -8; mem:ST4[FixedStack3] ST4[FixedStack2]
	GIE %CONFIG<imp-use,kill>
    Successors according to CFG: BB#1(?%)

<----------------->
Analyzing block 1
BB#1: derived from LLVM BB %entry
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#0
	%IP<def,dead> = CMPri_r32 %R3, 1, %STATUS<imp-def>
	BCC <BB#12>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#2(0x50000000 / 0x80000000 = 62.50%) BB#12(0x30000000 / 0x80000000 = 37.50%)

<----------------->
Analyzing block 2
BB#2: derived from LLVM BB %for.body3.lr.ph.preheader
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#1
	%IP<def> = LSL32ri %R3, 2, %STATUS<imp-def,dead>
	%R1<def> = ADDri_r32 %R1<kill>, 8, %STATUS<imp-def,dead>
	%R16<def> = MOViPTR %FP, -40
	%R17<def> = ADDri_r32 %R16, 8, %STATUS<imp-def,dead>
	%R19<def> = MOVi32ri 0, %D9<imp-def>
	%R20<def> = COPY %R19
    Successors according to CFG: BB#3(?%)

<----------------->
Analyzing block 1
BB#1: derived from LLVM BB %entry
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#0
	%IP<def,dead> = CMPri_r32 %R3, 1, %STATUS<imp-def>
	BCC <BB#12>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#2(0x50000000 / 0x80000000 = 62.50%) BB#12(0x30000000 / 0x80000000 = 37.50%)

<----------------->
Analyzing block 2
BB#2: derived from LLVM BB %for.body3.lr.ph.preheader
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#1
	%IP<def> = LSL32ri %R3, 2, %STATUS<imp-def,dead>
	%R1<def> = ADDri_r32 %R1<kill>, 8, %STATUS<imp-def,dead>
	%R16<def> = MOViPTR %FP, -40
	%R17<def> = ADDri_r32 %R16, 8, %STATUS<imp-def,dead>
	%R19<def> = MOVi32ri 0, %D9<imp-def>
	%R20<def> = COPY %R19
    Successors according to CFG: BB#3(?%)

<----------------->
Analyzing block 3
BB#3: derived from LLVM BB %for.body3.lr.ph
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20
    Predecessors according to CFG: BB#2 BB#11
	%R21<def> = LDRi32_r32 %FP, -8; mem:LD4[FixedStack3]
	GID %CONFIG<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %R21<kill>
	GIE %CONFIG<imp-def,dead>
	%R21<def> = IMULrr_r32 %R20, %R3, %STATUS<imp-def,dead>
	%R21<def> = LSL32ri %R21<kill>, 2, %STATUS<imp-def,dead>
	%R21<def> = ADDrr_r32 %R0, %R21<kill>, %STATUS<imp-def,dead>
	%R22<def> = COPY %R2
	%R23<def> = COPY %R1
	%R24<def> = COPY %R19
    Successors according to CFG: BB#4(?%)

<----------------->
Analyzing block 2
BB#2: derived from LLVM BB %for.body3.lr.ph.preheader
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#1
	%IP<def> = LSL32ri %R3, 2, %STATUS<imp-def,dead>
	%R1<def> = ADDri_r32 %R1<kill>, 8, %STATUS<imp-def,dead>
	%R16<def> = MOViPTR %FP, -40
	%R17<def> = ADDri_r32 %R16, 8, %STATUS<imp-def,dead>
	%R19<def> = MOVi32ri 0, %D9<imp-def>
	%R20<def> = COPY %R19
    Successors according to CFG: BB#3(?%)

<----------------->
Analyzing block 3
BB#3: derived from LLVM BB %for.body3.lr.ph
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20
    Predecessors according to CFG: BB#2 BB#11
	%R21<def> = LDRi32_r32 %FP, -8; mem:LD4[FixedStack3]
	GID %CONFIG<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %R21<kill>
	GIE %CONFIG<imp-def,dead>
	%R21<def> = IMULrr_r32 %R20, %R3, %STATUS<imp-def,dead>
	%R21<def> = LSL32ri %R21<kill>, 2, %STATUS<imp-def,dead>
	%R21<def> = ADDrr_r32 %R0, %R21<kill>, %STATUS<imp-def,dead>
	%R22<def> = COPY %R2
	%R23<def> = COPY %R1
	%R24<def> = COPY %R19
    Successors according to CFG: BB#4(?%)

<----------------->
Analyzing block 4
BB#4: derived from LLVM BB %for.body9.preheader
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#3 BB#10
	%R18<def> = COPY %R19, %D9<imp-use,kill>, %D9<imp-def>
	STRi64 %D9, %FP, -16; mem:ST8[%1+24]
	STRi64 %D9, %FP, -24; mem:ST8[%1+16]
	STRi64 %D9, %FP, -32; mem:ST8[%1+8]
	STRi64 %D9, %FP, -40; mem:ST8[%1]
	%R25<def> = COPY %R23
	%R26<def> = COPY %R19
    Successors according to CFG: BB#5(?%)

<----------------->
Analyzing block 3
BB#3: derived from LLVM BB %for.body3.lr.ph
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20
    Predecessors according to CFG: BB#2 BB#11
	%R21<def> = LDRi32_r32 %FP, -8; mem:LD4[FixedStack3]
	GID %CONFIG<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %R21<kill>
	GIE %CONFIG<imp-def,dead>
	%R21<def> = IMULrr_r32 %R20, %R3, %STATUS<imp-def,dead>
	%R21<def> = LSL32ri %R21<kill>, 2, %STATUS<imp-def,dead>
	%R21<def> = ADDrr_r32 %R0, %R21<kill>, %STATUS<imp-def,dead>
	%R22<def> = COPY %R2
	%R23<def> = COPY %R1
	%R24<def> = COPY %R19
    Successors according to CFG: BB#4(?%)

<----------------->
Analyzing block 4
BB#4: derived from LLVM BB %for.body9.preheader
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#3 BB#10
	%R18<def> = COPY %R19, %D9<imp-use,kill>, %D9<imp-def>
	STRi64 %D9, %FP, -16; mem:ST8[%1+24]
	STRi64 %D9, %FP, -24; mem:ST8[%1+16]
	STRi64 %D9, %FP, -32; mem:ST8[%1+8]
	STRi64 %D9, %FP, -40; mem:ST8[%1]
	%R25<def> = COPY %R23
	%R26<def> = COPY %R19
    Successors according to CFG: BB#5(?%)

<----------------->
Analyzing block 5
BB#5: derived from LLVM BB %for.body9
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#4 BB#7
	%R27<def> = LSL32ri %R26, 2, %STATUS<imp-def,dead>
	%R27<def> = ADDrr_r32 %R21, %R27<kill>, %STATUS<imp-def,dead>
	%R27<def> = LDRf32 %R27<kill>, 0; mem:Volatile LD4[%add.ptr10](tbaa=!2)
	%R32<def> = COPY %R17
	%R34<def> = COPY %R25
	%R33<def> = COPY %R19
    Successors according to CFG: BB#6(?%)

<----------------->
Analyzing block 4
BB#4: derived from LLVM BB %for.body9.preheader
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#3 BB#10
	%R18<def> = COPY %R19, %D9<imp-use,kill>, %D9<imp-def>
	STRi64 %D9, %FP, -16; mem:ST8[%1+24]
	STRi64 %D9, %FP, -24; mem:ST8[%1+16]
	STRi64 %D9, %FP, -32; mem:ST8[%1+8]
	STRi64 %D9, %FP, -40; mem:ST8[%1]
	%R25<def> = COPY %R23
	%R26<def> = COPY %R19
    Successors according to CFG: BB#5(?%)

<----------------->
Analyzing block 5
BB#5: derived from LLVM BB %for.body9
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#4 BB#7
	%R27<def> = LSL32ri %R26, 2, %STATUS<imp-def,dead>
	%R27<def> = ADDrr_r32 %R21, %R27<kill>, %STATUS<imp-def,dead>
	%R27<def> = LDRf32 %R27<kill>, 0; mem:Volatile LD4[%add.ptr10](tbaa=!2)
	%R32<def> = COPY %R17
	%R34<def> = COPY %R25
	%R33<def> = COPY %R19
    Successors according to CFG: BB#6(?%)

<----------------->
Analyzing block 6
BB#6: derived from LLVM BB %for.body13
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26 %R27 %R32 %R33 %R34
    Predecessors according to CFG: BB#5 BB#6
	%R37<def> = LDRf32 %R34, -8; mem:Volatile LD4[%scevgep8](tbaa=!2)
	%R35<def> = ADDri_r32 %R32, 16, %STATUS<imp-def,dead>
	%R36<def> = ADDri_r32 %R34, 16, %STATUS<imp-def,dead>
	%R38<def> = LDRf32 %R34, -4; mem:Volatile LD4[%scevgep9](tbaa=!2)
	%R33<def> = ADDri_r32 %R33<kill>, 4, %STATUS<imp-def,dead>
	%R39<def> = LDRf32 %R34, 0; mem:Volatile LD4[%lsr.iv5](tbaa=!2)
	%R40<def> = LDRf32 %R34<kill>, 4; mem:Volatile LD4[%scevgep7](tbaa=!2)
	%D21<def> = LDRf64 %R32, -8; mem:LD4[%scevgep17](tbaa=!2) LD4[%scevgep15](tbaa=!2)
	%R34<def> = LDRi32_r32 %FP, -4; mem:LD4[FixedStack2]
	GID %CONFIG<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %R34<kill>
	GIE %CONFIG<imp-def,dead>
	%R43<def,tied1> = FMADDrr_r32 %R43<tied0>, %R27, %R37<kill>, %STATUS<imp-def,dead>, %D21<imp-use,kill>, %D21<imp-def>
	%R42<def,tied1> = FMADDrr_r32 %R42<tied0>, %R27, %R38<kill>, %STATUS<imp-def,dead>, %D21<imp-use,kill>, %D21<imp-def>
	%R44<def> = COPY %R43, %D22<imp-def>
	%R45<def> = COPY %R42, %D21<imp-use,kill>, %D22<imp-use,kill>, %D22<imp-def>
	STRf64 %D22<kill>, %R32, -8; mem:ST4[%scevgep17](tbaa=!2) ST4[%scevgep15](tbaa=!2)
	%R34<def> = LDRf32 %R32, 0; mem:LD4[%lsr.iv1214](tbaa=!2)
	%R34<def,tied1> = FMADDrr_r32 %R34<kill,tied0>, %R27, %R39<kill>, %STATUS<imp-def,dead>
	STRf32 %R34<kill>, %R32, 0; mem:ST4[%lsr.iv1214](tbaa=!2)
	%R37<def> = LDRf32 %R32, 4; mem:LD4[%scevgep16](tbaa=!2)
	%R37<def,tied1> = FMADDrr_r32 %R37<kill,tied0>, %R27, %R40<kill>, %STATUS<imp-def,dead>
	%R34<def,dead> = CMPri_r32 %R33, 8, %STATUS<imp-def>
	STRf32 %R37<kill>, %R32<kill>, 4; mem:ST4[%scevgep16](tbaa=!2)
	%R32<def> = COPY %R35<kill>
	%R34<def> = COPY %R36<kill>
	BCC <BB#6>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#6(0x7c000000 / 0x80000000 = 96.88%) BB#7(0x04000000 / 0x80000000 = 3.12%)

<----------------->
Analyzing block 5
BB#5: derived from LLVM BB %for.body9
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#4 BB#7
	%R27<def> = LSL32ri %R26, 2, %STATUS<imp-def,dead>
	%R27<def> = ADDrr_r32 %R21, %R27<kill>, %STATUS<imp-def,dead>
	%R27<def> = LDRf32 %R27<kill>, 0; mem:Volatile LD4[%add.ptr10](tbaa=!2)
	%R32<def> = COPY %R17
	%R34<def> = COPY %R25
	%R33<def> = COPY %R19
    Successors according to CFG: BB#6(?%)

<----------------->
Analyzing block 6
BB#6: derived from LLVM BB %for.body13
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26 %R27 %R32 %R33 %R34
    Predecessors according to CFG: BB#5 BB#6
	%R37<def> = LDRf32 %R34, -8; mem:Volatile LD4[%scevgep8](tbaa=!2)
	%R35<def> = ADDri_r32 %R32, 16, %STATUS<imp-def,dead>
	%R36<def> = ADDri_r32 %R34, 16, %STATUS<imp-def,dead>
	%R38<def> = LDRf32 %R34, -4; mem:Volatile LD4[%scevgep9](tbaa=!2)
	%R33<def> = ADDri_r32 %R33<kill>, 4, %STATUS<imp-def,dead>
	%R39<def> = LDRf32 %R34, 0; mem:Volatile LD4[%lsr.iv5](tbaa=!2)
	%R40<def> = LDRf32 %R34<kill>, 4; mem:Volatile LD4[%scevgep7](tbaa=!2)
	%D21<def> = LDRf64 %R32, -8; mem:LD4[%scevgep17](tbaa=!2) LD4[%scevgep15](tbaa=!2)
	%R34<def> = LDRi32_r32 %FP, -4; mem:LD4[FixedStack2]
	GID %CONFIG<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %R34<kill>
	GIE %CONFIG<imp-def,dead>
	%R43<def,tied1> = FMADDrr_r32 %R43<tied0>, %R27, %R37<kill>, %STATUS<imp-def,dead>, %D21<imp-use,kill>, %D21<imp-def>
	%R42<def,tied1> = FMADDrr_r32 %R42<tied0>, %R27, %R38<kill>, %STATUS<imp-def,dead>, %D21<imp-use,kill>, %D21<imp-def>
	%R44<def> = COPY %R43, %D22<imp-def>
	%R45<def> = COPY %R42, %D21<imp-use,kill>, %D22<imp-use,kill>, %D22<imp-def>
	STRf64 %D22<kill>, %R32, -8; mem:ST4[%scevgep17](tbaa=!2) ST4[%scevgep15](tbaa=!2)
	%R34<def> = LDRf32 %R32, 0; mem:LD4[%lsr.iv1214](tbaa=!2)
	%R34<def,tied1> = FMADDrr_r32 %R34<kill,tied0>, %R27, %R39<kill>, %STATUS<imp-def,dead>
	STRf32 %R34<kill>, %R32, 0; mem:ST4[%lsr.iv1214](tbaa=!2)
	%R37<def> = LDRf32 %R32, 4; mem:LD4[%scevgep16](tbaa=!2)
	%R37<def,tied1> = FMADDrr_r32 %R37<kill,tied0>, %R27, %R40<kill>, %STATUS<imp-def,dead>
	%R34<def,dead> = CMPri_r32 %R33, 8, %STATUS<imp-def>
	STRf32 %R37<kill>, %R32<kill>, 4; mem:ST4[%scevgep16](tbaa=!2)
	%R32<def> = COPY %R35<kill>
	%R34<def> = COPY %R36<kill>
	BCC <BB#6>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#6(0x7c000000 / 0x80000000 = 96.88%) BB#7(0x04000000 / 0x80000000 = 3.12%)

<----------------->
Analyzing block 7
BB#7: derived from LLVM BB %for.end60
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#6
	%R25<def> = ADDrr_r32 %R25<kill>, %IP, %STATUS<imp-def,dead>
	%R26<def> = ADDri_r32 %R26<kill>, 1, %STATUS<imp-def,dead>
	%R27<def,dead> = CMPrr_r32 %R26, %R3, %STATUS<imp-def>
	BCC <BB#5>, 1, %STATUS<imp-use>
    Successors according to CFG: BB#8(0x04000000 / 0x80000000 = 3.12%) BB#5(0x7c000000 / 0x80000000 = 96.88%)

<----------------->
Analyzing block 6
BB#6: derived from LLVM BB %for.body13
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26 %R27 %R32 %R33 %R34
    Predecessors according to CFG: BB#5 BB#6
	%R37<def> = LDRf32 %R34, -8; mem:Volatile LD4[%scevgep8](tbaa=!2)
	%R35<def> = ADDri_r32 %R32, 16, %STATUS<imp-def,dead>
	%R36<def> = ADDri_r32 %R34, 16, %STATUS<imp-def,dead>
	%R38<def> = LDRf32 %R34, -4; mem:Volatile LD4[%scevgep9](tbaa=!2)
	%R33<def> = ADDri_r32 %R33<kill>, 4, %STATUS<imp-def,dead>
	%R39<def> = LDRf32 %R34, 0; mem:Volatile LD4[%lsr.iv5](tbaa=!2)
	%R40<def> = LDRf32 %R34<kill>, 4; mem:Volatile LD4[%scevgep7](tbaa=!2)
	%D21<def> = LDRf64 %R32, -8; mem:LD4[%scevgep17](tbaa=!2) LD4[%scevgep15](tbaa=!2)
	%R34<def> = LDRi32_r32 %FP, -4; mem:LD4[FixedStack2]
	GID %CONFIG<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %R34<kill>
	GIE %CONFIG<imp-def,dead>
	%R43<def,tied1> = FMADDrr_r32 %R43<tied0>, %R27, %R37<kill>, %STATUS<imp-def,dead>, %D21<imp-use,kill>, %D21<imp-def>
	%R42<def,tied1> = FMADDrr_r32 %R42<tied0>, %R27, %R38<kill>, %STATUS<imp-def,dead>, %D21<imp-use,kill>, %D21<imp-def>
	%R44<def> = COPY %R43, %D22<imp-def>
	%R45<def> = COPY %R42, %D21<imp-use,kill>, %D22<imp-use,kill>, %D22<imp-def>
	STRf64 %D22<kill>, %R32, -8; mem:ST4[%scevgep17](tbaa=!2) ST4[%scevgep15](tbaa=!2)
	%R34<def> = LDRf32 %R32, 0; mem:LD4[%lsr.iv1214](tbaa=!2)
	%R34<def,tied1> = FMADDrr_r32 %R34<kill,tied0>, %R27, %R39<kill>, %STATUS<imp-def,dead>
	STRf32 %R34<kill>, %R32, 0; mem:ST4[%lsr.iv1214](tbaa=!2)
	%R37<def> = LDRf32 %R32, 4; mem:LD4[%scevgep16](tbaa=!2)
	%R37<def,tied1> = FMADDrr_r32 %R37<kill,tied0>, %R27, %R40<kill>, %STATUS<imp-def,dead>
	%R34<def,dead> = CMPri_r32 %R33, 8, %STATUS<imp-def>
	STRf32 %R37<kill>, %R32<kill>, 4; mem:ST4[%scevgep16](tbaa=!2)
	%R32<def> = COPY %R35<kill>
	%R34<def> = COPY %R36<kill>
	BCC <BB#6>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#6(0x7c000000 / 0x80000000 = 96.88%) BB#7(0x04000000 / 0x80000000 = 3.12%)

<----------------->
Analyzing block 7
BB#7: derived from LLVM BB %for.end60
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#6
	%R25<def> = ADDrr_r32 %R25<kill>, %IP, %STATUS<imp-def,dead>
	%R26<def> = ADDri_r32 %R26<kill>, 1, %STATUS<imp-def,dead>
	%R27<def,dead> = CMPrr_r32 %R26, %R3, %STATUS<imp-def>
	BCC <BB#5>, 1, %STATUS<imp-use>
    Successors according to CFG: BB#8(0x04000000 / 0x80000000 = 3.12%) BB#5(0x7c000000 / 0x80000000 = 96.88%)

<----------------->
Analyzing block 8
BB#8: derived from LLVM BB %for.cond64.preheader
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#7
	%R25<def> = COPY %R22
	%R26<def> = COPY %R19
    Successors according to CFG: BB#9(?%)

<----------------->
Analyzing block 7
BB#7: derived from LLVM BB %for.end60
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#6
	%R25<def> = ADDrr_r32 %R25<kill>, %IP, %STATUS<imp-def,dead>
	%R26<def> = ADDri_r32 %R26<kill>, 1, %STATUS<imp-def,dead>
	%R27<def,dead> = CMPrr_r32 %R26, %R3, %STATUS<imp-def>
	BCC <BB#5>, 1, %STATUS<imp-use>
    Successors according to CFG: BB#8(0x04000000 / 0x80000000 = 3.12%) BB#5(0x7c000000 / 0x80000000 = 96.88%)

<----------------->
Analyzing block 8
BB#8: derived from LLVM BB %for.cond64.preheader
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#7
	%R25<def> = COPY %R22
	%R26<def> = COPY %R19
    Successors according to CFG: BB#9(?%)

<----------------->
Analyzing block 9
BB#9: derived from LLVM BB %for.body66
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#8 BB#9
	%R27<def> = ADDrr_r32 %R16, %R26, %STATUS<imp-def,dead>
	%R33<def> = LDRf32 %R27<kill>, 0; mem:LD4[%sunkaddr30](tbaa=!2)
	%R27<def> = ADDri_r32 %R25, 4, %STATUS<imp-def,dead>
	%R26<def> = ADDri_r32 %R26<kill>, 4, %STATUS<imp-def,dead>
	%R34<def> = LDRf32 %R25, 0; mem:Volatile LD4[%lsr.iv24](tbaa=!2)
	%R32<def> = LDRi32_r32 %FP, -4; mem:LD4[FixedStack2]
	GID %CONFIG<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %R32<kill>
	GIE %CONFIG<imp-def,dead>
	%R33<def> = FADDrr_r32 %R33<kill>, %R34<kill>, %STATUS<imp-def,dead>
	%R32<def,dead> = CMPri_r32 %R26, 32, %STATUS<imp-def>
	STRf32 %R33<kill>, %R25<kill>, 0; mem:Volatile ST4[%lsr.iv24](tbaa=!2)
	%R25<def> = COPY %R27<kill>
	BCC <BB#9>, 1, %STATUS<imp-use>
    Successors according to CFG: BB#10(0x04000000 / 0x80000000 = 3.12%) BB#9(0x7c000000 / 0x80000000 = 96.88%)

<----------------->
Analyzing block 8
BB#8: derived from LLVM BB %for.cond64.preheader
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#7
	%R25<def> = COPY %R22
	%R26<def> = COPY %R19
    Successors according to CFG: BB#9(?%)

<----------------->
Analyzing block 9
BB#9: derived from LLVM BB %for.body66
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#8 BB#9
	%R27<def> = ADDrr_r32 %R16, %R26, %STATUS<imp-def,dead>
	%R33<def> = LDRf32 %R27<kill>, 0; mem:LD4[%sunkaddr30](tbaa=!2)
	%R27<def> = ADDri_r32 %R25, 4, %STATUS<imp-def,dead>
	%R26<def> = ADDri_r32 %R26<kill>, 4, %STATUS<imp-def,dead>
	%R34<def> = LDRf32 %R25, 0; mem:Volatile LD4[%lsr.iv24](tbaa=!2)
	%R32<def> = LDRi32_r32 %FP, -4; mem:LD4[FixedStack2]
	GID %CONFIG<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %R32<kill>
	GIE %CONFIG<imp-def,dead>
	%R33<def> = FADDrr_r32 %R33<kill>, %R34<kill>, %STATUS<imp-def,dead>
	%R32<def,dead> = CMPri_r32 %R26, 32, %STATUS<imp-def>
	STRf32 %R33<kill>, %R25<kill>, 0; mem:Volatile ST4[%lsr.iv24](tbaa=!2)
	%R25<def> = COPY %R27<kill>
	BCC <BB#9>, 1, %STATUS<imp-use>
    Successors according to CFG: BB#10(0x04000000 / 0x80000000 = 3.12%) BB#9(0x7c000000 / 0x80000000 = 96.88%)

<----------------->
Analyzing block 10
BB#10: derived from LLVM BB %for.end75
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#9
	%R22<def> = ADDri_r32 %R22<kill>, 32, %STATUS<imp-def,dead>
	%R23<def> = ADDri_r32 %R23<kill>, 32, %STATUS<imp-def,dead>
	%R24<def> = ADDri_r32 %R24<kill>, 8, %STATUS<imp-def,dead>
	%R25<def,dead> = CMPrr_r32 %R24, %R3, %STATUS<imp-def>
	BCC <BB#4>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#4(0x7c000000 / 0x80000000 = 96.88%) BB#11(0x04000000 / 0x80000000 = 3.12%)

<----------------->
Analyzing block 9
BB#9: derived from LLVM BB %for.body66
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#8 BB#9
	%R27<def> = ADDrr_r32 %R16, %R26, %STATUS<imp-def,dead>
	%R33<def> = LDRf32 %R27<kill>, 0; mem:LD4[%sunkaddr30](tbaa=!2)
	%R27<def> = ADDri_r32 %R25, 4, %STATUS<imp-def,dead>
	%R26<def> = ADDri_r32 %R26<kill>, 4, %STATUS<imp-def,dead>
	%R34<def> = LDRf32 %R25, 0; mem:Volatile LD4[%lsr.iv24](tbaa=!2)
	%R32<def> = LDRi32_r32 %FP, -4; mem:LD4[FixedStack2]
	GID %CONFIG<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %R32<kill>
	GIE %CONFIG<imp-def,dead>
	%R33<def> = FADDrr_r32 %R33<kill>, %R34<kill>, %STATUS<imp-def,dead>
	%R32<def,dead> = CMPri_r32 %R26, 32, %STATUS<imp-def>
	STRf32 %R33<kill>, %R25<kill>, 0; mem:Volatile ST4[%lsr.iv24](tbaa=!2)
	%R25<def> = COPY %R27<kill>
	BCC <BB#9>, 1, %STATUS<imp-use>
    Successors according to CFG: BB#10(0x04000000 / 0x80000000 = 3.12%) BB#9(0x7c000000 / 0x80000000 = 96.88%)

<----------------->
Analyzing block 10
BB#10: derived from LLVM BB %for.end75
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#9
	%R22<def> = ADDri_r32 %R22<kill>, 32, %STATUS<imp-def,dead>
	%R23<def> = ADDri_r32 %R23<kill>, 32, %STATUS<imp-def,dead>
	%R24<def> = ADDri_r32 %R24<kill>, 8, %STATUS<imp-def,dead>
	%R25<def,dead> = CMPrr_r32 %R24, %R3, %STATUS<imp-def>
	BCC <BB#4>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#4(0x7c000000 / 0x80000000 = 96.88%) BB#11(0x04000000 / 0x80000000 = 3.12%)

<----------------->
Analyzing block 11
BB#11: derived from LLVM BB %for.end78
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20
    Predecessors according to CFG: BB#10
	%R2<def> = ADDrr_r32 %R2<kill>, %IP, %STATUS<imp-def,dead>
	%R20<def> = ADDri_r32 %R20<kill>, 1, %STATUS<imp-def,dead>
	%R21<def,dead> = CMPrr_r32 %R20, %R3, %STATUS<imp-def>
	BCC <BB#3>, 1, %STATUS<imp-use>
    Successors according to CFG: BB#12(0x04000000 / 0x80000000 = 3.12%) BB#3(0x7c000000 / 0x80000000 = 96.88%)

<----------------->
Analyzing block 10
BB#10: derived from LLVM BB %for.end75
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#9
	%R22<def> = ADDri_r32 %R22<kill>, 32, %STATUS<imp-def,dead>
	%R23<def> = ADDri_r32 %R23<kill>, 32, %STATUS<imp-def,dead>
	%R24<def> = ADDri_r32 %R24<kill>, 8, %STATUS<imp-def,dead>
	%R25<def,dead> = CMPrr_r32 %R24, %R3, %STATUS<imp-def>
	BCC <BB#4>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#4(0x7c000000 / 0x80000000 = 96.88%) BB#11(0x04000000 / 0x80000000 = 3.12%)

<----------------->
Analyzing block 11
BB#11: derived from LLVM BB %for.end78
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20
    Predecessors according to CFG: BB#10
	%R2<def> = ADDrr_r32 %R2<kill>, %IP, %STATUS<imp-def,dead>
	%R20<def> = ADDri_r32 %R20<kill>, 1, %STATUS<imp-def,dead>
	%R21<def,dead> = CMPrr_r32 %R20, %R3, %STATUS<imp-def>
	BCC <BB#3>, 1, %STATUS<imp-use>
    Successors according to CFG: BB#12(0x04000000 / 0x80000000 = 3.12%) BB#3(0x7c000000 / 0x80000000 = 96.88%)

<----------------->
Analyzing block 12
BB#12: derived from LLVM BB %for.end81
    Predecessors according to CFG: BB#1 BB#11
	%R0<def> = LDRi32_r32 %FP, -44; mem:LD4[FixedStack1]
	GID
	%CONFIG<def> = MOVTS32_core %R0<kill>
	GIE %CONFIG<imp-use,kill>
	%LR<def> = LDRi64 %SP, 48; flags: FrameSetup
	%SP<def> = ADDri_r32 %SP, 48, %STATUS<imp-def>
	RTS

<----------------->
Analyzing block 11
BB#11: derived from LLVM BB %for.end78
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20
    Predecessors according to CFG: BB#10
	%R2<def> = ADDrr_r32 %R2<kill>, %IP, %STATUS<imp-def,dead>
	%R20<def> = ADDri_r32 %R20<kill>, 1, %STATUS<imp-def,dead>
	%R21<def,dead> = CMPrr_r32 %R20, %R3, %STATUS<imp-def>
	BCC <BB#3>, 1, %STATUS<imp-use>
    Successors according to CFG: BB#12(0x04000000 / 0x80000000 = 3.12%) BB#3(0x7c000000 / 0x80000000 = 96.88%)

<----------------->
Analyzing block 0
BB#0: 
    Live Ins: %R0 %R1 %R2 %R3
	%SP<def,tied2> = STRi64_pmd %LR, %SP<tied0>, -48; flags: FrameSetup
	%FP<def> = ADDri_r32 %SP, 48, %STATUS<imp-def>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	GID %CONFIG<imp-def>
	%R19<def> = MOVFS32_core %CONFIG, %D9<imp-def>
	STRi32_r32 %R19, %FP, -44; mem:ST4[FixedStack1]
	%IP<def> = MOVi32ri 65535
	%IP<def,tied1> = MOVTi32ri %IP<kill,tied0>, 65521
	%R18<def> = ANDrr_r32 %R19, %IP<kill>, %STATUS<imp-def>, %D9<imp-use,kill>, %D9<imp-def>
	%R19<def,tied1> = MOVTi32ri %R19<tied0>, 72, %D9<imp-use,kill>, %D9<imp-def>
	STRi64 %D9<kill>, %FP, -8; mem:ST4[FixedStack3] ST4[FixedStack2]
	GIE %CONFIG<imp-use,kill>
    Successors according to CFG: BB#1(?%)

<----------------->
Analyzing block 1
BB#1: derived from LLVM BB %entry
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#0
	%IP<def,dead> = CMPri_r32 %R3, 1, %STATUS<imp-def>
	BCC <BB#12>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#2(0x50000000 / 0x80000000 = 62.50%) BB#12(0x30000000 / 0x80000000 = 37.50%)

<----------------->
Analyzing block 2
BB#2: derived from LLVM BB %for.body3.lr.ph.preheader
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#1
	%IP<def> = LSL32ri %R3, 2, %STATUS<imp-def,dead>
	%R1<def> = ADDri_r32 %R1<kill>, 8, %STATUS<imp-def,dead>
	%R16<def> = MOViPTR %FP, -40
	%R17<def> = ADDri_r32 %R16, 8, %STATUS<imp-def,dead>
	%R19<def> = MOVi32ri 0, %D9<imp-def>
	%R20<def> = COPY %R19
    Successors according to CFG: BB#3(?%)

<----------------->
Analyzing block 3
BB#3: derived from LLVM BB %for.body3.lr.ph
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20
    Predecessors according to CFG: BB#2 BB#11
	%R21<def> = LDRi32_r32 %FP, -8; mem:LD4[FixedStack3]
	GID %CONFIG<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %R21<kill>
	GIE %CONFIG<imp-def,dead>
	%R21<def> = IMULrr_r32 %R20, %R3, %STATUS<imp-def,dead>
	%R21<def> = LSL32ri %R21<kill>, 2, %STATUS<imp-def,dead>
	%R21<def> = ADDrr_r32 %R0, %R21<kill>, %STATUS<imp-def,dead>
	%R22<def> = COPY %R2
	%R23<def> = COPY %R1
	%R24<def> = COPY %R19
    Successors according to CFG: BB#4(?%)

<----------------->
Analyzing block 4
BB#4: derived from LLVM BB %for.body9.preheader
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#3 BB#10
	%R18<def> = COPY %R19, %D9<imp-use,kill>, %D9<imp-def>
	STRi64 %D9, %FP, -16; mem:ST8[%1+24]
	STRi64 %D9, %FP, -24; mem:ST8[%1+16]
	STRi64 %D9, %FP, -32; mem:ST8[%1+8]
	STRi64 %D9, %FP, -40; mem:ST8[%1]
	%R25<def> = COPY %R23
	%R26<def> = COPY %R19
    Successors according to CFG: BB#5(?%)

<----------------->
Analyzing block 5
BB#5: derived from LLVM BB %for.body9
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#4 BB#7
	%R27<def> = LSL32ri %R26, 2, %STATUS<imp-def,dead>
	%R27<def> = ADDrr_r32 %R21, %R27<kill>, %STATUS<imp-def,dead>
	%R27<def> = LDRf32 %R27<kill>, 0; mem:Volatile LD4[%add.ptr10](tbaa=!2)
	%R32<def> = COPY %R17
	%R34<def> = COPY %R25
	%R33<def> = COPY %R19
    Successors according to CFG: BB#6(?%)

<----------------->
Analyzing block 6
BB#6: derived from LLVM BB %for.body13
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26 %R27 %R32 %R33 %R34
    Predecessors according to CFG: BB#5 BB#6
	%R37<def> = LDRf32 %R34, -8; mem:Volatile LD4[%scevgep8](tbaa=!2)
	%R35<def> = ADDri_r32 %R32, 16, %STATUS<imp-def,dead>
	%R36<def> = ADDri_r32 %R34, 16, %STATUS<imp-def,dead>
	%R38<def> = LDRf32 %R34, -4; mem:Volatile LD4[%scevgep9](tbaa=!2)
	%R33<def> = ADDri_r32 %R33<kill>, 4, %STATUS<imp-def,dead>
	%R39<def> = LDRf32 %R34, 0; mem:Volatile LD4[%lsr.iv5](tbaa=!2)
	%R40<def> = LDRf32 %R34<kill>, 4; mem:Volatile LD4[%scevgep7](tbaa=!2)
	%D21<def> = LDRf64 %R32, -8; mem:LD4[%scevgep17](tbaa=!2) LD4[%scevgep15](tbaa=!2)
	%R34<def> = LDRi32_r32 %FP, -4; mem:LD4[FixedStack2]
	GID %CONFIG<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %R34<kill>
	GIE %CONFIG<imp-def,dead>
	%R43<def,tied1> = FMADDrr_r32 %R43<tied0>, %R27, %R37<kill>, %STATUS<imp-def,dead>, %D21<imp-use,kill>, %D21<imp-def>
	%R42<def,tied1> = FMADDrr_r32 %R42<tied0>, %R27, %R38<kill>, %STATUS<imp-def,dead>, %D21<imp-use,kill>, %D21<imp-def>
	%R44<def> = COPY %R43, %D22<imp-def>
	%R45<def> = COPY %R42, %D21<imp-use,kill>, %D22<imp-use,kill>, %D22<imp-def>
	STRf64 %D22<kill>, %R32, -8; mem:ST4[%scevgep17](tbaa=!2) ST4[%scevgep15](tbaa=!2)
	%R34<def> = LDRf32 %R32, 0; mem:LD4[%lsr.iv1214](tbaa=!2)
	%R34<def,tied1> = FMADDrr_r32 %R34<kill,tied0>, %R27, %R39<kill>, %STATUS<imp-def,dead>
	STRf32 %R34<kill>, %R32, 0; mem:ST4[%lsr.iv1214](tbaa=!2)
	%R37<def> = LDRf32 %R32, 4; mem:LD4[%scevgep16](tbaa=!2)
	%R37<def,tied1> = FMADDrr_r32 %R37<kill,tied0>, %R27, %R40<kill>, %STATUS<imp-def,dead>
	%R34<def,dead> = CMPri_r32 %R33, 8, %STATUS<imp-def>
	STRf32 %R37<kill>, %R32<kill>, 4; mem:ST4[%scevgep16](tbaa=!2)
	%R32<def> = COPY %R35<kill>
	%R34<def> = COPY %R36<kill>
	BCC <BB#6>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#6(0x7c000000 / 0x80000000 = 96.88%) BB#7(0x04000000 / 0x80000000 = 3.12%)

<----------------->
Analyzing block 7
BB#7: derived from LLVM BB %for.end60
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#6
	%R25<def> = ADDrr_r32 %R25<kill>, %IP, %STATUS<imp-def,dead>
	%R26<def> = ADDri_r32 %R26<kill>, 1, %STATUS<imp-def,dead>
	%R27<def,dead> = CMPrr_r32 %R26, %R3, %STATUS<imp-def>
	BCC <BB#5>, 1, %STATUS<imp-use>
    Successors according to CFG: BB#8(0x04000000 / 0x80000000 = 3.12%) BB#5(0x7c000000 / 0x80000000 = 96.88%)

<----------------->
Analyzing block 8
BB#8: derived from LLVM BB %for.cond64.preheader
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#7
	%R25<def> = COPY %R22
	%R26<def> = COPY %R19
    Successors according to CFG: BB#9(?%)

<----------------->
Analyzing block 9
BB#9: derived from LLVM BB %for.body66
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#8 BB#9
	%R27<def> = ADDrr_r32 %R16, %R26, %STATUS<imp-def,dead>
	%R33<def> = LDRf32 %R27<kill>, 0; mem:LD4[%sunkaddr30](tbaa=!2)
	%R27<def> = ADDri_r32 %R25, 4, %STATUS<imp-def,dead>
	%R26<def> = ADDri_r32 %R26<kill>, 4, %STATUS<imp-def,dead>
	%R34<def> = LDRf32 %R25, 0; mem:Volatile LD4[%lsr.iv24](tbaa=!2)
	%R32<def> = LDRi32_r32 %FP, -4; mem:LD4[FixedStack2]
	GID %CONFIG<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %R32<kill>
	GIE %CONFIG<imp-def,dead>
	%R33<def> = FADDrr_r32 %R33<kill>, %R34<kill>, %STATUS<imp-def,dead>
	%R32<def,dead> = CMPri_r32 %R26, 32, %STATUS<imp-def>
	STRf32 %R33<kill>, %R25<kill>, 0; mem:Volatile ST4[%lsr.iv24](tbaa=!2)
	%R25<def> = COPY %R27<kill>
	BCC <BB#9>, 1, %STATUS<imp-use>
    Successors according to CFG: BB#10(0x04000000 / 0x80000000 = 3.12%) BB#9(0x7c000000 / 0x80000000 = 96.88%)

<----------------->
Analyzing block 10
BB#10: derived from LLVM BB %for.end75
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#9
	%R22<def> = ADDri_r32 %R22<kill>, 32, %STATUS<imp-def,dead>
	%R23<def> = ADDri_r32 %R23<kill>, 32, %STATUS<imp-def,dead>
	%R24<def> = ADDri_r32 %R24<kill>, 8, %STATUS<imp-def,dead>
	%R25<def,dead> = CMPrr_r32 %R24, %R3, %STATUS<imp-def>
	BCC <BB#4>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#4(0x7c000000 / 0x80000000 = 96.88%) BB#11(0x04000000 / 0x80000000 = 3.12%)

<----------------->
Analyzing block 11
BB#11: derived from LLVM BB %for.end78
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20
    Predecessors according to CFG: BB#10
	%R2<def> = ADDrr_r32 %R2<kill>, %IP, %STATUS<imp-def,dead>
	%R20<def> = ADDri_r32 %R20<kill>, 1, %STATUS<imp-def,dead>
	%R21<def,dead> = CMPrr_r32 %R20, %R3, %STATUS<imp-def>
	BCC <BB#3>, 1, %STATUS<imp-use>
    Successors according to CFG: BB#12(0x04000000 / 0x80000000 = 3.12%) BB#3(0x7c000000 / 0x80000000 = 96.88%)

<----------------->
Analyzing block 12
BB#12: derived from LLVM BB %for.end81
    Predecessors according to CFG: BB#1 BB#11
	%R0<def> = LDRi32_r32 %FP, -44; mem:LD4[FixedStack1]
	GID
	%CONFIG<def> = MOVTS32_core %R0<kill>
	GIE %CONFIG<imp-use,kill>
	%LR<def> = LDRi64 %SP, 48; flags: FrameSetup
	%SP<def> = ADDri_r32 %SP, 48, %STATUS<imp-def>
	RTS
# *** IR Dump After Control Flow Optimizer ***:
# Machine code for function matmac: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=32, align=8, at location [SP-40]
  fi#1: size=4, align=4, at location [SP-44]
  fi#2: size=4, align=4, at location [SP-4]
  fi#3: size=4, align=8, at location [SP-8]
Function Live Ins: %R0, %R1, %R2, %R3

BB#0: 
    Live Ins: %R0 %R1 %R2 %R3
	%SP<def,tied2> = STRi64_pmd %LR, %SP<tied0>, -48; flags: FrameSetup
	%FP<def> = ADDri_r32 %SP, 48, %STATUS<imp-def>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	GID %CONFIG<imp-def>
	%R19<def> = MOVFS32_core %CONFIG, %D9<imp-def>
	STRi32_r32 %R19, %FP, -44; mem:ST4[FixedStack1]
	%IP<def> = MOVi32ri 65535
	%IP<def,tied1> = MOVTi32ri %IP<kill,tied0>, 65521
	%R18<def> = ANDrr_r32 %R19, %IP<kill>, %STATUS<imp-def>, %D9<imp-use,kill>, %D9<imp-def>
	%R19<def,tied1> = MOVTi32ri %R19<tied0>, 72, %D9<imp-use,kill>, %D9<imp-def>
	STRi64 %D9<kill>, %FP, -8; mem:ST4[FixedStack3] ST4[FixedStack2]
	GIE %CONFIG<imp-use,kill>
    Successors according to CFG: BB#1(?%)

BB#1: derived from LLVM BB %entry
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#0
	%IP<def,dead> = CMPri_r32 %R3, 1, %STATUS<imp-def>
	BCC <BB#12>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#2(0x50000000 / 0x80000000 = 62.50%) BB#12(0x30000000 / 0x80000000 = 37.50%)

BB#2: derived from LLVM BB %for.body3.lr.ph.preheader
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#1
	%IP<def> = LSL32ri %R3, 2, %STATUS<imp-def,dead>
	%R1<def> = ADDri_r32 %R1<kill>, 8, %STATUS<imp-def,dead>
	%R16<def> = MOViPTR %FP, -40
	%R17<def> = ADDri_r32 %R16, 8, %STATUS<imp-def,dead>
	%R19<def> = MOVi32ri 0, %D9<imp-def>
	%R20<def> = COPY %R19
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %for.body3.lr.ph
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20
    Predecessors according to CFG: BB#2 BB#11
	%R21<def> = LDRi32_r32 %FP, -8; mem:LD4[FixedStack3]
	GID %CONFIG<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %R21<kill>
	GIE %CONFIG<imp-def,dead>
	%R21<def> = IMULrr_r32 %R20, %R3, %STATUS<imp-def,dead>
	%R21<def> = LSL32ri %R21<kill>, 2, %STATUS<imp-def,dead>
	%R21<def> = ADDrr_r32 %R0, %R21<kill>, %STATUS<imp-def,dead>
	%R22<def> = COPY %R2
	%R23<def> = COPY %R1
	%R24<def> = COPY %R19
    Successors according to CFG: BB#4(?%)

BB#4: derived from LLVM BB %for.body9.preheader
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#3 BB#10
	%R18<def> = COPY %R19, %D9<imp-use,kill>, %D9<imp-def>
	STRi64 %D9, %FP, -16; mem:ST8[%1+24]
	STRi64 %D9, %FP, -24; mem:ST8[%1+16]
	STRi64 %D9, %FP, -32; mem:ST8[%1+8]
	STRi64 %D9, %FP, -40; mem:ST8[%1]
	%R25<def> = COPY %R23
	%R26<def> = COPY %R19
    Successors according to CFG: BB#5(?%)

BB#5: derived from LLVM BB %for.body9
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#4 BB#7
	%R27<def> = LSL32ri %R26, 2, %STATUS<imp-def,dead>
	%R27<def> = ADDrr_r32 %R21, %R27<kill>, %STATUS<imp-def,dead>
	%R27<def> = LDRf32 %R27<kill>, 0; mem:Volatile LD4[%add.ptr10](tbaa=!2)
	%R32<def> = COPY %R17
	%R34<def> = COPY %R25
	%R33<def> = COPY %R19
    Successors according to CFG: BB#6(?%)

BB#6: derived from LLVM BB %for.body13
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26 %R27 %R32 %R33 %R34
    Predecessors according to CFG: BB#5 BB#6
	%R37<def> = LDRf32 %R34, -8; mem:Volatile LD4[%scevgep8](tbaa=!2)
	%R35<def> = ADDri_r32 %R32, 16, %STATUS<imp-def,dead>
	%R36<def> = ADDri_r32 %R34, 16, %STATUS<imp-def,dead>
	%R38<def> = LDRf32 %R34, -4; mem:Volatile LD4[%scevgep9](tbaa=!2)
	%R33<def> = ADDri_r32 %R33<kill>, 4, %STATUS<imp-def,dead>
	%R39<def> = LDRf32 %R34, 0; mem:Volatile LD4[%lsr.iv5](tbaa=!2)
	%R40<def> = LDRf32 %R34<kill>, 4; mem:Volatile LD4[%scevgep7](tbaa=!2)
	%D21<def> = LDRf64 %R32, -8; mem:LD4[%scevgep17](tbaa=!2) LD4[%scevgep15](tbaa=!2)
	%R34<def> = LDRi32_r32 %FP, -4; mem:LD4[FixedStack2]
	GID %CONFIG<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %R34<kill>
	GIE %CONFIG<imp-def,dead>
	%R43<def,tied1> = FMADDrr_r32 %R43<tied0>, %R27, %R37<kill>, %STATUS<imp-def,dead>, %D21<imp-use,kill>, %D21<imp-def>
	%R42<def,tied1> = FMADDrr_r32 %R42<tied0>, %R27, %R38<kill>, %STATUS<imp-def,dead>, %D21<imp-use,kill>, %D21<imp-def>
	%R44<def> = COPY %R43, %D22<imp-def>
	%R45<def> = COPY %R42, %D21<imp-use,kill>, %D22<imp-use,kill>, %D22<imp-def>
	STRf64 %D22<kill>, %R32, -8; mem:ST4[%scevgep17](tbaa=!2) ST4[%scevgep15](tbaa=!2)
	%R34<def> = LDRf32 %R32, 0; mem:LD4[%lsr.iv1214](tbaa=!2)
	%R34<def,tied1> = FMADDrr_r32 %R34<kill,tied0>, %R27, %R39<kill>, %STATUS<imp-def,dead>
	STRf32 %R34<kill>, %R32, 0; mem:ST4[%lsr.iv1214](tbaa=!2)
	%R37<def> = LDRf32 %R32, 4; mem:LD4[%scevgep16](tbaa=!2)
	%R37<def,tied1> = FMADDrr_r32 %R37<kill,tied0>, %R27, %R40<kill>, %STATUS<imp-def,dead>
	%R34<def,dead> = CMPri_r32 %R33, 8, %STATUS<imp-def>
	STRf32 %R37<kill>, %R32<kill>, 4; mem:ST4[%scevgep16](tbaa=!2)
	%R32<def> = COPY %R35<kill>
	%R34<def> = COPY %R36<kill>
	BCC <BB#6>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#6(0x7c000000 / 0x80000000 = 96.88%) BB#7(0x04000000 / 0x80000000 = 3.12%)

BB#7: derived from LLVM BB %for.end60
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#6
	%R25<def> = ADDrr_r32 %R25<kill>, %IP, %STATUS<imp-def,dead>
	%R26<def> = ADDri_r32 %R26<kill>, 1, %STATUS<imp-def,dead>
	%R27<def,dead> = CMPrr_r32 %R26, %R3, %STATUS<imp-def>
	BCC <BB#5>, 1, %STATUS<imp-use>
    Successors according to CFG: BB#8(0x04000000 / 0x80000000 = 3.12%) BB#5(0x7c000000 / 0x80000000 = 96.88%)

BB#8: derived from LLVM BB %for.cond64.preheader
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#7
	%R25<def> = COPY %R22
	%R26<def> = COPY %R19
    Successors according to CFG: BB#9(?%)

BB#9: derived from LLVM BB %for.body66
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#8 BB#9
	%R27<def> = ADDrr_r32 %R16, %R26, %STATUS<imp-def,dead>
	%R33<def> = LDRf32 %R27<kill>, 0; mem:LD4[%sunkaddr30](tbaa=!2)
	%R27<def> = ADDri_r32 %R25, 4, %STATUS<imp-def,dead>
	%R26<def> = ADDri_r32 %R26<kill>, 4, %STATUS<imp-def,dead>
	%R34<def> = LDRf32 %R25, 0; mem:Volatile LD4[%lsr.iv24](tbaa=!2)
	%R32<def> = LDRi32_r32 %FP, -4; mem:LD4[FixedStack2]
	GID %CONFIG<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %R32<kill>
	GIE %CONFIG<imp-def,dead>
	%R33<def> = FADDrr_r32 %R33<kill>, %R34<kill>, %STATUS<imp-def,dead>
	%R32<def,dead> = CMPri_r32 %R26, 32, %STATUS<imp-def>
	STRf32 %R33<kill>, %R25<kill>, 0; mem:Volatile ST4[%lsr.iv24](tbaa=!2)
	%R25<def> = COPY %R27<kill>
	BCC <BB#9>, 1, %STATUS<imp-use>
    Successors according to CFG: BB#10(0x04000000 / 0x80000000 = 3.12%) BB#9(0x7c000000 / 0x80000000 = 96.88%)

BB#10: derived from LLVM BB %for.end75
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#9
	%R22<def> = ADDri_r32 %R22<kill>, 32, %STATUS<imp-def,dead>
	%R23<def> = ADDri_r32 %R23<kill>, 32, %STATUS<imp-def,dead>
	%R24<def> = ADDri_r32 %R24<kill>, 8, %STATUS<imp-def,dead>
	%R25<def,dead> = CMPrr_r32 %R24, %R3, %STATUS<imp-def>
	BCC <BB#4>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#4(0x7c000000 / 0x80000000 = 96.88%) BB#11(0x04000000 / 0x80000000 = 3.12%)

BB#11: derived from LLVM BB %for.end78
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20
    Predecessors according to CFG: BB#10
	%R2<def> = ADDrr_r32 %R2<kill>, %IP, %STATUS<imp-def,dead>
	%R20<def> = ADDri_r32 %R20<kill>, 1, %STATUS<imp-def,dead>
	%R21<def,dead> = CMPrr_r32 %R20, %R3, %STATUS<imp-def>
	BCC <BB#3>, 1, %STATUS<imp-use>
    Successors according to CFG: BB#12(0x04000000 / 0x80000000 = 3.12%) BB#3(0x7c000000 / 0x80000000 = 96.88%)

BB#12: derived from LLVM BB %for.end81
    Predecessors according to CFG: BB#1 BB#11
	%R0<def> = LDRi32_r32 %FP, -44; mem:LD4[FixedStack1]
	GID
	%CONFIG<def> = MOVTS32_core %R0<kill>
	GIE %CONFIG<imp-use,kill>
	%LR<def> = LDRi64 %SP, 48; flags: FrameSetup
	%SP<def> = ADDri_r32 %SP, 48, %STATUS<imp-def>
	RTS

# End machine code for function matmac.

# *** IR Dump Before Tail Duplication ***:
# Machine code for function matmac: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=32, align=8, at location [SP-40]
  fi#1: size=4, align=4, at location [SP-44]
  fi#2: size=4, align=4, at location [SP-4]
  fi#3: size=4, align=8, at location [SP-8]
Function Live Ins: %R0, %R1, %R2, %R3

BB#0: 
    Live Ins: %R0 %R1 %R2 %R3
	%SP<def,tied2> = STRi64_pmd %LR, %SP<tied0>, -48; flags: FrameSetup
	%FP<def> = ADDri_r32 %SP, 48, %STATUS<imp-def>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	GID %CONFIG<imp-def>
	%R19<def> = MOVFS32_core %CONFIG, %D9<imp-def>
	STRi32_r32 %R19, %FP, -44; mem:ST4[FixedStack1]
	%IP<def> = MOVi32ri 65535
	%IP<def,tied1> = MOVTi32ri %IP<kill,tied0>, 65521
	%R18<def> = ANDrr_r32 %R19, %IP<kill>, %STATUS<imp-def>, %D9<imp-use,kill>, %D9<imp-def>
	%R19<def,tied1> = MOVTi32ri %R19<tied0>, 72, %D9<imp-use,kill>, %D9<imp-def>
	STRi64 %D9<kill>, %FP, -8; mem:ST4[FixedStack3] ST4[FixedStack2]
	GIE %CONFIG<imp-use,kill>
    Successors according to CFG: BB#1(?%)

BB#1: derived from LLVM BB %entry
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#0
	%IP<def,dead> = CMPri_r32 %R3, 1, %STATUS<imp-def>
	BCC <BB#12>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#2(0x50000000 / 0x80000000 = 62.50%) BB#12(0x30000000 / 0x80000000 = 37.50%)

BB#2: derived from LLVM BB %for.body3.lr.ph.preheader
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#1
	%IP<def> = LSL32ri %R3, 2, %STATUS<imp-def,dead>
	%R1<def> = ADDri_r32 %R1<kill>, 8, %STATUS<imp-def,dead>
	%R16<def> = MOViPTR %FP, -40
	%R17<def> = ADDri_r32 %R16, 8, %STATUS<imp-def,dead>
	%R19<def> = MOVi32ri 0, %D9<imp-def>
	%R20<def> = COPY %R19
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %for.body3.lr.ph
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20
    Predecessors according to CFG: BB#2 BB#11
	%R21<def> = LDRi32_r32 %FP, -8; mem:LD4[FixedStack3]
	GID %CONFIG<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %R21<kill>
	GIE %CONFIG<imp-def,dead>
	%R21<def> = IMULrr_r32 %R20, %R3, %STATUS<imp-def,dead>
	%R21<def> = LSL32ri %R21<kill>, 2, %STATUS<imp-def,dead>
	%R21<def> = ADDrr_r32 %R0, %R21<kill>, %STATUS<imp-def,dead>
	%R22<def> = COPY %R2
	%R23<def> = COPY %R1
	%R24<def> = COPY %R19
    Successors according to CFG: BB#4(?%)

BB#4: derived from LLVM BB %for.body9.preheader
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#3 BB#10
	%R18<def> = COPY %R19, %D9<imp-use,kill>, %D9<imp-def>
	STRi64 %D9, %FP, -16; mem:ST8[%1+24]
	STRi64 %D9, %FP, -24; mem:ST8[%1+16]
	STRi64 %D9, %FP, -32; mem:ST8[%1+8]
	STRi64 %D9, %FP, -40; mem:ST8[%1]
	%R25<def> = COPY %R23
	%R26<def> = COPY %R19
    Successors according to CFG: BB#5(?%)

BB#5: derived from LLVM BB %for.body9
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#4 BB#7
	%R27<def> = LSL32ri %R26, 2, %STATUS<imp-def,dead>
	%R27<def> = ADDrr_r32 %R21, %R27<kill>, %STATUS<imp-def,dead>
	%R27<def> = LDRf32 %R27<kill>, 0; mem:Volatile LD4[%add.ptr10](tbaa=!2)
	%R32<def> = COPY %R17
	%R34<def> = COPY %R25
	%R33<def> = COPY %R19
    Successors according to CFG: BB#6(?%)

BB#6: derived from LLVM BB %for.body13
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26 %R27 %R32 %R33 %R34
    Predecessors according to CFG: BB#5 BB#6
	%R37<def> = LDRf32 %R34, -8; mem:Volatile LD4[%scevgep8](tbaa=!2)
	%R35<def> = ADDri_r32 %R32, 16, %STATUS<imp-def,dead>
	%R36<def> = ADDri_r32 %R34, 16, %STATUS<imp-def,dead>
	%R38<def> = LDRf32 %R34, -4; mem:Volatile LD4[%scevgep9](tbaa=!2)
	%R33<def> = ADDri_r32 %R33<kill>, 4, %STATUS<imp-def,dead>
	%R39<def> = LDRf32 %R34, 0; mem:Volatile LD4[%lsr.iv5](tbaa=!2)
	%R40<def> = LDRf32 %R34<kill>, 4; mem:Volatile LD4[%scevgep7](tbaa=!2)
	%D21<def> = LDRf64 %R32, -8; mem:LD4[%scevgep17](tbaa=!2) LD4[%scevgep15](tbaa=!2)
	%R34<def> = LDRi32_r32 %FP, -4; mem:LD4[FixedStack2]
	GID %CONFIG<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %R34<kill>
	GIE %CONFIG<imp-def,dead>
	%R43<def,tied1> = FMADDrr_r32 %R43<tied0>, %R27, %R37<kill>, %STATUS<imp-def,dead>, %D21<imp-use,kill>, %D21<imp-def>
	%R42<def,tied1> = FMADDrr_r32 %R42<tied0>, %R27, %R38<kill>, %STATUS<imp-def,dead>, %D21<imp-use,kill>, %D21<imp-def>
	%R44<def> = COPY %R43, %D22<imp-def>
	%R45<def> = COPY %R42, %D21<imp-use,kill>, %D22<imp-use,kill>, %D22<imp-def>
	STRf64 %D22<kill>, %R32, -8; mem:ST4[%scevgep17](tbaa=!2) ST4[%scevgep15](tbaa=!2)
	%R34<def> = LDRf32 %R32, 0; mem:LD4[%lsr.iv1214](tbaa=!2)
	%R34<def,tied1> = FMADDrr_r32 %R34<kill,tied0>, %R27, %R39<kill>, %STATUS<imp-def,dead>
	STRf32 %R34<kill>, %R32, 0; mem:ST4[%lsr.iv1214](tbaa=!2)
	%R37<def> = LDRf32 %R32, 4; mem:LD4[%scevgep16](tbaa=!2)
	%R37<def,tied1> = FMADDrr_r32 %R37<kill,tied0>, %R27, %R40<kill>, %STATUS<imp-def,dead>
	%R34<def,dead> = CMPri_r32 %R33, 8, %STATUS<imp-def>
	STRf32 %R37<kill>, %R32<kill>, 4; mem:ST4[%scevgep16](tbaa=!2)
	%R32<def> = COPY %R35<kill>
	%R34<def> = COPY %R36<kill>
	BCC <BB#6>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#6(0x7c000000 / 0x80000000 = 96.88%) BB#7(0x04000000 / 0x80000000 = 3.12%)

BB#7: derived from LLVM BB %for.end60
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#6
	%R25<def> = ADDrr_r32 %R25<kill>, %IP, %STATUS<imp-def,dead>
	%R26<def> = ADDri_r32 %R26<kill>, 1, %STATUS<imp-def,dead>
	%R27<def,dead> = CMPrr_r32 %R26, %R3, %STATUS<imp-def>
	BCC <BB#5>, 1, %STATUS<imp-use>
    Successors according to CFG: BB#8(0x04000000 / 0x80000000 = 3.12%) BB#5(0x7c000000 / 0x80000000 = 96.88%)

BB#8: derived from LLVM BB %for.cond64.preheader
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#7
	%R25<def> = COPY %R22
	%R26<def> = COPY %R19
    Successors according to CFG: BB#9(?%)

BB#9: derived from LLVM BB %for.body66
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#8 BB#9
	%R27<def> = ADDrr_r32 %R16, %R26, %STATUS<imp-def,dead>
	%R33<def> = LDRf32 %R27<kill>, 0; mem:LD4[%sunkaddr30](tbaa=!2)
	%R27<def> = ADDri_r32 %R25, 4, %STATUS<imp-def,dead>
	%R26<def> = ADDri_r32 %R26<kill>, 4, %STATUS<imp-def,dead>
	%R34<def> = LDRf32 %R25, 0; mem:Volatile LD4[%lsr.iv24](tbaa=!2)
	%R32<def> = LDRi32_r32 %FP, -4; mem:LD4[FixedStack2]
	GID %CONFIG<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %R32<kill>
	GIE %CONFIG<imp-def,dead>
	%R33<def> = FADDrr_r32 %R33<kill>, %R34<kill>, %STATUS<imp-def,dead>
	%R32<def,dead> = CMPri_r32 %R26, 32, %STATUS<imp-def>
	STRf32 %R33<kill>, %R25<kill>, 0; mem:Volatile ST4[%lsr.iv24](tbaa=!2)
	%R25<def> = COPY %R27<kill>
	BCC <BB#9>, 1, %STATUS<imp-use>
    Successors according to CFG: BB#10(0x04000000 / 0x80000000 = 3.12%) BB#9(0x7c000000 / 0x80000000 = 96.88%)

BB#10: derived from LLVM BB %for.end75
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#9
	%R22<def> = ADDri_r32 %R22<kill>, 32, %STATUS<imp-def,dead>
	%R23<def> = ADDri_r32 %R23<kill>, 32, %STATUS<imp-def,dead>
	%R24<def> = ADDri_r32 %R24<kill>, 8, %STATUS<imp-def,dead>
	%R25<def,dead> = CMPrr_r32 %R24, %R3, %STATUS<imp-def>
	BCC <BB#4>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#4(0x7c000000 / 0x80000000 = 96.88%) BB#11(0x04000000 / 0x80000000 = 3.12%)

BB#11: derived from LLVM BB %for.end78
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20
    Predecessors according to CFG: BB#10
	%R2<def> = ADDrr_r32 %R2<kill>, %IP, %STATUS<imp-def,dead>
	%R20<def> = ADDri_r32 %R20<kill>, 1, %STATUS<imp-def,dead>
	%R21<def,dead> = CMPrr_r32 %R20, %R3, %STATUS<imp-def>
	BCC <BB#3>, 1, %STATUS<imp-use>
    Successors according to CFG: BB#12(0x04000000 / 0x80000000 = 3.12%) BB#3(0x7c000000 / 0x80000000 = 96.88%)

BB#12: derived from LLVM BB %for.end81
    Predecessors according to CFG: BB#1 BB#11
	%R0<def> = LDRi32_r32 %FP, -44; mem:LD4[FixedStack1]
	GID
	%CONFIG<def> = MOVTS32_core %R0<kill>
	GIE %CONFIG<imp-use,kill>
	%LR<def> = LDRi64 %SP, 48; flags: FrameSetup
	%SP<def> = ADDri_r32 %SP, 48, %STATUS<imp-def>
	RTS

# End machine code for function matmac.


<----------------->
Analyzing block 1
BB#1: derived from LLVM BB %entry
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#0
	%IP<def,dead> = CMPri_r32 %R3, 1, %STATUS<imp-def>
	BCC <BB#12>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#2(0x50000000 / 0x80000000 = 62.50%) BB#12(0x30000000 / 0x80000000 = 37.50%)

<----------------->
Analyzing block 2
BB#2: derived from LLVM BB %for.body3.lr.ph.preheader
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#1
	%IP<def> = LSL32ri %R3, 2, %STATUS<imp-def,dead>
	%R1<def> = ADDri_r32 %R1<kill>, 8, %STATUS<imp-def,dead>
	%R16<def> = MOViPTR %FP, -40
	%R17<def> = ADDri_r32 %R16, 8, %STATUS<imp-def,dead>
	%R19<def> = MOVi32ri 0, %D9<imp-def>
	%R20<def> = COPY %R19
    Successors according to CFG: BB#3(?%)

<----------------->
Analyzing block 3
BB#3: derived from LLVM BB %for.body3.lr.ph
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20
    Predecessors according to CFG: BB#2 BB#11
	%R21<def> = LDRi32_r32 %FP, -8; mem:LD4[FixedStack3]
	GID %CONFIG<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %R21<kill>
	GIE %CONFIG<imp-def,dead>
	%R21<def> = IMULrr_r32 %R20, %R3, %STATUS<imp-def,dead>
	%R21<def> = LSL32ri %R21<kill>, 2, %STATUS<imp-def,dead>
	%R21<def> = ADDrr_r32 %R0, %R21<kill>, %STATUS<imp-def,dead>
	%R22<def> = COPY %R2
	%R23<def> = COPY %R1
	%R24<def> = COPY %R19
    Successors according to CFG: BB#4(?%)

<----------------->
Analyzing block 4
BB#4: derived from LLVM BB %for.body9.preheader
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#3 BB#10
	%R18<def> = COPY %R19, %D9<imp-use,kill>, %D9<imp-def>
	STRi64 %D9, %FP, -16; mem:ST8[%1+24]
	STRi64 %D9, %FP, -24; mem:ST8[%1+16]
	STRi64 %D9, %FP, -32; mem:ST8[%1+8]
	STRi64 %D9, %FP, -40; mem:ST8[%1]
	%R25<def> = COPY %R23
	%R26<def> = COPY %R19
    Successors according to CFG: BB#5(?%)

<----------------->
Analyzing block 5
BB#5: derived from LLVM BB %for.body9
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#4 BB#7
	%R27<def> = LSL32ri %R26, 2, %STATUS<imp-def,dead>
	%R27<def> = ADDrr_r32 %R21, %R27<kill>, %STATUS<imp-def,dead>
	%R27<def> = LDRf32 %R27<kill>, 0; mem:Volatile LD4[%add.ptr10](tbaa=!2)
	%R32<def> = COPY %R17
	%R34<def> = COPY %R25
	%R33<def> = COPY %R19
    Successors according to CFG: BB#6(?%)

<----------------->
Analyzing block 6
BB#6: derived from LLVM BB %for.body13
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26 %R27 %R32 %R33 %R34
    Predecessors according to CFG: BB#5 BB#6
	%R37<def> = LDRf32 %R34, -8; mem:Volatile LD4[%scevgep8](tbaa=!2)
	%R35<def> = ADDri_r32 %R32, 16, %STATUS<imp-def,dead>
	%R36<def> = ADDri_r32 %R34, 16, %STATUS<imp-def,dead>
	%R38<def> = LDRf32 %R34, -4; mem:Volatile LD4[%scevgep9](tbaa=!2)
	%R33<def> = ADDri_r32 %R33<kill>, 4, %STATUS<imp-def,dead>
	%R39<def> = LDRf32 %R34, 0; mem:Volatile LD4[%lsr.iv5](tbaa=!2)
	%R40<def> = LDRf32 %R34<kill>, 4; mem:Volatile LD4[%scevgep7](tbaa=!2)
	%D21<def> = LDRf64 %R32, -8; mem:LD4[%scevgep17](tbaa=!2) LD4[%scevgep15](tbaa=!2)
	%R34<def> = LDRi32_r32 %FP, -4; mem:LD4[FixedStack2]
	GID %CONFIG<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %R34<kill>
	GIE %CONFIG<imp-def,dead>
	%R43<def,tied1> = FMADDrr_r32 %R43<tied0>, %R27, %R37<kill>, %STATUS<imp-def,dead>, %D21<imp-use,kill>, %D21<imp-def>
	%R42<def,tied1> = FMADDrr_r32 %R42<tied0>, %R27, %R38<kill>, %STATUS<imp-def,dead>, %D21<imp-use,kill>, %D21<imp-def>
	%R44<def> = COPY %R43, %D22<imp-def>
	%R45<def> = COPY %R42, %D21<imp-use,kill>, %D22<imp-use,kill>, %D22<imp-def>
	STRf64 %D22<kill>, %R32, -8; mem:ST4[%scevgep17](tbaa=!2) ST4[%scevgep15](tbaa=!2)
	%R34<def> = LDRf32 %R32, 0; mem:LD4[%lsr.iv1214](tbaa=!2)
	%R34<def,tied1> = FMADDrr_r32 %R34<kill,tied0>, %R27, %R39<kill>, %STATUS<imp-def,dead>
	STRf32 %R34<kill>, %R32, 0; mem:ST4[%lsr.iv1214](tbaa=!2)
	%R37<def> = LDRf32 %R32, 4; mem:LD4[%scevgep16](tbaa=!2)
	%R37<def,tied1> = FMADDrr_r32 %R37<kill,tied0>, %R27, %R40<kill>, %STATUS<imp-def,dead>
	%R34<def,dead> = CMPri_r32 %R33, 8, %STATUS<imp-def>
	STRf32 %R37<kill>, %R32<kill>, 4; mem:ST4[%scevgep16](tbaa=!2)
	%R32<def> = COPY %R35<kill>
	%R34<def> = COPY %R36<kill>
	BCC <BB#6>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#6(0x7c000000 / 0x80000000 = 96.88%) BB#7(0x04000000 / 0x80000000 = 3.12%)

<----------------->
Analyzing block 7
BB#7: derived from LLVM BB %for.end60
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#6
	%R25<def> = ADDrr_r32 %R25<kill>, %IP, %STATUS<imp-def,dead>
	%R26<def> = ADDri_r32 %R26<kill>, 1, %STATUS<imp-def,dead>
	%R27<def,dead> = CMPrr_r32 %R26, %R3, %STATUS<imp-def>
	BCC <BB#5>, 1, %STATUS<imp-use>
    Successors according to CFG: BB#8(0x04000000 / 0x80000000 = 3.12%) BB#5(0x7c000000 / 0x80000000 = 96.88%)

<----------------->
Analyzing block 8
BB#8: derived from LLVM BB %for.cond64.preheader
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#7
	%R25<def> = COPY %R22
	%R26<def> = COPY %R19
    Successors according to CFG: BB#9(?%)

<----------------->
Analyzing block 9
BB#9: derived from LLVM BB %for.body66
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#8 BB#9
	%R27<def> = ADDrr_r32 %R16, %R26, %STATUS<imp-def,dead>
	%R33<def> = LDRf32 %R27<kill>, 0; mem:LD4[%sunkaddr30](tbaa=!2)
	%R27<def> = ADDri_r32 %R25, 4, %STATUS<imp-def,dead>
	%R26<def> = ADDri_r32 %R26<kill>, 4, %STATUS<imp-def,dead>
	%R34<def> = LDRf32 %R25, 0; mem:Volatile LD4[%lsr.iv24](tbaa=!2)
	%R32<def> = LDRi32_r32 %FP, -4; mem:LD4[FixedStack2]
	GID %CONFIG<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %R32<kill>
	GIE %CONFIG<imp-def,dead>
	%R33<def> = FADDrr_r32 %R33<kill>, %R34<kill>, %STATUS<imp-def,dead>
	%R32<def,dead> = CMPri_r32 %R26, 32, %STATUS<imp-def>
	STRf32 %R33<kill>, %R25<kill>, 0; mem:Volatile ST4[%lsr.iv24](tbaa=!2)
	%R25<def> = COPY %R27<kill>
	BCC <BB#9>, 1, %STATUS<imp-use>
    Successors according to CFG: BB#10(0x04000000 / 0x80000000 = 3.12%) BB#9(0x7c000000 / 0x80000000 = 96.88%)

<----------------->
Analyzing block 10
BB#10: derived from LLVM BB %for.end75
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#9
	%R22<def> = ADDri_r32 %R22<kill>, 32, %STATUS<imp-def,dead>
	%R23<def> = ADDri_r32 %R23<kill>, 32, %STATUS<imp-def,dead>
	%R24<def> = ADDri_r32 %R24<kill>, 8, %STATUS<imp-def,dead>
	%R25<def,dead> = CMPrr_r32 %R24, %R3, %STATUS<imp-def>
	BCC <BB#4>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#4(0x7c000000 / 0x80000000 = 96.88%) BB#11(0x04000000 / 0x80000000 = 3.12%)

<----------------->
Analyzing block 11
BB#11: derived from LLVM BB %for.end78
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20
    Predecessors according to CFG: BB#10
	%R2<def> = ADDrr_r32 %R2<kill>, %IP, %STATUS<imp-def,dead>
	%R20<def> = ADDri_r32 %R20<kill>, 1, %STATUS<imp-def,dead>
	%R21<def,dead> = CMPrr_r32 %R20, %R3, %STATUS<imp-def>
	BCC <BB#3>, 1, %STATUS<imp-use>
    Successors according to CFG: BB#12(0x04000000 / 0x80000000 = 3.12%) BB#3(0x7c000000 / 0x80000000 = 96.88%)

<----------------->
Analyzing block 12
BB#12: derived from LLVM BB %for.end81
    Predecessors according to CFG: BB#1 BB#11
	%R0<def> = LDRi32_r32 %FP, -44; mem:LD4[FixedStack1]
	GID
	%CONFIG<def> = MOVTS32_core %R0<kill>
	GIE %CONFIG<imp-use,kill>
	%LR<def> = LDRi64 %SP, 48; flags: FrameSetup
	%SP<def> = ADDri_r32 %SP, 48, %STATUS<imp-def>
	RTS
# *** IR Dump After Tail Duplication ***:
# Machine code for function matmac: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=32, align=8, at location [SP-40]
  fi#1: size=4, align=4, at location [SP-44]
  fi#2: size=4, align=4, at location [SP-4]
  fi#3: size=4, align=8, at location [SP-8]
Function Live Ins: %R0, %R1, %R2, %R3

BB#0: 
    Live Ins: %R0 %R1 %R2 %R3
	%SP<def,tied2> = STRi64_pmd %LR, %SP<tied0>, -48; flags: FrameSetup
	%FP<def> = ADDri_r32 %SP, 48, %STATUS<imp-def>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	GID %CONFIG<imp-def>
	%R19<def> = MOVFS32_core %CONFIG, %D9<imp-def>
	STRi32_r32 %R19, %FP, -44; mem:ST4[FixedStack1]
	%IP<def> = MOVi32ri 65535
	%IP<def,tied1> = MOVTi32ri %IP<kill,tied0>, 65521
	%R18<def> = ANDrr_r32 %R19, %IP<kill>, %STATUS<imp-def>, %D9<imp-use,kill>, %D9<imp-def>
	%R19<def,tied1> = MOVTi32ri %R19<tied0>, 72, %D9<imp-use,kill>, %D9<imp-def>
	STRi64 %D9<kill>, %FP, -8; mem:ST4[FixedStack3] ST4[FixedStack2]
	GIE %CONFIG<imp-use,kill>
    Successors according to CFG: BB#1(?%)

BB#1: derived from LLVM BB %entry
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#0
	%IP<def,dead> = CMPri_r32 %R3, 1, %STATUS<imp-def>
	BCC <BB#12>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#2(0x50000000 / 0x80000000 = 62.50%) BB#12(0x30000000 / 0x80000000 = 37.50%)

BB#2: derived from LLVM BB %for.body3.lr.ph.preheader
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#1
	%IP<def> = LSL32ri %R3, 2, %STATUS<imp-def,dead>
	%R1<def> = ADDri_r32 %R1<kill>, 8, %STATUS<imp-def,dead>
	%R16<def> = MOViPTR %FP, -40
	%R17<def> = ADDri_r32 %R16, 8, %STATUS<imp-def,dead>
	%R19<def> = MOVi32ri 0, %D9<imp-def>
	%R20<def> = COPY %R19
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %for.body3.lr.ph
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20
    Predecessors according to CFG: BB#2 BB#11
	%R21<def> = LDRi32_r32 %FP, -8; mem:LD4[FixedStack3]
	GID %CONFIG<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %R21<kill>
	GIE %CONFIG<imp-def,dead>
	%R21<def> = IMULrr_r32 %R20, %R3, %STATUS<imp-def,dead>
	%R21<def> = LSL32ri %R21<kill>, 2, %STATUS<imp-def,dead>
	%R21<def> = ADDrr_r32 %R0, %R21<kill>, %STATUS<imp-def,dead>
	%R22<def> = COPY %R2
	%R23<def> = COPY %R1
	%R24<def> = COPY %R19
    Successors according to CFG: BB#4(?%)

BB#4: derived from LLVM BB %for.body9.preheader
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#3 BB#10
	%R18<def> = COPY %R19, %D9<imp-use,kill>, %D9<imp-def>
	STRi64 %D9, %FP, -16; mem:ST8[%1+24]
	STRi64 %D9, %FP, -24; mem:ST8[%1+16]
	STRi64 %D9, %FP, -32; mem:ST8[%1+8]
	STRi64 %D9, %FP, -40; mem:ST8[%1]
	%R25<def> = COPY %R23
	%R26<def> = COPY %R19
    Successors according to CFG: BB#5(?%)

BB#5: derived from LLVM BB %for.body9
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#4 BB#7
	%R27<def> = LSL32ri %R26, 2, %STATUS<imp-def,dead>
	%R27<def> = ADDrr_r32 %R21, %R27<kill>, %STATUS<imp-def,dead>
	%R27<def> = LDRf32 %R27<kill>, 0; mem:Volatile LD4[%add.ptr10](tbaa=!2)
	%R32<def> = COPY %R17
	%R34<def> = COPY %R25
	%R33<def> = COPY %R19
    Successors according to CFG: BB#6(?%)

BB#6: derived from LLVM BB %for.body13
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26 %R27 %R32 %R33 %R34
    Predecessors according to CFG: BB#5 BB#6
	%R37<def> = LDRf32 %R34, -8; mem:Volatile LD4[%scevgep8](tbaa=!2)
	%R35<def> = ADDri_r32 %R32, 16, %STATUS<imp-def,dead>
	%R36<def> = ADDri_r32 %R34, 16, %STATUS<imp-def,dead>
	%R38<def> = LDRf32 %R34, -4; mem:Volatile LD4[%scevgep9](tbaa=!2)
	%R33<def> = ADDri_r32 %R33<kill>, 4, %STATUS<imp-def,dead>
	%R39<def> = LDRf32 %R34, 0; mem:Volatile LD4[%lsr.iv5](tbaa=!2)
	%R40<def> = LDRf32 %R34<kill>, 4; mem:Volatile LD4[%scevgep7](tbaa=!2)
	%D21<def> = LDRf64 %R32, -8; mem:LD4[%scevgep17](tbaa=!2) LD4[%scevgep15](tbaa=!2)
	%R34<def> = LDRi32_r32 %FP, -4; mem:LD4[FixedStack2]
	GID %CONFIG<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %R34<kill>
	GIE %CONFIG<imp-def,dead>
	%R43<def,tied1> = FMADDrr_r32 %R43<tied0>, %R27, %R37<kill>, %STATUS<imp-def,dead>, %D21<imp-use,kill>, %D21<imp-def>
	%R42<def,tied1> = FMADDrr_r32 %R42<tied0>, %R27, %R38<kill>, %STATUS<imp-def,dead>, %D21<imp-use,kill>, %D21<imp-def>
	%R44<def> = COPY %R43, %D22<imp-def>
	%R45<def> = COPY %R42, %D21<imp-use,kill>, %D22<imp-use,kill>, %D22<imp-def>
	STRf64 %D22<kill>, %R32, -8; mem:ST4[%scevgep17](tbaa=!2) ST4[%scevgep15](tbaa=!2)
	%R34<def> = LDRf32 %R32, 0; mem:LD4[%lsr.iv1214](tbaa=!2)
	%R34<def,tied1> = FMADDrr_r32 %R34<kill,tied0>, %R27, %R39<kill>, %STATUS<imp-def,dead>
	STRf32 %R34<kill>, %R32, 0; mem:ST4[%lsr.iv1214](tbaa=!2)
	%R37<def> = LDRf32 %R32, 4; mem:LD4[%scevgep16](tbaa=!2)
	%R37<def,tied1> = FMADDrr_r32 %R37<kill,tied0>, %R27, %R40<kill>, %STATUS<imp-def,dead>
	%R34<def,dead> = CMPri_r32 %R33, 8, %STATUS<imp-def>
	STRf32 %R37<kill>, %R32<kill>, 4; mem:ST4[%scevgep16](tbaa=!2)
	%R32<def> = COPY %R35<kill>
	%R34<def> = COPY %R36<kill>
	BCC <BB#6>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#6(0x7c000000 / 0x80000000 = 96.88%) BB#7(0x04000000 / 0x80000000 = 3.12%)

BB#7: derived from LLVM BB %for.end60
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#6
	%R25<def> = ADDrr_r32 %R25<kill>, %IP, %STATUS<imp-def,dead>
	%R26<def> = ADDri_r32 %R26<kill>, 1, %STATUS<imp-def,dead>
	%R27<def,dead> = CMPrr_r32 %R26, %R3, %STATUS<imp-def>
	BCC <BB#5>, 1, %STATUS<imp-use>
    Successors according to CFG: BB#8(0x04000000 / 0x80000000 = 3.12%) BB#5(0x7c000000 / 0x80000000 = 96.88%)

BB#8: derived from LLVM BB %for.cond64.preheader
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#7
	%R25<def> = COPY %R22
	%R26<def> = COPY %R19
    Successors according to CFG: BB#9(?%)

BB#9: derived from LLVM BB %for.body66
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#8 BB#9
	%R27<def> = ADDrr_r32 %R16, %R26, %STATUS<imp-def,dead>
	%R33<def> = LDRf32 %R27<kill>, 0; mem:LD4[%sunkaddr30](tbaa=!2)
	%R27<def> = ADDri_r32 %R25, 4, %STATUS<imp-def,dead>
	%R26<def> = ADDri_r32 %R26<kill>, 4, %STATUS<imp-def,dead>
	%R34<def> = LDRf32 %R25, 0; mem:Volatile LD4[%lsr.iv24](tbaa=!2)
	%R32<def> = LDRi32_r32 %FP, -4; mem:LD4[FixedStack2]
	GID %CONFIG<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %R32<kill>
	GIE %CONFIG<imp-def,dead>
	%R33<def> = FADDrr_r32 %R33<kill>, %R34<kill>, %STATUS<imp-def,dead>
	%R32<def,dead> = CMPri_r32 %R26, 32, %STATUS<imp-def>
	STRf32 %R33<kill>, %R25<kill>, 0; mem:Volatile ST4[%lsr.iv24](tbaa=!2)
	%R25<def> = COPY %R27<kill>
	BCC <BB#9>, 1, %STATUS<imp-use>
    Successors according to CFG: BB#10(0x04000000 / 0x80000000 = 3.12%) BB#9(0x7c000000 / 0x80000000 = 96.88%)

BB#10: derived from LLVM BB %for.end75
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#9
	%R22<def> = ADDri_r32 %R22<kill>, 32, %STATUS<imp-def,dead>
	%R23<def> = ADDri_r32 %R23<kill>, 32, %STATUS<imp-def,dead>
	%R24<def> = ADDri_r32 %R24<kill>, 8, %STATUS<imp-def,dead>
	%R25<def,dead> = CMPrr_r32 %R24, %R3, %STATUS<imp-def>
	BCC <BB#4>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#4(0x7c000000 / 0x80000000 = 96.88%) BB#11(0x04000000 / 0x80000000 = 3.12%)

BB#11: derived from LLVM BB %for.end78
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20
    Predecessors according to CFG: BB#10
	%R2<def> = ADDrr_r32 %R2<kill>, %IP, %STATUS<imp-def,dead>
	%R20<def> = ADDri_r32 %R20<kill>, 1, %STATUS<imp-def,dead>
	%R21<def,dead> = CMPrr_r32 %R20, %R3, %STATUS<imp-def>
	BCC <BB#3>, 1, %STATUS<imp-use>
    Successors according to CFG: BB#12(0x04000000 / 0x80000000 = 3.12%) BB#3(0x7c000000 / 0x80000000 = 96.88%)

BB#12: derived from LLVM BB %for.end81
    Predecessors according to CFG: BB#1 BB#11
	%R0<def> = LDRi32_r32 %FP, -44; mem:LD4[FixedStack1]
	GID
	%CONFIG<def> = MOVTS32_core %R0<kill>
	GIE %CONFIG<imp-use,kill>
	%LR<def> = LDRi64 %SP, 48; flags: FrameSetup
	%SP<def> = ADDri_r32 %SP, 48, %STATUS<imp-def>
	RTS

# End machine code for function matmac.

# *** IR Dump Before Machine Copy Propagation Pass ***:
# Machine code for function matmac: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=32, align=8, at location [SP-40]
  fi#1: size=4, align=4, at location [SP-44]
  fi#2: size=4, align=4, at location [SP-4]
  fi#3: size=4, align=8, at location [SP-8]
Function Live Ins: %R0, %R1, %R2, %R3

BB#0: 
    Live Ins: %R0 %R1 %R2 %R3
	%SP<def,tied2> = STRi64_pmd %LR, %SP<tied0>, -48; flags: FrameSetup
	%FP<def> = ADDri_r32 %SP, 48, %STATUS<imp-def>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	GID %CONFIG<imp-def>
	%R19<def> = MOVFS32_core %CONFIG, %D9<imp-def>
	STRi32_r32 %R19, %FP, -44; mem:ST4[FixedStack1]
	%IP<def> = MOVi32ri 65535
	%IP<def,tied1> = MOVTi32ri %IP<kill,tied0>, 65521
	%R18<def> = ANDrr_r32 %R19, %IP<kill>, %STATUS<imp-def>, %D9<imp-use,kill>, %D9<imp-def>
	%R19<def,tied1> = MOVTi32ri %R19<tied0>, 72, %D9<imp-use,kill>, %D9<imp-def>
	STRi64 %D9<kill>, %FP, -8; mem:ST4[FixedStack3] ST4[FixedStack2]
	GIE %CONFIG<imp-use,kill>
    Successors according to CFG: BB#1(?%)

BB#1: derived from LLVM BB %entry
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#0
	%IP<def,dead> = CMPri_r32 %R3, 1, %STATUS<imp-def>
	BCC <BB#12>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#2(0x50000000 / 0x80000000 = 62.50%) BB#12(0x30000000 / 0x80000000 = 37.50%)

BB#2: derived from LLVM BB %for.body3.lr.ph.preheader
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#1
	%IP<def> = LSL32ri %R3, 2, %STATUS<imp-def,dead>
	%R1<def> = ADDri_r32 %R1<kill>, 8, %STATUS<imp-def,dead>
	%R16<def> = MOViPTR %FP, -40
	%R17<def> = ADDri_r32 %R16, 8, %STATUS<imp-def,dead>
	%R19<def> = MOVi32ri 0, %D9<imp-def>
	%R20<def> = COPY %R19
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %for.body3.lr.ph
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20
    Predecessors according to CFG: BB#2 BB#11
	%R21<def> = LDRi32_r32 %FP, -8; mem:LD4[FixedStack3]
	GID %CONFIG<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %R21<kill>
	GIE %CONFIG<imp-def,dead>
	%R21<def> = IMULrr_r32 %R20, %R3, %STATUS<imp-def,dead>
	%R21<def> = LSL32ri %R21<kill>, 2, %STATUS<imp-def,dead>
	%R21<def> = ADDrr_r32 %R0, %R21<kill>, %STATUS<imp-def,dead>
	%R22<def> = COPY %R2
	%R23<def> = COPY %R1
	%R24<def> = COPY %R19
    Successors according to CFG: BB#4(?%)

BB#4: derived from LLVM BB %for.body9.preheader
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#3 BB#10
	%R18<def> = COPY %R19, %D9<imp-use,kill>, %D9<imp-def>
	STRi64 %D9, %FP, -16; mem:ST8[%1+24]
	STRi64 %D9, %FP, -24; mem:ST8[%1+16]
	STRi64 %D9, %FP, -32; mem:ST8[%1+8]
	STRi64 %D9, %FP, -40; mem:ST8[%1]
	%R25<def> = COPY %R23
	%R26<def> = COPY %R19
    Successors according to CFG: BB#5(?%)

BB#5: derived from LLVM BB %for.body9
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#4 BB#7
	%R27<def> = LSL32ri %R26, 2, %STATUS<imp-def,dead>
	%R27<def> = ADDrr_r32 %R21, %R27<kill>, %STATUS<imp-def,dead>
	%R27<def> = LDRf32 %R27<kill>, 0; mem:Volatile LD4[%add.ptr10](tbaa=!2)
	%R32<def> = COPY %R17
	%R34<def> = COPY %R25
	%R33<def> = COPY %R19
    Successors according to CFG: BB#6(?%)

BB#6: derived from LLVM BB %for.body13
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26 %R27 %R32 %R33 %R34
    Predecessors according to CFG: BB#5 BB#6
	%R37<def> = LDRf32 %R34, -8; mem:Volatile LD4[%scevgep8](tbaa=!2)
	%R35<def> = ADDri_r32 %R32, 16, %STATUS<imp-def,dead>
	%R36<def> = ADDri_r32 %R34, 16, %STATUS<imp-def,dead>
	%R38<def> = LDRf32 %R34, -4; mem:Volatile LD4[%scevgep9](tbaa=!2)
	%R33<def> = ADDri_r32 %R33<kill>, 4, %STATUS<imp-def,dead>
	%R39<def> = LDRf32 %R34, 0; mem:Volatile LD4[%lsr.iv5](tbaa=!2)
	%R40<def> = LDRf32 %R34<kill>, 4; mem:Volatile LD4[%scevgep7](tbaa=!2)
	%D21<def> = LDRf64 %R32, -8; mem:LD4[%scevgep17](tbaa=!2) LD4[%scevgep15](tbaa=!2)
	%R34<def> = LDRi32_r32 %FP, -4; mem:LD4[FixedStack2]
	GID %CONFIG<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %R34<kill>
	GIE %CONFIG<imp-def,dead>
	%R43<def,tied1> = FMADDrr_r32 %R43<tied0>, %R27, %R37<kill>, %STATUS<imp-def,dead>, %D21<imp-use,kill>, %D21<imp-def>
	%R42<def,tied1> = FMADDrr_r32 %R42<tied0>, %R27, %R38<kill>, %STATUS<imp-def,dead>, %D21<imp-use,kill>, %D21<imp-def>
	%R44<def> = COPY %R43, %D22<imp-def>
	%R45<def> = COPY %R42, %D21<imp-use,kill>, %D22<imp-use,kill>, %D22<imp-def>
	STRf64 %D22<kill>, %R32, -8; mem:ST4[%scevgep17](tbaa=!2) ST4[%scevgep15](tbaa=!2)
	%R34<def> = LDRf32 %R32, 0; mem:LD4[%lsr.iv1214](tbaa=!2)
	%R34<def,tied1> = FMADDrr_r32 %R34<kill,tied0>, %R27, %R39<kill>, %STATUS<imp-def,dead>
	STRf32 %R34<kill>, %R32, 0; mem:ST4[%lsr.iv1214](tbaa=!2)
	%R37<def> = LDRf32 %R32, 4; mem:LD4[%scevgep16](tbaa=!2)
	%R37<def,tied1> = FMADDrr_r32 %R37<kill,tied0>, %R27, %R40<kill>, %STATUS<imp-def,dead>
	%R34<def,dead> = CMPri_r32 %R33, 8, %STATUS<imp-def>
	STRf32 %R37<kill>, %R32<kill>, 4; mem:ST4[%scevgep16](tbaa=!2)
	%R32<def> = COPY %R35<kill>
	%R34<def> = COPY %R36<kill>
	BCC <BB#6>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#6(0x7c000000 / 0x80000000 = 96.88%) BB#7(0x04000000 / 0x80000000 = 3.12%)

BB#7: derived from LLVM BB %for.end60
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#6
	%R25<def> = ADDrr_r32 %R25<kill>, %IP, %STATUS<imp-def,dead>
	%R26<def> = ADDri_r32 %R26<kill>, 1, %STATUS<imp-def,dead>
	%R27<def,dead> = CMPrr_r32 %R26, %R3, %STATUS<imp-def>
	BCC <BB#5>, 1, %STATUS<imp-use>
    Successors according to CFG: BB#8(0x04000000 / 0x80000000 = 3.12%) BB#5(0x7c000000 / 0x80000000 = 96.88%)

BB#8: derived from LLVM BB %for.cond64.preheader
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#7
	%R25<def> = COPY %R22
	%R26<def> = COPY %R19
    Successors according to CFG: BB#9(?%)

BB#9: derived from LLVM BB %for.body66
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#8 BB#9
	%R27<def> = ADDrr_r32 %R16, %R26, %STATUS<imp-def,dead>
	%R33<def> = LDRf32 %R27<kill>, 0; mem:LD4[%sunkaddr30](tbaa=!2)
	%R27<def> = ADDri_r32 %R25, 4, %STATUS<imp-def,dead>
	%R26<def> = ADDri_r32 %R26<kill>, 4, %STATUS<imp-def,dead>
	%R34<def> = LDRf32 %R25, 0; mem:Volatile LD4[%lsr.iv24](tbaa=!2)
	%R32<def> = LDRi32_r32 %FP, -4; mem:LD4[FixedStack2]
	GID %CONFIG<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %R32<kill>
	GIE %CONFIG<imp-def,dead>
	%R33<def> = FADDrr_r32 %R33<kill>, %R34<kill>, %STATUS<imp-def,dead>
	%R32<def,dead> = CMPri_r32 %R26, 32, %STATUS<imp-def>
	STRf32 %R33<kill>, %R25<kill>, 0; mem:Volatile ST4[%lsr.iv24](tbaa=!2)
	%R25<def> = COPY %R27<kill>
	BCC <BB#9>, 1, %STATUS<imp-use>
    Successors according to CFG: BB#10(0x04000000 / 0x80000000 = 3.12%) BB#9(0x7c000000 / 0x80000000 = 96.88%)

BB#10: derived from LLVM BB %for.end75
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#9
	%R22<def> = ADDri_r32 %R22<kill>, 32, %STATUS<imp-def,dead>
	%R23<def> = ADDri_r32 %R23<kill>, 32, %STATUS<imp-def,dead>
	%R24<def> = ADDri_r32 %R24<kill>, 8, %STATUS<imp-def,dead>
	%R25<def,dead> = CMPrr_r32 %R24, %R3, %STATUS<imp-def>
	BCC <BB#4>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#4(0x7c000000 / 0x80000000 = 96.88%) BB#11(0x04000000 / 0x80000000 = 3.12%)

BB#11: derived from LLVM BB %for.end78
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20
    Predecessors according to CFG: BB#10
	%R2<def> = ADDrr_r32 %R2<kill>, %IP, %STATUS<imp-def,dead>
	%R20<def> = ADDri_r32 %R20<kill>, 1, %STATUS<imp-def,dead>
	%R21<def,dead> = CMPrr_r32 %R20, %R3, %STATUS<imp-def>
	BCC <BB#3>, 1, %STATUS<imp-use>
    Successors according to CFG: BB#12(0x04000000 / 0x80000000 = 3.12%) BB#3(0x7c000000 / 0x80000000 = 96.88%)

BB#12: derived from LLVM BB %for.end81
    Predecessors according to CFG: BB#1 BB#11
	%R0<def> = LDRi32_r32 %FP, -44; mem:LD4[FixedStack1]
	GID
	%CONFIG<def> = MOVTS32_core %R0<kill>
	GIE %CONFIG<imp-use,kill>
	%LR<def> = LDRi64 %SP, 48; flags: FrameSetup
	%SP<def> = ADDri_r32 %SP, 48, %STATUS<imp-def>
	RTS

# End machine code for function matmac.

MCP: CopyPropagateBlock (null)
MCP: CopyPropagateBlock entry
MCP: CopyPropagateBlock for.body3.lr.ph.preheader
MCP: Copy is a deletion candidate:   %R20<def> = COPY %R19
MCP: CopyPropagateBlock for.body3.lr.ph
MCP: Copy is a deletion candidate:   %R22<def> = COPY %R2
MCP: Copy is a deletion candidate:   %R23<def> = COPY %R1
MCP: Copy is a deletion candidate:   %R24<def> = COPY %R19
MCP: CopyPropagateBlock for.body9.preheader
MCP: Copy is a deletion candidate:   %R18<def> = COPY %R19, %D9<imp-use,kill>, %D9<imp-def>
MCP: Copy is used - not dead:   %R18<def> = COPY %R19, %D9<imp-use,kill>, %D9<imp-def>
MCP: Copy is used - not dead:   %R18<def> = COPY %R19, %D9<imp-use,kill>, %D9<imp-def>
MCP: Copy is used - not dead:   %R18<def> = COPY %R19, %D9<imp-use,kill>, %D9<imp-def>
MCP: Copy is used - not dead:   %R18<def> = COPY %R19, %D9<imp-use,kill>, %D9<imp-def>
MCP: Copy is a deletion candidate:   %R25<def> = COPY %R23
MCP: Copy is a deletion candidate:   %R26<def> = COPY %R19
MCP: CopyPropagateBlock for.body9
MCP: Copy is a deletion candidate:   %R32<def> = COPY %R17
MCP: Copy is a deletion candidate:   %R34<def> = COPY %R25
MCP: Copy is a deletion candidate:   %R33<def> = COPY %R19
MCP: CopyPropagateBlock for.body13
MCP: Copy is a deletion candidate:   %R44<def> = COPY %R43, %D22<imp-def>
MCP: Copy is used - not dead:   %R44<def> = COPY %R43, %D22<imp-def>
MCP: Copy is a deletion candidate:   %R45<def> = COPY %R42, %D21<imp-use,kill>, %D22<imp-use,kill>, %D22<imp-def>
MCP: Copy is used - not dead:   %R45<def> = COPY %R42, %D21<imp-use,kill>, %D22<imp-use,kill>, %D22<imp-def>
MCP: Copy is a deletion candidate:   %R32<def> = COPY %R35<kill>
MCP: Copy is a deletion candidate:   %R34<def> = COPY %R36<kill>
MCP: CopyPropagateBlock for.end60
MCP: CopyPropagateBlock for.cond64.preheader
MCP: Copy is a deletion candidate:   %R25<def> = COPY %R22
MCP: Copy is a deletion candidate:   %R26<def> = COPY %R19
MCP: CopyPropagateBlock for.body66
MCP: Copy is a deletion candidate:   %R25<def> = COPY %R27<kill>
MCP: CopyPropagateBlock for.end75
MCP: CopyPropagateBlock for.end78
MCP: CopyPropagateBlock for.end81
# *** IR Dump After Machine Copy Propagation Pass ***:
# Machine code for function matmac: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=32, align=8, at location [SP-40]
  fi#1: size=4, align=4, at location [SP-44]
  fi#2: size=4, align=4, at location [SP-4]
  fi#3: size=4, align=8, at location [SP-8]
Function Live Ins: %R0, %R1, %R2, %R3

BB#0: 
    Live Ins: %R0 %R1 %R2 %R3
	%SP<def,tied2> = STRi64_pmd %LR, %SP<tied0>, -48; flags: FrameSetup
	%FP<def> = ADDri_r32 %SP, 48, %STATUS<imp-def>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	GID %CONFIG<imp-def>
	%R19<def> = MOVFS32_core %CONFIG, %D9<imp-def>
	STRi32_r32 %R19, %FP, -44; mem:ST4[FixedStack1]
	%IP<def> = MOVi32ri 65535
	%IP<def,tied1> = MOVTi32ri %IP<kill,tied0>, 65521
	%R18<def> = ANDrr_r32 %R19, %IP<kill>, %STATUS<imp-def>, %D9<imp-use,kill>, %D9<imp-def>
	%R19<def,tied1> = MOVTi32ri %R19<tied0>, 72, %D9<imp-use,kill>, %D9<imp-def>
	STRi64 %D9<kill>, %FP, -8; mem:ST4[FixedStack3] ST4[FixedStack2]
	GIE %CONFIG<imp-use,kill>
    Successors according to CFG: BB#1(?%)

BB#1: derived from LLVM BB %entry
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#0
	%IP<def,dead> = CMPri_r32 %R3, 1, %STATUS<imp-def>
	BCC <BB#12>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#2(0x50000000 / 0x80000000 = 62.50%) BB#12(0x30000000 / 0x80000000 = 37.50%)

BB#2: derived from LLVM BB %for.body3.lr.ph.preheader
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#1
	%IP<def> = LSL32ri %R3, 2, %STATUS<imp-def,dead>
	%R1<def> = ADDri_r32 %R1<kill>, 8, %STATUS<imp-def,dead>
	%R16<def> = MOViPTR %FP, -40
	%R17<def> = ADDri_r32 %R16, 8, %STATUS<imp-def,dead>
	%R19<def> = MOVi32ri 0, %D9<imp-def>
	%R20<def> = COPY %R19
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %for.body3.lr.ph
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20
    Predecessors according to CFG: BB#2 BB#11
	%R21<def> = LDRi32_r32 %FP, -8; mem:LD4[FixedStack3]
	GID %CONFIG<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %R21<kill>
	GIE %CONFIG<imp-def,dead>
	%R21<def> = IMULrr_r32 %R20, %R3, %STATUS<imp-def,dead>
	%R21<def> = LSL32ri %R21<kill>, 2, %STATUS<imp-def,dead>
	%R21<def> = ADDrr_r32 %R0, %R21<kill>, %STATUS<imp-def,dead>
	%R22<def> = COPY %R2
	%R23<def> = COPY %R1
	%R24<def> = COPY %R19
    Successors according to CFG: BB#4(?%)

BB#4: derived from LLVM BB %for.body9.preheader
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#3 BB#10
	%R18<def> = COPY %R19, %D9<imp-use,kill>, %D9<imp-def>
	STRi64 %D9, %FP, -16; mem:ST8[%1+24]
	STRi64 %D9, %FP, -24; mem:ST8[%1+16]
	STRi64 %D9, %FP, -32; mem:ST8[%1+8]
	STRi64 %D9, %FP, -40; mem:ST8[%1]
	%R25<def> = COPY %R23
	%R26<def> = COPY %R19
    Successors according to CFG: BB#5(?%)

BB#5: derived from LLVM BB %for.body9
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#4 BB#7
	%R27<def> = LSL32ri %R26, 2, %STATUS<imp-def,dead>
	%R27<def> = ADDrr_r32 %R21, %R27<kill>, %STATUS<imp-def,dead>
	%R27<def> = LDRf32 %R27<kill>, 0; mem:Volatile LD4[%add.ptr10](tbaa=!2)
	%R32<def> = COPY %R17
	%R34<def> = COPY %R25
	%R33<def> = COPY %R19
    Successors according to CFG: BB#6(?%)

BB#6: derived from LLVM BB %for.body13
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26 %R27 %R32 %R33 %R34
    Predecessors according to CFG: BB#5 BB#6
	%R37<def> = LDRf32 %R34, -8; mem:Volatile LD4[%scevgep8](tbaa=!2)
	%R35<def> = ADDri_r32 %R32, 16, %STATUS<imp-def,dead>
	%R36<def> = ADDri_r32 %R34, 16, %STATUS<imp-def,dead>
	%R38<def> = LDRf32 %R34, -4; mem:Volatile LD4[%scevgep9](tbaa=!2)
	%R33<def> = ADDri_r32 %R33<kill>, 4, %STATUS<imp-def,dead>
	%R39<def> = LDRf32 %R34, 0; mem:Volatile LD4[%lsr.iv5](tbaa=!2)
	%R40<def> = LDRf32 %R34<kill>, 4; mem:Volatile LD4[%scevgep7](tbaa=!2)
	%D21<def> = LDRf64 %R32, -8; mem:LD4[%scevgep17](tbaa=!2) LD4[%scevgep15](tbaa=!2)
	%R34<def> = LDRi32_r32 %FP, -4; mem:LD4[FixedStack2]
	GID %CONFIG<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %R34<kill>
	GIE %CONFIG<imp-def,dead>
	%R43<def,tied1> = FMADDrr_r32 %R43<tied0>, %R27, %R37<kill>, %STATUS<imp-def,dead>, %D21<imp-use,kill>, %D21<imp-def>
	%R42<def,tied1> = FMADDrr_r32 %R42<tied0>, %R27, %R38<kill>, %STATUS<imp-def,dead>, %D21<imp-use,kill>, %D21<imp-def>
	%R44<def> = COPY %R43, %D22<imp-def>
	%R45<def> = COPY %R42, %D21<imp-use,kill>, %D22<imp-use,kill>, %D22<imp-def>
	STRf64 %D22<kill>, %R32, -8; mem:ST4[%scevgep17](tbaa=!2) ST4[%scevgep15](tbaa=!2)
	%R34<def> = LDRf32 %R32, 0; mem:LD4[%lsr.iv1214](tbaa=!2)
	%R34<def,tied1> = FMADDrr_r32 %R34<kill,tied0>, %R27, %R39<kill>, %STATUS<imp-def,dead>
	STRf32 %R34<kill>, %R32, 0; mem:ST4[%lsr.iv1214](tbaa=!2)
	%R37<def> = LDRf32 %R32, 4; mem:LD4[%scevgep16](tbaa=!2)
	%R37<def,tied1> = FMADDrr_r32 %R37<kill,tied0>, %R27, %R40<kill>, %STATUS<imp-def,dead>
	%R34<def,dead> = CMPri_r32 %R33, 8, %STATUS<imp-def>
	STRf32 %R37<kill>, %R32<kill>, 4; mem:ST4[%scevgep16](tbaa=!2)
	%R32<def> = COPY %R35<kill>
	%R34<def> = COPY %R36<kill>
	BCC <BB#6>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#6(0x7c000000 / 0x80000000 = 96.88%) BB#7(0x04000000 / 0x80000000 = 3.12%)

BB#7: derived from LLVM BB %for.end60
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#6
	%R25<def> = ADDrr_r32 %R25<kill>, %IP, %STATUS<imp-def,dead>
	%R26<def> = ADDri_r32 %R26<kill>, 1, %STATUS<imp-def,dead>
	%R27<def,dead> = CMPrr_r32 %R26, %R3, %STATUS<imp-def>
	BCC <BB#5>, 1, %STATUS<imp-use>
    Successors according to CFG: BB#8(0x04000000 / 0x80000000 = 3.12%) BB#5(0x7c000000 / 0x80000000 = 96.88%)

BB#8: derived from LLVM BB %for.cond64.preheader
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#7
	%R25<def> = COPY %R22
	%R26<def> = COPY %R19
    Successors according to CFG: BB#9(?%)

BB#9: derived from LLVM BB %for.body66
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#8 BB#9
	%R27<def> = ADDrr_r32 %R16, %R26, %STATUS<imp-def,dead>
	%R33<def> = LDRf32 %R27<kill>, 0; mem:LD4[%sunkaddr30](tbaa=!2)
	%R27<def> = ADDri_r32 %R25, 4, %STATUS<imp-def,dead>
	%R26<def> = ADDri_r32 %R26<kill>, 4, %STATUS<imp-def,dead>
	%R34<def> = LDRf32 %R25, 0; mem:Volatile LD4[%lsr.iv24](tbaa=!2)
	%R32<def> = LDRi32_r32 %FP, -4; mem:LD4[FixedStack2]
	GID %CONFIG<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %R32<kill>
	GIE %CONFIG<imp-def,dead>
	%R33<def> = FADDrr_r32 %R33<kill>, %R34<kill>, %STATUS<imp-def,dead>
	%R32<def,dead> = CMPri_r32 %R26, 32, %STATUS<imp-def>
	STRf32 %R33<kill>, %R25<kill>, 0; mem:Volatile ST4[%lsr.iv24](tbaa=!2)
	%R25<def> = COPY %R27<kill>
	BCC <BB#9>, 1, %STATUS<imp-use>
    Successors according to CFG: BB#10(0x04000000 / 0x80000000 = 3.12%) BB#9(0x7c000000 / 0x80000000 = 96.88%)

BB#10: derived from LLVM BB %for.end75
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#9
	%R22<def> = ADDri_r32 %R22<kill>, 32, %STATUS<imp-def,dead>
	%R23<def> = ADDri_r32 %R23<kill>, 32, %STATUS<imp-def,dead>
	%R24<def> = ADDri_r32 %R24<kill>, 8, %STATUS<imp-def,dead>
	%R25<def,dead> = CMPrr_r32 %R24, %R3, %STATUS<imp-def>
	BCC <BB#4>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#4(0x7c000000 / 0x80000000 = 96.88%) BB#11(0x04000000 / 0x80000000 = 3.12%)

BB#11: derived from LLVM BB %for.end78
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20
    Predecessors according to CFG: BB#10
	%R2<def> = ADDrr_r32 %R2<kill>, %IP, %STATUS<imp-def,dead>
	%R20<def> = ADDri_r32 %R20<kill>, 1, %STATUS<imp-def,dead>
	%R21<def,dead> = CMPrr_r32 %R20, %R3, %STATUS<imp-def>
	BCC <BB#3>, 1, %STATUS<imp-use>
    Successors according to CFG: BB#12(0x04000000 / 0x80000000 = 3.12%) BB#3(0x7c000000 / 0x80000000 = 96.88%)

BB#12: derived from LLVM BB %for.end81
    Predecessors according to CFG: BB#1 BB#11
	%R0<def> = LDRi32_r32 %FP, -44; mem:LD4[FixedStack1]
	GID
	%CONFIG<def> = MOVTS32_core %R0<kill>
	GIE %CONFIG<imp-use,kill>
	%LR<def> = LDRi64 %SP, 48; flags: FrameSetup
	%SP<def> = ADDri_r32 %SP, 48, %STATUS<imp-def>
	RTS

# End machine code for function matmac.

# *** IR Dump Before Post-RA pseudo instruction expansion pass ***:
# Machine code for function matmac: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=32, align=8, at location [SP-40]
  fi#1: size=4, align=4, at location [SP-44]
  fi#2: size=4, align=4, at location [SP-4]
  fi#3: size=4, align=8, at location [SP-8]
Function Live Ins: %R0, %R1, %R2, %R3

BB#0: 
    Live Ins: %R0 %R1 %R2 %R3
	%SP<def,tied2> = STRi64_pmd %LR, %SP<tied0>, -48; flags: FrameSetup
	%FP<def> = ADDri_r32 %SP, 48, %STATUS<imp-def>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	GID %CONFIG<imp-def>
	%R19<def> = MOVFS32_core %CONFIG, %D9<imp-def>
	STRi32_r32 %R19, %FP, -44; mem:ST4[FixedStack1]
	%IP<def> = MOVi32ri 65535
	%IP<def,tied1> = MOVTi32ri %IP<kill,tied0>, 65521
	%R18<def> = ANDrr_r32 %R19, %IP<kill>, %STATUS<imp-def>, %D9<imp-use,kill>, %D9<imp-def>
	%R19<def,tied1> = MOVTi32ri %R19<tied0>, 72, %D9<imp-use,kill>, %D9<imp-def>
	STRi64 %D9<kill>, %FP, -8; mem:ST4[FixedStack3] ST4[FixedStack2]
	GIE %CONFIG<imp-use,kill>
    Successors according to CFG: BB#1(?%)

BB#1: derived from LLVM BB %entry
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#0
	%IP<def,dead> = CMPri_r32 %R3, 1, %STATUS<imp-def>
	BCC <BB#12>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#2(0x50000000 / 0x80000000 = 62.50%) BB#12(0x30000000 / 0x80000000 = 37.50%)

BB#2: derived from LLVM BB %for.body3.lr.ph.preheader
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#1
	%IP<def> = LSL32ri %R3, 2, %STATUS<imp-def,dead>
	%R1<def> = ADDri_r32 %R1<kill>, 8, %STATUS<imp-def,dead>
	%R16<def> = MOViPTR %FP, -40
	%R17<def> = ADDri_r32 %R16, 8, %STATUS<imp-def,dead>
	%R19<def> = MOVi32ri 0, %D9<imp-def>
	%R20<def> = COPY %R19
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %for.body3.lr.ph
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20
    Predecessors according to CFG: BB#2 BB#11
	%R21<def> = LDRi32_r32 %FP, -8; mem:LD4[FixedStack3]
	GID %CONFIG<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %R21<kill>
	GIE %CONFIG<imp-def,dead>
	%R21<def> = IMULrr_r32 %R20, %R3, %STATUS<imp-def,dead>
	%R21<def> = LSL32ri %R21<kill>, 2, %STATUS<imp-def,dead>
	%R21<def> = ADDrr_r32 %R0, %R21<kill>, %STATUS<imp-def,dead>
	%R22<def> = COPY %R2
	%R23<def> = COPY %R1
	%R24<def> = COPY %R19
    Successors according to CFG: BB#4(?%)

BB#4: derived from LLVM BB %for.body9.preheader
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#3 BB#10
	%R18<def> = COPY %R19, %D9<imp-use,kill>, %D9<imp-def>
	STRi64 %D9, %FP, -16; mem:ST8[%1+24]
	STRi64 %D9, %FP, -24; mem:ST8[%1+16]
	STRi64 %D9, %FP, -32; mem:ST8[%1+8]
	STRi64 %D9, %FP, -40; mem:ST8[%1]
	%R25<def> = COPY %R23
	%R26<def> = COPY %R19
    Successors according to CFG: BB#5(?%)

BB#5: derived from LLVM BB %for.body9
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#4 BB#7
	%R27<def> = LSL32ri %R26, 2, %STATUS<imp-def,dead>
	%R27<def> = ADDrr_r32 %R21, %R27<kill>, %STATUS<imp-def,dead>
	%R27<def> = LDRf32 %R27<kill>, 0; mem:Volatile LD4[%add.ptr10](tbaa=!2)
	%R32<def> = COPY %R17
	%R34<def> = COPY %R25
	%R33<def> = COPY %R19
    Successors according to CFG: BB#6(?%)

BB#6: derived from LLVM BB %for.body13
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26 %R27 %R32 %R33 %R34
    Predecessors according to CFG: BB#5 BB#6
	%R37<def> = LDRf32 %R34, -8; mem:Volatile LD4[%scevgep8](tbaa=!2)
	%R35<def> = ADDri_r32 %R32, 16, %STATUS<imp-def,dead>
	%R36<def> = ADDri_r32 %R34, 16, %STATUS<imp-def,dead>
	%R38<def> = LDRf32 %R34, -4; mem:Volatile LD4[%scevgep9](tbaa=!2)
	%R33<def> = ADDri_r32 %R33<kill>, 4, %STATUS<imp-def,dead>
	%R39<def> = LDRf32 %R34, 0; mem:Volatile LD4[%lsr.iv5](tbaa=!2)
	%R40<def> = LDRf32 %R34<kill>, 4; mem:Volatile LD4[%scevgep7](tbaa=!2)
	%D21<def> = LDRf64 %R32, -8; mem:LD4[%scevgep17](tbaa=!2) LD4[%scevgep15](tbaa=!2)
	%R34<def> = LDRi32_r32 %FP, -4; mem:LD4[FixedStack2]
	GID %CONFIG<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %R34<kill>
	GIE %CONFIG<imp-def,dead>
	%R43<def,tied1> = FMADDrr_r32 %R43<tied0>, %R27, %R37<kill>, %STATUS<imp-def,dead>, %D21<imp-use,kill>, %D21<imp-def>
	%R42<def,tied1> = FMADDrr_r32 %R42<tied0>, %R27, %R38<kill>, %STATUS<imp-def,dead>, %D21<imp-use,kill>, %D21<imp-def>
	%R44<def> = COPY %R43, %D22<imp-def>
	%R45<def> = COPY %R42, %D21<imp-use,kill>, %D22<imp-use,kill>, %D22<imp-def>
	STRf64 %D22<kill>, %R32, -8; mem:ST4[%scevgep17](tbaa=!2) ST4[%scevgep15](tbaa=!2)
	%R34<def> = LDRf32 %R32, 0; mem:LD4[%lsr.iv1214](tbaa=!2)
	%R34<def,tied1> = FMADDrr_r32 %R34<kill,tied0>, %R27, %R39<kill>, %STATUS<imp-def,dead>
	STRf32 %R34<kill>, %R32, 0; mem:ST4[%lsr.iv1214](tbaa=!2)
	%R37<def> = LDRf32 %R32, 4; mem:LD4[%scevgep16](tbaa=!2)
	%R37<def,tied1> = FMADDrr_r32 %R37<kill,tied0>, %R27, %R40<kill>, %STATUS<imp-def,dead>
	%R34<def,dead> = CMPri_r32 %R33, 8, %STATUS<imp-def>
	STRf32 %R37<kill>, %R32<kill>, 4; mem:ST4[%scevgep16](tbaa=!2)
	%R32<def> = COPY %R35<kill>
	%R34<def> = COPY %R36<kill>
	BCC <BB#6>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#6(0x7c000000 / 0x80000000 = 96.88%) BB#7(0x04000000 / 0x80000000 = 3.12%)

BB#7: derived from LLVM BB %for.end60
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#6
	%R25<def> = ADDrr_r32 %R25<kill>, %IP, %STATUS<imp-def,dead>
	%R26<def> = ADDri_r32 %R26<kill>, 1, %STATUS<imp-def,dead>
	%R27<def,dead> = CMPrr_r32 %R26, %R3, %STATUS<imp-def>
	BCC <BB#5>, 1, %STATUS<imp-use>
    Successors according to CFG: BB#8(0x04000000 / 0x80000000 = 3.12%) BB#5(0x7c000000 / 0x80000000 = 96.88%)

BB#8: derived from LLVM BB %for.cond64.preheader
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#7
	%R25<def> = COPY %R22
	%R26<def> = COPY %R19
    Successors according to CFG: BB#9(?%)

BB#9: derived from LLVM BB %for.body66
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#8 BB#9
	%R27<def> = ADDrr_r32 %R16, %R26, %STATUS<imp-def,dead>
	%R33<def> = LDRf32 %R27<kill>, 0; mem:LD4[%sunkaddr30](tbaa=!2)
	%R27<def> = ADDri_r32 %R25, 4, %STATUS<imp-def,dead>
	%R26<def> = ADDri_r32 %R26<kill>, 4, %STATUS<imp-def,dead>
	%R34<def> = LDRf32 %R25, 0; mem:Volatile LD4[%lsr.iv24](tbaa=!2)
	%R32<def> = LDRi32_r32 %FP, -4; mem:LD4[FixedStack2]
	GID %CONFIG<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %R32<kill>
	GIE %CONFIG<imp-def,dead>
	%R33<def> = FADDrr_r32 %R33<kill>, %R34<kill>, %STATUS<imp-def,dead>
	%R32<def,dead> = CMPri_r32 %R26, 32, %STATUS<imp-def>
	STRf32 %R33<kill>, %R25<kill>, 0; mem:Volatile ST4[%lsr.iv24](tbaa=!2)
	%R25<def> = COPY %R27<kill>
	BCC <BB#9>, 1, %STATUS<imp-use>
    Successors according to CFG: BB#10(0x04000000 / 0x80000000 = 3.12%) BB#9(0x7c000000 / 0x80000000 = 96.88%)

BB#10: derived from LLVM BB %for.end75
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#9
	%R22<def> = ADDri_r32 %R22<kill>, 32, %STATUS<imp-def,dead>
	%R23<def> = ADDri_r32 %R23<kill>, 32, %STATUS<imp-def,dead>
	%R24<def> = ADDri_r32 %R24<kill>, 8, %STATUS<imp-def,dead>
	%R25<def,dead> = CMPrr_r32 %R24, %R3, %STATUS<imp-def>
	BCC <BB#4>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#4(0x7c000000 / 0x80000000 = 96.88%) BB#11(0x04000000 / 0x80000000 = 3.12%)

BB#11: derived from LLVM BB %for.end78
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20
    Predecessors according to CFG: BB#10
	%R2<def> = ADDrr_r32 %R2<kill>, %IP, %STATUS<imp-def,dead>
	%R20<def> = ADDri_r32 %R20<kill>, 1, %STATUS<imp-def,dead>
	%R21<def,dead> = CMPrr_r32 %R20, %R3, %STATUS<imp-def>
	BCC <BB#3>, 1, %STATUS<imp-use>
    Successors according to CFG: BB#12(0x04000000 / 0x80000000 = 3.12%) BB#3(0x7c000000 / 0x80000000 = 96.88%)

BB#12: derived from LLVM BB %for.end81
    Predecessors according to CFG: BB#1 BB#11
	%R0<def> = LDRi32_r32 %FP, -44; mem:LD4[FixedStack1]
	GID
	%CONFIG<def> = MOVTS32_core %R0<kill>
	GIE %CONFIG<imp-use,kill>
	%LR<def> = LDRi64 %SP, 48; flags: FrameSetup
	%SP<def> = ADDri_r32 %SP, 48, %STATUS<imp-def>
	RTS

# End machine code for function matmac.

Machine Function
********** EXPANDING POST-RA PSEUDO INSTRS **********
********** Function: matmac
real copy:   %R20<def> = COPY %R19
Expanding 32-bit copy
replaced by: %R20<def> = MOVi32rr %R19
real copy:   %R22<def> = COPY %R2
Expanding 32-bit copy
replaced by: %R22<def> = MOVi32rr %R2
real copy:   %R23<def> = COPY %R1
Expanding 32-bit copy
replaced by: %R23<def> = MOVi32rr %R1
real copy:   %R24<def> = COPY %R19
Expanding 32-bit copy
replaced by: %R24<def> = MOVi32rr %R19
real copy:   %R18<def> = COPY %R19, %D9<imp-use,kill>, %D9<imp-def>
Expanding 32-bit copy
replaced by: %R18<def> = MOVi32rr %R19, %D9<imp-use,kill>, %D9<imp-def>
real copy:   %R25<def> = COPY %R23
Expanding 32-bit copy
replaced by: %R25<def> = MOVi32rr %R23
real copy:   %R26<def> = COPY %R19
Expanding 32-bit copy
replaced by: %R26<def> = MOVi32rr %R19
real copy:   %R32<def> = COPY %R17
Expanding 32-bit copy
replaced by: %R32<def> = MOVi32rr %R17
real copy:   %R34<def> = COPY %R25
Expanding 32-bit copy
replaced by: %R34<def> = MOVi32rr %R25
real copy:   %R33<def> = COPY %R19
Expanding 32-bit copy
replaced by: %R33<def> = MOVi32rr %R19
real copy:   %R44<def> = COPY %R43, %D22<imp-def>
Expanding 32-bit copy
replaced by: %R44<def> = MOVi32rr %R43, %D22<imp-def>
real copy:   %R45<def> = COPY %R42, %D21<imp-use,kill>, %D22<imp-use,kill>, %D22<imp-def>
Expanding 32-bit copy
replaced by: %R45<def> = MOVi32rr %R42, %D21<imp-use,kill>, %D22<imp-use,kill>, %D22<imp-def>
real copy:   %R32<def> = COPY %R35<kill>
Expanding 32-bit copy
replaced by: %R32<def> = MOVi32rr %R35<kill>
real copy:   %R34<def> = COPY %R36<kill>
Expanding 32-bit copy
replaced by: %R34<def> = MOVi32rr %R36<kill>
real copy:   %R25<def> = COPY %R22
Expanding 32-bit copy
replaced by: %R25<def> = MOVi32rr %R22
real copy:   %R26<def> = COPY %R19
Expanding 32-bit copy
replaced by: %R26<def> = MOVi32rr %R19
real copy:   %R25<def> = COPY %R27<kill>
Expanding 32-bit copy
replaced by: %R25<def> = MOVi32rr %R27<kill>
# *** IR Dump After Post-RA pseudo instruction expansion pass ***:
# Machine code for function matmac: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=32, align=8, at location [SP-40]
  fi#1: size=4, align=4, at location [SP-44]
  fi#2: size=4, align=4, at location [SP-4]
  fi#3: size=4, align=8, at location [SP-8]
Function Live Ins: %R0, %R1, %R2, %R3

BB#0: 
    Live Ins: %R0 %R1 %R2 %R3
	%SP<def,tied2> = STRi64_pmd %LR, %SP<tied0>, -48; flags: FrameSetup
	%FP<def> = ADDri_r32 %SP, 48, %STATUS<imp-def>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	GID %CONFIG<imp-def>
	%R19<def> = MOVFS32_core %CONFIG, %D9<imp-def>
	STRi32_r32 %R19, %FP, -44; mem:ST4[FixedStack1]
	%IP<def> = MOVi32ri 65535
	%IP<def,tied1> = MOVTi32ri %IP<kill,tied0>, 65521
	%R18<def> = ANDrr_r32 %R19, %IP<kill>, %STATUS<imp-def>, %D9<imp-use,kill>, %D9<imp-def>
	%R19<def,tied1> = MOVTi32ri %R19<tied0>, 72, %D9<imp-use,kill>, %D9<imp-def>
	STRi64 %D9<kill>, %FP, -8; mem:ST4[FixedStack3] ST4[FixedStack2]
	GIE %CONFIG<imp-use,kill>
    Successors according to CFG: BB#1(?%)

BB#1: derived from LLVM BB %entry
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#0
	%IP<def,dead> = CMPri_r32 %R3, 1, %STATUS<imp-def>
	BCC <BB#12>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#2(0x50000000 / 0x80000000 = 62.50%) BB#12(0x30000000 / 0x80000000 = 37.50%)

BB#2: derived from LLVM BB %for.body3.lr.ph.preheader
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#1
	%IP<def> = LSL32ri %R3, 2, %STATUS<imp-def,dead>
	%R1<def> = ADDri_r32 %R1<kill>, 8, %STATUS<imp-def,dead>
	%R16<def> = MOViPTR %FP, -40
	%R17<def> = ADDri_r32 %R16, 8, %STATUS<imp-def,dead>
	%R19<def> = MOVi32ri 0, %D9<imp-def>
	%R20<def> = MOVi32rr %R19
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %for.body3.lr.ph
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20
    Predecessors according to CFG: BB#2 BB#11
	%R21<def> = LDRi32_r32 %FP, -8; mem:LD4[FixedStack3]
	GID %CONFIG<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %R21<kill>
	GIE %CONFIG<imp-def,dead>
	%R21<def> = IMULrr_r32 %R20, %R3, %STATUS<imp-def,dead>
	%R21<def> = LSL32ri %R21<kill>, 2, %STATUS<imp-def,dead>
	%R21<def> = ADDrr_r32 %R0, %R21<kill>, %STATUS<imp-def,dead>
	%R22<def> = MOVi32rr %R2
	%R23<def> = MOVi32rr %R1
	%R24<def> = MOVi32rr %R19
    Successors according to CFG: BB#4(?%)

BB#4: derived from LLVM BB %for.body9.preheader
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#3 BB#10
	%R18<def> = MOVi32rr %R19, %D9<imp-use,kill>, %D9<imp-def>
	STRi64 %D9, %FP, -16; mem:ST8[%1+24]
	STRi64 %D9, %FP, -24; mem:ST8[%1+16]
	STRi64 %D9, %FP, -32; mem:ST8[%1+8]
	STRi64 %D9, %FP, -40; mem:ST8[%1]
	%R25<def> = MOVi32rr %R23
	%R26<def> = MOVi32rr %R19
    Successors according to CFG: BB#5(?%)

BB#5: derived from LLVM BB %for.body9
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#4 BB#7
	%R27<def> = LSL32ri %R26, 2, %STATUS<imp-def,dead>
	%R27<def> = ADDrr_r32 %R21, %R27<kill>, %STATUS<imp-def,dead>
	%R27<def> = LDRf32 %R27<kill>, 0; mem:Volatile LD4[%add.ptr10](tbaa=!2)
	%R32<def> = MOVi32rr %R17
	%R34<def> = MOVi32rr %R25
	%R33<def> = MOVi32rr %R19
    Successors according to CFG: BB#6(?%)

BB#6: derived from LLVM BB %for.body13
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26 %R27 %R32 %R33 %R34
    Predecessors according to CFG: BB#5 BB#6
	%R37<def> = LDRf32 %R34, -8; mem:Volatile LD4[%scevgep8](tbaa=!2)
	%R35<def> = ADDri_r32 %R32, 16, %STATUS<imp-def,dead>
	%R36<def> = ADDri_r32 %R34, 16, %STATUS<imp-def,dead>
	%R38<def> = LDRf32 %R34, -4; mem:Volatile LD4[%scevgep9](tbaa=!2)
	%R33<def> = ADDri_r32 %R33<kill>, 4, %STATUS<imp-def,dead>
	%R39<def> = LDRf32 %R34, 0; mem:Volatile LD4[%lsr.iv5](tbaa=!2)
	%R40<def> = LDRf32 %R34<kill>, 4; mem:Volatile LD4[%scevgep7](tbaa=!2)
	%D21<def> = LDRf64 %R32, -8; mem:LD4[%scevgep17](tbaa=!2) LD4[%scevgep15](tbaa=!2)
	%R34<def> = LDRi32_r32 %FP, -4; mem:LD4[FixedStack2]
	GID %CONFIG<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %R34<kill>
	GIE %CONFIG<imp-def,dead>
	%R43<def,tied1> = FMADDrr_r32 %R43<tied0>, %R27, %R37<kill>, %STATUS<imp-def,dead>, %D21<imp-use,kill>, %D21<imp-def>
	%R42<def,tied1> = FMADDrr_r32 %R42<tied0>, %R27, %R38<kill>, %STATUS<imp-def,dead>, %D21<imp-use,kill>, %D21<imp-def>
	%R44<def> = MOVi32rr %R43, %D22<imp-def>
	%R45<def> = MOVi32rr %R42, %D21<imp-use,kill>, %D22<imp-use,kill>, %D22<imp-def>
	STRf64 %D22<kill>, %R32, -8; mem:ST4[%scevgep17](tbaa=!2) ST4[%scevgep15](tbaa=!2)
	%R34<def> = LDRf32 %R32, 0; mem:LD4[%lsr.iv1214](tbaa=!2)
	%R34<def,tied1> = FMADDrr_r32 %R34<kill,tied0>, %R27, %R39<kill>, %STATUS<imp-def,dead>
	STRf32 %R34<kill>, %R32, 0; mem:ST4[%lsr.iv1214](tbaa=!2)
	%R37<def> = LDRf32 %R32, 4; mem:LD4[%scevgep16](tbaa=!2)
	%R37<def,tied1> = FMADDrr_r32 %R37<kill,tied0>, %R27, %R40<kill>, %STATUS<imp-def,dead>
	%R34<def,dead> = CMPri_r32 %R33, 8, %STATUS<imp-def>
	STRf32 %R37<kill>, %R32<kill>, 4; mem:ST4[%scevgep16](tbaa=!2)
	%R32<def> = MOVi32rr %R35<kill>
	%R34<def> = MOVi32rr %R36<kill>
	BCC <BB#6>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#6(0x7c000000 / 0x80000000 = 96.88%) BB#7(0x04000000 / 0x80000000 = 3.12%)

BB#7: derived from LLVM BB %for.end60
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#6
	%R25<def> = ADDrr_r32 %R25<kill>, %IP, %STATUS<imp-def,dead>
	%R26<def> = ADDri_r32 %R26<kill>, 1, %STATUS<imp-def,dead>
	%R27<def,dead> = CMPrr_r32 %R26, %R3, %STATUS<imp-def>
	BCC <BB#5>, 1, %STATUS<imp-use>
    Successors according to CFG: BB#8(0x04000000 / 0x80000000 = 3.12%) BB#5(0x7c000000 / 0x80000000 = 96.88%)

BB#8: derived from LLVM BB %for.cond64.preheader
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#7
	%R25<def> = MOVi32rr %R22
	%R26<def> = MOVi32rr %R19
    Successors according to CFG: BB#9(?%)

BB#9: derived from LLVM BB %for.body66
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#8 BB#9
	%R27<def> = ADDrr_r32 %R16, %R26, %STATUS<imp-def,dead>
	%R33<def> = LDRf32 %R27<kill>, 0; mem:LD4[%sunkaddr30](tbaa=!2)
	%R27<def> = ADDri_r32 %R25, 4, %STATUS<imp-def,dead>
	%R26<def> = ADDri_r32 %R26<kill>, 4, %STATUS<imp-def,dead>
	%R34<def> = LDRf32 %R25, 0; mem:Volatile LD4[%lsr.iv24](tbaa=!2)
	%R32<def> = LDRi32_r32 %FP, -4; mem:LD4[FixedStack2]
	GID %CONFIG<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %R32<kill>
	GIE %CONFIG<imp-def,dead>
	%R33<def> = FADDrr_r32 %R33<kill>, %R34<kill>, %STATUS<imp-def,dead>
	%R32<def,dead> = CMPri_r32 %R26, 32, %STATUS<imp-def>
	STRf32 %R33<kill>, %R25<kill>, 0; mem:Volatile ST4[%lsr.iv24](tbaa=!2)
	%R25<def> = MOVi32rr %R27<kill>
	BCC <BB#9>, 1, %STATUS<imp-use>
    Successors according to CFG: BB#10(0x04000000 / 0x80000000 = 3.12%) BB#9(0x7c000000 / 0x80000000 = 96.88%)

BB#10: derived from LLVM BB %for.end75
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#9
	%R22<def> = ADDri_r32 %R22<kill>, 32, %STATUS<imp-def,dead>
	%R23<def> = ADDri_r32 %R23<kill>, 32, %STATUS<imp-def,dead>
	%R24<def> = ADDri_r32 %R24<kill>, 8, %STATUS<imp-def,dead>
	%R25<def,dead> = CMPrr_r32 %R24, %R3, %STATUS<imp-def>
	BCC <BB#4>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#4(0x7c000000 / 0x80000000 = 96.88%) BB#11(0x04000000 / 0x80000000 = 3.12%)

BB#11: derived from LLVM BB %for.end78
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20
    Predecessors according to CFG: BB#10
	%R2<def> = ADDrr_r32 %R2<kill>, %IP, %STATUS<imp-def,dead>
	%R20<def> = ADDri_r32 %R20<kill>, 1, %STATUS<imp-def,dead>
	%R21<def,dead> = CMPrr_r32 %R20, %R3, %STATUS<imp-def>
	BCC <BB#3>, 1, %STATUS<imp-use>
    Successors according to CFG: BB#12(0x04000000 / 0x80000000 = 3.12%) BB#3(0x7c000000 / 0x80000000 = 96.88%)

BB#12: derived from LLVM BB %for.end81
    Predecessors according to CFG: BB#1 BB#11
	%R0<def> = LDRi32_r32 %FP, -44; mem:LD4[FixedStack1]
	GID
	%CONFIG<def> = MOVTS32_core %R0<kill>
	GIE %CONFIG<imp-use,kill>
	%LR<def> = LDRi64 %SP, 48; flags: FrameSetup
	%SP<def> = ADDri_r32 %SP, 48, %STATUS<imp-def>
	JR32 %LR

# End machine code for function matmac.


block-frequency: matmac
=======================
reverse-post-order-traversal
 - 0: BB0
 - 1: BB1[entry]
 - 2: BB2[for.body3.lr.ph.preheader]
 - 3: BB3[for.body3.lr.ph]
 - 4: BB4[for.body9.preheader]
 - 5: BB5[for.body9]
 - 6: BB6[for.body13]
 - 7: BB7[for.end60]
 - 8: BB8[for.cond64.preheader]
 - 9: BB9[for.body66]
 - 10: BB10[for.end75]
 - 11: BB11[for.end78]
 - 12: BB12[for.end81]
loop-detection
 - loop = BB3[for.body3.lr.ph]
 - loop = BB4[for.body9.preheader]
 - loop = BB5[for.body9]
 - loop = BB9[for.body66]
 - loop = BB6[for.body13]
 - loop = BB5[for.body9]: member = BB7[for.end60]
 - loop = BB4[for.body9.preheader]: member = BB8[for.cond64.preheader]
 - loop = BB4[for.body9.preheader]: member = BB10[for.end75]
 - loop = BB3[for.body3.lr.ph]: member = BB11[for.end78]
compute-mass-in-loop: BB6[for.body13]*
 - node: BB6[for.body13]
  => [backedge] weight = 2080374784
  => [  exit  ] weight = 67108864, succ = BB7[for.end60]
  => mass:  ffffffffffffffff
  => assign f7ffffffffffffff (0800000000000000) [back] to BB6[for.body13]
  => assign 0800000000000000 (0000000000000000) [exit] to BB7[for.end60]
compute-loop-scale: BB6[for.body13]*
 - exit-mass = 0800000000000000 (ffffffffffffffff - f7ffffffffffffff)
 - scale = 32.0
packaging-loop: BB6[for.body13]*
 - node: BB6[for.body13]
compute-mass-in-loop: BB9[for.body66]*
 - node: BB9[for.body66]
  => [  exit  ] weight = 67108864, succ = BB10[for.end75]
  => [backedge] weight = 2080374784
  => mass:  ffffffffffffffff
  => assign f7ffffffffffffff (0800000000000000) [back] to BB9[for.body66]
  => assign 0800000000000000 (0000000000000000) [exit] to BB10[for.end75]
compute-loop-scale: BB9[for.body66]*
 - exit-mass = 0800000000000000 (ffffffffffffffff - f7ffffffffffffff)
 - scale = 32.0
packaging-loop: BB9[for.body66]*
 - node: BB9[for.body66]
compute-mass-in-loop: BB5[for.body9]*
 - node: BB5[for.body9]
  => [ local  ] weight = 2147483648, succ = BB6[for.body13]
  => mass:  ffffffffffffffff
  => assign ffffffffffffffff (0000000000000000) to BB6[for.body13]
 - node: BB6[for.body13]
  => [ local  ] weight = 576460752303423488, succ = BB7[for.end60]
  => mass:  ffffffffffffffff
  => assign ffffffffffffffff (0000000000000000) to BB7[for.end60]
 - node: BB7[for.end60]
  => [  exit  ] weight = 67108864, succ = BB8[for.cond64.preheader]
  => [backedge] weight = 2080374784
  => mass:  ffffffffffffffff
  => assign f7ffffffffffffff (0800000000000000) [back] to BB5[for.body9]
  => assign 0800000000000000 (0000000000000000) [exit] to BB8[for.cond64.preheader]
compute-loop-scale: BB5[for.body9]*
 - exit-mass = 0800000000000000 (ffffffffffffffff - f7ffffffffffffff)
 - scale = 32.0
packaging-loop: BB5[for.body9]*
 - node: BB5[for.body9]
 - node: BB6[for.body13]
 - node: BB7[for.end60]
compute-mass-in-loop: BB4[for.body9.preheader]*
 - node: BB4[for.body9.preheader]
  => [ local  ] weight = 2147483648, succ = BB5[for.body9]
  => mass:  ffffffffffffffff
  => assign ffffffffffffffff (0000000000000000) to BB5[for.body9]
 - node: BB5[for.body9]
  => [ local  ] weight = 576460752303423488, succ = BB8[for.cond64.preheader]
  => mass:  ffffffffffffffff
  => assign ffffffffffffffff (0000000000000000) to BB8[for.cond64.preheader]
 - node: BB8[for.cond64.preheader]
  => [ local  ] weight = 2147483648, succ = BB9[for.body66]
  => mass:  ffffffffffffffff
  => assign ffffffffffffffff (0000000000000000) to BB9[for.body66]
 - node: BB9[for.body66]
  => [ local  ] weight = 576460752303423488, succ = BB10[for.end75]
  => mass:  ffffffffffffffff
  => assign ffffffffffffffff (0000000000000000) to BB10[for.end75]
 - node: BB10[for.end75]
  => [backedge] weight = 2080374784
  => [  exit  ] weight = 67108864, succ = BB11[for.end78]
  => mass:  ffffffffffffffff
  => assign f7ffffffffffffff (0800000000000000) [back] to BB4[for.body9.preheader]
  => assign 0800000000000000 (0000000000000000) [exit] to BB11[for.end78]
compute-loop-scale: BB4[for.body9.preheader]*
 - exit-mass = 0800000000000000 (ffffffffffffffff - f7ffffffffffffff)
 - scale = 32.0
packaging-loop: BB4[for.body9.preheader]*
 - node: BB4[for.body9.preheader]
 - node: BB5[for.body9]
 - node: BB8[for.cond64.preheader]
 - node: BB9[for.body66]
 - node: BB10[for.end75]
compute-mass-in-loop: BB3[for.body3.lr.ph]*
 - node: BB3[for.body3.lr.ph]
  => [ local  ] weight = 2147483648, succ = BB4[for.body9.preheader]
  => mass:  ffffffffffffffff
  => assign ffffffffffffffff (0000000000000000) to BB4[for.body9.preheader]
 - node: BB4[for.body9.preheader]
  => [ local  ] weight = 576460752303423488, succ = BB11[for.end78]
  => mass:  ffffffffffffffff
  => assign ffffffffffffffff (0000000000000000) to BB11[for.end78]
 - node: BB11[for.end78]
  => [  exit  ] weight = 67108864, succ = BB12[for.end81]
  => [backedge] weight = 2080374784
  => mass:  ffffffffffffffff
  => assign f7ffffffffffffff (0800000000000000) [back] to BB3[for.body3.lr.ph]
  => assign 0800000000000000 (0000000000000000) [exit] to BB12[for.end81]
compute-loop-scale: BB3[for.body3.lr.ph]*
 - exit-mass = 0800000000000000 (ffffffffffffffff - f7ffffffffffffff)
 - scale = 32.0
packaging-loop: BB3[for.body3.lr.ph]*
 - node: BB3[for.body3.lr.ph]
 - node: BB4[for.body9.preheader]
 - node: BB11[for.end78]
compute-mass-in-function
 - node: BB0
  => [ local  ] weight = 2147483648, succ = BB1[entry]
  => mass:  ffffffffffffffff
  => assign ffffffffffffffff (0000000000000000) to BB1[entry]
 - node: BB1[entry]
  => [ local  ] weight = 1342177280, succ = BB2[for.body3.lr.ph.preheader]
  => [ local  ] weight = 805306368, succ = BB12[for.end81]
  => mass:  ffffffffffffffff
  => assign 9fffffffffffffff (6000000000000000) to BB2[for.body3.lr.ph.preheader]
  => assign 6000000000000000 (0000000000000000) to BB12[for.end81]
 - node: BB2[for.body3.lr.ph.preheader]
  => [ local  ] weight = 2147483648, succ = BB3[for.body3.lr.ph]
  => mass:  9fffffffffffffff
  => assign 9fffffffffffffff (0000000000000000) to BB3[for.body3.lr.ph]
 - node: BB3[for.body3.lr.ph]
  => [ local  ] weight = 576460752303423488, succ = BB12[for.end81]
  => mass:  9fffffffffffffff
  => assign 9fffffffffffffff (0000000000000000) to BB12[for.end81]
 - node: BB12[for.end81]
  => mass:  ffffffffffffffff
unwrap-loop-package: BB3[for.body3.lr.ph]*: mass = 9fffffffffffffff, scale = 32.0
  => combined-scale = 20.0
 - BB3[for.body3.lr.ph]: 1.0 => 20.0
 - BB4[for.body9.preheader]: 32.0 => 640.0
 - BB11[for.end78]: 1.0 => 20.0
unwrap-loop-package: BB4[for.body9.preheader]*: mass = ffffffffffffffff, scale = 640.0
  => combined-scale = 640.0
 - BB4[for.body9.preheader]: 1.0 => 640.0
 - BB5[for.body9]: 32.0 => 20480.0
 - BB8[for.cond64.preheader]: 1.0 => 640.0
 - BB9[for.body66]: 32.0 => 20480.0
 - BB10[for.end75]: 1.0 => 640.0
unwrap-loop-package: BB5[for.body9]*: mass = ffffffffffffffff, scale = 20480.0
  => combined-scale = 20480.0
 - BB5[for.body9]: 1.0 => 20480.0
 - BB6[for.body13]: 32.0 => 655360.0
 - BB7[for.end60]: 1.0 => 20480.0
unwrap-loop-package: BB9[for.body66]*: mass = ffffffffffffffff, scale = 20480.0
  => combined-scale = 20480.0
 - BB9[for.body66]: 1.0 => 20480.0
unwrap-loop-package: BB6[for.body13]*: mass = ffffffffffffffff, scale = 655360.0
  => combined-scale = 655360.0
 - BB6[for.body13]: 1.0 => 655360.0
float-to-int: min = 0.625, max = 655360.0, factor = 12.8
 - BB0: float = 1.0, scaled = 12.8, int = 12
 - BB1[entry]: float = 1.0, scaled = 12.8, int = 12
 - BB2[for.body3.lr.ph.preheader]: float = 0.625, scaled = 8.0, int = 8
 - BB3[for.body3.lr.ph]: float = 20.0, scaled = 256.0, int = 255
 - BB4[for.body9.preheader]: float = 640.0, scaled = 8192.0, int = 8191
 - BB5[for.body9]: float = 20480.0, scaled = 262144.0, int = 262143
 - BB6[for.body13]: float = 655360.0, scaled = 8388608.0, int = 8388607
 - BB7[for.end60]: float = 20480.0, scaled = 262144.0, int = 262143
 - BB8[for.cond64.preheader]: float = 640.0, scaled = 8192.0, int = 8191
 - BB9[for.body66]: float = 20480.0, scaled = 262144.0, int = 262143
 - BB10[for.end75]: float = 640.0, scaled = 8192.0, int = 8191
 - BB11[for.end78]: float = 20.0, scaled = 256.0, int = 255
 - BB12[for.end81]: float = 1.0, scaled = 12.8, int = 12
block-frequency-info: matmac
 - BB0: float = 1.0, int = 12
 - BB1[entry]: float = 1.0, int = 12
 - BB2[for.body3.lr.ph.preheader]: float = 0.625, int = 8
 - BB3[for.body3.lr.ph]: float = 20.0, int = 255
 - BB4[for.body9.preheader]: float = 640.0, int = 8191
 - BB5[for.body9]: float = 20480.0, int = 262143
 - BB6[for.body13]: float = 655360.0, int = 8388607
 - BB7[for.end60]: float = 20480.0, int = 262143
 - BB8[for.cond64.preheader]: float = 640.0, int = 8191
 - BB9[for.body66]: float = 20480.0, int = 262143
 - BB10[for.end75]: float = 640.0, int = 8191
 - BB11[for.end78]: float = 20.0, int = 255
 - BB12[for.end81]: float = 1.0, int = 12

# *** IR Dump Before If Converter ***:
# Machine code for function matmac: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=32, align=8, at location [SP-40]
  fi#1: size=4, align=4, at location [SP-44]
  fi#2: size=4, align=4, at location [SP-4]
  fi#3: size=4, align=8, at location [SP-8]
Function Live Ins: %R0, %R1, %R2, %R3

BB#0: 
    Live Ins: %R0 %R1 %R2 %R3
	%SP<def,tied2> = STRi64_pmd %LR, %SP<tied0>, -48; flags: FrameSetup
	%FP<def> = ADDri_r32 %SP, 48, %STATUS<imp-def>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	GID %CONFIG<imp-def>
	%R19<def> = MOVFS32_core %CONFIG, %D9<imp-def>
	STRi32_r32 %R19, %FP, -44; mem:ST4[FixedStack1]
	%IP<def> = MOVi32ri 65535
	%IP<def,tied1> = MOVTi32ri %IP<kill,tied0>, 65521
	%R18<def> = ANDrr_r32 %R19, %IP<kill>, %STATUS<imp-def>, %D9<imp-use,kill>, %D9<imp-def>
	%R19<def,tied1> = MOVTi32ri %R19<tied0>, 72, %D9<imp-use,kill>, %D9<imp-def>
	STRi64 %D9<kill>, %FP, -8; mem:ST4[FixedStack3] ST4[FixedStack2]
	GIE %CONFIG<imp-use,kill>
    Successors according to CFG: BB#1(?%)

BB#1: derived from LLVM BB %entry
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#0
	%IP<def,dead> = CMPri_r32 %R3, 1, %STATUS<imp-def>
	BCC <BB#12>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#2(0x50000000 / 0x80000000 = 62.50%) BB#12(0x30000000 / 0x80000000 = 37.50%)

BB#2: derived from LLVM BB %for.body3.lr.ph.preheader
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#1
	%IP<def> = LSL32ri %R3, 2, %STATUS<imp-def,dead>
	%R1<def> = ADDri_r32 %R1<kill>, 8, %STATUS<imp-def,dead>
	%R16<def> = MOViPTR %FP, -40
	%R17<def> = ADDri_r32 %R16, 8, %STATUS<imp-def,dead>
	%R19<def> = MOVi32ri 0, %D9<imp-def>
	%R20<def> = MOVi32rr %R19
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %for.body3.lr.ph
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20
    Predecessors according to CFG: BB#2 BB#11
	%R21<def> = LDRi32_r32 %FP, -8; mem:LD4[FixedStack3]
	GID %CONFIG<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %R21<kill>
	GIE %CONFIG<imp-def,dead>
	%R21<def> = IMULrr_r32 %R20, %R3, %STATUS<imp-def,dead>
	%R21<def> = LSL32ri %R21<kill>, 2, %STATUS<imp-def,dead>
	%R21<def> = ADDrr_r32 %R0, %R21<kill>, %STATUS<imp-def,dead>
	%R22<def> = MOVi32rr %R2
	%R23<def> = MOVi32rr %R1
	%R24<def> = MOVi32rr %R19
    Successors according to CFG: BB#4(?%)

BB#4: derived from LLVM BB %for.body9.preheader
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#3 BB#10
	%R18<def> = MOVi32rr %R19, %D9<imp-use,kill>, %D9<imp-def>
	STRi64 %D9, %FP, -16; mem:ST8[%1+24]
	STRi64 %D9, %FP, -24; mem:ST8[%1+16]
	STRi64 %D9, %FP, -32; mem:ST8[%1+8]
	STRi64 %D9, %FP, -40; mem:ST8[%1]
	%R25<def> = MOVi32rr %R23
	%R26<def> = MOVi32rr %R19
    Successors according to CFG: BB#5(?%)

BB#5: derived from LLVM BB %for.body9
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#4 BB#7
	%R27<def> = LSL32ri %R26, 2, %STATUS<imp-def,dead>
	%R27<def> = ADDrr_r32 %R21, %R27<kill>, %STATUS<imp-def,dead>
	%R27<def> = LDRf32 %R27<kill>, 0; mem:Volatile LD4[%add.ptr10](tbaa=!2)
	%R32<def> = MOVi32rr %R17
	%R34<def> = MOVi32rr %R25
	%R33<def> = MOVi32rr %R19
    Successors according to CFG: BB#6(?%)

BB#6: derived from LLVM BB %for.body13
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26 %R27 %R32 %R33 %R34
    Predecessors according to CFG: BB#5 BB#6
	%R37<def> = LDRf32 %R34, -8; mem:Volatile LD4[%scevgep8](tbaa=!2)
	%R35<def> = ADDri_r32 %R32, 16, %STATUS<imp-def,dead>
	%R36<def> = ADDri_r32 %R34, 16, %STATUS<imp-def,dead>
	%R38<def> = LDRf32 %R34, -4; mem:Volatile LD4[%scevgep9](tbaa=!2)
	%R33<def> = ADDri_r32 %R33<kill>, 4, %STATUS<imp-def,dead>
	%R39<def> = LDRf32 %R34, 0; mem:Volatile LD4[%lsr.iv5](tbaa=!2)
	%R40<def> = LDRf32 %R34<kill>, 4; mem:Volatile LD4[%scevgep7](tbaa=!2)
	%D21<def> = LDRf64 %R32, -8; mem:LD4[%scevgep17](tbaa=!2) LD4[%scevgep15](tbaa=!2)
	%R34<def> = LDRi32_r32 %FP, -4; mem:LD4[FixedStack2]
	GID %CONFIG<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %R34<kill>
	GIE %CONFIG<imp-def,dead>
	%R43<def,tied1> = FMADDrr_r32 %R43<tied0>, %R27, %R37<kill>, %STATUS<imp-def,dead>, %D21<imp-use,kill>, %D21<imp-def>
	%R42<def,tied1> = FMADDrr_r32 %R42<tied0>, %R27, %R38<kill>, %STATUS<imp-def,dead>, %D21<imp-use,kill>, %D21<imp-def>
	%R44<def> = MOVi32rr %R43, %D22<imp-def>
	%R45<def> = MOVi32rr %R42, %D21<imp-use,kill>, %D22<imp-use,kill>, %D22<imp-def>
	STRf64 %D22<kill>, %R32, -8; mem:ST4[%scevgep17](tbaa=!2) ST4[%scevgep15](tbaa=!2)
	%R34<def> = LDRf32 %R32, 0; mem:LD4[%lsr.iv1214](tbaa=!2)
	%R34<def,tied1> = FMADDrr_r32 %R34<kill,tied0>, %R27, %R39<kill>, %STATUS<imp-def,dead>
	STRf32 %R34<kill>, %R32, 0; mem:ST4[%lsr.iv1214](tbaa=!2)
	%R37<def> = LDRf32 %R32, 4; mem:LD4[%scevgep16](tbaa=!2)
	%R37<def,tied1> = FMADDrr_r32 %R37<kill,tied0>, %R27, %R40<kill>, %STATUS<imp-def,dead>
	%R34<def,dead> = CMPri_r32 %R33, 8, %STATUS<imp-def>
	STRf32 %R37<kill>, %R32<kill>, 4; mem:ST4[%scevgep16](tbaa=!2)
	%R32<def> = MOVi32rr %R35<kill>
	%R34<def> = MOVi32rr %R36<kill>
	BCC <BB#6>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#6(0x7c000000 / 0x80000000 = 96.88%) BB#7(0x04000000 / 0x80000000 = 3.12%)

BB#7: derived from LLVM BB %for.end60
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#6
	%R25<def> = ADDrr_r32 %R25<kill>, %IP, %STATUS<imp-def,dead>
	%R26<def> = ADDri_r32 %R26<kill>, 1, %STATUS<imp-def,dead>
	%R27<def,dead> = CMPrr_r32 %R26, %R3, %STATUS<imp-def>
	BCC <BB#5>, 1, %STATUS<imp-use>
    Successors according to CFG: BB#8(0x04000000 / 0x80000000 = 3.12%) BB#5(0x7c000000 / 0x80000000 = 96.88%)

BB#8: derived from LLVM BB %for.cond64.preheader
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#7
	%R25<def> = MOVi32rr %R22
	%R26<def> = MOVi32rr %R19
    Successors according to CFG: BB#9(?%)

BB#9: derived from LLVM BB %for.body66
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#8 BB#9
	%R27<def> = ADDrr_r32 %R16, %R26, %STATUS<imp-def,dead>
	%R33<def> = LDRf32 %R27<kill>, 0; mem:LD4[%sunkaddr30](tbaa=!2)
	%R27<def> = ADDri_r32 %R25, 4, %STATUS<imp-def,dead>
	%R26<def> = ADDri_r32 %R26<kill>, 4, %STATUS<imp-def,dead>
	%R34<def> = LDRf32 %R25, 0; mem:Volatile LD4[%lsr.iv24](tbaa=!2)
	%R32<def> = LDRi32_r32 %FP, -4; mem:LD4[FixedStack2]
	GID %CONFIG<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %R32<kill>
	GIE %CONFIG<imp-def,dead>
	%R33<def> = FADDrr_r32 %R33<kill>, %R34<kill>, %STATUS<imp-def,dead>
	%R32<def,dead> = CMPri_r32 %R26, 32, %STATUS<imp-def>
	STRf32 %R33<kill>, %R25<kill>, 0; mem:Volatile ST4[%lsr.iv24](tbaa=!2)
	%R25<def> = MOVi32rr %R27<kill>
	BCC <BB#9>, 1, %STATUS<imp-use>
    Successors according to CFG: BB#10(0x04000000 / 0x80000000 = 3.12%) BB#9(0x7c000000 / 0x80000000 = 96.88%)

BB#10: derived from LLVM BB %for.end75
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#9
	%R22<def> = ADDri_r32 %R22<kill>, 32, %STATUS<imp-def,dead>
	%R23<def> = ADDri_r32 %R23<kill>, 32, %STATUS<imp-def,dead>
	%R24<def> = ADDri_r32 %R24<kill>, 8, %STATUS<imp-def,dead>
	%R25<def,dead> = CMPrr_r32 %R24, %R3, %STATUS<imp-def>
	BCC <BB#4>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#4(0x7c000000 / 0x80000000 = 96.88%) BB#11(0x04000000 / 0x80000000 = 3.12%)

BB#11: derived from LLVM BB %for.end78
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20
    Predecessors according to CFG: BB#10
	%R2<def> = ADDrr_r32 %R2<kill>, %IP, %STATUS<imp-def,dead>
	%R20<def> = ADDri_r32 %R20<kill>, 1, %STATUS<imp-def,dead>
	%R21<def,dead> = CMPrr_r32 %R20, %R3, %STATUS<imp-def>
	BCC <BB#3>, 1, %STATUS<imp-use>
    Successors according to CFG: BB#12(0x04000000 / 0x80000000 = 3.12%) BB#3(0x7c000000 / 0x80000000 = 96.88%)

BB#12: derived from LLVM BB %for.end81
    Predecessors according to CFG: BB#1 BB#11
	%R0<def> = LDRi32_r32 %FP, -44; mem:LD4[FixedStack1]
	GID
	%CONFIG<def> = MOVTS32_core %R0<kill>
	GIE %CONFIG<imp-use,kill>
	%LR<def> = LDRi64 %SP, 48; flags: FrameSetup
	%SP<def> = ADDri_r32 %SP, 48, %STATUS<imp-def>
	JR32 %LR

# End machine code for function matmac.


<----------------->
Analyzing block 0
BB#0: 
    Live Ins: %R0 %R1 %R2 %R3
	%SP<def,tied2> = STRi64_pmd %LR, %SP<tied0>, -48; flags: FrameSetup
	%FP<def> = ADDri_r32 %SP, 48, %STATUS<imp-def>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	GID %CONFIG<imp-def>
	%R19<def> = MOVFS32_core %CONFIG, %D9<imp-def>
	STRi32_r32 %R19, %FP, -44; mem:ST4[FixedStack1]
	%IP<def> = MOVi32ri 65535
	%IP<def,tied1> = MOVTi32ri %IP<kill,tied0>, 65521
	%R18<def> = ANDrr_r32 %R19, %IP<kill>, %STATUS<imp-def>, %D9<imp-use,kill>, %D9<imp-def>
	%R19<def,tied1> = MOVTi32ri %R19<tied0>, 72, %D9<imp-use,kill>, %D9<imp-def>
	STRi64 %D9<kill>, %FP, -8; mem:ST4[FixedStack3] ST4[FixedStack2]
	GIE %CONFIG<imp-use,kill>
    Successors according to CFG: BB#1(?%)

<----------------->
Analyzing block 1
BB#1: derived from LLVM BB %entry
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#0
	%IP<def,dead> = CMPri_r32 %R3, 1, %STATUS<imp-def>
	BCC <BB#12>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#2(0x50000000 / 0x80000000 = 62.50%) BB#12(0x30000000 / 0x80000000 = 37.50%)

<----------------->
Analyzing block 2
BB#2: derived from LLVM BB %for.body3.lr.ph.preheader
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#1
	%IP<def> = LSL32ri %R3, 2, %STATUS<imp-def,dead>
	%R1<def> = ADDri_r32 %R1<kill>, 8, %STATUS<imp-def,dead>
	%R16<def> = MOViPTR %FP, -40
	%R17<def> = ADDri_r32 %R16, 8, %STATUS<imp-def,dead>
	%R19<def> = MOVi32ri 0, %D9<imp-def>
	%R20<def> = MOVi32rr %R19
    Successors according to CFG: BB#3(?%)

<----------------->
Analyzing block 3
BB#3: derived from LLVM BB %for.body3.lr.ph
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20
    Predecessors according to CFG: BB#2 BB#11
	%R21<def> = LDRi32_r32 %FP, -8; mem:LD4[FixedStack3]
	GID %CONFIG<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %R21<kill>
	GIE %CONFIG<imp-def,dead>
	%R21<def> = IMULrr_r32 %R20, %R3, %STATUS<imp-def,dead>
	%R21<def> = LSL32ri %R21<kill>, 2, %STATUS<imp-def,dead>
	%R21<def> = ADDrr_r32 %R0, %R21<kill>, %STATUS<imp-def,dead>
	%R22<def> = MOVi32rr %R2
	%R23<def> = MOVi32rr %R1
	%R24<def> = MOVi32rr %R19
    Successors according to CFG: BB#4(?%)

<----------------->
Analyzing block 4
BB#4: derived from LLVM BB %for.body9.preheader
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#3 BB#10
	%R18<def> = MOVi32rr %R19, %D9<imp-use,kill>, %D9<imp-def>
	STRi64 %D9, %FP, -16; mem:ST8[%1+24]
	STRi64 %D9, %FP, -24; mem:ST8[%1+16]
	STRi64 %D9, %FP, -32; mem:ST8[%1+8]
	STRi64 %D9, %FP, -40; mem:ST8[%1]
	%R25<def> = MOVi32rr %R23
	%R26<def> = MOVi32rr %R19
    Successors according to CFG: BB#5(?%)

<----------------->
Analyzing block 5
BB#5: derived from LLVM BB %for.body9
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#4 BB#7
	%R27<def> = LSL32ri %R26, 2, %STATUS<imp-def,dead>
	%R27<def> = ADDrr_r32 %R21, %R27<kill>, %STATUS<imp-def,dead>
	%R27<def> = LDRf32 %R27<kill>, 0; mem:Volatile LD4[%add.ptr10](tbaa=!2)
	%R32<def> = MOVi32rr %R17
	%R34<def> = MOVi32rr %R25
	%R33<def> = MOVi32rr %R19
    Successors according to CFG: BB#6(?%)

<----------------->
Analyzing block 6
BB#6: derived from LLVM BB %for.body13
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26 %R27 %R32 %R33 %R34
    Predecessors according to CFG: BB#5 BB#6
	%R37<def> = LDRf32 %R34, -8; mem:Volatile LD4[%scevgep8](tbaa=!2)
	%R35<def> = ADDri_r32 %R32, 16, %STATUS<imp-def,dead>
	%R36<def> = ADDri_r32 %R34, 16, %STATUS<imp-def,dead>
	%R38<def> = LDRf32 %R34, -4; mem:Volatile LD4[%scevgep9](tbaa=!2)
	%R33<def> = ADDri_r32 %R33<kill>, 4, %STATUS<imp-def,dead>
	%R39<def> = LDRf32 %R34, 0; mem:Volatile LD4[%lsr.iv5](tbaa=!2)
	%R40<def> = LDRf32 %R34<kill>, 4; mem:Volatile LD4[%scevgep7](tbaa=!2)
	%D21<def> = LDRf64 %R32, -8; mem:LD4[%scevgep17](tbaa=!2) LD4[%scevgep15](tbaa=!2)
	%R34<def> = LDRi32_r32 %FP, -4; mem:LD4[FixedStack2]
	GID %CONFIG<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %R34<kill>
	GIE %CONFIG<imp-def,dead>
	%R43<def,tied1> = FMADDrr_r32 %R43<tied0>, %R27, %R37<kill>, %STATUS<imp-def,dead>, %D21<imp-use,kill>, %D21<imp-def>
	%R42<def,tied1> = FMADDrr_r32 %R42<tied0>, %R27, %R38<kill>, %STATUS<imp-def,dead>, %D21<imp-use,kill>, %D21<imp-def>
	%R44<def> = MOVi32rr %R43, %D22<imp-def>
	%R45<def> = MOVi32rr %R42, %D21<imp-use,kill>, %D22<imp-use,kill>, %D22<imp-def>
	STRf64 %D22<kill>, %R32, -8; mem:ST4[%scevgep17](tbaa=!2) ST4[%scevgep15](tbaa=!2)
	%R34<def> = LDRf32 %R32, 0; mem:LD4[%lsr.iv1214](tbaa=!2)
	%R34<def,tied1> = FMADDrr_r32 %R34<kill,tied0>, %R27, %R39<kill>, %STATUS<imp-def,dead>
	STRf32 %R34<kill>, %R32, 0; mem:ST4[%lsr.iv1214](tbaa=!2)
	%R37<def> = LDRf32 %R32, 4; mem:LD4[%scevgep16](tbaa=!2)
	%R37<def,tied1> = FMADDrr_r32 %R37<kill,tied0>, %R27, %R40<kill>, %STATUS<imp-def,dead>
	%R34<def,dead> = CMPri_r32 %R33, 8, %STATUS<imp-def>
	STRf32 %R37<kill>, %R32<kill>, 4; mem:ST4[%scevgep16](tbaa=!2)
	%R32<def> = MOVi32rr %R35<kill>
	%R34<def> = MOVi32rr %R36<kill>
	BCC <BB#6>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#6(0x7c000000 / 0x80000000 = 96.88%) BB#7(0x04000000 / 0x80000000 = 3.12%)

<----------------->
Analyzing block 7
BB#7: derived from LLVM BB %for.end60
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#6
	%R25<def> = ADDrr_r32 %R25<kill>, %IP, %STATUS<imp-def,dead>
	%R26<def> = ADDri_r32 %R26<kill>, 1, %STATUS<imp-def,dead>
	%R27<def,dead> = CMPrr_r32 %R26, %R3, %STATUS<imp-def>
	BCC <BB#5>, 1, %STATUS<imp-use>
    Successors according to CFG: BB#8(0x04000000 / 0x80000000 = 3.12%) BB#5(0x7c000000 / 0x80000000 = 96.88%)

<----------------->
Analyzing block 8
BB#8: derived from LLVM BB %for.cond64.preheader
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#7
	%R25<def> = MOVi32rr %R22
	%R26<def> = MOVi32rr %R19
    Successors according to CFG: BB#9(?%)

<----------------->
Analyzing block 9
BB#9: derived from LLVM BB %for.body66
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#8 BB#9
	%R27<def> = ADDrr_r32 %R16, %R26, %STATUS<imp-def,dead>
	%R33<def> = LDRf32 %R27<kill>, 0; mem:LD4[%sunkaddr30](tbaa=!2)
	%R27<def> = ADDri_r32 %R25, 4, %STATUS<imp-def,dead>
	%R26<def> = ADDri_r32 %R26<kill>, 4, %STATUS<imp-def,dead>
	%R34<def> = LDRf32 %R25, 0; mem:Volatile LD4[%lsr.iv24](tbaa=!2)
	%R32<def> = LDRi32_r32 %FP, -4; mem:LD4[FixedStack2]
	GID %CONFIG<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %R32<kill>
	GIE %CONFIG<imp-def,dead>
	%R33<def> = FADDrr_r32 %R33<kill>, %R34<kill>, %STATUS<imp-def,dead>
	%R32<def,dead> = CMPri_r32 %R26, 32, %STATUS<imp-def>
	STRf32 %R33<kill>, %R25<kill>, 0; mem:Volatile ST4[%lsr.iv24](tbaa=!2)
	%R25<def> = MOVi32rr %R27<kill>
	BCC <BB#9>, 1, %STATUS<imp-use>
    Successors according to CFG: BB#10(0x04000000 / 0x80000000 = 3.12%) BB#9(0x7c000000 / 0x80000000 = 96.88%)

<----------------->
Analyzing block 10
BB#10: derived from LLVM BB %for.end75
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#9
	%R22<def> = ADDri_r32 %R22<kill>, 32, %STATUS<imp-def,dead>
	%R23<def> = ADDri_r32 %R23<kill>, 32, %STATUS<imp-def,dead>
	%R24<def> = ADDri_r32 %R24<kill>, 8, %STATUS<imp-def,dead>
	%R25<def,dead> = CMPrr_r32 %R24, %R3, %STATUS<imp-def>
	BCC <BB#4>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#4(0x7c000000 / 0x80000000 = 96.88%) BB#11(0x04000000 / 0x80000000 = 3.12%)

<----------------->
Analyzing block 11
BB#11: derived from LLVM BB %for.end78
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20
    Predecessors according to CFG: BB#10
	%R2<def> = ADDrr_r32 %R2<kill>, %IP, %STATUS<imp-def,dead>
	%R20<def> = ADDri_r32 %R20<kill>, 1, %STATUS<imp-def,dead>
	%R21<def,dead> = CMPrr_r32 %R20, %R3, %STATUS<imp-def>
	BCC <BB#3>, 1, %STATUS<imp-use>
    Successors according to CFG: BB#12(0x04000000 / 0x80000000 = 3.12%) BB#3(0x7c000000 / 0x80000000 = 96.88%)

<----------------->
Analyzing block 12
BB#12: derived from LLVM BB %for.end81
    Predecessors according to CFG: BB#1 BB#11
	%R0<def> = LDRi32_r32 %FP, -44; mem:LD4[FixedStack1]
	GID
	%CONFIG<def> = MOVTS32_core %R0<kill>
	GIE %CONFIG<imp-use,kill>
	%LR<def> = LDRi64 %SP, 48; flags: FrameSetup
	%SP<def> = ADDri_r32 %SP, 48, %STATUS<imp-def>
	JR32 %LR

<----------------->
Analyzing block 2
BB#2: derived from LLVM BB %for.body3.lr.ph.preheader
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#1
	%IP<def> = LSL32ri %R3, 2, %STATUS<imp-def,dead>
	%R1<def> = ADDri_r32 %R1<kill>, 8, %STATUS<imp-def,dead>
	%R16<def> = MOViPTR %FP, -40
	%R17<def> = ADDri_r32 %R16, 8, %STATUS<imp-def,dead>
	%R19<def> = MOVi32ri 0, %D9<imp-def>
	%R20<def> = MOVi32rr %R19
    Successors according to CFG: BB#3(?%)

<----------------->
Analyzing block 11
BB#11: derived from LLVM BB %for.end78
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20
    Predecessors according to CFG: BB#10
	%R2<def> = ADDrr_r32 %R2<kill>, %IP, %STATUS<imp-def,dead>
	%R20<def> = ADDri_r32 %R20<kill>, 1, %STATUS<imp-def,dead>
	%R21<def,dead> = CMPrr_r32 %R20, %R3, %STATUS<imp-def>
	BCC <BB#3>, 1, %STATUS<imp-use>
    Successors according to CFG: BB#12(0x04000000 / 0x80000000 = 3.12%) BB#3(0x7c000000 / 0x80000000 = 96.88%)

<----------------->
Removing branches out of BB#11
# Machine code for function matmac: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=32, align=8, at location [SP-40]
  fi#1: size=4, align=4, at location [SP-44]
  fi#2: size=4, align=4, at location [SP-4]
  fi#3: size=4, align=8, at location [SP-8]
Function Live Ins: %R0, %R1, %R2, %R3

BB#0: 
    Live Ins: %R0 %R1 %R2 %R3
	%SP<def,tied2> = STRi64_pmd %LR, %SP<tied0>, -48; flags: FrameSetup
	%FP<def> = ADDri_r32 %SP, 48, %STATUS<imp-def>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	GID %CONFIG<imp-def>
	%R19<def> = MOVFS32_core %CONFIG, %D9<imp-def>
	STRi32_r32 %R19, %FP, -44; mem:ST4[FixedStack1]
	%IP<def> = MOVi32ri 65535
	%IP<def,tied1> = MOVTi32ri %IP<kill,tied0>, 65521
	%R18<def> = ANDrr_r32 %R19, %IP<kill>, %STATUS<imp-def>, %D9<imp-use,kill>, %D9<imp-def>
	%R19<def,tied1> = MOVTi32ri %R19<tied0>, 72, %D9<imp-use,kill>, %D9<imp-def>
	STRi64 %D9<kill>, %FP, -8; mem:ST4[FixedStack3] ST4[FixedStack2]
	GIE %CONFIG<imp-use,kill>
    Successors according to CFG: BB#1(?%)

BB#1: derived from LLVM BB %entry
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#0
	%IP<def,dead> = CMPri_r32 %R3, 1, %STATUS<imp-def>
	BCC <BB#12>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#2(0x50000000 / 0x80000000 = 62.50%) BB#12(0x30000000 / 0x80000000 = 37.50%)

BB#2: derived from LLVM BB %for.body3.lr.ph.preheader
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#1
	%IP<def> = LSL32ri %R3, 2, %STATUS<imp-def,dead>
	%R1<def> = ADDri_r32 %R1<kill>, 8, %STATUS<imp-def,dead>
	%R16<def> = MOViPTR %FP, -40
	%R17<def> = ADDri_r32 %R16, 8, %STATUS<imp-def,dead>
	%R19<def> = MOVi32ri 0, %D9<imp-def>
	%R20<def> = MOVi32rr %R19
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %for.body3.lr.ph
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20
    Predecessors according to CFG: BB#2 BB#11
	%R21<def> = LDRi32_r32 %FP, -8; mem:LD4[FixedStack3]
	GID %CONFIG<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %R21<kill>
	GIE %CONFIG<imp-def,dead>
	%R21<def> = IMULrr_r32 %R20, %R3, %STATUS<imp-def,dead>
	%R21<def> = LSL32ri %R21<kill>, 2, %STATUS<imp-def,dead>
	%R21<def> = ADDrr_r32 %R0, %R21<kill>, %STATUS<imp-def,dead>
	%R22<def> = MOVi32rr %R2
	%R23<def> = MOVi32rr %R1
	%R24<def> = MOVi32rr %R19
    Successors according to CFG: BB#4(?%)

BB#4: derived from LLVM BB %for.body9.preheader
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#3 BB#10
	%R18<def> = MOVi32rr %R19, %D9<imp-use,kill>, %D9<imp-def>
	STRi64 %D9, %FP, -16; mem:ST8[%1+24]
	STRi64 %D9, %FP, -24; mem:ST8[%1+16]
	STRi64 %D9, %FP, -32; mem:ST8[%1+8]
	STRi64 %D9, %FP, -40; mem:ST8[%1]
	%R25<def> = MOVi32rr %R23
	%R26<def> = MOVi32rr %R19
    Successors according to CFG: BB#5(?%)

BB#5: derived from LLVM BB %for.body9
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#4 BB#7
	%R27<def> = LSL32ri %R26, 2, %STATUS<imp-def,dead>
	%R27<def> = ADDrr_r32 %R21, %R27<kill>, %STATUS<imp-def,dead>
	%R27<def> = LDRf32 %R27<kill>, 0; mem:Volatile LD4[%add.ptr10](tbaa=!2)
	%R32<def> = MOVi32rr %R17
	%R34<def> = MOVi32rr %R25
	%R33<def> = MOVi32rr %R19
    Successors according to CFG: BB#6(?%)

BB#6: derived from LLVM BB %for.body13
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26 %R27 %R32 %R33 %R34
    Predecessors according to CFG: BB#5 BB#6
	%R37<def> = LDRf32 %R34, -8; mem:Volatile LD4[%scevgep8](tbaa=!2)
	%R35<def> = ADDri_r32 %R32, 16, %STATUS<imp-def,dead>
	%R36<def> = ADDri_r32 %R34, 16, %STATUS<imp-def,dead>
	%R38<def> = LDRf32 %R34, -4; mem:Volatile LD4[%scevgep9](tbaa=!2)
	%R33<def> = ADDri_r32 %R33<kill>, 4, %STATUS<imp-def,dead>
	%R39<def> = LDRf32 %R34, 0; mem:Volatile LD4[%lsr.iv5](tbaa=!2)
	%R40<def> = LDRf32 %R34<kill>, 4; mem:Volatile LD4[%scevgep7](tbaa=!2)
	%D21<def> = LDRf64 %R32, -8; mem:LD4[%scevgep17](tbaa=!2) LD4[%scevgep15](tbaa=!2)
	%R34<def> = LDRi32_r32 %FP, -4; mem:LD4[FixedStack2]
	GID %CONFIG<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %R34<kill>
	GIE %CONFIG<imp-def,dead>
	%R43<def,tied1> = FMADDrr_r32 %R43<tied0>, %R27, %R37<kill>, %STATUS<imp-def,dead>, %D21<imp-use,kill>, %D21<imp-def>
	%R42<def,tied1> = FMADDrr_r32 %R42<tied0>, %R27, %R38<kill>, %STATUS<imp-def,dead>, %D21<imp-use,kill>, %D21<imp-def>
	%R44<def> = MOVi32rr %R43, %D22<imp-def>
	%R45<def> = MOVi32rr %R42, %D21<imp-use,kill>, %D22<imp-use,kill>, %D22<imp-def>
	STRf64 %D22<kill>, %R32, -8; mem:ST4[%scevgep17](tbaa=!2) ST4[%scevgep15](tbaa=!2)
	%R34<def> = LDRf32 %R32, 0; mem:LD4[%lsr.iv1214](tbaa=!2)
	%R34<def,tied1> = FMADDrr_r32 %R34<kill,tied0>, %R27, %R39<kill>, %STATUS<imp-def,dead>
	STRf32 %R34<kill>, %R32, 0; mem:ST4[%lsr.iv1214](tbaa=!2)
	%R37<def> = LDRf32 %R32, 4; mem:LD4[%scevgep16](tbaa=!2)
	%R37<def,tied1> = FMADDrr_r32 %R37<kill,tied0>, %R27, %R40<kill>, %STATUS<imp-def,dead>
	%R34<def,dead> = CMPri_r32 %R33, 8, %STATUS<imp-def>
	STRf32 %R37<kill>, %R32<kill>, 4; mem:ST4[%scevgep16](tbaa=!2)
	%R32<def> = MOVi32rr %R35<kill>
	%R34<def> = MOVi32rr %R36<kill>
	BCC <BB#6>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#6(0x7c000000 / 0x80000000 = 96.88%) BB#7(0x04000000 / 0x80000000 = 3.12%)

BB#7: derived from LLVM BB %for.end60
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#6
	%R25<def> = ADDrr_r32 %R25<kill>, %IP, %STATUS<imp-def,dead>
	%R26<def> = ADDri_r32 %R26<kill>, 1, %STATUS<imp-def,dead>
	%R27<def,dead> = CMPrr_r32 %R26, %R3, %STATUS<imp-def>
	BCC <BB#5>, 1, %STATUS<imp-use>
    Successors according to CFG: BB#8(0x04000000 / 0x80000000 = 3.12%) BB#5(0x7c000000 / 0x80000000 = 96.88%)

BB#8: derived from LLVM BB %for.cond64.preheader
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#7
	%R25<def> = MOVi32rr %R22
	%R26<def> = MOVi32rr %R19
    Successors according to CFG: BB#9(?%)

BB#9: derived from LLVM BB %for.body66
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#8 BB#9
	%R27<def> = ADDrr_r32 %R16, %R26, %STATUS<imp-def,dead>
	%R33<def> = LDRf32 %R27<kill>, 0; mem:LD4[%sunkaddr30](tbaa=!2)
	%R27<def> = ADDri_r32 %R25, 4, %STATUS<imp-def,dead>
	%R26<def> = ADDri_r32 %R26<kill>, 4, %STATUS<imp-def,dead>
	%R34<def> = LDRf32 %R25, 0; mem:Volatile LD4[%lsr.iv24](tbaa=!2)
	%R32<def> = LDRi32_r32 %FP, -4; mem:LD4[FixedStack2]
	GID %CONFIG<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %R32<kill>
	GIE %CONFIG<imp-def,dead>
	%R33<def> = FADDrr_r32 %R33<kill>, %R34<kill>, %STATUS<imp-def,dead>
	%R32<def,dead> = CMPri_r32 %R26, 32, %STATUS<imp-def>
	STRf32 %R33<kill>, %R25<kill>, 0; mem:Volatile ST4[%lsr.iv24](tbaa=!2)
	%R25<def> = MOVi32rr %R27<kill>
	BCC <BB#9>, 1, %STATUS<imp-use>
    Successors according to CFG: BB#10(0x04000000 / 0x80000000 = 3.12%) BB#9(0x7c000000 / 0x80000000 = 96.88%)

BB#10: derived from LLVM BB %for.end75
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#9
	%R22<def> = ADDri_r32 %R22<kill>, 32, %STATUS<imp-def,dead>
	%R23<def> = ADDri_r32 %R23<kill>, 32, %STATUS<imp-def,dead>
	%R24<def> = ADDri_r32 %R24<kill>, 8, %STATUS<imp-def,dead>
	%R25<def,dead> = CMPrr_r32 %R24, %R3, %STATUS<imp-def>
	BCC <BB#4>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#4(0x7c000000 / 0x80000000 = 96.88%) BB#11(0x04000000 / 0x80000000 = 3.12%)

BB#11: derived from LLVM BB %for.end78
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20
    Predecessors according to CFG: BB#10
	%R2<def> = ADDrr_r32 %R2<kill>, %IP, %STATUS<imp-def,dead>
	%R20<def> = ADDri_r32 %R20<kill>, 1, %STATUS<imp-def,dead>
	%R21<def,dead> = CMPrr_r32 %R20, %R3, %STATUS<imp-def>
    Successors according to CFG: BB#12(0x04000000 / 0x80000000 = 3.12%) BB#3(0x7c000000 / 0x80000000 = 96.88%)

BB#12: derived from LLVM BB %for.end81
    Predecessors according to CFG: BB#1 BB#11
	%R0<def> = LDRi32_r32 %FP, -44; mem:LD4[FixedStack1]
	GID
	%CONFIG<def> = MOVTS32_core %R0<kill>
	GIE %CONFIG<imp-use,kill>
	%LR<def> = LDRi64 %SP, 48; flags: FrameSetup
	%SP<def> = ADDri_r32 %SP, 48, %STATUS<imp-def>
	JR32 %LR

# End machine code for function matmac.


<----------------->
Inserting branch into BB#11
# Machine code for function matmac: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=32, align=8, at location [SP-40]
  fi#1: size=4, align=4, at location [SP-44]
  fi#2: size=4, align=4, at location [SP-4]
  fi#3: size=4, align=8, at location [SP-8]
Function Live Ins: %R0, %R1, %R2, %R3

BB#0: 
    Live Ins: %R0 %R1 %R2 %R3
	%SP<def,tied2> = STRi64_pmd %LR, %SP<tied0>, -48; flags: FrameSetup
	%FP<def> = ADDri_r32 %SP, 48, %STATUS<imp-def>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	GID %CONFIG<imp-def>
	%R19<def> = MOVFS32_core %CONFIG, %D9<imp-def>
	STRi32_r32 %R19, %FP, -44; mem:ST4[FixedStack1]
	%IP<def> = MOVi32ri 65535
	%IP<def,tied1> = MOVTi32ri %IP<kill,tied0>, 65521
	%R18<def> = ANDrr_r32 %R19, %IP<kill>, %STATUS<imp-def>, %D9<imp-use,kill>, %D9<imp-def>
	%R19<def,tied1> = MOVTi32ri %R19<tied0>, 72, %D9<imp-use,kill>, %D9<imp-def>
	STRi64 %D9<kill>, %FP, -8; mem:ST4[FixedStack3] ST4[FixedStack2]
	GIE %CONFIG<imp-use,kill>
    Successors according to CFG: BB#1(?%)

BB#1: derived from LLVM BB %entry
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#0
	%IP<def,dead> = CMPri_r32 %R3, 1, %STATUS<imp-def>
	BCC <BB#12>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#2(0x50000000 / 0x80000000 = 62.50%) BB#12(0x30000000 / 0x80000000 = 37.50%)

BB#2: derived from LLVM BB %for.body3.lr.ph.preheader
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#1
	%IP<def> = LSL32ri %R3, 2, %STATUS<imp-def,dead>
	%R1<def> = ADDri_r32 %R1<kill>, 8, %STATUS<imp-def,dead>
	%R16<def> = MOViPTR %FP, -40
	%R17<def> = ADDri_r32 %R16, 8, %STATUS<imp-def,dead>
	%R19<def> = MOVi32ri 0, %D9<imp-def>
	%R20<def> = MOVi32rr %R19
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %for.body3.lr.ph
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20
    Predecessors according to CFG: BB#2 BB#11
	%R21<def> = LDRi32_r32 %FP, -8; mem:LD4[FixedStack3]
	GID %CONFIG<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %R21<kill>
	GIE %CONFIG<imp-def,dead>
	%R21<def> = IMULrr_r32 %R20, %R3, %STATUS<imp-def,dead>
	%R21<def> = LSL32ri %R21<kill>, 2, %STATUS<imp-def,dead>
	%R21<def> = ADDrr_r32 %R0, %R21<kill>, %STATUS<imp-def,dead>
	%R22<def> = MOVi32rr %R2
	%R23<def> = MOVi32rr %R1
	%R24<def> = MOVi32rr %R19
    Successors according to CFG: BB#4(?%)

BB#4: derived from LLVM BB %for.body9.preheader
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#3 BB#10
	%R18<def> = MOVi32rr %R19, %D9<imp-use,kill>, %D9<imp-def>
	STRi64 %D9, %FP, -16; mem:ST8[%1+24]
	STRi64 %D9, %FP, -24; mem:ST8[%1+16]
	STRi64 %D9, %FP, -32; mem:ST8[%1+8]
	STRi64 %D9, %FP, -40; mem:ST8[%1]
	%R25<def> = MOVi32rr %R23
	%R26<def> = MOVi32rr %R19
    Successors according to CFG: BB#5(?%)

BB#5: derived from LLVM BB %for.body9
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#4 BB#7
	%R27<def> = LSL32ri %R26, 2, %STATUS<imp-def,dead>
	%R27<def> = ADDrr_r32 %R21, %R27<kill>, %STATUS<imp-def,dead>
	%R27<def> = LDRf32 %R27<kill>, 0; mem:Volatile LD4[%add.ptr10](tbaa=!2)
	%R32<def> = MOVi32rr %R17
	%R34<def> = MOVi32rr %R25
	%R33<def> = MOVi32rr %R19
    Successors according to CFG: BB#6(?%)

BB#6: derived from LLVM BB %for.body13
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26 %R27 %R32 %R33 %R34
    Predecessors according to CFG: BB#5 BB#6
	%R37<def> = LDRf32 %R34, -8; mem:Volatile LD4[%scevgep8](tbaa=!2)
	%R35<def> = ADDri_r32 %R32, 16, %STATUS<imp-def,dead>
	%R36<def> = ADDri_r32 %R34, 16, %STATUS<imp-def,dead>
	%R38<def> = LDRf32 %R34, -4; mem:Volatile LD4[%scevgep9](tbaa=!2)
	%R33<def> = ADDri_r32 %R33<kill>, 4, %STATUS<imp-def,dead>
	%R39<def> = LDRf32 %R34, 0; mem:Volatile LD4[%lsr.iv5](tbaa=!2)
	%R40<def> = LDRf32 %R34<kill>, 4; mem:Volatile LD4[%scevgep7](tbaa=!2)
	%D21<def> = LDRf64 %R32, -8; mem:LD4[%scevgep17](tbaa=!2) LD4[%scevgep15](tbaa=!2)
	%R34<def> = LDRi32_r32 %FP, -4; mem:LD4[FixedStack2]
	GID %CONFIG<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %R34<kill>
	GIE %CONFIG<imp-def,dead>
	%R43<def,tied1> = FMADDrr_r32 %R43<tied0>, %R27, %R37<kill>, %STATUS<imp-def,dead>, %D21<imp-use,kill>, %D21<imp-def>
	%R42<def,tied1> = FMADDrr_r32 %R42<tied0>, %R27, %R38<kill>, %STATUS<imp-def,dead>, %D21<imp-use,kill>, %D21<imp-def>
	%R44<def> = MOVi32rr %R43, %D22<imp-def>
	%R45<def> = MOVi32rr %R42, %D21<imp-use,kill>, %D22<imp-use,kill>, %D22<imp-def>
	STRf64 %D22<kill>, %R32, -8; mem:ST4[%scevgep17](tbaa=!2) ST4[%scevgep15](tbaa=!2)
	%R34<def> = LDRf32 %R32, 0; mem:LD4[%lsr.iv1214](tbaa=!2)
	%R34<def,tied1> = FMADDrr_r32 %R34<kill,tied0>, %R27, %R39<kill>, %STATUS<imp-def,dead>
	STRf32 %R34<kill>, %R32, 0; mem:ST4[%lsr.iv1214](tbaa=!2)
	%R37<def> = LDRf32 %R32, 4; mem:LD4[%scevgep16](tbaa=!2)
	%R37<def,tied1> = FMADDrr_r32 %R37<kill,tied0>, %R27, %R40<kill>, %STATUS<imp-def,dead>
	%R34<def,dead> = CMPri_r32 %R33, 8, %STATUS<imp-def>
	STRf32 %R37<kill>, %R32<kill>, 4; mem:ST4[%scevgep16](tbaa=!2)
	%R32<def> = MOVi32rr %R35<kill>
	%R34<def> = MOVi32rr %R36<kill>
	BCC <BB#6>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#6(0x7c000000 / 0x80000000 = 96.88%) BB#7(0x04000000 / 0x80000000 = 3.12%)

BB#7: derived from LLVM BB %for.end60
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#6
	%R25<def> = ADDrr_r32 %R25<kill>, %IP, %STATUS<imp-def,dead>
	%R26<def> = ADDri_r32 %R26<kill>, 1, %STATUS<imp-def,dead>
	%R27<def,dead> = CMPrr_r32 %R26, %R3, %STATUS<imp-def>
	BCC <BB#5>, 1, %STATUS<imp-use>
    Successors according to CFG: BB#8(0x04000000 / 0x80000000 = 3.12%) BB#5(0x7c000000 / 0x80000000 = 96.88%)

BB#8: derived from LLVM BB %for.cond64.preheader
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#7
	%R25<def> = MOVi32rr %R22
	%R26<def> = MOVi32rr %R19
    Successors according to CFG: BB#9(?%)

BB#9: derived from LLVM BB %for.body66
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#8 BB#9
	%R27<def> = ADDrr_r32 %R16, %R26, %STATUS<imp-def,dead>
	%R33<def> = LDRf32 %R27<kill>, 0; mem:LD4[%sunkaddr30](tbaa=!2)
	%R27<def> = ADDri_r32 %R25, 4, %STATUS<imp-def,dead>
	%R26<def> = ADDri_r32 %R26<kill>, 4, %STATUS<imp-def,dead>
	%R34<def> = LDRf32 %R25, 0; mem:Volatile LD4[%lsr.iv24](tbaa=!2)
	%R32<def> = LDRi32_r32 %FP, -4; mem:LD4[FixedStack2]
	GID %CONFIG<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %R32<kill>
	GIE %CONFIG<imp-def,dead>
	%R33<def> = FADDrr_r32 %R33<kill>, %R34<kill>, %STATUS<imp-def,dead>
	%R32<def,dead> = CMPri_r32 %R26, 32, %STATUS<imp-def>
	STRf32 %R33<kill>, %R25<kill>, 0; mem:Volatile ST4[%lsr.iv24](tbaa=!2)
	%R25<def> = MOVi32rr %R27<kill>
	BCC <BB#9>, 1, %STATUS<imp-use>
    Successors according to CFG: BB#10(0x04000000 / 0x80000000 = 3.12%) BB#9(0x7c000000 / 0x80000000 = 96.88%)

BB#10: derived from LLVM BB %for.end75
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#9
	%R22<def> = ADDri_r32 %R22<kill>, 32, %STATUS<imp-def,dead>
	%R23<def> = ADDri_r32 %R23<kill>, 32, %STATUS<imp-def,dead>
	%R24<def> = ADDri_r32 %R24<kill>, 8, %STATUS<imp-def,dead>
	%R25<def,dead> = CMPrr_r32 %R24, %R3, %STATUS<imp-def>
	BCC <BB#4>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#4(0x7c000000 / 0x80000000 = 96.88%) BB#11(0x04000000 / 0x80000000 = 3.12%)

BB#11: derived from LLVM BB %for.end78
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20
    Predecessors according to CFG: BB#10
	%R2<def> = ADDrr_r32 %R2<kill>, %IP, %STATUS<imp-def,dead>
	%R20<def> = ADDri_r32 %R20<kill>, 1, %STATUS<imp-def,dead>
	%R21<def,dead> = CMPrr_r32 %R20, %R3, %STATUS<imp-def>
	BCC <BB#12>, 0, %STATUS<imp-use>
    Successors according to CFG: BB#12(0x04000000 / 0x80000000 = 3.12%) BB#3(0x7c000000 / 0x80000000 = 96.88%)

BB#12: derived from LLVM BB %for.end81
    Predecessors according to CFG: BB#1 BB#11
	%R0<def> = LDRi32_r32 %FP, -44; mem:LD4[FixedStack1]
	GID
	%CONFIG<def> = MOVTS32_core %R0<kill>
	GIE %CONFIG<imp-use,kill>
	%LR<def> = LDRi64 %SP, 48; flags: FrameSetup
	%SP<def> = ADDri_r32 %SP, 48, %STATUS<imp-def>
	JR32 %LR

# End machine code for function matmac.


TryTailMergeBlocks: BB#2, BB#11
  with successor BB#3
  which has fall-through from BB#2
Looking for common tails of at least 3 instructions

<----------------->
Analyzing block 11
BB#11: derived from LLVM BB %for.end78
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20
    Predecessors according to CFG: BB#10
	%R2<def> = ADDrr_r32 %R2<kill>, %IP, %STATUS<imp-def,dead>
	%R20<def> = ADDri_r32 %R20<kill>, 1, %STATUS<imp-def,dead>
	%R21<def,dead> = CMPrr_r32 %R20, %R3, %STATUS<imp-def>
	BCC <BB#12>, 0, %STATUS<imp-use>
    Successors according to CFG: BB#12(0x04000000 / 0x80000000 = 3.12%) BB#3(0x7c000000 / 0x80000000 = 96.88%)

<----------------->
Removing branches out of BB#11
# Machine code for function matmac: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=32, align=8, at location [SP-40]
  fi#1: size=4, align=4, at location [SP-44]
  fi#2: size=4, align=4, at location [SP-4]
  fi#3: size=4, align=8, at location [SP-8]
Function Live Ins: %R0, %R1, %R2, %R3

BB#0: 
    Live Ins: %R0 %R1 %R2 %R3
	%SP<def,tied2> = STRi64_pmd %LR, %SP<tied0>, -48; flags: FrameSetup
	%FP<def> = ADDri_r32 %SP, 48, %STATUS<imp-def>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	GID %CONFIG<imp-def>
	%R19<def> = MOVFS32_core %CONFIG, %D9<imp-def>
	STRi32_r32 %R19, %FP, -44; mem:ST4[FixedStack1]
	%IP<def> = MOVi32ri 65535
	%IP<def,tied1> = MOVTi32ri %IP<kill,tied0>, 65521
	%R18<def> = ANDrr_r32 %R19, %IP<kill>, %STATUS<imp-def>, %D9<imp-use,kill>, %D9<imp-def>
	%R19<def,tied1> = MOVTi32ri %R19<tied0>, 72, %D9<imp-use,kill>, %D9<imp-def>
	STRi64 %D9<kill>, %FP, -8; mem:ST4[FixedStack3] ST4[FixedStack2]
	GIE %CONFIG<imp-use,kill>
    Successors according to CFG: BB#1(?%)

BB#1: derived from LLVM BB %entry
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#0
	%IP<def,dead> = CMPri_r32 %R3, 1, %STATUS<imp-def>
	BCC <BB#12>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#2(0x50000000 / 0x80000000 = 62.50%) BB#12(0x30000000 / 0x80000000 = 37.50%)

BB#2: derived from LLVM BB %for.body3.lr.ph.preheader
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#1
	%IP<def> = LSL32ri %R3, 2, %STATUS<imp-def,dead>
	%R1<def> = ADDri_r32 %R1<kill>, 8, %STATUS<imp-def,dead>
	%R16<def> = MOViPTR %FP, -40
	%R17<def> = ADDri_r32 %R16, 8, %STATUS<imp-def,dead>
	%R19<def> = MOVi32ri 0, %D9<imp-def>
	%R20<def> = MOVi32rr %R19
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %for.body3.lr.ph
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20
    Predecessors according to CFG: BB#2 BB#11
	%R21<def> = LDRi32_r32 %FP, -8; mem:LD4[FixedStack3]
	GID %CONFIG<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %R21<kill>
	GIE %CONFIG<imp-def,dead>
	%R21<def> = IMULrr_r32 %R20, %R3, %STATUS<imp-def,dead>
	%R21<def> = LSL32ri %R21<kill>, 2, %STATUS<imp-def,dead>
	%R21<def> = ADDrr_r32 %R0, %R21<kill>, %STATUS<imp-def,dead>
	%R22<def> = MOVi32rr %R2
	%R23<def> = MOVi32rr %R1
	%R24<def> = MOVi32rr %R19
    Successors according to CFG: BB#4(?%)

BB#4: derived from LLVM BB %for.body9.preheader
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#3 BB#10
	%R18<def> = MOVi32rr %R19, %D9<imp-use,kill>, %D9<imp-def>
	STRi64 %D9, %FP, -16; mem:ST8[%1+24]
	STRi64 %D9, %FP, -24; mem:ST8[%1+16]
	STRi64 %D9, %FP, -32; mem:ST8[%1+8]
	STRi64 %D9, %FP, -40; mem:ST8[%1]
	%R25<def> = MOVi32rr %R23
	%R26<def> = MOVi32rr %R19
    Successors according to CFG: BB#5(?%)

BB#5: derived from LLVM BB %for.body9
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#4 BB#7
	%R27<def> = LSL32ri %R26, 2, %STATUS<imp-def,dead>
	%R27<def> = ADDrr_r32 %R21, %R27<kill>, %STATUS<imp-def,dead>
	%R27<def> = LDRf32 %R27<kill>, 0; mem:Volatile LD4[%add.ptr10](tbaa=!2)
	%R32<def> = MOVi32rr %R17
	%R34<def> = MOVi32rr %R25
	%R33<def> = MOVi32rr %R19
    Successors according to CFG: BB#6(?%)

BB#6: derived from LLVM BB %for.body13
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26 %R27 %R32 %R33 %R34
    Predecessors according to CFG: BB#5 BB#6
	%R37<def> = LDRf32 %R34, -8; mem:Volatile LD4[%scevgep8](tbaa=!2)
	%R35<def> = ADDri_r32 %R32, 16, %STATUS<imp-def,dead>
	%R36<def> = ADDri_r32 %R34, 16, %STATUS<imp-def,dead>
	%R38<def> = LDRf32 %R34, -4; mem:Volatile LD4[%scevgep9](tbaa=!2)
	%R33<def> = ADDri_r32 %R33<kill>, 4, %STATUS<imp-def,dead>
	%R39<def> = LDRf32 %R34, 0; mem:Volatile LD4[%lsr.iv5](tbaa=!2)
	%R40<def> = LDRf32 %R34<kill>, 4; mem:Volatile LD4[%scevgep7](tbaa=!2)
	%D21<def> = LDRf64 %R32, -8; mem:LD4[%scevgep17](tbaa=!2) LD4[%scevgep15](tbaa=!2)
	%R34<def> = LDRi32_r32 %FP, -4; mem:LD4[FixedStack2]
	GID %CONFIG<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %R34<kill>
	GIE %CONFIG<imp-def,dead>
	%R43<def,tied1> = FMADDrr_r32 %R43<tied0>, %R27, %R37<kill>, %STATUS<imp-def,dead>, %D21<imp-use,kill>, %D21<imp-def>
	%R42<def,tied1> = FMADDrr_r32 %R42<tied0>, %R27, %R38<kill>, %STATUS<imp-def,dead>, %D21<imp-use,kill>, %D21<imp-def>
	%R44<def> = MOVi32rr %R43, %D22<imp-def>
	%R45<def> = MOVi32rr %R42, %D21<imp-use,kill>, %D22<imp-use,kill>, %D22<imp-def>
	STRf64 %D22<kill>, %R32, -8; mem:ST4[%scevgep17](tbaa=!2) ST4[%scevgep15](tbaa=!2)
	%R34<def> = LDRf32 %R32, 0; mem:LD4[%lsr.iv1214](tbaa=!2)
	%R34<def,tied1> = FMADDrr_r32 %R34<kill,tied0>, %R27, %R39<kill>, %STATUS<imp-def,dead>
	STRf32 %R34<kill>, %R32, 0; mem:ST4[%lsr.iv1214](tbaa=!2)
	%R37<def> = LDRf32 %R32, 4; mem:LD4[%scevgep16](tbaa=!2)
	%R37<def,tied1> = FMADDrr_r32 %R37<kill,tied0>, %R27, %R40<kill>, %STATUS<imp-def,dead>
	%R34<def,dead> = CMPri_r32 %R33, 8, %STATUS<imp-def>
	STRf32 %R37<kill>, %R32<kill>, 4; mem:ST4[%scevgep16](tbaa=!2)
	%R32<def> = MOVi32rr %R35<kill>
	%R34<def> = MOVi32rr %R36<kill>
	BCC <BB#6>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#6(0x7c000000 / 0x80000000 = 96.88%) BB#7(0x04000000 / 0x80000000 = 3.12%)

BB#7: derived from LLVM BB %for.end60
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#6
	%R25<def> = ADDrr_r32 %R25<kill>, %IP, %STATUS<imp-def,dead>
	%R26<def> = ADDri_r32 %R26<kill>, 1, %STATUS<imp-def,dead>
	%R27<def,dead> = CMPrr_r32 %R26, %R3, %STATUS<imp-def>
	BCC <BB#5>, 1, %STATUS<imp-use>
    Successors according to CFG: BB#8(0x04000000 / 0x80000000 = 3.12%) BB#5(0x7c000000 / 0x80000000 = 96.88%)

BB#8: derived from LLVM BB %for.cond64.preheader
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#7
	%R25<def> = MOVi32rr %R22
	%R26<def> = MOVi32rr %R19
    Successors according to CFG: BB#9(?%)

BB#9: derived from LLVM BB %for.body66
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#8 BB#9
	%R27<def> = ADDrr_r32 %R16, %R26, %STATUS<imp-def,dead>
	%R33<def> = LDRf32 %R27<kill>, 0; mem:LD4[%sunkaddr30](tbaa=!2)
	%R27<def> = ADDri_r32 %R25, 4, %STATUS<imp-def,dead>
	%R26<def> = ADDri_r32 %R26<kill>, 4, %STATUS<imp-def,dead>
	%R34<def> = LDRf32 %R25, 0; mem:Volatile LD4[%lsr.iv24](tbaa=!2)
	%R32<def> = LDRi32_r32 %FP, -4; mem:LD4[FixedStack2]
	GID %CONFIG<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %R32<kill>
	GIE %CONFIG<imp-def,dead>
	%R33<def> = FADDrr_r32 %R33<kill>, %R34<kill>, %STATUS<imp-def,dead>
	%R32<def,dead> = CMPri_r32 %R26, 32, %STATUS<imp-def>
	STRf32 %R33<kill>, %R25<kill>, 0; mem:Volatile ST4[%lsr.iv24](tbaa=!2)
	%R25<def> = MOVi32rr %R27<kill>
	BCC <BB#9>, 1, %STATUS<imp-use>
    Successors according to CFG: BB#10(0x04000000 / 0x80000000 = 3.12%) BB#9(0x7c000000 / 0x80000000 = 96.88%)

BB#10: derived from LLVM BB %for.end75
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#9
	%R22<def> = ADDri_r32 %R22<kill>, 32, %STATUS<imp-def,dead>
	%R23<def> = ADDri_r32 %R23<kill>, 32, %STATUS<imp-def,dead>
	%R24<def> = ADDri_r32 %R24<kill>, 8, %STATUS<imp-def,dead>
	%R25<def,dead> = CMPrr_r32 %R24, %R3, %STATUS<imp-def>
	BCC <BB#4>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#4(0x7c000000 / 0x80000000 = 96.88%) BB#11(0x04000000 / 0x80000000 = 3.12%)

BB#11: derived from LLVM BB %for.end78
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20
    Predecessors according to CFG: BB#10
	%R2<def> = ADDrr_r32 %R2<kill>, %IP, %STATUS<imp-def,dead>
	%R20<def> = ADDri_r32 %R20<kill>, 1, %STATUS<imp-def,dead>
	%R21<def,dead> = CMPrr_r32 %R20, %R3, %STATUS<imp-def>
    Successors according to CFG: BB#12(0x04000000 / 0x80000000 = 3.12%) BB#3(0x7c000000 / 0x80000000 = 96.88%)

BB#12: derived from LLVM BB %for.end81
    Predecessors according to CFG: BB#1 BB#11
	%R0<def> = LDRi32_r32 %FP, -44; mem:LD4[FixedStack1]
	GID
	%CONFIG<def> = MOVTS32_core %R0<kill>
	GIE %CONFIG<imp-use,kill>
	%LR<def> = LDRi64 %SP, 48; flags: FrameSetup
	%SP<def> = ADDri_r32 %SP, 48, %STATUS<imp-def>
	JR32 %LR

# End machine code for function matmac.


<----------------->
Inserting branch into BB#11
# Machine code for function matmac: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=32, align=8, at location [SP-40]
  fi#1: size=4, align=4, at location [SP-44]
  fi#2: size=4, align=4, at location [SP-4]
  fi#3: size=4, align=8, at location [SP-8]
Function Live Ins: %R0, %R1, %R2, %R3

BB#0: 
    Live Ins: %R0 %R1 %R2 %R3
	%SP<def,tied2> = STRi64_pmd %LR, %SP<tied0>, -48; flags: FrameSetup
	%FP<def> = ADDri_r32 %SP, 48, %STATUS<imp-def>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	GID %CONFIG<imp-def>
	%R19<def> = MOVFS32_core %CONFIG, %D9<imp-def>
	STRi32_r32 %R19, %FP, -44; mem:ST4[FixedStack1]
	%IP<def> = MOVi32ri 65535
	%IP<def,tied1> = MOVTi32ri %IP<kill,tied0>, 65521
	%R18<def> = ANDrr_r32 %R19, %IP<kill>, %STATUS<imp-def>, %D9<imp-use,kill>, %D9<imp-def>
	%R19<def,tied1> = MOVTi32ri %R19<tied0>, 72, %D9<imp-use,kill>, %D9<imp-def>
	STRi64 %D9<kill>, %FP, -8; mem:ST4[FixedStack3] ST4[FixedStack2]
	GIE %CONFIG<imp-use,kill>
    Successors according to CFG: BB#1(?%)

BB#1: derived from LLVM BB %entry
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#0
	%IP<def,dead> = CMPri_r32 %R3, 1, %STATUS<imp-def>
	BCC <BB#12>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#2(0x50000000 / 0x80000000 = 62.50%) BB#12(0x30000000 / 0x80000000 = 37.50%)

BB#2: derived from LLVM BB %for.body3.lr.ph.preheader
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#1
	%IP<def> = LSL32ri %R3, 2, %STATUS<imp-def,dead>
	%R1<def> = ADDri_r32 %R1<kill>, 8, %STATUS<imp-def,dead>
	%R16<def> = MOViPTR %FP, -40
	%R17<def> = ADDri_r32 %R16, 8, %STATUS<imp-def,dead>
	%R19<def> = MOVi32ri 0, %D9<imp-def>
	%R20<def> = MOVi32rr %R19
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %for.body3.lr.ph
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20
    Predecessors according to CFG: BB#2 BB#11
	%R21<def> = LDRi32_r32 %FP, -8; mem:LD4[FixedStack3]
	GID %CONFIG<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %R21<kill>
	GIE %CONFIG<imp-def,dead>
	%R21<def> = IMULrr_r32 %R20, %R3, %STATUS<imp-def,dead>
	%R21<def> = LSL32ri %R21<kill>, 2, %STATUS<imp-def,dead>
	%R21<def> = ADDrr_r32 %R0, %R21<kill>, %STATUS<imp-def,dead>
	%R22<def> = MOVi32rr %R2
	%R23<def> = MOVi32rr %R1
	%R24<def> = MOVi32rr %R19
    Successors according to CFG: BB#4(?%)

BB#4: derived from LLVM BB %for.body9.preheader
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#3 BB#10
	%R18<def> = MOVi32rr %R19, %D9<imp-use,kill>, %D9<imp-def>
	STRi64 %D9, %FP, -16; mem:ST8[%1+24]
	STRi64 %D9, %FP, -24; mem:ST8[%1+16]
	STRi64 %D9, %FP, -32; mem:ST8[%1+8]
	STRi64 %D9, %FP, -40; mem:ST8[%1]
	%R25<def> = MOVi32rr %R23
	%R26<def> = MOVi32rr %R19
    Successors according to CFG: BB#5(?%)

BB#5: derived from LLVM BB %for.body9
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#4 BB#7
	%R27<def> = LSL32ri %R26, 2, %STATUS<imp-def,dead>
	%R27<def> = ADDrr_r32 %R21, %R27<kill>, %STATUS<imp-def,dead>
	%R27<def> = LDRf32 %R27<kill>, 0; mem:Volatile LD4[%add.ptr10](tbaa=!2)
	%R32<def> = MOVi32rr %R17
	%R34<def> = MOVi32rr %R25
	%R33<def> = MOVi32rr %R19
    Successors according to CFG: BB#6(?%)

BB#6: derived from LLVM BB %for.body13
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26 %R27 %R32 %R33 %R34
    Predecessors according to CFG: BB#5 BB#6
	%R37<def> = LDRf32 %R34, -8; mem:Volatile LD4[%scevgep8](tbaa=!2)
	%R35<def> = ADDri_r32 %R32, 16, %STATUS<imp-def,dead>
	%R36<def> = ADDri_r32 %R34, 16, %STATUS<imp-def,dead>
	%R38<def> = LDRf32 %R34, -4; mem:Volatile LD4[%scevgep9](tbaa=!2)
	%R33<def> = ADDri_r32 %R33<kill>, 4, %STATUS<imp-def,dead>
	%R39<def> = LDRf32 %R34, 0; mem:Volatile LD4[%lsr.iv5](tbaa=!2)
	%R40<def> = LDRf32 %R34<kill>, 4; mem:Volatile LD4[%scevgep7](tbaa=!2)
	%D21<def> = LDRf64 %R32, -8; mem:LD4[%scevgep17](tbaa=!2) LD4[%scevgep15](tbaa=!2)
	%R34<def> = LDRi32_r32 %FP, -4; mem:LD4[FixedStack2]
	GID %CONFIG<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %R34<kill>
	GIE %CONFIG<imp-def,dead>
	%R43<def,tied1> = FMADDrr_r32 %R43<tied0>, %R27, %R37<kill>, %STATUS<imp-def,dead>, %D21<imp-use,kill>, %D21<imp-def>
	%R42<def,tied1> = FMADDrr_r32 %R42<tied0>, %R27, %R38<kill>, %STATUS<imp-def,dead>, %D21<imp-use,kill>, %D21<imp-def>
	%R44<def> = MOVi32rr %R43, %D22<imp-def>
	%R45<def> = MOVi32rr %R42, %D21<imp-use,kill>, %D22<imp-use,kill>, %D22<imp-def>
	STRf64 %D22<kill>, %R32, -8; mem:ST4[%scevgep17](tbaa=!2) ST4[%scevgep15](tbaa=!2)
	%R34<def> = LDRf32 %R32, 0; mem:LD4[%lsr.iv1214](tbaa=!2)
	%R34<def,tied1> = FMADDrr_r32 %R34<kill,tied0>, %R27, %R39<kill>, %STATUS<imp-def,dead>
	STRf32 %R34<kill>, %R32, 0; mem:ST4[%lsr.iv1214](tbaa=!2)
	%R37<def> = LDRf32 %R32, 4; mem:LD4[%scevgep16](tbaa=!2)
	%R37<def,tied1> = FMADDrr_r32 %R37<kill,tied0>, %R27, %R40<kill>, %STATUS<imp-def,dead>
	%R34<def,dead> = CMPri_r32 %R33, 8, %STATUS<imp-def>
	STRf32 %R37<kill>, %R32<kill>, 4; mem:ST4[%scevgep16](tbaa=!2)
	%R32<def> = MOVi32rr %R35<kill>
	%R34<def> = MOVi32rr %R36<kill>
	BCC <BB#6>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#6(0x7c000000 / 0x80000000 = 96.88%) BB#7(0x04000000 / 0x80000000 = 3.12%)

BB#7: derived from LLVM BB %for.end60
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#6
	%R25<def> = ADDrr_r32 %R25<kill>, %IP, %STATUS<imp-def,dead>
	%R26<def> = ADDri_r32 %R26<kill>, 1, %STATUS<imp-def,dead>
	%R27<def,dead> = CMPrr_r32 %R26, %R3, %STATUS<imp-def>
	BCC <BB#5>, 1, %STATUS<imp-use>
    Successors according to CFG: BB#8(0x04000000 / 0x80000000 = 3.12%) BB#5(0x7c000000 / 0x80000000 = 96.88%)

BB#8: derived from LLVM BB %for.cond64.preheader
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#7
	%R25<def> = MOVi32rr %R22
	%R26<def> = MOVi32rr %R19
    Successors according to CFG: BB#9(?%)

BB#9: derived from LLVM BB %for.body66
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#8 BB#9
	%R27<def> = ADDrr_r32 %R16, %R26, %STATUS<imp-def,dead>
	%R33<def> = LDRf32 %R27<kill>, 0; mem:LD4[%sunkaddr30](tbaa=!2)
	%R27<def> = ADDri_r32 %R25, 4, %STATUS<imp-def,dead>
	%R26<def> = ADDri_r32 %R26<kill>, 4, %STATUS<imp-def,dead>
	%R34<def> = LDRf32 %R25, 0; mem:Volatile LD4[%lsr.iv24](tbaa=!2)
	%R32<def> = LDRi32_r32 %FP, -4; mem:LD4[FixedStack2]
	GID %CONFIG<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %R32<kill>
	GIE %CONFIG<imp-def,dead>
	%R33<def> = FADDrr_r32 %R33<kill>, %R34<kill>, %STATUS<imp-def,dead>
	%R32<def,dead> = CMPri_r32 %R26, 32, %STATUS<imp-def>
	STRf32 %R33<kill>, %R25<kill>, 0; mem:Volatile ST4[%lsr.iv24](tbaa=!2)
	%R25<def> = MOVi32rr %R27<kill>
	BCC <BB#9>, 1, %STATUS<imp-use>
    Successors according to CFG: BB#10(0x04000000 / 0x80000000 = 3.12%) BB#9(0x7c000000 / 0x80000000 = 96.88%)

BB#10: derived from LLVM BB %for.end75
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#9
	%R22<def> = ADDri_r32 %R22<kill>, 32, %STATUS<imp-def,dead>
	%R23<def> = ADDri_r32 %R23<kill>, 32, %STATUS<imp-def,dead>
	%R24<def> = ADDri_r32 %R24<kill>, 8, %STATUS<imp-def,dead>
	%R25<def,dead> = CMPrr_r32 %R24, %R3, %STATUS<imp-def>
	BCC <BB#4>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#4(0x7c000000 / 0x80000000 = 96.88%) BB#11(0x04000000 / 0x80000000 = 3.12%)

BB#11: derived from LLVM BB %for.end78
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20
    Predecessors according to CFG: BB#10
	%R2<def> = ADDrr_r32 %R2<kill>, %IP, %STATUS<imp-def,dead>
	%R20<def> = ADDri_r32 %R20<kill>, 1, %STATUS<imp-def,dead>
	%R21<def,dead> = CMPrr_r32 %R20, %R3, %STATUS<imp-def>
	BCC <BB#3>, 1, %STATUS<imp-use>
    Successors according to CFG: BB#12(0x04000000 / 0x80000000 = 3.12%) BB#3(0x7c000000 / 0x80000000 = 96.88%)

BB#12: derived from LLVM BB %for.end81
    Predecessors according to CFG: BB#1 BB#11
	%R0<def> = LDRi32_r32 %FP, -44; mem:LD4[FixedStack1]
	GID
	%CONFIG<def> = MOVTS32_core %R0<kill>
	GIE %CONFIG<imp-use,kill>
	%LR<def> = LDRi64 %SP, 48; flags: FrameSetup
	%SP<def> = ADDri_r32 %SP, 48, %STATUS<imp-def>
	JR32 %LR

# End machine code for function matmac.


<----------------->
Analyzing block 3
BB#3: derived from LLVM BB %for.body3.lr.ph
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20
    Predecessors according to CFG: BB#2 BB#11
	%R21<def> = LDRi32_r32 %FP, -8; mem:LD4[FixedStack3]
	GID %CONFIG<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %R21<kill>
	GIE %CONFIG<imp-def,dead>
	%R21<def> = IMULrr_r32 %R20, %R3, %STATUS<imp-def,dead>
	%R21<def> = LSL32ri %R21<kill>, 2, %STATUS<imp-def,dead>
	%R21<def> = ADDrr_r32 %R0, %R21<kill>, %STATUS<imp-def,dead>
	%R22<def> = MOVi32rr %R2
	%R23<def> = MOVi32rr %R1
	%R24<def> = MOVi32rr %R19
    Successors according to CFG: BB#4(?%)

<----------------->
Analyzing block 10
BB#10: derived from LLVM BB %for.end75
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#9
	%R22<def> = ADDri_r32 %R22<kill>, 32, %STATUS<imp-def,dead>
	%R23<def> = ADDri_r32 %R23<kill>, 32, %STATUS<imp-def,dead>
	%R24<def> = ADDri_r32 %R24<kill>, 8, %STATUS<imp-def,dead>
	%R25<def,dead> = CMPrr_r32 %R24, %R3, %STATUS<imp-def>
	BCC <BB#4>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#4(0x7c000000 / 0x80000000 = 96.88%) BB#11(0x04000000 / 0x80000000 = 3.12%)

<----------------->
Removing branches out of BB#10
# Machine code for function matmac: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=32, align=8, at location [SP-40]
  fi#1: size=4, align=4, at location [SP-44]
  fi#2: size=4, align=4, at location [SP-4]
  fi#3: size=4, align=8, at location [SP-8]
Function Live Ins: %R0, %R1, %R2, %R3

BB#0: 
    Live Ins: %R0 %R1 %R2 %R3
	%SP<def,tied2> = STRi64_pmd %LR, %SP<tied0>, -48; flags: FrameSetup
	%FP<def> = ADDri_r32 %SP, 48, %STATUS<imp-def>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	GID %CONFIG<imp-def>
	%R19<def> = MOVFS32_core %CONFIG, %D9<imp-def>
	STRi32_r32 %R19, %FP, -44; mem:ST4[FixedStack1]
	%IP<def> = MOVi32ri 65535
	%IP<def,tied1> = MOVTi32ri %IP<kill,tied0>, 65521
	%R18<def> = ANDrr_r32 %R19, %IP<kill>, %STATUS<imp-def>, %D9<imp-use,kill>, %D9<imp-def>
	%R19<def,tied1> = MOVTi32ri %R19<tied0>, 72, %D9<imp-use,kill>, %D9<imp-def>
	STRi64 %D9<kill>, %FP, -8; mem:ST4[FixedStack3] ST4[FixedStack2]
	GIE %CONFIG<imp-use,kill>
    Successors according to CFG: BB#1(?%)

BB#1: derived from LLVM BB %entry
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#0
	%IP<def,dead> = CMPri_r32 %R3, 1, %STATUS<imp-def>
	BCC <BB#12>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#2(0x50000000 / 0x80000000 = 62.50%) BB#12(0x30000000 / 0x80000000 = 37.50%)

BB#2: derived from LLVM BB %for.body3.lr.ph.preheader
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#1
	%IP<def> = LSL32ri %R3, 2, %STATUS<imp-def,dead>
	%R1<def> = ADDri_r32 %R1<kill>, 8, %STATUS<imp-def,dead>
	%R16<def> = MOViPTR %FP, -40
	%R17<def> = ADDri_r32 %R16, 8, %STATUS<imp-def,dead>
	%R19<def> = MOVi32ri 0, %D9<imp-def>
	%R20<def> = MOVi32rr %R19
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %for.body3.lr.ph
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20
    Predecessors according to CFG: BB#2 BB#11
	%R21<def> = LDRi32_r32 %FP, -8; mem:LD4[FixedStack3]
	GID %CONFIG<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %R21<kill>
	GIE %CONFIG<imp-def,dead>
	%R21<def> = IMULrr_r32 %R20, %R3, %STATUS<imp-def,dead>
	%R21<def> = LSL32ri %R21<kill>, 2, %STATUS<imp-def,dead>
	%R21<def> = ADDrr_r32 %R0, %R21<kill>, %STATUS<imp-def,dead>
	%R22<def> = MOVi32rr %R2
	%R23<def> = MOVi32rr %R1
	%R24<def> = MOVi32rr %R19
    Successors according to CFG: BB#4(?%)

BB#4: derived from LLVM BB %for.body9.preheader
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#3 BB#10
	%R18<def> = MOVi32rr %R19, %D9<imp-use,kill>, %D9<imp-def>
	STRi64 %D9, %FP, -16; mem:ST8[%1+24]
	STRi64 %D9, %FP, -24; mem:ST8[%1+16]
	STRi64 %D9, %FP, -32; mem:ST8[%1+8]
	STRi64 %D9, %FP, -40; mem:ST8[%1]
	%R25<def> = MOVi32rr %R23
	%R26<def> = MOVi32rr %R19
    Successors according to CFG: BB#5(?%)

BB#5: derived from LLVM BB %for.body9
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#4 BB#7
	%R27<def> = LSL32ri %R26, 2, %STATUS<imp-def,dead>
	%R27<def> = ADDrr_r32 %R21, %R27<kill>, %STATUS<imp-def,dead>
	%R27<def> = LDRf32 %R27<kill>, 0; mem:Volatile LD4[%add.ptr10](tbaa=!2)
	%R32<def> = MOVi32rr %R17
	%R34<def> = MOVi32rr %R25
	%R33<def> = MOVi32rr %R19
    Successors according to CFG: BB#6(?%)

BB#6: derived from LLVM BB %for.body13
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26 %R27 %R32 %R33 %R34
    Predecessors according to CFG: BB#5 BB#6
	%R37<def> = LDRf32 %R34, -8; mem:Volatile LD4[%scevgep8](tbaa=!2)
	%R35<def> = ADDri_r32 %R32, 16, %STATUS<imp-def,dead>
	%R36<def> = ADDri_r32 %R34, 16, %STATUS<imp-def,dead>
	%R38<def> = LDRf32 %R34, -4; mem:Volatile LD4[%scevgep9](tbaa=!2)
	%R33<def> = ADDri_r32 %R33<kill>, 4, %STATUS<imp-def,dead>
	%R39<def> = LDRf32 %R34, 0; mem:Volatile LD4[%lsr.iv5](tbaa=!2)
	%R40<def> = LDRf32 %R34<kill>, 4; mem:Volatile LD4[%scevgep7](tbaa=!2)
	%D21<def> = LDRf64 %R32, -8; mem:LD4[%scevgep17](tbaa=!2) LD4[%scevgep15](tbaa=!2)
	%R34<def> = LDRi32_r32 %FP, -4; mem:LD4[FixedStack2]
	GID %CONFIG<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %R34<kill>
	GIE %CONFIG<imp-def,dead>
	%R43<def,tied1> = FMADDrr_r32 %R43<tied0>, %R27, %R37<kill>, %STATUS<imp-def,dead>, %D21<imp-use,kill>, %D21<imp-def>
	%R42<def,tied1> = FMADDrr_r32 %R42<tied0>, %R27, %R38<kill>, %STATUS<imp-def,dead>, %D21<imp-use,kill>, %D21<imp-def>
	%R44<def> = MOVi32rr %R43, %D22<imp-def>
	%R45<def> = MOVi32rr %R42, %D21<imp-use,kill>, %D22<imp-use,kill>, %D22<imp-def>
	STRf64 %D22<kill>, %R32, -8; mem:ST4[%scevgep17](tbaa=!2) ST4[%scevgep15](tbaa=!2)
	%R34<def> = LDRf32 %R32, 0; mem:LD4[%lsr.iv1214](tbaa=!2)
	%R34<def,tied1> = FMADDrr_r32 %R34<kill,tied0>, %R27, %R39<kill>, %STATUS<imp-def,dead>
	STRf32 %R34<kill>, %R32, 0; mem:ST4[%lsr.iv1214](tbaa=!2)
	%R37<def> = LDRf32 %R32, 4; mem:LD4[%scevgep16](tbaa=!2)
	%R37<def,tied1> = FMADDrr_r32 %R37<kill,tied0>, %R27, %R40<kill>, %STATUS<imp-def,dead>
	%R34<def,dead> = CMPri_r32 %R33, 8, %STATUS<imp-def>
	STRf32 %R37<kill>, %R32<kill>, 4; mem:ST4[%scevgep16](tbaa=!2)
	%R32<def> = MOVi32rr %R35<kill>
	%R34<def> = MOVi32rr %R36<kill>
	BCC <BB#6>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#6(0x7c000000 / 0x80000000 = 96.88%) BB#7(0x04000000 / 0x80000000 = 3.12%)

BB#7: derived from LLVM BB %for.end60
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#6
	%R25<def> = ADDrr_r32 %R25<kill>, %IP, %STATUS<imp-def,dead>
	%R26<def> = ADDri_r32 %R26<kill>, 1, %STATUS<imp-def,dead>
	%R27<def,dead> = CMPrr_r32 %R26, %R3, %STATUS<imp-def>
	BCC <BB#5>, 1, %STATUS<imp-use>
    Successors according to CFG: BB#8(0x04000000 / 0x80000000 = 3.12%) BB#5(0x7c000000 / 0x80000000 = 96.88%)

BB#8: derived from LLVM BB %for.cond64.preheader
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#7
	%R25<def> = MOVi32rr %R22
	%R26<def> = MOVi32rr %R19
    Successors according to CFG: BB#9(?%)

BB#9: derived from LLVM BB %for.body66
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#8 BB#9
	%R27<def> = ADDrr_r32 %R16, %R26, %STATUS<imp-def,dead>
	%R33<def> = LDRf32 %R27<kill>, 0; mem:LD4[%sunkaddr30](tbaa=!2)
	%R27<def> = ADDri_r32 %R25, 4, %STATUS<imp-def,dead>
	%R26<def> = ADDri_r32 %R26<kill>, 4, %STATUS<imp-def,dead>
	%R34<def> = LDRf32 %R25, 0; mem:Volatile LD4[%lsr.iv24](tbaa=!2)
	%R32<def> = LDRi32_r32 %FP, -4; mem:LD4[FixedStack2]
	GID %CONFIG<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %R32<kill>
	GIE %CONFIG<imp-def,dead>
	%R33<def> = FADDrr_r32 %R33<kill>, %R34<kill>, %STATUS<imp-def,dead>
	%R32<def,dead> = CMPri_r32 %R26, 32, %STATUS<imp-def>
	STRf32 %R33<kill>, %R25<kill>, 0; mem:Volatile ST4[%lsr.iv24](tbaa=!2)
	%R25<def> = MOVi32rr %R27<kill>
	BCC <BB#9>, 1, %STATUS<imp-use>
    Successors according to CFG: BB#10(0x04000000 / 0x80000000 = 3.12%) BB#9(0x7c000000 / 0x80000000 = 96.88%)

BB#10: derived from LLVM BB %for.end75
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#9
	%R22<def> = ADDri_r32 %R22<kill>, 32, %STATUS<imp-def,dead>
	%R23<def> = ADDri_r32 %R23<kill>, 32, %STATUS<imp-def,dead>
	%R24<def> = ADDri_r32 %R24<kill>, 8, %STATUS<imp-def,dead>
	%R25<def,dead> = CMPrr_r32 %R24, %R3, %STATUS<imp-def>
    Successors according to CFG: BB#4(0x7c000000 / 0x80000000 = 96.88%) BB#11(0x04000000 / 0x80000000 = 3.12%)

BB#11: derived from LLVM BB %for.end78
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20
    Predecessors according to CFG: BB#10
	%R2<def> = ADDrr_r32 %R2<kill>, %IP, %STATUS<imp-def,dead>
	%R20<def> = ADDri_r32 %R20<kill>, 1, %STATUS<imp-def,dead>
	%R21<def,dead> = CMPrr_r32 %R20, %R3, %STATUS<imp-def>
	BCC <BB#3>, 1, %STATUS<imp-use>
    Successors according to CFG: BB#12(0x04000000 / 0x80000000 = 3.12%) BB#3(0x7c000000 / 0x80000000 = 96.88%)

BB#12: derived from LLVM BB %for.end81
    Predecessors according to CFG: BB#1 BB#11
	%R0<def> = LDRi32_r32 %FP, -44; mem:LD4[FixedStack1]
	GID
	%CONFIG<def> = MOVTS32_core %R0<kill>
	GIE %CONFIG<imp-use,kill>
	%LR<def> = LDRi64 %SP, 48; flags: FrameSetup
	%SP<def> = ADDri_r32 %SP, 48, %STATUS<imp-def>
	JR32 %LR

# End machine code for function matmac.


<----------------->
Inserting branch into BB#10
# Machine code for function matmac: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=32, align=8, at location [SP-40]
  fi#1: size=4, align=4, at location [SP-44]
  fi#2: size=4, align=4, at location [SP-4]
  fi#3: size=4, align=8, at location [SP-8]
Function Live Ins: %R0, %R1, %R2, %R3

BB#0: 
    Live Ins: %R0 %R1 %R2 %R3
	%SP<def,tied2> = STRi64_pmd %LR, %SP<tied0>, -48; flags: FrameSetup
	%FP<def> = ADDri_r32 %SP, 48, %STATUS<imp-def>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	GID %CONFIG<imp-def>
	%R19<def> = MOVFS32_core %CONFIG, %D9<imp-def>
	STRi32_r32 %R19, %FP, -44; mem:ST4[FixedStack1]
	%IP<def> = MOVi32ri 65535
	%IP<def,tied1> = MOVTi32ri %IP<kill,tied0>, 65521
	%R18<def> = ANDrr_r32 %R19, %IP<kill>, %STATUS<imp-def>, %D9<imp-use,kill>, %D9<imp-def>
	%R19<def,tied1> = MOVTi32ri %R19<tied0>, 72, %D9<imp-use,kill>, %D9<imp-def>
	STRi64 %D9<kill>, %FP, -8; mem:ST4[FixedStack3] ST4[FixedStack2]
	GIE %CONFIG<imp-use,kill>
    Successors according to CFG: BB#1(?%)

BB#1: derived from LLVM BB %entry
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#0
	%IP<def,dead> = CMPri_r32 %R3, 1, %STATUS<imp-def>
	BCC <BB#12>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#2(0x50000000 / 0x80000000 = 62.50%) BB#12(0x30000000 / 0x80000000 = 37.50%)

BB#2: derived from LLVM BB %for.body3.lr.ph.preheader
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#1
	%IP<def> = LSL32ri %R3, 2, %STATUS<imp-def,dead>
	%R1<def> = ADDri_r32 %R1<kill>, 8, %STATUS<imp-def,dead>
	%R16<def> = MOViPTR %FP, -40
	%R17<def> = ADDri_r32 %R16, 8, %STATUS<imp-def,dead>
	%R19<def> = MOVi32ri 0, %D9<imp-def>
	%R20<def> = MOVi32rr %R19
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %for.body3.lr.ph
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20
    Predecessors according to CFG: BB#2 BB#11
	%R21<def> = LDRi32_r32 %FP, -8; mem:LD4[FixedStack3]
	GID %CONFIG<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %R21<kill>
	GIE %CONFIG<imp-def,dead>
	%R21<def> = IMULrr_r32 %R20, %R3, %STATUS<imp-def,dead>
	%R21<def> = LSL32ri %R21<kill>, 2, %STATUS<imp-def,dead>
	%R21<def> = ADDrr_r32 %R0, %R21<kill>, %STATUS<imp-def,dead>
	%R22<def> = MOVi32rr %R2
	%R23<def> = MOVi32rr %R1
	%R24<def> = MOVi32rr %R19
    Successors according to CFG: BB#4(?%)

BB#4: derived from LLVM BB %for.body9.preheader
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#3 BB#10
	%R18<def> = MOVi32rr %R19, %D9<imp-use,kill>, %D9<imp-def>
	STRi64 %D9, %FP, -16; mem:ST8[%1+24]
	STRi64 %D9, %FP, -24; mem:ST8[%1+16]
	STRi64 %D9, %FP, -32; mem:ST8[%1+8]
	STRi64 %D9, %FP, -40; mem:ST8[%1]
	%R25<def> = MOVi32rr %R23
	%R26<def> = MOVi32rr %R19
    Successors according to CFG: BB#5(?%)

BB#5: derived from LLVM BB %for.body9
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#4 BB#7
	%R27<def> = LSL32ri %R26, 2, %STATUS<imp-def,dead>
	%R27<def> = ADDrr_r32 %R21, %R27<kill>, %STATUS<imp-def,dead>
	%R27<def> = LDRf32 %R27<kill>, 0; mem:Volatile LD4[%add.ptr10](tbaa=!2)
	%R32<def> = MOVi32rr %R17
	%R34<def> = MOVi32rr %R25
	%R33<def> = MOVi32rr %R19
    Successors according to CFG: BB#6(?%)

BB#6: derived from LLVM BB %for.body13
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26 %R27 %R32 %R33 %R34
    Predecessors according to CFG: BB#5 BB#6
	%R37<def> = LDRf32 %R34, -8; mem:Volatile LD4[%scevgep8](tbaa=!2)
	%R35<def> = ADDri_r32 %R32, 16, %STATUS<imp-def,dead>
	%R36<def> = ADDri_r32 %R34, 16, %STATUS<imp-def,dead>
	%R38<def> = LDRf32 %R34, -4; mem:Volatile LD4[%scevgep9](tbaa=!2)
	%R33<def> = ADDri_r32 %R33<kill>, 4, %STATUS<imp-def,dead>
	%R39<def> = LDRf32 %R34, 0; mem:Volatile LD4[%lsr.iv5](tbaa=!2)
	%R40<def> = LDRf32 %R34<kill>, 4; mem:Volatile LD4[%scevgep7](tbaa=!2)
	%D21<def> = LDRf64 %R32, -8; mem:LD4[%scevgep17](tbaa=!2) LD4[%scevgep15](tbaa=!2)
	%R34<def> = LDRi32_r32 %FP, -4; mem:LD4[FixedStack2]
	GID %CONFIG<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %R34<kill>
	GIE %CONFIG<imp-def,dead>
	%R43<def,tied1> = FMADDrr_r32 %R43<tied0>, %R27, %R37<kill>, %STATUS<imp-def,dead>, %D21<imp-use,kill>, %D21<imp-def>
	%R42<def,tied1> = FMADDrr_r32 %R42<tied0>, %R27, %R38<kill>, %STATUS<imp-def,dead>, %D21<imp-use,kill>, %D21<imp-def>
	%R44<def> = MOVi32rr %R43, %D22<imp-def>
	%R45<def> = MOVi32rr %R42, %D21<imp-use,kill>, %D22<imp-use,kill>, %D22<imp-def>
	STRf64 %D22<kill>, %R32, -8; mem:ST4[%scevgep17](tbaa=!2) ST4[%scevgep15](tbaa=!2)
	%R34<def> = LDRf32 %R32, 0; mem:LD4[%lsr.iv1214](tbaa=!2)
	%R34<def,tied1> = FMADDrr_r32 %R34<kill,tied0>, %R27, %R39<kill>, %STATUS<imp-def,dead>
	STRf32 %R34<kill>, %R32, 0; mem:ST4[%lsr.iv1214](tbaa=!2)
	%R37<def> = LDRf32 %R32, 4; mem:LD4[%scevgep16](tbaa=!2)
	%R37<def,tied1> = FMADDrr_r32 %R37<kill,tied0>, %R27, %R40<kill>, %STATUS<imp-def,dead>
	%R34<def,dead> = CMPri_r32 %R33, 8, %STATUS<imp-def>
	STRf32 %R37<kill>, %R32<kill>, 4; mem:ST4[%scevgep16](tbaa=!2)
	%R32<def> = MOVi32rr %R35<kill>
	%R34<def> = MOVi32rr %R36<kill>
	BCC <BB#6>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#6(0x7c000000 / 0x80000000 = 96.88%) BB#7(0x04000000 / 0x80000000 = 3.12%)

BB#7: derived from LLVM BB %for.end60
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#6
	%R25<def> = ADDrr_r32 %R25<kill>, %IP, %STATUS<imp-def,dead>
	%R26<def> = ADDri_r32 %R26<kill>, 1, %STATUS<imp-def,dead>
	%R27<def,dead> = CMPrr_r32 %R26, %R3, %STATUS<imp-def>
	BCC <BB#5>, 1, %STATUS<imp-use>
    Successors according to CFG: BB#8(0x04000000 / 0x80000000 = 3.12%) BB#5(0x7c000000 / 0x80000000 = 96.88%)

BB#8: derived from LLVM BB %for.cond64.preheader
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#7
	%R25<def> = MOVi32rr %R22
	%R26<def> = MOVi32rr %R19
    Successors according to CFG: BB#9(?%)

BB#9: derived from LLVM BB %for.body66
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#8 BB#9
	%R27<def> = ADDrr_r32 %R16, %R26, %STATUS<imp-def,dead>
	%R33<def> = LDRf32 %R27<kill>, 0; mem:LD4[%sunkaddr30](tbaa=!2)
	%R27<def> = ADDri_r32 %R25, 4, %STATUS<imp-def,dead>
	%R26<def> = ADDri_r32 %R26<kill>, 4, %STATUS<imp-def,dead>
	%R34<def> = LDRf32 %R25, 0; mem:Volatile LD4[%lsr.iv24](tbaa=!2)
	%R32<def> = LDRi32_r32 %FP, -4; mem:LD4[FixedStack2]
	GID %CONFIG<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %R32<kill>
	GIE %CONFIG<imp-def,dead>
	%R33<def> = FADDrr_r32 %R33<kill>, %R34<kill>, %STATUS<imp-def,dead>
	%R32<def,dead> = CMPri_r32 %R26, 32, %STATUS<imp-def>
	STRf32 %R33<kill>, %R25<kill>, 0; mem:Volatile ST4[%lsr.iv24](tbaa=!2)
	%R25<def> = MOVi32rr %R27<kill>
	BCC <BB#9>, 1, %STATUS<imp-use>
    Successors according to CFG: BB#10(0x04000000 / 0x80000000 = 3.12%) BB#9(0x7c000000 / 0x80000000 = 96.88%)

BB#10: derived from LLVM BB %for.end75
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#9
	%R22<def> = ADDri_r32 %R22<kill>, 32, %STATUS<imp-def,dead>
	%R23<def> = ADDri_r32 %R23<kill>, 32, %STATUS<imp-def,dead>
	%R24<def> = ADDri_r32 %R24<kill>, 8, %STATUS<imp-def,dead>
	%R25<def,dead> = CMPrr_r32 %R24, %R3, %STATUS<imp-def>
	BCC <BB#11>, 7, %STATUS<imp-use>
    Successors according to CFG: BB#4(0x7c000000 / 0x80000000 = 96.88%) BB#11(0x04000000 / 0x80000000 = 3.12%)

BB#11: derived from LLVM BB %for.end78
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20
    Predecessors according to CFG: BB#10
	%R2<def> = ADDrr_r32 %R2<kill>, %IP, %STATUS<imp-def,dead>
	%R20<def> = ADDri_r32 %R20<kill>, 1, %STATUS<imp-def,dead>
	%R21<def,dead> = CMPrr_r32 %R20, %R3, %STATUS<imp-def>
	BCC <BB#3>, 1, %STATUS<imp-use>
    Successors according to CFG: BB#12(0x04000000 / 0x80000000 = 3.12%) BB#3(0x7c000000 / 0x80000000 = 96.88%)

BB#12: derived from LLVM BB %for.end81
    Predecessors according to CFG: BB#1 BB#11
	%R0<def> = LDRi32_r32 %FP, -44; mem:LD4[FixedStack1]
	GID
	%CONFIG<def> = MOVTS32_core %R0<kill>
	GIE %CONFIG<imp-use,kill>
	%LR<def> = LDRi64 %SP, 48; flags: FrameSetup
	%SP<def> = ADDri_r32 %SP, 48, %STATUS<imp-def>
	JR32 %LR

# End machine code for function matmac.


TryTailMergeBlocks: BB#3, BB#10
  with successor BB#4
  which has fall-through from BB#3
Looking for common tails of at least 3 instructions

<----------------->
Analyzing block 10
BB#10: derived from LLVM BB %for.end75
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#9
	%R22<def> = ADDri_r32 %R22<kill>, 32, %STATUS<imp-def,dead>
	%R23<def> = ADDri_r32 %R23<kill>, 32, %STATUS<imp-def,dead>
	%R24<def> = ADDri_r32 %R24<kill>, 8, %STATUS<imp-def,dead>
	%R25<def,dead> = CMPrr_r32 %R24, %R3, %STATUS<imp-def>
	BCC <BB#11>, 7, %STATUS<imp-use>
    Successors according to CFG: BB#4(0x7c000000 / 0x80000000 = 96.88%) BB#11(0x04000000 / 0x80000000 = 3.12%)

<----------------->
Removing branches out of BB#10
# Machine code for function matmac: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=32, align=8, at location [SP-40]
  fi#1: size=4, align=4, at location [SP-44]
  fi#2: size=4, align=4, at location [SP-4]
  fi#3: size=4, align=8, at location [SP-8]
Function Live Ins: %R0, %R1, %R2, %R3

BB#0: 
    Live Ins: %R0 %R1 %R2 %R3
	%SP<def,tied2> = STRi64_pmd %LR, %SP<tied0>, -48; flags: FrameSetup
	%FP<def> = ADDri_r32 %SP, 48, %STATUS<imp-def>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	GID %CONFIG<imp-def>
	%R19<def> = MOVFS32_core %CONFIG, %D9<imp-def>
	STRi32_r32 %R19, %FP, -44; mem:ST4[FixedStack1]
	%IP<def> = MOVi32ri 65535
	%IP<def,tied1> = MOVTi32ri %IP<kill,tied0>, 65521
	%R18<def> = ANDrr_r32 %R19, %IP<kill>, %STATUS<imp-def>, %D9<imp-use,kill>, %D9<imp-def>
	%R19<def,tied1> = MOVTi32ri %R19<tied0>, 72, %D9<imp-use,kill>, %D9<imp-def>
	STRi64 %D9<kill>, %FP, -8; mem:ST4[FixedStack3] ST4[FixedStack2]
	GIE %CONFIG<imp-use,kill>
    Successors according to CFG: BB#1(?%)

BB#1: derived from LLVM BB %entry
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#0
	%IP<def,dead> = CMPri_r32 %R3, 1, %STATUS<imp-def>
	BCC <BB#12>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#2(0x50000000 / 0x80000000 = 62.50%) BB#12(0x30000000 / 0x80000000 = 37.50%)

BB#2: derived from LLVM BB %for.body3.lr.ph.preheader
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#1
	%IP<def> = LSL32ri %R3, 2, %STATUS<imp-def,dead>
	%R1<def> = ADDri_r32 %R1<kill>, 8, %STATUS<imp-def,dead>
	%R16<def> = MOViPTR %FP, -40
	%R17<def> = ADDri_r32 %R16, 8, %STATUS<imp-def,dead>
	%R19<def> = MOVi32ri 0, %D9<imp-def>
	%R20<def> = MOVi32rr %R19
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %for.body3.lr.ph
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20
    Predecessors according to CFG: BB#2 BB#11
	%R21<def> = LDRi32_r32 %FP, -8; mem:LD4[FixedStack3]
	GID %CONFIG<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %R21<kill>
	GIE %CONFIG<imp-def,dead>
	%R21<def> = IMULrr_r32 %R20, %R3, %STATUS<imp-def,dead>
	%R21<def> = LSL32ri %R21<kill>, 2, %STATUS<imp-def,dead>
	%R21<def> = ADDrr_r32 %R0, %R21<kill>, %STATUS<imp-def,dead>
	%R22<def> = MOVi32rr %R2
	%R23<def> = MOVi32rr %R1
	%R24<def> = MOVi32rr %R19
    Successors according to CFG: BB#4(?%)

BB#4: derived from LLVM BB %for.body9.preheader
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#3 BB#10
	%R18<def> = MOVi32rr %R19, %D9<imp-use,kill>, %D9<imp-def>
	STRi64 %D9, %FP, -16; mem:ST8[%1+24]
	STRi64 %D9, %FP, -24; mem:ST8[%1+16]
	STRi64 %D9, %FP, -32; mem:ST8[%1+8]
	STRi64 %D9, %FP, -40; mem:ST8[%1]
	%R25<def> = MOVi32rr %R23
	%R26<def> = MOVi32rr %R19
    Successors according to CFG: BB#5(?%)

BB#5: derived from LLVM BB %for.body9
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#4 BB#7
	%R27<def> = LSL32ri %R26, 2, %STATUS<imp-def,dead>
	%R27<def> = ADDrr_r32 %R21, %R27<kill>, %STATUS<imp-def,dead>
	%R27<def> = LDRf32 %R27<kill>, 0; mem:Volatile LD4[%add.ptr10](tbaa=!2)
	%R32<def> = MOVi32rr %R17
	%R34<def> = MOVi32rr %R25
	%R33<def> = MOVi32rr %R19
    Successors according to CFG: BB#6(?%)

BB#6: derived from LLVM BB %for.body13
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26 %R27 %R32 %R33 %R34
    Predecessors according to CFG: BB#5 BB#6
	%R37<def> = LDRf32 %R34, -8; mem:Volatile LD4[%scevgep8](tbaa=!2)
	%R35<def> = ADDri_r32 %R32, 16, %STATUS<imp-def,dead>
	%R36<def> = ADDri_r32 %R34, 16, %STATUS<imp-def,dead>
	%R38<def> = LDRf32 %R34, -4; mem:Volatile LD4[%scevgep9](tbaa=!2)
	%R33<def> = ADDri_r32 %R33<kill>, 4, %STATUS<imp-def,dead>
	%R39<def> = LDRf32 %R34, 0; mem:Volatile LD4[%lsr.iv5](tbaa=!2)
	%R40<def> = LDRf32 %R34<kill>, 4; mem:Volatile LD4[%scevgep7](tbaa=!2)
	%D21<def> = LDRf64 %R32, -8; mem:LD4[%scevgep17](tbaa=!2) LD4[%scevgep15](tbaa=!2)
	%R34<def> = LDRi32_r32 %FP, -4; mem:LD4[FixedStack2]
	GID %CONFIG<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %R34<kill>
	GIE %CONFIG<imp-def,dead>
	%R43<def,tied1> = FMADDrr_r32 %R43<tied0>, %R27, %R37<kill>, %STATUS<imp-def,dead>, %D21<imp-use,kill>, %D21<imp-def>
	%R42<def,tied1> = FMADDrr_r32 %R42<tied0>, %R27, %R38<kill>, %STATUS<imp-def,dead>, %D21<imp-use,kill>, %D21<imp-def>
	%R44<def> = MOVi32rr %R43, %D22<imp-def>
	%R45<def> = MOVi32rr %R42, %D21<imp-use,kill>, %D22<imp-use,kill>, %D22<imp-def>
	STRf64 %D22<kill>, %R32, -8; mem:ST4[%scevgep17](tbaa=!2) ST4[%scevgep15](tbaa=!2)
	%R34<def> = LDRf32 %R32, 0; mem:LD4[%lsr.iv1214](tbaa=!2)
	%R34<def,tied1> = FMADDrr_r32 %R34<kill,tied0>, %R27, %R39<kill>, %STATUS<imp-def,dead>
	STRf32 %R34<kill>, %R32, 0; mem:ST4[%lsr.iv1214](tbaa=!2)
	%R37<def> = LDRf32 %R32, 4; mem:LD4[%scevgep16](tbaa=!2)
	%R37<def,tied1> = FMADDrr_r32 %R37<kill,tied0>, %R27, %R40<kill>, %STATUS<imp-def,dead>
	%R34<def,dead> = CMPri_r32 %R33, 8, %STATUS<imp-def>
	STRf32 %R37<kill>, %R32<kill>, 4; mem:ST4[%scevgep16](tbaa=!2)
	%R32<def> = MOVi32rr %R35<kill>
	%R34<def> = MOVi32rr %R36<kill>
	BCC <BB#6>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#6(0x7c000000 / 0x80000000 = 96.88%) BB#7(0x04000000 / 0x80000000 = 3.12%)

BB#7: derived from LLVM BB %for.end60
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#6
	%R25<def> = ADDrr_r32 %R25<kill>, %IP, %STATUS<imp-def,dead>
	%R26<def> = ADDri_r32 %R26<kill>, 1, %STATUS<imp-def,dead>
	%R27<def,dead> = CMPrr_r32 %R26, %R3, %STATUS<imp-def>
	BCC <BB#5>, 1, %STATUS<imp-use>
    Successors according to CFG: BB#8(0x04000000 / 0x80000000 = 3.12%) BB#5(0x7c000000 / 0x80000000 = 96.88%)

BB#8: derived from LLVM BB %for.cond64.preheader
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#7
	%R25<def> = MOVi32rr %R22
	%R26<def> = MOVi32rr %R19
    Successors according to CFG: BB#9(?%)

BB#9: derived from LLVM BB %for.body66
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#8 BB#9
	%R27<def> = ADDrr_r32 %R16, %R26, %STATUS<imp-def,dead>
	%R33<def> = LDRf32 %R27<kill>, 0; mem:LD4[%sunkaddr30](tbaa=!2)
	%R27<def> = ADDri_r32 %R25, 4, %STATUS<imp-def,dead>
	%R26<def> = ADDri_r32 %R26<kill>, 4, %STATUS<imp-def,dead>
	%R34<def> = LDRf32 %R25, 0; mem:Volatile LD4[%lsr.iv24](tbaa=!2)
	%R32<def> = LDRi32_r32 %FP, -4; mem:LD4[FixedStack2]
	GID %CONFIG<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %R32<kill>
	GIE %CONFIG<imp-def,dead>
	%R33<def> = FADDrr_r32 %R33<kill>, %R34<kill>, %STATUS<imp-def,dead>
	%R32<def,dead> = CMPri_r32 %R26, 32, %STATUS<imp-def>
	STRf32 %R33<kill>, %R25<kill>, 0; mem:Volatile ST4[%lsr.iv24](tbaa=!2)
	%R25<def> = MOVi32rr %R27<kill>
	BCC <BB#9>, 1, %STATUS<imp-use>
    Successors according to CFG: BB#10(0x04000000 / 0x80000000 = 3.12%) BB#9(0x7c000000 / 0x80000000 = 96.88%)

BB#10: derived from LLVM BB %for.end75
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#9
	%R22<def> = ADDri_r32 %R22<kill>, 32, %STATUS<imp-def,dead>
	%R23<def> = ADDri_r32 %R23<kill>, 32, %STATUS<imp-def,dead>
	%R24<def> = ADDri_r32 %R24<kill>, 8, %STATUS<imp-def,dead>
	%R25<def,dead> = CMPrr_r32 %R24, %R3, %STATUS<imp-def>
    Successors according to CFG: BB#4(0x7c000000 / 0x80000000 = 96.88%) BB#11(0x04000000 / 0x80000000 = 3.12%)

BB#11: derived from LLVM BB %for.end78
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20
    Predecessors according to CFG: BB#10
	%R2<def> = ADDrr_r32 %R2<kill>, %IP, %STATUS<imp-def,dead>
	%R20<def> = ADDri_r32 %R20<kill>, 1, %STATUS<imp-def,dead>
	%R21<def,dead> = CMPrr_r32 %R20, %R3, %STATUS<imp-def>
	BCC <BB#3>, 1, %STATUS<imp-use>
    Successors according to CFG: BB#12(0x04000000 / 0x80000000 = 3.12%) BB#3(0x7c000000 / 0x80000000 = 96.88%)

BB#12: derived from LLVM BB %for.end81
    Predecessors according to CFG: BB#1 BB#11
	%R0<def> = LDRi32_r32 %FP, -44; mem:LD4[FixedStack1]
	GID
	%CONFIG<def> = MOVTS32_core %R0<kill>
	GIE %CONFIG<imp-use,kill>
	%LR<def> = LDRi64 %SP, 48; flags: FrameSetup
	%SP<def> = ADDri_r32 %SP, 48, %STATUS<imp-def>
	JR32 %LR

# End machine code for function matmac.


<----------------->
Inserting branch into BB#10
# Machine code for function matmac: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=32, align=8, at location [SP-40]
  fi#1: size=4, align=4, at location [SP-44]
  fi#2: size=4, align=4, at location [SP-4]
  fi#3: size=4, align=8, at location [SP-8]
Function Live Ins: %R0, %R1, %R2, %R3

BB#0: 
    Live Ins: %R0 %R1 %R2 %R3
	%SP<def,tied2> = STRi64_pmd %LR, %SP<tied0>, -48; flags: FrameSetup
	%FP<def> = ADDri_r32 %SP, 48, %STATUS<imp-def>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	GID %CONFIG<imp-def>
	%R19<def> = MOVFS32_core %CONFIG, %D9<imp-def>
	STRi32_r32 %R19, %FP, -44; mem:ST4[FixedStack1]
	%IP<def> = MOVi32ri 65535
	%IP<def,tied1> = MOVTi32ri %IP<kill,tied0>, 65521
	%R18<def> = ANDrr_r32 %R19, %IP<kill>, %STATUS<imp-def>, %D9<imp-use,kill>, %D9<imp-def>
	%R19<def,tied1> = MOVTi32ri %R19<tied0>, 72, %D9<imp-use,kill>, %D9<imp-def>
	STRi64 %D9<kill>, %FP, -8; mem:ST4[FixedStack3] ST4[FixedStack2]
	GIE %CONFIG<imp-use,kill>
    Successors according to CFG: BB#1(?%)

BB#1: derived from LLVM BB %entry
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#0
	%IP<def,dead> = CMPri_r32 %R3, 1, %STATUS<imp-def>
	BCC <BB#12>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#2(0x50000000 / 0x80000000 = 62.50%) BB#12(0x30000000 / 0x80000000 = 37.50%)

BB#2: derived from LLVM BB %for.body3.lr.ph.preheader
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#1
	%IP<def> = LSL32ri %R3, 2, %STATUS<imp-def,dead>
	%R1<def> = ADDri_r32 %R1<kill>, 8, %STATUS<imp-def,dead>
	%R16<def> = MOViPTR %FP, -40
	%R17<def> = ADDri_r32 %R16, 8, %STATUS<imp-def,dead>
	%R19<def> = MOVi32ri 0, %D9<imp-def>
	%R20<def> = MOVi32rr %R19
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %for.body3.lr.ph
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20
    Predecessors according to CFG: BB#2 BB#11
	%R21<def> = LDRi32_r32 %FP, -8; mem:LD4[FixedStack3]
	GID %CONFIG<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %R21<kill>
	GIE %CONFIG<imp-def,dead>
	%R21<def> = IMULrr_r32 %R20, %R3, %STATUS<imp-def,dead>
	%R21<def> = LSL32ri %R21<kill>, 2, %STATUS<imp-def,dead>
	%R21<def> = ADDrr_r32 %R0, %R21<kill>, %STATUS<imp-def,dead>
	%R22<def> = MOVi32rr %R2
	%R23<def> = MOVi32rr %R1
	%R24<def> = MOVi32rr %R19
    Successors according to CFG: BB#4(?%)

BB#4: derived from LLVM BB %for.body9.preheader
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#3 BB#10
	%R18<def> = MOVi32rr %R19, %D9<imp-use,kill>, %D9<imp-def>
	STRi64 %D9, %FP, -16; mem:ST8[%1+24]
	STRi64 %D9, %FP, -24; mem:ST8[%1+16]
	STRi64 %D9, %FP, -32; mem:ST8[%1+8]
	STRi64 %D9, %FP, -40; mem:ST8[%1]
	%R25<def> = MOVi32rr %R23
	%R26<def> = MOVi32rr %R19
    Successors according to CFG: BB#5(?%)

BB#5: derived from LLVM BB %for.body9
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#4 BB#7
	%R27<def> = LSL32ri %R26, 2, %STATUS<imp-def,dead>
	%R27<def> = ADDrr_r32 %R21, %R27<kill>, %STATUS<imp-def,dead>
	%R27<def> = LDRf32 %R27<kill>, 0; mem:Volatile LD4[%add.ptr10](tbaa=!2)
	%R32<def> = MOVi32rr %R17
	%R34<def> = MOVi32rr %R25
	%R33<def> = MOVi32rr %R19
    Successors according to CFG: BB#6(?%)

BB#6: derived from LLVM BB %for.body13
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26 %R27 %R32 %R33 %R34
    Predecessors according to CFG: BB#5 BB#6
	%R37<def> = LDRf32 %R34, -8; mem:Volatile LD4[%scevgep8](tbaa=!2)
	%R35<def> = ADDri_r32 %R32, 16, %STATUS<imp-def,dead>
	%R36<def> = ADDri_r32 %R34, 16, %STATUS<imp-def,dead>
	%R38<def> = LDRf32 %R34, -4; mem:Volatile LD4[%scevgep9](tbaa=!2)
	%R33<def> = ADDri_r32 %R33<kill>, 4, %STATUS<imp-def,dead>
	%R39<def> = LDRf32 %R34, 0; mem:Volatile LD4[%lsr.iv5](tbaa=!2)
	%R40<def> = LDRf32 %R34<kill>, 4; mem:Volatile LD4[%scevgep7](tbaa=!2)
	%D21<def> = LDRf64 %R32, -8; mem:LD4[%scevgep17](tbaa=!2) LD4[%scevgep15](tbaa=!2)
	%R34<def> = LDRi32_r32 %FP, -4; mem:LD4[FixedStack2]
	GID %CONFIG<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %R34<kill>
	GIE %CONFIG<imp-def,dead>
	%R43<def,tied1> = FMADDrr_r32 %R43<tied0>, %R27, %R37<kill>, %STATUS<imp-def,dead>, %D21<imp-use,kill>, %D21<imp-def>
	%R42<def,tied1> = FMADDrr_r32 %R42<tied0>, %R27, %R38<kill>, %STATUS<imp-def,dead>, %D21<imp-use,kill>, %D21<imp-def>
	%R44<def> = MOVi32rr %R43, %D22<imp-def>
	%R45<def> = MOVi32rr %R42, %D21<imp-use,kill>, %D22<imp-use,kill>, %D22<imp-def>
	STRf64 %D22<kill>, %R32, -8; mem:ST4[%scevgep17](tbaa=!2) ST4[%scevgep15](tbaa=!2)
	%R34<def> = LDRf32 %R32, 0; mem:LD4[%lsr.iv1214](tbaa=!2)
	%R34<def,tied1> = FMADDrr_r32 %R34<kill,tied0>, %R27, %R39<kill>, %STATUS<imp-def,dead>
	STRf32 %R34<kill>, %R32, 0; mem:ST4[%lsr.iv1214](tbaa=!2)
	%R37<def> = LDRf32 %R32, 4; mem:LD4[%scevgep16](tbaa=!2)
	%R37<def,tied1> = FMADDrr_r32 %R37<kill,tied0>, %R27, %R40<kill>, %STATUS<imp-def,dead>
	%R34<def,dead> = CMPri_r32 %R33, 8, %STATUS<imp-def>
	STRf32 %R37<kill>, %R32<kill>, 4; mem:ST4[%scevgep16](tbaa=!2)
	%R32<def> = MOVi32rr %R35<kill>
	%R34<def> = MOVi32rr %R36<kill>
	BCC <BB#6>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#6(0x7c000000 / 0x80000000 = 96.88%) BB#7(0x04000000 / 0x80000000 = 3.12%)

BB#7: derived from LLVM BB %for.end60
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#6
	%R25<def> = ADDrr_r32 %R25<kill>, %IP, %STATUS<imp-def,dead>
	%R26<def> = ADDri_r32 %R26<kill>, 1, %STATUS<imp-def,dead>
	%R27<def,dead> = CMPrr_r32 %R26, %R3, %STATUS<imp-def>
	BCC <BB#5>, 1, %STATUS<imp-use>
    Successors according to CFG: BB#8(0x04000000 / 0x80000000 = 3.12%) BB#5(0x7c000000 / 0x80000000 = 96.88%)

BB#8: derived from LLVM BB %for.cond64.preheader
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#7
	%R25<def> = MOVi32rr %R22
	%R26<def> = MOVi32rr %R19
    Successors according to CFG: BB#9(?%)

BB#9: derived from LLVM BB %for.body66
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#8 BB#9
	%R27<def> = ADDrr_r32 %R16, %R26, %STATUS<imp-def,dead>
	%R33<def> = LDRf32 %R27<kill>, 0; mem:LD4[%sunkaddr30](tbaa=!2)
	%R27<def> = ADDri_r32 %R25, 4, %STATUS<imp-def,dead>
	%R26<def> = ADDri_r32 %R26<kill>, 4, %STATUS<imp-def,dead>
	%R34<def> = LDRf32 %R25, 0; mem:Volatile LD4[%lsr.iv24](tbaa=!2)
	%R32<def> = LDRi32_r32 %FP, -4; mem:LD4[FixedStack2]
	GID %CONFIG<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %R32<kill>
	GIE %CONFIG<imp-def,dead>
	%R33<def> = FADDrr_r32 %R33<kill>, %R34<kill>, %STATUS<imp-def,dead>
	%R32<def,dead> = CMPri_r32 %R26, 32, %STATUS<imp-def>
	STRf32 %R33<kill>, %R25<kill>, 0; mem:Volatile ST4[%lsr.iv24](tbaa=!2)
	%R25<def> = MOVi32rr %R27<kill>
	BCC <BB#9>, 1, %STATUS<imp-use>
    Successors according to CFG: BB#10(0x04000000 / 0x80000000 = 3.12%) BB#9(0x7c000000 / 0x80000000 = 96.88%)

BB#10: derived from LLVM BB %for.end75
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#9
	%R22<def> = ADDri_r32 %R22<kill>, 32, %STATUS<imp-def,dead>
	%R23<def> = ADDri_r32 %R23<kill>, 32, %STATUS<imp-def,dead>
	%R24<def> = ADDri_r32 %R24<kill>, 8, %STATUS<imp-def,dead>
	%R25<def,dead> = CMPrr_r32 %R24, %R3, %STATUS<imp-def>
	BCC <BB#4>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#4(0x7c000000 / 0x80000000 = 96.88%) BB#11(0x04000000 / 0x80000000 = 3.12%)

BB#11: derived from LLVM BB %for.end78
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20
    Predecessors according to CFG: BB#10
	%R2<def> = ADDrr_r32 %R2<kill>, %IP, %STATUS<imp-def,dead>
	%R20<def> = ADDri_r32 %R20<kill>, 1, %STATUS<imp-def,dead>
	%R21<def,dead> = CMPrr_r32 %R20, %R3, %STATUS<imp-def>
	BCC <BB#3>, 1, %STATUS<imp-use>
    Successors according to CFG: BB#12(0x04000000 / 0x80000000 = 3.12%) BB#3(0x7c000000 / 0x80000000 = 96.88%)

BB#12: derived from LLVM BB %for.end81
    Predecessors according to CFG: BB#1 BB#11
	%R0<def> = LDRi32_r32 %FP, -44; mem:LD4[FixedStack1]
	GID
	%CONFIG<def> = MOVTS32_core %R0<kill>
	GIE %CONFIG<imp-use,kill>
	%LR<def> = LDRi64 %SP, 48; flags: FrameSetup
	%SP<def> = ADDri_r32 %SP, 48, %STATUS<imp-def>
	JR32 %LR

# End machine code for function matmac.


<----------------->
Analyzing block 4
BB#4: derived from LLVM BB %for.body9.preheader
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#3 BB#10
	%R18<def> = MOVi32rr %R19, %D9<imp-use,kill>, %D9<imp-def>
	STRi64 %D9, %FP, -16; mem:ST8[%1+24]
	STRi64 %D9, %FP, -24; mem:ST8[%1+16]
	STRi64 %D9, %FP, -32; mem:ST8[%1+8]
	STRi64 %D9, %FP, -40; mem:ST8[%1]
	%R25<def> = MOVi32rr %R23
	%R26<def> = MOVi32rr %R19
    Successors according to CFG: BB#5(?%)

<----------------->
Analyzing block 7
BB#7: derived from LLVM BB %for.end60
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#6
	%R25<def> = ADDrr_r32 %R25<kill>, %IP, %STATUS<imp-def,dead>
	%R26<def> = ADDri_r32 %R26<kill>, 1, %STATUS<imp-def,dead>
	%R27<def,dead> = CMPrr_r32 %R26, %R3, %STATUS<imp-def>
	BCC <BB#5>, 1, %STATUS<imp-use>
    Successors according to CFG: BB#8(0x04000000 / 0x80000000 = 3.12%) BB#5(0x7c000000 / 0x80000000 = 96.88%)

<----------------->
Removing branches out of BB#7
# Machine code for function matmac: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=32, align=8, at location [SP-40]
  fi#1: size=4, align=4, at location [SP-44]
  fi#2: size=4, align=4, at location [SP-4]
  fi#3: size=4, align=8, at location [SP-8]
Function Live Ins: %R0, %R1, %R2, %R3

BB#0: 
    Live Ins: %R0 %R1 %R2 %R3
	%SP<def,tied2> = STRi64_pmd %LR, %SP<tied0>, -48; flags: FrameSetup
	%FP<def> = ADDri_r32 %SP, 48, %STATUS<imp-def>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	GID %CONFIG<imp-def>
	%R19<def> = MOVFS32_core %CONFIG, %D9<imp-def>
	STRi32_r32 %R19, %FP, -44; mem:ST4[FixedStack1]
	%IP<def> = MOVi32ri 65535
	%IP<def,tied1> = MOVTi32ri %IP<kill,tied0>, 65521
	%R18<def> = ANDrr_r32 %R19, %IP<kill>, %STATUS<imp-def>, %D9<imp-use,kill>, %D9<imp-def>
	%R19<def,tied1> = MOVTi32ri %R19<tied0>, 72, %D9<imp-use,kill>, %D9<imp-def>
	STRi64 %D9<kill>, %FP, -8; mem:ST4[FixedStack3] ST4[FixedStack2]
	GIE %CONFIG<imp-use,kill>
    Successors according to CFG: BB#1(?%)

BB#1: derived from LLVM BB %entry
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#0
	%IP<def,dead> = CMPri_r32 %R3, 1, %STATUS<imp-def>
	BCC <BB#12>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#2(0x50000000 / 0x80000000 = 62.50%) BB#12(0x30000000 / 0x80000000 = 37.50%)

BB#2: derived from LLVM BB %for.body3.lr.ph.preheader
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#1
	%IP<def> = LSL32ri %R3, 2, %STATUS<imp-def,dead>
	%R1<def> = ADDri_r32 %R1<kill>, 8, %STATUS<imp-def,dead>
	%R16<def> = MOViPTR %FP, -40
	%R17<def> = ADDri_r32 %R16, 8, %STATUS<imp-def,dead>
	%R19<def> = MOVi32ri 0, %D9<imp-def>
	%R20<def> = MOVi32rr %R19
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %for.body3.lr.ph
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20
    Predecessors according to CFG: BB#2 BB#11
	%R21<def> = LDRi32_r32 %FP, -8; mem:LD4[FixedStack3]
	GID %CONFIG<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %R21<kill>
	GIE %CONFIG<imp-def,dead>
	%R21<def> = IMULrr_r32 %R20, %R3, %STATUS<imp-def,dead>
	%R21<def> = LSL32ri %R21<kill>, 2, %STATUS<imp-def,dead>
	%R21<def> = ADDrr_r32 %R0, %R21<kill>, %STATUS<imp-def,dead>
	%R22<def> = MOVi32rr %R2
	%R23<def> = MOVi32rr %R1
	%R24<def> = MOVi32rr %R19
    Successors according to CFG: BB#4(?%)

BB#4: derived from LLVM BB %for.body9.preheader
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#3 BB#10
	%R18<def> = MOVi32rr %R19, %D9<imp-use,kill>, %D9<imp-def>
	STRi64 %D9, %FP, -16; mem:ST8[%1+24]
	STRi64 %D9, %FP, -24; mem:ST8[%1+16]
	STRi64 %D9, %FP, -32; mem:ST8[%1+8]
	STRi64 %D9, %FP, -40; mem:ST8[%1]
	%R25<def> = MOVi32rr %R23
	%R26<def> = MOVi32rr %R19
    Successors according to CFG: BB#5(?%)

BB#5: derived from LLVM BB %for.body9
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#4 BB#7
	%R27<def> = LSL32ri %R26, 2, %STATUS<imp-def,dead>
	%R27<def> = ADDrr_r32 %R21, %R27<kill>, %STATUS<imp-def,dead>
	%R27<def> = LDRf32 %R27<kill>, 0; mem:Volatile LD4[%add.ptr10](tbaa=!2)
	%R32<def> = MOVi32rr %R17
	%R34<def> = MOVi32rr %R25
	%R33<def> = MOVi32rr %R19
    Successors according to CFG: BB#6(?%)

BB#6: derived from LLVM BB %for.body13
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26 %R27 %R32 %R33 %R34
    Predecessors according to CFG: BB#5 BB#6
	%R37<def> = LDRf32 %R34, -8; mem:Volatile LD4[%scevgep8](tbaa=!2)
	%R35<def> = ADDri_r32 %R32, 16, %STATUS<imp-def,dead>
	%R36<def> = ADDri_r32 %R34, 16, %STATUS<imp-def,dead>
	%R38<def> = LDRf32 %R34, -4; mem:Volatile LD4[%scevgep9](tbaa=!2)
	%R33<def> = ADDri_r32 %R33<kill>, 4, %STATUS<imp-def,dead>
	%R39<def> = LDRf32 %R34, 0; mem:Volatile LD4[%lsr.iv5](tbaa=!2)
	%R40<def> = LDRf32 %R34<kill>, 4; mem:Volatile LD4[%scevgep7](tbaa=!2)
	%D21<def> = LDRf64 %R32, -8; mem:LD4[%scevgep17](tbaa=!2) LD4[%scevgep15](tbaa=!2)
	%R34<def> = LDRi32_r32 %FP, -4; mem:LD4[FixedStack2]
	GID %CONFIG<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %R34<kill>
	GIE %CONFIG<imp-def,dead>
	%R43<def,tied1> = FMADDrr_r32 %R43<tied0>, %R27, %R37<kill>, %STATUS<imp-def,dead>, %D21<imp-use,kill>, %D21<imp-def>
	%R42<def,tied1> = FMADDrr_r32 %R42<tied0>, %R27, %R38<kill>, %STATUS<imp-def,dead>, %D21<imp-use,kill>, %D21<imp-def>
	%R44<def> = MOVi32rr %R43, %D22<imp-def>
	%R45<def> = MOVi32rr %R42, %D21<imp-use,kill>, %D22<imp-use,kill>, %D22<imp-def>
	STRf64 %D22<kill>, %R32, -8; mem:ST4[%scevgep17](tbaa=!2) ST4[%scevgep15](tbaa=!2)
	%R34<def> = LDRf32 %R32, 0; mem:LD4[%lsr.iv1214](tbaa=!2)
	%R34<def,tied1> = FMADDrr_r32 %R34<kill,tied0>, %R27, %R39<kill>, %STATUS<imp-def,dead>
	STRf32 %R34<kill>, %R32, 0; mem:ST4[%lsr.iv1214](tbaa=!2)
	%R37<def> = LDRf32 %R32, 4; mem:LD4[%scevgep16](tbaa=!2)
	%R37<def,tied1> = FMADDrr_r32 %R37<kill,tied0>, %R27, %R40<kill>, %STATUS<imp-def,dead>
	%R34<def,dead> = CMPri_r32 %R33, 8, %STATUS<imp-def>
	STRf32 %R37<kill>, %R32<kill>, 4; mem:ST4[%scevgep16](tbaa=!2)
	%R32<def> = MOVi32rr %R35<kill>
	%R34<def> = MOVi32rr %R36<kill>
	BCC <BB#6>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#6(0x7c000000 / 0x80000000 = 96.88%) BB#7(0x04000000 / 0x80000000 = 3.12%)

BB#7: derived from LLVM BB %for.end60
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#6
	%R25<def> = ADDrr_r32 %R25<kill>, %IP, %STATUS<imp-def,dead>
	%R26<def> = ADDri_r32 %R26<kill>, 1, %STATUS<imp-def,dead>
	%R27<def,dead> = CMPrr_r32 %R26, %R3, %STATUS<imp-def>
    Successors according to CFG: BB#8(0x04000000 / 0x80000000 = 3.12%) BB#5(0x7c000000 / 0x80000000 = 96.88%)

BB#8: derived from LLVM BB %for.cond64.preheader
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#7
	%R25<def> = MOVi32rr %R22
	%R26<def> = MOVi32rr %R19
    Successors according to CFG: BB#9(?%)

BB#9: derived from LLVM BB %for.body66
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#8 BB#9
	%R27<def> = ADDrr_r32 %R16, %R26, %STATUS<imp-def,dead>
	%R33<def> = LDRf32 %R27<kill>, 0; mem:LD4[%sunkaddr30](tbaa=!2)
	%R27<def> = ADDri_r32 %R25, 4, %STATUS<imp-def,dead>
	%R26<def> = ADDri_r32 %R26<kill>, 4, %STATUS<imp-def,dead>
	%R34<def> = LDRf32 %R25, 0; mem:Volatile LD4[%lsr.iv24](tbaa=!2)
	%R32<def> = LDRi32_r32 %FP, -4; mem:LD4[FixedStack2]
	GID %CONFIG<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %R32<kill>
	GIE %CONFIG<imp-def,dead>
	%R33<def> = FADDrr_r32 %R33<kill>, %R34<kill>, %STATUS<imp-def,dead>
	%R32<def,dead> = CMPri_r32 %R26, 32, %STATUS<imp-def>
	STRf32 %R33<kill>, %R25<kill>, 0; mem:Volatile ST4[%lsr.iv24](tbaa=!2)
	%R25<def> = MOVi32rr %R27<kill>
	BCC <BB#9>, 1, %STATUS<imp-use>
    Successors according to CFG: BB#10(0x04000000 / 0x80000000 = 3.12%) BB#9(0x7c000000 / 0x80000000 = 96.88%)

BB#10: derived from LLVM BB %for.end75
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#9
	%R22<def> = ADDri_r32 %R22<kill>, 32, %STATUS<imp-def,dead>
	%R23<def> = ADDri_r32 %R23<kill>, 32, %STATUS<imp-def,dead>
	%R24<def> = ADDri_r32 %R24<kill>, 8, %STATUS<imp-def,dead>
	%R25<def,dead> = CMPrr_r32 %R24, %R3, %STATUS<imp-def>
	BCC <BB#4>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#4(0x7c000000 / 0x80000000 = 96.88%) BB#11(0x04000000 / 0x80000000 = 3.12%)

BB#11: derived from LLVM BB %for.end78
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20
    Predecessors according to CFG: BB#10
	%R2<def> = ADDrr_r32 %R2<kill>, %IP, %STATUS<imp-def,dead>
	%R20<def> = ADDri_r32 %R20<kill>, 1, %STATUS<imp-def,dead>
	%R21<def,dead> = CMPrr_r32 %R20, %R3, %STATUS<imp-def>
	BCC <BB#3>, 1, %STATUS<imp-use>
    Successors according to CFG: BB#12(0x04000000 / 0x80000000 = 3.12%) BB#3(0x7c000000 / 0x80000000 = 96.88%)

BB#12: derived from LLVM BB %for.end81
    Predecessors according to CFG: BB#1 BB#11
	%R0<def> = LDRi32_r32 %FP, -44; mem:LD4[FixedStack1]
	GID
	%CONFIG<def> = MOVTS32_core %R0<kill>
	GIE %CONFIG<imp-use,kill>
	%LR<def> = LDRi64 %SP, 48; flags: FrameSetup
	%SP<def> = ADDri_r32 %SP, 48, %STATUS<imp-def>
	JR32 %LR

# End machine code for function matmac.


<----------------->
Inserting branch into BB#7
# Machine code for function matmac: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=32, align=8, at location [SP-40]
  fi#1: size=4, align=4, at location [SP-44]
  fi#2: size=4, align=4, at location [SP-4]
  fi#3: size=4, align=8, at location [SP-8]
Function Live Ins: %R0, %R1, %R2, %R3

BB#0: 
    Live Ins: %R0 %R1 %R2 %R3
	%SP<def,tied2> = STRi64_pmd %LR, %SP<tied0>, -48; flags: FrameSetup
	%FP<def> = ADDri_r32 %SP, 48, %STATUS<imp-def>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	GID %CONFIG<imp-def>
	%R19<def> = MOVFS32_core %CONFIG, %D9<imp-def>
	STRi32_r32 %R19, %FP, -44; mem:ST4[FixedStack1]
	%IP<def> = MOVi32ri 65535
	%IP<def,tied1> = MOVTi32ri %IP<kill,tied0>, 65521
	%R18<def> = ANDrr_r32 %R19, %IP<kill>, %STATUS<imp-def>, %D9<imp-use,kill>, %D9<imp-def>
	%R19<def,tied1> = MOVTi32ri %R19<tied0>, 72, %D9<imp-use,kill>, %D9<imp-def>
	STRi64 %D9<kill>, %FP, -8; mem:ST4[FixedStack3] ST4[FixedStack2]
	GIE %CONFIG<imp-use,kill>
    Successors according to CFG: BB#1(?%)

BB#1: derived from LLVM BB %entry
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#0
	%IP<def,dead> = CMPri_r32 %R3, 1, %STATUS<imp-def>
	BCC <BB#12>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#2(0x50000000 / 0x80000000 = 62.50%) BB#12(0x30000000 / 0x80000000 = 37.50%)

BB#2: derived from LLVM BB %for.body3.lr.ph.preheader
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#1
	%IP<def> = LSL32ri %R3, 2, %STATUS<imp-def,dead>
	%R1<def> = ADDri_r32 %R1<kill>, 8, %STATUS<imp-def,dead>
	%R16<def> = MOViPTR %FP, -40
	%R17<def> = ADDri_r32 %R16, 8, %STATUS<imp-def,dead>
	%R19<def> = MOVi32ri 0, %D9<imp-def>
	%R20<def> = MOVi32rr %R19
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %for.body3.lr.ph
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20
    Predecessors according to CFG: BB#2 BB#11
	%R21<def> = LDRi32_r32 %FP, -8; mem:LD4[FixedStack3]
	GID %CONFIG<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %R21<kill>
	GIE %CONFIG<imp-def,dead>
	%R21<def> = IMULrr_r32 %R20, %R3, %STATUS<imp-def,dead>
	%R21<def> = LSL32ri %R21<kill>, 2, %STATUS<imp-def,dead>
	%R21<def> = ADDrr_r32 %R0, %R21<kill>, %STATUS<imp-def,dead>
	%R22<def> = MOVi32rr %R2
	%R23<def> = MOVi32rr %R1
	%R24<def> = MOVi32rr %R19
    Successors according to CFG: BB#4(?%)

BB#4: derived from LLVM BB %for.body9.preheader
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#3 BB#10
	%R18<def> = MOVi32rr %R19, %D9<imp-use,kill>, %D9<imp-def>
	STRi64 %D9, %FP, -16; mem:ST8[%1+24]
	STRi64 %D9, %FP, -24; mem:ST8[%1+16]
	STRi64 %D9, %FP, -32; mem:ST8[%1+8]
	STRi64 %D9, %FP, -40; mem:ST8[%1]
	%R25<def> = MOVi32rr %R23
	%R26<def> = MOVi32rr %R19
    Successors according to CFG: BB#5(?%)

BB#5: derived from LLVM BB %for.body9
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#4 BB#7
	%R27<def> = LSL32ri %R26, 2, %STATUS<imp-def,dead>
	%R27<def> = ADDrr_r32 %R21, %R27<kill>, %STATUS<imp-def,dead>
	%R27<def> = LDRf32 %R27<kill>, 0; mem:Volatile LD4[%add.ptr10](tbaa=!2)
	%R32<def> = MOVi32rr %R17
	%R34<def> = MOVi32rr %R25
	%R33<def> = MOVi32rr %R19
    Successors according to CFG: BB#6(?%)

BB#6: derived from LLVM BB %for.body13
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26 %R27 %R32 %R33 %R34
    Predecessors according to CFG: BB#5 BB#6
	%R37<def> = LDRf32 %R34, -8; mem:Volatile LD4[%scevgep8](tbaa=!2)
	%R35<def> = ADDri_r32 %R32, 16, %STATUS<imp-def,dead>
	%R36<def> = ADDri_r32 %R34, 16, %STATUS<imp-def,dead>
	%R38<def> = LDRf32 %R34, -4; mem:Volatile LD4[%scevgep9](tbaa=!2)
	%R33<def> = ADDri_r32 %R33<kill>, 4, %STATUS<imp-def,dead>
	%R39<def> = LDRf32 %R34, 0; mem:Volatile LD4[%lsr.iv5](tbaa=!2)
	%R40<def> = LDRf32 %R34<kill>, 4; mem:Volatile LD4[%scevgep7](tbaa=!2)
	%D21<def> = LDRf64 %R32, -8; mem:LD4[%scevgep17](tbaa=!2) LD4[%scevgep15](tbaa=!2)
	%R34<def> = LDRi32_r32 %FP, -4; mem:LD4[FixedStack2]
	GID %CONFIG<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %R34<kill>
	GIE %CONFIG<imp-def,dead>
	%R43<def,tied1> = FMADDrr_r32 %R43<tied0>, %R27, %R37<kill>, %STATUS<imp-def,dead>, %D21<imp-use,kill>, %D21<imp-def>
	%R42<def,tied1> = FMADDrr_r32 %R42<tied0>, %R27, %R38<kill>, %STATUS<imp-def,dead>, %D21<imp-use,kill>, %D21<imp-def>
	%R44<def> = MOVi32rr %R43, %D22<imp-def>
	%R45<def> = MOVi32rr %R42, %D21<imp-use,kill>, %D22<imp-use,kill>, %D22<imp-def>
	STRf64 %D22<kill>, %R32, -8; mem:ST4[%scevgep17](tbaa=!2) ST4[%scevgep15](tbaa=!2)
	%R34<def> = LDRf32 %R32, 0; mem:LD4[%lsr.iv1214](tbaa=!2)
	%R34<def,tied1> = FMADDrr_r32 %R34<kill,tied0>, %R27, %R39<kill>, %STATUS<imp-def,dead>
	STRf32 %R34<kill>, %R32, 0; mem:ST4[%lsr.iv1214](tbaa=!2)
	%R37<def> = LDRf32 %R32, 4; mem:LD4[%scevgep16](tbaa=!2)
	%R37<def,tied1> = FMADDrr_r32 %R37<kill,tied0>, %R27, %R40<kill>, %STATUS<imp-def,dead>
	%R34<def,dead> = CMPri_r32 %R33, 8, %STATUS<imp-def>
	STRf32 %R37<kill>, %R32<kill>, 4; mem:ST4[%scevgep16](tbaa=!2)
	%R32<def> = MOVi32rr %R35<kill>
	%R34<def> = MOVi32rr %R36<kill>
	BCC <BB#6>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#6(0x7c000000 / 0x80000000 = 96.88%) BB#7(0x04000000 / 0x80000000 = 3.12%)

BB#7: derived from LLVM BB %for.end60
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#6
	%R25<def> = ADDrr_r32 %R25<kill>, %IP, %STATUS<imp-def,dead>
	%R26<def> = ADDri_r32 %R26<kill>, 1, %STATUS<imp-def,dead>
	%R27<def,dead> = CMPrr_r32 %R26, %R3, %STATUS<imp-def>
	BCC <BB#8>, 0, %STATUS<imp-use>
    Successors according to CFG: BB#8(0x04000000 / 0x80000000 = 3.12%) BB#5(0x7c000000 / 0x80000000 = 96.88%)

BB#8: derived from LLVM BB %for.cond64.preheader
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#7
	%R25<def> = MOVi32rr %R22
	%R26<def> = MOVi32rr %R19
    Successors according to CFG: BB#9(?%)

BB#9: derived from LLVM BB %for.body66
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#8 BB#9
	%R27<def> = ADDrr_r32 %R16, %R26, %STATUS<imp-def,dead>
	%R33<def> = LDRf32 %R27<kill>, 0; mem:LD4[%sunkaddr30](tbaa=!2)
	%R27<def> = ADDri_r32 %R25, 4, %STATUS<imp-def,dead>
	%R26<def> = ADDri_r32 %R26<kill>, 4, %STATUS<imp-def,dead>
	%R34<def> = LDRf32 %R25, 0; mem:Volatile LD4[%lsr.iv24](tbaa=!2)
	%R32<def> = LDRi32_r32 %FP, -4; mem:LD4[FixedStack2]
	GID %CONFIG<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %R32<kill>
	GIE %CONFIG<imp-def,dead>
	%R33<def> = FADDrr_r32 %R33<kill>, %R34<kill>, %STATUS<imp-def,dead>
	%R32<def,dead> = CMPri_r32 %R26, 32, %STATUS<imp-def>
	STRf32 %R33<kill>, %R25<kill>, 0; mem:Volatile ST4[%lsr.iv24](tbaa=!2)
	%R25<def> = MOVi32rr %R27<kill>
	BCC <BB#9>, 1, %STATUS<imp-use>
    Successors according to CFG: BB#10(0x04000000 / 0x80000000 = 3.12%) BB#9(0x7c000000 / 0x80000000 = 96.88%)

BB#10: derived from LLVM BB %for.end75
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#9
	%R22<def> = ADDri_r32 %R22<kill>, 32, %STATUS<imp-def,dead>
	%R23<def> = ADDri_r32 %R23<kill>, 32, %STATUS<imp-def,dead>
	%R24<def> = ADDri_r32 %R24<kill>, 8, %STATUS<imp-def,dead>
	%R25<def,dead> = CMPrr_r32 %R24, %R3, %STATUS<imp-def>
	BCC <BB#4>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#4(0x7c000000 / 0x80000000 = 96.88%) BB#11(0x04000000 / 0x80000000 = 3.12%)

BB#11: derived from LLVM BB %for.end78
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20
    Predecessors according to CFG: BB#10
	%R2<def> = ADDrr_r32 %R2<kill>, %IP, %STATUS<imp-def,dead>
	%R20<def> = ADDri_r32 %R20<kill>, 1, %STATUS<imp-def,dead>
	%R21<def,dead> = CMPrr_r32 %R20, %R3, %STATUS<imp-def>
	BCC <BB#3>, 1, %STATUS<imp-use>
    Successors according to CFG: BB#12(0x04000000 / 0x80000000 = 3.12%) BB#3(0x7c000000 / 0x80000000 = 96.88%)

BB#12: derived from LLVM BB %for.end81
    Predecessors according to CFG: BB#1 BB#11
	%R0<def> = LDRi32_r32 %FP, -44; mem:LD4[FixedStack1]
	GID
	%CONFIG<def> = MOVTS32_core %R0<kill>
	GIE %CONFIG<imp-use,kill>
	%LR<def> = LDRi64 %SP, 48; flags: FrameSetup
	%SP<def> = ADDri_r32 %SP, 48, %STATUS<imp-def>
	JR32 %LR

# End machine code for function matmac.


TryTailMergeBlocks: BB#4, BB#7
  with successor BB#5
  which has fall-through from BB#4
Looking for common tails of at least 3 instructions

<----------------->
Analyzing block 7
BB#7: derived from LLVM BB %for.end60
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#6
	%R25<def> = ADDrr_r32 %R25<kill>, %IP, %STATUS<imp-def,dead>
	%R26<def> = ADDri_r32 %R26<kill>, 1, %STATUS<imp-def,dead>
	%R27<def,dead> = CMPrr_r32 %R26, %R3, %STATUS<imp-def>
	BCC <BB#8>, 0, %STATUS<imp-use>
    Successors according to CFG: BB#8(0x04000000 / 0x80000000 = 3.12%) BB#5(0x7c000000 / 0x80000000 = 96.88%)

<----------------->
Removing branches out of BB#7
# Machine code for function matmac: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=32, align=8, at location [SP-40]
  fi#1: size=4, align=4, at location [SP-44]
  fi#2: size=4, align=4, at location [SP-4]
  fi#3: size=4, align=8, at location [SP-8]
Function Live Ins: %R0, %R1, %R2, %R3

BB#0: 
    Live Ins: %R0 %R1 %R2 %R3
	%SP<def,tied2> = STRi64_pmd %LR, %SP<tied0>, -48; flags: FrameSetup
	%FP<def> = ADDri_r32 %SP, 48, %STATUS<imp-def>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	GID %CONFIG<imp-def>
	%R19<def> = MOVFS32_core %CONFIG, %D9<imp-def>
	STRi32_r32 %R19, %FP, -44; mem:ST4[FixedStack1]
	%IP<def> = MOVi32ri 65535
	%IP<def,tied1> = MOVTi32ri %IP<kill,tied0>, 65521
	%R18<def> = ANDrr_r32 %R19, %IP<kill>, %STATUS<imp-def>, %D9<imp-use,kill>, %D9<imp-def>
	%R19<def,tied1> = MOVTi32ri %R19<tied0>, 72, %D9<imp-use,kill>, %D9<imp-def>
	STRi64 %D9<kill>, %FP, -8; mem:ST4[FixedStack3] ST4[FixedStack2]
	GIE %CONFIG<imp-use,kill>
    Successors according to CFG: BB#1(?%)

BB#1: derived from LLVM BB %entry
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#0
	%IP<def,dead> = CMPri_r32 %R3, 1, %STATUS<imp-def>
	BCC <BB#12>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#2(0x50000000 / 0x80000000 = 62.50%) BB#12(0x30000000 / 0x80000000 = 37.50%)

BB#2: derived from LLVM BB %for.body3.lr.ph.preheader
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#1
	%IP<def> = LSL32ri %R3, 2, %STATUS<imp-def,dead>
	%R1<def> = ADDri_r32 %R1<kill>, 8, %STATUS<imp-def,dead>
	%R16<def> = MOViPTR %FP, -40
	%R17<def> = ADDri_r32 %R16, 8, %STATUS<imp-def,dead>
	%R19<def> = MOVi32ri 0, %D9<imp-def>
	%R20<def> = MOVi32rr %R19
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %for.body3.lr.ph
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20
    Predecessors according to CFG: BB#2 BB#11
	%R21<def> = LDRi32_r32 %FP, -8; mem:LD4[FixedStack3]
	GID %CONFIG<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %R21<kill>
	GIE %CONFIG<imp-def,dead>
	%R21<def> = IMULrr_r32 %R20, %R3, %STATUS<imp-def,dead>
	%R21<def> = LSL32ri %R21<kill>, 2, %STATUS<imp-def,dead>
	%R21<def> = ADDrr_r32 %R0, %R21<kill>, %STATUS<imp-def,dead>
	%R22<def> = MOVi32rr %R2
	%R23<def> = MOVi32rr %R1
	%R24<def> = MOVi32rr %R19
    Successors according to CFG: BB#4(?%)

BB#4: derived from LLVM BB %for.body9.preheader
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#3 BB#10
	%R18<def> = MOVi32rr %R19, %D9<imp-use,kill>, %D9<imp-def>
	STRi64 %D9, %FP, -16; mem:ST8[%1+24]
	STRi64 %D9, %FP, -24; mem:ST8[%1+16]
	STRi64 %D9, %FP, -32; mem:ST8[%1+8]
	STRi64 %D9, %FP, -40; mem:ST8[%1]
	%R25<def> = MOVi32rr %R23
	%R26<def> = MOVi32rr %R19
    Successors according to CFG: BB#5(?%)

BB#5: derived from LLVM BB %for.body9
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#4 BB#7
	%R27<def> = LSL32ri %R26, 2, %STATUS<imp-def,dead>
	%R27<def> = ADDrr_r32 %R21, %R27<kill>, %STATUS<imp-def,dead>
	%R27<def> = LDRf32 %R27<kill>, 0; mem:Volatile LD4[%add.ptr10](tbaa=!2)
	%R32<def> = MOVi32rr %R17
	%R34<def> = MOVi32rr %R25
	%R33<def> = MOVi32rr %R19
    Successors according to CFG: BB#6(?%)

BB#6: derived from LLVM BB %for.body13
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26 %R27 %R32 %R33 %R34
    Predecessors according to CFG: BB#5 BB#6
	%R37<def> = LDRf32 %R34, -8; mem:Volatile LD4[%scevgep8](tbaa=!2)
	%R35<def> = ADDri_r32 %R32, 16, %STATUS<imp-def,dead>
	%R36<def> = ADDri_r32 %R34, 16, %STATUS<imp-def,dead>
	%R38<def> = LDRf32 %R34, -4; mem:Volatile LD4[%scevgep9](tbaa=!2)
	%R33<def> = ADDri_r32 %R33<kill>, 4, %STATUS<imp-def,dead>
	%R39<def> = LDRf32 %R34, 0; mem:Volatile LD4[%lsr.iv5](tbaa=!2)
	%R40<def> = LDRf32 %R34<kill>, 4; mem:Volatile LD4[%scevgep7](tbaa=!2)
	%D21<def> = LDRf64 %R32, -8; mem:LD4[%scevgep17](tbaa=!2) LD4[%scevgep15](tbaa=!2)
	%R34<def> = LDRi32_r32 %FP, -4; mem:LD4[FixedStack2]
	GID %CONFIG<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %R34<kill>
	GIE %CONFIG<imp-def,dead>
	%R43<def,tied1> = FMADDrr_r32 %R43<tied0>, %R27, %R37<kill>, %STATUS<imp-def,dead>, %D21<imp-use,kill>, %D21<imp-def>
	%R42<def,tied1> = FMADDrr_r32 %R42<tied0>, %R27, %R38<kill>, %STATUS<imp-def,dead>, %D21<imp-use,kill>, %D21<imp-def>
	%R44<def> = MOVi32rr %R43, %D22<imp-def>
	%R45<def> = MOVi32rr %R42, %D21<imp-use,kill>, %D22<imp-use,kill>, %D22<imp-def>
	STRf64 %D22<kill>, %R32, -8; mem:ST4[%scevgep17](tbaa=!2) ST4[%scevgep15](tbaa=!2)
	%R34<def> = LDRf32 %R32, 0; mem:LD4[%lsr.iv1214](tbaa=!2)
	%R34<def,tied1> = FMADDrr_r32 %R34<kill,tied0>, %R27, %R39<kill>, %STATUS<imp-def,dead>
	STRf32 %R34<kill>, %R32, 0; mem:ST4[%lsr.iv1214](tbaa=!2)
	%R37<def> = LDRf32 %R32, 4; mem:LD4[%scevgep16](tbaa=!2)
	%R37<def,tied1> = FMADDrr_r32 %R37<kill,tied0>, %R27, %R40<kill>, %STATUS<imp-def,dead>
	%R34<def,dead> = CMPri_r32 %R33, 8, %STATUS<imp-def>
	STRf32 %R37<kill>, %R32<kill>, 4; mem:ST4[%scevgep16](tbaa=!2)
	%R32<def> = MOVi32rr %R35<kill>
	%R34<def> = MOVi32rr %R36<kill>
	BCC <BB#6>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#6(0x7c000000 / 0x80000000 = 96.88%) BB#7(0x04000000 / 0x80000000 = 3.12%)

BB#7: derived from LLVM BB %for.end60
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#6
	%R25<def> = ADDrr_r32 %R25<kill>, %IP, %STATUS<imp-def,dead>
	%R26<def> = ADDri_r32 %R26<kill>, 1, %STATUS<imp-def,dead>
	%R27<def,dead> = CMPrr_r32 %R26, %R3, %STATUS<imp-def>
    Successors according to CFG: BB#8(0x04000000 / 0x80000000 = 3.12%) BB#5(0x7c000000 / 0x80000000 = 96.88%)

BB#8: derived from LLVM BB %for.cond64.preheader
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#7
	%R25<def> = MOVi32rr %R22
	%R26<def> = MOVi32rr %R19
    Successors according to CFG: BB#9(?%)

BB#9: derived from LLVM BB %for.body66
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#8 BB#9
	%R27<def> = ADDrr_r32 %R16, %R26, %STATUS<imp-def,dead>
	%R33<def> = LDRf32 %R27<kill>, 0; mem:LD4[%sunkaddr30](tbaa=!2)
	%R27<def> = ADDri_r32 %R25, 4, %STATUS<imp-def,dead>
	%R26<def> = ADDri_r32 %R26<kill>, 4, %STATUS<imp-def,dead>
	%R34<def> = LDRf32 %R25, 0; mem:Volatile LD4[%lsr.iv24](tbaa=!2)
	%R32<def> = LDRi32_r32 %FP, -4; mem:LD4[FixedStack2]
	GID %CONFIG<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %R32<kill>
	GIE %CONFIG<imp-def,dead>
	%R33<def> = FADDrr_r32 %R33<kill>, %R34<kill>, %STATUS<imp-def,dead>
	%R32<def,dead> = CMPri_r32 %R26, 32, %STATUS<imp-def>
	STRf32 %R33<kill>, %R25<kill>, 0; mem:Volatile ST4[%lsr.iv24](tbaa=!2)
	%R25<def> = MOVi32rr %R27<kill>
	BCC <BB#9>, 1, %STATUS<imp-use>
    Successors according to CFG: BB#10(0x04000000 / 0x80000000 = 3.12%) BB#9(0x7c000000 / 0x80000000 = 96.88%)

BB#10: derived from LLVM BB %for.end75
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#9
	%R22<def> = ADDri_r32 %R22<kill>, 32, %STATUS<imp-def,dead>
	%R23<def> = ADDri_r32 %R23<kill>, 32, %STATUS<imp-def,dead>
	%R24<def> = ADDri_r32 %R24<kill>, 8, %STATUS<imp-def,dead>
	%R25<def,dead> = CMPrr_r32 %R24, %R3, %STATUS<imp-def>
	BCC <BB#4>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#4(0x7c000000 / 0x80000000 = 96.88%) BB#11(0x04000000 / 0x80000000 = 3.12%)

BB#11: derived from LLVM BB %for.end78
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20
    Predecessors according to CFG: BB#10
	%R2<def> = ADDrr_r32 %R2<kill>, %IP, %STATUS<imp-def,dead>
	%R20<def> = ADDri_r32 %R20<kill>, 1, %STATUS<imp-def,dead>
	%R21<def,dead> = CMPrr_r32 %R20, %R3, %STATUS<imp-def>
	BCC <BB#3>, 1, %STATUS<imp-use>
    Successors according to CFG: BB#12(0x04000000 / 0x80000000 = 3.12%) BB#3(0x7c000000 / 0x80000000 = 96.88%)

BB#12: derived from LLVM BB %for.end81
    Predecessors according to CFG: BB#1 BB#11
	%R0<def> = LDRi32_r32 %FP, -44; mem:LD4[FixedStack1]
	GID
	%CONFIG<def> = MOVTS32_core %R0<kill>
	GIE %CONFIG<imp-use,kill>
	%LR<def> = LDRi64 %SP, 48; flags: FrameSetup
	%SP<def> = ADDri_r32 %SP, 48, %STATUS<imp-def>
	JR32 %LR

# End machine code for function matmac.


<----------------->
Inserting branch into BB#7
# Machine code for function matmac: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=32, align=8, at location [SP-40]
  fi#1: size=4, align=4, at location [SP-44]
  fi#2: size=4, align=4, at location [SP-4]
  fi#3: size=4, align=8, at location [SP-8]
Function Live Ins: %R0, %R1, %R2, %R3

BB#0: 
    Live Ins: %R0 %R1 %R2 %R3
	%SP<def,tied2> = STRi64_pmd %LR, %SP<tied0>, -48; flags: FrameSetup
	%FP<def> = ADDri_r32 %SP, 48, %STATUS<imp-def>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	GID %CONFIG<imp-def>
	%R19<def> = MOVFS32_core %CONFIG, %D9<imp-def>
	STRi32_r32 %R19, %FP, -44; mem:ST4[FixedStack1]
	%IP<def> = MOVi32ri 65535
	%IP<def,tied1> = MOVTi32ri %IP<kill,tied0>, 65521
	%R18<def> = ANDrr_r32 %R19, %IP<kill>, %STATUS<imp-def>, %D9<imp-use,kill>, %D9<imp-def>
	%R19<def,tied1> = MOVTi32ri %R19<tied0>, 72, %D9<imp-use,kill>, %D9<imp-def>
	STRi64 %D9<kill>, %FP, -8; mem:ST4[FixedStack3] ST4[FixedStack2]
	GIE %CONFIG<imp-use,kill>
    Successors according to CFG: BB#1(?%)

BB#1: derived from LLVM BB %entry
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#0
	%IP<def,dead> = CMPri_r32 %R3, 1, %STATUS<imp-def>
	BCC <BB#12>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#2(0x50000000 / 0x80000000 = 62.50%) BB#12(0x30000000 / 0x80000000 = 37.50%)

BB#2: derived from LLVM BB %for.body3.lr.ph.preheader
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#1
	%IP<def> = LSL32ri %R3, 2, %STATUS<imp-def,dead>
	%R1<def> = ADDri_r32 %R1<kill>, 8, %STATUS<imp-def,dead>
	%R16<def> = MOViPTR %FP, -40
	%R17<def> = ADDri_r32 %R16, 8, %STATUS<imp-def,dead>
	%R19<def> = MOVi32ri 0, %D9<imp-def>
	%R20<def> = MOVi32rr %R19
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %for.body3.lr.ph
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20
    Predecessors according to CFG: BB#2 BB#11
	%R21<def> = LDRi32_r32 %FP, -8; mem:LD4[FixedStack3]
	GID %CONFIG<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %R21<kill>
	GIE %CONFIG<imp-def,dead>
	%R21<def> = IMULrr_r32 %R20, %R3, %STATUS<imp-def,dead>
	%R21<def> = LSL32ri %R21<kill>, 2, %STATUS<imp-def,dead>
	%R21<def> = ADDrr_r32 %R0, %R21<kill>, %STATUS<imp-def,dead>
	%R22<def> = MOVi32rr %R2
	%R23<def> = MOVi32rr %R1
	%R24<def> = MOVi32rr %R19
    Successors according to CFG: BB#4(?%)

BB#4: derived from LLVM BB %for.body9.preheader
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#3 BB#10
	%R18<def> = MOVi32rr %R19, %D9<imp-use,kill>, %D9<imp-def>
	STRi64 %D9, %FP, -16; mem:ST8[%1+24]
	STRi64 %D9, %FP, -24; mem:ST8[%1+16]
	STRi64 %D9, %FP, -32; mem:ST8[%1+8]
	STRi64 %D9, %FP, -40; mem:ST8[%1]
	%R25<def> = MOVi32rr %R23
	%R26<def> = MOVi32rr %R19
    Successors according to CFG: BB#5(?%)

BB#5: derived from LLVM BB %for.body9
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#4 BB#7
	%R27<def> = LSL32ri %R26, 2, %STATUS<imp-def,dead>
	%R27<def> = ADDrr_r32 %R21, %R27<kill>, %STATUS<imp-def,dead>
	%R27<def> = LDRf32 %R27<kill>, 0; mem:Volatile LD4[%add.ptr10](tbaa=!2)
	%R32<def> = MOVi32rr %R17
	%R34<def> = MOVi32rr %R25
	%R33<def> = MOVi32rr %R19
    Successors according to CFG: BB#6(?%)

BB#6: derived from LLVM BB %for.body13
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26 %R27 %R32 %R33 %R34
    Predecessors according to CFG: BB#5 BB#6
	%R37<def> = LDRf32 %R34, -8; mem:Volatile LD4[%scevgep8](tbaa=!2)
	%R35<def> = ADDri_r32 %R32, 16, %STATUS<imp-def,dead>
	%R36<def> = ADDri_r32 %R34, 16, %STATUS<imp-def,dead>
	%R38<def> = LDRf32 %R34, -4; mem:Volatile LD4[%scevgep9](tbaa=!2)
	%R33<def> = ADDri_r32 %R33<kill>, 4, %STATUS<imp-def,dead>
	%R39<def> = LDRf32 %R34, 0; mem:Volatile LD4[%lsr.iv5](tbaa=!2)
	%R40<def> = LDRf32 %R34<kill>, 4; mem:Volatile LD4[%scevgep7](tbaa=!2)
	%D21<def> = LDRf64 %R32, -8; mem:LD4[%scevgep17](tbaa=!2) LD4[%scevgep15](tbaa=!2)
	%R34<def> = LDRi32_r32 %FP, -4; mem:LD4[FixedStack2]
	GID %CONFIG<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %R34<kill>
	GIE %CONFIG<imp-def,dead>
	%R43<def,tied1> = FMADDrr_r32 %R43<tied0>, %R27, %R37<kill>, %STATUS<imp-def,dead>, %D21<imp-use,kill>, %D21<imp-def>
	%R42<def,tied1> = FMADDrr_r32 %R42<tied0>, %R27, %R38<kill>, %STATUS<imp-def,dead>, %D21<imp-use,kill>, %D21<imp-def>
	%R44<def> = MOVi32rr %R43, %D22<imp-def>
	%R45<def> = MOVi32rr %R42, %D21<imp-use,kill>, %D22<imp-use,kill>, %D22<imp-def>
	STRf64 %D22<kill>, %R32, -8; mem:ST4[%scevgep17](tbaa=!2) ST4[%scevgep15](tbaa=!2)
	%R34<def> = LDRf32 %R32, 0; mem:LD4[%lsr.iv1214](tbaa=!2)
	%R34<def,tied1> = FMADDrr_r32 %R34<kill,tied0>, %R27, %R39<kill>, %STATUS<imp-def,dead>
	STRf32 %R34<kill>, %R32, 0; mem:ST4[%lsr.iv1214](tbaa=!2)
	%R37<def> = LDRf32 %R32, 4; mem:LD4[%scevgep16](tbaa=!2)
	%R37<def,tied1> = FMADDrr_r32 %R37<kill,tied0>, %R27, %R40<kill>, %STATUS<imp-def,dead>
	%R34<def,dead> = CMPri_r32 %R33, 8, %STATUS<imp-def>
	STRf32 %R37<kill>, %R32<kill>, 4; mem:ST4[%scevgep16](tbaa=!2)
	%R32<def> = MOVi32rr %R35<kill>
	%R34<def> = MOVi32rr %R36<kill>
	BCC <BB#6>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#6(0x7c000000 / 0x80000000 = 96.88%) BB#7(0x04000000 / 0x80000000 = 3.12%)

BB#7: derived from LLVM BB %for.end60
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#6
	%R25<def> = ADDrr_r32 %R25<kill>, %IP, %STATUS<imp-def,dead>
	%R26<def> = ADDri_r32 %R26<kill>, 1, %STATUS<imp-def,dead>
	%R27<def,dead> = CMPrr_r32 %R26, %R3, %STATUS<imp-def>
	BCC <BB#5>, 1, %STATUS<imp-use>
    Successors according to CFG: BB#8(0x04000000 / 0x80000000 = 3.12%) BB#5(0x7c000000 / 0x80000000 = 96.88%)

BB#8: derived from LLVM BB %for.cond64.preheader
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#7
	%R25<def> = MOVi32rr %R22
	%R26<def> = MOVi32rr %R19
    Successors according to CFG: BB#9(?%)

BB#9: derived from LLVM BB %for.body66
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#8 BB#9
	%R27<def> = ADDrr_r32 %R16, %R26, %STATUS<imp-def,dead>
	%R33<def> = LDRf32 %R27<kill>, 0; mem:LD4[%sunkaddr30](tbaa=!2)
	%R27<def> = ADDri_r32 %R25, 4, %STATUS<imp-def,dead>
	%R26<def> = ADDri_r32 %R26<kill>, 4, %STATUS<imp-def,dead>
	%R34<def> = LDRf32 %R25, 0; mem:Volatile LD4[%lsr.iv24](tbaa=!2)
	%R32<def> = LDRi32_r32 %FP, -4; mem:LD4[FixedStack2]
	GID %CONFIG<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %R32<kill>
	GIE %CONFIG<imp-def,dead>
	%R33<def> = FADDrr_r32 %R33<kill>, %R34<kill>, %STATUS<imp-def,dead>
	%R32<def,dead> = CMPri_r32 %R26, 32, %STATUS<imp-def>
	STRf32 %R33<kill>, %R25<kill>, 0; mem:Volatile ST4[%lsr.iv24](tbaa=!2)
	%R25<def> = MOVi32rr %R27<kill>
	BCC <BB#9>, 1, %STATUS<imp-use>
    Successors according to CFG: BB#10(0x04000000 / 0x80000000 = 3.12%) BB#9(0x7c000000 / 0x80000000 = 96.88%)

BB#10: derived from LLVM BB %for.end75
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#9
	%R22<def> = ADDri_r32 %R22<kill>, 32, %STATUS<imp-def,dead>
	%R23<def> = ADDri_r32 %R23<kill>, 32, %STATUS<imp-def,dead>
	%R24<def> = ADDri_r32 %R24<kill>, 8, %STATUS<imp-def,dead>
	%R25<def,dead> = CMPrr_r32 %R24, %R3, %STATUS<imp-def>
	BCC <BB#4>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#4(0x7c000000 / 0x80000000 = 96.88%) BB#11(0x04000000 / 0x80000000 = 3.12%)

BB#11: derived from LLVM BB %for.end78
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20
    Predecessors according to CFG: BB#10
	%R2<def> = ADDrr_r32 %R2<kill>, %IP, %STATUS<imp-def,dead>
	%R20<def> = ADDri_r32 %R20<kill>, 1, %STATUS<imp-def,dead>
	%R21<def,dead> = CMPrr_r32 %R20, %R3, %STATUS<imp-def>
	BCC <BB#3>, 1, %STATUS<imp-use>
    Successors according to CFG: BB#12(0x04000000 / 0x80000000 = 3.12%) BB#3(0x7c000000 / 0x80000000 = 96.88%)

BB#12: derived from LLVM BB %for.end81
    Predecessors according to CFG: BB#1 BB#11
	%R0<def> = LDRi32_r32 %FP, -44; mem:LD4[FixedStack1]
	GID
	%CONFIG<def> = MOVTS32_core %R0<kill>
	GIE %CONFIG<imp-use,kill>
	%LR<def> = LDRi64 %SP, 48; flags: FrameSetup
	%SP<def> = ADDri_r32 %SP, 48, %STATUS<imp-def>
	JR32 %LR

# End machine code for function matmac.


<----------------->
Analyzing block 5
BB#5: derived from LLVM BB %for.body9
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#4 BB#7
	%R27<def> = LSL32ri %R26, 2, %STATUS<imp-def,dead>
	%R27<def> = ADDrr_r32 %R21, %R27<kill>, %STATUS<imp-def,dead>
	%R27<def> = LDRf32 %R27<kill>, 0; mem:Volatile LD4[%add.ptr10](tbaa=!2)
	%R32<def> = MOVi32rr %R17
	%R34<def> = MOVi32rr %R25
	%R33<def> = MOVi32rr %R19
    Successors according to CFG: BB#6(?%)

<----------------->
Analyzing block 8
BB#8: derived from LLVM BB %for.cond64.preheader
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#7
	%R25<def> = MOVi32rr %R22
	%R26<def> = MOVi32rr %R19
    Successors according to CFG: BB#9(?%)

<----------------->
Analyzing block 1
BB#1: derived from LLVM BB %entry
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#0
	%IP<def,dead> = CMPri_r32 %R3, 1, %STATUS<imp-def>
	BCC <BB#12>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#2(0x50000000 / 0x80000000 = 62.50%) BB#12(0x30000000 / 0x80000000 = 37.50%)

<----------------->
Removing branches out of BB#1
# Machine code for function matmac: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=32, align=8, at location [SP-40]
  fi#1: size=4, align=4, at location [SP-44]
  fi#2: size=4, align=4, at location [SP-4]
  fi#3: size=4, align=8, at location [SP-8]
Function Live Ins: %R0, %R1, %R2, %R3

BB#0: 
    Live Ins: %R0 %R1 %R2 %R3
	%SP<def,tied2> = STRi64_pmd %LR, %SP<tied0>, -48; flags: FrameSetup
	%FP<def> = ADDri_r32 %SP, 48, %STATUS<imp-def>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	GID %CONFIG<imp-def>
	%R19<def> = MOVFS32_core %CONFIG, %D9<imp-def>
	STRi32_r32 %R19, %FP, -44; mem:ST4[FixedStack1]
	%IP<def> = MOVi32ri 65535
	%IP<def,tied1> = MOVTi32ri %IP<kill,tied0>, 65521
	%R18<def> = ANDrr_r32 %R19, %IP<kill>, %STATUS<imp-def>, %D9<imp-use,kill>, %D9<imp-def>
	%R19<def,tied1> = MOVTi32ri %R19<tied0>, 72, %D9<imp-use,kill>, %D9<imp-def>
	STRi64 %D9<kill>, %FP, -8; mem:ST4[FixedStack3] ST4[FixedStack2]
	GIE %CONFIG<imp-use,kill>
    Successors according to CFG: BB#1(?%)

BB#1: derived from LLVM BB %entry
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#0
	%IP<def,dead> = CMPri_r32 %R3, 1, %STATUS<imp-def>
    Successors according to CFG: BB#2(0x50000000 / 0x80000000 = 62.50%) BB#12(0x30000000 / 0x80000000 = 37.50%)

BB#2: derived from LLVM BB %for.body3.lr.ph.preheader
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#1
	%IP<def> = LSL32ri %R3, 2, %STATUS<imp-def,dead>
	%R1<def> = ADDri_r32 %R1<kill>, 8, %STATUS<imp-def,dead>
	%R16<def> = MOViPTR %FP, -40
	%R17<def> = ADDri_r32 %R16, 8, %STATUS<imp-def,dead>
	%R19<def> = MOVi32ri 0, %D9<imp-def>
	%R20<def> = MOVi32rr %R19
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %for.body3.lr.ph
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20
    Predecessors according to CFG: BB#2 BB#11
	%R21<def> = LDRi32_r32 %FP, -8; mem:LD4[FixedStack3]
	GID %CONFIG<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %R21<kill>
	GIE %CONFIG<imp-def,dead>
	%R21<def> = IMULrr_r32 %R20, %R3, %STATUS<imp-def,dead>
	%R21<def> = LSL32ri %R21<kill>, 2, %STATUS<imp-def,dead>
	%R21<def> = ADDrr_r32 %R0, %R21<kill>, %STATUS<imp-def,dead>
	%R22<def> = MOVi32rr %R2
	%R23<def> = MOVi32rr %R1
	%R24<def> = MOVi32rr %R19
    Successors according to CFG: BB#4(?%)

BB#4: derived from LLVM BB %for.body9.preheader
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#3 BB#10
	%R18<def> = MOVi32rr %R19, %D9<imp-use,kill>, %D9<imp-def>
	STRi64 %D9, %FP, -16; mem:ST8[%1+24]
	STRi64 %D9, %FP, -24; mem:ST8[%1+16]
	STRi64 %D9, %FP, -32; mem:ST8[%1+8]
	STRi64 %D9, %FP, -40; mem:ST8[%1]
	%R25<def> = MOVi32rr %R23
	%R26<def> = MOVi32rr %R19
    Successors according to CFG: BB#5(?%)

BB#5: derived from LLVM BB %for.body9
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#4 BB#7
	%R27<def> = LSL32ri %R26, 2, %STATUS<imp-def,dead>
	%R27<def> = ADDrr_r32 %R21, %R27<kill>, %STATUS<imp-def,dead>
	%R27<def> = LDRf32 %R27<kill>, 0; mem:Volatile LD4[%add.ptr10](tbaa=!2)
	%R32<def> = MOVi32rr %R17
	%R34<def> = MOVi32rr %R25
	%R33<def> = MOVi32rr %R19
    Successors according to CFG: BB#6(?%)

BB#6: derived from LLVM BB %for.body13
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26 %R27 %R32 %R33 %R34
    Predecessors according to CFG: BB#5 BB#6
	%R37<def> = LDRf32 %R34, -8; mem:Volatile LD4[%scevgep8](tbaa=!2)
	%R35<def> = ADDri_r32 %R32, 16, %STATUS<imp-def,dead>
	%R36<def> = ADDri_r32 %R34, 16, %STATUS<imp-def,dead>
	%R38<def> = LDRf32 %R34, -4; mem:Volatile LD4[%scevgep9](tbaa=!2)
	%R33<def> = ADDri_r32 %R33<kill>, 4, %STATUS<imp-def,dead>
	%R39<def> = LDRf32 %R34, 0; mem:Volatile LD4[%lsr.iv5](tbaa=!2)
	%R40<def> = LDRf32 %R34<kill>, 4; mem:Volatile LD4[%scevgep7](tbaa=!2)
	%D21<def> = LDRf64 %R32, -8; mem:LD4[%scevgep17](tbaa=!2) LD4[%scevgep15](tbaa=!2)
	%R34<def> = LDRi32_r32 %FP, -4; mem:LD4[FixedStack2]
	GID %CONFIG<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %R34<kill>
	GIE %CONFIG<imp-def,dead>
	%R43<def,tied1> = FMADDrr_r32 %R43<tied0>, %R27, %R37<kill>, %STATUS<imp-def,dead>, %D21<imp-use,kill>, %D21<imp-def>
	%R42<def,tied1> = FMADDrr_r32 %R42<tied0>, %R27, %R38<kill>, %STATUS<imp-def,dead>, %D21<imp-use,kill>, %D21<imp-def>
	%R44<def> = MOVi32rr %R43, %D22<imp-def>
	%R45<def> = MOVi32rr %R42, %D21<imp-use,kill>, %D22<imp-use,kill>, %D22<imp-def>
	STRf64 %D22<kill>, %R32, -8; mem:ST4[%scevgep17](tbaa=!2) ST4[%scevgep15](tbaa=!2)
	%R34<def> = LDRf32 %R32, 0; mem:LD4[%lsr.iv1214](tbaa=!2)
	%R34<def,tied1> = FMADDrr_r32 %R34<kill,tied0>, %R27, %R39<kill>, %STATUS<imp-def,dead>
	STRf32 %R34<kill>, %R32, 0; mem:ST4[%lsr.iv1214](tbaa=!2)
	%R37<def> = LDRf32 %R32, 4; mem:LD4[%scevgep16](tbaa=!2)
	%R37<def,tied1> = FMADDrr_r32 %R37<kill,tied0>, %R27, %R40<kill>, %STATUS<imp-def,dead>
	%R34<def,dead> = CMPri_r32 %R33, 8, %STATUS<imp-def>
	STRf32 %R37<kill>, %R32<kill>, 4; mem:ST4[%scevgep16](tbaa=!2)
	%R32<def> = MOVi32rr %R35<kill>
	%R34<def> = MOVi32rr %R36<kill>
	BCC <BB#6>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#6(0x7c000000 / 0x80000000 = 96.88%) BB#7(0x04000000 / 0x80000000 = 3.12%)

BB#7: derived from LLVM BB %for.end60
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#6
	%R25<def> = ADDrr_r32 %R25<kill>, %IP, %STATUS<imp-def,dead>
	%R26<def> = ADDri_r32 %R26<kill>, 1, %STATUS<imp-def,dead>
	%R27<def,dead> = CMPrr_r32 %R26, %R3, %STATUS<imp-def>
	BCC <BB#5>, 1, %STATUS<imp-use>
    Successors according to CFG: BB#8(0x04000000 / 0x80000000 = 3.12%) BB#5(0x7c000000 / 0x80000000 = 96.88%)

BB#8: derived from LLVM BB %for.cond64.preheader
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#7
	%R25<def> = MOVi32rr %R22
	%R26<def> = MOVi32rr %R19
    Successors according to CFG: BB#9(?%)

BB#9: derived from LLVM BB %for.body66
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#8 BB#9
	%R27<def> = ADDrr_r32 %R16, %R26, %STATUS<imp-def,dead>
	%R33<def> = LDRf32 %R27<kill>, 0; mem:LD4[%sunkaddr30](tbaa=!2)
	%R27<def> = ADDri_r32 %R25, 4, %STATUS<imp-def,dead>
	%R26<def> = ADDri_r32 %R26<kill>, 4, %STATUS<imp-def,dead>
	%R34<def> = LDRf32 %R25, 0; mem:Volatile LD4[%lsr.iv24](tbaa=!2)
	%R32<def> = LDRi32_r32 %FP, -4; mem:LD4[FixedStack2]
	GID %CONFIG<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %R32<kill>
	GIE %CONFIG<imp-def,dead>
	%R33<def> = FADDrr_r32 %R33<kill>, %R34<kill>, %STATUS<imp-def,dead>
	%R32<def,dead> = CMPri_r32 %R26, 32, %STATUS<imp-def>
	STRf32 %R33<kill>, %R25<kill>, 0; mem:Volatile ST4[%lsr.iv24](tbaa=!2)
	%R25<def> = MOVi32rr %R27<kill>
	BCC <BB#9>, 1, %STATUS<imp-use>
    Successors according to CFG: BB#10(0x04000000 / 0x80000000 = 3.12%) BB#9(0x7c000000 / 0x80000000 = 96.88%)

BB#10: derived from LLVM BB %for.end75
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#9
	%R22<def> = ADDri_r32 %R22<kill>, 32, %STATUS<imp-def,dead>
	%R23<def> = ADDri_r32 %R23<kill>, 32, %STATUS<imp-def,dead>
	%R24<def> = ADDri_r32 %R24<kill>, 8, %STATUS<imp-def,dead>
	%R25<def,dead> = CMPrr_r32 %R24, %R3, %STATUS<imp-def>
	BCC <BB#4>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#4(0x7c000000 / 0x80000000 = 96.88%) BB#11(0x04000000 / 0x80000000 = 3.12%)

BB#11: derived from LLVM BB %for.end78
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20
    Predecessors according to CFG: BB#10
	%R2<def> = ADDrr_r32 %R2<kill>, %IP, %STATUS<imp-def,dead>
	%R20<def> = ADDri_r32 %R20<kill>, 1, %STATUS<imp-def,dead>
	%R21<def,dead> = CMPrr_r32 %R20, %R3, %STATUS<imp-def>
	BCC <BB#3>, 1, %STATUS<imp-use>
    Successors according to CFG: BB#12(0x04000000 / 0x80000000 = 3.12%) BB#3(0x7c000000 / 0x80000000 = 96.88%)

BB#12: derived from LLVM BB %for.end81
    Predecessors according to CFG: BB#1 BB#11
	%R0<def> = LDRi32_r32 %FP, -44; mem:LD4[FixedStack1]
	GID
	%CONFIG<def> = MOVTS32_core %R0<kill>
	GIE %CONFIG<imp-use,kill>
	%LR<def> = LDRi64 %SP, 48; flags: FrameSetup
	%SP<def> = ADDri_r32 %SP, 48, %STATUS<imp-def>
	JR32 %LR

# End machine code for function matmac.


<----------------->
Inserting branch into BB#1
# Machine code for function matmac: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=32, align=8, at location [SP-40]
  fi#1: size=4, align=4, at location [SP-44]
  fi#2: size=4, align=4, at location [SP-4]
  fi#3: size=4, align=8, at location [SP-8]
Function Live Ins: %R0, %R1, %R2, %R3

BB#0: 
    Live Ins: %R0 %R1 %R2 %R3
	%SP<def,tied2> = STRi64_pmd %LR, %SP<tied0>, -48; flags: FrameSetup
	%FP<def> = ADDri_r32 %SP, 48, %STATUS<imp-def>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	GID %CONFIG<imp-def>
	%R19<def> = MOVFS32_core %CONFIG, %D9<imp-def>
	STRi32_r32 %R19, %FP, -44; mem:ST4[FixedStack1]
	%IP<def> = MOVi32ri 65535
	%IP<def,tied1> = MOVTi32ri %IP<kill,tied0>, 65521
	%R18<def> = ANDrr_r32 %R19, %IP<kill>, %STATUS<imp-def>, %D9<imp-use,kill>, %D9<imp-def>
	%R19<def,tied1> = MOVTi32ri %R19<tied0>, 72, %D9<imp-use,kill>, %D9<imp-def>
	STRi64 %D9<kill>, %FP, -8; mem:ST4[FixedStack3] ST4[FixedStack2]
	GIE %CONFIG<imp-use,kill>
    Successors according to CFG: BB#1(?%)

BB#1: derived from LLVM BB %entry
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#0
	%IP<def,dead> = CMPri_r32 %R3, 1, %STATUS<imp-def>
	BCC <BB#2>, 7, %STATUS<imp-use>
    Successors according to CFG: BB#2(0x50000000 / 0x80000000 = 62.50%) BB#12(0x30000000 / 0x80000000 = 37.50%)

BB#2: derived from LLVM BB %for.body3.lr.ph.preheader
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#1
	%IP<def> = LSL32ri %R3, 2, %STATUS<imp-def,dead>
	%R1<def> = ADDri_r32 %R1<kill>, 8, %STATUS<imp-def,dead>
	%R16<def> = MOViPTR %FP, -40
	%R17<def> = ADDri_r32 %R16, 8, %STATUS<imp-def,dead>
	%R19<def> = MOVi32ri 0, %D9<imp-def>
	%R20<def> = MOVi32rr %R19
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %for.body3.lr.ph
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20
    Predecessors according to CFG: BB#2 BB#11
	%R21<def> = LDRi32_r32 %FP, -8; mem:LD4[FixedStack3]
	GID %CONFIG<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %R21<kill>
	GIE %CONFIG<imp-def,dead>
	%R21<def> = IMULrr_r32 %R20, %R3, %STATUS<imp-def,dead>
	%R21<def> = LSL32ri %R21<kill>, 2, %STATUS<imp-def,dead>
	%R21<def> = ADDrr_r32 %R0, %R21<kill>, %STATUS<imp-def,dead>
	%R22<def> = MOVi32rr %R2
	%R23<def> = MOVi32rr %R1
	%R24<def> = MOVi32rr %R19
    Successors according to CFG: BB#4(?%)

BB#4: derived from LLVM BB %for.body9.preheader
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#3 BB#10
	%R18<def> = MOVi32rr %R19, %D9<imp-use,kill>, %D9<imp-def>
	STRi64 %D9, %FP, -16; mem:ST8[%1+24]
	STRi64 %D9, %FP, -24; mem:ST8[%1+16]
	STRi64 %D9, %FP, -32; mem:ST8[%1+8]
	STRi64 %D9, %FP, -40; mem:ST8[%1]
	%R25<def> = MOVi32rr %R23
	%R26<def> = MOVi32rr %R19
    Successors according to CFG: BB#5(?%)

BB#5: derived from LLVM BB %for.body9
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#4 BB#7
	%R27<def> = LSL32ri %R26, 2, %STATUS<imp-def,dead>
	%R27<def> = ADDrr_r32 %R21, %R27<kill>, %STATUS<imp-def,dead>
	%R27<def> = LDRf32 %R27<kill>, 0; mem:Volatile LD4[%add.ptr10](tbaa=!2)
	%R32<def> = MOVi32rr %R17
	%R34<def> = MOVi32rr %R25
	%R33<def> = MOVi32rr %R19
    Successors according to CFG: BB#6(?%)

BB#6: derived from LLVM BB %for.body13
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26 %R27 %R32 %R33 %R34
    Predecessors according to CFG: BB#5 BB#6
	%R37<def> = LDRf32 %R34, -8; mem:Volatile LD4[%scevgep8](tbaa=!2)
	%R35<def> = ADDri_r32 %R32, 16, %STATUS<imp-def,dead>
	%R36<def> = ADDri_r32 %R34, 16, %STATUS<imp-def,dead>
	%R38<def> = LDRf32 %R34, -4; mem:Volatile LD4[%scevgep9](tbaa=!2)
	%R33<def> = ADDri_r32 %R33<kill>, 4, %STATUS<imp-def,dead>
	%R39<def> = LDRf32 %R34, 0; mem:Volatile LD4[%lsr.iv5](tbaa=!2)
	%R40<def> = LDRf32 %R34<kill>, 4; mem:Volatile LD4[%scevgep7](tbaa=!2)
	%D21<def> = LDRf64 %R32, -8; mem:LD4[%scevgep17](tbaa=!2) LD4[%scevgep15](tbaa=!2)
	%R34<def> = LDRi32_r32 %FP, -4; mem:LD4[FixedStack2]
	GID %CONFIG<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %R34<kill>
	GIE %CONFIG<imp-def,dead>
	%R43<def,tied1> = FMADDrr_r32 %R43<tied0>, %R27, %R37<kill>, %STATUS<imp-def,dead>, %D21<imp-use,kill>, %D21<imp-def>
	%R42<def,tied1> = FMADDrr_r32 %R42<tied0>, %R27, %R38<kill>, %STATUS<imp-def,dead>, %D21<imp-use,kill>, %D21<imp-def>
	%R44<def> = MOVi32rr %R43, %D22<imp-def>
	%R45<def> = MOVi32rr %R42, %D21<imp-use,kill>, %D22<imp-use,kill>, %D22<imp-def>
	STRf64 %D22<kill>, %R32, -8; mem:ST4[%scevgep17](tbaa=!2) ST4[%scevgep15](tbaa=!2)
	%R34<def> = LDRf32 %R32, 0; mem:LD4[%lsr.iv1214](tbaa=!2)
	%R34<def,tied1> = FMADDrr_r32 %R34<kill,tied0>, %R27, %R39<kill>, %STATUS<imp-def,dead>
	STRf32 %R34<kill>, %R32, 0; mem:ST4[%lsr.iv1214](tbaa=!2)
	%R37<def> = LDRf32 %R32, 4; mem:LD4[%scevgep16](tbaa=!2)
	%R37<def,tied1> = FMADDrr_r32 %R37<kill,tied0>, %R27, %R40<kill>, %STATUS<imp-def,dead>
	%R34<def,dead> = CMPri_r32 %R33, 8, %STATUS<imp-def>
	STRf32 %R37<kill>, %R32<kill>, 4; mem:ST4[%scevgep16](tbaa=!2)
	%R32<def> = MOVi32rr %R35<kill>
	%R34<def> = MOVi32rr %R36<kill>
	BCC <BB#6>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#6(0x7c000000 / 0x80000000 = 96.88%) BB#7(0x04000000 / 0x80000000 = 3.12%)

BB#7: derived from LLVM BB %for.end60
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#6
	%R25<def> = ADDrr_r32 %R25<kill>, %IP, %STATUS<imp-def,dead>
	%R26<def> = ADDri_r32 %R26<kill>, 1, %STATUS<imp-def,dead>
	%R27<def,dead> = CMPrr_r32 %R26, %R3, %STATUS<imp-def>
	BCC <BB#5>, 1, %STATUS<imp-use>
    Successors according to CFG: BB#8(0x04000000 / 0x80000000 = 3.12%) BB#5(0x7c000000 / 0x80000000 = 96.88%)

BB#8: derived from LLVM BB %for.cond64.preheader
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#7
	%R25<def> = MOVi32rr %R22
	%R26<def> = MOVi32rr %R19
    Successors according to CFG: BB#9(?%)

BB#9: derived from LLVM BB %for.body66
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#8 BB#9
	%R27<def> = ADDrr_r32 %R16, %R26, %STATUS<imp-def,dead>
	%R33<def> = LDRf32 %R27<kill>, 0; mem:LD4[%sunkaddr30](tbaa=!2)
	%R27<def> = ADDri_r32 %R25, 4, %STATUS<imp-def,dead>
	%R26<def> = ADDri_r32 %R26<kill>, 4, %STATUS<imp-def,dead>
	%R34<def> = LDRf32 %R25, 0; mem:Volatile LD4[%lsr.iv24](tbaa=!2)
	%R32<def> = LDRi32_r32 %FP, -4; mem:LD4[FixedStack2]
	GID %CONFIG<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %R32<kill>
	GIE %CONFIG<imp-def,dead>
	%R33<def> = FADDrr_r32 %R33<kill>, %R34<kill>, %STATUS<imp-def,dead>
	%R32<def,dead> = CMPri_r32 %R26, 32, %STATUS<imp-def>
	STRf32 %R33<kill>, %R25<kill>, 0; mem:Volatile ST4[%lsr.iv24](tbaa=!2)
	%R25<def> = MOVi32rr %R27<kill>
	BCC <BB#9>, 1, %STATUS<imp-use>
    Successors according to CFG: BB#10(0x04000000 / 0x80000000 = 3.12%) BB#9(0x7c000000 / 0x80000000 = 96.88%)

BB#10: derived from LLVM BB %for.end75
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#9
	%R22<def> = ADDri_r32 %R22<kill>, 32, %STATUS<imp-def,dead>
	%R23<def> = ADDri_r32 %R23<kill>, 32, %STATUS<imp-def,dead>
	%R24<def> = ADDri_r32 %R24<kill>, 8, %STATUS<imp-def,dead>
	%R25<def,dead> = CMPrr_r32 %R24, %R3, %STATUS<imp-def>
	BCC <BB#4>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#4(0x7c000000 / 0x80000000 = 96.88%) BB#11(0x04000000 / 0x80000000 = 3.12%)

BB#11: derived from LLVM BB %for.end78
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20
    Predecessors according to CFG: BB#10
	%R2<def> = ADDrr_r32 %R2<kill>, %IP, %STATUS<imp-def,dead>
	%R20<def> = ADDri_r32 %R20<kill>, 1, %STATUS<imp-def,dead>
	%R21<def,dead> = CMPrr_r32 %R20, %R3, %STATUS<imp-def>
	BCC <BB#3>, 1, %STATUS<imp-use>
    Successors according to CFG: BB#12(0x04000000 / 0x80000000 = 3.12%) BB#3(0x7c000000 / 0x80000000 = 96.88%)

BB#12: derived from LLVM BB %for.end81
    Predecessors according to CFG: BB#1 BB#11
	%R0<def> = LDRi32_r32 %FP, -44; mem:LD4[FixedStack1]
	GID
	%CONFIG<def> = MOVTS32_core %R0<kill>
	GIE %CONFIG<imp-use,kill>
	%LR<def> = LDRi64 %SP, 48; flags: FrameSetup
	%SP<def> = ADDri_r32 %SP, 48, %STATUS<imp-def>
	JR32 %LR

# End machine code for function matmac.


<----------------->
Analyzing block 11
BB#11: derived from LLVM BB %for.end78
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20
    Predecessors according to CFG: BB#10
	%R2<def> = ADDrr_r32 %R2<kill>, %IP, %STATUS<imp-def,dead>
	%R20<def> = ADDri_r32 %R20<kill>, 1, %STATUS<imp-def,dead>
	%R21<def,dead> = CMPrr_r32 %R20, %R3, %STATUS<imp-def>
	BCC <BB#3>, 1, %STATUS<imp-use>
    Successors according to CFG: BB#12(0x04000000 / 0x80000000 = 3.12%) BB#3(0x7c000000 / 0x80000000 = 96.88%)

TryTailMergeBlocks: BB#1, BB#11
  with successor BB#12
  which has fall-through from BB#11
Looking for common tails of at least 3 instructions

<----------------->
Analyzing block 1
BB#1: derived from LLVM BB %entry
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#0
	%IP<def,dead> = CMPri_r32 %R3, 1, %STATUS<imp-def>
	BCC <BB#2>, 7, %STATUS<imp-use>
    Successors according to CFG: BB#2(0x50000000 / 0x80000000 = 62.50%) BB#12(0x30000000 / 0x80000000 = 37.50%)

<----------------->
Removing branches out of BB#1
# Machine code for function matmac: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=32, align=8, at location [SP-40]
  fi#1: size=4, align=4, at location [SP-44]
  fi#2: size=4, align=4, at location [SP-4]
  fi#3: size=4, align=8, at location [SP-8]
Function Live Ins: %R0, %R1, %R2, %R3

BB#0: 
    Live Ins: %R0 %R1 %R2 %R3
	%SP<def,tied2> = STRi64_pmd %LR, %SP<tied0>, -48; flags: FrameSetup
	%FP<def> = ADDri_r32 %SP, 48, %STATUS<imp-def>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	GID %CONFIG<imp-def>
	%R19<def> = MOVFS32_core %CONFIG, %D9<imp-def>
	STRi32_r32 %R19, %FP, -44; mem:ST4[FixedStack1]
	%IP<def> = MOVi32ri 65535
	%IP<def,tied1> = MOVTi32ri %IP<kill,tied0>, 65521
	%R18<def> = ANDrr_r32 %R19, %IP<kill>, %STATUS<imp-def>, %D9<imp-use,kill>, %D9<imp-def>
	%R19<def,tied1> = MOVTi32ri %R19<tied0>, 72, %D9<imp-use,kill>, %D9<imp-def>
	STRi64 %D9<kill>, %FP, -8; mem:ST4[FixedStack3] ST4[FixedStack2]
	GIE %CONFIG<imp-use,kill>
    Successors according to CFG: BB#1(?%)

BB#1: derived from LLVM BB %entry
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#0
	%IP<def,dead> = CMPri_r32 %R3, 1, %STATUS<imp-def>
    Successors according to CFG: BB#2(0x50000000 / 0x80000000 = 62.50%) BB#12(0x30000000 / 0x80000000 = 37.50%)

BB#2: derived from LLVM BB %for.body3.lr.ph.preheader
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#1
	%IP<def> = LSL32ri %R3, 2, %STATUS<imp-def,dead>
	%R1<def> = ADDri_r32 %R1<kill>, 8, %STATUS<imp-def,dead>
	%R16<def> = MOViPTR %FP, -40
	%R17<def> = ADDri_r32 %R16, 8, %STATUS<imp-def,dead>
	%R19<def> = MOVi32ri 0, %D9<imp-def>
	%R20<def> = MOVi32rr %R19
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %for.body3.lr.ph
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20
    Predecessors according to CFG: BB#2 BB#11
	%R21<def> = LDRi32_r32 %FP, -8; mem:LD4[FixedStack3]
	GID %CONFIG<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %R21<kill>
	GIE %CONFIG<imp-def,dead>
	%R21<def> = IMULrr_r32 %R20, %R3, %STATUS<imp-def,dead>
	%R21<def> = LSL32ri %R21<kill>, 2, %STATUS<imp-def,dead>
	%R21<def> = ADDrr_r32 %R0, %R21<kill>, %STATUS<imp-def,dead>
	%R22<def> = MOVi32rr %R2
	%R23<def> = MOVi32rr %R1
	%R24<def> = MOVi32rr %R19
    Successors according to CFG: BB#4(?%)

BB#4: derived from LLVM BB %for.body9.preheader
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#3 BB#10
	%R18<def> = MOVi32rr %R19, %D9<imp-use,kill>, %D9<imp-def>
	STRi64 %D9, %FP, -16; mem:ST8[%1+24]
	STRi64 %D9, %FP, -24; mem:ST8[%1+16]
	STRi64 %D9, %FP, -32; mem:ST8[%1+8]
	STRi64 %D9, %FP, -40; mem:ST8[%1]
	%R25<def> = MOVi32rr %R23
	%R26<def> = MOVi32rr %R19
    Successors according to CFG: BB#5(?%)

BB#5: derived from LLVM BB %for.body9
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#4 BB#7
	%R27<def> = LSL32ri %R26, 2, %STATUS<imp-def,dead>
	%R27<def> = ADDrr_r32 %R21, %R27<kill>, %STATUS<imp-def,dead>
	%R27<def> = LDRf32 %R27<kill>, 0; mem:Volatile LD4[%add.ptr10](tbaa=!2)
	%R32<def> = MOVi32rr %R17
	%R34<def> = MOVi32rr %R25
	%R33<def> = MOVi32rr %R19
    Successors according to CFG: BB#6(?%)

BB#6: derived from LLVM BB %for.body13
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26 %R27 %R32 %R33 %R34
    Predecessors according to CFG: BB#5 BB#6
	%R37<def> = LDRf32 %R34, -8; mem:Volatile LD4[%scevgep8](tbaa=!2)
	%R35<def> = ADDri_r32 %R32, 16, %STATUS<imp-def,dead>
	%R36<def> = ADDri_r32 %R34, 16, %STATUS<imp-def,dead>
	%R38<def> = LDRf32 %R34, -4; mem:Volatile LD4[%scevgep9](tbaa=!2)
	%R33<def> = ADDri_r32 %R33<kill>, 4, %STATUS<imp-def,dead>
	%R39<def> = LDRf32 %R34, 0; mem:Volatile LD4[%lsr.iv5](tbaa=!2)
	%R40<def> = LDRf32 %R34<kill>, 4; mem:Volatile LD4[%scevgep7](tbaa=!2)
	%D21<def> = LDRf64 %R32, -8; mem:LD4[%scevgep17](tbaa=!2) LD4[%scevgep15](tbaa=!2)
	%R34<def> = LDRi32_r32 %FP, -4; mem:LD4[FixedStack2]
	GID %CONFIG<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %R34<kill>
	GIE %CONFIG<imp-def,dead>
	%R43<def,tied1> = FMADDrr_r32 %R43<tied0>, %R27, %R37<kill>, %STATUS<imp-def,dead>, %D21<imp-use,kill>, %D21<imp-def>
	%R42<def,tied1> = FMADDrr_r32 %R42<tied0>, %R27, %R38<kill>, %STATUS<imp-def,dead>, %D21<imp-use,kill>, %D21<imp-def>
	%R44<def> = MOVi32rr %R43, %D22<imp-def>
	%R45<def> = MOVi32rr %R42, %D21<imp-use,kill>, %D22<imp-use,kill>, %D22<imp-def>
	STRf64 %D22<kill>, %R32, -8; mem:ST4[%scevgep17](tbaa=!2) ST4[%scevgep15](tbaa=!2)
	%R34<def> = LDRf32 %R32, 0; mem:LD4[%lsr.iv1214](tbaa=!2)
	%R34<def,tied1> = FMADDrr_r32 %R34<kill,tied0>, %R27, %R39<kill>, %STATUS<imp-def,dead>
	STRf32 %R34<kill>, %R32, 0; mem:ST4[%lsr.iv1214](tbaa=!2)
	%R37<def> = LDRf32 %R32, 4; mem:LD4[%scevgep16](tbaa=!2)
	%R37<def,tied1> = FMADDrr_r32 %R37<kill,tied0>, %R27, %R40<kill>, %STATUS<imp-def,dead>
	%R34<def,dead> = CMPri_r32 %R33, 8, %STATUS<imp-def>
	STRf32 %R37<kill>, %R32<kill>, 4; mem:ST4[%scevgep16](tbaa=!2)
	%R32<def> = MOVi32rr %R35<kill>
	%R34<def> = MOVi32rr %R36<kill>
	BCC <BB#6>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#6(0x7c000000 / 0x80000000 = 96.88%) BB#7(0x04000000 / 0x80000000 = 3.12%)

BB#7: derived from LLVM BB %for.end60
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#6
	%R25<def> = ADDrr_r32 %R25<kill>, %IP, %STATUS<imp-def,dead>
	%R26<def> = ADDri_r32 %R26<kill>, 1, %STATUS<imp-def,dead>
	%R27<def,dead> = CMPrr_r32 %R26, %R3, %STATUS<imp-def>
	BCC <BB#5>, 1, %STATUS<imp-use>
    Successors according to CFG: BB#8(0x04000000 / 0x80000000 = 3.12%) BB#5(0x7c000000 / 0x80000000 = 96.88%)

BB#8: derived from LLVM BB %for.cond64.preheader
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#7
	%R25<def> = MOVi32rr %R22
	%R26<def> = MOVi32rr %R19
    Successors according to CFG: BB#9(?%)

BB#9: derived from LLVM BB %for.body66
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#8 BB#9
	%R27<def> = ADDrr_r32 %R16, %R26, %STATUS<imp-def,dead>
	%R33<def> = LDRf32 %R27<kill>, 0; mem:LD4[%sunkaddr30](tbaa=!2)
	%R27<def> = ADDri_r32 %R25, 4, %STATUS<imp-def,dead>
	%R26<def> = ADDri_r32 %R26<kill>, 4, %STATUS<imp-def,dead>
	%R34<def> = LDRf32 %R25, 0; mem:Volatile LD4[%lsr.iv24](tbaa=!2)
	%R32<def> = LDRi32_r32 %FP, -4; mem:LD4[FixedStack2]
	GID %CONFIG<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %R32<kill>
	GIE %CONFIG<imp-def,dead>
	%R33<def> = FADDrr_r32 %R33<kill>, %R34<kill>, %STATUS<imp-def,dead>
	%R32<def,dead> = CMPri_r32 %R26, 32, %STATUS<imp-def>
	STRf32 %R33<kill>, %R25<kill>, 0; mem:Volatile ST4[%lsr.iv24](tbaa=!2)
	%R25<def> = MOVi32rr %R27<kill>
	BCC <BB#9>, 1, %STATUS<imp-use>
    Successors according to CFG: BB#10(0x04000000 / 0x80000000 = 3.12%) BB#9(0x7c000000 / 0x80000000 = 96.88%)

BB#10: derived from LLVM BB %for.end75
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#9
	%R22<def> = ADDri_r32 %R22<kill>, 32, %STATUS<imp-def,dead>
	%R23<def> = ADDri_r32 %R23<kill>, 32, %STATUS<imp-def,dead>
	%R24<def> = ADDri_r32 %R24<kill>, 8, %STATUS<imp-def,dead>
	%R25<def,dead> = CMPrr_r32 %R24, %R3, %STATUS<imp-def>
	BCC <BB#4>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#4(0x7c000000 / 0x80000000 = 96.88%) BB#11(0x04000000 / 0x80000000 = 3.12%)

BB#11: derived from LLVM BB %for.end78
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20
    Predecessors according to CFG: BB#10
	%R2<def> = ADDrr_r32 %R2<kill>, %IP, %STATUS<imp-def,dead>
	%R20<def> = ADDri_r32 %R20<kill>, 1, %STATUS<imp-def,dead>
	%R21<def,dead> = CMPrr_r32 %R20, %R3, %STATUS<imp-def>
	BCC <BB#3>, 1, %STATUS<imp-use>
    Successors according to CFG: BB#12(0x04000000 / 0x80000000 = 3.12%) BB#3(0x7c000000 / 0x80000000 = 96.88%)

BB#12: derived from LLVM BB %for.end81
    Predecessors according to CFG: BB#1 BB#11
	%R0<def> = LDRi32_r32 %FP, -44; mem:LD4[FixedStack1]
	GID
	%CONFIG<def> = MOVTS32_core %R0<kill>
	GIE %CONFIG<imp-use,kill>
	%LR<def> = LDRi64 %SP, 48; flags: FrameSetup
	%SP<def> = ADDri_r32 %SP, 48, %STATUS<imp-def>
	JR32 %LR

# End machine code for function matmac.


<----------------->
Inserting branch into BB#1
# Machine code for function matmac: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=32, align=8, at location [SP-40]
  fi#1: size=4, align=4, at location [SP-44]
  fi#2: size=4, align=4, at location [SP-4]
  fi#3: size=4, align=8, at location [SP-8]
Function Live Ins: %R0, %R1, %R2, %R3

BB#0: 
    Live Ins: %R0 %R1 %R2 %R3
	%SP<def,tied2> = STRi64_pmd %LR, %SP<tied0>, -48; flags: FrameSetup
	%FP<def> = ADDri_r32 %SP, 48, %STATUS<imp-def>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	GID %CONFIG<imp-def>
	%R19<def> = MOVFS32_core %CONFIG, %D9<imp-def>
	STRi32_r32 %R19, %FP, -44; mem:ST4[FixedStack1]
	%IP<def> = MOVi32ri 65535
	%IP<def,tied1> = MOVTi32ri %IP<kill,tied0>, 65521
	%R18<def> = ANDrr_r32 %R19, %IP<kill>, %STATUS<imp-def>, %D9<imp-use,kill>, %D9<imp-def>
	%R19<def,tied1> = MOVTi32ri %R19<tied0>, 72, %D9<imp-use,kill>, %D9<imp-def>
	STRi64 %D9<kill>, %FP, -8; mem:ST4[FixedStack3] ST4[FixedStack2]
	GIE %CONFIG<imp-use,kill>
    Successors according to CFG: BB#1(?%)

BB#1: derived from LLVM BB %entry
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#0
	%IP<def,dead> = CMPri_r32 %R3, 1, %STATUS<imp-def>
	BCC <BB#12>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#2(0x50000000 / 0x80000000 = 62.50%) BB#12(0x30000000 / 0x80000000 = 37.50%)

BB#2: derived from LLVM BB %for.body3.lr.ph.preheader
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#1
	%IP<def> = LSL32ri %R3, 2, %STATUS<imp-def,dead>
	%R1<def> = ADDri_r32 %R1<kill>, 8, %STATUS<imp-def,dead>
	%R16<def> = MOViPTR %FP, -40
	%R17<def> = ADDri_r32 %R16, 8, %STATUS<imp-def,dead>
	%R19<def> = MOVi32ri 0, %D9<imp-def>
	%R20<def> = MOVi32rr %R19
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %for.body3.lr.ph
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20
    Predecessors according to CFG: BB#2 BB#11
	%R21<def> = LDRi32_r32 %FP, -8; mem:LD4[FixedStack3]
	GID %CONFIG<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %R21<kill>
	GIE %CONFIG<imp-def,dead>
	%R21<def> = IMULrr_r32 %R20, %R3, %STATUS<imp-def,dead>
	%R21<def> = LSL32ri %R21<kill>, 2, %STATUS<imp-def,dead>
	%R21<def> = ADDrr_r32 %R0, %R21<kill>, %STATUS<imp-def,dead>
	%R22<def> = MOVi32rr %R2
	%R23<def> = MOVi32rr %R1
	%R24<def> = MOVi32rr %R19
    Successors according to CFG: BB#4(?%)

BB#4: derived from LLVM BB %for.body9.preheader
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#3 BB#10
	%R18<def> = MOVi32rr %R19, %D9<imp-use,kill>, %D9<imp-def>
	STRi64 %D9, %FP, -16; mem:ST8[%1+24]
	STRi64 %D9, %FP, -24; mem:ST8[%1+16]
	STRi64 %D9, %FP, -32; mem:ST8[%1+8]
	STRi64 %D9, %FP, -40; mem:ST8[%1]
	%R25<def> = MOVi32rr %R23
	%R26<def> = MOVi32rr %R19
    Successors according to CFG: BB#5(?%)

BB#5: derived from LLVM BB %for.body9
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#4 BB#7
	%R27<def> = LSL32ri %R26, 2, %STATUS<imp-def,dead>
	%R27<def> = ADDrr_r32 %R21, %R27<kill>, %STATUS<imp-def,dead>
	%R27<def> = LDRf32 %R27<kill>, 0; mem:Volatile LD4[%add.ptr10](tbaa=!2)
	%R32<def> = MOVi32rr %R17
	%R34<def> = MOVi32rr %R25
	%R33<def> = MOVi32rr %R19
    Successors according to CFG: BB#6(?%)

BB#6: derived from LLVM BB %for.body13
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26 %R27 %R32 %R33 %R34
    Predecessors according to CFG: BB#5 BB#6
	%R37<def> = LDRf32 %R34, -8; mem:Volatile LD4[%scevgep8](tbaa=!2)
	%R35<def> = ADDri_r32 %R32, 16, %STATUS<imp-def,dead>
	%R36<def> = ADDri_r32 %R34, 16, %STATUS<imp-def,dead>
	%R38<def> = LDRf32 %R34, -4; mem:Volatile LD4[%scevgep9](tbaa=!2)
	%R33<def> = ADDri_r32 %R33<kill>, 4, %STATUS<imp-def,dead>
	%R39<def> = LDRf32 %R34, 0; mem:Volatile LD4[%lsr.iv5](tbaa=!2)
	%R40<def> = LDRf32 %R34<kill>, 4; mem:Volatile LD4[%scevgep7](tbaa=!2)
	%D21<def> = LDRf64 %R32, -8; mem:LD4[%scevgep17](tbaa=!2) LD4[%scevgep15](tbaa=!2)
	%R34<def> = LDRi32_r32 %FP, -4; mem:LD4[FixedStack2]
	GID %CONFIG<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %R34<kill>
	GIE %CONFIG<imp-def,dead>
	%R43<def,tied1> = FMADDrr_r32 %R43<tied0>, %R27, %R37<kill>, %STATUS<imp-def,dead>, %D21<imp-use,kill>, %D21<imp-def>
	%R42<def,tied1> = FMADDrr_r32 %R42<tied0>, %R27, %R38<kill>, %STATUS<imp-def,dead>, %D21<imp-use,kill>, %D21<imp-def>
	%R44<def> = MOVi32rr %R43, %D22<imp-def>
	%R45<def> = MOVi32rr %R42, %D21<imp-use,kill>, %D22<imp-use,kill>, %D22<imp-def>
	STRf64 %D22<kill>, %R32, -8; mem:ST4[%scevgep17](tbaa=!2) ST4[%scevgep15](tbaa=!2)
	%R34<def> = LDRf32 %R32, 0; mem:LD4[%lsr.iv1214](tbaa=!2)
	%R34<def,tied1> = FMADDrr_r32 %R34<kill,tied0>, %R27, %R39<kill>, %STATUS<imp-def,dead>
	STRf32 %R34<kill>, %R32, 0; mem:ST4[%lsr.iv1214](tbaa=!2)
	%R37<def> = LDRf32 %R32, 4; mem:LD4[%scevgep16](tbaa=!2)
	%R37<def,tied1> = FMADDrr_r32 %R37<kill,tied0>, %R27, %R40<kill>, %STATUS<imp-def,dead>
	%R34<def,dead> = CMPri_r32 %R33, 8, %STATUS<imp-def>
	STRf32 %R37<kill>, %R32<kill>, 4; mem:ST4[%scevgep16](tbaa=!2)
	%R32<def> = MOVi32rr %R35<kill>
	%R34<def> = MOVi32rr %R36<kill>
	BCC <BB#6>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#6(0x7c000000 / 0x80000000 = 96.88%) BB#7(0x04000000 / 0x80000000 = 3.12%)

BB#7: derived from LLVM BB %for.end60
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#6
	%R25<def> = ADDrr_r32 %R25<kill>, %IP, %STATUS<imp-def,dead>
	%R26<def> = ADDri_r32 %R26<kill>, 1, %STATUS<imp-def,dead>
	%R27<def,dead> = CMPrr_r32 %R26, %R3, %STATUS<imp-def>
	BCC <BB#5>, 1, %STATUS<imp-use>
    Successors according to CFG: BB#8(0x04000000 / 0x80000000 = 3.12%) BB#5(0x7c000000 / 0x80000000 = 96.88%)

BB#8: derived from LLVM BB %for.cond64.preheader
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#7
	%R25<def> = MOVi32rr %R22
	%R26<def> = MOVi32rr %R19
    Successors according to CFG: BB#9(?%)

BB#9: derived from LLVM BB %for.body66
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#8 BB#9
	%R27<def> = ADDrr_r32 %R16, %R26, %STATUS<imp-def,dead>
	%R33<def> = LDRf32 %R27<kill>, 0; mem:LD4[%sunkaddr30](tbaa=!2)
	%R27<def> = ADDri_r32 %R25, 4, %STATUS<imp-def,dead>
	%R26<def> = ADDri_r32 %R26<kill>, 4, %STATUS<imp-def,dead>
	%R34<def> = LDRf32 %R25, 0; mem:Volatile LD4[%lsr.iv24](tbaa=!2)
	%R32<def> = LDRi32_r32 %FP, -4; mem:LD4[FixedStack2]
	GID %CONFIG<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %R32<kill>
	GIE %CONFIG<imp-def,dead>
	%R33<def> = FADDrr_r32 %R33<kill>, %R34<kill>, %STATUS<imp-def,dead>
	%R32<def,dead> = CMPri_r32 %R26, 32, %STATUS<imp-def>
	STRf32 %R33<kill>, %R25<kill>, 0; mem:Volatile ST4[%lsr.iv24](tbaa=!2)
	%R25<def> = MOVi32rr %R27<kill>
	BCC <BB#9>, 1, %STATUS<imp-use>
    Successors according to CFG: BB#10(0x04000000 / 0x80000000 = 3.12%) BB#9(0x7c000000 / 0x80000000 = 96.88%)

BB#10: derived from LLVM BB %for.end75
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#9
	%R22<def> = ADDri_r32 %R22<kill>, 32, %STATUS<imp-def,dead>
	%R23<def> = ADDri_r32 %R23<kill>, 32, %STATUS<imp-def,dead>
	%R24<def> = ADDri_r32 %R24<kill>, 8, %STATUS<imp-def,dead>
	%R25<def,dead> = CMPrr_r32 %R24, %R3, %STATUS<imp-def>
	BCC <BB#4>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#4(0x7c000000 / 0x80000000 = 96.88%) BB#11(0x04000000 / 0x80000000 = 3.12%)

BB#11: derived from LLVM BB %for.end78
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20
    Predecessors according to CFG: BB#10
	%R2<def> = ADDrr_r32 %R2<kill>, %IP, %STATUS<imp-def,dead>
	%R20<def> = ADDri_r32 %R20<kill>, 1, %STATUS<imp-def,dead>
	%R21<def,dead> = CMPrr_r32 %R20, %R3, %STATUS<imp-def>
	BCC <BB#3>, 1, %STATUS<imp-use>
    Successors according to CFG: BB#12(0x04000000 / 0x80000000 = 3.12%) BB#3(0x7c000000 / 0x80000000 = 96.88%)

BB#12: derived from LLVM BB %for.end81
    Predecessors according to CFG: BB#1 BB#11
	%R0<def> = LDRi32_r32 %FP, -44; mem:LD4[FixedStack1]
	GID
	%CONFIG<def> = MOVTS32_core %R0<kill>
	GIE %CONFIG<imp-use,kill>
	%LR<def> = LDRi64 %SP, 48; flags: FrameSetup
	%SP<def> = ADDri_r32 %SP, 48, %STATUS<imp-def>
	JR32 %LR

# End machine code for function matmac.


<----------------->
Analyzing block 0
BB#0: 
    Live Ins: %R0 %R1 %R2 %R3
	%SP<def,tied2> = STRi64_pmd %LR, %SP<tied0>, -48; flags: FrameSetup
	%FP<def> = ADDri_r32 %SP, 48, %STATUS<imp-def>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	GID %CONFIG<imp-def>
	%R19<def> = MOVFS32_core %CONFIG, %D9<imp-def>
	STRi32_r32 %R19, %FP, -44; mem:ST4[FixedStack1]
	%IP<def> = MOVi32ri 65535
	%IP<def,tied1> = MOVTi32ri %IP<kill,tied0>, 65521
	%R18<def> = ANDrr_r32 %R19, %IP<kill>, %STATUS<imp-def>, %D9<imp-use,kill>, %D9<imp-def>
	%R19<def,tied1> = MOVTi32ri %R19<tied0>, 72, %D9<imp-use,kill>, %D9<imp-def>
	STRi64 %D9<kill>, %FP, -8; mem:ST4[FixedStack3] ST4[FixedStack2]
	GIE %CONFIG<imp-use,kill>
    Successors according to CFG: BB#1(?%)

<----------------->
Analyzing block 1
BB#1: derived from LLVM BB %entry
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#0
	%IP<def,dead> = CMPri_r32 %R3, 1, %STATUS<imp-def>
	BCC <BB#12>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#2(0x50000000 / 0x80000000 = 62.50%) BB#12(0x30000000 / 0x80000000 = 37.50%)

<----------------->
Analyzing block 0
BB#0: 
    Live Ins: %R0 %R1 %R2 %R3
	%SP<def,tied2> = STRi64_pmd %LR, %SP<tied0>, -48; flags: FrameSetup
	%FP<def> = ADDri_r32 %SP, 48, %STATUS<imp-def>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	GID %CONFIG<imp-def>
	%R19<def> = MOVFS32_core %CONFIG, %D9<imp-def>
	STRi32_r32 %R19, %FP, -44; mem:ST4[FixedStack1]
	%IP<def> = MOVi32ri 65535
	%IP<def,tied1> = MOVTi32ri %IP<kill,tied0>, 65521
	%R18<def> = ANDrr_r32 %R19, %IP<kill>, %STATUS<imp-def>, %D9<imp-use,kill>, %D9<imp-def>
	%R19<def,tied1> = MOVTi32ri %R19<tied0>, 72, %D9<imp-use,kill>, %D9<imp-def>
	STRi64 %D9<kill>, %FP, -8; mem:ST4[FixedStack3] ST4[FixedStack2]
	GIE %CONFIG<imp-use,kill>
    Successors according to CFG: BB#1(?%)

<----------------->
Analyzing block 1
BB#1: derived from LLVM BB %entry
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#0
	%IP<def,dead> = CMPri_r32 %R3, 1, %STATUS<imp-def>
	BCC <BB#12>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#2(0x50000000 / 0x80000000 = 62.50%) BB#12(0x30000000 / 0x80000000 = 37.50%)

<----------------->
Analyzing block 0
BB#0: 
    Live Ins: %R0 %R1 %R2 %R3
	%SP<def,tied2> = STRi64_pmd %LR, %SP<tied0>, -48; flags: FrameSetup
	%FP<def> = ADDri_r32 %SP, 48, %STATUS<imp-def>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	GID %CONFIG<imp-def>
	%R19<def> = MOVFS32_core %CONFIG, %D9<imp-def>
	STRi32_r32 %R19, %FP, -44; mem:ST4[FixedStack1]
	%IP<def> = MOVi32ri 65535
	%IP<def,tied1> = MOVTi32ri %IP<kill,tied0>, 65521
	%R18<def> = ANDrr_r32 %R19, %IP<kill>, %STATUS<imp-def>, %D9<imp-use,kill>, %D9<imp-def>
	%R19<def,tied1> = MOVTi32ri %R19<tied0>, 72, %D9<imp-use,kill>, %D9<imp-def>
	STRi64 %D9<kill>, %FP, -8; mem:ST4[FixedStack3] ST4[FixedStack2]
	GIE %CONFIG<imp-use,kill>
    Successors according to CFG: BB#1(?%)

<----------------->
Analyzing block 0
BB#0: 
    Live Ins: %R0 %R1 %R2 %R3
	%SP<def,tied2> = STRi64_pmd %LR, %SP<tied0>, -48; flags: FrameSetup
	%FP<def> = ADDri_r32 %SP, 48, %STATUS<imp-def>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	GID %CONFIG<imp-def>
	%R19<def> = MOVFS32_core %CONFIG, %D9<imp-def>
	STRi32_r32 %R19, %FP, -44; mem:ST4[FixedStack1]
	%IP<def> = MOVi32ri 65535
	%IP<def,tied1> = MOVTi32ri %IP<kill,tied0>, 65521
	%R18<def> = ANDrr_r32 %R19, %IP<kill>, %STATUS<imp-def>, %D9<imp-use,kill>, %D9<imp-def>
	%R19<def,tied1> = MOVTi32ri %R19<tied0>, 72, %D9<imp-use,kill>, %D9<imp-def>
	STRi64 %D9<kill>, %FP, -8; mem:ST4[FixedStack3] ST4[FixedStack2]
	GIE %CONFIG<imp-use,kill>
    Successors according to CFG: BB#1(?%)

<----------------->
Analyzing block 1
BB#1: derived from LLVM BB %entry
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#0
	%IP<def,dead> = CMPri_r32 %R3, 1, %STATUS<imp-def>
	BCC <BB#12>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#2(0x50000000 / 0x80000000 = 62.50%) BB#12(0x30000000 / 0x80000000 = 37.50%)

<----------------->
Analyzing block 2
BB#2: derived from LLVM BB %for.body3.lr.ph.preheader
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#1
	%IP<def> = LSL32ri %R3, 2, %STATUS<imp-def,dead>
	%R1<def> = ADDri_r32 %R1<kill>, 8, %STATUS<imp-def,dead>
	%R16<def> = MOViPTR %FP, -40
	%R17<def> = ADDri_r32 %R16, 8, %STATUS<imp-def,dead>
	%R19<def> = MOVi32ri 0, %D9<imp-def>
	%R20<def> = MOVi32rr %R19
    Successors according to CFG: BB#3(?%)

<----------------->
Analyzing block 1
BB#1: derived from LLVM BB %entry
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#0
	%IP<def,dead> = CMPri_r32 %R3, 1, %STATUS<imp-def>
	BCC <BB#12>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#2(0x50000000 / 0x80000000 = 62.50%) BB#12(0x30000000 / 0x80000000 = 37.50%)

<----------------->
Analyzing block 2
BB#2: derived from LLVM BB %for.body3.lr.ph.preheader
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#1
	%IP<def> = LSL32ri %R3, 2, %STATUS<imp-def,dead>
	%R1<def> = ADDri_r32 %R1<kill>, 8, %STATUS<imp-def,dead>
	%R16<def> = MOViPTR %FP, -40
	%R17<def> = ADDri_r32 %R16, 8, %STATUS<imp-def,dead>
	%R19<def> = MOVi32ri 0, %D9<imp-def>
	%R20<def> = MOVi32rr %R19
    Successors according to CFG: BB#3(?%)

<----------------->
Analyzing block 3
BB#3: derived from LLVM BB %for.body3.lr.ph
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20
    Predecessors according to CFG: BB#2 BB#11
	%R21<def> = LDRi32_r32 %FP, -8; mem:LD4[FixedStack3]
	GID %CONFIG<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %R21<kill>
	GIE %CONFIG<imp-def,dead>
	%R21<def> = IMULrr_r32 %R20, %R3, %STATUS<imp-def,dead>
	%R21<def> = LSL32ri %R21<kill>, 2, %STATUS<imp-def,dead>
	%R21<def> = ADDrr_r32 %R0, %R21<kill>, %STATUS<imp-def,dead>
	%R22<def> = MOVi32rr %R2
	%R23<def> = MOVi32rr %R1
	%R24<def> = MOVi32rr %R19
    Successors according to CFG: BB#4(?%)

<----------------->
Analyzing block 2
BB#2: derived from LLVM BB %for.body3.lr.ph.preheader
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#1
	%IP<def> = LSL32ri %R3, 2, %STATUS<imp-def,dead>
	%R1<def> = ADDri_r32 %R1<kill>, 8, %STATUS<imp-def,dead>
	%R16<def> = MOViPTR %FP, -40
	%R17<def> = ADDri_r32 %R16, 8, %STATUS<imp-def,dead>
	%R19<def> = MOVi32ri 0, %D9<imp-def>
	%R20<def> = MOVi32rr %R19
    Successors according to CFG: BB#3(?%)

<----------------->
Analyzing block 3
BB#3: derived from LLVM BB %for.body3.lr.ph
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20
    Predecessors according to CFG: BB#2 BB#11
	%R21<def> = LDRi32_r32 %FP, -8; mem:LD4[FixedStack3]
	GID %CONFIG<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %R21<kill>
	GIE %CONFIG<imp-def,dead>
	%R21<def> = IMULrr_r32 %R20, %R3, %STATUS<imp-def,dead>
	%R21<def> = LSL32ri %R21<kill>, 2, %STATUS<imp-def,dead>
	%R21<def> = ADDrr_r32 %R0, %R21<kill>, %STATUS<imp-def,dead>
	%R22<def> = MOVi32rr %R2
	%R23<def> = MOVi32rr %R1
	%R24<def> = MOVi32rr %R19
    Successors according to CFG: BB#4(?%)

<----------------->
Analyzing block 4
BB#4: derived from LLVM BB %for.body9.preheader
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#3 BB#10
	%R18<def> = MOVi32rr %R19, %D9<imp-use,kill>, %D9<imp-def>
	STRi64 %D9, %FP, -16; mem:ST8[%1+24]
	STRi64 %D9, %FP, -24; mem:ST8[%1+16]
	STRi64 %D9, %FP, -32; mem:ST8[%1+8]
	STRi64 %D9, %FP, -40; mem:ST8[%1]
	%R25<def> = MOVi32rr %R23
	%R26<def> = MOVi32rr %R19
    Successors according to CFG: BB#5(?%)

<----------------->
Analyzing block 3
BB#3: derived from LLVM BB %for.body3.lr.ph
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20
    Predecessors according to CFG: BB#2 BB#11
	%R21<def> = LDRi32_r32 %FP, -8; mem:LD4[FixedStack3]
	GID %CONFIG<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %R21<kill>
	GIE %CONFIG<imp-def,dead>
	%R21<def> = IMULrr_r32 %R20, %R3, %STATUS<imp-def,dead>
	%R21<def> = LSL32ri %R21<kill>, 2, %STATUS<imp-def,dead>
	%R21<def> = ADDrr_r32 %R0, %R21<kill>, %STATUS<imp-def,dead>
	%R22<def> = MOVi32rr %R2
	%R23<def> = MOVi32rr %R1
	%R24<def> = MOVi32rr %R19
    Successors according to CFG: BB#4(?%)

<----------------->
Analyzing block 4
BB#4: derived from LLVM BB %for.body9.preheader
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#3 BB#10
	%R18<def> = MOVi32rr %R19, %D9<imp-use,kill>, %D9<imp-def>
	STRi64 %D9, %FP, -16; mem:ST8[%1+24]
	STRi64 %D9, %FP, -24; mem:ST8[%1+16]
	STRi64 %D9, %FP, -32; mem:ST8[%1+8]
	STRi64 %D9, %FP, -40; mem:ST8[%1]
	%R25<def> = MOVi32rr %R23
	%R26<def> = MOVi32rr %R19
    Successors according to CFG: BB#5(?%)

<----------------->
Analyzing block 5
BB#5: derived from LLVM BB %for.body9
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#4 BB#7
	%R27<def> = LSL32ri %R26, 2, %STATUS<imp-def,dead>
	%R27<def> = ADDrr_r32 %R21, %R27<kill>, %STATUS<imp-def,dead>
	%R27<def> = LDRf32 %R27<kill>, 0; mem:Volatile LD4[%add.ptr10](tbaa=!2)
	%R32<def> = MOVi32rr %R17
	%R34<def> = MOVi32rr %R25
	%R33<def> = MOVi32rr %R19
    Successors according to CFG: BB#6(?%)

<----------------->
Analyzing block 4
BB#4: derived from LLVM BB %for.body9.preheader
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#3 BB#10
	%R18<def> = MOVi32rr %R19, %D9<imp-use,kill>, %D9<imp-def>
	STRi64 %D9, %FP, -16; mem:ST8[%1+24]
	STRi64 %D9, %FP, -24; mem:ST8[%1+16]
	STRi64 %D9, %FP, -32; mem:ST8[%1+8]
	STRi64 %D9, %FP, -40; mem:ST8[%1]
	%R25<def> = MOVi32rr %R23
	%R26<def> = MOVi32rr %R19
    Successors according to CFG: BB#5(?%)

<----------------->
Analyzing block 5
BB#5: derived from LLVM BB %for.body9
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#4 BB#7
	%R27<def> = LSL32ri %R26, 2, %STATUS<imp-def,dead>
	%R27<def> = ADDrr_r32 %R21, %R27<kill>, %STATUS<imp-def,dead>
	%R27<def> = LDRf32 %R27<kill>, 0; mem:Volatile LD4[%add.ptr10](tbaa=!2)
	%R32<def> = MOVi32rr %R17
	%R34<def> = MOVi32rr %R25
	%R33<def> = MOVi32rr %R19
    Successors according to CFG: BB#6(?%)

<----------------->
Analyzing block 6
BB#6: derived from LLVM BB %for.body13
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26 %R27 %R32 %R33 %R34
    Predecessors according to CFG: BB#5 BB#6
	%R37<def> = LDRf32 %R34, -8; mem:Volatile LD4[%scevgep8](tbaa=!2)
	%R35<def> = ADDri_r32 %R32, 16, %STATUS<imp-def,dead>
	%R36<def> = ADDri_r32 %R34, 16, %STATUS<imp-def,dead>
	%R38<def> = LDRf32 %R34, -4; mem:Volatile LD4[%scevgep9](tbaa=!2)
	%R33<def> = ADDri_r32 %R33<kill>, 4, %STATUS<imp-def,dead>
	%R39<def> = LDRf32 %R34, 0; mem:Volatile LD4[%lsr.iv5](tbaa=!2)
	%R40<def> = LDRf32 %R34<kill>, 4; mem:Volatile LD4[%scevgep7](tbaa=!2)
	%D21<def> = LDRf64 %R32, -8; mem:LD4[%scevgep17](tbaa=!2) LD4[%scevgep15](tbaa=!2)
	%R34<def> = LDRi32_r32 %FP, -4; mem:LD4[FixedStack2]
	GID %CONFIG<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %R34<kill>
	GIE %CONFIG<imp-def,dead>
	%R43<def,tied1> = FMADDrr_r32 %R43<tied0>, %R27, %R37<kill>, %STATUS<imp-def,dead>, %D21<imp-use,kill>, %D21<imp-def>
	%R42<def,tied1> = FMADDrr_r32 %R42<tied0>, %R27, %R38<kill>, %STATUS<imp-def,dead>, %D21<imp-use,kill>, %D21<imp-def>
	%R44<def> = MOVi32rr %R43, %D22<imp-def>
	%R45<def> = MOVi32rr %R42, %D21<imp-use,kill>, %D22<imp-use,kill>, %D22<imp-def>
	STRf64 %D22<kill>, %R32, -8; mem:ST4[%scevgep17](tbaa=!2) ST4[%scevgep15](tbaa=!2)
	%R34<def> = LDRf32 %R32, 0; mem:LD4[%lsr.iv1214](tbaa=!2)
	%R34<def,tied1> = FMADDrr_r32 %R34<kill,tied0>, %R27, %R39<kill>, %STATUS<imp-def,dead>
	STRf32 %R34<kill>, %R32, 0; mem:ST4[%lsr.iv1214](tbaa=!2)
	%R37<def> = LDRf32 %R32, 4; mem:LD4[%scevgep16](tbaa=!2)
	%R37<def,tied1> = FMADDrr_r32 %R37<kill,tied0>, %R27, %R40<kill>, %STATUS<imp-def,dead>
	%R34<def,dead> = CMPri_r32 %R33, 8, %STATUS<imp-def>
	STRf32 %R37<kill>, %R32<kill>, 4; mem:ST4[%scevgep16](tbaa=!2)
	%R32<def> = MOVi32rr %R35<kill>
	%R34<def> = MOVi32rr %R36<kill>
	BCC <BB#6>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#6(0x7c000000 / 0x80000000 = 96.88%) BB#7(0x04000000 / 0x80000000 = 3.12%)

<----------------->
Analyzing block 5
BB#5: derived from LLVM BB %for.body9
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#4 BB#7
	%R27<def> = LSL32ri %R26, 2, %STATUS<imp-def,dead>
	%R27<def> = ADDrr_r32 %R21, %R27<kill>, %STATUS<imp-def,dead>
	%R27<def> = LDRf32 %R27<kill>, 0; mem:Volatile LD4[%add.ptr10](tbaa=!2)
	%R32<def> = MOVi32rr %R17
	%R34<def> = MOVi32rr %R25
	%R33<def> = MOVi32rr %R19
    Successors according to CFG: BB#6(?%)

<----------------->
Analyzing block 6
BB#6: derived from LLVM BB %for.body13
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26 %R27 %R32 %R33 %R34
    Predecessors according to CFG: BB#5 BB#6
	%R37<def> = LDRf32 %R34, -8; mem:Volatile LD4[%scevgep8](tbaa=!2)
	%R35<def> = ADDri_r32 %R32, 16, %STATUS<imp-def,dead>
	%R36<def> = ADDri_r32 %R34, 16, %STATUS<imp-def,dead>
	%R38<def> = LDRf32 %R34, -4; mem:Volatile LD4[%scevgep9](tbaa=!2)
	%R33<def> = ADDri_r32 %R33<kill>, 4, %STATUS<imp-def,dead>
	%R39<def> = LDRf32 %R34, 0; mem:Volatile LD4[%lsr.iv5](tbaa=!2)
	%R40<def> = LDRf32 %R34<kill>, 4; mem:Volatile LD4[%scevgep7](tbaa=!2)
	%D21<def> = LDRf64 %R32, -8; mem:LD4[%scevgep17](tbaa=!2) LD4[%scevgep15](tbaa=!2)
	%R34<def> = LDRi32_r32 %FP, -4; mem:LD4[FixedStack2]
	GID %CONFIG<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %R34<kill>
	GIE %CONFIG<imp-def,dead>
	%R43<def,tied1> = FMADDrr_r32 %R43<tied0>, %R27, %R37<kill>, %STATUS<imp-def,dead>, %D21<imp-use,kill>, %D21<imp-def>
	%R42<def,tied1> = FMADDrr_r32 %R42<tied0>, %R27, %R38<kill>, %STATUS<imp-def,dead>, %D21<imp-use,kill>, %D21<imp-def>
	%R44<def> = MOVi32rr %R43, %D22<imp-def>
	%R45<def> = MOVi32rr %R42, %D21<imp-use,kill>, %D22<imp-use,kill>, %D22<imp-def>
	STRf64 %D22<kill>, %R32, -8; mem:ST4[%scevgep17](tbaa=!2) ST4[%scevgep15](tbaa=!2)
	%R34<def> = LDRf32 %R32, 0; mem:LD4[%lsr.iv1214](tbaa=!2)
	%R34<def,tied1> = FMADDrr_r32 %R34<kill,tied0>, %R27, %R39<kill>, %STATUS<imp-def,dead>
	STRf32 %R34<kill>, %R32, 0; mem:ST4[%lsr.iv1214](tbaa=!2)
	%R37<def> = LDRf32 %R32, 4; mem:LD4[%scevgep16](tbaa=!2)
	%R37<def,tied1> = FMADDrr_r32 %R37<kill,tied0>, %R27, %R40<kill>, %STATUS<imp-def,dead>
	%R34<def,dead> = CMPri_r32 %R33, 8, %STATUS<imp-def>
	STRf32 %R37<kill>, %R32<kill>, 4; mem:ST4[%scevgep16](tbaa=!2)
	%R32<def> = MOVi32rr %R35<kill>
	%R34<def> = MOVi32rr %R36<kill>
	BCC <BB#6>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#6(0x7c000000 / 0x80000000 = 96.88%) BB#7(0x04000000 / 0x80000000 = 3.12%)

<----------------->
Analyzing block 7
BB#7: derived from LLVM BB %for.end60
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#6
	%R25<def> = ADDrr_r32 %R25<kill>, %IP, %STATUS<imp-def,dead>
	%R26<def> = ADDri_r32 %R26<kill>, 1, %STATUS<imp-def,dead>
	%R27<def,dead> = CMPrr_r32 %R26, %R3, %STATUS<imp-def>
	BCC <BB#5>, 1, %STATUS<imp-use>
    Successors according to CFG: BB#8(0x04000000 / 0x80000000 = 3.12%) BB#5(0x7c000000 / 0x80000000 = 96.88%)

<----------------->
Analyzing block 6
BB#6: derived from LLVM BB %for.body13
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26 %R27 %R32 %R33 %R34
    Predecessors according to CFG: BB#5 BB#6
	%R37<def> = LDRf32 %R34, -8; mem:Volatile LD4[%scevgep8](tbaa=!2)
	%R35<def> = ADDri_r32 %R32, 16, %STATUS<imp-def,dead>
	%R36<def> = ADDri_r32 %R34, 16, %STATUS<imp-def,dead>
	%R38<def> = LDRf32 %R34, -4; mem:Volatile LD4[%scevgep9](tbaa=!2)
	%R33<def> = ADDri_r32 %R33<kill>, 4, %STATUS<imp-def,dead>
	%R39<def> = LDRf32 %R34, 0; mem:Volatile LD4[%lsr.iv5](tbaa=!2)
	%R40<def> = LDRf32 %R34<kill>, 4; mem:Volatile LD4[%scevgep7](tbaa=!2)
	%D21<def> = LDRf64 %R32, -8; mem:LD4[%scevgep17](tbaa=!2) LD4[%scevgep15](tbaa=!2)
	%R34<def> = LDRi32_r32 %FP, -4; mem:LD4[FixedStack2]
	GID %CONFIG<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %R34<kill>
	GIE %CONFIG<imp-def,dead>
	%R43<def,tied1> = FMADDrr_r32 %R43<tied0>, %R27, %R37<kill>, %STATUS<imp-def,dead>, %D21<imp-use,kill>, %D21<imp-def>
	%R42<def,tied1> = FMADDrr_r32 %R42<tied0>, %R27, %R38<kill>, %STATUS<imp-def,dead>, %D21<imp-use,kill>, %D21<imp-def>
	%R44<def> = MOVi32rr %R43, %D22<imp-def>
	%R45<def> = MOVi32rr %R42, %D21<imp-use,kill>, %D22<imp-use,kill>, %D22<imp-def>
	STRf64 %D22<kill>, %R32, -8; mem:ST4[%scevgep17](tbaa=!2) ST4[%scevgep15](tbaa=!2)
	%R34<def> = LDRf32 %R32, 0; mem:LD4[%lsr.iv1214](tbaa=!2)
	%R34<def,tied1> = FMADDrr_r32 %R34<kill,tied0>, %R27, %R39<kill>, %STATUS<imp-def,dead>
	STRf32 %R34<kill>, %R32, 0; mem:ST4[%lsr.iv1214](tbaa=!2)
	%R37<def> = LDRf32 %R32, 4; mem:LD4[%scevgep16](tbaa=!2)
	%R37<def,tied1> = FMADDrr_r32 %R37<kill,tied0>, %R27, %R40<kill>, %STATUS<imp-def,dead>
	%R34<def,dead> = CMPri_r32 %R33, 8, %STATUS<imp-def>
	STRf32 %R37<kill>, %R32<kill>, 4; mem:ST4[%scevgep16](tbaa=!2)
	%R32<def> = MOVi32rr %R35<kill>
	%R34<def> = MOVi32rr %R36<kill>
	BCC <BB#6>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#6(0x7c000000 / 0x80000000 = 96.88%) BB#7(0x04000000 / 0x80000000 = 3.12%)

<----------------->
Analyzing block 7
BB#7: derived from LLVM BB %for.end60
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#6
	%R25<def> = ADDrr_r32 %R25<kill>, %IP, %STATUS<imp-def,dead>
	%R26<def> = ADDri_r32 %R26<kill>, 1, %STATUS<imp-def,dead>
	%R27<def,dead> = CMPrr_r32 %R26, %R3, %STATUS<imp-def>
	BCC <BB#5>, 1, %STATUS<imp-use>
    Successors according to CFG: BB#8(0x04000000 / 0x80000000 = 3.12%) BB#5(0x7c000000 / 0x80000000 = 96.88%)

<----------------->
Analyzing block 8
BB#8: derived from LLVM BB %for.cond64.preheader
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#7
	%R25<def> = MOVi32rr %R22
	%R26<def> = MOVi32rr %R19
    Successors according to CFG: BB#9(?%)

<----------------->
Analyzing block 7
BB#7: derived from LLVM BB %for.end60
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#6
	%R25<def> = ADDrr_r32 %R25<kill>, %IP, %STATUS<imp-def,dead>
	%R26<def> = ADDri_r32 %R26<kill>, 1, %STATUS<imp-def,dead>
	%R27<def,dead> = CMPrr_r32 %R26, %R3, %STATUS<imp-def>
	BCC <BB#5>, 1, %STATUS<imp-use>
    Successors according to CFG: BB#8(0x04000000 / 0x80000000 = 3.12%) BB#5(0x7c000000 / 0x80000000 = 96.88%)

<----------------->
Analyzing block 8
BB#8: derived from LLVM BB %for.cond64.preheader
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#7
	%R25<def> = MOVi32rr %R22
	%R26<def> = MOVi32rr %R19
    Successors according to CFG: BB#9(?%)

<----------------->
Analyzing block 9
BB#9: derived from LLVM BB %for.body66
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#8 BB#9
	%R27<def> = ADDrr_r32 %R16, %R26, %STATUS<imp-def,dead>
	%R33<def> = LDRf32 %R27<kill>, 0; mem:LD4[%sunkaddr30](tbaa=!2)
	%R27<def> = ADDri_r32 %R25, 4, %STATUS<imp-def,dead>
	%R26<def> = ADDri_r32 %R26<kill>, 4, %STATUS<imp-def,dead>
	%R34<def> = LDRf32 %R25, 0; mem:Volatile LD4[%lsr.iv24](tbaa=!2)
	%R32<def> = LDRi32_r32 %FP, -4; mem:LD4[FixedStack2]
	GID %CONFIG<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %R32<kill>
	GIE %CONFIG<imp-def,dead>
	%R33<def> = FADDrr_r32 %R33<kill>, %R34<kill>, %STATUS<imp-def,dead>
	%R32<def,dead> = CMPri_r32 %R26, 32, %STATUS<imp-def>
	STRf32 %R33<kill>, %R25<kill>, 0; mem:Volatile ST4[%lsr.iv24](tbaa=!2)
	%R25<def> = MOVi32rr %R27<kill>
	BCC <BB#9>, 1, %STATUS<imp-use>
    Successors according to CFG: BB#10(0x04000000 / 0x80000000 = 3.12%) BB#9(0x7c000000 / 0x80000000 = 96.88%)

<----------------->
Analyzing block 8
BB#8: derived from LLVM BB %for.cond64.preheader
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#7
	%R25<def> = MOVi32rr %R22
	%R26<def> = MOVi32rr %R19
    Successors according to CFG: BB#9(?%)

<----------------->
Analyzing block 9
BB#9: derived from LLVM BB %for.body66
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#8 BB#9
	%R27<def> = ADDrr_r32 %R16, %R26, %STATUS<imp-def,dead>
	%R33<def> = LDRf32 %R27<kill>, 0; mem:LD4[%sunkaddr30](tbaa=!2)
	%R27<def> = ADDri_r32 %R25, 4, %STATUS<imp-def,dead>
	%R26<def> = ADDri_r32 %R26<kill>, 4, %STATUS<imp-def,dead>
	%R34<def> = LDRf32 %R25, 0; mem:Volatile LD4[%lsr.iv24](tbaa=!2)
	%R32<def> = LDRi32_r32 %FP, -4; mem:LD4[FixedStack2]
	GID %CONFIG<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %R32<kill>
	GIE %CONFIG<imp-def,dead>
	%R33<def> = FADDrr_r32 %R33<kill>, %R34<kill>, %STATUS<imp-def,dead>
	%R32<def,dead> = CMPri_r32 %R26, 32, %STATUS<imp-def>
	STRf32 %R33<kill>, %R25<kill>, 0; mem:Volatile ST4[%lsr.iv24](tbaa=!2)
	%R25<def> = MOVi32rr %R27<kill>
	BCC <BB#9>, 1, %STATUS<imp-use>
    Successors according to CFG: BB#10(0x04000000 / 0x80000000 = 3.12%) BB#9(0x7c000000 / 0x80000000 = 96.88%)

<----------------->
Analyzing block 10
BB#10: derived from LLVM BB %for.end75
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#9
	%R22<def> = ADDri_r32 %R22<kill>, 32, %STATUS<imp-def,dead>
	%R23<def> = ADDri_r32 %R23<kill>, 32, %STATUS<imp-def,dead>
	%R24<def> = ADDri_r32 %R24<kill>, 8, %STATUS<imp-def,dead>
	%R25<def,dead> = CMPrr_r32 %R24, %R3, %STATUS<imp-def>
	BCC <BB#4>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#4(0x7c000000 / 0x80000000 = 96.88%) BB#11(0x04000000 / 0x80000000 = 3.12%)

<----------------->
Analyzing block 9
BB#9: derived from LLVM BB %for.body66
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#8 BB#9
	%R27<def> = ADDrr_r32 %R16, %R26, %STATUS<imp-def,dead>
	%R33<def> = LDRf32 %R27<kill>, 0; mem:LD4[%sunkaddr30](tbaa=!2)
	%R27<def> = ADDri_r32 %R25, 4, %STATUS<imp-def,dead>
	%R26<def> = ADDri_r32 %R26<kill>, 4, %STATUS<imp-def,dead>
	%R34<def> = LDRf32 %R25, 0; mem:Volatile LD4[%lsr.iv24](tbaa=!2)
	%R32<def> = LDRi32_r32 %FP, -4; mem:LD4[FixedStack2]
	GID %CONFIG<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %R32<kill>
	GIE %CONFIG<imp-def,dead>
	%R33<def> = FADDrr_r32 %R33<kill>, %R34<kill>, %STATUS<imp-def,dead>
	%R32<def,dead> = CMPri_r32 %R26, 32, %STATUS<imp-def>
	STRf32 %R33<kill>, %R25<kill>, 0; mem:Volatile ST4[%lsr.iv24](tbaa=!2)
	%R25<def> = MOVi32rr %R27<kill>
	BCC <BB#9>, 1, %STATUS<imp-use>
    Successors according to CFG: BB#10(0x04000000 / 0x80000000 = 3.12%) BB#9(0x7c000000 / 0x80000000 = 96.88%)

<----------------->
Analyzing block 10
BB#10: derived from LLVM BB %for.end75
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#9
	%R22<def> = ADDri_r32 %R22<kill>, 32, %STATUS<imp-def,dead>
	%R23<def> = ADDri_r32 %R23<kill>, 32, %STATUS<imp-def,dead>
	%R24<def> = ADDri_r32 %R24<kill>, 8, %STATUS<imp-def,dead>
	%R25<def,dead> = CMPrr_r32 %R24, %R3, %STATUS<imp-def>
	BCC <BB#4>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#4(0x7c000000 / 0x80000000 = 96.88%) BB#11(0x04000000 / 0x80000000 = 3.12%)

<----------------->
Analyzing block 11
BB#11: derived from LLVM BB %for.end78
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20
    Predecessors according to CFG: BB#10
	%R2<def> = ADDrr_r32 %R2<kill>, %IP, %STATUS<imp-def,dead>
	%R20<def> = ADDri_r32 %R20<kill>, 1, %STATUS<imp-def,dead>
	%R21<def,dead> = CMPrr_r32 %R20, %R3, %STATUS<imp-def>
	BCC <BB#3>, 1, %STATUS<imp-use>
    Successors according to CFG: BB#12(0x04000000 / 0x80000000 = 3.12%) BB#3(0x7c000000 / 0x80000000 = 96.88%)

<----------------->
Analyzing block 10
BB#10: derived from LLVM BB %for.end75
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#9
	%R22<def> = ADDri_r32 %R22<kill>, 32, %STATUS<imp-def,dead>
	%R23<def> = ADDri_r32 %R23<kill>, 32, %STATUS<imp-def,dead>
	%R24<def> = ADDri_r32 %R24<kill>, 8, %STATUS<imp-def,dead>
	%R25<def,dead> = CMPrr_r32 %R24, %R3, %STATUS<imp-def>
	BCC <BB#4>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#4(0x7c000000 / 0x80000000 = 96.88%) BB#11(0x04000000 / 0x80000000 = 3.12%)

<----------------->
Analyzing block 11
BB#11: derived from LLVM BB %for.end78
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20
    Predecessors according to CFG: BB#10
	%R2<def> = ADDrr_r32 %R2<kill>, %IP, %STATUS<imp-def,dead>
	%R20<def> = ADDri_r32 %R20<kill>, 1, %STATUS<imp-def,dead>
	%R21<def,dead> = CMPrr_r32 %R20, %R3, %STATUS<imp-def>
	BCC <BB#3>, 1, %STATUS<imp-use>
    Successors according to CFG: BB#12(0x04000000 / 0x80000000 = 3.12%) BB#3(0x7c000000 / 0x80000000 = 96.88%)

<----------------->
Analyzing block 12
BB#12: derived from LLVM BB %for.end81
    Predecessors according to CFG: BB#1 BB#11
	%R0<def> = LDRi32_r32 %FP, -44; mem:LD4[FixedStack1]
	GID
	%CONFIG<def> = MOVTS32_core %R0<kill>
	GIE %CONFIG<imp-use,kill>
	%LR<def> = LDRi64 %SP, 48; flags: FrameSetup
	%SP<def> = ADDri_r32 %SP, 48, %STATUS<imp-def>
	JR32 %LR

<----------------->
Analyzing block 11
BB#11: derived from LLVM BB %for.end78
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20
    Predecessors according to CFG: BB#10
	%R2<def> = ADDrr_r32 %R2<kill>, %IP, %STATUS<imp-def,dead>
	%R20<def> = ADDri_r32 %R20<kill>, 1, %STATUS<imp-def,dead>
	%R21<def,dead> = CMPrr_r32 %R20, %R3, %STATUS<imp-def>
	BCC <BB#3>, 1, %STATUS<imp-use>
    Successors according to CFG: BB#12(0x04000000 / 0x80000000 = 3.12%) BB#3(0x7c000000 / 0x80000000 = 96.88%)

Ifcvt: function (1) 'matmac'

<----------------->
Analyzing block 0
BB#0: 
    Live Ins: %R0 %R1 %R2 %R3
	%SP<def,tied2> = STRi64_pmd %LR, %SP<tied0>, -48; flags: FrameSetup
	%FP<def> = ADDri_r32 %SP, 48, %STATUS<imp-def>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	GID %CONFIG<imp-def>
	%R19<def> = MOVFS32_core %CONFIG, %D9<imp-def>
	STRi32_r32 %R19, %FP, -44; mem:ST4[FixedStack1]
	%IP<def> = MOVi32ri 65535
	%IP<def,tied1> = MOVTi32ri %IP<kill,tied0>, 65521
	%R18<def> = ANDrr_r32 %R19, %IP<kill>, %STATUS<imp-def>, %D9<imp-use,kill>, %D9<imp-def>
	%R19<def,tied1> = MOVTi32ri %R19<tied0>, 72, %D9<imp-use,kill>, %D9<imp-def>
	STRi64 %D9<kill>, %FP, -8; mem:ST4[FixedStack3] ST4[FixedStack2]
	GIE %CONFIG<imp-use,kill>
    Successors according to CFG: BB#1(?%)

<----------------->
Analyzing block 1
BB#1: derived from LLVM BB %entry
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#0
	%IP<def,dead> = CMPri_r32 %R3, 1, %STATUS<imp-def>
	BCC <BB#12>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#2(0x50000000 / 0x80000000 = 62.50%) BB#12(0x30000000 / 0x80000000 = 37.50%)

<----------------->
Analyzing block 12
BB#12: derived from LLVM BB %for.end81
    Predecessors according to CFG: BB#1 BB#11
	%R0<def> = LDRi32_r32 %FP, -44; mem:LD4[FixedStack1]
	GID
	%CONFIG<def> = MOVTS32_core %R0<kill>
	GIE %CONFIG<imp-use,kill>
	%LR<def> = LDRi64 %SP, 48; flags: FrameSetup
	%SP<def> = ADDri_r32 %SP, 48, %STATUS<imp-def>
	JR32 %LR

<----------------->
Analyzing block 2
BB#2: derived from LLVM BB %for.body3.lr.ph.preheader
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#1
	%IP<def> = LSL32ri %R3, 2, %STATUS<imp-def,dead>
	%R1<def> = ADDri_r32 %R1<kill>, 8, %STATUS<imp-def,dead>
	%R16<def> = MOViPTR %FP, -40
	%R17<def> = ADDri_r32 %R16, 8, %STATUS<imp-def,dead>
	%R19<def> = MOVi32ri 0, %D9<imp-def>
	%R20<def> = MOVi32rr %R19
    Successors according to CFG: BB#3(?%)

<----------------->
Analyzing block 3
BB#3: derived from LLVM BB %for.body3.lr.ph
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20
    Predecessors according to CFG: BB#2 BB#11
	%R21<def> = LDRi32_r32 %FP, -8; mem:LD4[FixedStack3]
	GID %CONFIG<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %R21<kill>
	GIE %CONFIG<imp-def,dead>
	%R21<def> = IMULrr_r32 %R20, %R3, %STATUS<imp-def,dead>
	%R21<def> = LSL32ri %R21<kill>, 2, %STATUS<imp-def,dead>
	%R21<def> = ADDrr_r32 %R0, %R21<kill>, %STATUS<imp-def,dead>
	%R22<def> = MOVi32rr %R2
	%R23<def> = MOVi32rr %R1
	%R24<def> = MOVi32rr %R19
    Successors according to CFG: BB#4(?%)

<----------------->
Analyzing block 4
BB#4: derived from LLVM BB %for.body9.preheader
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#3 BB#10
	%R18<def> = MOVi32rr %R19, %D9<imp-use,kill>, %D9<imp-def>
	STRi64 %D9, %FP, -16; mem:ST8[%1+24]
	STRi64 %D9, %FP, -24; mem:ST8[%1+16]
	STRi64 %D9, %FP, -32; mem:ST8[%1+8]
	STRi64 %D9, %FP, -40; mem:ST8[%1]
	%R25<def> = MOVi32rr %R23
	%R26<def> = MOVi32rr %R19
    Successors according to CFG: BB#5(?%)

<----------------->
Analyzing block 5
BB#5: derived from LLVM BB %for.body9
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#4 BB#7
	%R27<def> = LSL32ri %R26, 2, %STATUS<imp-def,dead>
	%R27<def> = ADDrr_r32 %R21, %R27<kill>, %STATUS<imp-def,dead>
	%R27<def> = LDRf32 %R27<kill>, 0; mem:Volatile LD4[%add.ptr10](tbaa=!2)
	%R32<def> = MOVi32rr %R17
	%R34<def> = MOVi32rr %R25
	%R33<def> = MOVi32rr %R19
    Successors according to CFG: BB#6(?%)

<----------------->
Analyzing block 6
BB#6: derived from LLVM BB %for.body13
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26 %R27 %R32 %R33 %R34
    Predecessors according to CFG: BB#5 BB#6
	%R37<def> = LDRf32 %R34, -8; mem:Volatile LD4[%scevgep8](tbaa=!2)
	%R35<def> = ADDri_r32 %R32, 16, %STATUS<imp-def,dead>
	%R36<def> = ADDri_r32 %R34, 16, %STATUS<imp-def,dead>
	%R38<def> = LDRf32 %R34, -4; mem:Volatile LD4[%scevgep9](tbaa=!2)
	%R33<def> = ADDri_r32 %R33<kill>, 4, %STATUS<imp-def,dead>
	%R39<def> = LDRf32 %R34, 0; mem:Volatile LD4[%lsr.iv5](tbaa=!2)
	%R40<def> = LDRf32 %R34<kill>, 4; mem:Volatile LD4[%scevgep7](tbaa=!2)
	%D21<def> = LDRf64 %R32, -8; mem:LD4[%scevgep17](tbaa=!2) LD4[%scevgep15](tbaa=!2)
	%R34<def> = LDRi32_r32 %FP, -4; mem:LD4[FixedStack2]
	GID %CONFIG<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %R34<kill>
	GIE %CONFIG<imp-def,dead>
	%R43<def,tied1> = FMADDrr_r32 %R43<tied0>, %R27, %R37<kill>, %STATUS<imp-def,dead>, %D21<imp-use,kill>, %D21<imp-def>
	%R42<def,tied1> = FMADDrr_r32 %R42<tied0>, %R27, %R38<kill>, %STATUS<imp-def,dead>, %D21<imp-use,kill>, %D21<imp-def>
	%R44<def> = MOVi32rr %R43, %D22<imp-def>
	%R45<def> = MOVi32rr %R42, %D21<imp-use,kill>, %D22<imp-use,kill>, %D22<imp-def>
	STRf64 %D22<kill>, %R32, -8; mem:ST4[%scevgep17](tbaa=!2) ST4[%scevgep15](tbaa=!2)
	%R34<def> = LDRf32 %R32, 0; mem:LD4[%lsr.iv1214](tbaa=!2)
	%R34<def,tied1> = FMADDrr_r32 %R34<kill,tied0>, %R27, %R39<kill>, %STATUS<imp-def,dead>
	STRf32 %R34<kill>, %R32, 0; mem:ST4[%lsr.iv1214](tbaa=!2)
	%R37<def> = LDRf32 %R32, 4; mem:LD4[%scevgep16](tbaa=!2)
	%R37<def,tied1> = FMADDrr_r32 %R37<kill,tied0>, %R27, %R40<kill>, %STATUS<imp-def,dead>
	%R34<def,dead> = CMPri_r32 %R33, 8, %STATUS<imp-def>
	STRf32 %R37<kill>, %R32<kill>, 4; mem:ST4[%scevgep16](tbaa=!2)
	%R32<def> = MOVi32rr %R35<kill>
	%R34<def> = MOVi32rr %R36<kill>
	BCC <BB#6>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#6(0x7c000000 / 0x80000000 = 96.88%) BB#7(0x04000000 / 0x80000000 = 3.12%)

<----------------->
Analyzing block 7
BB#7: derived from LLVM BB %for.end60
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#6
	%R25<def> = ADDrr_r32 %R25<kill>, %IP, %STATUS<imp-def,dead>
	%R26<def> = ADDri_r32 %R26<kill>, 1, %STATUS<imp-def,dead>
	%R27<def,dead> = CMPrr_r32 %R26, %R3, %STATUS<imp-def>
	BCC <BB#5>, 1, %STATUS<imp-use>
    Successors according to CFG: BB#8(0x04000000 / 0x80000000 = 3.12%) BB#5(0x7c000000 / 0x80000000 = 96.88%)

<----------------->
Analyzing block 8
BB#8: derived from LLVM BB %for.cond64.preheader
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#7
	%R25<def> = MOVi32rr %R22
	%R26<def> = MOVi32rr %R19
    Successors according to CFG: BB#9(?%)

<----------------->
Analyzing block 9
BB#9: derived from LLVM BB %for.body66
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#8 BB#9
	%R27<def> = ADDrr_r32 %R16, %R26, %STATUS<imp-def,dead>
	%R33<def> = LDRf32 %R27<kill>, 0; mem:LD4[%sunkaddr30](tbaa=!2)
	%R27<def> = ADDri_r32 %R25, 4, %STATUS<imp-def,dead>
	%R26<def> = ADDri_r32 %R26<kill>, 4, %STATUS<imp-def,dead>
	%R34<def> = LDRf32 %R25, 0; mem:Volatile LD4[%lsr.iv24](tbaa=!2)
	%R32<def> = LDRi32_r32 %FP, -4; mem:LD4[FixedStack2]
	GID %CONFIG<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %R32<kill>
	GIE %CONFIG<imp-def,dead>
	%R33<def> = FADDrr_r32 %R33<kill>, %R34<kill>, %STATUS<imp-def,dead>
	%R32<def,dead> = CMPri_r32 %R26, 32, %STATUS<imp-def>
	STRf32 %R33<kill>, %R25<kill>, 0; mem:Volatile ST4[%lsr.iv24](tbaa=!2)
	%R25<def> = MOVi32rr %R27<kill>
	BCC <BB#9>, 1, %STATUS<imp-use>
    Successors according to CFG: BB#10(0x04000000 / 0x80000000 = 3.12%) BB#9(0x7c000000 / 0x80000000 = 96.88%)

<----------------->
Analyzing block 10
BB#10: derived from LLVM BB %for.end75
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#9
	%R22<def> = ADDri_r32 %R22<kill>, 32, %STATUS<imp-def,dead>
	%R23<def> = ADDri_r32 %R23<kill>, 32, %STATUS<imp-def,dead>
	%R24<def> = ADDri_r32 %R24<kill>, 8, %STATUS<imp-def,dead>
	%R25<def,dead> = CMPrr_r32 %R24, %R3, %STATUS<imp-def>
	BCC <BB#4>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#4(0x7c000000 / 0x80000000 = 96.88%) BB#11(0x04000000 / 0x80000000 = 3.12%)

<----------------->
Analyzing block 11
BB#11: derived from LLVM BB %for.end78
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20
    Predecessors according to CFG: BB#10
	%R2<def> = ADDrr_r32 %R2<kill>, %IP, %STATUS<imp-def,dead>
	%R20<def> = ADDri_r32 %R20<kill>, 1, %STATUS<imp-def,dead>
	%R21<def,dead> = CMPrr_r32 %R20, %R3, %STATUS<imp-def>
	BCC <BB#3>, 1, %STATUS<imp-use>
    Successors according to CFG: BB#12(0x04000000 / 0x80000000 = 3.12%) BB#3(0x7c000000 / 0x80000000 = 96.88%)
# *** IR Dump After If Converter ***:
# Machine code for function matmac: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=32, align=8, at location [SP-40]
  fi#1: size=4, align=4, at location [SP-44]
  fi#2: size=4, align=4, at location [SP-4]
  fi#3: size=4, align=8, at location [SP-8]
Function Live Ins: %R0, %R1, %R2, %R3

BB#0: 
    Live Ins: %R0 %R1 %R2 %R3
	%SP<def,tied2> = STRi64_pmd %LR, %SP<tied0>, -48; flags: FrameSetup
	%FP<def> = ADDri_r32 %SP, 48, %STATUS<imp-def>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	GID %CONFIG<imp-def>
	%R19<def> = MOVFS32_core %CONFIG, %D9<imp-def>
	STRi32_r32 %R19, %FP, -44; mem:ST4[FixedStack1]
	%IP<def> = MOVi32ri 65535
	%IP<def,tied1> = MOVTi32ri %IP<kill,tied0>, 65521
	%R18<def> = ANDrr_r32 %R19, %IP<kill>, %STATUS<imp-def>, %D9<imp-use,kill>, %D9<imp-def>
	%R19<def,tied1> = MOVTi32ri %R19<tied0>, 72, %D9<imp-use,kill>, %D9<imp-def>
	STRi64 %D9<kill>, %FP, -8; mem:ST4[FixedStack3] ST4[FixedStack2]
	GIE %CONFIG<imp-use,kill>
    Successors according to CFG: BB#1(?%)

BB#1: derived from LLVM BB %entry
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#0
	%IP<def,dead> = CMPri_r32 %R3, 1, %STATUS<imp-def>
	BCC <BB#12>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#2(0x50000000 / 0x80000000 = 62.50%) BB#12(0x30000000 / 0x80000000 = 37.50%)

BB#2: derived from LLVM BB %for.body3.lr.ph.preheader
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#1
	%IP<def> = LSL32ri %R3, 2, %STATUS<imp-def,dead>
	%R1<def> = ADDri_r32 %R1<kill>, 8, %STATUS<imp-def,dead>
	%R16<def> = MOViPTR %FP, -40
	%R17<def> = ADDri_r32 %R16, 8, %STATUS<imp-def,dead>
	%R19<def> = MOVi32ri 0, %D9<imp-def>
	%R20<def> = MOVi32rr %R19
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %for.body3.lr.ph
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20
    Predecessors according to CFG: BB#2 BB#11
	%R21<def> = LDRi32_r32 %FP, -8; mem:LD4[FixedStack3]
	GID %CONFIG<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %R21<kill>
	GIE %CONFIG<imp-def,dead>
	%R21<def> = IMULrr_r32 %R20, %R3, %STATUS<imp-def,dead>
	%R21<def> = LSL32ri %R21<kill>, 2, %STATUS<imp-def,dead>
	%R21<def> = ADDrr_r32 %R0, %R21<kill>, %STATUS<imp-def,dead>
	%R22<def> = MOVi32rr %R2
	%R23<def> = MOVi32rr %R1
	%R24<def> = MOVi32rr %R19
    Successors according to CFG: BB#4(?%)

BB#4: derived from LLVM BB %for.body9.preheader
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#3 BB#10
	%R18<def> = MOVi32rr %R19, %D9<imp-use,kill>, %D9<imp-def>
	STRi64 %D9, %FP, -16; mem:ST8[%1+24]
	STRi64 %D9, %FP, -24; mem:ST8[%1+16]
	STRi64 %D9, %FP, -32; mem:ST8[%1+8]
	STRi64 %D9, %FP, -40; mem:ST8[%1]
	%R25<def> = MOVi32rr %R23
	%R26<def> = MOVi32rr %R19
    Successors according to CFG: BB#5(?%)

BB#5: derived from LLVM BB %for.body9
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#4 BB#7
	%R27<def> = LSL32ri %R26, 2, %STATUS<imp-def,dead>
	%R27<def> = ADDrr_r32 %R21, %R27<kill>, %STATUS<imp-def,dead>
	%R27<def> = LDRf32 %R27<kill>, 0; mem:Volatile LD4[%add.ptr10](tbaa=!2)
	%R32<def> = MOVi32rr %R17
	%R34<def> = MOVi32rr %R25
	%R33<def> = MOVi32rr %R19
    Successors according to CFG: BB#6(?%)

BB#6: derived from LLVM BB %for.body13
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26 %R27 %R32 %R33 %R34
    Predecessors according to CFG: BB#5 BB#6
	%R37<def> = LDRf32 %R34, -8; mem:Volatile LD4[%scevgep8](tbaa=!2)
	%R35<def> = ADDri_r32 %R32, 16, %STATUS<imp-def,dead>
	%R36<def> = ADDri_r32 %R34, 16, %STATUS<imp-def,dead>
	%R38<def> = LDRf32 %R34, -4; mem:Volatile LD4[%scevgep9](tbaa=!2)
	%R33<def> = ADDri_r32 %R33<kill>, 4, %STATUS<imp-def,dead>
	%R39<def> = LDRf32 %R34, 0; mem:Volatile LD4[%lsr.iv5](tbaa=!2)
	%R40<def> = LDRf32 %R34<kill>, 4; mem:Volatile LD4[%scevgep7](tbaa=!2)
	%D21<def> = LDRf64 %R32, -8; mem:LD4[%scevgep17](tbaa=!2) LD4[%scevgep15](tbaa=!2)
	%R34<def> = LDRi32_r32 %FP, -4; mem:LD4[FixedStack2]
	GID %CONFIG<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %R34<kill>
	GIE %CONFIG<imp-def,dead>
	%R43<def,tied1> = FMADDrr_r32 %R43<tied0>, %R27, %R37<kill>, %STATUS<imp-def,dead>, %D21<imp-use,kill>, %D21<imp-def>
	%R42<def,tied1> = FMADDrr_r32 %R42<tied0>, %R27, %R38<kill>, %STATUS<imp-def,dead>, %D21<imp-use,kill>, %D21<imp-def>
	%R44<def> = MOVi32rr %R43, %D22<imp-def>
	%R45<def> = MOVi32rr %R42, %D21<imp-use,kill>, %D22<imp-use,kill>, %D22<imp-def>
	STRf64 %D22<kill>, %R32, -8; mem:ST4[%scevgep17](tbaa=!2) ST4[%scevgep15](tbaa=!2)
	%R34<def> = LDRf32 %R32, 0; mem:LD4[%lsr.iv1214](tbaa=!2)
	%R34<def,tied1> = FMADDrr_r32 %R34<kill,tied0>, %R27, %R39<kill>, %STATUS<imp-def,dead>
	STRf32 %R34<kill>, %R32, 0; mem:ST4[%lsr.iv1214](tbaa=!2)
	%R37<def> = LDRf32 %R32, 4; mem:LD4[%scevgep16](tbaa=!2)
	%R37<def,tied1> = FMADDrr_r32 %R37<kill,tied0>, %R27, %R40<kill>, %STATUS<imp-def,dead>
	%R34<def,dead> = CMPri_r32 %R33, 8, %STATUS<imp-def>
	STRf32 %R37<kill>, %R32<kill>, 4; mem:ST4[%scevgep16](tbaa=!2)
	%R32<def> = MOVi32rr %R35<kill>
	%R34<def> = MOVi32rr %R36<kill>
	BCC <BB#6>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#6(0x7c000000 / 0x80000000 = 96.88%) BB#7(0x04000000 / 0x80000000 = 3.12%)

BB#7: derived from LLVM BB %for.end60
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#6
	%R25<def> = ADDrr_r32 %R25<kill>, %IP, %STATUS<imp-def,dead>
	%R26<def> = ADDri_r32 %R26<kill>, 1, %STATUS<imp-def,dead>
	%R27<def,dead> = CMPrr_r32 %R26, %R3, %STATUS<imp-def>
	BCC <BB#5>, 1, %STATUS<imp-use>
    Successors according to CFG: BB#8(0x04000000 / 0x80000000 = 3.12%) BB#5(0x7c000000 / 0x80000000 = 96.88%)

BB#8: derived from LLVM BB %for.cond64.preheader
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#7
	%R25<def> = MOVi32rr %R22
	%R26<def> = MOVi32rr %R19
    Successors according to CFG: BB#9(?%)

BB#9: derived from LLVM BB %for.body66
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#8 BB#9
	%R27<def> = ADDrr_r32 %R16, %R26, %STATUS<imp-def,dead>
	%R33<def> = LDRf32 %R27<kill>, 0; mem:LD4[%sunkaddr30](tbaa=!2)
	%R27<def> = ADDri_r32 %R25, 4, %STATUS<imp-def,dead>
	%R26<def> = ADDri_r32 %R26<kill>, 4, %STATUS<imp-def,dead>
	%R34<def> = LDRf32 %R25, 0; mem:Volatile LD4[%lsr.iv24](tbaa=!2)
	%R32<def> = LDRi32_r32 %FP, -4; mem:LD4[FixedStack2]
	GID %CONFIG<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %R32<kill>
	GIE %CONFIG<imp-def,dead>
	%R33<def> = FADDrr_r32 %R33<kill>, %R34<kill>, %STATUS<imp-def,dead>
	%R32<def,dead> = CMPri_r32 %R26, 32, %STATUS<imp-def>
	STRf32 %R33<kill>, %R25<kill>, 0; mem:Volatile ST4[%lsr.iv24](tbaa=!2)
	%R25<def> = MOVi32rr %R27<kill>
	BCC <BB#9>, 1, %STATUS<imp-use>
    Successors according to CFG: BB#10(0x04000000 / 0x80000000 = 3.12%) BB#9(0x7c000000 / 0x80000000 = 96.88%)

BB#10: derived from LLVM BB %for.end75
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#9
	%R22<def> = ADDri_r32 %R22<kill>, 32, %STATUS<imp-def,dead>
	%R23<def> = ADDri_r32 %R23<kill>, 32, %STATUS<imp-def,dead>
	%R24<def> = ADDri_r32 %R24<kill>, 8, %STATUS<imp-def,dead>
	%R25<def,dead> = CMPrr_r32 %R24, %R3, %STATUS<imp-def>
	BCC <BB#4>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#4(0x7c000000 / 0x80000000 = 96.88%) BB#11(0x04000000 / 0x80000000 = 3.12%)

BB#11: derived from LLVM BB %for.end78
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20
    Predecessors according to CFG: BB#10
	%R2<def> = ADDrr_r32 %R2<kill>, %IP, %STATUS<imp-def,dead>
	%R20<def> = ADDri_r32 %R20<kill>, 1, %STATUS<imp-def,dead>
	%R21<def,dead> = CMPrr_r32 %R20, %R3, %STATUS<imp-def>
	BCC <BB#3>, 1, %STATUS<imp-use>
    Successors according to CFG: BB#12(0x04000000 / 0x80000000 = 3.12%) BB#3(0x7c000000 / 0x80000000 = 96.88%)

BB#12: derived from LLVM BB %for.end81
    Predecessors according to CFG: BB#1 BB#11
	%R0<def> = LDRi32_r32 %FP, -44; mem:LD4[FixedStack1]
	GID
	%CONFIG<def> = MOVTS32_core %R0<kill>
	GIE %CONFIG<imp-use,kill>
	%LR<def> = LDRi64 %SP, 48; flags: FrameSetup
	%SP<def> = ADDri_r32 %SP, 48, %STATUS<imp-def>
	JR32 %LR

# End machine code for function matmac.

# *** IR Dump Before Post RA top-down list latency scheduler ***:
# Machine code for function matmac: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=32, align=8, at location [SP-40]
  fi#1: size=4, align=4, at location [SP-44]
  fi#2: size=4, align=4, at location [SP-4]
  fi#3: size=4, align=8, at location [SP-8]
Function Live Ins: %R0, %R1, %R2, %R3

BB#0: 
    Live Ins: %R0 %R1 %R2 %R3
	%SP<def,tied2> = STRi64_pmd %LR, %SP<tied0>, -48; flags: FrameSetup
	%FP<def> = ADDri_r32 %SP, 48, %STATUS<imp-def>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	GID %CONFIG<imp-def>
	%R19<def> = MOVFS32_core %CONFIG, %D9<imp-def>
	STRi32_r32 %R19, %FP, -44; mem:ST4[FixedStack1]
	%IP<def> = MOVi32ri 65535
	%IP<def,tied1> = MOVTi32ri %IP<kill,tied0>, 65521
	%R18<def> = ANDrr_r32 %R19, %IP<kill>, %STATUS<imp-def>, %D9<imp-use,kill>, %D9<imp-def>
	%R19<def,tied1> = MOVTi32ri %R19<tied0>, 72, %D9<imp-use,kill>, %D9<imp-def>
	STRi64 %D9<kill>, %FP, -8; mem:ST4[FixedStack3] ST4[FixedStack2]
	GIE %CONFIG<imp-use,kill>
    Successors according to CFG: BB#1(?%)

BB#1: derived from LLVM BB %entry
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#0
	%IP<def,dead> = CMPri_r32 %R3, 1, %STATUS<imp-def>
	BCC <BB#12>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#2(0x50000000 / 0x80000000 = 62.50%) BB#12(0x30000000 / 0x80000000 = 37.50%)

BB#2: derived from LLVM BB %for.body3.lr.ph.preheader
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#1
	%IP<def> = LSL32ri %R3, 2, %STATUS<imp-def,dead>
	%R1<def> = ADDri_r32 %R1<kill>, 8, %STATUS<imp-def,dead>
	%R16<def> = MOViPTR %FP, -40
	%R17<def> = ADDri_r32 %R16, 8, %STATUS<imp-def,dead>
	%R19<def> = MOVi32ri 0, %D9<imp-def>
	%R20<def> = MOVi32rr %R19
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %for.body3.lr.ph
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20
    Predecessors according to CFG: BB#2 BB#11
	%R21<def> = LDRi32_r32 %FP, -8; mem:LD4[FixedStack3]
	GID %CONFIG<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %R21<kill>
	GIE %CONFIG<imp-def,dead>
	%R21<def> = IMULrr_r32 %R20, %R3, %STATUS<imp-def,dead>
	%R21<def> = LSL32ri %R21<kill>, 2, %STATUS<imp-def,dead>
	%R21<def> = ADDrr_r32 %R0, %R21<kill>, %STATUS<imp-def,dead>
	%R22<def> = MOVi32rr %R2
	%R23<def> = MOVi32rr %R1
	%R24<def> = MOVi32rr %R19
    Successors according to CFG: BB#4(?%)

BB#4: derived from LLVM BB %for.body9.preheader
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#3 BB#10
	%R18<def> = MOVi32rr %R19, %D9<imp-use,kill>, %D9<imp-def>
	STRi64 %D9, %FP, -16; mem:ST8[%1+24]
	STRi64 %D9, %FP, -24; mem:ST8[%1+16]
	STRi64 %D9, %FP, -32; mem:ST8[%1+8]
	STRi64 %D9, %FP, -40; mem:ST8[%1]
	%R25<def> = MOVi32rr %R23
	%R26<def> = MOVi32rr %R19
    Successors according to CFG: BB#5(?%)

BB#5: derived from LLVM BB %for.body9
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#4 BB#7
	%R27<def> = LSL32ri %R26, 2, %STATUS<imp-def,dead>
	%R27<def> = ADDrr_r32 %R21, %R27<kill>, %STATUS<imp-def,dead>
	%R27<def> = LDRf32 %R27<kill>, 0; mem:Volatile LD4[%add.ptr10](tbaa=!2)
	%R32<def> = MOVi32rr %R17
	%R34<def> = MOVi32rr %R25
	%R33<def> = MOVi32rr %R19
    Successors according to CFG: BB#6(?%)

BB#6: derived from LLVM BB %for.body13
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26 %R27 %R32 %R33 %R34
    Predecessors according to CFG: BB#5 BB#6
	%R37<def> = LDRf32 %R34, -8; mem:Volatile LD4[%scevgep8](tbaa=!2)
	%R35<def> = ADDri_r32 %R32, 16, %STATUS<imp-def,dead>
	%R36<def> = ADDri_r32 %R34, 16, %STATUS<imp-def,dead>
	%R38<def> = LDRf32 %R34, -4; mem:Volatile LD4[%scevgep9](tbaa=!2)
	%R33<def> = ADDri_r32 %R33<kill>, 4, %STATUS<imp-def,dead>
	%R39<def> = LDRf32 %R34, 0; mem:Volatile LD4[%lsr.iv5](tbaa=!2)
	%R40<def> = LDRf32 %R34<kill>, 4; mem:Volatile LD4[%scevgep7](tbaa=!2)
	%D21<def> = LDRf64 %R32, -8; mem:LD4[%scevgep17](tbaa=!2) LD4[%scevgep15](tbaa=!2)
	%R34<def> = LDRi32_r32 %FP, -4; mem:LD4[FixedStack2]
	GID %CONFIG<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %R34<kill>
	GIE %CONFIG<imp-def,dead>
	%R43<def,tied1> = FMADDrr_r32 %R43<tied0>, %R27, %R37<kill>, %STATUS<imp-def,dead>, %D21<imp-use,kill>, %D21<imp-def>
	%R42<def,tied1> = FMADDrr_r32 %R42<tied0>, %R27, %R38<kill>, %STATUS<imp-def,dead>, %D21<imp-use,kill>, %D21<imp-def>
	%R44<def> = MOVi32rr %R43, %D22<imp-def>
	%R45<def> = MOVi32rr %R42, %D21<imp-use,kill>, %D22<imp-use,kill>, %D22<imp-def>
	STRf64 %D22<kill>, %R32, -8; mem:ST4[%scevgep17](tbaa=!2) ST4[%scevgep15](tbaa=!2)
	%R34<def> = LDRf32 %R32, 0; mem:LD4[%lsr.iv1214](tbaa=!2)
	%R34<def,tied1> = FMADDrr_r32 %R34<kill,tied0>, %R27, %R39<kill>, %STATUS<imp-def,dead>
	STRf32 %R34<kill>, %R32, 0; mem:ST4[%lsr.iv1214](tbaa=!2)
	%R37<def> = LDRf32 %R32, 4; mem:LD4[%scevgep16](tbaa=!2)
	%R37<def,tied1> = FMADDrr_r32 %R37<kill,tied0>, %R27, %R40<kill>, %STATUS<imp-def,dead>
	%R34<def,dead> = CMPri_r32 %R33, 8, %STATUS<imp-def>
	STRf32 %R37<kill>, %R32<kill>, 4; mem:ST4[%scevgep16](tbaa=!2)
	%R32<def> = MOVi32rr %R35<kill>
	%R34<def> = MOVi32rr %R36<kill>
	BCC <BB#6>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#6(0x7c000000 / 0x80000000 = 96.88%) BB#7(0x04000000 / 0x80000000 = 3.12%)

BB#7: derived from LLVM BB %for.end60
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#6
	%R25<def> = ADDrr_r32 %R25<kill>, %IP, %STATUS<imp-def,dead>
	%R26<def> = ADDri_r32 %R26<kill>, 1, %STATUS<imp-def,dead>
	%R27<def,dead> = CMPrr_r32 %R26, %R3, %STATUS<imp-def>
	BCC <BB#5>, 1, %STATUS<imp-use>
    Successors according to CFG: BB#8(0x04000000 / 0x80000000 = 3.12%) BB#5(0x7c000000 / 0x80000000 = 96.88%)

BB#8: derived from LLVM BB %for.cond64.preheader
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#7
	%R25<def> = MOVi32rr %R22
	%R26<def> = MOVi32rr %R19
    Successors according to CFG: BB#9(?%)

BB#9: derived from LLVM BB %for.body66
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#8 BB#9
	%R27<def> = ADDrr_r32 %R16, %R26, %STATUS<imp-def,dead>
	%R33<def> = LDRf32 %R27<kill>, 0; mem:LD4[%sunkaddr30](tbaa=!2)
	%R27<def> = ADDri_r32 %R25, 4, %STATUS<imp-def,dead>
	%R26<def> = ADDri_r32 %R26<kill>, 4, %STATUS<imp-def,dead>
	%R34<def> = LDRf32 %R25, 0; mem:Volatile LD4[%lsr.iv24](tbaa=!2)
	%R32<def> = LDRi32_r32 %FP, -4; mem:LD4[FixedStack2]
	GID %CONFIG<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %R32<kill>
	GIE %CONFIG<imp-def,dead>
	%R33<def> = FADDrr_r32 %R33<kill>, %R34<kill>, %STATUS<imp-def,dead>
	%R32<def,dead> = CMPri_r32 %R26, 32, %STATUS<imp-def>
	STRf32 %R33<kill>, %R25<kill>, 0; mem:Volatile ST4[%lsr.iv24](tbaa=!2)
	%R25<def> = MOVi32rr %R27<kill>
	BCC <BB#9>, 1, %STATUS<imp-use>
    Successors according to CFG: BB#10(0x04000000 / 0x80000000 = 3.12%) BB#9(0x7c000000 / 0x80000000 = 96.88%)

BB#10: derived from LLVM BB %for.end75
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#9
	%R22<def> = ADDri_r32 %R22<kill>, 32, %STATUS<imp-def,dead>
	%R23<def> = ADDri_r32 %R23<kill>, 32, %STATUS<imp-def,dead>
	%R24<def> = ADDri_r32 %R24<kill>, 8, %STATUS<imp-def,dead>
	%R25<def,dead> = CMPrr_r32 %R24, %R3, %STATUS<imp-def>
	BCC <BB#4>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#4(0x7c000000 / 0x80000000 = 96.88%) BB#11(0x04000000 / 0x80000000 = 3.12%)

BB#11: derived from LLVM BB %for.end78
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20
    Predecessors according to CFG: BB#10
	%R2<def> = ADDrr_r32 %R2<kill>, %IP, %STATUS<imp-def,dead>
	%R20<def> = ADDri_r32 %R20<kill>, 1, %STATUS<imp-def,dead>
	%R21<def,dead> = CMPrr_r32 %R20, %R3, %STATUS<imp-def>
	BCC <BB#3>, 1, %STATUS<imp-use>
    Successors according to CFG: BB#12(0x04000000 / 0x80000000 = 3.12%) BB#3(0x7c000000 / 0x80000000 = 96.88%)

BB#12: derived from LLVM BB %for.end81
    Predecessors according to CFG: BB#1 BB#11
	%R0<def> = LDRi32_r32 %FP, -44; mem:LD4[FixedStack1]
	GID
	%CONFIG<def> = MOVTS32_core %R0<kill>
	GIE %CONFIG<imp-use,kill>
	%LR<def> = LDRi64 %SP, 48; flags: FrameSetup
	%SP<def> = ADDri_r32 %SP, 48, %STATUS<imp-def>
	JR32 %LR

# End machine code for function matmac.

PostRAScheduler
Using scoreboard hazard recognizer: Depth = 8
AntiDep Critical-Path Registers:
********** List Scheduling **********
*** Final schedule ***

	Def Groups:
	Use Groups: CONFIG=g0->g156(last-use)
Observe:   GIE %CONFIG<imp-use,kill>
	Regs: CONFIG=g156->g0(region live-out)
Global memory object and new barrier chain: SU(1).
Global memory object and new barrier chain: SU(0).

===== Aggressive anti-dependency breaking
Available regs:  CMESHROUTE COREID DEBUGCMD DEBUGSTATUS FSTATUS ILAT ILATCL ILATST IMASK IP IPEND IRET LC LE LS MEMPROTECT MEMSTATUS MESHCONFIG MULTICAST PC RESETCORE RMESHROUTE SP STATUS XMESHROUTE ZERO A1 A2 A3 A4 CTIMER0 CTIMER1 D5 D6 D8 D9 D10 D11 D12 D13 D14 D15 D16 D17 D18 D19 D20 D21 D22 D23 D24 D25 D26 D27 D28 D29 D30 D31 R9 R10 R11 R12 R13 R14 R16 R17 R18 R19 R20 R21 R22 R23 R24 R25 R26 R27 R28 R29 R30 R31 R32 R33 R34 R35 R36 R37 R38 R39 R40 R41 R42 R43 R44 R45 R46 R47 R48 R49 R50 R51 R52 R53 R54 R55 R56 R57 R58 R59 R60 R61 R62 R63 V1 V2 V3 V4 V5 V8 DMA0CONFIG DMA1CONFIG DMA0COUNT DMA1COUNT DMA0DSTADDR DMA1DSTADDR DMA0SRCADDR DMA1SRCADDR DMA0STATUS DMA1STATUS DMA0STRIDE DMA1STRIDE DMA0AUTO0 DMA0AUTO1 DMA1AUTO0 DMA1AUTO1
Anti:   STRi64 %D9<kill>, %FP, -8; mem:ST4[FixedStack3] ST4[FixedStack2]
	Def Groups:
	Use Groups: D9=g0->g157(last-use) R18->g158(last-use) R19->g159(last-use) FP=g0
Anti:   %R19<def,tied1> = MOVTi32ri %R19<tied0>, 72, %D9<imp-use,kill>, %D9<imp-def>
	Def Groups: R19=g159->g157(via D9) D9=g157->g158(via R18)->g158(via R19)
	Antidep reg: D9 (passthru)
	Antidep reg: R19 (passthru)
	Use Groups: R19=g158 D9=g158
Anti:   %R18<def> = ANDrr_r32 %R19, %IP<kill>, %STATUS<imp-def>, %D9<imp-use,kill>, %D9<imp-def>
	Dead Def: STATUS->g160
	Def Groups: R18=g158->g158(via D9) STATUS=g160 D9=g158->g158(via R18)->g158(via R19)
	Antidep reg: D9 (passthru)
	Antidep reg: R18 (passthru)
	Use Groups: R19=g158 IP=g0->g161(last-use) D9=g158
Anti:   %IP<def,tied1> = MOVTi32ri %IP<kill,tied0>, 65521
	Def Groups: IP=g161
	Antidep reg: IP (passthru)
	Use Groups: IP=g161
Anti:   %IP<def> = MOVi32ri 65535
	Def Groups: IP=g161
	Use Groups:
Anti:   STRi32_r32 %R19, %FP, -44; mem:ST4[FixedStack1]
	Def Groups:
	Use Groups: R19=g158 FP=g0
Anti:   %R19<def> = MOVFS32_core %CONFIG, %D9<imp-def>
	Def Groups: R19=g158->g158(via D9) D9=g158->g158(via R18)->g158(via R19)
	Use Groups: CONFIG=g0
Anti:   GID %CONFIG<imp-def>
	Def Groups: CONFIG=g0
	Use Groups:
********** List Scheduling **********
SU(0):   GID %CONFIG<imp-def>
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 16
  Successors:
   ord  ExitSU *: Latency=1
   data SU(1): Latency=1 Reg=%CONFIG
   ord  SU(1): Latency=0

SU(1):   %R19<def> = MOVFS32_core %CONFIG, %D9<imp-def>
  # preds left       : 2
  # succs left       : 9
  # rdefs left       : 0
  Latency            : 5
  Depth              : 1
  Height             : 15
  Predecessors:
   data SU(0): Latency=1 Reg=%CONFIG
   ord  SU(0): Latency=0
  Successors:
   out  SU(6): Latency=1
   out  SU(5): Latency=1
   data SU(6): Latency=2 Reg=%R19
   data SU(5): Latency=2 Reg=%R19
   data SU(2): Latency=1 Reg=%R19
   data SU(5): Latency=5 Reg=%D9
   out  SU(5): Latency=1
   ord  SU(7): Latency=0
   ord  SU(2): Latency=0

SU(2):   STRi32_r32 %R19, %FP, -44; mem:ST4[FixedStack1]
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 5
  Depth              : 2
  Height             : 10
  Predecessors:
   data SU(1): Latency=1 Reg=%R19
   ord  SU(1): Latency=0
  Successors:
   anti SU(6): Latency=0
   anti SU(5): Latency=0
   ord  SU(7): Latency=0

SU(3):   %IP<def> = MOVi32ri 65535
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 5
  Depth              : 0
  Height             : 17
  Successors:
   out  SU(4): Latency=1
   data SU(4): Latency=2 Reg=%IP

SU(4):   %IP<def,tied1> = MOVTi32ri %IP<kill,tied0>, 65521
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 5
  Depth              : 2
  Height             : 15
  Predecessors:
   out  SU(3): Latency=1
   data SU(3): Latency=2 Reg=%IP
  Successors:
   data SU(5): Latency=5 Reg=%IP

SU(5):   %R18<def> = ANDrr_r32 %R19, %IP<kill>, %STATUS<imp-def>, %D9<imp-use,kill>, %D9<imp-def>
  # preds left       : 6
  # succs left       : 5
  # rdefs left       : 0
  Latency            : 5
  Depth              : 7
  Height             : 10
  Predecessors:
   data SU(4): Latency=5 Reg=%IP
   anti SU(2): Latency=0
   out  SU(1): Latency=1
   data SU(1): Latency=2 Reg=%R19
   data SU(1): Latency=5 Reg=%D9
   out  SU(1): Latency=1
  Successors:
   out  SU(6): Latency=1
   data SU(6): Latency=5 Reg=%D9
   out  SU(6): Latency=1
   data SU(6): Latency=5 Reg=%R19
   anti SU(6): Latency=0

SU(6):   %R19<def,tied1> = MOVTi32ri %R19<tied0>, 72, %D9<imp-use,kill>, %D9<imp-def>
  # preds left       : 8
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 5
  Depth              : 12
  Height             : 5
  Predecessors:
   out  SU(5): Latency=1
   data SU(5): Latency=5 Reg=%D9
   out  SU(5): Latency=1
   data SU(5): Latency=5 Reg=%R19
   anti SU(5): Latency=0
   anti SU(2): Latency=0
   out  SU(1): Latency=1
   data SU(1): Latency=2 Reg=%R19
  Successors:
   data SU(7): Latency=5 Reg=%D9

SU(7):   STRi64 %D9<kill>, %FP, -8; mem:ST4[FixedStack3] ST4[FixedStack2]
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 5
  Depth              : 17
  Height             : 0
  Predecessors:
   data SU(6): Latency=5 Reg=%D9
   ord  SU(2): Latency=0
   ord  SU(1): Latency=0


*** Examining Available
*** Scheduling [0]: SU(3):   %IP<def> = MOVi32ri 65535
Scoreboard:
	00000000000000000000000000000000
Scoreboard:
	00000000000000000000000000000001
	00000000000000000000000000000010
	00000000000000000000000000000100
	00000000000000000000000000001000
	00000000000000000000000000010000
*** Max instructions per cycle 0

*** Examining Available
*** Scheduling [1]: SU(0):   GID %CONFIG<imp-def>
Scoreboard:
	00000000000000000000000000000000
Scoreboard:
	00000000000000000000000000000010
	00000000000000000000000000000100
	00000000000000000000000000001000
	00000000000000000000000000010000
*** Max instructions per cycle 1

*** Examining Available
*** Scheduling [2]: SU(1):   %R19<def> = MOVFS32_core %CONFIG, %D9<imp-def>
Scoreboard:
	00000000000000000000000000000000
Scoreboard:
	00000000000000000000000000000101
	00000000000000000000000000001010
	00000000000000000000000000010100
	00000000000000000000000000001000
	00000000000000000000000000010000
*** Max instructions per cycle 2

*** Examining Available
*** Scheduling [3]: SU(4):   %IP<def,tied1> = MOVTi32ri %IP<kill,tied0>, 65521
Scoreboard:
	00000000000000000000000000000000
Scoreboard:
	00000000000000000000000000001011
	00000000000000000000000000010110
	00000000000000000000000000001100
	00000000000000000000000000011000
	00000000000000000000000000010000
*** Max instructions per cycle 3

*** Examining Available
*** Scheduling [4]: SU(2):   STRi32_r32 %R19, %FP, -44; mem:ST4[FixedStack1]
Scoreboard:
	00000000000000000000000000000000
Scoreboard:
	00000000000000000000000000010111
	00000000000000000000000000001110
	00000000000000000000000000011100
	00000000000000000000000000011000
	00000000000000000000000000010000
*** Max instructions per cycle 4

*** Examining Available
*** Stall in cycle 5

*** Examining Available
*** Stall in cycle 6

*** Examining Available
*** Stall in cycle 7

*** Examining Available
*** Scheduling [8]: SU(5):   %R18<def> = ANDrr_r32 %R19, %IP<kill>, %STATUS<imp-def>, %D9<imp-use,kill>, %D9<imp-def>
Scoreboard:
	00000000000000000000000000000000
Scoreboard:
	00000000000000000000000000010001
	00000000000000000000000000000010
	00000000000000000000000000000100
	00000000000000000000000000001000
	00000000000000000000000000010000
*** Max instructions per cycle 8

*** Examining Available
*** Stall in cycle 9

*** Examining Available
*** Stall in cycle 10

*** Examining Available
*** Stall in cycle 11

*** Examining Available
*** Stall in cycle 12

*** Examining Available
*** Scheduling [13]: SU(6):   %R19<def,tied1> = MOVTi32ri %R19<tied0>, 72, %D9<imp-use,kill>, %D9<imp-def>
Scoreboard:
	00000000000000000000000000000000
Scoreboard:
	00000000000000000000000000000001
	00000000000000000000000000000010
	00000000000000000000000000000100
	00000000000000000000000000001000
	00000000000000000000000000010000
*** Max instructions per cycle 13

*** Examining Available
*** Stall in cycle 14

*** Examining Available
*** Stall in cycle 15

*** Examining Available
*** Stall in cycle 16

*** Examining Available
*** Stall in cycle 17

*** Examining Available
*** Scheduling [18]: SU(7):   STRi64 %D9<kill>, %FP, -8; mem:ST4[FixedStack3] ST4[FixedStack2]
Scoreboard:
	00000000000000000000000000000000
Scoreboard:
	00000000000000000000000000000001
	00000000000000000000000000000010
	00000000000000000000000000000100
	00000000000000000000000000001000
	00000000000000000000000000010000
*** Max instructions per cycle 18
*** Final schedule ***
SU(3):   %IP<def> = MOVi32ri 65535
SU(0):   GID %CONFIG<imp-def>
SU(1):   %R19<def> = MOVFS32_core %CONFIG, %D9<imp-def>
SU(4):   %IP<def,tied1> = MOVTi32ri %IP<kill,tied0>, 65521
SU(2):   STRi32_r32 %R19, %FP, -44; mem:ST4[FixedStack1]
SU(5):   %R18<def> = ANDrr_r32 %R19, %IP<kill>, %STATUS<imp-def>, %D9<imp-use,kill>, %D9<imp-def>
SU(6):   %R19<def,tied1> = MOVTi32ri %R19<tied0>, 72, %D9<imp-use,kill>, %D9<imp-def>
SU(7):   STRi64 %D9<kill>, %FP, -8; mem:ST4[FixedStack3] ST4[FixedStack2]

	Def Groups:
	Use Groups:
Observe:   CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	Regs:
********** List Scheduling **********
*** Final schedule ***

	Def Groups:
	Use Groups:
Observe:   CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	Regs:
Global memory object and new barrier chain: SU(0).

===== Aggressive anti-dependency breaking
Available regs:  CMESHROUTE CONFIG COREID DEBUGCMD DEBUGSTATUS FSTATUS ILAT ILATCL ILATST IMASK IP IPEND IRET LC LE LS MEMPROTECT MEMSTATUS MESHCONFIG MULTICAST PC RESETCORE RMESHROUTE SP STATUS XMESHROUTE ZERO A1 A2 A3 A4 CTIMER0 CTIMER1 D5 D6 D8 D9 D10 D11 D12 D13 D14 D15 D16 D17 D18 D19 D20 D21 D22 D23 D24 D25 D26 D27 D28 D29 D30 D31 R9 R10 R11 R12 R13 R14 R16 R17 R18 R19 R20 R21 R22 R23 R24 R25 R26 R27 R28 R29 R30 R31 R32 R33 R34 R35 R36 R37 R38 R39 R40 R41 R42 R43 R44 R45 R46 R47 R48 R49 R50 R51 R52 R53 R54 R55 R56 R57 R58 R59 R60 R61 R62 R63 V1 V2 V3 V4 V5 V8 DMA0CONFIG DMA1CONFIG DMA0COUNT DMA1COUNT DMA0DSTADDR DMA1DSTADDR DMA0SRCADDR DMA1SRCADDR DMA0STATUS DMA1STATUS DMA0STRIDE DMA1STRIDE DMA0AUTO0 DMA0AUTO1 DMA1AUTO0 DMA1AUTO1
Anti:   %FP<def> = ADDri_r32 %SP, 48, %STATUS<imp-def>; flags: FrameSetup
	Dead Def: STATUS->g162
	Def Groups: FP=g0 STATUS=g162
	Use Groups: SP=g0->g163(last-use)
Anti:   %SP<def,tied2> = STRi64_pmd %LR, %SP<tied0>, -48; flags: FrameSetup
	Def Groups: SP=g163
	Use Groups: LR=g0 SP=g163
********** List Scheduling **********
SU(0):   %SP<def,tied2> = STRi64_pmd %LR, %SP<tied0>, -48; flags: FrameSetup
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 5
  Depth              : 0
  Height             : 2
  Successors:
   data SU(1): Latency=2 Reg=%SP

SU(1):   %FP<def> = ADDri_r32 %SP, 48, %STATUS<imp-def>; flags: FrameSetup
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 5
  Depth              : 2
  Height             : 0
  Predecessors:
   data SU(0): Latency=2 Reg=%SP


*** Examining Available
*** Scheduling [0]: SU(0):   %SP<def,tied2> = STRi64_pmd %LR, %SP<tied0>, -48; flags: FrameSetup
Scoreboard:
	00000000000000000000000000000000
Scoreboard:
	00000000000000000000000000000001
	00000000000000000000000000000010
	00000000000000000000000000000100
	00000000000000000000000000001000
	00000000000000000000000000010000
*** Max instructions per cycle 0

*** Examining Available
*** Stall in cycle 1

*** Examining Available
*** Scheduling [2]: SU(1):   %FP<def> = ADDri_r32 %SP, 48, %STATUS<imp-def>; flags: FrameSetup
Scoreboard:
	00000000000000000000000000000000
Scoreboard:
	00000000000000000000000000000101
	00000000000000000000000000001010
	00000000000000000000000000010100
	00000000000000000000000000001000
	00000000000000000000000000010000
*** Max instructions per cycle 2
*** Final schedule ***
SU(0):   %SP<def,tied2> = STRi64_pmd %LR, %SP<tied0>, -48; flags: FrameSetup
SU(1):   %FP<def> = ADDri_r32 %SP, 48, %STATUS<imp-def>; flags: FrameSetup

Fixup kills for BB#0
Fixing %physreg89<tied0> in   %R19<def,tied1> = MOVTi32ri %R19<kill,tied0>, 72, %D9<imp-use,kill>, %D9<imp-def>
Fixing %physreg89 in   %R18<def> = ANDrr_r32 %R19<kill>, %IP<kill>, %STATUS<imp-def>, %D9<imp-use,kill>, %D9<imp-def>
Fixing %physreg12<kill,tied0> in   %IP<def,tied1> = MOVTi32ri %IP<tied0>, 65521
********** List Scheduling **********
*** Final schedule ***

	Def Groups:
	Use Groups: STATUS=g0->g156(last-use)
Observe:   BCC <BB#12>, 8, %STATUS<imp-use>
	Regs: STATUS=g156->g0(region live-out)

===== Aggressive anti-dependency breaking
Available regs:  CMESHROUTE CONFIG COREID DEBUGCMD DEBUGSTATUS FSTATUS ILAT ILATCL ILATST IMASK IP IPEND IRET LC LE LS MEMPROTECT MEMSTATUS MESHCONFIG MULTICAST PC RESETCORE RMESHROUTE SP XMESHROUTE ZERO A1 A2 A3 A4 CTIMER0 CTIMER1 D5 D6 D8 D9 D10 D11 D12 D13 D14 D15 D16 D17 D18 D19 D20 D21 D22 D23 D24 D25 D26 D27 D28 D29 D30 D31 R9 R10 R11 R12 R13 R14 R16 R17 R18 R19 R20 R21 R22 R23 R24 R25 R26 R27 R28 R29 R30 R31 R32 R33 R34 R35 R36 R37 R38 R39 R40 R41 R42 R43 R44 R45 R46 R47 R48 R49 R50 R51 R52 R53 R54 R55 R56 R57 R58 R59 R60 R61 R62 R63 V1 V2 V3 V4 V5 V8 DMA0CONFIG DMA1CONFIG DMA0COUNT DMA1COUNT DMA0DSTADDR DMA1DSTADDR DMA0SRCADDR DMA1SRCADDR DMA0STATUS DMA1STATUS DMA0STRIDE DMA1STRIDE DMA0AUTO0 DMA0AUTO1 DMA1AUTO0 DMA1AUTO1
Anti:   %IP<def,dead> = CMPri_r32 %R3, 1, %STATUS<imp-def>
	Dead Def: IP->g157
	Def Groups: IP=g157 STATUS=g0
	Use Groups: R3=g0
********** List Scheduling **********
SU(0):   %IP<def,dead> = CMPri_r32 %R3, 1, %STATUS<imp-def>
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 5
  Depth              : 0
  Height             : 5
  Successors:
   ord  ExitSU *: Latency=5


*** Examining Available
*** Scheduling [0]: SU(0):   %IP<def,dead> = CMPri_r32 %R3, 1, %STATUS<imp-def>
Scoreboard:
	00000000000000000000000000000000
Scoreboard:
	00000000000000000000000000000001
	00000000000000000000000000000010
	00000000000000000000000000000100
	00000000000000000000000000001000
	00000000000000000000000000010000
*** Max instructions per cycle 0
*** Final schedule ***
SU(0):   %IP<def,dead> = CMPri_r32 %R3, 1, %STATUS<imp-def>

Fixup kills for BB#1
Global memory object and new barrier chain: SU(5).

===== Aggressive anti-dependency breaking
Available regs:  CMESHROUTE CONFIG COREID DEBUGCMD DEBUGSTATUS FSTATUS ILAT ILATCL ILATST IMASK IPEND IRET LC LE LS MEMPROTECT MEMSTATUS MESHCONFIG MULTICAST PC RESETCORE RMESHROUTE SP STATUS XMESHROUTE ZERO A1 A2 A3 A4 CTIMER0 CTIMER1 D5 D6 D11 D12 D13 D14 D15 D16 D17 D18 D19 D20 D21 D22 D23 D24 D25 D26 D27 D28 D29 D30 D31 R9 R10 R11 R12 R13 R14 R21 R22 R23 R24 R25 R26 R27 R28 R29 R30 R31 R32 R33 R34 R35 R36 R37 R38 R39 R40 R41 R42 R43 R44 R45 R46 R47 R48 R49 R50 R51 R52 R53 R54 R55 R56 R57 R58 R59 R60 R61 R62 R63 V1 V2 V3 V4 V5 V8 DMA0CONFIG DMA1CONFIG DMA0COUNT DMA1COUNT DMA0DSTADDR DMA1DSTADDR DMA0SRCADDR DMA1SRCADDR DMA0STATUS DMA1STATUS DMA0STRIDE DMA1STRIDE DMA0AUTO0 DMA0AUTO1 DMA1AUTO0 DMA1AUTO1
Anti:   %R20<def> = MOVi32rr %R19
	Def Groups: R20=g0->g0(via D10)
	Use Groups: R19=g0
Anti:   %R19<def> = MOVi32ri 0, %D9<imp-def>
	Def Groups: R19=g0->g0(via D9) D9=g0->g0(via R18)->g0(via R19)
	Use Groups:
Anti:   %R17<def> = ADDri_r32 %R16, 8, %STATUS<imp-def,dead>
	Dead Def: STATUS->g156
	Def Groups: R17=g0->g0(via D8) STATUS=g156
	Use Groups: R16=g0
Anti:   %R16<def> = MOViPTR %FP, -40
	Def Groups: R16=g0->g0(via D8)
	Use Groups: FP=g0
Anti:   %R1<def> = ADDri_r32 %R1<kill>, 8, %STATUS<imp-def,dead>
	Dead Def: STATUS->g157
	Def Groups: R1=g0->g0(via D0) STATUS=g157
	Use Groups: R1=g0
Anti:   %IP<def> = LSL32ri %R3, 2, %STATUS<imp-def,dead>
	Dead Def: STATUS->g158
	Def Groups: IP=g0 STATUS=g158
	Use Groups: R3=g0
********** List Scheduling **********
SU(0):   %IP<def> = LSL32ri %R3, 2, %STATUS<imp-def,dead>
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 5
  Depth              : 0
  Height             : 4
  Successors:
   ord  ExitSU *: Latency=4

SU(1):   %R1<def> = ADDri_r32 %R1<kill>, 8, %STATUS<imp-def,dead>
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 5
  Depth              : 0
  Height             : 4
  Successors:
   ord  ExitSU *: Latency=4

SU(2):   %R16<def> = MOViPTR %FP, -40
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 5
  Depth              : 0
  Height             : 6
  Successors:
   ord  ExitSU *: Latency=4
   data SU(3): Latency=2 Reg=%R16

SU(3):   %R17<def> = ADDri_r32 %R16, 8, %STATUS<imp-def,dead>
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 5
  Depth              : 2
  Height             : 4
  Predecessors:
   data SU(2): Latency=2 Reg=%R16
  Successors:
   ord  ExitSU *: Latency=4

SU(4):   %R19<def> = MOVi32ri 0, %D9<imp-def>
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 5
  Depth              : 0
  Height             : 6
  Successors:
   data SU(5): Latency=2 Reg=%R19
   ord  ExitSU *: Latency=5

SU(5):   %R20<def> = MOVi32rr %R19
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 5
  Depth              : 2
  Height             : 4
  Predecessors:
   data SU(4): Latency=2 Reg=%R19
  Successors:
   ord  ExitSU *: Latency=4


*** Examining Available
*** Scheduling [0]: SU(2):   %R16<def> = MOViPTR %FP, -40
Scoreboard:
	00000000000000000000000000000000
Scoreboard:
	00000000000000000000000000000001
	00000000000000000000000000000010
	00000000000000000000000000000100
	00000000000000000000000000001000
	00000000000000000000000000010000
*** Max instructions per cycle 0

*** Examining Available
*** Scheduling [1]: SU(4):   %R19<def> = MOVi32ri 0, %D9<imp-def>
Scoreboard:
	00000000000000000000000000000000
Scoreboard:
	00000000000000000000000000000011
	00000000000000000000000000000110
	00000000000000000000000000001100
	00000000000000000000000000011000
	00000000000000000000000000010000
*** Max instructions per cycle 1

*** Examining Available
*** Scheduling [2]: SU(0):   %IP<def> = LSL32ri %R3, 2, %STATUS<imp-def,dead>
Scoreboard:
	00000000000000000000000000000000
Scoreboard:
	00000000000000000000000000000111
	00000000000000000000000000001110
	00000000000000000000000000011100
	00000000000000000000000000011000
	00000000000000000000000000010000
*** Max instructions per cycle 2

*** Examining Available
*** Scheduling [3]: SU(1):   %R1<def> = ADDri_r32 %R1<kill>, 8, %STATUS<imp-def,dead>
Scoreboard:
	00000000000000000000000000000000
Scoreboard:
	00000000000000000000000000001111
	00000000000000000000000000011110
	00000000000000000000000000011100
	00000000000000000000000000011000
	00000000000000000000000000010000
*** Max instructions per cycle 3

*** Examining Available
*** Scheduling [4]: SU(3):   %R17<def> = ADDri_r32 %R16, 8, %STATUS<imp-def,dead>
Scoreboard:
	00000000000000000000000000000000
Scoreboard:
	00000000000000000000000000011111
	00000000000000000000000000011110
	00000000000000000000000000011100
	00000000000000000000000000011000
	00000000000000000000000000010000
*** Max instructions per cycle 4

*** Examining Available
*** Scheduling [5]: SU(5):   %R20<def> = MOVi32rr %R19
Scoreboard:
	00000000000000000000000000000000
Scoreboard:
	00000000000000000000000000011111
	00000000000000000000000000011110
	00000000000000000000000000011100
	00000000000000000000000000011000
	00000000000000000000000000010000
*** Max instructions per cycle 5
*** Final schedule ***
SU(2):   %R16<def> = MOViPTR %FP, -40
SU(4):   %R19<def> = MOVi32ri 0, %D9<imp-def>
SU(0):   %IP<def> = LSL32ri %R3, 2, %STATUS<imp-def,dead>
SU(1):   %R1<def> = ADDri_r32 %R1<kill>, 8, %STATUS<imp-def,dead>
SU(3):   %R17<def> = ADDri_r32 %R16, 8, %STATUS<imp-def,dead>
SU(5):   %R20<def> = MOVi32rr %R19

Fixup kills for BB#2
Global memory object and new barrier chain: SU(5).
Global memory object and new barrier chain: SU(4).
Global memory object and new barrier chain: SU(3).

===== Aggressive anti-dependency breaking
Available regs:  CMESHROUTE CONFIG COREID DEBUGCMD DEBUGSTATUS FSTATUS ILAT ILATCL ILATST IMASK IPEND IRET LC LE LS MEMPROTECT MEMSTATUS MESHCONFIG MULTICAST PC RESETCORE RMESHROUTE SP STATUS XMESHROUTE ZERO A1 A2 A3 A4 CTIMER0 CTIMER1 D5 D6 D13 D14 D15 D16 D17 D18 D19 D20 D21 D22 D23 D24 D25 D26 D27 D28 D29 D30 D31 R9 R10 R11 R12 R13 R14 R25 R26 R27 R28 R29 R30 R31 R32 R33 R34 R35 R36 R37 R38 R39 R40 R41 R42 R43 R44 R45 R46 R47 R48 R49 R50 R51 R52 R53 R54 R55 R56 R57 R58 R59 R60 R61 R62 R63 V1 V2 V3 V4 V5 V8 DMA0CONFIG DMA1CONFIG DMA0COUNT DMA1COUNT DMA0DSTADDR DMA1DSTADDR DMA0SRCADDR DMA1SRCADDR DMA0STATUS DMA1STATUS DMA0STRIDE DMA1STRIDE DMA0AUTO0 DMA0AUTO1 DMA1AUTO0 DMA1AUTO1
Anti:   %R24<def> = MOVi32rr %R19
	Def Groups: R24=g0->g0(via D12)
	Use Groups: R19=g0
Anti:   %R23<def> = MOVi32rr %R1
	Def Groups: R23=g0->g0(via D11)
	Use Groups: R1=g0
Anti:   %R22<def> = MOVi32rr %R2
	Def Groups: R22=g0->g0(via D11)
	Use Groups: R2=g0
Anti:   %R21<def> = ADDrr_r32 %R0, %R21<kill>, %STATUS<imp-def,dead>
	Dead Def: STATUS->g156
	Def Groups: R21=g0->g0(via D10) STATUS=g156
	Antidep reg: R21 (real dependency)
	Use Groups: R0=g0 R21=g0
Anti:   %R21<def> = LSL32ri %R21<kill>, 2, %STATUS<imp-def,dead>
	Dead Def: STATUS->g157
	Def Groups: R21=g0->g0(via D10) STATUS=g157
	Antidep reg: R21 (real dependency)
	Use Groups: R21=g0
Anti:   %R21<def> = IMULrr_r32 %R20, %R3, %STATUS<imp-def,dead>
	Dead Def: STATUS->g158
	Def Groups: R21=g0->g0(via D10) STATUS=g158
	Use Groups: R20=g0 R3=g0
********** List Scheduling **********
SU(0):   %R21<def> = IMULrr_r32 %R20, %R3, %STATUS<imp-def,dead>
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 5
  Depth              : 0
  Height             : 11
  Successors:
   out  SU(1): Latency=1
   data SU(1): Latency=2 Reg=%R21

SU(1):   %R21<def> = LSL32ri %R21<kill>, 2, %STATUS<imp-def,dead>
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 5
  Depth              : 2
  Height             : 9
  Predecessors:
   out  SU(0): Latency=1
   data SU(0): Latency=2 Reg=%R21
  Successors:
   out  SU(2): Latency=1
   data SU(2): Latency=5 Reg=%R21

SU(2):   %R21<def> = ADDrr_r32 %R0, %R21<kill>, %STATUS<imp-def,dead>
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 5
  Depth              : 7
  Height             : 4
  Predecessors:
   out  SU(1): Latency=1
   data SU(1): Latency=5 Reg=%R21
  Successors:
   ord  ExitSU *: Latency=4

SU(3):   %R22<def> = MOVi32rr %R2
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 5
  Depth              : 0
  Height             : 4
  Successors:
   ord  ExitSU *: Latency=4
   ord  SU(4): Latency=0

SU(4):   %R23<def> = MOVi32rr %R1
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 5
  Depth              : 0
  Height             : 4
  Predecessors:
   ord  SU(3): Latency=0
  Successors:
   ord  ExitSU *: Latency=4
   ord  SU(5): Latency=0

SU(5):   %R24<def> = MOVi32rr %R19
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 5
  Depth              : 0
  Height             : 4
  Predecessors:
   ord  SU(4): Latency=0
  Successors:
   ord  ExitSU *: Latency=4


*** Examining Available
*** Scheduling [0]: SU(0):   %R21<def> = IMULrr_r32 %R20, %R3, %STATUS<imp-def,dead>
Scoreboard:
	00000000000000000000000000000000
Scoreboard:
	00000000000000000000000000000001
	00000000000000000000000000000010
	00000000000000000000000000000100
	00000000000000000000000000001000
	00000000000000000000000000010000
*** Max instructions per cycle 0

*** Examining Available
*** Scheduling [1]: SU(3):   %R22<def> = MOVi32rr %R2
Scoreboard:
	00000000000000000000000000000000
Scoreboard:
	00000000000000000000000000000011
	00000000000000000000000000000110
	00000000000000000000000000001100
	00000000000000000000000000011000
	00000000000000000000000000010000
*** Max instructions per cycle 1

*** Examining Available
*** Scheduling [2]: SU(1):   %R21<def> = LSL32ri %R21<kill>, 2, %STATUS<imp-def,dead>
Scoreboard:
	00000000000000000000000000000000
Scoreboard:
	00000000000000000000000000000111
	00000000000000000000000000001110
	00000000000000000000000000011100
	00000000000000000000000000011000
	00000000000000000000000000010000
*** Max instructions per cycle 2

*** Examining Available
*** Scheduling [3]: SU(4):   %R23<def> = MOVi32rr %R1
Scoreboard:
	00000000000000000000000000000000
Scoreboard:
	00000000000000000000000000001111
	00000000000000000000000000011110
	00000000000000000000000000011100
	00000000000000000000000000011000
	00000000000000000000000000010000
*** Max instructions per cycle 3

*** Examining Available
*** Scheduling [4]: SU(5):   %R24<def> = MOVi32rr %R19
Scoreboard:
	00000000000000000000000000000000
Scoreboard:
	00000000000000000000000000011111
	00000000000000000000000000011110
	00000000000000000000000000011100
	00000000000000000000000000011000
	00000000000000000000000000010000
*** Max instructions per cycle 4

*** Examining Available
*** Stall in cycle 5

*** Examining Available
*** Stall in cycle 6

*** Examining Available
*** Scheduling [7]: SU(2):   %R21<def> = ADDrr_r32 %R0, %R21<kill>, %STATUS<imp-def,dead>
Scoreboard:
	00000000000000000000000000000000
Scoreboard:
	00000000000000000000000000011001
	00000000000000000000000000010010
	00000000000000000000000000000100
	00000000000000000000000000001000
	00000000000000000000000000010000
*** Max instructions per cycle 7
*** Final schedule ***
SU(0):   %R21<def> = IMULrr_r32 %R20, %R3, %STATUS<imp-def,dead>
SU(3):   %R22<def> = MOVi32rr %R2
SU(1):   %R21<def> = LSL32ri %R21<kill>, 2, %STATUS<imp-def,dead>
SU(4):   %R23<def> = MOVi32rr %R1
SU(5):   %R24<def> = MOVi32rr %R19
SU(2):   %R21<def> = ADDrr_r32 %R0, %R21<kill>, %STATUS<imp-def,dead>

	Dead Def: CONFIG->g159
	Def Groups: CONFIG=g159
	Use Groups:
Observe:   GIE %CONFIG<imp-def,dead>
	Regs:
Global memory object and new barrier chain: SU(2).
Global memory object and new barrier chain: SU(1).

===== Aggressive anti-dependency breaking
Available regs:  CMESHROUTE CONFIG COREID DEBUGCMD DEBUGSTATUS FSTATUS ILAT ILATCL ILATST IMASK IPEND IRET LC LE LS MEMPROTECT MEMSTATUS MESHCONFIG MULTICAST PC RESETCORE RMESHROUTE SP STATUS XMESHROUTE ZERO A1 A2 A3 A4 CTIMER0 CTIMER1 D5 D6 D13 D14 D15 D16 D17 D18 D19 D20 D21 D22 D23 D24 D25 D26 D27 D28 D29 D30 D31 R9 R10 R11 R12 R13 R14 R21 R22 R23 R24 R25 R26 R27 R28 R29 R30 R31 R32 R33 R34 R35 R36 R37 R38 R39 R40 R41 R42 R43 R44 R45 R46 R47 R48 R49 R50 R51 R52 R53 R54 R55 R56 R57 R58 R59 R60 R61 R62 R63 V1 V2 V3 V4 V5 V8 DMA0CONFIG DMA1CONFIG DMA0COUNT DMA1COUNT DMA0DSTADDR DMA1DSTADDR DMA0SRCADDR DMA1SRCADDR DMA0STATUS DMA1STATUS DMA0STRIDE DMA1STRIDE DMA0AUTO0 DMA0AUTO1 DMA1AUTO0 DMA1AUTO1
Anti:   %CONFIG<def,dead> = MOVTS32_core %R21<kill>
	Dead Def: CONFIG->g160
	Def Groups: CONFIG=g160
	Use Groups: R21=g0
Anti:   GID %CONFIG<imp-def,dead>
	Dead Def: CONFIG->g161
	Def Groups: CONFIG=g161
	Use Groups:
Anti:   %R21<def> = LDRi32_r32 %FP, -8; mem:LD4[FixedStack3]
	Def Groups: R21=g0->g0(via D10)
	Use Groups: FP=g0
********** List Scheduling **********
SU(0):   %R21<def> = LDRi32_r32 %FP, -8; mem:LD4[FixedStack3]
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 6
  Depth              : 0
  Height             : 4
  Successors:
   data SU(2): Latency=4 Reg=%R21
   ord  SU(1): Latency=0

SU(1):   GID %CONFIG<imp-def,dead>
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Predecessors:
   ord  SU(0): Latency=0
  Successors:
   ord  SU(2): Latency=0

SU(2):   %CONFIG<def,dead> = MOVTS32_core %R21<kill>
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 5
  Depth              : 4
  Height             : 0
  Predecessors:
   ord  SU(1): Latency=0
   data SU(0): Latency=4 Reg=%R21


*** Examining Available
*** Scheduling [0]: SU(0):   %R21<def> = LDRi32_r32 %FP, -8; mem:LD4[FixedStack3]
Scoreboard:
	00000000000000000000000000000000
Scoreboard:
	00000000000000000000000000000001
	00000000000000000000000000000010
	00000000000000000000000000000100
	00000000000000000000000000001000
	00000000000000000000000000010000
	00000000000000000000000000100000
*** Max instructions per cycle 0

*** Examining Available
*** Scheduling [1]: SU(1):   GID %CONFIG<imp-def,dead>
Scoreboard:
	00000000000000000000000000000000
Scoreboard:
	00000000000000000000000000000010
	00000000000000000000000000000100
	00000000000000000000000000001000
	00000000000000000000000000010000
	00000000000000000000000000100000
*** Max instructions per cycle 1

*** Examining Available
*** Stall in cycle 2

*** Examining Available
*** Stall in cycle 3

*** Examining Available
*** Scheduling [4]: SU(2):   %CONFIG<def,dead> = MOVTS32_core %R21<kill>
Scoreboard:
	00000000000000000000000000000000
Scoreboard:
	00000000000000000000000000010001
	00000000000000000000000000100010
	00000000000000000000000000000100
	00000000000000000000000000001000
	00000000000000000000000000010000
*** Max instructions per cycle 4
*** Final schedule ***
SU(0):   %R21<def> = LDRi32_r32 %FP, -8; mem:LD4[FixedStack3]
SU(1):   GID %CONFIG<imp-def,dead>
SU(2):   %CONFIG<def,dead> = MOVTS32_core %R21<kill>

Fixup kills for BB#3
Global memory object and new barrier chain: SU(6).
Global memory object and new barrier chain: SU(5).
Global memory object and new barrier chain: SU(0).

===== Aggressive anti-dependency breaking
Available regs:  CMESHROUTE CONFIG COREID DEBUGCMD DEBUGSTATUS FSTATUS ILAT ILATCL ILATST IMASK IPEND IRET LC LE LS MEMPROTECT MEMSTATUS MESHCONFIG MULTICAST PC RESETCORE RMESHROUTE SP STATUS XMESHROUTE ZERO A1 A2 A3 A4 CTIMER0 CTIMER1 D5 D6 D14 D15 D16 D17 D18 D19 D20 D21 D22 D23 D24 D25 D26 D27 D28 D29 D30 D31 R9 R10 R11 R12 R13 R14 R27 R28 R29 R30 R31 R32 R33 R34 R35 R36 R37 R38 R39 R40 R41 R42 R43 R44 R45 R46 R47 R48 R49 R50 R51 R52 R53 R54 R55 R56 R57 R58 R59 R60 R61 R62 R63 V1 V2 V3 V4 V5 V8 DMA0CONFIG DMA1CONFIG DMA0COUNT DMA1COUNT DMA0DSTADDR DMA1DSTADDR DMA0SRCADDR DMA1SRCADDR DMA0STATUS DMA1STATUS DMA0STRIDE DMA1STRIDE DMA0AUTO0 DMA0AUTO1 DMA1AUTO0 DMA1AUTO1
Anti:   %R26<def> = MOVi32rr %R19
	Def Groups: R26=g0->g0(via D13)
	Use Groups: R19=g0
Anti:   %R25<def> = MOVi32rr %R23
	Def Groups: R25=g0->g0(via D12)
	Use Groups: R23=g0
Anti:   STRi64 %D9, %FP, -40; mem:ST8[%1]
	Def Groups:
	Use Groups: D9=g0 FP=g0
Anti:   STRi64 %D9, %FP, -32; mem:ST8[%1+8]
	Def Groups:
	Use Groups: D9=g0 FP=g0
Anti:   STRi64 %D9, %FP, -24; mem:ST8[%1+16]
	Def Groups:
	Use Groups: D9=g0 FP=g0
Anti:   STRi64 %D9, %FP, -16; mem:ST8[%1+24]
	Def Groups:
	Use Groups: D9=g0 FP=g0
Anti:   %R18<def> = MOVi32rr %R19, %D9<imp-use,kill>, %D9<imp-def>
	Def Groups: R18=g0->g0(via D9) D9=g0->g0(via R18)->g0(via R19)
	Use Groups: R19=g0 D9=g0
********** List Scheduling **********
SU(0):   %R18<def> = MOVi32rr %R19, %D9<imp-use,kill>, %D9<imp-def>
  # preds left       : 0
  # succs left       : 11
  # rdefs left       : 0
  Latency            : 5
  Depth              : 0
  Height             : 9
  Successors:
   ord  ExitSU *: Latency=5
   data SU(4): Latency=5 Reg=%D9
   data SU(3): Latency=5 Reg=%D9
   data SU(2): Latency=5 Reg=%D9
   data SU(1): Latency=5 Reg=%D9
   data SU(6): Latency=5 Reg=%R19
   ord  SU(5): Latency=0
   ord  SU(4): Latency=0
   ord  SU(3): Latency=0
   ord  SU(2): Latency=0
   ord  SU(1): Latency=0

SU(1):   STRi64 %D9, %FP, -16; mem:ST8[%1+24]
  # preds left       : 2
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 5
  Depth              : 5
  Height             : 4
  Predecessors:
   data SU(0): Latency=5 Reg=%D9
   ord  SU(0): Latency=0
  Successors:
   ord  SU(5): Latency=0
   ord  SU(4): Latency=0
   ord  SU(3): Latency=0
   ord  SU(2): Latency=0

SU(2):   STRi64 %D9, %FP, -24; mem:ST8[%1+16]
  # preds left       : 3
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 5
  Depth              : 5
  Height             : 4
  Predecessors:
   ord  SU(1): Latency=0
   data SU(0): Latency=5 Reg=%D9
   ord  SU(0): Latency=0
  Successors:
   ord  SU(5): Latency=0
   ord  SU(4): Latency=0
   ord  SU(3): Latency=0

SU(3):   STRi64 %D9, %FP, -32; mem:ST8[%1+8]
  # preds left       : 4
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 5
  Depth              : 5
  Height             : 4
  Predecessors:
   ord  SU(2): Latency=0
   ord  SU(1): Latency=0
   data SU(0): Latency=5 Reg=%D9
   ord  SU(0): Latency=0
  Successors:
   ord  SU(5): Latency=0
   ord  SU(4): Latency=0

SU(4):   STRi64 %D9, %FP, -40; mem:ST8[%1]
  # preds left       : 5
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 5
  Depth              : 5
  Height             : 4
  Predecessors:
   ord  SU(3): Latency=0
   ord  SU(2): Latency=0
   ord  SU(1): Latency=0
   data SU(0): Latency=5 Reg=%D9
   ord  SU(0): Latency=0
  Successors:
   ord  SU(5): Latency=0

SU(5):   %R25<def> = MOVi32rr %R23
  # preds left       : 5
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 5
  Depth              : 5
  Height             : 4
  Predecessors:
   ord  SU(4): Latency=0
   ord  SU(3): Latency=0
   ord  SU(2): Latency=0
   ord  SU(1): Latency=0
   ord  SU(0): Latency=0
  Successors:
   ord  ExitSU *: Latency=4
   ord  SU(6): Latency=0

SU(6):   %R26<def> = MOVi32rr %R19
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 5
  Depth              : 5
  Height             : 4
  Predecessors:
   ord  SU(5): Latency=0
   data SU(0): Latency=5 Reg=%R19
  Successors:
   ord  ExitSU *: Latency=4


*** Examining Available
*** Scheduling [0]: SU(0):   %R18<def> = MOVi32rr %R19, %D9<imp-use,kill>, %D9<imp-def>
Scoreboard:
	00000000000000000000000000000000
Scoreboard:
	00000000000000000000000000000001
	00000000000000000000000000000010
	00000000000000000000000000000100
	00000000000000000000000000001000
	00000000000000000000000000010000
*** Max instructions per cycle 0

*** Examining Available
*** Stall in cycle 1

*** Examining Available
*** Stall in cycle 2

*** Examining Available
*** Stall in cycle 3

*** Examining Available
*** Stall in cycle 4

*** Examining Available
*** Scheduling [5]: SU(1):   STRi64 %D9, %FP, -16; mem:ST8[%1+24]
Scoreboard:
	00000000000000000000000000000000
Scoreboard:
	00000000000000000000000000000001
	00000000000000000000000000000010
	00000000000000000000000000000100
	00000000000000000000000000001000
	00000000000000000000000000010000
*** Max instructions per cycle 5

*** Examining Available
*** Scheduling [6]: SU(2):   STRi64 %D9, %FP, -24; mem:ST8[%1+16]
Scoreboard:
	00000000000000000000000000000000
Scoreboard:
	00000000000000000000000000000011
	00000000000000000000000000000110
	00000000000000000000000000001100
	00000000000000000000000000011000
	00000000000000000000000000010000
*** Max instructions per cycle 6

*** Examining Available
*** Scheduling [7]: SU(3):   STRi64 %D9, %FP, -32; mem:ST8[%1+8]
Scoreboard:
	00000000000000000000000000000000
Scoreboard:
	00000000000000000000000000000111
	00000000000000000000000000001110
	00000000000000000000000000011100
	00000000000000000000000000011000
	00000000000000000000000000010000
*** Max instructions per cycle 7

*** Examining Available
*** Scheduling [8]: SU(4):   STRi64 %D9, %FP, -40; mem:ST8[%1]
Scoreboard:
	00000000000000000000000000000000
Scoreboard:
	00000000000000000000000000001111
	00000000000000000000000000011110
	00000000000000000000000000011100
	00000000000000000000000000011000
	00000000000000000000000000010000
*** Max instructions per cycle 8

*** Examining Available
*** Scheduling [9]: SU(5):   %R25<def> = MOVi32rr %R23
Scoreboard:
	00000000000000000000000000000000
Scoreboard:
	00000000000000000000000000011111
	00000000000000000000000000011110
	00000000000000000000000000011100
	00000000000000000000000000011000
	00000000000000000000000000010000
*** Max instructions per cycle 9

*** Examining Available
*** Scheduling [10]: SU(6):   %R26<def> = MOVi32rr %R19
Scoreboard:
	00000000000000000000000000000000
Scoreboard:
	00000000000000000000000000011111
	00000000000000000000000000011110
	00000000000000000000000000011100
	00000000000000000000000000011000
	00000000000000000000000000010000
*** Max instructions per cycle 10
*** Final schedule ***
SU(0):   %R18<def> = MOVi32rr %R19, %D9<imp-use,kill>, %D9<imp-def>
SU(1):   STRi64 %D9, %FP, -16; mem:ST8[%1+24]
SU(2):   STRi64 %D9, %FP, -24; mem:ST8[%1+16]
SU(3):   STRi64 %D9, %FP, -32; mem:ST8[%1+8]
SU(4):   STRi64 %D9, %FP, -40; mem:ST8[%1]
SU(5):   %R25<def> = MOVi32rr %R23
SU(6):   %R26<def> = MOVi32rr %R19

Fixup kills for BB#4
Fixing %physreg89 in   %R18<def> = MOVi32rr %R19<kill>, %D9<imp-use,kill>, %D9<imp-def>
Global memory object and new barrier chain: SU(5).
Global memory object and new barrier chain: SU(4).
Global memory object and new barrier chain: SU(3).
Global memory object and new barrier chain: SU(2).

===== Aggressive anti-dependency breaking
Available regs:  CMESHROUTE CONFIG COREID DEBUGCMD DEBUGSTATUS FSTATUS ILAT ILATCL ILATST IMASK IPEND IRET LC LE LS MEMPROTECT MEMSTATUS MESHCONFIG MULTICAST PC RESETCORE RMESHROUTE SP STATUS XMESHROUTE ZERO A1 A2 A3 A4 CTIMER0 CTIMER1 D5 D6 D14 D15 D18 D19 D20 D21 D22 D23 D24 D25 D26 D27 D28 D29 D30 D31 R9 R10 R11 R12 R13 R14 R28 R29 R30 R31 R35 R36 R37 R38 R39 R40 R41 R42 R43 R44 R45 R46 R47 R48 R49 R50 R51 R52 R53 R54 R55 R56 R57 R58 R59 R60 R61 R62 R63 V1 V2 V3 V4 V5 V8 DMA0CONFIG DMA1CONFIG DMA0COUNT DMA1COUNT DMA0DSTADDR DMA1DSTADDR DMA0SRCADDR DMA1SRCADDR DMA0STATUS DMA1STATUS DMA0STRIDE DMA1STRIDE DMA0AUTO0 DMA0AUTO1 DMA1AUTO0 DMA1AUTO1
Anti:   %R33<def> = MOVi32rr %R19
	Def Groups: R33=g0->g0(via D16)
	Use Groups: R19=g0
Anti:   %R34<def> = MOVi32rr %R25
	Def Groups: R34=g0->g0(via D17)
	Use Groups: R25=g0
Anti:   %R32<def> = MOVi32rr %R17
	Def Groups: R32=g0->g0(via D16)
	Use Groups: R17=g0
Anti:   %R27<def> = LDRf32 %R27<kill>, 0; mem:Volatile LD4[%add.ptr10](tbaa=!2)
	Def Groups: R27=g0->g0(via D13)
	Antidep reg: R27 (real dependency)
	Use Groups: R27=g0
Anti:   %R27<def> = ADDrr_r32 %R21, %R27<kill>, %STATUS<imp-def,dead>
	Dead Def: STATUS->g156
	Def Groups: R27=g0->g0(via D13) STATUS=g156
	Antidep reg: R27 (real dependency)
	Use Groups: R21=g0 R27=g0
Anti:   %R27<def> = LSL32ri %R26, 2, %STATUS<imp-def,dead>
	Dead Def: STATUS->g157
	Def Groups: R27=g0->g0(via D13) STATUS=g157
	Use Groups: R26=g0
********** List Scheduling **********
SU(0):   %R27<def> = LSL32ri %R26, 2, %STATUS<imp-def,dead>
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 5
  Depth              : 0
  Height             : 13
  Successors:
   out  SU(1): Latency=1
   data SU(1): Latency=5 Reg=%R27

SU(1):   %R27<def> = ADDrr_r32 %R21, %R27<kill>, %STATUS<imp-def,dead>
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 5
  Depth              : 5
  Height             : 8
  Predecessors:
   out  SU(0): Latency=1
   data SU(0): Latency=5 Reg=%R27
  Successors:
   out  SU(2): Latency=1
   data SU(2): Latency=2 Reg=%R27

SU(2):   %R27<def> = LDRf32 %R27<kill>, 0; mem:Volatile LD4[%add.ptr10](tbaa=!2)
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 6
  Depth              : 7
  Height             : 6
  Predecessors:
   out  SU(1): Latency=1
   data SU(1): Latency=2 Reg=%R27
  Successors:
   ord  ExitSU *: Latency=6
   ord  SU(3): Latency=0

SU(3):   %R32<def> = MOVi32rr %R17
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 5
  Depth              : 7
  Height             : 4
  Predecessors:
   ord  SU(2): Latency=0
  Successors:
   ord  ExitSU *: Latency=4
   ord  SU(4): Latency=0

SU(4):   %R34<def> = MOVi32rr %R25
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 5
  Depth              : 7
  Height             : 4
  Predecessors:
   ord  SU(3): Latency=0
  Successors:
   ord  ExitSU *: Latency=4
   ord  SU(5): Latency=0

SU(5):   %R33<def> = MOVi32rr %R19
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 5
  Depth              : 7
  Height             : 4
  Predecessors:
   ord  SU(4): Latency=0
  Successors:
   ord  ExitSU *: Latency=4


*** Examining Available
*** Scheduling [0]: SU(0):   %R27<def> = LSL32ri %R26, 2, %STATUS<imp-def,dead>
Scoreboard:
	00000000000000000000000000000000
Scoreboard:
	00000000000000000000000000000001
	00000000000000000000000000000010
	00000000000000000000000000000100
	00000000000000000000000000001000
	00000000000000000000000000010000
*** Max instructions per cycle 0

*** Examining Available
*** Stall in cycle 1

*** Examining Available
*** Stall in cycle 2

*** Examining Available
*** Stall in cycle 3

*** Examining Available
*** Stall in cycle 4

*** Examining Available
*** Scheduling [5]: SU(1):   %R27<def> = ADDrr_r32 %R21, %R27<kill>, %STATUS<imp-def,dead>
Scoreboard:
	00000000000000000000000000000000
Scoreboard:
	00000000000000000000000000000001
	00000000000000000000000000000010
	00000000000000000000000000000100
	00000000000000000000000000001000
	00000000000000000000000000010000
*** Max instructions per cycle 5

*** Examining Available
*** Stall in cycle 6

*** Examining Available
*** Scheduling [7]: SU(2):   %R27<def> = LDRf32 %R27<kill>, 0; mem:Volatile LD4[%add.ptr10](tbaa=!2)
Scoreboard:
	00000000000000000000000000000000
Scoreboard:
	00000000000000000000000000000101
	00000000000000000000000000001010
	00000000000000000000000000010100
	00000000000000000000000000001000
	00000000000000000000000000010000
	00000000000000000000000000100000
*** Max instructions per cycle 7

*** Examining Available
*** Scheduling [8]: SU(3):   %R32<def> = MOVi32rr %R17
Scoreboard:
	00000000000000000000000000000000
Scoreboard:
	00000000000000000000000000001011
	00000000000000000000000000010110
	00000000000000000000000000001100
	00000000000000000000000000011000
	00000000000000000000000000110000
*** Max instructions per cycle 8

*** Examining Available
*** Scheduling [9]: SU(4):   %R34<def> = MOVi32rr %R25
Scoreboard:
	00000000000000000000000000000000
Scoreboard:
	00000000000000000000000000010111
	00000000000000000000000000001110
	00000000000000000000000000011100
	00000000000000000000000000111000
	00000000000000000000000000010000
*** Max instructions per cycle 9

*** Examining Available
*** Scheduling [10]: SU(5):   %R33<def> = MOVi32rr %R19
Scoreboard:
	00000000000000000000000000000000
Scoreboard:
	00000000000000000000000000001111
	00000000000000000000000000011110
	00000000000000000000000000111100
	00000000000000000000000000011000
	00000000000000000000000000010000
*** Max instructions per cycle 10
*** Final schedule ***
SU(0):   %R27<def> = LSL32ri %R26, 2, %STATUS<imp-def,dead>
SU(1):   %R27<def> = ADDrr_r32 %R21, %R27<kill>, %STATUS<imp-def,dead>
SU(2):   %R27<def> = LDRf32 %R27<kill>, 0; mem:Volatile LD4[%add.ptr10](tbaa=!2)
SU(3):   %R32<def> = MOVi32rr %R17
SU(4):   %R34<def> = MOVi32rr %R25
SU(5):   %R33<def> = MOVi32rr %R19

Fixup kills for BB#5
********** List Scheduling **********
*** Final schedule ***

	Def Groups:
	Use Groups: STATUS=g0->g156(last-use)
Observe:   BCC <BB#6>, 8, %STATUS<imp-use>
	Regs: STATUS=g156->g0(region live-out)
Global memory object and new barrier chain: SU(13).
Global memory object and new barrier chain: SU(12).
Global memory object and new barrier chain: SU(3).
Global memory object and new barrier chain: SU(2).

===== Aggressive anti-dependency breaking
Available regs:  CMESHROUTE CONFIG COREID DEBUGCMD DEBUGSTATUS FSTATUS ILAT ILATCL ILATST IMASK IPEND IRET LC LE LS MEMPROTECT MEMSTATUS MESHCONFIG MULTICAST PC RESETCORE RMESHROUTE SP XMESHROUTE ZERO A1 A2 A3 A4 CTIMER0 CTIMER1 D5 D6 D14 D15 D18 D19 D20 D21 D22 D23 D24 D25 D26 D27 D28 D29 D30 D31 R9 R10 R11 R12 R13 R14 R28 R29 R30 R31 R35 R36 R37 R38 R39 R40 R41 R42 R43 R44 R45 R46 R47 R48 R49 R50 R51 R52 R53 R54 R55 R56 R57 R58 R59 R60 R61 R62 R63 V1 V2 V3 V4 V5 V8 DMA0CONFIG DMA1CONFIG DMA0COUNT DMA1COUNT DMA0DSTADDR DMA1DSTADDR DMA0SRCADDR DMA1SRCADDR DMA0STATUS DMA1STATUS DMA0STRIDE DMA1STRIDE DMA0AUTO0 DMA0AUTO1 DMA1AUTO0 DMA1AUTO1
Anti:   %R34<def> = MOVi32rr %R36<kill>
	Def Groups: R34=g0->g0(via D17)
	Antidep reg: R34	Use Groups: R36=g0->g157(last-use)
Anti:   %R32<def> = MOVi32rr %R35<kill>
	Def Groups: R32=g0->g0(via D16)
	Antidep reg: R32 (real dependency)
	Use Groups: R35=g0
Anti:   STRf32 %R37<kill>, %R32<kill>, 4; mem:ST4[%scevgep16](tbaa=!2)
	Def Groups:
	Use Groups: R37=g0->g158(last-use) R32=g0
Anti:   %R34<def,dead> = CMPri_r32 %R33, 8, %STATUS<imp-def>
	Def Groups: R34=g0->g0(via D17) STATUS=g0
	Antidep reg: STATUS (non-allocatable)
	Antidep reg: R34 (zero group)
	Use Groups: R33=g0
Anti:   %R37<def,tied1> = FMADDrr_r32 %R37<kill,tied0>, %R27, %R40<kill>, %STATUS<imp-def,dead>
	Dead Def: STATUS->g159
	Def Groups: R37=g158 STATUS=g159
	Antidep reg: R37 (passthru)
	Use Groups: R37=g158 R27=g0 R40=g0->g160(last-use)
Anti:   %R37<def> = LDRf32 %R32, 4; mem:LD4[%scevgep16](tbaa=!2)
	Def Groups: R37=g158
	Antidep reg: R37
	Rename Candidates for Group g158:
		R37: FPR32 FPR32 FPR32 FPR32 :: IP R0 R1 R2 R3 R4 R5 R6 R7 R8 R16 R17 R18 R19 R20 R21 R22 R23 R24 R25 R26 R27 R32 R33 R34 R35 R36 R37 R38 R39 R40 R41 R42 R43 R44 R45 R46 R47 R48 R49 R50 R51 R52 R53 R54 R55 R56 R57 R58 R59 R60 R61 R62 R63
AllocationOrder(GPR32) = [ %R0 %R1 %R2 %R3 %IP %R16 %R17 %R18 %R19 %R20 %R21 %R22 %R23 %R24 %R25 %R26 %R27 %R32 %R33 %R34 %R35 %R36 %R37 %R38 %R39 %R40 %R41 %R42 %R43 %R44 %R45 %R46 %R47 %R48 %R49 %R50 %R51 %R52 %R53 %R54 %R55 %R56 %R57 %R58 %R59 %R60 %R61 %R62 %R63 %R4 %R5 %R6 %R7 %R8 ]
	Find Registers: [R8: R8(live)] [R7: R7(live)] [R6: R6(live)] [R5: R5(live)] [R4: R4(live)] [R63: R63]
	Breaking anti-dependence edge on R37: R37->R63(4 refs)
	Use Groups: R32=g0
Anti:   STRf32 %R34<kill>, %R32, 0; mem:ST4[%lsr.iv1214](tbaa=!2)
	Def Groups:
	Use Groups: R34=g0 R32=g0
Anti:   %R34<def,tied1> = FMADDrr_r32 %R34<kill,tied0>, %R27, %R39<kill>, %STATUS<imp-def,dead>
	Dead Def: STATUS->g161
	Def Groups: R34=g0->g0(via D17) STATUS=g161
	Antidep reg: R34 (passthru)
	Use Groups: R34=g0 R27=g0 R39=g0->g162(last-use)
Anti:   %R34<def> = LDRf32 %R32, 0; mem:LD4[%lsr.iv1214](tbaa=!2)
	Def Groups: R34=g0->g0(via D17)
	Use Groups: R32=g0
Anti:   STRf64 %D22<kill>, %R32, -8; mem:ST4[%scevgep17](tbaa=!2) ST4[%scevgep15](tbaa=!2)
	Def Groups:
	Use Groups: D22=g0->g163(last-use) R44->g164(last-use) R45->g165(last-use) R32=g0
Anti:   %R45<def> = MOVi32rr %R42, %D21<imp-use,kill>, %D22<imp-use,kill>, %D22<imp-def>
	Def Groups: R45=g165->g163(via D22) D22=g163->g164(via R44)->g164(via R45)
	Antidep reg: D22 (passthru)
	Antidep reg: R45 (passthru)
	Use Groups: R42=g0->g166(last-use) D21=g0->g167(last-use) R43->g168(last-use) D22=g164
Anti:   %R44<def> = MOVi32rr %R43, %D22<imp-def>
	Def Groups: R44=g164->g164(via D22) D22=g164->g164(via R44)->g164(via R45)
	Use Groups: R43=g168
Anti:   %R42<def,tied1> = FMADDrr_r32 %R42<tied0>, %R27, %R38<kill>, %STATUS<imp-def,dead>, %D21<imp-use,kill>, %D21<imp-def>
	Dead Def: STATUS->g169
	Def Groups: R42=g166->g167(via D21) STATUS=g169 D21=g167->g167(via R42)->g168(via R43)
	Antidep reg: D21 (passthru)
	Antidep reg: R42 (passthru)
	Use Groups: R42=g168 R27=g0 R38=g0->g170(last-use) D21=g168
Anti:   %R43<def,tied1> = FMADDrr_r32 %R43<tied0>, %R27, %R37<kill>, %STATUS<imp-def,dead>, %D21<imp-use,kill>, %D21<imp-def>
	Dead Def: STATUS->g171
	Def Groups: R43=g168->g168(via D21) STATUS=g171 D21=g168->g168(via R42)->g168(via R43)
	Use Groups: R43=g168 R27=g0 R37=g0->g172(last-use) D21=g168
Global memory object and new barrier chain: SU(13).
Global memory object and new barrier chain: SU(12).
Global memory object and new barrier chain: SU(3).
Global memory object and new barrier chain: SU(2).
********** List Scheduling **********
SU(0):   %R43<def,tied1> = FMADDrr_r32 %R43<tied0>, %R27, %R37<kill>, %STATUS<imp-def,dead>, %D21<imp-use,kill>, %D21<imp-def>
  # preds left       : 0
  # succs left       : 7
  # rdefs left       : 0
  Latency            : 8
  Depth              : 0
  Height             : 48
  Successors:
   out  SU(1): Latency=1
   data SU(2): Latency=5 Reg=%R43
   data SU(1): Latency=8 Reg=%D21
   out  SU(10): Latency=1
   out  SU(1): Latency=1
   data SU(1): Latency=8 Reg=%R42
   anti SU(1): Latency=0

SU(1):   %R42<def,tied1> = FMADDrr_r32 %R42<tied0>, %R27, %R38<kill>, %STATUS<imp-def,dead>, %D21<imp-use,kill>, %D21<imp-def>
  # preds left       : 5
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 8
  Depth              : 8
  Height             : 40
  Predecessors:
   out  SU(0): Latency=1
   data SU(0): Latency=8 Reg=%D21
   out  SU(0): Latency=1
   data SU(0): Latency=8 Reg=%R42
   anti SU(0): Latency=0
  Successors:
   data SU(3): Latency=5 Reg=%R42
   data SU(3): Latency=8 Reg=%D21
   out  SU(10): Latency=1
   data SU(2): Latency=8 Reg=%R43

SU(2):   %R44<def> = MOVi32rr %R43, %D22<imp-def>
  # preds left       : 2
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 5
  Depth              : 16
  Height             : 32
  Predecessors:
   data SU(1): Latency=8 Reg=%R43
   data SU(0): Latency=5 Reg=%R43
  Successors:
   out  SU(3): Latency=1
   data SU(3): Latency=5 Reg=%D22
   out  SU(3): Latency=1
   ord  SU(3): Latency=0

SU(3):   %R45<def> = MOVi32rr %R42, %D21<imp-use,kill>, %D22<imp-use,kill>, %D22<imp-def>
  # preds left       : 6
  # succs left       : 7
  # rdefs left       : 0
  Latency            : 5
  Depth              : 21
  Height             : 27
  Predecessors:
   out  SU(2): Latency=1
   data SU(2): Latency=5 Reg=%D22
   out  SU(2): Latency=1
   ord  SU(2): Latency=0
   data SU(1): Latency=5 Reg=%R42
   data SU(1): Latency=8 Reg=%D21
  Successors:
   data SU(4): Latency=5 Reg=%D22
   ord  SU(12): Latency=0
   ord  SU(11): Latency=0
   ord  SU(7): Latency=0
   ord  SU(4): Latency=0
   ord  SU(8): Latency=0
   ord  SU(5): Latency=0

SU(4):   STRf64 %D22<kill>, %R32, -8; mem:ST4[%scevgep17](tbaa=!2) ST4[%scevgep15](tbaa=!2)
  # preds left       : 2
  # succs left       : 6
  # rdefs left       : 0
  Latency            : 5
  Depth              : 26
  Height             : 22
  Predecessors:
   data SU(3): Latency=5 Reg=%D22
   ord  SU(3): Latency=0
  Successors:
   anti SU(12): Latency=0
   ord  SU(12): Latency=0
   ord  SU(11): Latency=0
   ord  SU(7): Latency=0
   ord  SU(8): Latency=1
   ord  SU(5): Latency=1

SU(5):   %R34<def> = LDRf32 %R32, 0; mem:LD4[%lsr.iv1214](tbaa=!2)
  # preds left       : 2
  # succs left       : 6
  # rdefs left       : 0
  Latency            : 6
  Depth              : 27
  Height             : 21
  Predecessors:
   ord  SU(4): Latency=1
   ord  SU(3): Latency=0
  Successors:
   out  SU(6): Latency=1
   data SU(6): Latency=4 Reg=%R34
   anti SU(12): Latency=0
   ord  SU(12): Latency=0
   ord  SU(11): Latency=0
   ord  SU(7): Latency=0

SU(6):   %R34<def,tied1> = FMADDrr_r32 %R34<kill,tied0>, %R27, %R39<kill>, %STATUS<imp-def,dead>
  # preds left       : 2
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 8
  Depth              : 31
  Height             : 17
  Predecessors:
   out  SU(5): Latency=1
   data SU(5): Latency=4 Reg=%R34
  Successors:
   out  SU(13): Latency=1
   out  SU(10): Latency=1
   data SU(7): Latency=4 Reg=%R34
   out  SU(10): Latency=1

SU(7):   STRf32 %R34<kill>, %R32, 0; mem:ST4[%lsr.iv1214](tbaa=!2)
  # preds left       : 4
  # succs left       : 6
  # rdefs left       : 0
  Latency            : 5
  Depth              : 35
  Height             : 13
  Predecessors:
   data SU(6): Latency=4 Reg=%R34
   ord  SU(5): Latency=0
   ord  SU(4): Latency=0
   ord  SU(3): Latency=0
  Successors:
   anti SU(13): Latency=0
   anti SU(10): Latency=0
   anti SU(12): Latency=0
   ord  SU(12): Latency=0
   ord  SU(11): Latency=0
   ord  SU(8): Latency=1

SU(8):   %R63<def> = LDRf32 %R32, 4; mem:LD4[%scevgep16](tbaa=!2)
  # preds left       : 3
  # succs left       : 5
  # rdefs left       : 0
  Latency            : 6
  Depth              : 36
  Height             : 12
  Predecessors:
   ord  SU(7): Latency=1
   ord  SU(4): Latency=1
   ord  SU(3): Latency=0
  Successors:
   out  SU(9): Latency=1
   data SU(9): Latency=4 Reg=%R63
   anti SU(12): Latency=0
   ord  SU(12): Latency=0
   ord  SU(11): Latency=0

SU(9):   %R63<def,tied1> = FMADDrr_r32 %R63<kill,tied0>, %R27, %R40<kill>, %STATUS<imp-def,dead>
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 8
  Depth              : 40
  Height             : 8
  Predecessors:
   out  SU(8): Latency=1
   data SU(8): Latency=4 Reg=%R63
  Successors:
   data SU(11): Latency=4 Reg=%R63
   out  SU(10): Latency=1

SU(10):   %R34<def,dead> = CMPri_r32 %R33, 8, %STATUS<imp-def>
  # preds left       : 6
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 5
  Depth              : 41
  Height             : 5
  Predecessors:
   out  SU(9): Latency=1
   anti SU(7): Latency=0
   out  SU(6): Latency=1
   out  SU(6): Latency=1
   out  SU(1): Latency=1
   out  SU(0): Latency=1
  Successors:
   out  SU(13): Latency=1
   ord  ExitSU *: Latency=5

SU(11):   STRf32 %R63<kill>, %R32<kill>, 4; mem:ST4[%scevgep16](tbaa=!2)
  # preds left       : 6
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 5
  Depth              : 44
  Height             : 4
  Predecessors:
   data SU(9): Latency=4 Reg=%R63
   ord  SU(8): Latency=0
   ord  SU(7): Latency=0
   ord  SU(5): Latency=0
   ord  SU(4): Latency=0
   ord  SU(3): Latency=0
  Successors:
   anti SU(12): Latency=0
   ord  SU(12): Latency=0

SU(12):   %R32<def> = MOVi32rr %R35<kill>
  # preds left       : 11
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 5
  Depth              : 44
  Height             : 4
  Predecessors:
   anti SU(11): Latency=0
   ord  SU(11): Latency=0
   anti SU(8): Latency=0
   ord  SU(8): Latency=0
   anti SU(7): Latency=0
   ord  SU(7): Latency=0
   anti SU(5): Latency=0
   ord  SU(5): Latency=0
   anti SU(4): Latency=0
   ord  SU(4): Latency=0
   ord  SU(3): Latency=0
  Successors:
   ord  ExitSU *: Latency=4
   ord  SU(13): Latency=0

SU(13):   %R34<def> = MOVi32rr %R36<kill>
  # preds left       : 4
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 5
  Depth              : 44
  Height             : 4
  Predecessors:
   ord  SU(12): Latency=0
   out  SU(10): Latency=1
   anti SU(7): Latency=0
   out  SU(6): Latency=1
  Successors:
   ord  ExitSU *: Latency=4


*** Examining Available
*** Scheduling [0]: SU(0):   %R43<def,tied1> = FMADDrr_r32 %R43<tied0>, %R27, %R37<kill>, %STATUS<imp-def,dead>, %D21<imp-use,kill>, %D21<imp-def>
Scoreboard:
	00000000000000000000000000000000
Scoreboard:
	00000000000000000000000000000001
	00000000000000000000000000000010
	00000000000000000000000000000100
	00000000000000000000000000001000
	00000000000000000000000000010000
	00000000000000000000000000100000
	00000000000000000000000001000000
	00000000000000000000000010000000
*** Max instructions per cycle 0

*** Examining Available
*** Stall in cycle 1

*** Examining Available
*** Stall in cycle 2

*** Examining Available
*** Stall in cycle 3

*** Examining Available
*** Stall in cycle 4

*** Examining Available
*** Stall in cycle 5

*** Examining Available
*** Stall in cycle 6

*** Examining Available
*** Stall in cycle 7

*** Examining Available
*** Scheduling [8]: SU(1):   %R42<def,tied1> = FMADDrr_r32 %R42<tied0>, %R27, %R38<kill>, %STATUS<imp-def,dead>, %D21<imp-use,kill>, %D21<imp-def>
Scoreboard:
	00000000000000000000000000000000
Scoreboard:
	00000000000000000000000000000001
	00000000000000000000000000000010
	00000000000000000000000000000100
	00000000000000000000000000001000
	00000000000000000000000000010000
	00000000000000000000000000100000
	00000000000000000000000001000000
	00000000000000000000000010000000
*** Max instructions per cycle 8

*** Examining Available
*** Stall in cycle 9

*** Examining Available
*** Stall in cycle 10

*** Examining Available
*** Stall in cycle 11

*** Examining Available
*** Stall in cycle 12

*** Examining Available
*** Stall in cycle 13

*** Examining Available
*** Stall in cycle 14

*** Examining Available
*** Stall in cycle 15

*** Examining Available
*** Scheduling [16]: SU(2):   %R44<def> = MOVi32rr %R43, %D22<imp-def>
Scoreboard:
	00000000000000000000000000000000
Scoreboard:
	00000000000000000000000000000001
	00000000000000000000000000000010
	00000000000000000000000000000100
	00000000000000000000000000001000
	00000000000000000000000000010000
*** Max instructions per cycle 16

*** Examining Available
*** Stall in cycle 17

*** Examining Available
*** Stall in cycle 18

*** Examining Available
*** Stall in cycle 19

*** Examining Available
*** Stall in cycle 20

*** Examining Available
*** Scheduling [21]: SU(3):   %R45<def> = MOVi32rr %R42, %D21<imp-use,kill>, %D22<imp-use,kill>, %D22<imp-def>
Scoreboard:
	00000000000000000000000000000000
Scoreboard:
	00000000000000000000000000000001
	00000000000000000000000000000010
	00000000000000000000000000000100
	00000000000000000000000000001000
	00000000000000000000000000010000
*** Max instructions per cycle 21

*** Examining Available
*** Stall in cycle 22

*** Examining Available
*** Stall in cycle 23

*** Examining Available
*** Stall in cycle 24

*** Examining Available
*** Stall in cycle 25

*** Examining Available
*** Scheduling [26]: SU(4):   STRf64 %D22<kill>, %R32, -8; mem:ST4[%scevgep17](tbaa=!2) ST4[%scevgep15](tbaa=!2)
Scoreboard:
	00000000000000000000000000000000
Scoreboard:
	00000000000000000000000000000001
	00000000000000000000000000000010
	00000000000000000000000000000100
	00000000000000000000000000001000
	00000000000000000000000000010000
*** Max instructions per cycle 26

*** Examining Available
*** Scheduling [27]: SU(5):   %R34<def> = LDRf32 %R32, 0; mem:LD4[%lsr.iv1214](tbaa=!2)
Scoreboard:
	00000000000000000000000000000000
Scoreboard:
	00000000000000000000000000000011
	00000000000000000000000000000110
	00000000000000000000000000001100
	00000000000000000000000000011000
	00000000000000000000000000010000
	00000000000000000000000000100000
*** Max instructions per cycle 27

*** Examining Available
*** Stall in cycle 28

*** Examining Available
*** Stall in cycle 29

*** Examining Available
*** Stall in cycle 30

*** Examining Available
*** Scheduling [31]: SU(6):   %R34<def,tied1> = FMADDrr_r32 %R34<kill,tied0>, %R27, %R39<kill>, %STATUS<imp-def,dead>
Scoreboard:
	00000000000000000000000000000000
Scoreboard:
	00000000000000000000000000010001
	00000000000000000000000000100010
	00000000000000000000000000000100
	00000000000000000000000000001000
	00000000000000000000000000010000
	00000000000000000000000000100000
	00000000000000000000000001000000
	00000000000000000000000010000000
*** Max instructions per cycle 31

*** Examining Available
*** Stall in cycle 32

*** Examining Available
*** Stall in cycle 33

*** Examining Available
*** Stall in cycle 34

*** Examining Available
*** Scheduling [35]: SU(7):   STRf32 %R34<kill>, %R32, 0; mem:ST4[%lsr.iv1214](tbaa=!2)
Scoreboard:
	00000000000000000000000000000000
Scoreboard:
	00000000000000000000000000010001
	00000000000000000000000000100010
	00000000000000000000000001000100
	00000000000000000000000010001000
	00000000000000000000000000010000
*** Max instructions per cycle 35

*** Examining Available
*** Scheduling [36]: SU(8):   %R63<def> = LDRf32 %R32, 4; mem:LD4[%scevgep16](tbaa=!2)
Scoreboard:
	00000000000000000000000000000000
Scoreboard:
	00000000000000000000000000100011
	00000000000000000000000001000110
	00000000000000000000000010001100
	00000000000000000000000000011000
	00000000000000000000000000010000
	00000000000000000000000000100000
*** Max instructions per cycle 36

*** Examining Available
*** Stall in cycle 37

*** Examining Available
*** Stall in cycle 38

*** Examining Available
*** Stall in cycle 39

*** Examining Available
*** Scheduling [40]: SU(9):   %R63<def,tied1> = FMADDrr_r32 %R63<kill,tied0>, %R27, %R40<kill>, %STATUS<imp-def,dead>
Scoreboard:
	00000000000000000000000000000000
Scoreboard:
	00000000000000000000000000010001
	00000000000000000000000000100010
	00000000000000000000000000000100
	00000000000000000000000000001000
	00000000000000000000000000010000
	00000000000000000000000000100000
	00000000000000000000000001000000
	00000000000000000000000010000000
*** Max instructions per cycle 40

*** Examining Available
*** Scheduling [41]: SU(10):   %R34<def,dead> = CMPri_r32 %R33, 8, %STATUS<imp-def>
Scoreboard:
	00000000000000000000000000000000
Scoreboard:
	00000000000000000000000000100011
	00000000000000000000000000000110
	00000000000000000000000000001100
	00000000000000000000000000011000
	00000000000000000000000000110000
	00000000000000000000000001000000
	00000000000000000000000010000000
*** Max instructions per cycle 41

*** Examining Available
*** Stall in cycle 42

*** Examining Available
*** Stall in cycle 43

*** Examining Available
*** Scheduling [44]: SU(11):   STRf32 %R63<kill>, %R32<kill>, 4; mem:ST4[%scevgep16](tbaa=!2)
Scoreboard:
	00000000000000000000000000000000
Scoreboard:
	00000000000000000000000000011001
	00000000000000000000000000110010
	00000000000000000000000001000100
	00000000000000000000000010001000
	00000000000000000000000000010000
*** Max instructions per cycle 44

*** Examining Available
*** Scheduling [45]: SU(12):   %R32<def> = MOVi32rr %R35<kill>
Scoreboard:
	00000000000000000000000000000000
Scoreboard:
	00000000000000000000000000110011
	00000000000000000000000001000110
	00000000000000000000000010001100
	00000000000000000000000000011000
	00000000000000000000000000010000
*** Max instructions per cycle 45

*** Examining Available
*** Scheduling [46]: SU(13):   %R34<def> = MOVi32rr %R36<kill>
Scoreboard:
	00000000000000000000000000000000
Scoreboard:
	00000000000000000000000001000111
	00000000000000000000000010001110
	00000000000000000000000000011100
	00000000000000000000000000011000
	00000000000000000000000000010000
*** Max instructions per cycle 46
*** Final schedule ***
SU(0):   %R43<def,tied1> = FMADDrr_r32 %R43<tied0>, %R27, %R37<kill>, %STATUS<imp-def,dead>, %D21<imp-use,kill>, %D21<imp-def>
SU(1):   %R42<def,tied1> = FMADDrr_r32 %R42<tied0>, %R27, %R38<kill>, %STATUS<imp-def,dead>, %D21<imp-use,kill>, %D21<imp-def>
SU(2):   %R44<def> = MOVi32rr %R43, %D22<imp-def>
SU(3):   %R45<def> = MOVi32rr %R42, %D21<imp-use,kill>, %D22<imp-use,kill>, %D22<imp-def>
SU(4):   STRf64 %D22<kill>, %R32, -8; mem:ST4[%scevgep17](tbaa=!2) ST4[%scevgep15](tbaa=!2)
SU(5):   %R34<def> = LDRf32 %R32, 0; mem:LD4[%lsr.iv1214](tbaa=!2)
SU(6):   %R34<def,tied1> = FMADDrr_r32 %R34<kill,tied0>, %R27, %R39<kill>, %STATUS<imp-def,dead>
SU(7):   STRf32 %R34<kill>, %R32, 0; mem:ST4[%lsr.iv1214](tbaa=!2)
SU(8):   %R63<def> = LDRf32 %R32, 4; mem:LD4[%scevgep16](tbaa=!2)
SU(9):   %R63<def,tied1> = FMADDrr_r32 %R63<kill,tied0>, %R27, %R40<kill>, %STATUS<imp-def,dead>
SU(10):   %R34<def,dead> = CMPri_r32 %R33, 8, %STATUS<imp-def>
SU(11):   STRf32 %R63<kill>, %R32<kill>, 4; mem:ST4[%scevgep16](tbaa=!2)
SU(12):   %R32<def> = MOVi32rr %R35<kill>
SU(13):   %R34<def> = MOVi32rr %R36<kill>

	Dead Def: CONFIG->g173
	Def Groups: CONFIG=g173
	Use Groups:
Observe:   GIE %CONFIG<imp-def,dead>
	Regs: D21=g168->g0(region live-out) R36=g157->g0(region live-out) R37=g172->g0(region live-out) R38=g170->g0(region live-out) R39=g162->g0(region live-out) R40=g160->g0(region live-out)
Global memory object and new barrier chain: SU(10).
Global memory object and new barrier chain: SU(9).
Global memory object and new barrier chain: SU(6).
Global memory object and new barrier chain: SU(5).
Global memory object and new barrier chain: SU(3).
Global memory object and new barrier chain: SU(0).

===== Aggressive anti-dependency breaking
Available regs:  CMESHROUTE CONFIG COREID DEBUGCMD DEBUGSTATUS FSTATUS ILAT ILATCL ILATST IMASK IPEND IRET LC LE LS MEMPROTECT MEMSTATUS MESHCONFIG MULTICAST PC RESETCORE RMESHROUTE SP STATUS XMESHROUTE ZERO A1 A2 A3 A4 CTIMER0 CTIMER1 D5 D6 D14 D15 D18 D19 D20 D22 D23 D24 D25 D26 D27 D28 D29 D30 D31 R9 R10 R11 R12 R13 R14 R28 R29 R30 R31 R32 R34 R35 R41 R44 R45 R46 R47 R48 R49 R50 R51 R52 R53 R54 R55 R56 R57 R58 R59 R60 R61 R62 R63 V1 V2 V3 V4 V5 V8 DMA0CONFIG DMA1CONFIG DMA0COUNT DMA1COUNT DMA0DSTADDR DMA1DSTADDR DMA0SRCADDR DMA1SRCADDR DMA0STATUS DMA1STATUS DMA0STRIDE DMA1STRIDE DMA0AUTO0 DMA0AUTO1 DMA1AUTO0 DMA1AUTO1
Anti:   %CONFIG<def,dead> = MOVTS32_core %R34<kill>
	Dead Def: CONFIG->g174
	Def Groups: CONFIG=g174
	Use Groups: R34=g0
Anti:   GID %CONFIG<imp-def,dead>
	Dead Def: CONFIG->g175
	Def Groups: CONFIG=g175
	Use Groups:
Anti:   %R34<def> = LDRi32_r32 %FP, -4; mem:LD4[FixedStack2]
	Def Groups: R34=g0->g0(via D17)
	Antidep reg: R34 (real dependency)
	Use Groups: FP=g0
Anti:   %D21<def> = LDRf64 %R32, -8; mem:LD4[%scevgep17](tbaa=!2) LD4[%scevgep15](tbaa=!2)
	Def Groups: D21=g0->g0(via R42)->g0(via R43)
	Use Groups: R32=g0
Anti:   %R40<def> = LDRf32 %R34<kill>, 4; mem:Volatile LD4[%scevgep7](tbaa=!2)
	Def Groups: R40=g0
	Use Groups: R34=g0
Anti:   %R39<def> = LDRf32 %R34, 0; mem:Volatile LD4[%lsr.iv5](tbaa=!2)
	Def Groups: R39=g0
	Use Groups: R34=g0
Anti:   %R33<def> = ADDri_r32 %R33<kill>, 4, %STATUS<imp-def,dead>
	Dead Def: STATUS->g176
	Def Groups: R33=g0->g0(via D16) STATUS=g176
	Use Groups: R33=g0
Anti:   %R38<def> = LDRf32 %R34, -4; mem:Volatile LD4[%scevgep9](tbaa=!2)
	Def Groups: R38=g0
	Use Groups: R34=g0
Anti:   %R36<def> = ADDri_r32 %R34, 16, %STATUS<imp-def,dead>
	Dead Def: STATUS->g177
	Def Groups: R36=g0 STATUS=g177
	Use Groups: R34=g0
Anti:   %R35<def> = ADDri_r32 %R32, 16, %STATUS<imp-def,dead>
	Dead Def: STATUS->g178
	Def Groups: R35=g0->g0(via D17) STATUS=g178
	Use Groups: R32=g0
Anti:   %R37<def> = LDRf32 %R34, -8; mem:Volatile LD4[%scevgep8](tbaa=!2)
	Def Groups: R37=g0
	Use Groups: R34=g0
********** List Scheduling **********
SU(0):   %R37<def> = LDRf32 %R34, -8; mem:Volatile LD4[%scevgep8](tbaa=!2)
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 6
  Depth              : 0
  Height             : 5
  Successors:
   anti SU(8): Latency=0
   ord  ExitSU *: Latency=5
   ord  SU(3): Latency=0

SU(1):   %R35<def> = ADDri_r32 %R32, 16, %STATUS<imp-def,dead>
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 5
  Depth              : 0
  Height             : 0

SU(2):   %R36<def> = ADDri_r32 %R34, 16, %STATUS<imp-def,dead>
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 5
  Depth              : 0
  Height             : 4
  Successors:
   anti SU(8): Latency=0

SU(3):   %R38<def> = LDRf32 %R34, -4; mem:Volatile LD4[%scevgep9](tbaa=!2)
  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 6
  Depth              : 0
  Height             : 5
  Predecessors:
   ord  SU(0): Latency=0
  Successors:
   anti SU(8): Latency=0
   ord  ExitSU *: Latency=5
   ord  SU(5): Latency=0

SU(4):   %R33<def> = ADDri_r32 %R33<kill>, 4, %STATUS<imp-def,dead>
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 5
  Depth              : 0
  Height             : 0

SU(5):   %R39<def> = LDRf32 %R34, 0; mem:Volatile LD4[%lsr.iv5](tbaa=!2)
  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 6
  Depth              : 0
  Height             : 5
  Predecessors:
   ord  SU(3): Latency=0
  Successors:
   anti SU(8): Latency=0
   ord  ExitSU *: Latency=5
   ord  SU(6): Latency=0

SU(6):   %R40<def> = LDRf32 %R34<kill>, 4; mem:Volatile LD4[%scevgep7](tbaa=!2)
  # preds left       : 1
  # succs left       : 5
  # rdefs left       : 0
  Latency            : 6
  Depth              : 0
  Height             : 5
  Predecessors:
   ord  SU(5): Latency=0
  Successors:
   anti SU(8): Latency=0
   ord  ExitSU *: Latency=5
   ord  SU(9): Latency=0
   ord  SU(8): Latency=0
   ord  SU(7): Latency=0

SU(7):   %D21<def> = LDRf64 %R32, -8; mem:LD4[%scevgep17](tbaa=!2) LD4[%scevgep15](tbaa=!2)
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 6
  Depth              : 0
  Height             : 5
  Predecessors:
   ord  SU(6): Latency=0
  Successors:
   ord  ExitSU *: Latency=5
   ord  SU(9): Latency=0

SU(8):   %R34<def> = LDRi32_r32 %FP, -4; mem:LD4[FixedStack2]
  # preds left       : 6
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 6
  Depth              : 0
  Height             : 4
  Predecessors:
   anti SU(6): Latency=0
   ord  SU(6): Latency=0
   anti SU(5): Latency=0
   anti SU(3): Latency=0
   anti SU(2): Latency=0
   anti SU(0): Latency=0
  Successors:
   data SU(10): Latency=4 Reg=%R34
   ord  SU(9): Latency=0

SU(9):   GID %CONFIG<imp-def,dead>
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Predecessors:
   ord  SU(8): Latency=0
   ord  SU(7): Latency=0
   ord  SU(6): Latency=0
  Successors:
   ord  SU(10): Latency=0

SU(10):   %CONFIG<def,dead> = MOVTS32_core %R34<kill>
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 5
  Depth              : 4
  Height             : 0
  Predecessors:
   ord  SU(9): Latency=0
   data SU(8): Latency=4 Reg=%R34


*** Examining Available
*** Scheduling [0]: SU(0):   %R37<def> = LDRf32 %R34, -8; mem:Volatile LD4[%scevgep8](tbaa=!2)
Scoreboard:
	00000000000000000000000000000000
Scoreboard:
	00000000000000000000000000000001
	00000000000000000000000000000010
	00000000000000000000000000000100
	00000000000000000000000000001000
	00000000000000000000000000010000
	00000000000000000000000000100000
*** Max instructions per cycle 0

*** Examining Available
*** Scheduling [1]: SU(3):   %R38<def> = LDRf32 %R34, -4; mem:Volatile LD4[%scevgep9](tbaa=!2)
Scoreboard:
	00000000000000000000000000000000
Scoreboard:
	00000000000000000000000000000011
	00000000000000000000000000000110
	00000000000000000000000000001100
	00000000000000000000000000011000
	00000000000000000000000000110000
	00000000000000000000000000100000
*** Max instructions per cycle 1

*** Examining Available
*** Scheduling [2]: SU(5):   %R39<def> = LDRf32 %R34, 0; mem:Volatile LD4[%lsr.iv5](tbaa=!2)
Scoreboard:
	00000000000000000000000000000000
Scoreboard:
	00000000000000000000000000000111
	00000000000000000000000000001110
	00000000000000000000000000011100
	00000000000000000000000000111000
	00000000000000000000000000110000
	00000000000000000000000000100000
*** Max instructions per cycle 2

*** Examining Available
*** Scheduling [3]: SU(6):   %R40<def> = LDRf32 %R34<kill>, 4; mem:Volatile LD4[%scevgep7](tbaa=!2)
Scoreboard:
	00000000000000000000000000000000
Scoreboard:
	00000000000000000000000000001111
	00000000000000000000000000011110
	00000000000000000000000000111100
	00000000000000000000000000111000
	00000000000000000000000000110000
	00000000000000000000000000100000
*** Max instructions per cycle 3

*** Examining Available
*** Scheduling [4]: SU(7):   %D21<def> = LDRf64 %R32, -8; mem:LD4[%scevgep17](tbaa=!2) LD4[%scevgep15](tbaa=!2)
Scoreboard:
	00000000000000000000000000000000
Scoreboard:
	00000000000000000000000000011111
	00000000000000000000000000111110
	00000000000000000000000000111100
	00000000000000000000000000111000
	00000000000000000000000000110000
	00000000000000000000000000100000
*** Max instructions per cycle 4

*** Examining Available
*** Scheduling [5]: SU(2):   %R36<def> = ADDri_r32 %R34, 16, %STATUS<imp-def,dead>
Scoreboard:
	00000000000000000000000000000000
Scoreboard:
	00000000000000000000000000111111
	00000000000000000000000000111110
	00000000000000000000000000111100
	00000000000000000000000000111000
	00000000000000000000000000110000
*** Max instructions per cycle 5

*** Examining Available
*** Scheduling [6]: SU(8):   %R34<def> = LDRi32_r32 %FP, -4; mem:LD4[FixedStack2]
Scoreboard:
	00000000000000000000000000000000
Scoreboard:
	00000000000000000000000000111111
	00000000000000000000000000111110
	00000000000000000000000000111100
	00000000000000000000000000111000
	00000000000000000000000000010000
	00000000000000000000000000100000
*** Max instructions per cycle 6

*** Examining Available
*** Scheduling [7]: SU(9):   GID %CONFIG<imp-def,dead>
Scoreboard:
	00000000000000000000000000000000
Scoreboard:
	00000000000000000000000000111110
	00000000000000000000000000111100
	00000000000000000000000000111000
	00000000000000000000000000010000
	00000000000000000000000000100000
*** Max instructions per cycle 7

*** Examining Available
*** Scheduling [8]: SU(1):   %R35<def> = ADDri_r32 %R32, 16, %STATUS<imp-def,dead>
Scoreboard:
	00000000000000000000000000000000
Scoreboard:
	00000000000000000000000000111101
	00000000000000000000000000111010
	00000000000000000000000000010100
	00000000000000000000000000101000
	00000000000000000000000000010000
*** Max instructions per cycle 8

*** Examining Available
*** Scheduling [9]: SU(4):   %R33<def> = ADDri_r32 %R33<kill>, 4, %STATUS<imp-def,dead>
Scoreboard:
	00000000000000000000000000000000
Scoreboard:
	00000000000000000000000000111011
	00000000000000000000000000010110
	00000000000000000000000000101100
	00000000000000000000000000011000
	00000000000000000000000000010000
*** Max instructions per cycle 9

*** Examining Available
*** Scheduling [10]: SU(10):   %CONFIG<def,dead> = MOVTS32_core %R34<kill>
Scoreboard:
	00000000000000000000000000000000
Scoreboard:
	00000000000000000000000000010111
	00000000000000000000000000101110
	00000000000000000000000000011100
	00000000000000000000000000011000
	00000000000000000000000000010000
*** Max instructions per cycle 10
*** Final schedule ***
SU(0):   %R37<def> = LDRf32 %R34, -8; mem:Volatile LD4[%scevgep8](tbaa=!2)
SU(3):   %R38<def> = LDRf32 %R34, -4; mem:Volatile LD4[%scevgep9](tbaa=!2)
SU(5):   %R39<def> = LDRf32 %R34, 0; mem:Volatile LD4[%lsr.iv5](tbaa=!2)
SU(6):   %R40<def> = LDRf32 %R34<kill>, 4; mem:Volatile LD4[%scevgep7](tbaa=!2)
SU(7):   %D21<def> = LDRf64 %R32, -8; mem:LD4[%scevgep17](tbaa=!2) LD4[%scevgep15](tbaa=!2)
SU(2):   %R36<def> = ADDri_r32 %R34, 16, %STATUS<imp-def,dead>
SU(8):   %R34<def> = LDRi32_r32 %FP, -4; mem:LD4[FixedStack2]
SU(9):   GID %CONFIG<imp-def,dead>
SU(1):   %R35<def> = ADDri_r32 %R32, 16, %STATUS<imp-def,dead>
SU(4):   %R33<def> = ADDri_r32 %R33<kill>, 4, %STATUS<imp-def,dead>
SU(10):   %CONFIG<def,dead> = MOVTS32_core %R34<kill>

Fixup kills for BB#6
Fixing %physreg133<kill,tied0> in   %R63<def,tied1> = FMADDrr_r32 %R63<tied0>, %R27, %R40<kill>, %STATUS<imp-def,dead>
Fixing %physreg104<kill,tied0> in   %R34<def,tied1> = FMADDrr_r32 %R34<tied0>, %R27, %R39<kill>, %STATUS<imp-def,dead>
Fixing %physreg112 in   %R45<def> = MOVi32rr %R42<kill>, %D21<imp-use,kill>, %D22<imp-use,kill>, %D22<imp-def>
Fixing %physreg112<tied0> in   %R42<def,tied1> = FMADDrr_r32 %R42<kill,tied0>, %R27, %R38<kill>, %STATUS<imp-def,dead>, %D21<imp-use,kill>, %D21<imp-def>
Fixing %physreg113<tied0> in   %R43<def,tied1> = FMADDrr_r32 %R43<kill,tied0>, %R27, %R37<kill>, %STATUS<imp-def,dead>, %D21<imp-use,kill>, %D21<imp-def>
Fixing %physreg104 in   %R36<def> = ADDri_r32 %R34<kill>, 16, %STATUS<imp-def,dead>
Fixing %physreg104<kill> in   %R40<def> = LDRf32 %R34, 4; mem:Volatile LD4[%scevgep7](tbaa=!2)
********** List Scheduling **********
*** Final schedule ***

	Def Groups:
	Use Groups: STATUS=g0->g156(last-use)
Observe:   BCC <BB#5>, 1, %STATUS<imp-use>
	Regs: STATUS=g156->g0(region live-out)

===== Aggressive anti-dependency breaking
Available regs:  CMESHROUTE CONFIG COREID DEBUGCMD DEBUGSTATUS FSTATUS ILAT ILATCL ILATST IMASK IPEND IRET LC LE LS MEMPROTECT MEMSTATUS MESHCONFIG MULTICAST PC RESETCORE RMESHROUTE SP XMESHROUTE ZERO A1 A2 A3 A4 CTIMER0 CTIMER1 D5 D6 D14 D15 D16 D17 D18 D19 D20 D21 D22 D23 D24 D25 D26 D27 D28 D29 D30 D31 R9 R10 R11 R12 R13 R14 R27 R28 R29 R30 R31 R32 R33 R34 R35 R36 R37 R38 R39 R40 R41 R42 R43 R44 R45 R46 R47 R48 R49 R50 R51 R52 R53 R54 R55 R56 R57 R58 R59 R60 R61 R62 R63 V1 V2 V3 V4 V5 V8 DMA0CONFIG DMA1CONFIG DMA0COUNT DMA1COUNT DMA0DSTADDR DMA1DSTADDR DMA0SRCADDR DMA1SRCADDR DMA0STATUS DMA1STATUS DMA0STRIDE DMA1STRIDE DMA0AUTO0 DMA0AUTO1 DMA1AUTO0 DMA1AUTO1
Anti:   %R27<def,dead> = CMPrr_r32 %R26, %R3, %STATUS<imp-def>
	Def Groups: R27=g0->g0(via D13) STATUS=g0
	Antidep reg: STATUS (non-allocatable)
	Use Groups: R26=g0 R3=g0
Anti:   %R26<def> = ADDri_r32 %R26<kill>, 1, %STATUS<imp-def,dead>
	Dead Def: STATUS->g157
	Def Groups: R26=g0->g0(via D13) STATUS=g157
	Use Groups: R26=g0
Anti:   %R25<def> = ADDrr_r32 %R25<kill>, %IP, %STATUS<imp-def,dead>
	Dead Def: STATUS->g158
	Def Groups: R25=g0->g0(via D12) STATUS=g158
	Use Groups: R25=g0 IP=g0
********** List Scheduling **********
SU(0):   %R25<def> = ADDrr_r32 %R25<kill>, %IP, %STATUS<imp-def,dead>
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 5
  Depth              : 0
  Height             : 6
  Successors:
   ord  ExitSU *: Latency=4
   out  SU(2): Latency=1

SU(1):   %R26<def> = ADDri_r32 %R26<kill>, 1, %STATUS<imp-def,dead>
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 5
  Depth              : 0
  Height             : 7
  Successors:
   ord  ExitSU *: Latency=4
   data SU(2): Latency=2 Reg=%R26
   out  SU(2): Latency=1

SU(2):   %R27<def,dead> = CMPrr_r32 %R26, %R3, %STATUS<imp-def>
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 5
  Depth              : 2
  Height             : 5
  Predecessors:
   data SU(1): Latency=2 Reg=%R26
   out  SU(1): Latency=1
   out  SU(0): Latency=1
  Successors:
   ord  ExitSU *: Latency=5


*** Examining Available
*** Scheduling [0]: SU(1):   %R26<def> = ADDri_r32 %R26<kill>, 1, %STATUS<imp-def,dead>
Scoreboard:
	00000000000000000000000000000000
Scoreboard:
	00000000000000000000000000000001
	00000000000000000000000000000010
	00000000000000000000000000000100
	00000000000000000000000000001000
	00000000000000000000000000010000
*** Max instructions per cycle 0

*** Examining Available
*** Scheduling [1]: SU(0):   %R25<def> = ADDrr_r32 %R25<kill>, %IP, %STATUS<imp-def,dead>
Scoreboard:
	00000000000000000000000000000000
Scoreboard:
	00000000000000000000000000000011
	00000000000000000000000000000110
	00000000000000000000000000001100
	00000000000000000000000000011000
	00000000000000000000000000010000
*** Max instructions per cycle 1

*** Examining Available
*** Scheduling [2]: SU(2):   %R27<def,dead> = CMPrr_r32 %R26, %R3, %STATUS<imp-def>
Scoreboard:
	00000000000000000000000000000000
Scoreboard:
	00000000000000000000000000000111
	00000000000000000000000000001110
	00000000000000000000000000011100
	00000000000000000000000000011000
	00000000000000000000000000010000
*** Max instructions per cycle 2
*** Final schedule ***
SU(1):   %R26<def> = ADDri_r32 %R26<kill>, 1, %STATUS<imp-def,dead>
SU(0):   %R25<def> = ADDrr_r32 %R25<kill>, %IP, %STATUS<imp-def,dead>
SU(2):   %R27<def,dead> = CMPrr_r32 %R26, %R3, %STATUS<imp-def>

Fixup kills for BB#7
Global memory object and new barrier chain: SU(1).
Global memory object and new barrier chain: SU(0).

===== Aggressive anti-dependency breaking
Available regs:  CMESHROUTE CONFIG COREID DEBUGCMD DEBUGSTATUS FSTATUS ILAT ILATCL ILATST IMASK IPEND IRET LC LE LS MEMPROTECT MEMSTATUS MESHCONFIG MULTICAST PC RESETCORE RMESHROUTE SP STATUS XMESHROUTE ZERO A1 A2 A3 A4 CTIMER0 CTIMER1 D5 D6 D14 D15 D16 D17 D18 D19 D20 D21 D22 D23 D24 D25 D26 D27 D28 D29 D30 D31 R9 R10 R11 R12 R13 R14 R27 R28 R29 R30 R31 R32 R33 R34 R35 R36 R37 R38 R39 R40 R41 R42 R43 R44 R45 R46 R47 R48 R49 R50 R51 R52 R53 R54 R55 R56 R57 R58 R59 R60 R61 R62 R63 V1 V2 V3 V4 V5 V8 DMA0CONFIG DMA1CONFIG DMA0COUNT DMA1COUNT DMA0DSTADDR DMA1DSTADDR DMA0SRCADDR DMA1SRCADDR DMA0STATUS DMA1STATUS DMA0STRIDE DMA1STRIDE DMA0AUTO0 DMA0AUTO1 DMA1AUTO0 DMA1AUTO1
Anti:   %R26<def> = MOVi32rr %R19
	Def Groups: R26=g0->g0(via D13)
	Use Groups: R19=g0
Anti:   %R25<def> = MOVi32rr %R22
	Def Groups: R25=g0->g0(via D12)
	Use Groups: R22=g0
********** List Scheduling **********
SU(0):   %R25<def> = MOVi32rr %R22
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 5
  Depth              : 0
  Height             : 4
  Successors:
   ord  ExitSU *: Latency=4
   ord  SU(1): Latency=0

SU(1):   %R26<def> = MOVi32rr %R19
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 5
  Depth              : 0
  Height             : 4
  Predecessors:
   ord  SU(0): Latency=0
  Successors:
   ord  ExitSU *: Latency=4


*** Examining Available
*** Scheduling [0]: SU(0):   %R25<def> = MOVi32rr %R22
Scoreboard:
	00000000000000000000000000000000
Scoreboard:
	00000000000000000000000000000001
	00000000000000000000000000000010
	00000000000000000000000000000100
	00000000000000000000000000001000
	00000000000000000000000000010000
*** Max instructions per cycle 0

*** Examining Available
*** Scheduling [1]: SU(1):   %R26<def> = MOVi32rr %R19
Scoreboard:
	00000000000000000000000000000000
Scoreboard:
	00000000000000000000000000000011
	00000000000000000000000000000110
	00000000000000000000000000001100
	00000000000000000000000000011000
	00000000000000000000000000010000
*** Max instructions per cycle 1
*** Final schedule ***
SU(0):   %R25<def> = MOVi32rr %R22
SU(1):   %R26<def> = MOVi32rr %R19

Fixup kills for BB#8
********** List Scheduling **********
*** Final schedule ***

	Def Groups:
	Use Groups: STATUS=g0->g156(last-use)
Observe:   BCC <BB#9>, 1, %STATUS<imp-use>
	Regs: STATUS=g156->g0(region live-out)
Global memory object and new barrier chain: SU(3).
Global memory object and new barrier chain: SU(2).

===== Aggressive anti-dependency breaking
Available regs:  CMESHROUTE CONFIG COREID DEBUGCMD DEBUGSTATUS FSTATUS ILAT ILATCL ILATST IMASK IPEND IRET LC LE LS MEMPROTECT MEMSTATUS MESHCONFIG MULTICAST PC RESETCORE RMESHROUTE SP XMESHROUTE ZERO A1 A2 A3 A4 CTIMER0 CTIMER1 D5 D6 D14 D15 D16 D17 D18 D19 D20 D21 D22 D23 D24 D25 D26 D27 D28 D29 D30 D31 R9 R10 R11 R12 R13 R14 R27 R28 R29 R30 R31 R32 R33 R34 R35 R36 R37 R38 R39 R40 R41 R42 R43 R44 R45 R46 R47 R48 R49 R50 R51 R52 R53 R54 R55 R56 R57 R58 R59 R60 R61 R62 R63 V1 V2 V3 V4 V5 V8 DMA0CONFIG DMA1CONFIG DMA0COUNT DMA1COUNT DMA0DSTADDR DMA1DSTADDR DMA0SRCADDR DMA1SRCADDR DMA0STATUS DMA1STATUS DMA0STRIDE DMA1STRIDE DMA0AUTO0 DMA0AUTO1 DMA1AUTO0 DMA1AUTO1
Anti:   %R25<def> = MOVi32rr %R27<kill>
	Def Groups: R25=g0->g0(via D12)
	Antidep reg: R25 (real dependency)
	Use Groups: R27=g0
Anti:   STRf32 %R33<kill>, %R25<kill>, 0; mem:Volatile ST4[%lsr.iv24](tbaa=!2)
	Def Groups:
	Use Groups: R33=g0->g157(last-use) R25=g0
Anti:   %R32<def,dead> = CMPri_r32 %R26, 32, %STATUS<imp-def>
	Dead Def: R32->g158
	Def Groups: R32=g158 STATUS=g0
	Antidep reg: STATUS (non-allocatable)
	Use Groups: R26=g0
Anti:   %R33<def> = FADDrr_r32 %R33<kill>, %R34<kill>, %STATUS<imp-def,dead>
	Dead Def: STATUS->g159
	Def Groups: R33=g157 STATUS=g159
	Use Groups: R33=g157->g160(last-use) R34=g0->g161(last-use)
********** List Scheduling **********
SU(0):   %R33<def> = FADDrr_r32 %R33<kill>, %R34<kill>, %STATUS<imp-def,dead>
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 8
  Depth              : 0
  Height             : 8
  Successors:
   data SU(2): Latency=4 Reg=%R33
   out  SU(1): Latency=1

SU(1):   %R32<def,dead> = CMPri_r32 %R26, 32, %STATUS<imp-def>
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 5
  Depth              : 1
  Height             : 5
  Predecessors:
   out  SU(0): Latency=1
  Successors:
   ord  ExitSU *: Latency=5

SU(2):   STRf32 %R33<kill>, %R25<kill>, 0; mem:Volatile ST4[%lsr.iv24](tbaa=!2)
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 5
  Depth              : 4
  Height             : 4
  Predecessors:
   data SU(0): Latency=4 Reg=%R33
  Successors:
   anti SU(3): Latency=0
   ord  SU(3): Latency=0

SU(3):   %R25<def> = MOVi32rr %R27<kill>
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 5
  Depth              : 4
  Height             : 4
  Predecessors:
   anti SU(2): Latency=0
   ord  SU(2): Latency=0
  Successors:
   ord  ExitSU *: Latency=4


*** Examining Available
*** Scheduling [0]: SU(0):   %R33<def> = FADDrr_r32 %R33<kill>, %R34<kill>, %STATUS<imp-def,dead>
Scoreboard:
	00000000000000000000000000000000
Scoreboard:
	00000000000000000000000000000001
	00000000000000000000000000000010
	00000000000000000000000000000100
	00000000000000000000000000001000
	00000000000000000000000000010000
	00000000000000000000000000100000
	00000000000000000000000001000000
	00000000000000000000000010000000
*** Max instructions per cycle 0

*** Examining Available
*** Scheduling [1]: SU(1):   %R32<def,dead> = CMPri_r32 %R26, 32, %STATUS<imp-def>
Scoreboard:
	00000000000000000000000000000000
Scoreboard:
	00000000000000000000000000000011
	00000000000000000000000000000110
	00000000000000000000000000001100
	00000000000000000000000000011000
	00000000000000000000000000110000
	00000000000000000000000001000000
	00000000000000000000000010000000
*** Max instructions per cycle 1

*** Examining Available
*** Stall in cycle 2

*** Examining Available
*** Stall in cycle 3

*** Examining Available
*** Scheduling [4]: SU(2):   STRf32 %R33<kill>, %R25<kill>, 0; mem:Volatile ST4[%lsr.iv24](tbaa=!2)
Scoreboard:
	00000000000000000000000000000000
Scoreboard:
	00000000000000000000000000011001
	00000000000000000000000000110010
	00000000000000000000000001000100
	00000000000000000000000010001000
	00000000000000000000000000010000
*** Max instructions per cycle 4

*** Examining Available
*** Scheduling [5]: SU(3):   %R25<def> = MOVi32rr %R27<kill>
Scoreboard:
	00000000000000000000000000000000
Scoreboard:
	00000000000000000000000000110011
	00000000000000000000000001000110
	00000000000000000000000010001100
	00000000000000000000000000011000
	00000000000000000000000000010000
*** Max instructions per cycle 5
*** Final schedule ***
SU(0):   %R33<def> = FADDrr_r32 %R33<kill>, %R34<kill>, %STATUS<imp-def,dead>
SU(1):   %R32<def,dead> = CMPri_r32 %R26, 32, %STATUS<imp-def>
SU(2):   STRf32 %R33<kill>, %R25<kill>, 0; mem:Volatile ST4[%lsr.iv24](tbaa=!2)
SU(3):   %R25<def> = MOVi32rr %R27<kill>

	Dead Def: CONFIG->g162
	Def Groups: CONFIG=g162
	Use Groups:
Observe:   GIE %CONFIG<imp-def,dead>
	Regs: R33=g160->g0(region live-out) R34=g161->g0(region live-out)
Global memory object and new barrier chain: SU(7).
Global memory object and new barrier chain: SU(6).
Global memory object and new barrier chain: SU(4).

===== Aggressive anti-dependency breaking
Available regs:  CMESHROUTE CONFIG COREID DEBUGCMD DEBUGSTATUS FSTATUS ILAT ILATCL ILATST IMASK IPEND IRET LC LE LS MEMPROTECT MEMSTATUS MESHCONFIG MULTICAST PC RESETCORE RMESHROUTE SP STATUS XMESHROUTE ZERO A1 A2 A3 A4 CTIMER0 CTIMER1 D5 D6 D14 D15 D16 D17 D18 D19 D20 D21 D22 D23 D24 D25 D26 D27 D28 D29 D30 D31 R9 R10 R11 R12 R13 R14 R25 R27 R28 R29 R30 R31 R32 R35 R36 R37 R38 R39 R40 R41 R42 R43 R44 R45 R46 R47 R48 R49 R50 R51 R52 R53 R54 R55 R56 R57 R58 R59 R60 R61 R62 R63 V1 V2 V3 V4 V5 V8 DMA0CONFIG DMA1CONFIG DMA0COUNT DMA1COUNT DMA0DSTADDR DMA1DSTADDR DMA0SRCADDR DMA1SRCADDR DMA0STATUS DMA1STATUS DMA0STRIDE DMA1STRIDE DMA0AUTO0 DMA0AUTO1 DMA1AUTO0 DMA1AUTO1
Anti:   %CONFIG<def,dead> = MOVTS32_core %R32<kill>
	Dead Def: CONFIG->g163
	Def Groups: CONFIG=g163
	Use Groups: R32=g158->g164(last-use)
Anti:   GID %CONFIG<imp-def,dead>
	Dead Def: CONFIG->g165
	Def Groups: CONFIG=g165
	Use Groups:
Anti:   %R32<def> = LDRi32_r32 %FP, -4; mem:LD4[FixedStack2]
	Def Groups: R32=g164
	Use Groups: FP=g0
Anti:   %R34<def> = LDRf32 %R25, 0; mem:Volatile LD4[%lsr.iv24](tbaa=!2)
	Def Groups: R34=g0
	Use Groups: R25=g0
Anti:   %R26<def> = ADDri_r32 %R26<kill>, 4, %STATUS<imp-def,dead>
	Dead Def: STATUS->g166
	Def Groups: R26=g0->g0(via D13) STATUS=g166
	Antidep reg: R26 (zero group)
	Use Groups: R26=g0
Anti:   %R27<def> = ADDri_r32 %R25, 4, %STATUS<imp-def,dead>
	Dead Def: STATUS->g167
	Def Groups: R27=g0->g0(via D13) STATUS=g167
	Antidep reg: R27 (zero group)
	Use Groups: R25=g0
Anti:   %R33<def> = LDRf32 %R27<kill>, 0; mem:LD4[%sunkaddr30](tbaa=!2)
	Def Groups: R33=g0
	Use Groups: R27=g0
Anti:   %R27<def> = ADDrr_r32 %R16, %R26, %STATUS<imp-def,dead>
	Dead Def: STATUS->g168
	Def Groups: R27=g0->g0(via D13) STATUS=g168
	Use Groups: R16=g0 R26=g0
********** List Scheduling **********
SU(0):   %R27<def> = ADDrr_r32 %R16, %R26, %STATUS<imp-def,dead>
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 5
  Depth              : 0
  Height             : 7
  Successors:
   out  SU(2): Latency=1
   data SU(1): Latency=2 Reg=%R27
   anti SU(3): Latency=0

SU(1):   %R33<def> = LDRf32 %R27<kill>, 0; mem:LD4[%sunkaddr30](tbaa=!2)
  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 6
  Depth              : 2
  Height             : 5
  Predecessors:
   data SU(0): Latency=2 Reg=%R27
  Successors:
   anti SU(2): Latency=0
   ord  ExitSU *: Latency=5
   ord  SU(4): Latency=0

SU(2):   %R27<def> = ADDri_r32 %R25, 4, %STATUS<imp-def,dead>
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 5
  Depth              : 2
  Height             : 0
  Predecessors:
   anti SU(1): Latency=0
   out  SU(0): Latency=1

SU(3):   %R26<def> = ADDri_r32 %R26<kill>, 4, %STATUS<imp-def,dead>
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 5
  Depth              : 0
  Height             : 0
  Predecessors:
   anti SU(0): Latency=0

SU(4):   %R34<def> = LDRf32 %R25, 0; mem:Volatile LD4[%lsr.iv24](tbaa=!2)
  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 6
  Depth              : 2
  Height             : 5
  Predecessors:
   ord  SU(1): Latency=0
  Successors:
   ord  ExitSU *: Latency=5
   ord  SU(6): Latency=0
   ord  SU(5): Latency=0

SU(5):   %R32<def> = LDRi32_r32 %FP, -4; mem:LD4[FixedStack2]
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 6
  Depth              : 2
  Height             : 4
  Predecessors:
   ord  SU(4): Latency=0
  Successors:
   data SU(7): Latency=4 Reg=%R32
   ord  SU(6): Latency=0

SU(6):   GID %CONFIG<imp-def,dead>
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 2
  Height             : 0
  Predecessors:
   ord  SU(5): Latency=0
   ord  SU(4): Latency=0
  Successors:
   ord  SU(7): Latency=0

SU(7):   %CONFIG<def,dead> = MOVTS32_core %R32<kill>
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 5
  Depth              : 6
  Height             : 0
  Predecessors:
   ord  SU(6): Latency=0
   data SU(5): Latency=4 Reg=%R32


*** Examining Available
*** Scheduling [0]: SU(0):   %R27<def> = ADDrr_r32 %R16, %R26, %STATUS<imp-def,dead>
Scoreboard:
	00000000000000000000000000000000
Scoreboard:
	00000000000000000000000000000001
	00000000000000000000000000000010
	00000000000000000000000000000100
	00000000000000000000000000001000
	00000000000000000000000000010000
*** Max instructions per cycle 0

*** Examining Available
*** Scheduling [1]: SU(3):   %R26<def> = ADDri_r32 %R26<kill>, 4, %STATUS<imp-def,dead>
Scoreboard:
	00000000000000000000000000000000
Scoreboard:
	00000000000000000000000000000011
	00000000000000000000000000000110
	00000000000000000000000000001100
	00000000000000000000000000011000
	00000000000000000000000000010000
*** Max instructions per cycle 1

*** Examining Available
*** Scheduling [2]: SU(1):   %R33<def> = LDRf32 %R27<kill>, 0; mem:LD4[%sunkaddr30](tbaa=!2)
Scoreboard:
	00000000000000000000000000000000
Scoreboard:
	00000000000000000000000000000111
	00000000000000000000000000001110
	00000000000000000000000000011100
	00000000000000000000000000011000
	00000000000000000000000000010000
	00000000000000000000000000100000
*** Max instructions per cycle 2

*** Examining Available
*** Scheduling [3]: SU(4):   %R34<def> = LDRf32 %R25, 0; mem:Volatile LD4[%lsr.iv24](tbaa=!2)
Scoreboard:
	00000000000000000000000000000000
Scoreboard:
	00000000000000000000000000001111
	00000000000000000000000000011110
	00000000000000000000000000011100
	00000000000000000000000000011000
	00000000000000000000000000110000
	00000000000000000000000000100000
*** Max instructions per cycle 3

*** Examining Available
*** Scheduling [4]: SU(5):   %R32<def> = LDRi32_r32 %FP, -4; mem:LD4[FixedStack2]
Scoreboard:
	00000000000000000000000000000000
Scoreboard:
	00000000000000000000000000011111
	00000000000000000000000000011110
	00000000000000000000000000011100
	00000000000000000000000000111000
	00000000000000000000000000110000
	00000000000000000000000000100000
*** Max instructions per cycle 4

*** Examining Available
*** Scheduling [5]: SU(6):   GID %CONFIG<imp-def,dead>
Scoreboard:
	00000000000000000000000000000000
Scoreboard:
	00000000000000000000000000011110
	00000000000000000000000000011100
	00000000000000000000000000111000
	00000000000000000000000000110000
	00000000000000000000000000100000
*** Max instructions per cycle 5

*** Examining Available
*** Scheduling [6]: SU(2):   %R27<def> = ADDri_r32 %R25, 4, %STATUS<imp-def,dead>
Scoreboard:
	00000000000000000000000000000000
Scoreboard:
	00000000000000000000000000011101
	00000000000000000000000000111010
	00000000000000000000000000110100
	00000000000000000000000000101000
	00000000000000000000000000010000
*** Max instructions per cycle 6

*** Examining Available
*** Stall in cycle 7

*** Examining Available
*** Scheduling [8]: SU(7):   %CONFIG<def,dead> = MOVTS32_core %R32<kill>
Scoreboard:
	00000000000000000000000000000000
Scoreboard:
	00000000000000000000000000110101
	00000000000000000000000000101010
	00000000000000000000000000010100
	00000000000000000000000000001000
	00000000000000000000000000010000
*** Max instructions per cycle 8
*** Final schedule ***
SU(0):   %R27<def> = ADDrr_r32 %R16, %R26, %STATUS<imp-def,dead>
SU(3):   %R26<def> = ADDri_r32 %R26<kill>, 4, %STATUS<imp-def,dead>
SU(1):   %R33<def> = LDRf32 %R27<kill>, 0; mem:LD4[%sunkaddr30](tbaa=!2)
SU(4):   %R34<def> = LDRf32 %R25, 0; mem:Volatile LD4[%lsr.iv24](tbaa=!2)
SU(5):   %R32<def> = LDRi32_r32 %FP, -4; mem:LD4[FixedStack2]
SU(6):   GID %CONFIG<imp-def,dead>
SU(2):   %R27<def> = ADDri_r32 %R25, 4, %STATUS<imp-def,dead>
SU(7):   %CONFIG<def,dead> = MOVTS32_core %R32<kill>

Fixup kills for BB#9
********** List Scheduling **********
*** Final schedule ***

	Def Groups:
	Use Groups: STATUS=g0->g156(last-use)
Observe:   BCC <BB#4>, 8, %STATUS<imp-use>
	Regs: STATUS=g156->g0(region live-out)

===== Aggressive anti-dependency breaking
Available regs:  CMESHROUTE CONFIG COREID DEBUGCMD DEBUGSTATUS FSTATUS ILAT ILATCL ILATST IMASK IPEND IRET LC LE LS MEMPROTECT MEMSTATUS MESHCONFIG MULTICAST PC RESETCORE RMESHROUTE SP XMESHROUTE ZERO A1 A2 A3 A4 CTIMER0 CTIMER1 D5 D6 D13 D14 D15 D16 D17 D18 D19 D20 D21 D22 D23 D24 D25 D26 D27 D28 D29 D30 D31 R9 R10 R11 R12 R13 R14 R25 R26 R27 R28 R29 R30 R31 R32 R33 R34 R35 R36 R37 R38 R39 R40 R41 R42 R43 R44 R45 R46 R47 R48 R49 R50 R51 R52 R53 R54 R55 R56 R57 R58 R59 R60 R61 R62 R63 V1 V2 V3 V4 V5 V8 DMA0CONFIG DMA1CONFIG DMA0COUNT DMA1COUNT DMA0DSTADDR DMA1DSTADDR DMA0SRCADDR DMA1SRCADDR DMA0STATUS DMA1STATUS DMA0STRIDE DMA1STRIDE DMA0AUTO0 DMA0AUTO1 DMA1AUTO0 DMA1AUTO1
Anti:   %R25<def,dead> = CMPrr_r32 %R24, %R3, %STATUS<imp-def>
	Def Groups: R25=g0->g0(via D12) STATUS=g0
	Antidep reg: STATUS (non-allocatable)
	Use Groups: R24=g0 R3=g0
Anti:   %R24<def> = ADDri_r32 %R24<kill>, 8, %STATUS<imp-def,dead>
	Dead Def: STATUS->g157
	Def Groups: R24=g0->g0(via D12) STATUS=g157
	Use Groups: R24=g0
Anti:   %R23<def> = ADDri_r32 %R23<kill>, 32, %STATUS<imp-def,dead>
	Dead Def: STATUS->g158
	Def Groups: R23=g0->g0(via D11) STATUS=g158
	Use Groups: R23=g0
Anti:   %R22<def> = ADDri_r32 %R22<kill>, 32, %STATUS<imp-def,dead>
	Dead Def: STATUS->g159
	Def Groups: R22=g0->g0(via D11) STATUS=g159
	Use Groups: R22=g0
********** List Scheduling **********
SU(0):   %R22<def> = ADDri_r32 %R22<kill>, 32, %STATUS<imp-def,dead>
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 5
  Depth              : 0
  Height             : 6
  Successors:
   ord  ExitSU *: Latency=4
   out  SU(3): Latency=1

SU(1):   %R23<def> = ADDri_r32 %R23<kill>, 32, %STATUS<imp-def,dead>
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 5
  Depth              : 0
  Height             : 6
  Successors:
   ord  ExitSU *: Latency=4
   out  SU(3): Latency=1

SU(2):   %R24<def> = ADDri_r32 %R24<kill>, 8, %STATUS<imp-def,dead>
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 5
  Depth              : 0
  Height             : 7
  Successors:
   ord  ExitSU *: Latency=4
   data SU(3): Latency=2 Reg=%R24
   out  SU(3): Latency=1

SU(3):   %R25<def,dead> = CMPrr_r32 %R24, %R3, %STATUS<imp-def>
  # preds left       : 4
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 5
  Depth              : 2
  Height             : 5
  Predecessors:
   data SU(2): Latency=2 Reg=%R24
   out  SU(2): Latency=1
   out  SU(1): Latency=1
   out  SU(0): Latency=1
  Successors:
   ord  ExitSU *: Latency=5


*** Examining Available
*** Scheduling [0]: SU(2):   %R24<def> = ADDri_r32 %R24<kill>, 8, %STATUS<imp-def,dead>
Scoreboard:
	00000000000000000000000000000000
Scoreboard:
	00000000000000000000000000000001
	00000000000000000000000000000010
	00000000000000000000000000000100
	00000000000000000000000000001000
	00000000000000000000000000010000
*** Max instructions per cycle 0

*** Examining Available
*** Scheduling [1]: SU(0):   %R22<def> = ADDri_r32 %R22<kill>, 32, %STATUS<imp-def,dead>
Scoreboard:
	00000000000000000000000000000000
Scoreboard:
	00000000000000000000000000000011
	00000000000000000000000000000110
	00000000000000000000000000001100
	00000000000000000000000000011000
	00000000000000000000000000010000
*** Max instructions per cycle 1

*** Examining Available
*** Scheduling [2]: SU(1):   %R23<def> = ADDri_r32 %R23<kill>, 32, %STATUS<imp-def,dead>
Scoreboard:
	00000000000000000000000000000000
Scoreboard:
	00000000000000000000000000000111
	00000000000000000000000000001110
	00000000000000000000000000011100
	00000000000000000000000000011000
	00000000000000000000000000010000
*** Max instructions per cycle 2

*** Examining Available
*** Scheduling [3]: SU(3):   %R25<def,dead> = CMPrr_r32 %R24, %R3, %STATUS<imp-def>
Scoreboard:
	00000000000000000000000000000000
Scoreboard:
	00000000000000000000000000001111
	00000000000000000000000000011110
	00000000000000000000000000011100
	00000000000000000000000000011000
	00000000000000000000000000010000
*** Max instructions per cycle 3
*** Final schedule ***
SU(2):   %R24<def> = ADDri_r32 %R24<kill>, 8, %STATUS<imp-def,dead>
SU(0):   %R22<def> = ADDri_r32 %R22<kill>, 32, %STATUS<imp-def,dead>
SU(1):   %R23<def> = ADDri_r32 %R23<kill>, 32, %STATUS<imp-def,dead>
SU(3):   %R25<def,dead> = CMPrr_r32 %R24, %R3, %STATUS<imp-def>

Fixup kills for BB#10
********** List Scheduling **********
*** Final schedule ***

	Def Groups:
	Use Groups: STATUS=g0->g156(last-use)
Observe:   BCC <BB#3>, 1, %STATUS<imp-use>
	Regs: STATUS=g156->g0(region live-out)

===== Aggressive anti-dependency breaking
Available regs:  CMESHROUTE CONFIG COREID DEBUGCMD DEBUGSTATUS FSTATUS ILAT ILATCL ILATST IMASK IPEND IRET LC LE LS MEMPROTECT MEMSTATUS MESHCONFIG MULTICAST PC RESETCORE RMESHROUTE SP XMESHROUTE ZERO A1 A2 A3 A4 CTIMER0 CTIMER1 D5 D6 D11 D12 D13 D14 D15 D16 D17 D18 D19 D20 D21 D22 D23 D24 D25 D26 D27 D28 D29 D30 D31 R9 R10 R11 R12 R13 R14 R21 R22 R23 R24 R25 R26 R27 R28 R29 R30 R31 R32 R33 R34 R35 R36 R37 R38 R39 R40 R41 R42 R43 R44 R45 R46 R47 R48 R49 R50 R51 R52 R53 R54 R55 R56 R57 R58 R59 R60 R61 R62 R63 V1 V2 V3 V4 V5 V8 DMA0CONFIG DMA1CONFIG DMA0COUNT DMA1COUNT DMA0DSTADDR DMA1DSTADDR DMA0SRCADDR DMA1SRCADDR DMA0STATUS DMA1STATUS DMA0STRIDE DMA1STRIDE DMA0AUTO0 DMA0AUTO1 DMA1AUTO0 DMA1AUTO1
Anti:   %R21<def,dead> = CMPrr_r32 %R20, %R3, %STATUS<imp-def>
	Def Groups: R21=g0->g0(via D10) STATUS=g0
	Antidep reg: STATUS (non-allocatable)
	Use Groups: R20=g0 R3=g0
Anti:   %R20<def> = ADDri_r32 %R20<kill>, 1, %STATUS<imp-def,dead>
	Dead Def: STATUS->g157
	Def Groups: R20=g0->g0(via D10) STATUS=g157
	Use Groups: R20=g0
Anti:   %R2<def> = ADDrr_r32 %R2<kill>, %IP, %STATUS<imp-def,dead>
	Dead Def: STATUS->g158
	Def Groups: R2=g0->g0(via D1) STATUS=g158
	Use Groups: R2=g0 IP=g0
********** List Scheduling **********
SU(0):   %R2<def> = ADDrr_r32 %R2<kill>, %IP, %STATUS<imp-def,dead>
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 5
  Depth              : 0
  Height             : 6
  Successors:
   ord  ExitSU *: Latency=4
   out  SU(2): Latency=1

SU(1):   %R20<def> = ADDri_r32 %R20<kill>, 1, %STATUS<imp-def,dead>
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 5
  Depth              : 0
  Height             : 7
  Successors:
   ord  ExitSU *: Latency=4
   data SU(2): Latency=2 Reg=%R20
   out  SU(2): Latency=1

SU(2):   %R21<def,dead> = CMPrr_r32 %R20, %R3, %STATUS<imp-def>
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 5
  Depth              : 2
  Height             : 5
  Predecessors:
   data SU(1): Latency=2 Reg=%R20
   out  SU(1): Latency=1
   out  SU(0): Latency=1
  Successors:
   ord  ExitSU *: Latency=5


*** Examining Available
*** Scheduling [0]: SU(1):   %R20<def> = ADDri_r32 %R20<kill>, 1, %STATUS<imp-def,dead>
Scoreboard:
	00000000000000000000000000000000
Scoreboard:
	00000000000000000000000000000001
	00000000000000000000000000000010
	00000000000000000000000000000100
	00000000000000000000000000001000
	00000000000000000000000000010000
*** Max instructions per cycle 0

*** Examining Available
*** Scheduling [1]: SU(0):   %R2<def> = ADDrr_r32 %R2<kill>, %IP, %STATUS<imp-def,dead>
Scoreboard:
	00000000000000000000000000000000
Scoreboard:
	00000000000000000000000000000011
	00000000000000000000000000000110
	00000000000000000000000000001100
	00000000000000000000000000011000
	00000000000000000000000000010000
*** Max instructions per cycle 1

*** Examining Available
*** Scheduling [2]: SU(2):   %R21<def,dead> = CMPrr_r32 %R20, %R3, %STATUS<imp-def>
Scoreboard:
	00000000000000000000000000000000
Scoreboard:
	00000000000000000000000000000111
	00000000000000000000000000001110
	00000000000000000000000000011100
	00000000000000000000000000011000
	00000000000000000000000000010000
*** Max instructions per cycle 2
*** Final schedule ***
SU(1):   %R20<def> = ADDri_r32 %R20<kill>, 1, %STATUS<imp-def,dead>
SU(0):   %R2<def> = ADDrr_r32 %R2<kill>, %IP, %STATUS<imp-def,dead>
SU(2):   %R21<def,dead> = CMPrr_r32 %R20, %R3, %STATUS<imp-def>

Fixup kills for BB#11
********** List Scheduling **********
*** Final schedule ***

	Def Groups:
	Use Groups: LR=g0
Observe:   JR32 %LR
	Regs:
Global memory object and new barrier chain: SU(0).

===== Aggressive anti-dependency breaking
Available regs:  CMESHROUTE CONFIG COREID DEBUGCMD DEBUGSTATUS FSTATUS ILAT ILATCL ILATST IMASK IP IPEND IRET LC LE LS MEMPROTECT MEMSTATUS MESHCONFIG MULTICAST PC RESETCORE RMESHROUTE SP STATUS XMESHROUTE ZERO A1 A2 A3 A4 CTIMER0 CTIMER1 D0 D1 D5 D6 D8 D9 D10 D11 D12 D13 D14 D15 D16 D17 D18 D19 D20 D21 D22 D23 D24 D25 D26 D27 D28 D29 D30 D31 R0 R1 R2 R3 R9 R10 R11 R12 R13 R14 R16 R17 R18 R19 R20 R21 R22 R23 R24 R25 R26 R27 R28 R29 R30 R31 R32 R33 R34 R35 R36 R37 R38 R39 R40 R41 R42 R43 R44 R45 R46 R47 R48 R49 R50 R51 R52 R53 R54 R55 R56 R57 R58 R59 R60 R61 R62 R63 V1 V2 V3 V4 V5 V8 DMA0CONFIG DMA1CONFIG DMA0COUNT DMA1COUNT DMA0DSTADDR DMA1DSTADDR DMA0SRCADDR DMA1SRCADDR DMA0STATUS DMA1STATUS DMA0STRIDE DMA1STRIDE DMA0AUTO0 DMA0AUTO1 DMA1AUTO0 DMA1AUTO1
Anti:   %SP<def> = ADDri_r32 %SP, 48, %STATUS<imp-def>
	Dead Def: SP->g156
	Dead Def: STATUS->g157
	Def Groups: SP=g156 STATUS=g157
	Antidep reg: SP (non-allocatable)
	Use Groups: SP=g156->g158(last-use)
Anti:   %LR<def> = LDRi64 %SP, 48; flags: FrameSetup
	Def Groups: LR=g0
	Use Groups: SP=g158
********** List Scheduling **********
SU(0):   %LR<def> = LDRi64 %SP, 48; flags: FrameSetup
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 6
  Depth              : 0
  Height             : 6
  Successors:
   ord  ExitSU *: Latency=6
   anti SU(1): Latency=0

SU(1):   %SP<def> = ADDri_r32 %SP, 48, %STATUS<imp-def>
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 5
  Depth              : 0
  Height             : 0
  Predecessors:
   anti SU(0): Latency=0


*** Examining Available
*** Scheduling [0]: SU(0):   %LR<def> = LDRi64 %SP, 48; flags: FrameSetup
Scoreboard:
	00000000000000000000000000000000
Scoreboard:
	00000000000000000000000000000001
	00000000000000000000000000000010
	00000000000000000000000000000100
	00000000000000000000000000001000
	00000000000000000000000000010000
	00000000000000000000000000100000
*** Max instructions per cycle 0

*** Examining Available
*** Scheduling [1]: SU(1):   %SP<def> = ADDri_r32 %SP, 48, %STATUS<imp-def>
Scoreboard:
	00000000000000000000000000000000
Scoreboard:
	00000000000000000000000000000011
	00000000000000000000000000000110
	00000000000000000000000000001100
	00000000000000000000000000011000
	00000000000000000000000000110000
*** Max instructions per cycle 1
*** Final schedule ***
SU(0):   %LR<def> = LDRi64 %SP, 48; flags: FrameSetup
SU(1):   %SP<def> = ADDri_r32 %SP, 48, %STATUS<imp-def>

	Def Groups:
	Use Groups: CONFIG=g0->g159(last-use)
Observe:   GIE %CONFIG<imp-use,kill>
	Regs: CONFIG=g159->g0(region live-out) SP=g158->g0(region live-out)
Global memory object and new barrier chain: SU(2).
Global memory object and new barrier chain: SU(1).

===== Aggressive anti-dependency breaking
Available regs:  CMESHROUTE COREID DEBUGCMD DEBUGSTATUS FSTATUS ILAT ILATCL ILATST IMASK IP IPEND IRET LC LE LR LS MEMPROTECT MEMSTATUS MESHCONFIG MULTICAST PC RESETCORE RMESHROUTE STATUS XMESHROUTE ZERO A1 A2 A3 A4 CTIMER0 CTIMER1 D0 D1 D5 D6 D8 D9 D10 D11 D12 D13 D14 D15 D16 D17 D18 D19 D20 D21 D22 D23 D24 D25 D26 D27 D28 D29 D30 D31 R0 R1 R2 R3 R9 R10 R11 R12 R13 R14 R16 R17 R18 R19 R20 R21 R22 R23 R24 R25 R26 R27 R28 R29 R30 R31 R32 R33 R34 R35 R36 R37 R38 R39 R40 R41 R42 R43 R44 R45 R46 R47 R48 R49 R50 R51 R52 R53 R54 R55 R56 R57 R58 R59 R60 R61 R62 R63 V1 V2 V3 V4 V5 V8 DMA0CONFIG DMA1CONFIG DMA0COUNT DMA1COUNT DMA0DSTADDR DMA1DSTADDR DMA0SRCADDR DMA1SRCADDR DMA0STATUS DMA1STATUS DMA0STRIDE DMA1STRIDE DMA0AUTO0 DMA0AUTO1 DMA1AUTO0 DMA1AUTO1
Anti:   %CONFIG<def> = MOVTS32_core %R0<kill>
	Def Groups: CONFIG=g0
	Use Groups: R0=g0->g160(last-use)
Anti:   GID
	Def Groups:
	Use Groups:
Anti:   %R0<def> = LDRi32_r32 %FP, -44; mem:LD4[FixedStack1]
	Def Groups: R0=g160
	Use Groups: FP=g0
********** List Scheduling **********
SU(0):   %R0<def> = LDRi32_r32 %FP, -44; mem:LD4[FixedStack1]
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 6
  Depth              : 0
  Height             : 8
  Successors:
   data SU(2): Latency=4 Reg=%R0
   ord  SU(1): Latency=0

SU(1):   GID
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 4
  Predecessors:
   ord  SU(0): Latency=0
  Successors:
   ord  SU(2): Latency=0

SU(2):   %CONFIG<def> = MOVTS32_core %R0<kill>
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 5
  Depth              : 4
  Height             : 4
  Predecessors:
   ord  SU(1): Latency=0
   data SU(0): Latency=4 Reg=%R0
  Successors:
   ord  ExitSU *: Latency=4


*** Examining Available
*** Scheduling [0]: SU(0):   %R0<def> = LDRi32_r32 %FP, -44; mem:LD4[FixedStack1]
Scoreboard:
	00000000000000000000000000000000
Scoreboard:
	00000000000000000000000000000001
	00000000000000000000000000000010
	00000000000000000000000000000100
	00000000000000000000000000001000
	00000000000000000000000000010000
	00000000000000000000000000100000
*** Max instructions per cycle 0

*** Examining Available
*** Scheduling [1]: SU(1):   GID
Scoreboard:
	00000000000000000000000000000000
Scoreboard:
	00000000000000000000000000000010
	00000000000000000000000000000100
	00000000000000000000000000001000
	00000000000000000000000000010000
	00000000000000000000000000100000
*** Max instructions per cycle 1

*** Examining Available
*** Stall in cycle 2

*** Examining Available
*** Stall in cycle 3

*** Examining Available
*** Scheduling [4]: SU(2):   %CONFIG<def> = MOVTS32_core %R0<kill>
Scoreboard:
	00000000000000000000000000000000
Scoreboard:
	00000000000000000000000000010001
	00000000000000000000000000100010
	00000000000000000000000000000100
	00000000000000000000000000001000
	00000000000000000000000000010000
*** Max instructions per cycle 4
*** Final schedule ***
SU(0):   %R0<def> = LDRi32_r32 %FP, -44; mem:LD4[FixedStack1]
SU(1):   GID
SU(2):   %CONFIG<def> = MOVTS32_core %R0<kill>

Fixup kills for BB#12
# *** IR Dump After Post RA top-down list latency scheduler ***:
# Machine code for function matmac: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=32, align=8, at location [SP-40]
  fi#1: size=4, align=4, at location [SP-44]
  fi#2: size=4, align=4, at location [SP-4]
  fi#3: size=4, align=8, at location [SP-8]
Function Live Ins: %R0, %R1, %R2, %R3

BB#0: 
    Live Ins: %R0 %R1 %R2 %R3
	%SP<def,tied2> = STRi64_pmd %LR, %SP<tied0>, -48; flags: FrameSetup
	%FP<def> = ADDri_r32 %SP, 48, %STATUS<imp-def>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	%IP<def> = MOVi32ri 65535
	GID %CONFIG<imp-def>
	%R19<def> = MOVFS32_core %CONFIG, %D9<imp-def>
	%IP<def,tied1> = MOVTi32ri %IP<tied0>, 65521
	STRi32_r32 %R19, %FP, -44; mem:ST4[FixedStack1]
	%R18<def> = ANDrr_r32 %R19<kill>, %IP<kill>, %STATUS<imp-def>, %D9<imp-use,kill>, %D9<imp-def>
	%R19<def,tied1> = MOVTi32ri %R19<kill,tied0>, 72, %D9<imp-use,kill>, %D9<imp-def>
	STRi64 %D9<kill>, %FP, -8; mem:ST4[FixedStack3] ST4[FixedStack2]
	GIE %CONFIG<imp-use,kill>
    Successors according to CFG: BB#1(?%)

BB#1: derived from LLVM BB %entry
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#0
	%IP<def,dead> = CMPri_r32 %R3, 1, %STATUS<imp-def>
	BCC <BB#12>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#2(0x50000000 / 0x80000000 = 62.50%) BB#12(0x30000000 / 0x80000000 = 37.50%)

BB#2: derived from LLVM BB %for.body3.lr.ph.preheader
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#1
	%R16<def> = MOViPTR %FP, -40
	%R19<def> = MOVi32ri 0, %D9<imp-def>
	%IP<def> = LSL32ri %R3, 2, %STATUS<imp-def,dead>
	%R1<def> = ADDri_r32 %R1<kill>, 8, %STATUS<imp-def,dead>
	%R17<def> = ADDri_r32 %R16, 8, %STATUS<imp-def,dead>
	%R20<def> = MOVi32rr %R19
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %for.body3.lr.ph
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20
    Predecessors according to CFG: BB#2 BB#11
	%R21<def> = LDRi32_r32 %FP, -8; mem:LD4[FixedStack3]
	GID %CONFIG<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %R21<kill>
	GIE %CONFIG<imp-def,dead>
	%R21<def> = IMULrr_r32 %R20, %R3, %STATUS<imp-def,dead>
	%R22<def> = MOVi32rr %R2
	%R21<def> = LSL32ri %R21<kill>, 2, %STATUS<imp-def,dead>
	%R23<def> = MOVi32rr %R1
	%R24<def> = MOVi32rr %R19
	%R21<def> = ADDrr_r32 %R0, %R21<kill>, %STATUS<imp-def,dead>
    Successors according to CFG: BB#4(?%)

BB#4: derived from LLVM BB %for.body9.preheader
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#3 BB#10
	%R18<def> = MOVi32rr %R19<kill>, %D9<imp-use,kill>, %D9<imp-def>
	STRi64 %D9, %FP, -16; mem:ST8[%1+24]
	STRi64 %D9, %FP, -24; mem:ST8[%1+16]
	STRi64 %D9, %FP, -32; mem:ST8[%1+8]
	STRi64 %D9, %FP, -40; mem:ST8[%1]
	%R25<def> = MOVi32rr %R23
	%R26<def> = MOVi32rr %R19
    Successors according to CFG: BB#5(?%)

BB#5: derived from LLVM BB %for.body9
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#4 BB#7
	%R27<def> = LSL32ri %R26, 2, %STATUS<imp-def,dead>
	%R27<def> = ADDrr_r32 %R21, %R27<kill>, %STATUS<imp-def,dead>
	%R27<def> = LDRf32 %R27<kill>, 0; mem:Volatile LD4[%add.ptr10](tbaa=!2)
	%R32<def> = MOVi32rr %R17
	%R34<def> = MOVi32rr %R25
	%R33<def> = MOVi32rr %R19
    Successors according to CFG: BB#6(?%)

BB#6: derived from LLVM BB %for.body13
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26 %R27 %R32 %R33 %R34
    Predecessors according to CFG: BB#5 BB#6
	%R37<def> = LDRf32 %R34, -8; mem:Volatile LD4[%scevgep8](tbaa=!2)
	%R38<def> = LDRf32 %R34, -4; mem:Volatile LD4[%scevgep9](tbaa=!2)
	%R39<def> = LDRf32 %R34, 0; mem:Volatile LD4[%lsr.iv5](tbaa=!2)
	%R40<def> = LDRf32 %R34, 4; mem:Volatile LD4[%scevgep7](tbaa=!2)
	%D21<def> = LDRf64 %R32, -8; mem:LD4[%scevgep17](tbaa=!2) LD4[%scevgep15](tbaa=!2)
	%R36<def> = ADDri_r32 %R34<kill>, 16, %STATUS<imp-def,dead>
	%R34<def> = LDRi32_r32 %FP, -4; mem:LD4[FixedStack2]
	GID %CONFIG<imp-def,dead>
	%R35<def> = ADDri_r32 %R32, 16, %STATUS<imp-def,dead>
	%R33<def> = ADDri_r32 %R33<kill>, 4, %STATUS<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %R34<kill>
	GIE %CONFIG<imp-def,dead>
	%R43<def,tied1> = FMADDrr_r32 %R43<kill,tied0>, %R27, %R37<kill>, %STATUS<imp-def,dead>, %D21<imp-use,kill>, %D21<imp-def>
	%R42<def,tied1> = FMADDrr_r32 %R42<kill,tied0>, %R27, %R38<kill>, %STATUS<imp-def,dead>, %D21<imp-use,kill>, %D21<imp-def>
	%R44<def> = MOVi32rr %R43, %D22<imp-def>
	%R45<def> = MOVi32rr %R42<kill>, %D21<imp-use,kill>, %D22<imp-use,kill>, %D22<imp-def>
	STRf64 %D22<kill>, %R32, -8; mem:ST4[%scevgep17](tbaa=!2) ST4[%scevgep15](tbaa=!2)
	%R34<def> = LDRf32 %R32, 0; mem:LD4[%lsr.iv1214](tbaa=!2)
	%R34<def,tied1> = FMADDrr_r32 %R34<tied0>, %R27, %R39<kill>, %STATUS<imp-def,dead>
	STRf32 %R34<kill>, %R32, 0; mem:ST4[%lsr.iv1214](tbaa=!2)
	%R63<def> = LDRf32 %R32, 4; mem:LD4[%scevgep16](tbaa=!2)
	%R63<def,tied1> = FMADDrr_r32 %R63<tied0>, %R27, %R40<kill>, %STATUS<imp-def,dead>
	%R34<def,dead> = CMPri_r32 %R33, 8, %STATUS<imp-def>
	STRf32 %R63<kill>, %R32<kill>, 4; mem:ST4[%scevgep16](tbaa=!2)
	%R32<def> = MOVi32rr %R35<kill>
	%R34<def> = MOVi32rr %R36<kill>
	BCC <BB#6>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#6(0x7c000000 / 0x80000000 = 96.88%) BB#7(0x04000000 / 0x80000000 = 3.12%)

BB#7: derived from LLVM BB %for.end60
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#6
	%R26<def> = ADDri_r32 %R26<kill>, 1, %STATUS<imp-def,dead>
	%R25<def> = ADDrr_r32 %R25<kill>, %IP, %STATUS<imp-def,dead>
	%R27<def,dead> = CMPrr_r32 %R26, %R3, %STATUS<imp-def>
	BCC <BB#5>, 1, %STATUS<imp-use>
    Successors according to CFG: BB#8(0x04000000 / 0x80000000 = 3.12%) BB#5(0x7c000000 / 0x80000000 = 96.88%)

BB#8: derived from LLVM BB %for.cond64.preheader
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#7
	%R25<def> = MOVi32rr %R22
	%R26<def> = MOVi32rr %R19
    Successors according to CFG: BB#9(?%)

BB#9: derived from LLVM BB %for.body66
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#8 BB#9
	%R27<def> = ADDrr_r32 %R16, %R26, %STATUS<imp-def,dead>
	%R26<def> = ADDri_r32 %R26<kill>, 4, %STATUS<imp-def,dead>
	%R33<def> = LDRf32 %R27<kill>, 0; mem:LD4[%sunkaddr30](tbaa=!2)
	%R34<def> = LDRf32 %R25, 0; mem:Volatile LD4[%lsr.iv24](tbaa=!2)
	%R32<def> = LDRi32_r32 %FP, -4; mem:LD4[FixedStack2]
	GID %CONFIG<imp-def,dead>
	%R27<def> = ADDri_r32 %R25, 4, %STATUS<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %R32<kill>
	GIE %CONFIG<imp-def,dead>
	%R33<def> = FADDrr_r32 %R33<kill>, %R34<kill>, %STATUS<imp-def,dead>
	%R32<def,dead> = CMPri_r32 %R26, 32, %STATUS<imp-def>
	STRf32 %R33<kill>, %R25<kill>, 0; mem:Volatile ST4[%lsr.iv24](tbaa=!2)
	%R25<def> = MOVi32rr %R27<kill>
	BCC <BB#9>, 1, %STATUS<imp-use>
    Successors according to CFG: BB#10(0x04000000 / 0x80000000 = 3.12%) BB#9(0x7c000000 / 0x80000000 = 96.88%)

BB#10: derived from LLVM BB %for.end75
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#9
	%R24<def> = ADDri_r32 %R24<kill>, 8, %STATUS<imp-def,dead>
	%R22<def> = ADDri_r32 %R22<kill>, 32, %STATUS<imp-def,dead>
	%R23<def> = ADDri_r32 %R23<kill>, 32, %STATUS<imp-def,dead>
	%R25<def,dead> = CMPrr_r32 %R24, %R3, %STATUS<imp-def>
	BCC <BB#4>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#4(0x7c000000 / 0x80000000 = 96.88%) BB#11(0x04000000 / 0x80000000 = 3.12%)

BB#11: derived from LLVM BB %for.end78
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20
    Predecessors according to CFG: BB#10
	%R20<def> = ADDri_r32 %R20<kill>, 1, %STATUS<imp-def,dead>
	%R2<def> = ADDrr_r32 %R2<kill>, %IP, %STATUS<imp-def,dead>
	%R21<def,dead> = CMPrr_r32 %R20, %R3, %STATUS<imp-def>
	BCC <BB#3>, 1, %STATUS<imp-use>
    Successors according to CFG: BB#12(0x04000000 / 0x80000000 = 3.12%) BB#3(0x7c000000 / 0x80000000 = 96.88%)

BB#12: derived from LLVM BB %for.end81
    Predecessors according to CFG: BB#1 BB#11
	%R0<def> = LDRi32_r32 %FP, -44; mem:LD4[FixedStack1]
	GID
	%CONFIG<def> = MOVTS32_core %R0<kill>
	GIE %CONFIG<imp-use,kill>
	%LR<def> = LDRi64 %SP, 48; flags: FrameSetup
	%SP<def> = ADDri_r32 %SP, 48, %STATUS<imp-def>
	JR32 %LR

# End machine code for function matmac.

# *** IR Dump Before Analyze Machine Code For Garbage Collection ***:
# Machine code for function matmac: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=32, align=8, at location [SP-40]
  fi#1: size=4, align=4, at location [SP-44]
  fi#2: size=4, align=4, at location [SP-4]
  fi#3: size=4, align=8, at location [SP-8]
Function Live Ins: %R0, %R1, %R2, %R3

BB#0: 
    Live Ins: %R0 %R1 %R2 %R3
	%SP<def,tied2> = STRi64_pmd %LR, %SP<tied0>, -48; flags: FrameSetup
	%FP<def> = ADDri_r32 %SP, 48, %STATUS<imp-def>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	%IP<def> = MOVi32ri 65535
	GID %CONFIG<imp-def>
	%R19<def> = MOVFS32_core %CONFIG, %D9<imp-def>
	%IP<def,tied1> = MOVTi32ri %IP<tied0>, 65521
	STRi32_r32 %R19, %FP, -44; mem:ST4[FixedStack1]
	%R18<def> = ANDrr_r32 %R19<kill>, %IP<kill>, %STATUS<imp-def>, %D9<imp-use,kill>, %D9<imp-def>
	%R19<def,tied1> = MOVTi32ri %R19<kill,tied0>, 72, %D9<imp-use,kill>, %D9<imp-def>
	STRi64 %D9<kill>, %FP, -8; mem:ST4[FixedStack3] ST4[FixedStack2]
	GIE %CONFIG<imp-use,kill>
    Successors according to CFG: BB#1(?%)

BB#1: derived from LLVM BB %entry
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#0
	%IP<def,dead> = CMPri_r32 %R3, 1, %STATUS<imp-def>
	BCC <BB#12>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#2(0x50000000 / 0x80000000 = 62.50%) BB#12(0x30000000 / 0x80000000 = 37.50%)

BB#2: derived from LLVM BB %for.body3.lr.ph.preheader
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#1
	%R16<def> = MOViPTR %FP, -40
	%R19<def> = MOVi32ri 0, %D9<imp-def>
	%IP<def> = LSL32ri %R3, 2, %STATUS<imp-def,dead>
	%R1<def> = ADDri_r32 %R1<kill>, 8, %STATUS<imp-def,dead>
	%R17<def> = ADDri_r32 %R16, 8, %STATUS<imp-def,dead>
	%R20<def> = MOVi32rr %R19
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %for.body3.lr.ph
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20
    Predecessors according to CFG: BB#2 BB#11
	%R21<def> = LDRi32_r32 %FP, -8; mem:LD4[FixedStack3]
	GID %CONFIG<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %R21<kill>
	GIE %CONFIG<imp-def,dead>
	%R21<def> = IMULrr_r32 %R20, %R3, %STATUS<imp-def,dead>
	%R22<def> = MOVi32rr %R2
	%R21<def> = LSL32ri %R21<kill>, 2, %STATUS<imp-def,dead>
	%R23<def> = MOVi32rr %R1
	%R24<def> = MOVi32rr %R19
	%R21<def> = ADDrr_r32 %R0, %R21<kill>, %STATUS<imp-def,dead>
    Successors according to CFG: BB#4(?%)

BB#4: derived from LLVM BB %for.body9.preheader
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#3 BB#10
	%R18<def> = MOVi32rr %R19<kill>, %D9<imp-use,kill>, %D9<imp-def>
	STRi64 %D9, %FP, -16; mem:ST8[%1+24]
	STRi64 %D9, %FP, -24; mem:ST8[%1+16]
	STRi64 %D9, %FP, -32; mem:ST8[%1+8]
	STRi64 %D9, %FP, -40; mem:ST8[%1]
	%R25<def> = MOVi32rr %R23
	%R26<def> = MOVi32rr %R19
    Successors according to CFG: BB#5(?%)

BB#5: derived from LLVM BB %for.body9
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#4 BB#7
	%R27<def> = LSL32ri %R26, 2, %STATUS<imp-def,dead>
	%R27<def> = ADDrr_r32 %R21, %R27<kill>, %STATUS<imp-def,dead>
	%R27<def> = LDRf32 %R27<kill>, 0; mem:Volatile LD4[%add.ptr10](tbaa=!2)
	%R32<def> = MOVi32rr %R17
	%R34<def> = MOVi32rr %R25
	%R33<def> = MOVi32rr %R19
    Successors according to CFG: BB#6(?%)

BB#6: derived from LLVM BB %for.body13
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26 %R27 %R32 %R33 %R34
    Predecessors according to CFG: BB#5 BB#6
	%R37<def> = LDRf32 %R34, -8; mem:Volatile LD4[%scevgep8](tbaa=!2)
	%R38<def> = LDRf32 %R34, -4; mem:Volatile LD4[%scevgep9](tbaa=!2)
	%R39<def> = LDRf32 %R34, 0; mem:Volatile LD4[%lsr.iv5](tbaa=!2)
	%R40<def> = LDRf32 %R34, 4; mem:Volatile LD4[%scevgep7](tbaa=!2)
	%D21<def> = LDRf64 %R32, -8; mem:LD4[%scevgep17](tbaa=!2) LD4[%scevgep15](tbaa=!2)
	%R36<def> = ADDri_r32 %R34<kill>, 16, %STATUS<imp-def,dead>
	%R34<def> = LDRi32_r32 %FP, -4; mem:LD4[FixedStack2]
	GID %CONFIG<imp-def,dead>
	%R35<def> = ADDri_r32 %R32, 16, %STATUS<imp-def,dead>
	%R33<def> = ADDri_r32 %R33<kill>, 4, %STATUS<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %R34<kill>
	GIE %CONFIG<imp-def,dead>
	%R43<def,tied1> = FMADDrr_r32 %R43<kill,tied0>, %R27, %R37<kill>, %STATUS<imp-def,dead>, %D21<imp-use,kill>, %D21<imp-def>
	%R42<def,tied1> = FMADDrr_r32 %R42<kill,tied0>, %R27, %R38<kill>, %STATUS<imp-def,dead>, %D21<imp-use,kill>, %D21<imp-def>
	%R44<def> = MOVi32rr %R43, %D22<imp-def>
	%R45<def> = MOVi32rr %R42<kill>, %D21<imp-use,kill>, %D22<imp-use,kill>, %D22<imp-def>
	STRf64 %D22<kill>, %R32, -8; mem:ST4[%scevgep17](tbaa=!2) ST4[%scevgep15](tbaa=!2)
	%R34<def> = LDRf32 %R32, 0; mem:LD4[%lsr.iv1214](tbaa=!2)
	%R34<def,tied1> = FMADDrr_r32 %R34<tied0>, %R27, %R39<kill>, %STATUS<imp-def,dead>
	STRf32 %R34<kill>, %R32, 0; mem:ST4[%lsr.iv1214](tbaa=!2)
	%R63<def> = LDRf32 %R32, 4; mem:LD4[%scevgep16](tbaa=!2)
	%R63<def,tied1> = FMADDrr_r32 %R63<tied0>, %R27, %R40<kill>, %STATUS<imp-def,dead>
	%R34<def,dead> = CMPri_r32 %R33, 8, %STATUS<imp-def>
	STRf32 %R63<kill>, %R32<kill>, 4; mem:ST4[%scevgep16](tbaa=!2)
	%R32<def> = MOVi32rr %R35<kill>
	%R34<def> = MOVi32rr %R36<kill>
	BCC <BB#6>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#6(0x7c000000 / 0x80000000 = 96.88%) BB#7(0x04000000 / 0x80000000 = 3.12%)

BB#7: derived from LLVM BB %for.end60
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#6
	%R26<def> = ADDri_r32 %R26<kill>, 1, %STATUS<imp-def,dead>
	%R25<def> = ADDrr_r32 %R25<kill>, %IP, %STATUS<imp-def,dead>
	%R27<def,dead> = CMPrr_r32 %R26, %R3, %STATUS<imp-def>
	BCC <BB#5>, 1, %STATUS<imp-use>
    Successors according to CFG: BB#8(0x04000000 / 0x80000000 = 3.12%) BB#5(0x7c000000 / 0x80000000 = 96.88%)

BB#8: derived from LLVM BB %for.cond64.preheader
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#7
	%R25<def> = MOVi32rr %R22
	%R26<def> = MOVi32rr %R19
    Successors according to CFG: BB#9(?%)

BB#9: derived from LLVM BB %for.body66
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#8 BB#9
	%R27<def> = ADDrr_r32 %R16, %R26, %STATUS<imp-def,dead>
	%R26<def> = ADDri_r32 %R26<kill>, 4, %STATUS<imp-def,dead>
	%R33<def> = LDRf32 %R27<kill>, 0; mem:LD4[%sunkaddr30](tbaa=!2)
	%R34<def> = LDRf32 %R25, 0; mem:Volatile LD4[%lsr.iv24](tbaa=!2)
	%R32<def> = LDRi32_r32 %FP, -4; mem:LD4[FixedStack2]
	GID %CONFIG<imp-def,dead>
	%R27<def> = ADDri_r32 %R25, 4, %STATUS<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %R32<kill>
	GIE %CONFIG<imp-def,dead>
	%R33<def> = FADDrr_r32 %R33<kill>, %R34<kill>, %STATUS<imp-def,dead>
	%R32<def,dead> = CMPri_r32 %R26, 32, %STATUS<imp-def>
	STRf32 %R33<kill>, %R25<kill>, 0; mem:Volatile ST4[%lsr.iv24](tbaa=!2)
	%R25<def> = MOVi32rr %R27<kill>
	BCC <BB#9>, 1, %STATUS<imp-use>
    Successors according to CFG: BB#10(0x04000000 / 0x80000000 = 3.12%) BB#9(0x7c000000 / 0x80000000 = 96.88%)

BB#10: derived from LLVM BB %for.end75
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#9
	%R24<def> = ADDri_r32 %R24<kill>, 8, %STATUS<imp-def,dead>
	%R22<def> = ADDri_r32 %R22<kill>, 32, %STATUS<imp-def,dead>
	%R23<def> = ADDri_r32 %R23<kill>, 32, %STATUS<imp-def,dead>
	%R25<def,dead> = CMPrr_r32 %R24, %R3, %STATUS<imp-def>
	BCC <BB#4>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#4(0x7c000000 / 0x80000000 = 96.88%) BB#11(0x04000000 / 0x80000000 = 3.12%)

BB#11: derived from LLVM BB %for.end78
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20
    Predecessors according to CFG: BB#10
	%R20<def> = ADDri_r32 %R20<kill>, 1, %STATUS<imp-def,dead>
	%R2<def> = ADDrr_r32 %R2<kill>, %IP, %STATUS<imp-def,dead>
	%R21<def,dead> = CMPrr_r32 %R20, %R3, %STATUS<imp-def>
	BCC <BB#3>, 1, %STATUS<imp-use>
    Successors according to CFG: BB#12(0x04000000 / 0x80000000 = 3.12%) BB#3(0x7c000000 / 0x80000000 = 96.88%)

BB#12: derived from LLVM BB %for.end81
    Predecessors according to CFG: BB#1 BB#11
	%R0<def> = LDRi32_r32 %FP, -44; mem:LD4[FixedStack1]
	GID
	%CONFIG<def> = MOVTS32_core %R0<kill>
	GIE %CONFIG<imp-use,kill>
	%LR<def> = LDRi64 %SP, 48; flags: FrameSetup
	%SP<def> = ADDri_r32 %SP, 48, %STATUS<imp-def>
	JR32 %LR

# End machine code for function matmac.

# *** IR Dump After Analyze Machine Code For Garbage Collection ***:
# Machine code for function matmac: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=32, align=8, at location [SP-40]
  fi#1: size=4, align=4, at location [SP-44]
  fi#2: size=4, align=4, at location [SP-4]
  fi#3: size=4, align=8, at location [SP-8]
Function Live Ins: %R0, %R1, %R2, %R3

BB#0: 
    Live Ins: %R0 %R1 %R2 %R3
	%SP<def,tied2> = STRi64_pmd %LR, %SP<tied0>, -48; flags: FrameSetup
	%FP<def> = ADDri_r32 %SP, 48, %STATUS<imp-def>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	%IP<def> = MOVi32ri 65535
	GID %CONFIG<imp-def>
	%R19<def> = MOVFS32_core %CONFIG, %D9<imp-def>
	%IP<def,tied1> = MOVTi32ri %IP<tied0>, 65521
	STRi32_r32 %R19, %FP, -44; mem:ST4[FixedStack1]
	%R18<def> = ANDrr_r32 %R19<kill>, %IP<kill>, %STATUS<imp-def>, %D9<imp-use,kill>, %D9<imp-def>
	%R19<def,tied1> = MOVTi32ri %R19<kill,tied0>, 72, %D9<imp-use,kill>, %D9<imp-def>
	STRi64 %D9<kill>, %FP, -8; mem:ST4[FixedStack3] ST4[FixedStack2]
	GIE %CONFIG<imp-use,kill>
    Successors according to CFG: BB#1(?%)

BB#1: derived from LLVM BB %entry
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#0
	%IP<def,dead> = CMPri_r32 %R3, 1, %STATUS<imp-def>
	BCC <BB#12>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#2(0x50000000 / 0x80000000 = 62.50%) BB#12(0x30000000 / 0x80000000 = 37.50%)

BB#2: derived from LLVM BB %for.body3.lr.ph.preheader
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#1
	%R16<def> = MOViPTR %FP, -40
	%R19<def> = MOVi32ri 0, %D9<imp-def>
	%IP<def> = LSL32ri %R3, 2, %STATUS<imp-def,dead>
	%R1<def> = ADDri_r32 %R1<kill>, 8, %STATUS<imp-def,dead>
	%R17<def> = ADDri_r32 %R16, 8, %STATUS<imp-def,dead>
	%R20<def> = MOVi32rr %R19
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %for.body3.lr.ph
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20
    Predecessors according to CFG: BB#2 BB#11
	%R21<def> = LDRi32_r32 %FP, -8; mem:LD4[FixedStack3]
	GID %CONFIG<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %R21<kill>
	GIE %CONFIG<imp-def,dead>
	%R21<def> = IMULrr_r32 %R20, %R3, %STATUS<imp-def,dead>
	%R22<def> = MOVi32rr %R2
	%R21<def> = LSL32ri %R21<kill>, 2, %STATUS<imp-def,dead>
	%R23<def> = MOVi32rr %R1
	%R24<def> = MOVi32rr %R19
	%R21<def> = ADDrr_r32 %R0, %R21<kill>, %STATUS<imp-def,dead>
    Successors according to CFG: BB#4(?%)

BB#4: derived from LLVM BB %for.body9.preheader
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#3 BB#10
	%R18<def> = MOVi32rr %R19<kill>, %D9<imp-use,kill>, %D9<imp-def>
	STRi64 %D9, %FP, -16; mem:ST8[%1+24]
	STRi64 %D9, %FP, -24; mem:ST8[%1+16]
	STRi64 %D9, %FP, -32; mem:ST8[%1+8]
	STRi64 %D9, %FP, -40; mem:ST8[%1]
	%R25<def> = MOVi32rr %R23
	%R26<def> = MOVi32rr %R19
    Successors according to CFG: BB#5(?%)

BB#5: derived from LLVM BB %for.body9
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#4 BB#7
	%R27<def> = LSL32ri %R26, 2, %STATUS<imp-def,dead>
	%R27<def> = ADDrr_r32 %R21, %R27<kill>, %STATUS<imp-def,dead>
	%R27<def> = LDRf32 %R27<kill>, 0; mem:Volatile LD4[%add.ptr10](tbaa=!2)
	%R32<def> = MOVi32rr %R17
	%R34<def> = MOVi32rr %R25
	%R33<def> = MOVi32rr %R19
    Successors according to CFG: BB#6(?%)

BB#6: derived from LLVM BB %for.body13
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26 %R27 %R32 %R33 %R34
    Predecessors according to CFG: BB#5 BB#6
	%R37<def> = LDRf32 %R34, -8; mem:Volatile LD4[%scevgep8](tbaa=!2)
	%R38<def> = LDRf32 %R34, -4; mem:Volatile LD4[%scevgep9](tbaa=!2)
	%R39<def> = LDRf32 %R34, 0; mem:Volatile LD4[%lsr.iv5](tbaa=!2)
	%R40<def> = LDRf32 %R34, 4; mem:Volatile LD4[%scevgep7](tbaa=!2)
	%D21<def> = LDRf64 %R32, -8; mem:LD4[%scevgep17](tbaa=!2) LD4[%scevgep15](tbaa=!2)
	%R36<def> = ADDri_r32 %R34<kill>, 16, %STATUS<imp-def,dead>
	%R34<def> = LDRi32_r32 %FP, -4; mem:LD4[FixedStack2]
	GID %CONFIG<imp-def,dead>
	%R35<def> = ADDri_r32 %R32, 16, %STATUS<imp-def,dead>
	%R33<def> = ADDri_r32 %R33<kill>, 4, %STATUS<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %R34<kill>
	GIE %CONFIG<imp-def,dead>
	%R43<def,tied1> = FMADDrr_r32 %R43<kill,tied0>, %R27, %R37<kill>, %STATUS<imp-def,dead>, %D21<imp-use,kill>, %D21<imp-def>
	%R42<def,tied1> = FMADDrr_r32 %R42<kill,tied0>, %R27, %R38<kill>, %STATUS<imp-def,dead>, %D21<imp-use,kill>, %D21<imp-def>
	%R44<def> = MOVi32rr %R43, %D22<imp-def>
	%R45<def> = MOVi32rr %R42<kill>, %D21<imp-use,kill>, %D22<imp-use,kill>, %D22<imp-def>
	STRf64 %D22<kill>, %R32, -8; mem:ST4[%scevgep17](tbaa=!2) ST4[%scevgep15](tbaa=!2)
	%R34<def> = LDRf32 %R32, 0; mem:LD4[%lsr.iv1214](tbaa=!2)
	%R34<def,tied1> = FMADDrr_r32 %R34<tied0>, %R27, %R39<kill>, %STATUS<imp-def,dead>
	STRf32 %R34<kill>, %R32, 0; mem:ST4[%lsr.iv1214](tbaa=!2)
	%R63<def> = LDRf32 %R32, 4; mem:LD4[%scevgep16](tbaa=!2)
	%R63<def,tied1> = FMADDrr_r32 %R63<tied0>, %R27, %R40<kill>, %STATUS<imp-def,dead>
	%R34<def,dead> = CMPri_r32 %R33, 8, %STATUS<imp-def>
	STRf32 %R63<kill>, %R32<kill>, 4; mem:ST4[%scevgep16](tbaa=!2)
	%R32<def> = MOVi32rr %R35<kill>
	%R34<def> = MOVi32rr %R36<kill>
	BCC <BB#6>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#6(0x7c000000 / 0x80000000 = 96.88%) BB#7(0x04000000 / 0x80000000 = 3.12%)

BB#7: derived from LLVM BB %for.end60
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#6
	%R26<def> = ADDri_r32 %R26<kill>, 1, %STATUS<imp-def,dead>
	%R25<def> = ADDrr_r32 %R25<kill>, %IP, %STATUS<imp-def,dead>
	%R27<def,dead> = CMPrr_r32 %R26, %R3, %STATUS<imp-def>
	BCC <BB#5>, 1, %STATUS<imp-use>
    Successors according to CFG: BB#8(0x04000000 / 0x80000000 = 3.12%) BB#5(0x7c000000 / 0x80000000 = 96.88%)

BB#8: derived from LLVM BB %for.cond64.preheader
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#7
	%R25<def> = MOVi32rr %R22
	%R26<def> = MOVi32rr %R19
    Successors according to CFG: BB#9(?%)

BB#9: derived from LLVM BB %for.body66
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#8 BB#9
	%R27<def> = ADDrr_r32 %R16, %R26, %STATUS<imp-def,dead>
	%R26<def> = ADDri_r32 %R26<kill>, 4, %STATUS<imp-def,dead>
	%R33<def> = LDRf32 %R27<kill>, 0; mem:LD4[%sunkaddr30](tbaa=!2)
	%R34<def> = LDRf32 %R25, 0; mem:Volatile LD4[%lsr.iv24](tbaa=!2)
	%R32<def> = LDRi32_r32 %FP, -4; mem:LD4[FixedStack2]
	GID %CONFIG<imp-def,dead>
	%R27<def> = ADDri_r32 %R25, 4, %STATUS<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %R32<kill>
	GIE %CONFIG<imp-def,dead>
	%R33<def> = FADDrr_r32 %R33<kill>, %R34<kill>, %STATUS<imp-def,dead>
	%R32<def,dead> = CMPri_r32 %R26, 32, %STATUS<imp-def>
	STRf32 %R33<kill>, %R25<kill>, 0; mem:Volatile ST4[%lsr.iv24](tbaa=!2)
	%R25<def> = MOVi32rr %R27<kill>
	BCC <BB#9>, 1, %STATUS<imp-use>
    Successors according to CFG: BB#10(0x04000000 / 0x80000000 = 3.12%) BB#9(0x7c000000 / 0x80000000 = 96.88%)

BB#10: derived from LLVM BB %for.end75
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#9
	%R24<def> = ADDri_r32 %R24<kill>, 8, %STATUS<imp-def,dead>
	%R22<def> = ADDri_r32 %R22<kill>, 32, %STATUS<imp-def,dead>
	%R23<def> = ADDri_r32 %R23<kill>, 32, %STATUS<imp-def,dead>
	%R25<def,dead> = CMPrr_r32 %R24, %R3, %STATUS<imp-def>
	BCC <BB#4>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#4(0x7c000000 / 0x80000000 = 96.88%) BB#11(0x04000000 / 0x80000000 = 3.12%)

BB#11: derived from LLVM BB %for.end78
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20
    Predecessors according to CFG: BB#10
	%R20<def> = ADDri_r32 %R20<kill>, 1, %STATUS<imp-def,dead>
	%R2<def> = ADDrr_r32 %R2<kill>, %IP, %STATUS<imp-def,dead>
	%R21<def,dead> = CMPrr_r32 %R20, %R3, %STATUS<imp-def>
	BCC <BB#3>, 1, %STATUS<imp-use>
    Successors according to CFG: BB#12(0x04000000 / 0x80000000 = 3.12%) BB#3(0x7c000000 / 0x80000000 = 96.88%)

BB#12: derived from LLVM BB %for.end81
    Predecessors according to CFG: BB#1 BB#11
	%R0<def> = LDRi32_r32 %FP, -44; mem:LD4[FixedStack1]
	GID
	%CONFIG<def> = MOVTS32_core %R0<kill>
	GIE %CONFIG<imp-use,kill>
	%LR<def> = LDRi64 %SP, 48; flags: FrameSetup
	%SP<def> = ADDri_r32 %SP, 48, %STATUS<imp-def>
	JR32 %LR

# End machine code for function matmac.


block-frequency: matmac
=======================
reverse-post-order-traversal
 - 0: BB0
 - 1: BB1[entry]
 - 2: BB2[for.body3.lr.ph.preheader]
 - 3: BB3[for.body3.lr.ph]
 - 4: BB4[for.body9.preheader]
 - 5: BB5[for.body9]
 - 6: BB6[for.body13]
 - 7: BB7[for.end60]
 - 8: BB8[for.cond64.preheader]
 - 9: BB9[for.body66]
 - 10: BB10[for.end75]
 - 11: BB11[for.end78]
 - 12: BB12[for.end81]
loop-detection
 - loop = BB3[for.body3.lr.ph]
 - loop = BB4[for.body9.preheader]
 - loop = BB5[for.body9]
 - loop = BB9[for.body66]
 - loop = BB6[for.body13]
 - loop = BB5[for.body9]: member = BB7[for.end60]
 - loop = BB4[for.body9.preheader]: member = BB8[for.cond64.preheader]
 - loop = BB4[for.body9.preheader]: member = BB10[for.end75]
 - loop = BB3[for.body3.lr.ph]: member = BB11[for.end78]
compute-mass-in-loop: BB6[for.body13]*
 - node: BB6[for.body13]
  => [backedge] weight = 2080374784
  => [  exit  ] weight = 67108864, succ = BB7[for.end60]
  => mass:  ffffffffffffffff
  => assign f7ffffffffffffff (0800000000000000) [back] to BB6[for.body13]
  => assign 0800000000000000 (0000000000000000) [exit] to BB7[for.end60]
compute-loop-scale: BB6[for.body13]*
 - exit-mass = 0800000000000000 (ffffffffffffffff - f7ffffffffffffff)
 - scale = 32.0
packaging-loop: BB6[for.body13]*
 - node: BB6[for.body13]
compute-mass-in-loop: BB9[for.body66]*
 - node: BB9[for.body66]
  => [  exit  ] weight = 67108864, succ = BB10[for.end75]
  => [backedge] weight = 2080374784
  => mass:  ffffffffffffffff
  => assign f7ffffffffffffff (0800000000000000) [back] to BB9[for.body66]
  => assign 0800000000000000 (0000000000000000) [exit] to BB10[for.end75]
compute-loop-scale: BB9[for.body66]*
 - exit-mass = 0800000000000000 (ffffffffffffffff - f7ffffffffffffff)
 - scale = 32.0
packaging-loop: BB9[for.body66]*
 - node: BB9[for.body66]
compute-mass-in-loop: BB5[for.body9]*
 - node: BB5[for.body9]
  => [ local  ] weight = 2147483648, succ = BB6[for.body13]
  => mass:  ffffffffffffffff
  => assign ffffffffffffffff (0000000000000000) to BB6[for.body13]
 - node: BB6[for.body13]
  => [ local  ] weight = 576460752303423488, succ = BB7[for.end60]
  => mass:  ffffffffffffffff
  => assign ffffffffffffffff (0000000000000000) to BB7[for.end60]
 - node: BB7[for.end60]
  => [  exit  ] weight = 67108864, succ = BB8[for.cond64.preheader]
  => [backedge] weight = 2080374784
  => mass:  ffffffffffffffff
  => assign f7ffffffffffffff (0800000000000000) [back] to BB5[for.body9]
  => assign 0800000000000000 (0000000000000000) [exit] to BB8[for.cond64.preheader]
compute-loop-scale: BB5[for.body9]*
 - exit-mass = 0800000000000000 (ffffffffffffffff - f7ffffffffffffff)
 - scale = 32.0
packaging-loop: BB5[for.body9]*
 - node: BB5[for.body9]
 - node: BB6[for.body13]
 - node: BB7[for.end60]
compute-mass-in-loop: BB4[for.body9.preheader]*
 - node: BB4[for.body9.preheader]
  => [ local  ] weight = 2147483648, succ = BB5[for.body9]
  => mass:  ffffffffffffffff
  => assign ffffffffffffffff (0000000000000000) to BB5[for.body9]
 - node: BB5[for.body9]
  => [ local  ] weight = 576460752303423488, succ = BB8[for.cond64.preheader]
  => mass:  ffffffffffffffff
  => assign ffffffffffffffff (0000000000000000) to BB8[for.cond64.preheader]
 - node: BB8[for.cond64.preheader]
  => [ local  ] weight = 2147483648, succ = BB9[for.body66]
  => mass:  ffffffffffffffff
  => assign ffffffffffffffff (0000000000000000) to BB9[for.body66]
 - node: BB9[for.body66]
  => [ local  ] weight = 576460752303423488, succ = BB10[for.end75]
  => mass:  ffffffffffffffff
  => assign ffffffffffffffff (0000000000000000) to BB10[for.end75]
 - node: BB10[for.end75]
  => [backedge] weight = 2080374784
  => [  exit  ] weight = 67108864, succ = BB11[for.end78]
  => mass:  ffffffffffffffff
  => assign f7ffffffffffffff (0800000000000000) [back] to BB4[for.body9.preheader]
  => assign 0800000000000000 (0000000000000000) [exit] to BB11[for.end78]
compute-loop-scale: BB4[for.body9.preheader]*
 - exit-mass = 0800000000000000 (ffffffffffffffff - f7ffffffffffffff)
 - scale = 32.0
packaging-loop: BB4[for.body9.preheader]*
 - node: BB4[for.body9.preheader]
 - node: BB5[for.body9]
 - node: BB8[for.cond64.preheader]
 - node: BB9[for.body66]
 - node: BB10[for.end75]
compute-mass-in-loop: BB3[for.body3.lr.ph]*
 - node: BB3[for.body3.lr.ph]
  => [ local  ] weight = 2147483648, succ = BB4[for.body9.preheader]
  => mass:  ffffffffffffffff
  => assign ffffffffffffffff (0000000000000000) to BB4[for.body9.preheader]
 - node: BB4[for.body9.preheader]
  => [ local  ] weight = 576460752303423488, succ = BB11[for.end78]
  => mass:  ffffffffffffffff
  => assign ffffffffffffffff (0000000000000000) to BB11[for.end78]
 - node: BB11[for.end78]
  => [  exit  ] weight = 67108864, succ = BB12[for.end81]
  => [backedge] weight = 2080374784
  => mass:  ffffffffffffffff
  => assign f7ffffffffffffff (0800000000000000) [back] to BB3[for.body3.lr.ph]
  => assign 0800000000000000 (0000000000000000) [exit] to BB12[for.end81]
compute-loop-scale: BB3[for.body3.lr.ph]*
 - exit-mass = 0800000000000000 (ffffffffffffffff - f7ffffffffffffff)
 - scale = 32.0
packaging-loop: BB3[for.body3.lr.ph]*
 - node: BB3[for.body3.lr.ph]
 - node: BB4[for.body9.preheader]
 - node: BB11[for.end78]
compute-mass-in-function
 - node: BB0
  => [ local  ] weight = 2147483648, succ = BB1[entry]
  => mass:  ffffffffffffffff
  => assign ffffffffffffffff (0000000000000000) to BB1[entry]
 - node: BB1[entry]
  => [ local  ] weight = 1342177280, succ = BB2[for.body3.lr.ph.preheader]
  => [ local  ] weight = 805306368, succ = BB12[for.end81]
  => mass:  ffffffffffffffff
  => assign 9fffffffffffffff (6000000000000000) to BB2[for.body3.lr.ph.preheader]
  => assign 6000000000000000 (0000000000000000) to BB12[for.end81]
 - node: BB2[for.body3.lr.ph.preheader]
  => [ local  ] weight = 2147483648, succ = BB3[for.body3.lr.ph]
  => mass:  9fffffffffffffff
  => assign 9fffffffffffffff (0000000000000000) to BB3[for.body3.lr.ph]
 - node: BB3[for.body3.lr.ph]
  => [ local  ] weight = 576460752303423488, succ = BB12[for.end81]
  => mass:  9fffffffffffffff
  => assign 9fffffffffffffff (0000000000000000) to BB12[for.end81]
 - node: BB12[for.end81]
  => mass:  ffffffffffffffff
unwrap-loop-package: BB3[for.body3.lr.ph]*: mass = 9fffffffffffffff, scale = 32.0
  => combined-scale = 20.0
 - BB3[for.body3.lr.ph]: 1.0 => 20.0
 - BB4[for.body9.preheader]: 32.0 => 640.0
 - BB11[for.end78]: 1.0 => 20.0
unwrap-loop-package: BB4[for.body9.preheader]*: mass = ffffffffffffffff, scale = 640.0
  => combined-scale = 640.0
 - BB4[for.body9.preheader]: 1.0 => 640.0
 - BB5[for.body9]: 32.0 => 20480.0
 - BB8[for.cond64.preheader]: 1.0 => 640.0
 - BB9[for.body66]: 32.0 => 20480.0
 - BB10[for.end75]: 1.0 => 640.0
unwrap-loop-package: BB5[for.body9]*: mass = ffffffffffffffff, scale = 20480.0
  => combined-scale = 20480.0
 - BB5[for.body9]: 1.0 => 20480.0
 - BB6[for.body13]: 32.0 => 655360.0
 - BB7[for.end60]: 1.0 => 20480.0
unwrap-loop-package: BB9[for.body66]*: mass = ffffffffffffffff, scale = 20480.0
  => combined-scale = 20480.0
 - BB9[for.body66]: 1.0 => 20480.0
unwrap-loop-package: BB6[for.body13]*: mass = ffffffffffffffff, scale = 655360.0
  => combined-scale = 655360.0
 - BB6[for.body13]: 1.0 => 655360.0
float-to-int: min = 0.625, max = 655360.0, factor = 12.8
 - BB0: float = 1.0, scaled = 12.8, int = 12
 - BB1[entry]: float = 1.0, scaled = 12.8, int = 12
 - BB2[for.body3.lr.ph.preheader]: float = 0.625, scaled = 8.0, int = 8
 - BB3[for.body3.lr.ph]: float = 20.0, scaled = 256.0, int = 255
 - BB4[for.body9.preheader]: float = 640.0, scaled = 8192.0, int = 8191
 - BB5[for.body9]: float = 20480.0, scaled = 262144.0, int = 262143
 - BB6[for.body13]: float = 655360.0, scaled = 8388608.0, int = 8388607
 - BB7[for.end60]: float = 20480.0, scaled = 262144.0, int = 262143
 - BB8[for.cond64.preheader]: float = 640.0, scaled = 8192.0, int = 8191
 - BB9[for.body66]: float = 20480.0, scaled = 262144.0, int = 262143
 - BB10[for.end75]: float = 640.0, scaled = 8192.0, int = 8191
 - BB11[for.end78]: float = 20.0, scaled = 256.0, int = 255
 - BB12[for.end81]: float = 1.0, scaled = 12.8, int = 12
block-frequency-info: matmac
 - BB0: float = 1.0, int = 12
 - BB1[entry]: float = 1.0, int = 12
 - BB2[for.body3.lr.ph.preheader]: float = 0.625, int = 8
 - BB3[for.body3.lr.ph]: float = 20.0, int = 255
 - BB4[for.body9.preheader]: float = 640.0, int = 8191
 - BB5[for.body9]: float = 20480.0, int = 262143
 - BB6[for.body13]: float = 655360.0, int = 8388607
 - BB7[for.end60]: float = 20480.0, int = 262143
 - BB8[for.cond64.preheader]: float = 640.0, int = 8191
 - BB9[for.body66]: float = 20480.0, int = 262143
 - BB10[for.end75]: float = 640.0, int = 8191
 - BB11[for.end78]: float = 20.0, int = 255
 - BB12[for.end81]: float = 1.0, int = 12

# *** IR Dump Before Branch Probability Basic Block Placement ***:
# Machine code for function matmac: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=32, align=8, at location [SP-40]
  fi#1: size=4, align=4, at location [SP-44]
  fi#2: size=4, align=4, at location [SP-4]
  fi#3: size=4, align=8, at location [SP-8]
Function Live Ins: %R0, %R1, %R2, %R3

BB#0: 
    Live Ins: %R0 %R1 %R2 %R3
	%SP<def,tied2> = STRi64_pmd %LR, %SP<tied0>, -48; flags: FrameSetup
	%FP<def> = ADDri_r32 %SP, 48, %STATUS<imp-def>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	%IP<def> = MOVi32ri 65535
	GID %CONFIG<imp-def>
	%R19<def> = MOVFS32_core %CONFIG, %D9<imp-def>
	%IP<def,tied1> = MOVTi32ri %IP<tied0>, 65521
	STRi32_r32 %R19, %FP, -44; mem:ST4[FixedStack1]
	%R18<def> = ANDrr_r32 %R19<kill>, %IP<kill>, %STATUS<imp-def>, %D9<imp-use,kill>, %D9<imp-def>
	%R19<def,tied1> = MOVTi32ri %R19<kill,tied0>, 72, %D9<imp-use,kill>, %D9<imp-def>
	STRi64 %D9<kill>, %FP, -8; mem:ST4[FixedStack3] ST4[FixedStack2]
	GIE %CONFIG<imp-use,kill>
    Successors according to CFG: BB#1(?%)

BB#1: derived from LLVM BB %entry
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#0
	%IP<def,dead> = CMPri_r32 %R3, 1, %STATUS<imp-def>
	BCC <BB#12>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#2(0x50000000 / 0x80000000 = 62.50%) BB#12(0x30000000 / 0x80000000 = 37.50%)

BB#2: derived from LLVM BB %for.body3.lr.ph.preheader
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#1
	%R16<def> = MOViPTR %FP, -40
	%R19<def> = MOVi32ri 0, %D9<imp-def>
	%IP<def> = LSL32ri %R3, 2, %STATUS<imp-def,dead>
	%R1<def> = ADDri_r32 %R1<kill>, 8, %STATUS<imp-def,dead>
	%R17<def> = ADDri_r32 %R16, 8, %STATUS<imp-def,dead>
	%R20<def> = MOVi32rr %R19
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %for.body3.lr.ph
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20
    Predecessors according to CFG: BB#2 BB#11
	%R21<def> = LDRi32_r32 %FP, -8; mem:LD4[FixedStack3]
	GID %CONFIG<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %R21<kill>
	GIE %CONFIG<imp-def,dead>
	%R21<def> = IMULrr_r32 %R20, %R3, %STATUS<imp-def,dead>
	%R22<def> = MOVi32rr %R2
	%R21<def> = LSL32ri %R21<kill>, 2, %STATUS<imp-def,dead>
	%R23<def> = MOVi32rr %R1
	%R24<def> = MOVi32rr %R19
	%R21<def> = ADDrr_r32 %R0, %R21<kill>, %STATUS<imp-def,dead>
    Successors according to CFG: BB#4(?%)

BB#4: derived from LLVM BB %for.body9.preheader
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#3 BB#10
	%R18<def> = MOVi32rr %R19<kill>, %D9<imp-use,kill>, %D9<imp-def>
	STRi64 %D9, %FP, -16; mem:ST8[%1+24]
	STRi64 %D9, %FP, -24; mem:ST8[%1+16]
	STRi64 %D9, %FP, -32; mem:ST8[%1+8]
	STRi64 %D9, %FP, -40; mem:ST8[%1]
	%R25<def> = MOVi32rr %R23
	%R26<def> = MOVi32rr %R19
    Successors according to CFG: BB#5(?%)

BB#5: derived from LLVM BB %for.body9
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#4 BB#7
	%R27<def> = LSL32ri %R26, 2, %STATUS<imp-def,dead>
	%R27<def> = ADDrr_r32 %R21, %R27<kill>, %STATUS<imp-def,dead>
	%R27<def> = LDRf32 %R27<kill>, 0; mem:Volatile LD4[%add.ptr10](tbaa=!2)
	%R32<def> = MOVi32rr %R17
	%R34<def> = MOVi32rr %R25
	%R33<def> = MOVi32rr %R19
    Successors according to CFG: BB#6(?%)

BB#6: derived from LLVM BB %for.body13
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26 %R27 %R32 %R33 %R34
    Predecessors according to CFG: BB#5 BB#6
	%R37<def> = LDRf32 %R34, -8; mem:Volatile LD4[%scevgep8](tbaa=!2)
	%R38<def> = LDRf32 %R34, -4; mem:Volatile LD4[%scevgep9](tbaa=!2)
	%R39<def> = LDRf32 %R34, 0; mem:Volatile LD4[%lsr.iv5](tbaa=!2)
	%R40<def> = LDRf32 %R34, 4; mem:Volatile LD4[%scevgep7](tbaa=!2)
	%D21<def> = LDRf64 %R32, -8; mem:LD4[%scevgep17](tbaa=!2) LD4[%scevgep15](tbaa=!2)
	%R36<def> = ADDri_r32 %R34<kill>, 16, %STATUS<imp-def,dead>
	%R34<def> = LDRi32_r32 %FP, -4; mem:LD4[FixedStack2]
	GID %CONFIG<imp-def,dead>
	%R35<def> = ADDri_r32 %R32, 16, %STATUS<imp-def,dead>
	%R33<def> = ADDri_r32 %R33<kill>, 4, %STATUS<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %R34<kill>
	GIE %CONFIG<imp-def,dead>
	%R43<def,tied1> = FMADDrr_r32 %R43<kill,tied0>, %R27, %R37<kill>, %STATUS<imp-def,dead>, %D21<imp-use,kill>, %D21<imp-def>
	%R42<def,tied1> = FMADDrr_r32 %R42<kill,tied0>, %R27, %R38<kill>, %STATUS<imp-def,dead>, %D21<imp-use,kill>, %D21<imp-def>
	%R44<def> = MOVi32rr %R43, %D22<imp-def>
	%R45<def> = MOVi32rr %R42<kill>, %D21<imp-use,kill>, %D22<imp-use,kill>, %D22<imp-def>
	STRf64 %D22<kill>, %R32, -8; mem:ST4[%scevgep17](tbaa=!2) ST4[%scevgep15](tbaa=!2)
	%R34<def> = LDRf32 %R32, 0; mem:LD4[%lsr.iv1214](tbaa=!2)
	%R34<def,tied1> = FMADDrr_r32 %R34<tied0>, %R27, %R39<kill>, %STATUS<imp-def,dead>
	STRf32 %R34<kill>, %R32, 0; mem:ST4[%lsr.iv1214](tbaa=!2)
	%R63<def> = LDRf32 %R32, 4; mem:LD4[%scevgep16](tbaa=!2)
	%R63<def,tied1> = FMADDrr_r32 %R63<tied0>, %R27, %R40<kill>, %STATUS<imp-def,dead>
	%R34<def,dead> = CMPri_r32 %R33, 8, %STATUS<imp-def>
	STRf32 %R63<kill>, %R32<kill>, 4; mem:ST4[%scevgep16](tbaa=!2)
	%R32<def> = MOVi32rr %R35<kill>
	%R34<def> = MOVi32rr %R36<kill>
	BCC <BB#6>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#6(0x7c000000 / 0x80000000 = 96.88%) BB#7(0x04000000 / 0x80000000 = 3.12%)

BB#7: derived from LLVM BB %for.end60
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#6
	%R26<def> = ADDri_r32 %R26<kill>, 1, %STATUS<imp-def,dead>
	%R25<def> = ADDrr_r32 %R25<kill>, %IP, %STATUS<imp-def,dead>
	%R27<def,dead> = CMPrr_r32 %R26, %R3, %STATUS<imp-def>
	BCC <BB#5>, 1, %STATUS<imp-use>
    Successors according to CFG: BB#8(0x04000000 / 0x80000000 = 3.12%) BB#5(0x7c000000 / 0x80000000 = 96.88%)

BB#8: derived from LLVM BB %for.cond64.preheader
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#7
	%R25<def> = MOVi32rr %R22
	%R26<def> = MOVi32rr %R19
    Successors according to CFG: BB#9(?%)

BB#9: derived from LLVM BB %for.body66
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#8 BB#9
	%R27<def> = ADDrr_r32 %R16, %R26, %STATUS<imp-def,dead>
	%R26<def> = ADDri_r32 %R26<kill>, 4, %STATUS<imp-def,dead>
	%R33<def> = LDRf32 %R27<kill>, 0; mem:LD4[%sunkaddr30](tbaa=!2)
	%R34<def> = LDRf32 %R25, 0; mem:Volatile LD4[%lsr.iv24](tbaa=!2)
	%R32<def> = LDRi32_r32 %FP, -4; mem:LD4[FixedStack2]
	GID %CONFIG<imp-def,dead>
	%R27<def> = ADDri_r32 %R25, 4, %STATUS<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %R32<kill>
	GIE %CONFIG<imp-def,dead>
	%R33<def> = FADDrr_r32 %R33<kill>, %R34<kill>, %STATUS<imp-def,dead>
	%R32<def,dead> = CMPri_r32 %R26, 32, %STATUS<imp-def>
	STRf32 %R33<kill>, %R25<kill>, 0; mem:Volatile ST4[%lsr.iv24](tbaa=!2)
	%R25<def> = MOVi32rr %R27<kill>
	BCC <BB#9>, 1, %STATUS<imp-use>
    Successors according to CFG: BB#10(0x04000000 / 0x80000000 = 3.12%) BB#9(0x7c000000 / 0x80000000 = 96.88%)

BB#10: derived from LLVM BB %for.end75
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#9
	%R24<def> = ADDri_r32 %R24<kill>, 8, %STATUS<imp-def,dead>
	%R22<def> = ADDri_r32 %R22<kill>, 32, %STATUS<imp-def,dead>
	%R23<def> = ADDri_r32 %R23<kill>, 32, %STATUS<imp-def,dead>
	%R25<def,dead> = CMPrr_r32 %R24, %R3, %STATUS<imp-def>
	BCC <BB#4>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#4(0x7c000000 / 0x80000000 = 96.88%) BB#11(0x04000000 / 0x80000000 = 3.12%)

BB#11: derived from LLVM BB %for.end78
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20
    Predecessors according to CFG: BB#10
	%R20<def> = ADDri_r32 %R20<kill>, 1, %STATUS<imp-def,dead>
	%R2<def> = ADDrr_r32 %R2<kill>, %IP, %STATUS<imp-def,dead>
	%R21<def,dead> = CMPrr_r32 %R20, %R3, %STATUS<imp-def>
	BCC <BB#3>, 1, %STATUS<imp-use>
    Successors according to CFG: BB#12(0x04000000 / 0x80000000 = 3.12%) BB#3(0x7c000000 / 0x80000000 = 96.88%)

BB#12: derived from LLVM BB %for.end81
    Predecessors according to CFG: BB#1 BB#11
	%R0<def> = LDRi32_r32 %FP, -44; mem:LD4[FixedStack1]
	GID
	%CONFIG<def> = MOVTS32_core %R0<kill>
	GIE %CONFIG<imp-use,kill>
	%LR<def> = LDRi64 %SP, 48; flags: FrameSetup
	%SP<def> = ADDri_r32 %SP, 48, %STATUS<imp-def>
	JR32 %LR

# End machine code for function matmac.


<----------------->
Analyzing block 0
BB#0: 
    Live Ins: %R0 %R1 %R2 %R3
	%SP<def,tied2> = STRi64_pmd %LR, %SP<tied0>, -48; flags: FrameSetup
	%FP<def> = ADDri_r32 %SP, 48, %STATUS<imp-def>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	%IP<def> = MOVi32ri 65535
	GID %CONFIG<imp-def>
	%R19<def> = MOVFS32_core %CONFIG, %D9<imp-def>
	%IP<def,tied1> = MOVTi32ri %IP<tied0>, 65521
	STRi32_r32 %R19, %FP, -44; mem:ST4[FixedStack1]
	%R18<def> = ANDrr_r32 %R19<kill>, %IP<kill>, %STATUS<imp-def>, %D9<imp-use,kill>, %D9<imp-def>
	%R19<def,tied1> = MOVTi32ri %R19<kill,tied0>, 72, %D9<imp-use,kill>, %D9<imp-def>
	STRi64 %D9<kill>, %FP, -8; mem:ST4[FixedStack3] ST4[FixedStack2]
	GIE %CONFIG<imp-use,kill>
    Successors according to CFG: BB#1(?%)

<----------------->
Analyzing block 0
BB#0: 
    Live Ins: %R0 %R1 %R2 %R3
	%SP<def,tied2> = STRi64_pmd %LR, %SP<tied0>, -48; flags: FrameSetup
	%FP<def> = ADDri_r32 %SP, 48, %STATUS<imp-def>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	%IP<def> = MOVi32ri 65535
	GID %CONFIG<imp-def>
	%R19<def> = MOVFS32_core %CONFIG, %D9<imp-def>
	%IP<def,tied1> = MOVTi32ri %IP<tied0>, 65521
	STRi32_r32 %R19, %FP, -44; mem:ST4[FixedStack1]
	%R18<def> = ANDrr_r32 %R19<kill>, %IP<kill>, %STATUS<imp-def>, %D9<imp-use,kill>, %D9<imp-def>
	%R19<def,tied1> = MOVTi32ri %R19<kill,tied0>, 72, %D9<imp-use,kill>, %D9<imp-def>
	STRi64 %D9<kill>, %FP, -8; mem:ST4[FixedStack3] ST4[FixedStack2]
	GIE %CONFIG<imp-use,kill>
    Successors according to CFG: BB#1(?%)

<----------------->
Analyzing block 1
BB#1: derived from LLVM BB %entry
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#0
	%IP<def,dead> = CMPri_r32 %R3, 1, %STATUS<imp-def>
	BCC <BB#12>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#2(0x50000000 / 0x80000000 = 62.50%) BB#12(0x30000000 / 0x80000000 = 37.50%)

<----------------->
Analyzing block 2
BB#2: derived from LLVM BB %for.body3.lr.ph.preheader
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#1
	%R16<def> = MOViPTR %FP, -40
	%R19<def> = MOVi32ri 0, %D9<imp-def>
	%IP<def> = LSL32ri %R3, 2, %STATUS<imp-def,dead>
	%R1<def> = ADDri_r32 %R1<kill>, 8, %STATUS<imp-def,dead>
	%R17<def> = ADDri_r32 %R16, 8, %STATUS<imp-def,dead>
	%R20<def> = MOVi32rr %R19
    Successors according to CFG: BB#3(?%)

<----------------->
Analyzing block 3
BB#3: derived from LLVM BB %for.body3.lr.ph
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20
    Predecessors according to CFG: BB#2 BB#11
	%R21<def> = LDRi32_r32 %FP, -8; mem:LD4[FixedStack3]
	GID %CONFIG<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %R21<kill>
	GIE %CONFIG<imp-def,dead>
	%R21<def> = IMULrr_r32 %R20, %R3, %STATUS<imp-def,dead>
	%R22<def> = MOVi32rr %R2
	%R21<def> = LSL32ri %R21<kill>, 2, %STATUS<imp-def,dead>
	%R23<def> = MOVi32rr %R1
	%R24<def> = MOVi32rr %R19
	%R21<def> = ADDrr_r32 %R0, %R21<kill>, %STATUS<imp-def,dead>
    Successors according to CFG: BB#4(?%)

<----------------->
Analyzing block 4
BB#4: derived from LLVM BB %for.body9.preheader
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#3 BB#10
	%R18<def> = MOVi32rr %R19<kill>, %D9<imp-use,kill>, %D9<imp-def>
	STRi64 %D9, %FP, -16; mem:ST8[%1+24]
	STRi64 %D9, %FP, -24; mem:ST8[%1+16]
	STRi64 %D9, %FP, -32; mem:ST8[%1+8]
	STRi64 %D9, %FP, -40; mem:ST8[%1]
	%R25<def> = MOVi32rr %R23
	%R26<def> = MOVi32rr %R19
    Successors according to CFG: BB#5(?%)

<----------------->
Analyzing block 5
BB#5: derived from LLVM BB %for.body9
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#4 BB#7
	%R27<def> = LSL32ri %R26, 2, %STATUS<imp-def,dead>
	%R27<def> = ADDrr_r32 %R21, %R27<kill>, %STATUS<imp-def,dead>
	%R27<def> = LDRf32 %R27<kill>, 0; mem:Volatile LD4[%add.ptr10](tbaa=!2)
	%R32<def> = MOVi32rr %R17
	%R34<def> = MOVi32rr %R25
	%R33<def> = MOVi32rr %R19
    Successors according to CFG: BB#6(?%)

<----------------->
Analyzing block 6
BB#6: derived from LLVM BB %for.body13
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26 %R27 %R32 %R33 %R34
    Predecessors according to CFG: BB#5 BB#6
	%R37<def> = LDRf32 %R34, -8; mem:Volatile LD4[%scevgep8](tbaa=!2)
	%R38<def> = LDRf32 %R34, -4; mem:Volatile LD4[%scevgep9](tbaa=!2)
	%R39<def> = LDRf32 %R34, 0; mem:Volatile LD4[%lsr.iv5](tbaa=!2)
	%R40<def> = LDRf32 %R34, 4; mem:Volatile LD4[%scevgep7](tbaa=!2)
	%D21<def> = LDRf64 %R32, -8; mem:LD4[%scevgep17](tbaa=!2) LD4[%scevgep15](tbaa=!2)
	%R36<def> = ADDri_r32 %R34<kill>, 16, %STATUS<imp-def,dead>
	%R34<def> = LDRi32_r32 %FP, -4; mem:LD4[FixedStack2]
	GID %CONFIG<imp-def,dead>
	%R35<def> = ADDri_r32 %R32, 16, %STATUS<imp-def,dead>
	%R33<def> = ADDri_r32 %R33<kill>, 4, %STATUS<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %R34<kill>
	GIE %CONFIG<imp-def,dead>
	%R43<def,tied1> = FMADDrr_r32 %R43<kill,tied0>, %R27, %R37<kill>, %STATUS<imp-def,dead>, %D21<imp-use,kill>, %D21<imp-def>
	%R42<def,tied1> = FMADDrr_r32 %R42<kill,tied0>, %R27, %R38<kill>, %STATUS<imp-def,dead>, %D21<imp-use,kill>, %D21<imp-def>
	%R44<def> = MOVi32rr %R43, %D22<imp-def>
	%R45<def> = MOVi32rr %R42<kill>, %D21<imp-use,kill>, %D22<imp-use,kill>, %D22<imp-def>
	STRf64 %D22<kill>, %R32, -8; mem:ST4[%scevgep17](tbaa=!2) ST4[%scevgep15](tbaa=!2)
	%R34<def> = LDRf32 %R32, 0; mem:LD4[%lsr.iv1214](tbaa=!2)
	%R34<def,tied1> = FMADDrr_r32 %R34<tied0>, %R27, %R39<kill>, %STATUS<imp-def,dead>
	STRf32 %R34<kill>, %R32, 0; mem:ST4[%lsr.iv1214](tbaa=!2)
	%R63<def> = LDRf32 %R32, 4; mem:LD4[%scevgep16](tbaa=!2)
	%R63<def,tied1> = FMADDrr_r32 %R63<tied0>, %R27, %R40<kill>, %STATUS<imp-def,dead>
	%R34<def,dead> = CMPri_r32 %R33, 8, %STATUS<imp-def>
	STRf32 %R63<kill>, %R32<kill>, 4; mem:ST4[%scevgep16](tbaa=!2)
	%R32<def> = MOVi32rr %R35<kill>
	%R34<def> = MOVi32rr %R36<kill>
	BCC <BB#6>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#6(0x7c000000 / 0x80000000 = 96.88%) BB#7(0x04000000 / 0x80000000 = 3.12%)

<----------------->
Analyzing block 7
BB#7: derived from LLVM BB %for.end60
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#6
	%R26<def> = ADDri_r32 %R26<kill>, 1, %STATUS<imp-def,dead>
	%R25<def> = ADDrr_r32 %R25<kill>, %IP, %STATUS<imp-def,dead>
	%R27<def,dead> = CMPrr_r32 %R26, %R3, %STATUS<imp-def>
	BCC <BB#5>, 1, %STATUS<imp-use>
    Successors according to CFG: BB#8(0x04000000 / 0x80000000 = 3.12%) BB#5(0x7c000000 / 0x80000000 = 96.88%)

<----------------->
Analyzing block 8
BB#8: derived from LLVM BB %for.cond64.preheader
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#7
	%R25<def> = MOVi32rr %R22
	%R26<def> = MOVi32rr %R19
    Successors according to CFG: BB#9(?%)

<----------------->
Analyzing block 9
BB#9: derived from LLVM BB %for.body66
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#8 BB#9
	%R27<def> = ADDrr_r32 %R16, %R26, %STATUS<imp-def,dead>
	%R26<def> = ADDri_r32 %R26<kill>, 4, %STATUS<imp-def,dead>
	%R33<def> = LDRf32 %R27<kill>, 0; mem:LD4[%sunkaddr30](tbaa=!2)
	%R34<def> = LDRf32 %R25, 0; mem:Volatile LD4[%lsr.iv24](tbaa=!2)
	%R32<def> = LDRi32_r32 %FP, -4; mem:LD4[FixedStack2]
	GID %CONFIG<imp-def,dead>
	%R27<def> = ADDri_r32 %R25, 4, %STATUS<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %R32<kill>
	GIE %CONFIG<imp-def,dead>
	%R33<def> = FADDrr_r32 %R33<kill>, %R34<kill>, %STATUS<imp-def,dead>
	%R32<def,dead> = CMPri_r32 %R26, 32, %STATUS<imp-def>
	STRf32 %R33<kill>, %R25<kill>, 0; mem:Volatile ST4[%lsr.iv24](tbaa=!2)
	%R25<def> = MOVi32rr %R27<kill>
	BCC <BB#9>, 1, %STATUS<imp-use>
    Successors according to CFG: BB#10(0x04000000 / 0x80000000 = 3.12%) BB#9(0x7c000000 / 0x80000000 = 96.88%)

<----------------->
Analyzing block 10
BB#10: derived from LLVM BB %for.end75
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#9
	%R24<def> = ADDri_r32 %R24<kill>, 8, %STATUS<imp-def,dead>
	%R22<def> = ADDri_r32 %R22<kill>, 32, %STATUS<imp-def,dead>
	%R23<def> = ADDri_r32 %R23<kill>, 32, %STATUS<imp-def,dead>
	%R25<def,dead> = CMPrr_r32 %R24, %R3, %STATUS<imp-def>
	BCC <BB#4>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#4(0x7c000000 / 0x80000000 = 96.88%) BB#11(0x04000000 / 0x80000000 = 3.12%)

<----------------->
Analyzing block 11
BB#11: derived from LLVM BB %for.end78
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20
    Predecessors according to CFG: BB#10
	%R20<def> = ADDri_r32 %R20<kill>, 1, %STATUS<imp-def,dead>
	%R2<def> = ADDrr_r32 %R2<kill>, %IP, %STATUS<imp-def,dead>
	%R21<def,dead> = CMPrr_r32 %R20, %R3, %STATUS<imp-def>
	BCC <BB#3>, 1, %STATUS<imp-use>
    Successors according to CFG: BB#12(0x04000000 / 0x80000000 = 3.12%) BB#3(0x7c000000 / 0x80000000 = 96.88%)

<----------------->
Analyzing block 12
BB#12: derived from LLVM BB %for.end81
    Predecessors according to CFG: BB#1 BB#11
	%R0<def> = LDRi32_r32 %FP, -44; mem:LD4[FixedStack1]
	GID
	%CONFIG<def> = MOVTS32_core %R0<kill>
	GIE %CONFIG<imp-use,kill>
	%LR<def> = LDRi64 %SP, 48; flags: FrameSetup
	%SP<def> = ADDri_r32 %SP, 48, %STATUS<imp-def>
	JR32 %LR
Finding best loop exit for: BB#6 ('for.body13')
    exiting: BB#6 ('for.body13') -> BB#7 ('for.end60') [L:3] (21845.25)
    No other candidate exit blocks, using loop header
Selecting best successor for: BB#6 ('for.body13')
Finished forming chain for header block BB#6 ('for.body13')
          ... BB#6 ('for.body13')
Finding best loop exit for: BB#5 ('for.body9')
    looping: BB#5 ('for.body9') -> BB#6 ('for.body13') (0x80000000 / 0x80000000 = 100.00%)
    looping: BB#6 ('for.body13') -> BB#7 ('for.end60') (0x04000000 / 0x80000000 = 3.12%)
    exiting: BB#7 ('for.end60') -> BB#8 ('for.cond64.preheader') [L:2] (682.5833333)
    looping: BB#7 ('for.end60') -> BB#5 ('for.body9') (0x7c000000 / 0x80000000 = 96.88%)
  Best exiting block: BB#7 ('for.end60')
Selecting best successor for: BB#5 ('for.body9')
    Candidate: BB#6 ('for.body13'), probability: 0x80000000 / 0x80000000 = 100.00%
    Setting it as best candidate
    Selected: BB#6 ('for.body13')
Redoing tail duplication for Succ#6
Merging from BB#5 ('for.body9') to BB#6 ('for.body13')
Selecting best successor for: BB#6 ('for.body13')
    Candidate: BB#7 ('for.end60'), probability: 0x80000000 / 0x80000000 = 100.00%
    Setting it as best candidate
    Selected: BB#7 ('for.end60')
Redoing tail duplication for Succ#7

<----------------->
Analyzing block 7
BB#7: derived from LLVM BB %for.end60
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#6
	%R26<def> = ADDri_r32 %R26<kill>, 1, %STATUS<imp-def,dead>
	%R25<def> = ADDrr_r32 %R25<kill>, %IP, %STATUS<imp-def,dead>
	%R27<def,dead> = CMPrr_r32 %R26, %R3, %STATUS<imp-def>
	BCC <BB#5>, 1, %STATUS<imp-use>
    Successors according to CFG: BB#8(0x04000000 / 0x80000000 = 3.12%) BB#5(0x7c000000 / 0x80000000 = 96.88%)
Merging from BB#6 ('for.body13') to BB#7 ('for.end60')
Selecting best successor for: BB#7 ('for.end60')
Finished forming chain for header block BB#5 ('for.body9')
          ... BB#5 ('for.body9')
          ... BB#6 ('for.body13')
          ... BB#7 ('for.end60')
Finding best loop exit for: BB#9 ('for.body66')
    exiting: BB#9 ('for.body66') -> BB#10 ('for.end75') [L:2] (682.5833333)
    No other candidate exit blocks, using loop header
Selecting best successor for: BB#9 ('for.body66')
Finished forming chain for header block BB#9 ('for.body66')
          ... BB#9 ('for.body66')
Finding best loop exit for: BB#4 ('for.body9.preheader')
    looping: BB#4 ('for.body9.preheader') -> BB#5 ('for.body9') (0x80000000 / 0x80000000 = 100.00%)
    looping: BB#7 ('for.end60') -> BB#8 ('for.cond64.preheader') (0x04000000 / 0x80000000 = 3.12%)
    exiting: BB#7 ('for.end60') -> BB#5 ('for.body9') (chain conflict)
    looping: BB#8 ('for.cond64.preheader') -> BB#9 ('for.body66') (0x80000000 / 0x80000000 = 100.00%)
    looping: BB#9 ('for.body66') -> BB#10 ('for.end75') (0x04000000 / 0x80000000 = 3.12%)
    looping: BB#10 ('for.end75') -> BB#4 ('for.body9.preheader') (0x7c000000 / 0x80000000 = 96.88%)
    exiting: BB#10 ('for.end75') -> BB#11 ('for.end78') [L:1] (21.25)
  Best exiting block: BB#10 ('for.end75')
Selecting best successor for: BB#4 ('for.body9.preheader')
    Candidate: BB#5 ('for.body9'), probability: 0x80000000 / 0x80000000 = 100.00%
    Setting it as best candidate
    Selected: BB#5 ('for.body9')
Redoing tail duplication for Succ#5
Merging from BB#4 ('for.body9.preheader') to BB#5 ('for.body9')
Selecting best successor for: BB#7 ('for.end60')
    Candidate: BB#8 ('for.cond64.preheader'), probability: 0x80000000 / 0x80000000 = 100.00%
    Setting it as best candidate
    Selected: BB#8 ('for.cond64.preheader')
Redoing tail duplication for Succ#8
Merging from BB#7 ('for.end60') to BB#8 ('for.cond64.preheader')
Selecting best successor for: BB#8 ('for.cond64.preheader')
    Candidate: BB#9 ('for.body66'), probability: 0x80000000 / 0x80000000 = 100.00%
    Setting it as best candidate
    Selected: BB#9 ('for.body66')
Redoing tail duplication for Succ#9
Merging from BB#8 ('for.cond64.preheader') to BB#9 ('for.body66')
Selecting best successor for: BB#9 ('for.body66')
    Candidate: BB#10 ('for.end75'), probability: 0x80000000 / 0x80000000 = 100.00%
    Setting it as best candidate
    Selected: BB#10 ('for.end75')
Redoing tail duplication for Succ#10

<----------------->
Analyzing block 10
BB#10: derived from LLVM BB %for.end75
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#9
	%R24<def> = ADDri_r32 %R24<kill>, 8, %STATUS<imp-def,dead>
	%R22<def> = ADDri_r32 %R22<kill>, 32, %STATUS<imp-def,dead>
	%R23<def> = ADDri_r32 %R23<kill>, 32, %STATUS<imp-def,dead>
	%R25<def,dead> = CMPrr_r32 %R24, %R3, %STATUS<imp-def>
	BCC <BB#4>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#4(0x7c000000 / 0x80000000 = 96.88%) BB#11(0x04000000 / 0x80000000 = 3.12%)
Merging from BB#9 ('for.body66') to BB#10 ('for.end75')
Selecting best successor for: BB#10 ('for.end75')
Finished forming chain for header block BB#4 ('for.body9.preheader')
          ... BB#4 ('for.body9.preheader')
          ... BB#5 ('for.body9')
          ... BB#6 ('for.body13')
          ... BB#7 ('for.end60')
          ... BB#8 ('for.cond64.preheader')
          ... BB#9 ('for.body66')
          ... BB#10 ('for.end75')
Finding best loop exit for: BB#3 ('for.body3.lr.ph')
    looping: BB#3 ('for.body3.lr.ph') -> BB#4 ('for.body9.preheader') (0x80000000 / 0x80000000 = 100.00%)
    exiting: BB#10 ('for.end75') -> BB#4 ('for.body9.preheader') (chain conflict)
    looping: BB#10 ('for.end75') -> BB#11 ('for.end78') (0x04000000 / 0x80000000 = 3.12%)
    exiting: BB#11 ('for.end78') -> BB#12 ('for.end81') [L:0] (0.5833333333)
    looping: BB#11 ('for.end78') -> BB#3 ('for.body3.lr.ph') (0x7c000000 / 0x80000000 = 96.88%)
  Best exiting block: BB#11 ('for.end78')
Selecting best successor for: BB#3 ('for.body3.lr.ph')
    Candidate: BB#4 ('for.body9.preheader'), probability: 0x80000000 / 0x80000000 = 100.00%
    Setting it as best candidate
    Selected: BB#4 ('for.body9.preheader')
Redoing tail duplication for Succ#4
Merging from BB#3 ('for.body3.lr.ph') to BB#4 ('for.body9.preheader')
Selecting best successor for: BB#10 ('for.end75')
    Candidate: BB#11 ('for.end78'), probability: 0x80000000 / 0x80000000 = 100.00%
    Setting it as best candidate
    Selected: BB#11 ('for.end78')
Redoing tail duplication for Succ#11

<----------------->
Analyzing block 11
BB#11: derived from LLVM BB %for.end78
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20
    Predecessors according to CFG: BB#10
	%R20<def> = ADDri_r32 %R20<kill>, 1, %STATUS<imp-def,dead>
	%R2<def> = ADDrr_r32 %R2<kill>, %IP, %STATUS<imp-def,dead>
	%R21<def,dead> = CMPrr_r32 %R20, %R3, %STATUS<imp-def>
	BCC <BB#3>, 1, %STATUS<imp-use>
    Successors according to CFG: BB#12(0x04000000 / 0x80000000 = 3.12%) BB#3(0x7c000000 / 0x80000000 = 96.88%)
Merging from BB#10 ('for.end75') to BB#11 ('for.end78')
Selecting best successor for: BB#11 ('for.end78')
Finished forming chain for header block BB#3 ('for.body3.lr.ph')
          ... BB#3 ('for.body3.lr.ph')
          ... BB#4 ('for.body9.preheader')
          ... BB#5 ('for.body9')
          ... BB#6 ('for.body13')
          ... BB#7 ('for.end60')
          ... BB#8 ('for.cond64.preheader')
          ... BB#9 ('for.body66')
          ... BB#10 ('for.end75')
          ... BB#11 ('for.end78')
Selecting best successor for: BB#0 ('(null)')
    Candidate: BB#1 ('entry'), probability: 0x80000000 / 0x80000000 = 100.00%
    Setting it as best candidate
    Selected: BB#1 ('entry')
Redoing tail duplication for Succ#1

<----------------->
Analyzing block 1
BB#1: derived from LLVM BB %entry
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#0
	%IP<def,dead> = CMPri_r32 %R3, 1, %STATUS<imp-def>
	BCC <BB#12>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#2(0x50000000 / 0x80000000 = 62.50%) BB#12(0x30000000 / 0x80000000 = 37.50%)
Merging from BB#0 ('(null)') to BB#1 ('entry')
Selecting best successor for: BB#1 ('entry')
    Candidate: BB#2 ('for.body3.lr.ph.preheader'), probability: 0x50000000 / 0x80000000 = 62.50%
    Setting it as best candidate
    Not a candidate: BB#12 ('for.end81') -> 0x30000000 / 0x80000000 = 37.50% (prob) (non-cold CFG conflict)
    Selected: BB#2 ('for.body3.lr.ph.preheader')
Redoing tail duplication for Succ#2
Merging from BB#1 ('entry') to BB#2 ('for.body3.lr.ph.preheader')
Selecting best successor for: BB#2 ('for.body3.lr.ph.preheader')
    Candidate: BB#3 ('for.body3.lr.ph'), probability: 0x80000000 / 0x80000000 = 100.00%
    Setting it as best candidate
    Selected: BB#3 ('for.body3.lr.ph')
Redoing tail duplication for Succ#3
Merging from BB#2 ('for.body3.lr.ph.preheader') to BB#3 ('for.body3.lr.ph')
Selecting best successor for: BB#11 ('for.end78')
    Candidate: BB#12 ('for.end81'), probability: 0x80000000 / 0x80000000 = 100.00%
    Setting it as best candidate
    Selected: BB#12 ('for.end81')
Redoing tail duplication for Succ#12

<----------------->
Analyzing block 12
BB#12: derived from LLVM BB %for.end81
    Predecessors according to CFG: BB#1 BB#11
	%R0<def> = LDRi32_r32 %FP, -44; mem:LD4[FixedStack1]
	GID
	%CONFIG<def> = MOVTS32_core %R0<kill>
	GIE %CONFIG<imp-use,kill>
	%LR<def> = LDRi64 %SP, 48; flags: FrameSetup
	%SP<def> = ADDri_r32 %SP, 48, %STATUS<imp-def>
	JR32 %LR
Merging from BB#11 ('for.end78') to BB#12 ('for.end81')
Selecting best successor for: BB#12 ('for.end81')
Finished forming chain for header block BB#0 ('(null)')
[MBP] Function: matmac
Placing chain BB#0 ('(null)')
          ... BB#1 ('entry')

<----------------->
Analyzing block 0
BB#0: 
    Live Ins: %R0 %R1 %R2 %R3
	%SP<def,tied2> = STRi64_pmd %LR, %SP<tied0>, -48; flags: FrameSetup
	%FP<def> = ADDri_r32 %SP, 48, %STATUS<imp-def>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	%IP<def> = MOVi32ri 65535
	GID %CONFIG<imp-def>
	%R19<def> = MOVFS32_core %CONFIG, %D9<imp-def>
	%IP<def,tied1> = MOVTi32ri %IP<tied0>, 65521
	STRi32_r32 %R19, %FP, -44; mem:ST4[FixedStack1]
	%R18<def> = ANDrr_r32 %R19<kill>, %IP<kill>, %STATUS<imp-def>, %D9<imp-use,kill>, %D9<imp-def>
	%R19<def,tied1> = MOVTi32ri %R19<kill,tied0>, 72, %D9<imp-use,kill>, %D9<imp-def>
	STRi64 %D9<kill>, %FP, -8; mem:ST4[FixedStack3] ST4[FixedStack2]
	GIE %CONFIG<imp-use,kill>
    Successors according to CFG: BB#1(?%)

<----------------->
Analyzing block 0
BB#0: 
    Live Ins: %R0 %R1 %R2 %R3
	%SP<def,tied2> = STRi64_pmd %LR, %SP<tied0>, -48; flags: FrameSetup
	%FP<def> = ADDri_r32 %SP, 48, %STATUS<imp-def>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	%IP<def> = MOVi32ri 65535
	GID %CONFIG<imp-def>
	%R19<def> = MOVFS32_core %CONFIG, %D9<imp-def>
	%IP<def,tied1> = MOVTi32ri %IP<tied0>, 65521
	STRi32_r32 %R19, %FP, -44; mem:ST4[FixedStack1]
	%R18<def> = ANDrr_r32 %R19<kill>, %IP<kill>, %STATUS<imp-def>, %D9<imp-use,kill>, %D9<imp-def>
	%R19<def,tied1> = MOVTi32ri %R19<kill,tied0>, 72, %D9<imp-use,kill>, %D9<imp-def>
	STRi64 %D9<kill>, %FP, -8; mem:ST4[FixedStack3] ST4[FixedStack2]
	GIE %CONFIG<imp-use,kill>
    Successors according to CFG: BB#1(?%)

<----------------->
Analyzing block 0
BB#0: 
    Live Ins: %R0 %R1 %R2 %R3
	%SP<def,tied2> = STRi64_pmd %LR, %SP<tied0>, -48; flags: FrameSetup
	%FP<def> = ADDri_r32 %SP, 48, %STATUS<imp-def>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	%IP<def> = MOVi32ri 65535
	GID %CONFIG<imp-def>
	%R19<def> = MOVFS32_core %CONFIG, %D9<imp-def>
	%IP<def,tied1> = MOVTi32ri %IP<tied0>, 65521
	STRi32_r32 %R19, %FP, -44; mem:ST4[FixedStack1]
	%R18<def> = ANDrr_r32 %R19<kill>, %IP<kill>, %STATUS<imp-def>, %D9<imp-use,kill>, %D9<imp-def>
	%R19<def,tied1> = MOVTi32ri %R19<kill,tied0>, 72, %D9<imp-use,kill>, %D9<imp-def>
	STRi64 %D9<kill>, %FP, -8; mem:ST4[FixedStack3] ST4[FixedStack2]
	GIE %CONFIG<imp-use,kill>
    Successors according to CFG: BB#1(?%)
          ... BB#2 ('for.body3.lr.ph.preheader')

<----------------->
Analyzing block 1
BB#1: derived from LLVM BB %entry
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#0
	%IP<def,dead> = CMPri_r32 %R3, 1, %STATUS<imp-def>
	BCC <BB#12>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#2(0x50000000 / 0x80000000 = 62.50%) BB#12(0x30000000 / 0x80000000 = 37.50%)

<----------------->
Analyzing block 1
BB#1: derived from LLVM BB %entry
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#0
	%IP<def,dead> = CMPri_r32 %R3, 1, %STATUS<imp-def>
	BCC <BB#12>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#2(0x50000000 / 0x80000000 = 62.50%) BB#12(0x30000000 / 0x80000000 = 37.50%)

<----------------->
Analyzing block 1
BB#1: derived from LLVM BB %entry
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#0
	%IP<def,dead> = CMPri_r32 %R3, 1, %STATUS<imp-def>
	BCC <BB#12>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#2(0x50000000 / 0x80000000 = 62.50%) BB#12(0x30000000 / 0x80000000 = 37.50%)
          ... BB#3 ('for.body3.lr.ph')

<----------------->
Analyzing block 2
BB#2: derived from LLVM BB %for.body3.lr.ph.preheader
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#1
	%R16<def> = MOViPTR %FP, -40
	%R19<def> = MOVi32ri 0, %D9<imp-def>
	%IP<def> = LSL32ri %R3, 2, %STATUS<imp-def,dead>
	%R1<def> = ADDri_r32 %R1<kill>, 8, %STATUS<imp-def,dead>
	%R17<def> = ADDri_r32 %R16, 8, %STATUS<imp-def,dead>
	%R20<def> = MOVi32rr %R19
    Successors according to CFG: BB#3(?%)

<----------------->
Analyzing block 2
BB#2: derived from LLVM BB %for.body3.lr.ph.preheader
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#1
	%R16<def> = MOViPTR %FP, -40
	%R19<def> = MOVi32ri 0, %D9<imp-def>
	%IP<def> = LSL32ri %R3, 2, %STATUS<imp-def,dead>
	%R1<def> = ADDri_r32 %R1<kill>, 8, %STATUS<imp-def,dead>
	%R17<def> = ADDri_r32 %R16, 8, %STATUS<imp-def,dead>
	%R20<def> = MOVi32rr %R19
    Successors according to CFG: BB#3(?%)

<----------------->
Analyzing block 2
BB#2: derived from LLVM BB %for.body3.lr.ph.preheader
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#1
	%R16<def> = MOViPTR %FP, -40
	%R19<def> = MOVi32ri 0, %D9<imp-def>
	%IP<def> = LSL32ri %R3, 2, %STATUS<imp-def,dead>
	%R1<def> = ADDri_r32 %R1<kill>, 8, %STATUS<imp-def,dead>
	%R17<def> = ADDri_r32 %R16, 8, %STATUS<imp-def,dead>
	%R20<def> = MOVi32rr %R19
    Successors according to CFG: BB#3(?%)
          ... BB#4 ('for.body9.preheader')

<----------------->
Analyzing block 3
BB#3: derived from LLVM BB %for.body3.lr.ph
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20
    Predecessors according to CFG: BB#2 BB#11
	%R21<def> = LDRi32_r32 %FP, -8; mem:LD4[FixedStack3]
	GID %CONFIG<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %R21<kill>
	GIE %CONFIG<imp-def,dead>
	%R21<def> = IMULrr_r32 %R20, %R3, %STATUS<imp-def,dead>
	%R22<def> = MOVi32rr %R2
	%R21<def> = LSL32ri %R21<kill>, 2, %STATUS<imp-def,dead>
	%R23<def> = MOVi32rr %R1
	%R24<def> = MOVi32rr %R19
	%R21<def> = ADDrr_r32 %R0, %R21<kill>, %STATUS<imp-def,dead>
    Successors according to CFG: BB#4(?%)

<----------------->
Analyzing block 3
BB#3: derived from LLVM BB %for.body3.lr.ph
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20
    Predecessors according to CFG: BB#2 BB#11
	%R21<def> = LDRi32_r32 %FP, -8; mem:LD4[FixedStack3]
	GID %CONFIG<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %R21<kill>
	GIE %CONFIG<imp-def,dead>
	%R21<def> = IMULrr_r32 %R20, %R3, %STATUS<imp-def,dead>
	%R22<def> = MOVi32rr %R2
	%R21<def> = LSL32ri %R21<kill>, 2, %STATUS<imp-def,dead>
	%R23<def> = MOVi32rr %R1
	%R24<def> = MOVi32rr %R19
	%R21<def> = ADDrr_r32 %R0, %R21<kill>, %STATUS<imp-def,dead>
    Successors according to CFG: BB#4(?%)

<----------------->
Analyzing block 3
BB#3: derived from LLVM BB %for.body3.lr.ph
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20
    Predecessors according to CFG: BB#2 BB#11
	%R21<def> = LDRi32_r32 %FP, -8; mem:LD4[FixedStack3]
	GID %CONFIG<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %R21<kill>
	GIE %CONFIG<imp-def,dead>
	%R21<def> = IMULrr_r32 %R20, %R3, %STATUS<imp-def,dead>
	%R22<def> = MOVi32rr %R2
	%R21<def> = LSL32ri %R21<kill>, 2, %STATUS<imp-def,dead>
	%R23<def> = MOVi32rr %R1
	%R24<def> = MOVi32rr %R19
	%R21<def> = ADDrr_r32 %R0, %R21<kill>, %STATUS<imp-def,dead>
    Successors according to CFG: BB#4(?%)
          ... BB#5 ('for.body9')

<----------------->
Analyzing block 4
BB#4: derived from LLVM BB %for.body9.preheader
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#3 BB#10
	%R18<def> = MOVi32rr %R19<kill>, %D9<imp-use,kill>, %D9<imp-def>
	STRi64 %D9, %FP, -16; mem:ST8[%1+24]
	STRi64 %D9, %FP, -24; mem:ST8[%1+16]
	STRi64 %D9, %FP, -32; mem:ST8[%1+8]
	STRi64 %D9, %FP, -40; mem:ST8[%1]
	%R25<def> = MOVi32rr %R23
	%R26<def> = MOVi32rr %R19
    Successors according to CFG: BB#5(?%)

<----------------->
Analyzing block 4
BB#4: derived from LLVM BB %for.body9.preheader
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#3 BB#10
	%R18<def> = MOVi32rr %R19<kill>, %D9<imp-use,kill>, %D9<imp-def>
	STRi64 %D9, %FP, -16; mem:ST8[%1+24]
	STRi64 %D9, %FP, -24; mem:ST8[%1+16]
	STRi64 %D9, %FP, -32; mem:ST8[%1+8]
	STRi64 %D9, %FP, -40; mem:ST8[%1]
	%R25<def> = MOVi32rr %R23
	%R26<def> = MOVi32rr %R19
    Successors according to CFG: BB#5(?%)

<----------------->
Analyzing block 4
BB#4: derived from LLVM BB %for.body9.preheader
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#3 BB#10
	%R18<def> = MOVi32rr %R19<kill>, %D9<imp-use,kill>, %D9<imp-def>
	STRi64 %D9, %FP, -16; mem:ST8[%1+24]
	STRi64 %D9, %FP, -24; mem:ST8[%1+16]
	STRi64 %D9, %FP, -32; mem:ST8[%1+8]
	STRi64 %D9, %FP, -40; mem:ST8[%1]
	%R25<def> = MOVi32rr %R23
	%R26<def> = MOVi32rr %R19
    Successors according to CFG: BB#5(?%)
          ... BB#6 ('for.body13')

<----------------->
Analyzing block 5
BB#5: derived from LLVM BB %for.body9
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#4 BB#7
	%R27<def> = LSL32ri %R26, 2, %STATUS<imp-def,dead>
	%R27<def> = ADDrr_r32 %R21, %R27<kill>, %STATUS<imp-def,dead>
	%R27<def> = LDRf32 %R27<kill>, 0; mem:Volatile LD4[%add.ptr10](tbaa=!2)
	%R32<def> = MOVi32rr %R17
	%R34<def> = MOVi32rr %R25
	%R33<def> = MOVi32rr %R19
    Successors according to CFG: BB#6(?%)

<----------------->
Analyzing block 5
BB#5: derived from LLVM BB %for.body9
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#4 BB#7
	%R27<def> = LSL32ri %R26, 2, %STATUS<imp-def,dead>
	%R27<def> = ADDrr_r32 %R21, %R27<kill>, %STATUS<imp-def,dead>
	%R27<def> = LDRf32 %R27<kill>, 0; mem:Volatile LD4[%add.ptr10](tbaa=!2)
	%R32<def> = MOVi32rr %R17
	%R34<def> = MOVi32rr %R25
	%R33<def> = MOVi32rr %R19
    Successors according to CFG: BB#6(?%)

<----------------->
Analyzing block 5
BB#5: derived from LLVM BB %for.body9
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#4 BB#7
	%R27<def> = LSL32ri %R26, 2, %STATUS<imp-def,dead>
	%R27<def> = ADDrr_r32 %R21, %R27<kill>, %STATUS<imp-def,dead>
	%R27<def> = LDRf32 %R27<kill>, 0; mem:Volatile LD4[%add.ptr10](tbaa=!2)
	%R32<def> = MOVi32rr %R17
	%R34<def> = MOVi32rr %R25
	%R33<def> = MOVi32rr %R19
    Successors according to CFG: BB#6(?%)
          ... BB#7 ('for.end60')

<----------------->
Analyzing block 6
BB#6: derived from LLVM BB %for.body13
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26 %R27 %R32 %R33 %R34
    Predecessors according to CFG: BB#5 BB#6
	%R37<def> = LDRf32 %R34, -8; mem:Volatile LD4[%scevgep8](tbaa=!2)
	%R38<def> = LDRf32 %R34, -4; mem:Volatile LD4[%scevgep9](tbaa=!2)
	%R39<def> = LDRf32 %R34, 0; mem:Volatile LD4[%lsr.iv5](tbaa=!2)
	%R40<def> = LDRf32 %R34, 4; mem:Volatile LD4[%scevgep7](tbaa=!2)
	%D21<def> = LDRf64 %R32, -8; mem:LD4[%scevgep17](tbaa=!2) LD4[%scevgep15](tbaa=!2)
	%R36<def> = ADDri_r32 %R34<kill>, 16, %STATUS<imp-def,dead>
	%R34<def> = LDRi32_r32 %FP, -4; mem:LD4[FixedStack2]
	GID %CONFIG<imp-def,dead>
	%R35<def> = ADDri_r32 %R32, 16, %STATUS<imp-def,dead>
	%R33<def> = ADDri_r32 %R33<kill>, 4, %STATUS<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %R34<kill>
	GIE %CONFIG<imp-def,dead>
	%R43<def,tied1> = FMADDrr_r32 %R43<kill,tied0>, %R27, %R37<kill>, %STATUS<imp-def,dead>, %D21<imp-use,kill>, %D21<imp-def>
	%R42<def,tied1> = FMADDrr_r32 %R42<kill,tied0>, %R27, %R38<kill>, %STATUS<imp-def,dead>, %D21<imp-use,kill>, %D21<imp-def>
	%R44<def> = MOVi32rr %R43, %D22<imp-def>
	%R45<def> = MOVi32rr %R42<kill>, %D21<imp-use,kill>, %D22<imp-use,kill>, %D22<imp-def>
	STRf64 %D22<kill>, %R32, -8; mem:ST4[%scevgep17](tbaa=!2) ST4[%scevgep15](tbaa=!2)
	%R34<def> = LDRf32 %R32, 0; mem:LD4[%lsr.iv1214](tbaa=!2)
	%R34<def,tied1> = FMADDrr_r32 %R34<tied0>, %R27, %R39<kill>, %STATUS<imp-def,dead>
	STRf32 %R34<kill>, %R32, 0; mem:ST4[%lsr.iv1214](tbaa=!2)
	%R63<def> = LDRf32 %R32, 4; mem:LD4[%scevgep16](tbaa=!2)
	%R63<def,tied1> = FMADDrr_r32 %R63<tied0>, %R27, %R40<kill>, %STATUS<imp-def,dead>
	%R34<def,dead> = CMPri_r32 %R33, 8, %STATUS<imp-def>
	STRf32 %R63<kill>, %R32<kill>, 4; mem:ST4[%scevgep16](tbaa=!2)
	%R32<def> = MOVi32rr %R35<kill>
	%R34<def> = MOVi32rr %R36<kill>
	BCC <BB#6>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#6(0x7c000000 / 0x80000000 = 96.88%) BB#7(0x04000000 / 0x80000000 = 3.12%)

<----------------->
Analyzing block 6
BB#6: derived from LLVM BB %for.body13
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26 %R27 %R32 %R33 %R34
    Predecessors according to CFG: BB#5 BB#6
	%R37<def> = LDRf32 %R34, -8; mem:Volatile LD4[%scevgep8](tbaa=!2)
	%R38<def> = LDRf32 %R34, -4; mem:Volatile LD4[%scevgep9](tbaa=!2)
	%R39<def> = LDRf32 %R34, 0; mem:Volatile LD4[%lsr.iv5](tbaa=!2)
	%R40<def> = LDRf32 %R34, 4; mem:Volatile LD4[%scevgep7](tbaa=!2)
	%D21<def> = LDRf64 %R32, -8; mem:LD4[%scevgep17](tbaa=!2) LD4[%scevgep15](tbaa=!2)
	%R36<def> = ADDri_r32 %R34<kill>, 16, %STATUS<imp-def,dead>
	%R34<def> = LDRi32_r32 %FP, -4; mem:LD4[FixedStack2]
	GID %CONFIG<imp-def,dead>
	%R35<def> = ADDri_r32 %R32, 16, %STATUS<imp-def,dead>
	%R33<def> = ADDri_r32 %R33<kill>, 4, %STATUS<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %R34<kill>
	GIE %CONFIG<imp-def,dead>
	%R43<def,tied1> = FMADDrr_r32 %R43<kill,tied0>, %R27, %R37<kill>, %STATUS<imp-def,dead>, %D21<imp-use,kill>, %D21<imp-def>
	%R42<def,tied1> = FMADDrr_r32 %R42<kill,tied0>, %R27, %R38<kill>, %STATUS<imp-def,dead>, %D21<imp-use,kill>, %D21<imp-def>
	%R44<def> = MOVi32rr %R43, %D22<imp-def>
	%R45<def> = MOVi32rr %R42<kill>, %D21<imp-use,kill>, %D22<imp-use,kill>, %D22<imp-def>
	STRf64 %D22<kill>, %R32, -8; mem:ST4[%scevgep17](tbaa=!2) ST4[%scevgep15](tbaa=!2)
	%R34<def> = LDRf32 %R32, 0; mem:LD4[%lsr.iv1214](tbaa=!2)
	%R34<def,tied1> = FMADDrr_r32 %R34<tied0>, %R27, %R39<kill>, %STATUS<imp-def,dead>
	STRf32 %R34<kill>, %R32, 0; mem:ST4[%lsr.iv1214](tbaa=!2)
	%R63<def> = LDRf32 %R32, 4; mem:LD4[%scevgep16](tbaa=!2)
	%R63<def,tied1> = FMADDrr_r32 %R63<tied0>, %R27, %R40<kill>, %STATUS<imp-def,dead>
	%R34<def,dead> = CMPri_r32 %R33, 8, %STATUS<imp-def>
	STRf32 %R63<kill>, %R32<kill>, 4; mem:ST4[%scevgep16](tbaa=!2)
	%R32<def> = MOVi32rr %R35<kill>
	%R34<def> = MOVi32rr %R36<kill>
	BCC <BB#6>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#6(0x7c000000 / 0x80000000 = 96.88%) BB#7(0x04000000 / 0x80000000 = 3.12%)

<----------------->
Analyzing block 6
BB#6: derived from LLVM BB %for.body13
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26 %R27 %R32 %R33 %R34
    Predecessors according to CFG: BB#5 BB#6
	%R37<def> = LDRf32 %R34, -8; mem:Volatile LD4[%scevgep8](tbaa=!2)
	%R38<def> = LDRf32 %R34, -4; mem:Volatile LD4[%scevgep9](tbaa=!2)
	%R39<def> = LDRf32 %R34, 0; mem:Volatile LD4[%lsr.iv5](tbaa=!2)
	%R40<def> = LDRf32 %R34, 4; mem:Volatile LD4[%scevgep7](tbaa=!2)
	%D21<def> = LDRf64 %R32, -8; mem:LD4[%scevgep17](tbaa=!2) LD4[%scevgep15](tbaa=!2)
	%R36<def> = ADDri_r32 %R34<kill>, 16, %STATUS<imp-def,dead>
	%R34<def> = LDRi32_r32 %FP, -4; mem:LD4[FixedStack2]
	GID %CONFIG<imp-def,dead>
	%R35<def> = ADDri_r32 %R32, 16, %STATUS<imp-def,dead>
	%R33<def> = ADDri_r32 %R33<kill>, 4, %STATUS<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %R34<kill>
	GIE %CONFIG<imp-def,dead>
	%R43<def,tied1> = FMADDrr_r32 %R43<kill,tied0>, %R27, %R37<kill>, %STATUS<imp-def,dead>, %D21<imp-use,kill>, %D21<imp-def>
	%R42<def,tied1> = FMADDrr_r32 %R42<kill,tied0>, %R27, %R38<kill>, %STATUS<imp-def,dead>, %D21<imp-use,kill>, %D21<imp-def>
	%R44<def> = MOVi32rr %R43, %D22<imp-def>
	%R45<def> = MOVi32rr %R42<kill>, %D21<imp-use,kill>, %D22<imp-use,kill>, %D22<imp-def>
	STRf64 %D22<kill>, %R32, -8; mem:ST4[%scevgep17](tbaa=!2) ST4[%scevgep15](tbaa=!2)
	%R34<def> = LDRf32 %R32, 0; mem:LD4[%lsr.iv1214](tbaa=!2)
	%R34<def,tied1> = FMADDrr_r32 %R34<tied0>, %R27, %R39<kill>, %STATUS<imp-def,dead>
	STRf32 %R34<kill>, %R32, 0; mem:ST4[%lsr.iv1214](tbaa=!2)
	%R63<def> = LDRf32 %R32, 4; mem:LD4[%scevgep16](tbaa=!2)
	%R63<def,tied1> = FMADDrr_r32 %R63<tied0>, %R27, %R40<kill>, %STATUS<imp-def,dead>
	%R34<def,dead> = CMPri_r32 %R33, 8, %STATUS<imp-def>
	STRf32 %R63<kill>, %R32<kill>, 4; mem:ST4[%scevgep16](tbaa=!2)
	%R32<def> = MOVi32rr %R35<kill>
	%R34<def> = MOVi32rr %R36<kill>
	BCC <BB#6>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#6(0x7c000000 / 0x80000000 = 96.88%) BB#7(0x04000000 / 0x80000000 = 3.12%)
          ... BB#8 ('for.cond64.preheader')

<----------------->
Analyzing block 7
BB#7: derived from LLVM BB %for.end60
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#6
	%R26<def> = ADDri_r32 %R26<kill>, 1, %STATUS<imp-def,dead>
	%R25<def> = ADDrr_r32 %R25<kill>, %IP, %STATUS<imp-def,dead>
	%R27<def,dead> = CMPrr_r32 %R26, %R3, %STATUS<imp-def>
	BCC <BB#5>, 1, %STATUS<imp-use>
    Successors according to CFG: BB#8(0x04000000 / 0x80000000 = 3.12%) BB#5(0x7c000000 / 0x80000000 = 96.88%)

<----------------->
Analyzing block 7
BB#7: derived from LLVM BB %for.end60
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#6
	%R26<def> = ADDri_r32 %R26<kill>, 1, %STATUS<imp-def,dead>
	%R25<def> = ADDrr_r32 %R25<kill>, %IP, %STATUS<imp-def,dead>
	%R27<def,dead> = CMPrr_r32 %R26, %R3, %STATUS<imp-def>
	BCC <BB#5>, 1, %STATUS<imp-use>
    Successors according to CFG: BB#8(0x04000000 / 0x80000000 = 3.12%) BB#5(0x7c000000 / 0x80000000 = 96.88%)

<----------------->
Analyzing block 7
BB#7: derived from LLVM BB %for.end60
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#6
	%R26<def> = ADDri_r32 %R26<kill>, 1, %STATUS<imp-def,dead>
	%R25<def> = ADDrr_r32 %R25<kill>, %IP, %STATUS<imp-def,dead>
	%R27<def,dead> = CMPrr_r32 %R26, %R3, %STATUS<imp-def>
	BCC <BB#5>, 1, %STATUS<imp-use>
    Successors according to CFG: BB#8(0x04000000 / 0x80000000 = 3.12%) BB#5(0x7c000000 / 0x80000000 = 96.88%)
          ... BB#9 ('for.body66')

<----------------->
Analyzing block 8
BB#8: derived from LLVM BB %for.cond64.preheader
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#7
	%R25<def> = MOVi32rr %R22
	%R26<def> = MOVi32rr %R19
    Successors according to CFG: BB#9(?%)

<----------------->
Analyzing block 8
BB#8: derived from LLVM BB %for.cond64.preheader
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#7
	%R25<def> = MOVi32rr %R22
	%R26<def> = MOVi32rr %R19
    Successors according to CFG: BB#9(?%)

<----------------->
Analyzing block 8
BB#8: derived from LLVM BB %for.cond64.preheader
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#7
	%R25<def> = MOVi32rr %R22
	%R26<def> = MOVi32rr %R19
    Successors according to CFG: BB#9(?%)
          ... BB#10 ('for.end75')

<----------------->
Analyzing block 9
BB#9: derived from LLVM BB %for.body66
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#8 BB#9
	%R27<def> = ADDrr_r32 %R16, %R26, %STATUS<imp-def,dead>
	%R26<def> = ADDri_r32 %R26<kill>, 4, %STATUS<imp-def,dead>
	%R33<def> = LDRf32 %R27<kill>, 0; mem:LD4[%sunkaddr30](tbaa=!2)
	%R34<def> = LDRf32 %R25, 0; mem:Volatile LD4[%lsr.iv24](tbaa=!2)
	%R32<def> = LDRi32_r32 %FP, -4; mem:LD4[FixedStack2]
	GID %CONFIG<imp-def,dead>
	%R27<def> = ADDri_r32 %R25, 4, %STATUS<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %R32<kill>
	GIE %CONFIG<imp-def,dead>
	%R33<def> = FADDrr_r32 %R33<kill>, %R34<kill>, %STATUS<imp-def,dead>
	%R32<def,dead> = CMPri_r32 %R26, 32, %STATUS<imp-def>
	STRf32 %R33<kill>, %R25<kill>, 0; mem:Volatile ST4[%lsr.iv24](tbaa=!2)
	%R25<def> = MOVi32rr %R27<kill>
	BCC <BB#9>, 1, %STATUS<imp-use>
    Successors according to CFG: BB#10(0x04000000 / 0x80000000 = 3.12%) BB#9(0x7c000000 / 0x80000000 = 96.88%)

<----------------->
Analyzing block 9
BB#9: derived from LLVM BB %for.body66
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#8 BB#9
	%R27<def> = ADDrr_r32 %R16, %R26, %STATUS<imp-def,dead>
	%R26<def> = ADDri_r32 %R26<kill>, 4, %STATUS<imp-def,dead>
	%R33<def> = LDRf32 %R27<kill>, 0; mem:LD4[%sunkaddr30](tbaa=!2)
	%R34<def> = LDRf32 %R25, 0; mem:Volatile LD4[%lsr.iv24](tbaa=!2)
	%R32<def> = LDRi32_r32 %FP, -4; mem:LD4[FixedStack2]
	GID %CONFIG<imp-def,dead>
	%R27<def> = ADDri_r32 %R25, 4, %STATUS<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %R32<kill>
	GIE %CONFIG<imp-def,dead>
	%R33<def> = FADDrr_r32 %R33<kill>, %R34<kill>, %STATUS<imp-def,dead>
	%R32<def,dead> = CMPri_r32 %R26, 32, %STATUS<imp-def>
	STRf32 %R33<kill>, %R25<kill>, 0; mem:Volatile ST4[%lsr.iv24](tbaa=!2)
	%R25<def> = MOVi32rr %R27<kill>
	BCC <BB#9>, 1, %STATUS<imp-use>
    Successors according to CFG: BB#10(0x04000000 / 0x80000000 = 3.12%) BB#9(0x7c000000 / 0x80000000 = 96.88%)

<----------------->
Analyzing block 9
BB#9: derived from LLVM BB %for.body66
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#8 BB#9
	%R27<def> = ADDrr_r32 %R16, %R26, %STATUS<imp-def,dead>
	%R26<def> = ADDri_r32 %R26<kill>, 4, %STATUS<imp-def,dead>
	%R33<def> = LDRf32 %R27<kill>, 0; mem:LD4[%sunkaddr30](tbaa=!2)
	%R34<def> = LDRf32 %R25, 0; mem:Volatile LD4[%lsr.iv24](tbaa=!2)
	%R32<def> = LDRi32_r32 %FP, -4; mem:LD4[FixedStack2]
	GID %CONFIG<imp-def,dead>
	%R27<def> = ADDri_r32 %R25, 4, %STATUS<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %R32<kill>
	GIE %CONFIG<imp-def,dead>
	%R33<def> = FADDrr_r32 %R33<kill>, %R34<kill>, %STATUS<imp-def,dead>
	%R32<def,dead> = CMPri_r32 %R26, 32, %STATUS<imp-def>
	STRf32 %R33<kill>, %R25<kill>, 0; mem:Volatile ST4[%lsr.iv24](tbaa=!2)
	%R25<def> = MOVi32rr %R27<kill>
	BCC <BB#9>, 1, %STATUS<imp-use>
    Successors according to CFG: BB#10(0x04000000 / 0x80000000 = 3.12%) BB#9(0x7c000000 / 0x80000000 = 96.88%)
          ... BB#11 ('for.end78')

<----------------->
Analyzing block 10
BB#10: derived from LLVM BB %for.end75
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#9
	%R24<def> = ADDri_r32 %R24<kill>, 8, %STATUS<imp-def,dead>
	%R22<def> = ADDri_r32 %R22<kill>, 32, %STATUS<imp-def,dead>
	%R23<def> = ADDri_r32 %R23<kill>, 32, %STATUS<imp-def,dead>
	%R25<def,dead> = CMPrr_r32 %R24, %R3, %STATUS<imp-def>
	BCC <BB#4>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#4(0x7c000000 / 0x80000000 = 96.88%) BB#11(0x04000000 / 0x80000000 = 3.12%)

<----------------->
Analyzing block 10
BB#10: derived from LLVM BB %for.end75
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#9
	%R24<def> = ADDri_r32 %R24<kill>, 8, %STATUS<imp-def,dead>
	%R22<def> = ADDri_r32 %R22<kill>, 32, %STATUS<imp-def,dead>
	%R23<def> = ADDri_r32 %R23<kill>, 32, %STATUS<imp-def,dead>
	%R25<def,dead> = CMPrr_r32 %R24, %R3, %STATUS<imp-def>
	BCC <BB#4>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#4(0x7c000000 / 0x80000000 = 96.88%) BB#11(0x04000000 / 0x80000000 = 3.12%)

<----------------->
Analyzing block 10
BB#10: derived from LLVM BB %for.end75
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#9
	%R24<def> = ADDri_r32 %R24<kill>, 8, %STATUS<imp-def,dead>
	%R22<def> = ADDri_r32 %R22<kill>, 32, %STATUS<imp-def,dead>
	%R23<def> = ADDri_r32 %R23<kill>, 32, %STATUS<imp-def,dead>
	%R25<def,dead> = CMPrr_r32 %R24, %R3, %STATUS<imp-def>
	BCC <BB#4>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#4(0x7c000000 / 0x80000000 = 96.88%) BB#11(0x04000000 / 0x80000000 = 3.12%)
          ... BB#12 ('for.end81')

<----------------->
Analyzing block 11
BB#11: derived from LLVM BB %for.end78
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20
    Predecessors according to CFG: BB#10
	%R20<def> = ADDri_r32 %R20<kill>, 1, %STATUS<imp-def,dead>
	%R2<def> = ADDrr_r32 %R2<kill>, %IP, %STATUS<imp-def,dead>
	%R21<def,dead> = CMPrr_r32 %R20, %R3, %STATUS<imp-def>
	BCC <BB#3>, 1, %STATUS<imp-use>
    Successors according to CFG: BB#12(0x04000000 / 0x80000000 = 3.12%) BB#3(0x7c000000 / 0x80000000 = 96.88%)

<----------------->
Analyzing block 11
BB#11: derived from LLVM BB %for.end78
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20
    Predecessors according to CFG: BB#10
	%R20<def> = ADDri_r32 %R20<kill>, 1, %STATUS<imp-def,dead>
	%R2<def> = ADDrr_r32 %R2<kill>, %IP, %STATUS<imp-def,dead>
	%R21<def,dead> = CMPrr_r32 %R20, %R3, %STATUS<imp-def>
	BCC <BB#3>, 1, %STATUS<imp-use>
    Successors according to CFG: BB#12(0x04000000 / 0x80000000 = 3.12%) BB#3(0x7c000000 / 0x80000000 = 96.88%)

<----------------->
Analyzing block 11
BB#11: derived from LLVM BB %for.end78
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20
    Predecessors according to CFG: BB#10
	%R20<def> = ADDri_r32 %R20<kill>, 1, %STATUS<imp-def,dead>
	%R2<def> = ADDrr_r32 %R2<kill>, %IP, %STATUS<imp-def,dead>
	%R21<def,dead> = CMPrr_r32 %R20, %R3, %STATUS<imp-def>
	BCC <BB#3>, 1, %STATUS<imp-use>
    Successors according to CFG: BB#12(0x04000000 / 0x80000000 = 3.12%) BB#3(0x7c000000 / 0x80000000 = 96.88%)

<----------------->
Analyzing block 12
BB#12: derived from LLVM BB %for.end81
    Predecessors according to CFG: BB#1 BB#11
	%R0<def> = LDRi32_r32 %FP, -44; mem:LD4[FixedStack1]
	GID
	%CONFIG<def> = MOVTS32_core %R0<kill>
	GIE %CONFIG<imp-use,kill>
	%LR<def> = LDRi64 %SP, 48; flags: FrameSetup
	%SP<def> = ADDri_r32 %SP, 48, %STATUS<imp-def>
	JR32 %LR

<----------------->
Analyzing block 0
BB#0: 
    Live Ins: %R0 %R1 %R2 %R3
	%SP<def,tied2> = STRi64_pmd %LR, %SP<tied0>, -48; flags: FrameSetup
	%FP<def> = ADDri_r32 %SP, 48, %STATUS<imp-def>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	%IP<def> = MOVi32ri 65535
	GID %CONFIG<imp-def>
	%R19<def> = MOVFS32_core %CONFIG, %D9<imp-def>
	%IP<def,tied1> = MOVTi32ri %IP<tied0>, 65521
	STRi32_r32 %R19, %FP, -44; mem:ST4[FixedStack1]
	%R18<def> = ANDrr_r32 %R19<kill>, %IP<kill>, %STATUS<imp-def>, %D9<imp-use,kill>, %D9<imp-def>
	%R19<def,tied1> = MOVTi32ri %R19<kill,tied0>, 72, %D9<imp-use,kill>, %D9<imp-def>
	STRi64 %D9<kill>, %FP, -8; mem:ST4[FixedStack3] ST4[FixedStack2]
	GIE %CONFIG<imp-use,kill>
    Successors according to CFG: BB#1(?%)

<----------------->
Analyzing block 1
BB#1: derived from LLVM BB %entry
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#0
	%IP<def,dead> = CMPri_r32 %R3, 1, %STATUS<imp-def>
	BCC <BB#12>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#2(0x50000000 / 0x80000000 = 62.50%) BB#12(0x30000000 / 0x80000000 = 37.50%)

<----------------->
Analyzing block 2
BB#2: derived from LLVM BB %for.body3.lr.ph.preheader
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#1
	%R16<def> = MOViPTR %FP, -40
	%R19<def> = MOVi32ri 0, %D9<imp-def>
	%IP<def> = LSL32ri %R3, 2, %STATUS<imp-def,dead>
	%R1<def> = ADDri_r32 %R1<kill>, 8, %STATUS<imp-def,dead>
	%R17<def> = ADDri_r32 %R16, 8, %STATUS<imp-def,dead>
	%R20<def> = MOVi32rr %R19
    Successors according to CFG: BB#3(?%)

<----------------->
Analyzing block 3
BB#3: derived from LLVM BB %for.body3.lr.ph
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20
    Predecessors according to CFG: BB#2 BB#11
	%R21<def> = LDRi32_r32 %FP, -8; mem:LD4[FixedStack3]
	GID %CONFIG<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %R21<kill>
	GIE %CONFIG<imp-def,dead>
	%R21<def> = IMULrr_r32 %R20, %R3, %STATUS<imp-def,dead>
	%R22<def> = MOVi32rr %R2
	%R21<def> = LSL32ri %R21<kill>, 2, %STATUS<imp-def,dead>
	%R23<def> = MOVi32rr %R1
	%R24<def> = MOVi32rr %R19
	%R21<def> = ADDrr_r32 %R0, %R21<kill>, %STATUS<imp-def,dead>
    Successors according to CFG: BB#4(?%)

<----------------->
Analyzing block 4
BB#4: derived from LLVM BB %for.body9.preheader
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#3 BB#10
	%R18<def> = MOVi32rr %R19<kill>, %D9<imp-use,kill>, %D9<imp-def>
	STRi64 %D9, %FP, -16; mem:ST8[%1+24]
	STRi64 %D9, %FP, -24; mem:ST8[%1+16]
	STRi64 %D9, %FP, -32; mem:ST8[%1+8]
	STRi64 %D9, %FP, -40; mem:ST8[%1]
	%R25<def> = MOVi32rr %R23
	%R26<def> = MOVi32rr %R19
    Successors according to CFG: BB#5(?%)

<----------------->
Analyzing block 5
BB#5: derived from LLVM BB %for.body9
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#4 BB#7
	%R27<def> = LSL32ri %R26, 2, %STATUS<imp-def,dead>
	%R27<def> = ADDrr_r32 %R21, %R27<kill>, %STATUS<imp-def,dead>
	%R27<def> = LDRf32 %R27<kill>, 0; mem:Volatile LD4[%add.ptr10](tbaa=!2)
	%R32<def> = MOVi32rr %R17
	%R34<def> = MOVi32rr %R25
	%R33<def> = MOVi32rr %R19
    Successors according to CFG: BB#6(?%)

<----------------->
Analyzing block 6
BB#6: derived from LLVM BB %for.body13
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26 %R27 %R32 %R33 %R34
    Predecessors according to CFG: BB#5 BB#6
	%R37<def> = LDRf32 %R34, -8; mem:Volatile LD4[%scevgep8](tbaa=!2)
	%R38<def> = LDRf32 %R34, -4; mem:Volatile LD4[%scevgep9](tbaa=!2)
	%R39<def> = LDRf32 %R34, 0; mem:Volatile LD4[%lsr.iv5](tbaa=!2)
	%R40<def> = LDRf32 %R34, 4; mem:Volatile LD4[%scevgep7](tbaa=!2)
	%D21<def> = LDRf64 %R32, -8; mem:LD4[%scevgep17](tbaa=!2) LD4[%scevgep15](tbaa=!2)
	%R36<def> = ADDri_r32 %R34<kill>, 16, %STATUS<imp-def,dead>
	%R34<def> = LDRi32_r32 %FP, -4; mem:LD4[FixedStack2]
	GID %CONFIG<imp-def,dead>
	%R35<def> = ADDri_r32 %R32, 16, %STATUS<imp-def,dead>
	%R33<def> = ADDri_r32 %R33<kill>, 4, %STATUS<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %R34<kill>
	GIE %CONFIG<imp-def,dead>
	%R43<def,tied1> = FMADDrr_r32 %R43<kill,tied0>, %R27, %R37<kill>, %STATUS<imp-def,dead>, %D21<imp-use,kill>, %D21<imp-def>
	%R42<def,tied1> = FMADDrr_r32 %R42<kill,tied0>, %R27, %R38<kill>, %STATUS<imp-def,dead>, %D21<imp-use,kill>, %D21<imp-def>
	%R44<def> = MOVi32rr %R43, %D22<imp-def>
	%R45<def> = MOVi32rr %R42<kill>, %D21<imp-use,kill>, %D22<imp-use,kill>, %D22<imp-def>
	STRf64 %D22<kill>, %R32, -8; mem:ST4[%scevgep17](tbaa=!2) ST4[%scevgep15](tbaa=!2)
	%R34<def> = LDRf32 %R32, 0; mem:LD4[%lsr.iv1214](tbaa=!2)
	%R34<def,tied1> = FMADDrr_r32 %R34<tied0>, %R27, %R39<kill>, %STATUS<imp-def,dead>
	STRf32 %R34<kill>, %R32, 0; mem:ST4[%lsr.iv1214](tbaa=!2)
	%R63<def> = LDRf32 %R32, 4; mem:LD4[%scevgep16](tbaa=!2)
	%R63<def,tied1> = FMADDrr_r32 %R63<tied0>, %R27, %R40<kill>, %STATUS<imp-def,dead>
	%R34<def,dead> = CMPri_r32 %R33, 8, %STATUS<imp-def>
	STRf32 %R63<kill>, %R32<kill>, 4; mem:ST4[%scevgep16](tbaa=!2)
	%R32<def> = MOVi32rr %R35<kill>
	%R34<def> = MOVi32rr %R36<kill>
	BCC <BB#6>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#6(0x7c000000 / 0x80000000 = 96.88%) BB#7(0x04000000 / 0x80000000 = 3.12%)

<----------------->
Analyzing block 7
BB#7: derived from LLVM BB %for.end60
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#6
	%R26<def> = ADDri_r32 %R26<kill>, 1, %STATUS<imp-def,dead>
	%R25<def> = ADDrr_r32 %R25<kill>, %IP, %STATUS<imp-def,dead>
	%R27<def,dead> = CMPrr_r32 %R26, %R3, %STATUS<imp-def>
	BCC <BB#5>, 1, %STATUS<imp-use>
    Successors according to CFG: BB#8(0x04000000 / 0x80000000 = 3.12%) BB#5(0x7c000000 / 0x80000000 = 96.88%)

<----------------->
Analyzing block 8
BB#8: derived from LLVM BB %for.cond64.preheader
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#7
	%R25<def> = MOVi32rr %R22
	%R26<def> = MOVi32rr %R19
    Successors according to CFG: BB#9(?%)

<----------------->
Analyzing block 9
BB#9: derived from LLVM BB %for.body66
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#8 BB#9
	%R27<def> = ADDrr_r32 %R16, %R26, %STATUS<imp-def,dead>
	%R26<def> = ADDri_r32 %R26<kill>, 4, %STATUS<imp-def,dead>
	%R33<def> = LDRf32 %R27<kill>, 0; mem:LD4[%sunkaddr30](tbaa=!2)
	%R34<def> = LDRf32 %R25, 0; mem:Volatile LD4[%lsr.iv24](tbaa=!2)
	%R32<def> = LDRi32_r32 %FP, -4; mem:LD4[FixedStack2]
	GID %CONFIG<imp-def,dead>
	%R27<def> = ADDri_r32 %R25, 4, %STATUS<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %R32<kill>
	GIE %CONFIG<imp-def,dead>
	%R33<def> = FADDrr_r32 %R33<kill>, %R34<kill>, %STATUS<imp-def,dead>
	%R32<def,dead> = CMPri_r32 %R26, 32, %STATUS<imp-def>
	STRf32 %R33<kill>, %R25<kill>, 0; mem:Volatile ST4[%lsr.iv24](tbaa=!2)
	%R25<def> = MOVi32rr %R27<kill>
	BCC <BB#9>, 1, %STATUS<imp-use>
    Successors according to CFG: BB#10(0x04000000 / 0x80000000 = 3.12%) BB#9(0x7c000000 / 0x80000000 = 96.88%)

<----------------->
Analyzing block 10
BB#10: derived from LLVM BB %for.end75
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#9
	%R24<def> = ADDri_r32 %R24<kill>, 8, %STATUS<imp-def,dead>
	%R22<def> = ADDri_r32 %R22<kill>, 32, %STATUS<imp-def,dead>
	%R23<def> = ADDri_r32 %R23<kill>, 32, %STATUS<imp-def,dead>
	%R25<def,dead> = CMPrr_r32 %R24, %R3, %STATUS<imp-def>
	BCC <BB#4>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#4(0x7c000000 / 0x80000000 = 96.88%) BB#11(0x04000000 / 0x80000000 = 3.12%)

<----------------->
Analyzing block 11
BB#11: derived from LLVM BB %for.end78
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20
    Predecessors according to CFG: BB#10
	%R20<def> = ADDri_r32 %R20<kill>, 1, %STATUS<imp-def,dead>
	%R2<def> = ADDrr_r32 %R2<kill>, %IP, %STATUS<imp-def,dead>
	%R21<def,dead> = CMPrr_r32 %R20, %R3, %STATUS<imp-def>
	BCC <BB#3>, 1, %STATUS<imp-use>
    Successors according to CFG: BB#12(0x04000000 / 0x80000000 = 3.12%) BB#3(0x7c000000 / 0x80000000 = 96.88%)

<----------------->
Analyzing block 12
BB#12: derived from LLVM BB %for.end81
    Predecessors according to CFG: BB#1 BB#11
	%R0<def> = LDRi32_r32 %FP, -44; mem:LD4[FixedStack1]
	GID
	%CONFIG<def> = MOVTS32_core %R0<kill>
	GIE %CONFIG<imp-use,kill>
	%LR<def> = LDRi64 %SP, 48; flags: FrameSetup
	%SP<def> = ADDri_r32 %SP, 48, %STATUS<imp-def>
	JR32 %LR

<----------------->
Analyzing block 1
BB#1: derived from LLVM BB %entry
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#0
	%IP<def,dead> = CMPri_r32 %R3, 1, %STATUS<imp-def>
	BCC <BB#12>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#2(0x50000000 / 0x80000000 = 62.50%) BB#12(0x30000000 / 0x80000000 = 37.50%)

<----------------->
Removing branches out of BB#1
# Machine code for function matmac: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=32, align=8, at location [SP-40]
  fi#1: size=4, align=4, at location [SP-44]
  fi#2: size=4, align=4, at location [SP-4]
  fi#3: size=4, align=8, at location [SP-8]
Function Live Ins: %R0, %R1, %R2, %R3

BB#0: 
    Live Ins: %R0 %R1 %R2 %R3
	%SP<def,tied2> = STRi64_pmd %LR, %SP<tied0>, -48; flags: FrameSetup
	%FP<def> = ADDri_r32 %SP, 48, %STATUS<imp-def>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	%IP<def> = MOVi32ri 65535
	GID %CONFIG<imp-def>
	%R19<def> = MOVFS32_core %CONFIG, %D9<imp-def>
	%IP<def,tied1> = MOVTi32ri %IP<tied0>, 65521
	STRi32_r32 %R19, %FP, -44; mem:ST4[FixedStack1]
	%R18<def> = ANDrr_r32 %R19<kill>, %IP<kill>, %STATUS<imp-def>, %D9<imp-use,kill>, %D9<imp-def>
	%R19<def,tied1> = MOVTi32ri %R19<kill,tied0>, 72, %D9<imp-use,kill>, %D9<imp-def>
	STRi64 %D9<kill>, %FP, -8; mem:ST4[FixedStack3] ST4[FixedStack2]
	GIE %CONFIG<imp-use,kill>
    Successors according to CFG: BB#1(?%)

BB#1: derived from LLVM BB %entry
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#0
	%IP<def,dead> = CMPri_r32 %R3, 1, %STATUS<imp-def>
    Successors according to CFG: BB#2(0x50000000 / 0x80000000 = 62.50%) BB#12(0x30000000 / 0x80000000 = 37.50%)

BB#2: derived from LLVM BB %for.body3.lr.ph.preheader
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#1
	%R16<def> = MOViPTR %FP, -40
	%R19<def> = MOVi32ri 0, %D9<imp-def>
	%IP<def> = LSL32ri %R3, 2, %STATUS<imp-def,dead>
	%R1<def> = ADDri_r32 %R1<kill>, 8, %STATUS<imp-def,dead>
	%R17<def> = ADDri_r32 %R16, 8, %STATUS<imp-def,dead>
	%R20<def> = MOVi32rr %R19
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %for.body3.lr.ph
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20
    Predecessors according to CFG: BB#2 BB#11
	%R21<def> = LDRi32_r32 %FP, -8; mem:LD4[FixedStack3]
	GID %CONFIG<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %R21<kill>
	GIE %CONFIG<imp-def,dead>
	%R21<def> = IMULrr_r32 %R20, %R3, %STATUS<imp-def,dead>
	%R22<def> = MOVi32rr %R2
	%R21<def> = LSL32ri %R21<kill>, 2, %STATUS<imp-def,dead>
	%R23<def> = MOVi32rr %R1
	%R24<def> = MOVi32rr %R19
	%R21<def> = ADDrr_r32 %R0, %R21<kill>, %STATUS<imp-def,dead>
    Successors according to CFG: BB#4(?%)

BB#4: derived from LLVM BB %for.body9.preheader
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#3 BB#10
	%R18<def> = MOVi32rr %R19<kill>, %D9<imp-use,kill>, %D9<imp-def>
	STRi64 %D9, %FP, -16; mem:ST8[%1+24]
	STRi64 %D9, %FP, -24; mem:ST8[%1+16]
	STRi64 %D9, %FP, -32; mem:ST8[%1+8]
	STRi64 %D9, %FP, -40; mem:ST8[%1]
	%R25<def> = MOVi32rr %R23
	%R26<def> = MOVi32rr %R19
    Successors according to CFG: BB#5(?%)

BB#5: derived from LLVM BB %for.body9
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#4 BB#7
	%R27<def> = LSL32ri %R26, 2, %STATUS<imp-def,dead>
	%R27<def> = ADDrr_r32 %R21, %R27<kill>, %STATUS<imp-def,dead>
	%R27<def> = LDRf32 %R27<kill>, 0; mem:Volatile LD4[%add.ptr10](tbaa=!2)
	%R32<def> = MOVi32rr %R17
	%R34<def> = MOVi32rr %R25
	%R33<def> = MOVi32rr %R19
    Successors according to CFG: BB#6(?%)

BB#6: derived from LLVM BB %for.body13
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26 %R27 %R32 %R33 %R34
    Predecessors according to CFG: BB#5 BB#6
	%R37<def> = LDRf32 %R34, -8; mem:Volatile LD4[%scevgep8](tbaa=!2)
	%R38<def> = LDRf32 %R34, -4; mem:Volatile LD4[%scevgep9](tbaa=!2)
	%R39<def> = LDRf32 %R34, 0; mem:Volatile LD4[%lsr.iv5](tbaa=!2)
	%R40<def> = LDRf32 %R34, 4; mem:Volatile LD4[%scevgep7](tbaa=!2)
	%D21<def> = LDRf64 %R32, -8; mem:LD4[%scevgep17](tbaa=!2) LD4[%scevgep15](tbaa=!2)
	%R36<def> = ADDri_r32 %R34<kill>, 16, %STATUS<imp-def,dead>
	%R34<def> = LDRi32_r32 %FP, -4; mem:LD4[FixedStack2]
	GID %CONFIG<imp-def,dead>
	%R35<def> = ADDri_r32 %R32, 16, %STATUS<imp-def,dead>
	%R33<def> = ADDri_r32 %R33<kill>, 4, %STATUS<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %R34<kill>
	GIE %CONFIG<imp-def,dead>
	%R43<def,tied1> = FMADDrr_r32 %R43<kill,tied0>, %R27, %R37<kill>, %STATUS<imp-def,dead>, %D21<imp-use,kill>, %D21<imp-def>
	%R42<def,tied1> = FMADDrr_r32 %R42<kill,tied0>, %R27, %R38<kill>, %STATUS<imp-def,dead>, %D21<imp-use,kill>, %D21<imp-def>
	%R44<def> = MOVi32rr %R43, %D22<imp-def>
	%R45<def> = MOVi32rr %R42<kill>, %D21<imp-use,kill>, %D22<imp-use,kill>, %D22<imp-def>
	STRf64 %D22<kill>, %R32, -8; mem:ST4[%scevgep17](tbaa=!2) ST4[%scevgep15](tbaa=!2)
	%R34<def> = LDRf32 %R32, 0; mem:LD4[%lsr.iv1214](tbaa=!2)
	%R34<def,tied1> = FMADDrr_r32 %R34<tied0>, %R27, %R39<kill>, %STATUS<imp-def,dead>
	STRf32 %R34<kill>, %R32, 0; mem:ST4[%lsr.iv1214](tbaa=!2)
	%R63<def> = LDRf32 %R32, 4; mem:LD4[%scevgep16](tbaa=!2)
	%R63<def,tied1> = FMADDrr_r32 %R63<tied0>, %R27, %R40<kill>, %STATUS<imp-def,dead>
	%R34<def,dead> = CMPri_r32 %R33, 8, %STATUS<imp-def>
	STRf32 %R63<kill>, %R32<kill>, 4; mem:ST4[%scevgep16](tbaa=!2)
	%R32<def> = MOVi32rr %R35<kill>
	%R34<def> = MOVi32rr %R36<kill>
	BCC <BB#6>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#6(0x7c000000 / 0x80000000 = 96.88%) BB#7(0x04000000 / 0x80000000 = 3.12%)

BB#7: derived from LLVM BB %for.end60
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#6
	%R26<def> = ADDri_r32 %R26<kill>, 1, %STATUS<imp-def,dead>
	%R25<def> = ADDrr_r32 %R25<kill>, %IP, %STATUS<imp-def,dead>
	%R27<def,dead> = CMPrr_r32 %R26, %R3, %STATUS<imp-def>
	BCC <BB#5>, 1, %STATUS<imp-use>
    Successors according to CFG: BB#8(0x04000000 / 0x80000000 = 3.12%) BB#5(0x7c000000 / 0x80000000 = 96.88%)

BB#8: derived from LLVM BB %for.cond64.preheader
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#7
	%R25<def> = MOVi32rr %R22
	%R26<def> = MOVi32rr %R19
    Successors according to CFG: BB#9(?%)

BB#9: derived from LLVM BB %for.body66
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#8 BB#9
	%R27<def> = ADDrr_r32 %R16, %R26, %STATUS<imp-def,dead>
	%R26<def> = ADDri_r32 %R26<kill>, 4, %STATUS<imp-def,dead>
	%R33<def> = LDRf32 %R27<kill>, 0; mem:LD4[%sunkaddr30](tbaa=!2)
	%R34<def> = LDRf32 %R25, 0; mem:Volatile LD4[%lsr.iv24](tbaa=!2)
	%R32<def> = LDRi32_r32 %FP, -4; mem:LD4[FixedStack2]
	GID %CONFIG<imp-def,dead>
	%R27<def> = ADDri_r32 %R25, 4, %STATUS<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %R32<kill>
	GIE %CONFIG<imp-def,dead>
	%R33<def> = FADDrr_r32 %R33<kill>, %R34<kill>, %STATUS<imp-def,dead>
	%R32<def,dead> = CMPri_r32 %R26, 32, %STATUS<imp-def>
	STRf32 %R33<kill>, %R25<kill>, 0; mem:Volatile ST4[%lsr.iv24](tbaa=!2)
	%R25<def> = MOVi32rr %R27<kill>
	BCC <BB#9>, 1, %STATUS<imp-use>
    Successors according to CFG: BB#10(0x04000000 / 0x80000000 = 3.12%) BB#9(0x7c000000 / 0x80000000 = 96.88%)

BB#10: derived from LLVM BB %for.end75
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#9
	%R24<def> = ADDri_r32 %R24<kill>, 8, %STATUS<imp-def,dead>
	%R22<def> = ADDri_r32 %R22<kill>, 32, %STATUS<imp-def,dead>
	%R23<def> = ADDri_r32 %R23<kill>, 32, %STATUS<imp-def,dead>
	%R25<def,dead> = CMPrr_r32 %R24, %R3, %STATUS<imp-def>
	BCC <BB#4>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#4(0x7c000000 / 0x80000000 = 96.88%) BB#11(0x04000000 / 0x80000000 = 3.12%)

BB#11: derived from LLVM BB %for.end78
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20
    Predecessors according to CFG: BB#10
	%R20<def> = ADDri_r32 %R20<kill>, 1, %STATUS<imp-def,dead>
	%R2<def> = ADDrr_r32 %R2<kill>, %IP, %STATUS<imp-def,dead>
	%R21<def,dead> = CMPrr_r32 %R20, %R3, %STATUS<imp-def>
	BCC <BB#3>, 1, %STATUS<imp-use>
    Successors according to CFG: BB#12(0x04000000 / 0x80000000 = 3.12%) BB#3(0x7c000000 / 0x80000000 = 96.88%)

BB#12: derived from LLVM BB %for.end81
    Predecessors according to CFG: BB#1 BB#11
	%R0<def> = LDRi32_r32 %FP, -44; mem:LD4[FixedStack1]
	GID
	%CONFIG<def> = MOVTS32_core %R0<kill>
	GIE %CONFIG<imp-use,kill>
	%LR<def> = LDRi64 %SP, 48; flags: FrameSetup
	%SP<def> = ADDri_r32 %SP, 48, %STATUS<imp-def>
	JR32 %LR

# End machine code for function matmac.


<----------------->
Inserting branch into BB#1
# Machine code for function matmac: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=32, align=8, at location [SP-40]
  fi#1: size=4, align=4, at location [SP-44]
  fi#2: size=4, align=4, at location [SP-4]
  fi#3: size=4, align=8, at location [SP-8]
Function Live Ins: %R0, %R1, %R2, %R3

BB#0: 
    Live Ins: %R0 %R1 %R2 %R3
	%SP<def,tied2> = STRi64_pmd %LR, %SP<tied0>, -48; flags: FrameSetup
	%FP<def> = ADDri_r32 %SP, 48, %STATUS<imp-def>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	%IP<def> = MOVi32ri 65535
	GID %CONFIG<imp-def>
	%R19<def> = MOVFS32_core %CONFIG, %D9<imp-def>
	%IP<def,tied1> = MOVTi32ri %IP<tied0>, 65521
	STRi32_r32 %R19, %FP, -44; mem:ST4[FixedStack1]
	%R18<def> = ANDrr_r32 %R19<kill>, %IP<kill>, %STATUS<imp-def>, %D9<imp-use,kill>, %D9<imp-def>
	%R19<def,tied1> = MOVTi32ri %R19<kill,tied0>, 72, %D9<imp-use,kill>, %D9<imp-def>
	STRi64 %D9<kill>, %FP, -8; mem:ST4[FixedStack3] ST4[FixedStack2]
	GIE %CONFIG<imp-use,kill>
    Successors according to CFG: BB#1(?%)

BB#1: derived from LLVM BB %entry
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#0
	%IP<def,dead> = CMPri_r32 %R3, 1, %STATUS<imp-def>
	BCC <BB#2>, 7, %STATUS<imp-use>
    Successors according to CFG: BB#2(0x50000000 / 0x80000000 = 62.50%) BB#12(0x30000000 / 0x80000000 = 37.50%)

BB#2: derived from LLVM BB %for.body3.lr.ph.preheader
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#1
	%R16<def> = MOViPTR %FP, -40
	%R19<def> = MOVi32ri 0, %D9<imp-def>
	%IP<def> = LSL32ri %R3, 2, %STATUS<imp-def,dead>
	%R1<def> = ADDri_r32 %R1<kill>, 8, %STATUS<imp-def,dead>
	%R17<def> = ADDri_r32 %R16, 8, %STATUS<imp-def,dead>
	%R20<def> = MOVi32rr %R19
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %for.body3.lr.ph
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20
    Predecessors according to CFG: BB#2 BB#11
	%R21<def> = LDRi32_r32 %FP, -8; mem:LD4[FixedStack3]
	GID %CONFIG<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %R21<kill>
	GIE %CONFIG<imp-def,dead>
	%R21<def> = IMULrr_r32 %R20, %R3, %STATUS<imp-def,dead>
	%R22<def> = MOVi32rr %R2
	%R21<def> = LSL32ri %R21<kill>, 2, %STATUS<imp-def,dead>
	%R23<def> = MOVi32rr %R1
	%R24<def> = MOVi32rr %R19
	%R21<def> = ADDrr_r32 %R0, %R21<kill>, %STATUS<imp-def,dead>
    Successors according to CFG: BB#4(?%)

BB#4: derived from LLVM BB %for.body9.preheader
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#3 BB#10
	%R18<def> = MOVi32rr %R19<kill>, %D9<imp-use,kill>, %D9<imp-def>
	STRi64 %D9, %FP, -16; mem:ST8[%1+24]
	STRi64 %D9, %FP, -24; mem:ST8[%1+16]
	STRi64 %D9, %FP, -32; mem:ST8[%1+8]
	STRi64 %D9, %FP, -40; mem:ST8[%1]
	%R25<def> = MOVi32rr %R23
	%R26<def> = MOVi32rr %R19
    Successors according to CFG: BB#5(?%)

BB#5: derived from LLVM BB %for.body9
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#4 BB#7
	%R27<def> = LSL32ri %R26, 2, %STATUS<imp-def,dead>
	%R27<def> = ADDrr_r32 %R21, %R27<kill>, %STATUS<imp-def,dead>
	%R27<def> = LDRf32 %R27<kill>, 0; mem:Volatile LD4[%add.ptr10](tbaa=!2)
	%R32<def> = MOVi32rr %R17
	%R34<def> = MOVi32rr %R25
	%R33<def> = MOVi32rr %R19
    Successors according to CFG: BB#6(?%)

BB#6: derived from LLVM BB %for.body13
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26 %R27 %R32 %R33 %R34
    Predecessors according to CFG: BB#5 BB#6
	%R37<def> = LDRf32 %R34, -8; mem:Volatile LD4[%scevgep8](tbaa=!2)
	%R38<def> = LDRf32 %R34, -4; mem:Volatile LD4[%scevgep9](tbaa=!2)
	%R39<def> = LDRf32 %R34, 0; mem:Volatile LD4[%lsr.iv5](tbaa=!2)
	%R40<def> = LDRf32 %R34, 4; mem:Volatile LD4[%scevgep7](tbaa=!2)
	%D21<def> = LDRf64 %R32, -8; mem:LD4[%scevgep17](tbaa=!2) LD4[%scevgep15](tbaa=!2)
	%R36<def> = ADDri_r32 %R34<kill>, 16, %STATUS<imp-def,dead>
	%R34<def> = LDRi32_r32 %FP, -4; mem:LD4[FixedStack2]
	GID %CONFIG<imp-def,dead>
	%R35<def> = ADDri_r32 %R32, 16, %STATUS<imp-def,dead>
	%R33<def> = ADDri_r32 %R33<kill>, 4, %STATUS<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %R34<kill>
	GIE %CONFIG<imp-def,dead>
	%R43<def,tied1> = FMADDrr_r32 %R43<kill,tied0>, %R27, %R37<kill>, %STATUS<imp-def,dead>, %D21<imp-use,kill>, %D21<imp-def>
	%R42<def,tied1> = FMADDrr_r32 %R42<kill,tied0>, %R27, %R38<kill>, %STATUS<imp-def,dead>, %D21<imp-use,kill>, %D21<imp-def>
	%R44<def> = MOVi32rr %R43, %D22<imp-def>
	%R45<def> = MOVi32rr %R42<kill>, %D21<imp-use,kill>, %D22<imp-use,kill>, %D22<imp-def>
	STRf64 %D22<kill>, %R32, -8; mem:ST4[%scevgep17](tbaa=!2) ST4[%scevgep15](tbaa=!2)
	%R34<def> = LDRf32 %R32, 0; mem:LD4[%lsr.iv1214](tbaa=!2)
	%R34<def,tied1> = FMADDrr_r32 %R34<tied0>, %R27, %R39<kill>, %STATUS<imp-def,dead>
	STRf32 %R34<kill>, %R32, 0; mem:ST4[%lsr.iv1214](tbaa=!2)
	%R63<def> = LDRf32 %R32, 4; mem:LD4[%scevgep16](tbaa=!2)
	%R63<def,tied1> = FMADDrr_r32 %R63<tied0>, %R27, %R40<kill>, %STATUS<imp-def,dead>
	%R34<def,dead> = CMPri_r32 %R33, 8, %STATUS<imp-def>
	STRf32 %R63<kill>, %R32<kill>, 4; mem:ST4[%scevgep16](tbaa=!2)
	%R32<def> = MOVi32rr %R35<kill>
	%R34<def> = MOVi32rr %R36<kill>
	BCC <BB#6>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#6(0x7c000000 / 0x80000000 = 96.88%) BB#7(0x04000000 / 0x80000000 = 3.12%)

BB#7: derived from LLVM BB %for.end60
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#6
	%R26<def> = ADDri_r32 %R26<kill>, 1, %STATUS<imp-def,dead>
	%R25<def> = ADDrr_r32 %R25<kill>, %IP, %STATUS<imp-def,dead>
	%R27<def,dead> = CMPrr_r32 %R26, %R3, %STATUS<imp-def>
	BCC <BB#5>, 1, %STATUS<imp-use>
    Successors according to CFG: BB#8(0x04000000 / 0x80000000 = 3.12%) BB#5(0x7c000000 / 0x80000000 = 96.88%)

BB#8: derived from LLVM BB %for.cond64.preheader
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#7
	%R25<def> = MOVi32rr %R22
	%R26<def> = MOVi32rr %R19
    Successors according to CFG: BB#9(?%)

BB#9: derived from LLVM BB %for.body66
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#8 BB#9
	%R27<def> = ADDrr_r32 %R16, %R26, %STATUS<imp-def,dead>
	%R26<def> = ADDri_r32 %R26<kill>, 4, %STATUS<imp-def,dead>
	%R33<def> = LDRf32 %R27<kill>, 0; mem:LD4[%sunkaddr30](tbaa=!2)
	%R34<def> = LDRf32 %R25, 0; mem:Volatile LD4[%lsr.iv24](tbaa=!2)
	%R32<def> = LDRi32_r32 %FP, -4; mem:LD4[FixedStack2]
	GID %CONFIG<imp-def,dead>
	%R27<def> = ADDri_r32 %R25, 4, %STATUS<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %R32<kill>
	GIE %CONFIG<imp-def,dead>
	%R33<def> = FADDrr_r32 %R33<kill>, %R34<kill>, %STATUS<imp-def,dead>
	%R32<def,dead> = CMPri_r32 %R26, 32, %STATUS<imp-def>
	STRf32 %R33<kill>, %R25<kill>, 0; mem:Volatile ST4[%lsr.iv24](tbaa=!2)
	%R25<def> = MOVi32rr %R27<kill>
	BCC <BB#9>, 1, %STATUS<imp-use>
    Successors according to CFG: BB#10(0x04000000 / 0x80000000 = 3.12%) BB#9(0x7c000000 / 0x80000000 = 96.88%)

BB#10: derived from LLVM BB %for.end75
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#9
	%R24<def> = ADDri_r32 %R24<kill>, 8, %STATUS<imp-def,dead>
	%R22<def> = ADDri_r32 %R22<kill>, 32, %STATUS<imp-def,dead>
	%R23<def> = ADDri_r32 %R23<kill>, 32, %STATUS<imp-def,dead>
	%R25<def,dead> = CMPrr_r32 %R24, %R3, %STATUS<imp-def>
	BCC <BB#4>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#4(0x7c000000 / 0x80000000 = 96.88%) BB#11(0x04000000 / 0x80000000 = 3.12%)

BB#11: derived from LLVM BB %for.end78
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20
    Predecessors according to CFG: BB#10
	%R20<def> = ADDri_r32 %R20<kill>, 1, %STATUS<imp-def,dead>
	%R2<def> = ADDrr_r32 %R2<kill>, %IP, %STATUS<imp-def,dead>
	%R21<def,dead> = CMPrr_r32 %R20, %R3, %STATUS<imp-def>
	BCC <BB#3>, 1, %STATUS<imp-use>
    Successors according to CFG: BB#12(0x04000000 / 0x80000000 = 3.12%) BB#3(0x7c000000 / 0x80000000 = 96.88%)

BB#12: derived from LLVM BB %for.end81
    Predecessors according to CFG: BB#1 BB#11
	%R0<def> = LDRi32_r32 %FP, -44; mem:LD4[FixedStack1]
	GID
	%CONFIG<def> = MOVTS32_core %R0<kill>
	GIE %CONFIG<imp-use,kill>
	%LR<def> = LDRi64 %SP, 48; flags: FrameSetup
	%SP<def> = ADDri_r32 %SP, 48, %STATUS<imp-def>
	JR32 %LR

# End machine code for function matmac.


<----------------->
Analyzing block 1
BB#1: derived from LLVM BB %entry
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#0
	%IP<def,dead> = CMPri_r32 %R3, 1, %STATUS<imp-def>
	BCC <BB#2>, 7, %STATUS<imp-use>
    Successors according to CFG: BB#2(0x50000000 / 0x80000000 = 62.50%) BB#12(0x30000000 / 0x80000000 = 37.50%)

<----------------->
Removing branches out of BB#1
# Machine code for function matmac: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=32, align=8, at location [SP-40]
  fi#1: size=4, align=4, at location [SP-44]
  fi#2: size=4, align=4, at location [SP-4]
  fi#3: size=4, align=8, at location [SP-8]
Function Live Ins: %R0, %R1, %R2, %R3

BB#0: 
    Live Ins: %R0 %R1 %R2 %R3
	%SP<def,tied2> = STRi64_pmd %LR, %SP<tied0>, -48; flags: FrameSetup
	%FP<def> = ADDri_r32 %SP, 48, %STATUS<imp-def>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	%IP<def> = MOVi32ri 65535
	GID %CONFIG<imp-def>
	%R19<def> = MOVFS32_core %CONFIG, %D9<imp-def>
	%IP<def,tied1> = MOVTi32ri %IP<tied0>, 65521
	STRi32_r32 %R19, %FP, -44; mem:ST4[FixedStack1]
	%R18<def> = ANDrr_r32 %R19<kill>, %IP<kill>, %STATUS<imp-def>, %D9<imp-use,kill>, %D9<imp-def>
	%R19<def,tied1> = MOVTi32ri %R19<kill,tied0>, 72, %D9<imp-use,kill>, %D9<imp-def>
	STRi64 %D9<kill>, %FP, -8; mem:ST4[FixedStack3] ST4[FixedStack2]
	GIE %CONFIG<imp-use,kill>
    Successors according to CFG: BB#1(?%)

BB#1: derived from LLVM BB %entry
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#0
	%IP<def,dead> = CMPri_r32 %R3, 1, %STATUS<imp-def>
    Successors according to CFG: BB#2(0x50000000 / 0x80000000 = 62.50%) BB#12(0x30000000 / 0x80000000 = 37.50%)

BB#2: derived from LLVM BB %for.body3.lr.ph.preheader
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#1
	%R16<def> = MOViPTR %FP, -40
	%R19<def> = MOVi32ri 0, %D9<imp-def>
	%IP<def> = LSL32ri %R3, 2, %STATUS<imp-def,dead>
	%R1<def> = ADDri_r32 %R1<kill>, 8, %STATUS<imp-def,dead>
	%R17<def> = ADDri_r32 %R16, 8, %STATUS<imp-def,dead>
	%R20<def> = MOVi32rr %R19
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %for.body3.lr.ph
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20
    Predecessors according to CFG: BB#2 BB#11
	%R21<def> = LDRi32_r32 %FP, -8; mem:LD4[FixedStack3]
	GID %CONFIG<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %R21<kill>
	GIE %CONFIG<imp-def,dead>
	%R21<def> = IMULrr_r32 %R20, %R3, %STATUS<imp-def,dead>
	%R22<def> = MOVi32rr %R2
	%R21<def> = LSL32ri %R21<kill>, 2, %STATUS<imp-def,dead>
	%R23<def> = MOVi32rr %R1
	%R24<def> = MOVi32rr %R19
	%R21<def> = ADDrr_r32 %R0, %R21<kill>, %STATUS<imp-def,dead>
    Successors according to CFG: BB#4(?%)

BB#4: derived from LLVM BB %for.body9.preheader
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#3 BB#10
	%R18<def> = MOVi32rr %R19<kill>, %D9<imp-use,kill>, %D9<imp-def>
	STRi64 %D9, %FP, -16; mem:ST8[%1+24]
	STRi64 %D9, %FP, -24; mem:ST8[%1+16]
	STRi64 %D9, %FP, -32; mem:ST8[%1+8]
	STRi64 %D9, %FP, -40; mem:ST8[%1]
	%R25<def> = MOVi32rr %R23
	%R26<def> = MOVi32rr %R19
    Successors according to CFG: BB#5(?%)

BB#5: derived from LLVM BB %for.body9
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#4 BB#7
	%R27<def> = LSL32ri %R26, 2, %STATUS<imp-def,dead>
	%R27<def> = ADDrr_r32 %R21, %R27<kill>, %STATUS<imp-def,dead>
	%R27<def> = LDRf32 %R27<kill>, 0; mem:Volatile LD4[%add.ptr10](tbaa=!2)
	%R32<def> = MOVi32rr %R17
	%R34<def> = MOVi32rr %R25
	%R33<def> = MOVi32rr %R19
    Successors according to CFG: BB#6(?%)

BB#6: derived from LLVM BB %for.body13
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26 %R27 %R32 %R33 %R34
    Predecessors according to CFG: BB#5 BB#6
	%R37<def> = LDRf32 %R34, -8; mem:Volatile LD4[%scevgep8](tbaa=!2)
	%R38<def> = LDRf32 %R34, -4; mem:Volatile LD4[%scevgep9](tbaa=!2)
	%R39<def> = LDRf32 %R34, 0; mem:Volatile LD4[%lsr.iv5](tbaa=!2)
	%R40<def> = LDRf32 %R34, 4; mem:Volatile LD4[%scevgep7](tbaa=!2)
	%D21<def> = LDRf64 %R32, -8; mem:LD4[%scevgep17](tbaa=!2) LD4[%scevgep15](tbaa=!2)
	%R36<def> = ADDri_r32 %R34<kill>, 16, %STATUS<imp-def,dead>
	%R34<def> = LDRi32_r32 %FP, -4; mem:LD4[FixedStack2]
	GID %CONFIG<imp-def,dead>
	%R35<def> = ADDri_r32 %R32, 16, %STATUS<imp-def,dead>
	%R33<def> = ADDri_r32 %R33<kill>, 4, %STATUS<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %R34<kill>
	GIE %CONFIG<imp-def,dead>
	%R43<def,tied1> = FMADDrr_r32 %R43<kill,tied0>, %R27, %R37<kill>, %STATUS<imp-def,dead>, %D21<imp-use,kill>, %D21<imp-def>
	%R42<def,tied1> = FMADDrr_r32 %R42<kill,tied0>, %R27, %R38<kill>, %STATUS<imp-def,dead>, %D21<imp-use,kill>, %D21<imp-def>
	%R44<def> = MOVi32rr %R43, %D22<imp-def>
	%R45<def> = MOVi32rr %R42<kill>, %D21<imp-use,kill>, %D22<imp-use,kill>, %D22<imp-def>
	STRf64 %D22<kill>, %R32, -8; mem:ST4[%scevgep17](tbaa=!2) ST4[%scevgep15](tbaa=!2)
	%R34<def> = LDRf32 %R32, 0; mem:LD4[%lsr.iv1214](tbaa=!2)
	%R34<def,tied1> = FMADDrr_r32 %R34<tied0>, %R27, %R39<kill>, %STATUS<imp-def,dead>
	STRf32 %R34<kill>, %R32, 0; mem:ST4[%lsr.iv1214](tbaa=!2)
	%R63<def> = LDRf32 %R32, 4; mem:LD4[%scevgep16](tbaa=!2)
	%R63<def,tied1> = FMADDrr_r32 %R63<tied0>, %R27, %R40<kill>, %STATUS<imp-def,dead>
	%R34<def,dead> = CMPri_r32 %R33, 8, %STATUS<imp-def>
	STRf32 %R63<kill>, %R32<kill>, 4; mem:ST4[%scevgep16](tbaa=!2)
	%R32<def> = MOVi32rr %R35<kill>
	%R34<def> = MOVi32rr %R36<kill>
	BCC <BB#6>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#6(0x7c000000 / 0x80000000 = 96.88%) BB#7(0x04000000 / 0x80000000 = 3.12%)

BB#7: derived from LLVM BB %for.end60
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#6
	%R26<def> = ADDri_r32 %R26<kill>, 1, %STATUS<imp-def,dead>
	%R25<def> = ADDrr_r32 %R25<kill>, %IP, %STATUS<imp-def,dead>
	%R27<def,dead> = CMPrr_r32 %R26, %R3, %STATUS<imp-def>
	BCC <BB#5>, 1, %STATUS<imp-use>
    Successors according to CFG: BB#8(0x04000000 / 0x80000000 = 3.12%) BB#5(0x7c000000 / 0x80000000 = 96.88%)

BB#8: derived from LLVM BB %for.cond64.preheader
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#7
	%R25<def> = MOVi32rr %R22
	%R26<def> = MOVi32rr %R19
    Successors according to CFG: BB#9(?%)

BB#9: derived from LLVM BB %for.body66
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#8 BB#9
	%R27<def> = ADDrr_r32 %R16, %R26, %STATUS<imp-def,dead>
	%R26<def> = ADDri_r32 %R26<kill>, 4, %STATUS<imp-def,dead>
	%R33<def> = LDRf32 %R27<kill>, 0; mem:LD4[%sunkaddr30](tbaa=!2)
	%R34<def> = LDRf32 %R25, 0; mem:Volatile LD4[%lsr.iv24](tbaa=!2)
	%R32<def> = LDRi32_r32 %FP, -4; mem:LD4[FixedStack2]
	GID %CONFIG<imp-def,dead>
	%R27<def> = ADDri_r32 %R25, 4, %STATUS<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %R32<kill>
	GIE %CONFIG<imp-def,dead>
	%R33<def> = FADDrr_r32 %R33<kill>, %R34<kill>, %STATUS<imp-def,dead>
	%R32<def,dead> = CMPri_r32 %R26, 32, %STATUS<imp-def>
	STRf32 %R33<kill>, %R25<kill>, 0; mem:Volatile ST4[%lsr.iv24](tbaa=!2)
	%R25<def> = MOVi32rr %R27<kill>
	BCC <BB#9>, 1, %STATUS<imp-use>
    Successors according to CFG: BB#10(0x04000000 / 0x80000000 = 3.12%) BB#9(0x7c000000 / 0x80000000 = 96.88%)

BB#10: derived from LLVM BB %for.end75
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#9
	%R24<def> = ADDri_r32 %R24<kill>, 8, %STATUS<imp-def,dead>
	%R22<def> = ADDri_r32 %R22<kill>, 32, %STATUS<imp-def,dead>
	%R23<def> = ADDri_r32 %R23<kill>, 32, %STATUS<imp-def,dead>
	%R25<def,dead> = CMPrr_r32 %R24, %R3, %STATUS<imp-def>
	BCC <BB#4>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#4(0x7c000000 / 0x80000000 = 96.88%) BB#11(0x04000000 / 0x80000000 = 3.12%)

BB#11: derived from LLVM BB %for.end78
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20
    Predecessors according to CFG: BB#10
	%R20<def> = ADDri_r32 %R20<kill>, 1, %STATUS<imp-def,dead>
	%R2<def> = ADDrr_r32 %R2<kill>, %IP, %STATUS<imp-def,dead>
	%R21<def,dead> = CMPrr_r32 %R20, %R3, %STATUS<imp-def>
	BCC <BB#3>, 1, %STATUS<imp-use>
    Successors according to CFG: BB#12(0x04000000 / 0x80000000 = 3.12%) BB#3(0x7c000000 / 0x80000000 = 96.88%)

BB#12: derived from LLVM BB %for.end81
    Predecessors according to CFG: BB#1 BB#11
	%R0<def> = LDRi32_r32 %FP, -44; mem:LD4[FixedStack1]
	GID
	%CONFIG<def> = MOVTS32_core %R0<kill>
	GIE %CONFIG<imp-use,kill>
	%LR<def> = LDRi64 %SP, 48; flags: FrameSetup
	%SP<def> = ADDri_r32 %SP, 48, %STATUS<imp-def>
	JR32 %LR

# End machine code for function matmac.


<----------------->
Inserting branch into BB#1
# Machine code for function matmac: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=32, align=8, at location [SP-40]
  fi#1: size=4, align=4, at location [SP-44]
  fi#2: size=4, align=4, at location [SP-4]
  fi#3: size=4, align=8, at location [SP-8]
Function Live Ins: %R0, %R1, %R2, %R3

BB#0: 
    Live Ins: %R0 %R1 %R2 %R3
	%SP<def,tied2> = STRi64_pmd %LR, %SP<tied0>, -48; flags: FrameSetup
	%FP<def> = ADDri_r32 %SP, 48, %STATUS<imp-def>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	%IP<def> = MOVi32ri 65535
	GID %CONFIG<imp-def>
	%R19<def> = MOVFS32_core %CONFIG, %D9<imp-def>
	%IP<def,tied1> = MOVTi32ri %IP<tied0>, 65521
	STRi32_r32 %R19, %FP, -44; mem:ST4[FixedStack1]
	%R18<def> = ANDrr_r32 %R19<kill>, %IP<kill>, %STATUS<imp-def>, %D9<imp-use,kill>, %D9<imp-def>
	%R19<def,tied1> = MOVTi32ri %R19<kill,tied0>, 72, %D9<imp-use,kill>, %D9<imp-def>
	STRi64 %D9<kill>, %FP, -8; mem:ST4[FixedStack3] ST4[FixedStack2]
	GIE %CONFIG<imp-use,kill>
    Successors according to CFG: BB#1(?%)

BB#1: derived from LLVM BB %entry
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#0
	%IP<def,dead> = CMPri_r32 %R3, 1, %STATUS<imp-def>
	BCC <BB#12>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#2(0x50000000 / 0x80000000 = 62.50%) BB#12(0x30000000 / 0x80000000 = 37.50%)

BB#2: derived from LLVM BB %for.body3.lr.ph.preheader
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#1
	%R16<def> = MOViPTR %FP, -40
	%R19<def> = MOVi32ri 0, %D9<imp-def>
	%IP<def> = LSL32ri %R3, 2, %STATUS<imp-def,dead>
	%R1<def> = ADDri_r32 %R1<kill>, 8, %STATUS<imp-def,dead>
	%R17<def> = ADDri_r32 %R16, 8, %STATUS<imp-def,dead>
	%R20<def> = MOVi32rr %R19
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %for.body3.lr.ph
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20
    Predecessors according to CFG: BB#2 BB#11
	%R21<def> = LDRi32_r32 %FP, -8; mem:LD4[FixedStack3]
	GID %CONFIG<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %R21<kill>
	GIE %CONFIG<imp-def,dead>
	%R21<def> = IMULrr_r32 %R20, %R3, %STATUS<imp-def,dead>
	%R22<def> = MOVi32rr %R2
	%R21<def> = LSL32ri %R21<kill>, 2, %STATUS<imp-def,dead>
	%R23<def> = MOVi32rr %R1
	%R24<def> = MOVi32rr %R19
	%R21<def> = ADDrr_r32 %R0, %R21<kill>, %STATUS<imp-def,dead>
    Successors according to CFG: BB#4(?%)

BB#4: derived from LLVM BB %for.body9.preheader
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#3 BB#10
	%R18<def> = MOVi32rr %R19<kill>, %D9<imp-use,kill>, %D9<imp-def>
	STRi64 %D9, %FP, -16; mem:ST8[%1+24]
	STRi64 %D9, %FP, -24; mem:ST8[%1+16]
	STRi64 %D9, %FP, -32; mem:ST8[%1+8]
	STRi64 %D9, %FP, -40; mem:ST8[%1]
	%R25<def> = MOVi32rr %R23
	%R26<def> = MOVi32rr %R19
    Successors according to CFG: BB#5(?%)

BB#5: derived from LLVM BB %for.body9
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#4 BB#7
	%R27<def> = LSL32ri %R26, 2, %STATUS<imp-def,dead>
	%R27<def> = ADDrr_r32 %R21, %R27<kill>, %STATUS<imp-def,dead>
	%R27<def> = LDRf32 %R27<kill>, 0; mem:Volatile LD4[%add.ptr10](tbaa=!2)
	%R32<def> = MOVi32rr %R17
	%R34<def> = MOVi32rr %R25
	%R33<def> = MOVi32rr %R19
    Successors according to CFG: BB#6(?%)

BB#6: derived from LLVM BB %for.body13
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26 %R27 %R32 %R33 %R34
    Predecessors according to CFG: BB#5 BB#6
	%R37<def> = LDRf32 %R34, -8; mem:Volatile LD4[%scevgep8](tbaa=!2)
	%R38<def> = LDRf32 %R34, -4; mem:Volatile LD4[%scevgep9](tbaa=!2)
	%R39<def> = LDRf32 %R34, 0; mem:Volatile LD4[%lsr.iv5](tbaa=!2)
	%R40<def> = LDRf32 %R34, 4; mem:Volatile LD4[%scevgep7](tbaa=!2)
	%D21<def> = LDRf64 %R32, -8; mem:LD4[%scevgep17](tbaa=!2) LD4[%scevgep15](tbaa=!2)
	%R36<def> = ADDri_r32 %R34<kill>, 16, %STATUS<imp-def,dead>
	%R34<def> = LDRi32_r32 %FP, -4; mem:LD4[FixedStack2]
	GID %CONFIG<imp-def,dead>
	%R35<def> = ADDri_r32 %R32, 16, %STATUS<imp-def,dead>
	%R33<def> = ADDri_r32 %R33<kill>, 4, %STATUS<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %R34<kill>
	GIE %CONFIG<imp-def,dead>
	%R43<def,tied1> = FMADDrr_r32 %R43<kill,tied0>, %R27, %R37<kill>, %STATUS<imp-def,dead>, %D21<imp-use,kill>, %D21<imp-def>
	%R42<def,tied1> = FMADDrr_r32 %R42<kill,tied0>, %R27, %R38<kill>, %STATUS<imp-def,dead>, %D21<imp-use,kill>, %D21<imp-def>
	%R44<def> = MOVi32rr %R43, %D22<imp-def>
	%R45<def> = MOVi32rr %R42<kill>, %D21<imp-use,kill>, %D22<imp-use,kill>, %D22<imp-def>
	STRf64 %D22<kill>, %R32, -8; mem:ST4[%scevgep17](tbaa=!2) ST4[%scevgep15](tbaa=!2)
	%R34<def> = LDRf32 %R32, 0; mem:LD4[%lsr.iv1214](tbaa=!2)
	%R34<def,tied1> = FMADDrr_r32 %R34<tied0>, %R27, %R39<kill>, %STATUS<imp-def,dead>
	STRf32 %R34<kill>, %R32, 0; mem:ST4[%lsr.iv1214](tbaa=!2)
	%R63<def> = LDRf32 %R32, 4; mem:LD4[%scevgep16](tbaa=!2)
	%R63<def,tied1> = FMADDrr_r32 %R63<tied0>, %R27, %R40<kill>, %STATUS<imp-def,dead>
	%R34<def,dead> = CMPri_r32 %R33, 8, %STATUS<imp-def>
	STRf32 %R63<kill>, %R32<kill>, 4; mem:ST4[%scevgep16](tbaa=!2)
	%R32<def> = MOVi32rr %R35<kill>
	%R34<def> = MOVi32rr %R36<kill>
	BCC <BB#6>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#6(0x7c000000 / 0x80000000 = 96.88%) BB#7(0x04000000 / 0x80000000 = 3.12%)

BB#7: derived from LLVM BB %for.end60
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#6
	%R26<def> = ADDri_r32 %R26<kill>, 1, %STATUS<imp-def,dead>
	%R25<def> = ADDrr_r32 %R25<kill>, %IP, %STATUS<imp-def,dead>
	%R27<def,dead> = CMPrr_r32 %R26, %R3, %STATUS<imp-def>
	BCC <BB#5>, 1, %STATUS<imp-use>
    Successors according to CFG: BB#8(0x04000000 / 0x80000000 = 3.12%) BB#5(0x7c000000 / 0x80000000 = 96.88%)

BB#8: derived from LLVM BB %for.cond64.preheader
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#7
	%R25<def> = MOVi32rr %R22
	%R26<def> = MOVi32rr %R19
    Successors according to CFG: BB#9(?%)

BB#9: derived from LLVM BB %for.body66
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#8 BB#9
	%R27<def> = ADDrr_r32 %R16, %R26, %STATUS<imp-def,dead>
	%R26<def> = ADDri_r32 %R26<kill>, 4, %STATUS<imp-def,dead>
	%R33<def> = LDRf32 %R27<kill>, 0; mem:LD4[%sunkaddr30](tbaa=!2)
	%R34<def> = LDRf32 %R25, 0; mem:Volatile LD4[%lsr.iv24](tbaa=!2)
	%R32<def> = LDRi32_r32 %FP, -4; mem:LD4[FixedStack2]
	GID %CONFIG<imp-def,dead>
	%R27<def> = ADDri_r32 %R25, 4, %STATUS<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %R32<kill>
	GIE %CONFIG<imp-def,dead>
	%R33<def> = FADDrr_r32 %R33<kill>, %R34<kill>, %STATUS<imp-def,dead>
	%R32<def,dead> = CMPri_r32 %R26, 32, %STATUS<imp-def>
	STRf32 %R33<kill>, %R25<kill>, 0; mem:Volatile ST4[%lsr.iv24](tbaa=!2)
	%R25<def> = MOVi32rr %R27<kill>
	BCC <BB#9>, 1, %STATUS<imp-use>
    Successors according to CFG: BB#10(0x04000000 / 0x80000000 = 3.12%) BB#9(0x7c000000 / 0x80000000 = 96.88%)

BB#10: derived from LLVM BB %for.end75
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#9
	%R24<def> = ADDri_r32 %R24<kill>, 8, %STATUS<imp-def,dead>
	%R22<def> = ADDri_r32 %R22<kill>, 32, %STATUS<imp-def,dead>
	%R23<def> = ADDri_r32 %R23<kill>, 32, %STATUS<imp-def,dead>
	%R25<def,dead> = CMPrr_r32 %R24, %R3, %STATUS<imp-def>
	BCC <BB#4>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#4(0x7c000000 / 0x80000000 = 96.88%) BB#11(0x04000000 / 0x80000000 = 3.12%)

BB#11: derived from LLVM BB %for.end78
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20
    Predecessors according to CFG: BB#10
	%R20<def> = ADDri_r32 %R20<kill>, 1, %STATUS<imp-def,dead>
	%R2<def> = ADDrr_r32 %R2<kill>, %IP, %STATUS<imp-def,dead>
	%R21<def,dead> = CMPrr_r32 %R20, %R3, %STATUS<imp-def>
	BCC <BB#3>, 1, %STATUS<imp-use>
    Successors according to CFG: BB#12(0x04000000 / 0x80000000 = 3.12%) BB#3(0x7c000000 / 0x80000000 = 96.88%)

BB#12: derived from LLVM BB %for.end81
    Predecessors according to CFG: BB#1 BB#11
	%R0<def> = LDRi32_r32 %FP, -44; mem:LD4[FixedStack1]
	GID
	%CONFIG<def> = MOVTS32_core %R0<kill>
	GIE %CONFIG<imp-use,kill>
	%LR<def> = LDRi64 %SP, 48; flags: FrameSetup
	%SP<def> = ADDri_r32 %SP, 48, %STATUS<imp-def>
	JR32 %LR

# End machine code for function matmac.


<----------------->
Analyzing block 0
BB#0: 
    Live Ins: %R0 %R1 %R2 %R3
	%SP<def,tied2> = STRi64_pmd %LR, %SP<tied0>, -48; flags: FrameSetup
	%FP<def> = ADDri_r32 %SP, 48, %STATUS<imp-def>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	%IP<def> = MOVi32ri 65535
	GID %CONFIG<imp-def>
	%R19<def> = MOVFS32_core %CONFIG, %D9<imp-def>
	%IP<def,tied1> = MOVTi32ri %IP<tied0>, 65521
	STRi32_r32 %R19, %FP, -44; mem:ST4[FixedStack1]
	%R18<def> = ANDrr_r32 %R19<kill>, %IP<kill>, %STATUS<imp-def>, %D9<imp-use,kill>, %D9<imp-def>
	%R19<def,tied1> = MOVTi32ri %R19<kill,tied0>, 72, %D9<imp-use,kill>, %D9<imp-def>
	STRi64 %D9<kill>, %FP, -8; mem:ST4[FixedStack3] ST4[FixedStack2]
	GIE %CONFIG<imp-use,kill>
    Successors according to CFG: BB#1(?%)

<----------------->
Analyzing block 1
BB#1: derived from LLVM BB %entry
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#0
	%IP<def,dead> = CMPri_r32 %R3, 1, %STATUS<imp-def>
	BCC <BB#12>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#2(0x50000000 / 0x80000000 = 62.50%) BB#12(0x30000000 / 0x80000000 = 37.50%)

<----------------->
Analyzing block 2
BB#2: derived from LLVM BB %for.body3.lr.ph.preheader
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#1
	%R16<def> = MOViPTR %FP, -40
	%R19<def> = MOVi32ri 0, %D9<imp-def>
	%IP<def> = LSL32ri %R3, 2, %STATUS<imp-def,dead>
	%R1<def> = ADDri_r32 %R1<kill>, 8, %STATUS<imp-def,dead>
	%R17<def> = ADDri_r32 %R16, 8, %STATUS<imp-def,dead>
	%R20<def> = MOVi32rr %R19
    Successors according to CFG: BB#3(?%)

<----------------->
Analyzing block 3
BB#3: derived from LLVM BB %for.body3.lr.ph
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20
    Predecessors according to CFG: BB#2 BB#11
	%R21<def> = LDRi32_r32 %FP, -8; mem:LD4[FixedStack3]
	GID %CONFIG<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %R21<kill>
	GIE %CONFIG<imp-def,dead>
	%R21<def> = IMULrr_r32 %R20, %R3, %STATUS<imp-def,dead>
	%R22<def> = MOVi32rr %R2
	%R21<def> = LSL32ri %R21<kill>, 2, %STATUS<imp-def,dead>
	%R23<def> = MOVi32rr %R1
	%R24<def> = MOVi32rr %R19
	%R21<def> = ADDrr_r32 %R0, %R21<kill>, %STATUS<imp-def,dead>
    Successors according to CFG: BB#4(?%)

<----------------->
Analyzing block 4
BB#4: derived from LLVM BB %for.body9.preheader
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#3 BB#10
	%R18<def> = MOVi32rr %R19<kill>, %D9<imp-use,kill>, %D9<imp-def>
	STRi64 %D9, %FP, -16; mem:ST8[%1+24]
	STRi64 %D9, %FP, -24; mem:ST8[%1+16]
	STRi64 %D9, %FP, -32; mem:ST8[%1+8]
	STRi64 %D9, %FP, -40; mem:ST8[%1]
	%R25<def> = MOVi32rr %R23
	%R26<def> = MOVi32rr %R19
    Successors according to CFG: BB#5(?%)

<----------------->
Analyzing block 5
BB#5: derived from LLVM BB %for.body9
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#4 BB#7
	%R27<def> = LSL32ri %R26, 2, %STATUS<imp-def,dead>
	%R27<def> = ADDrr_r32 %R21, %R27<kill>, %STATUS<imp-def,dead>
	%R27<def> = LDRf32 %R27<kill>, 0; mem:Volatile LD4[%add.ptr10](tbaa=!2)
	%R32<def> = MOVi32rr %R17
	%R34<def> = MOVi32rr %R25
	%R33<def> = MOVi32rr %R19
    Successors according to CFG: BB#6(?%)

<----------------->
Analyzing block 6
BB#6: derived from LLVM BB %for.body13
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26 %R27 %R32 %R33 %R34
    Predecessors according to CFG: BB#5 BB#6
	%R37<def> = LDRf32 %R34, -8; mem:Volatile LD4[%scevgep8](tbaa=!2)
	%R38<def> = LDRf32 %R34, -4; mem:Volatile LD4[%scevgep9](tbaa=!2)
	%R39<def> = LDRf32 %R34, 0; mem:Volatile LD4[%lsr.iv5](tbaa=!2)
	%R40<def> = LDRf32 %R34, 4; mem:Volatile LD4[%scevgep7](tbaa=!2)
	%D21<def> = LDRf64 %R32, -8; mem:LD4[%scevgep17](tbaa=!2) LD4[%scevgep15](tbaa=!2)
	%R36<def> = ADDri_r32 %R34<kill>, 16, %STATUS<imp-def,dead>
	%R34<def> = LDRi32_r32 %FP, -4; mem:LD4[FixedStack2]
	GID %CONFIG<imp-def,dead>
	%R35<def> = ADDri_r32 %R32, 16, %STATUS<imp-def,dead>
	%R33<def> = ADDri_r32 %R33<kill>, 4, %STATUS<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %R34<kill>
	GIE %CONFIG<imp-def,dead>
	%R43<def,tied1> = FMADDrr_r32 %R43<kill,tied0>, %R27, %R37<kill>, %STATUS<imp-def,dead>, %D21<imp-use,kill>, %D21<imp-def>
	%R42<def,tied1> = FMADDrr_r32 %R42<kill,tied0>, %R27, %R38<kill>, %STATUS<imp-def,dead>, %D21<imp-use,kill>, %D21<imp-def>
	%R44<def> = MOVi32rr %R43, %D22<imp-def>
	%R45<def> = MOVi32rr %R42<kill>, %D21<imp-use,kill>, %D22<imp-use,kill>, %D22<imp-def>
	STRf64 %D22<kill>, %R32, -8; mem:ST4[%scevgep17](tbaa=!2) ST4[%scevgep15](tbaa=!2)
	%R34<def> = LDRf32 %R32, 0; mem:LD4[%lsr.iv1214](tbaa=!2)
	%R34<def,tied1> = FMADDrr_r32 %R34<tied0>, %R27, %R39<kill>, %STATUS<imp-def,dead>
	STRf32 %R34<kill>, %R32, 0; mem:ST4[%lsr.iv1214](tbaa=!2)
	%R63<def> = LDRf32 %R32, 4; mem:LD4[%scevgep16](tbaa=!2)
	%R63<def,tied1> = FMADDrr_r32 %R63<tied0>, %R27, %R40<kill>, %STATUS<imp-def,dead>
	%R34<def,dead> = CMPri_r32 %R33, 8, %STATUS<imp-def>
	STRf32 %R63<kill>, %R32<kill>, 4; mem:ST4[%scevgep16](tbaa=!2)
	%R32<def> = MOVi32rr %R35<kill>
	%R34<def> = MOVi32rr %R36<kill>
	BCC <BB#6>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#6(0x7c000000 / 0x80000000 = 96.88%) BB#7(0x04000000 / 0x80000000 = 3.12%)

<----------------->
Analyzing block 7
BB#7: derived from LLVM BB %for.end60
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#6
	%R26<def> = ADDri_r32 %R26<kill>, 1, %STATUS<imp-def,dead>
	%R25<def> = ADDrr_r32 %R25<kill>, %IP, %STATUS<imp-def,dead>
	%R27<def,dead> = CMPrr_r32 %R26, %R3, %STATUS<imp-def>
	BCC <BB#5>, 1, %STATUS<imp-use>
    Successors according to CFG: BB#8(0x04000000 / 0x80000000 = 3.12%) BB#5(0x7c000000 / 0x80000000 = 96.88%)

<----------------->
Analyzing block 8
BB#8: derived from LLVM BB %for.cond64.preheader
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#7
	%R25<def> = MOVi32rr %R22
	%R26<def> = MOVi32rr %R19
    Successors according to CFG: BB#9(?%)

<----------------->
Analyzing block 9
BB#9: derived from LLVM BB %for.body66
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#8 BB#9
	%R27<def> = ADDrr_r32 %R16, %R26, %STATUS<imp-def,dead>
	%R26<def> = ADDri_r32 %R26<kill>, 4, %STATUS<imp-def,dead>
	%R33<def> = LDRf32 %R27<kill>, 0; mem:LD4[%sunkaddr30](tbaa=!2)
	%R34<def> = LDRf32 %R25, 0; mem:Volatile LD4[%lsr.iv24](tbaa=!2)
	%R32<def> = LDRi32_r32 %FP, -4; mem:LD4[FixedStack2]
	GID %CONFIG<imp-def,dead>
	%R27<def> = ADDri_r32 %R25, 4, %STATUS<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %R32<kill>
	GIE %CONFIG<imp-def,dead>
	%R33<def> = FADDrr_r32 %R33<kill>, %R34<kill>, %STATUS<imp-def,dead>
	%R32<def,dead> = CMPri_r32 %R26, 32, %STATUS<imp-def>
	STRf32 %R33<kill>, %R25<kill>, 0; mem:Volatile ST4[%lsr.iv24](tbaa=!2)
	%R25<def> = MOVi32rr %R27<kill>
	BCC <BB#9>, 1, %STATUS<imp-use>
    Successors according to CFG: BB#10(0x04000000 / 0x80000000 = 3.12%) BB#9(0x7c000000 / 0x80000000 = 96.88%)

<----------------->
Analyzing block 10
BB#10: derived from LLVM BB %for.end75
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#9
	%R24<def> = ADDri_r32 %R24<kill>, 8, %STATUS<imp-def,dead>
	%R22<def> = ADDri_r32 %R22<kill>, 32, %STATUS<imp-def,dead>
	%R23<def> = ADDri_r32 %R23<kill>, 32, %STATUS<imp-def,dead>
	%R25<def,dead> = CMPrr_r32 %R24, %R3, %STATUS<imp-def>
	BCC <BB#4>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#4(0x7c000000 / 0x80000000 = 96.88%) BB#11(0x04000000 / 0x80000000 = 3.12%)

<----------------->
Analyzing block 11
BB#11: derived from LLVM BB %for.end78
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20
    Predecessors according to CFG: BB#10
	%R20<def> = ADDri_r32 %R20<kill>, 1, %STATUS<imp-def,dead>
	%R2<def> = ADDrr_r32 %R2<kill>, %IP, %STATUS<imp-def,dead>
	%R21<def,dead> = CMPrr_r32 %R20, %R3, %STATUS<imp-def>
	BCC <BB#3>, 1, %STATUS<imp-use>
    Successors according to CFG: BB#12(0x04000000 / 0x80000000 = 3.12%) BB#3(0x7c000000 / 0x80000000 = 96.88%)

<----------------->
Analyzing block 12
BB#12: derived from LLVM BB %for.end81
    Predecessors according to CFG: BB#1 BB#11
	%R0<def> = LDRi32_r32 %FP, -44; mem:LD4[FixedStack1]
	GID
	%CONFIG<def> = MOVTS32_core %R0<kill>
	GIE %CONFIG<imp-use,kill>
	%LR<def> = LDRi64 %SP, 48; flags: FrameSetup
	%SP<def> = ADDri_r32 %SP, 48, %STATUS<imp-def>
	JR32 %LR
# *** IR Dump After Branch Probability Basic Block Placement ***:
# Machine code for function matmac: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=32, align=8, at location [SP-40]
  fi#1: size=4, align=4, at location [SP-44]
  fi#2: size=4, align=4, at location [SP-4]
  fi#3: size=4, align=8, at location [SP-8]
Function Live Ins: %R0, %R1, %R2, %R3

BB#0: 
    Live Ins: %R0 %R1 %R2 %R3
	%SP<def,tied2> = STRi64_pmd %LR, %SP<tied0>, -48; flags: FrameSetup
	%FP<def> = ADDri_r32 %SP, 48, %STATUS<imp-def>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	%IP<def> = MOVi32ri 65535
	GID %CONFIG<imp-def>
	%R19<def> = MOVFS32_core %CONFIG, %D9<imp-def>
	%IP<def,tied1> = MOVTi32ri %IP<tied0>, 65521
	STRi32_r32 %R19, %FP, -44; mem:ST4[FixedStack1]
	%R18<def> = ANDrr_r32 %R19<kill>, %IP<kill>, %STATUS<imp-def>, %D9<imp-use,kill>, %D9<imp-def>
	%R19<def,tied1> = MOVTi32ri %R19<kill,tied0>, 72, %D9<imp-use,kill>, %D9<imp-def>
	STRi64 %D9<kill>, %FP, -8; mem:ST4[FixedStack3] ST4[FixedStack2]
	GIE %CONFIG<imp-use,kill>
    Successors according to CFG: BB#1(?%)

BB#1: derived from LLVM BB %entry
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#0
	%IP<def,dead> = CMPri_r32 %R3, 1, %STATUS<imp-def>
	BCC <BB#12>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#2(0x50000000 / 0x80000000 = 62.50%) BB#12(0x30000000 / 0x80000000 = 37.50%)

BB#2: derived from LLVM BB %for.body3.lr.ph.preheader
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#1
	%R16<def> = MOViPTR %FP, -40
	%R19<def> = MOVi32ri 0, %D9<imp-def>
	%IP<def> = LSL32ri %R3, 2, %STATUS<imp-def,dead>
	%R1<def> = ADDri_r32 %R1<kill>, 8, %STATUS<imp-def,dead>
	%R17<def> = ADDri_r32 %R16, 8, %STATUS<imp-def,dead>
	%R20<def> = MOVi32rr %R19
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %for.body3.lr.ph
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20
    Predecessors according to CFG: BB#2 BB#11
	%R21<def> = LDRi32_r32 %FP, -8; mem:LD4[FixedStack3]
	GID %CONFIG<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %R21<kill>
	GIE %CONFIG<imp-def,dead>
	%R21<def> = IMULrr_r32 %R20, %R3, %STATUS<imp-def,dead>
	%R22<def> = MOVi32rr %R2
	%R21<def> = LSL32ri %R21<kill>, 2, %STATUS<imp-def,dead>
	%R23<def> = MOVi32rr %R1
	%R24<def> = MOVi32rr %R19
	%R21<def> = ADDrr_r32 %R0, %R21<kill>, %STATUS<imp-def,dead>
    Successors according to CFG: BB#4(?%)

BB#4: derived from LLVM BB %for.body9.preheader
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#3 BB#10
	%R18<def> = MOVi32rr %R19<kill>, %D9<imp-use,kill>, %D9<imp-def>
	STRi64 %D9, %FP, -16; mem:ST8[%1+24]
	STRi64 %D9, %FP, -24; mem:ST8[%1+16]
	STRi64 %D9, %FP, -32; mem:ST8[%1+8]
	STRi64 %D9, %FP, -40; mem:ST8[%1]
	%R25<def> = MOVi32rr %R23
	%R26<def> = MOVi32rr %R19
    Successors according to CFG: BB#5(?%)

BB#5: derived from LLVM BB %for.body9
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#4 BB#7
	%R27<def> = LSL32ri %R26, 2, %STATUS<imp-def,dead>
	%R27<def> = ADDrr_r32 %R21, %R27<kill>, %STATUS<imp-def,dead>
	%R27<def> = LDRf32 %R27<kill>, 0; mem:Volatile LD4[%add.ptr10](tbaa=!2)
	%R32<def> = MOVi32rr %R17
	%R34<def> = MOVi32rr %R25
	%R33<def> = MOVi32rr %R19
    Successors according to CFG: BB#6(?%)

BB#6: derived from LLVM BB %for.body13
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26 %R27 %R32 %R33 %R34
    Predecessors according to CFG: BB#5 BB#6
	%R37<def> = LDRf32 %R34, -8; mem:Volatile LD4[%scevgep8](tbaa=!2)
	%R38<def> = LDRf32 %R34, -4; mem:Volatile LD4[%scevgep9](tbaa=!2)
	%R39<def> = LDRf32 %R34, 0; mem:Volatile LD4[%lsr.iv5](tbaa=!2)
	%R40<def> = LDRf32 %R34, 4; mem:Volatile LD4[%scevgep7](tbaa=!2)
	%D21<def> = LDRf64 %R32, -8; mem:LD4[%scevgep17](tbaa=!2) LD4[%scevgep15](tbaa=!2)
	%R36<def> = ADDri_r32 %R34<kill>, 16, %STATUS<imp-def,dead>
	%R34<def> = LDRi32_r32 %FP, -4; mem:LD4[FixedStack2]
	GID %CONFIG<imp-def,dead>
	%R35<def> = ADDri_r32 %R32, 16, %STATUS<imp-def,dead>
	%R33<def> = ADDri_r32 %R33<kill>, 4, %STATUS<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %R34<kill>
	GIE %CONFIG<imp-def,dead>
	%R43<def,tied1> = FMADDrr_r32 %R43<kill,tied0>, %R27, %R37<kill>, %STATUS<imp-def,dead>, %D21<imp-use,kill>, %D21<imp-def>
	%R42<def,tied1> = FMADDrr_r32 %R42<kill,tied0>, %R27, %R38<kill>, %STATUS<imp-def,dead>, %D21<imp-use,kill>, %D21<imp-def>
	%R44<def> = MOVi32rr %R43, %D22<imp-def>
	%R45<def> = MOVi32rr %R42<kill>, %D21<imp-use,kill>, %D22<imp-use,kill>, %D22<imp-def>
	STRf64 %D22<kill>, %R32, -8; mem:ST4[%scevgep17](tbaa=!2) ST4[%scevgep15](tbaa=!2)
	%R34<def> = LDRf32 %R32, 0; mem:LD4[%lsr.iv1214](tbaa=!2)
	%R34<def,tied1> = FMADDrr_r32 %R34<tied0>, %R27, %R39<kill>, %STATUS<imp-def,dead>
	STRf32 %R34<kill>, %R32, 0; mem:ST4[%lsr.iv1214](tbaa=!2)
	%R63<def> = LDRf32 %R32, 4; mem:LD4[%scevgep16](tbaa=!2)
	%R63<def,tied1> = FMADDrr_r32 %R63<tied0>, %R27, %R40<kill>, %STATUS<imp-def,dead>
	%R34<def,dead> = CMPri_r32 %R33, 8, %STATUS<imp-def>
	STRf32 %R63<kill>, %R32<kill>, 4; mem:ST4[%scevgep16](tbaa=!2)
	%R32<def> = MOVi32rr %R35<kill>
	%R34<def> = MOVi32rr %R36<kill>
	BCC <BB#6>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#6(0x7c000000 / 0x80000000 = 96.88%) BB#7(0x04000000 / 0x80000000 = 3.12%)

BB#7: derived from LLVM BB %for.end60
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#6
	%R26<def> = ADDri_r32 %R26<kill>, 1, %STATUS<imp-def,dead>
	%R25<def> = ADDrr_r32 %R25<kill>, %IP, %STATUS<imp-def,dead>
	%R27<def,dead> = CMPrr_r32 %R26, %R3, %STATUS<imp-def>
	BCC <BB#5>, 1, %STATUS<imp-use>
    Successors according to CFG: BB#8(0x04000000 / 0x80000000 = 3.12%) BB#5(0x7c000000 / 0x80000000 = 96.88%)

BB#8: derived from LLVM BB %for.cond64.preheader
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#7
	%R25<def> = MOVi32rr %R22
	%R26<def> = MOVi32rr %R19
    Successors according to CFG: BB#9(?%)

BB#9: derived from LLVM BB %for.body66
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#8 BB#9
	%R27<def> = ADDrr_r32 %R16, %R26, %STATUS<imp-def,dead>
	%R26<def> = ADDri_r32 %R26<kill>, 4, %STATUS<imp-def,dead>
	%R33<def> = LDRf32 %R27<kill>, 0; mem:LD4[%sunkaddr30](tbaa=!2)
	%R34<def> = LDRf32 %R25, 0; mem:Volatile LD4[%lsr.iv24](tbaa=!2)
	%R32<def> = LDRi32_r32 %FP, -4; mem:LD4[FixedStack2]
	GID %CONFIG<imp-def,dead>
	%R27<def> = ADDri_r32 %R25, 4, %STATUS<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %R32<kill>
	GIE %CONFIG<imp-def,dead>
	%R33<def> = FADDrr_r32 %R33<kill>, %R34<kill>, %STATUS<imp-def,dead>
	%R32<def,dead> = CMPri_r32 %R26, 32, %STATUS<imp-def>
	STRf32 %R33<kill>, %R25<kill>, 0; mem:Volatile ST4[%lsr.iv24](tbaa=!2)
	%R25<def> = MOVi32rr %R27<kill>
	BCC <BB#9>, 1, %STATUS<imp-use>
    Successors according to CFG: BB#10(0x04000000 / 0x80000000 = 3.12%) BB#9(0x7c000000 / 0x80000000 = 96.88%)

BB#10: derived from LLVM BB %for.end75
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#9
	%R24<def> = ADDri_r32 %R24<kill>, 8, %STATUS<imp-def,dead>
	%R22<def> = ADDri_r32 %R22<kill>, 32, %STATUS<imp-def,dead>
	%R23<def> = ADDri_r32 %R23<kill>, 32, %STATUS<imp-def,dead>
	%R25<def,dead> = CMPrr_r32 %R24, %R3, %STATUS<imp-def>
	BCC <BB#4>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#4(0x7c000000 / 0x80000000 = 96.88%) BB#11(0x04000000 / 0x80000000 = 3.12%)

BB#11: derived from LLVM BB %for.end78
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20
    Predecessors according to CFG: BB#10
	%R20<def> = ADDri_r32 %R20<kill>, 1, %STATUS<imp-def,dead>
	%R2<def> = ADDrr_r32 %R2<kill>, %IP, %STATUS<imp-def,dead>
	%R21<def,dead> = CMPrr_r32 %R20, %R3, %STATUS<imp-def>
	BCC <BB#3>, 1, %STATUS<imp-use>
    Successors according to CFG: BB#12(0x04000000 / 0x80000000 = 3.12%) BB#3(0x7c000000 / 0x80000000 = 96.88%)

BB#12: derived from LLVM BB %for.end81
    Predecessors according to CFG: BB#1 BB#11
	%R0<def> = LDRi32_r32 %FP, -44; mem:LD4[FixedStack1]
	GID
	%CONFIG<def> = MOVTS32_core %R0<kill>
	GIE %CONFIG<imp-use,kill>
	%LR<def> = LDRi64 %SP, 48; flags: FrameSetup
	%SP<def> = ADDri_r32 %SP, 48, %STATUS<imp-def>
	JR32 %LR

# End machine code for function matmac.

# *** IR Dump Before Epiphany Load/Store Optimization Pass ***:
# Machine code for function matmac: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=32, align=8, at location [SP-40]
  fi#1: size=4, align=4, at location [SP-44]
  fi#2: size=4, align=4, at location [SP-4]
  fi#3: size=4, align=8, at location [SP-8]
Function Live Ins: %R0, %R1, %R2, %R3

BB#0: 
    Live Ins: %R0 %R1 %R2 %R3
	%SP<def,tied2> = STRi64_pmd %LR, %SP<tied0>, -48; flags: FrameSetup
	%FP<def> = ADDri_r32 %SP, 48, %STATUS<imp-def>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	%IP<def> = MOVi32ri 65535
	GID %CONFIG<imp-def>
	%R19<def> = MOVFS32_core %CONFIG, %D9<imp-def>
	%IP<def,tied1> = MOVTi32ri %IP<tied0>, 65521
	STRi32_r32 %R19, %FP, -44; mem:ST4[FixedStack1]
	%R18<def> = ANDrr_r32 %R19<kill>, %IP<kill>, %STATUS<imp-def>, %D9<imp-use,kill>, %D9<imp-def>
	%R19<def,tied1> = MOVTi32ri %R19<kill,tied0>, 72, %D9<imp-use,kill>, %D9<imp-def>
	STRi64 %D9<kill>, %FP, -8; mem:ST4[FixedStack3] ST4[FixedStack2]
	GIE %CONFIG<imp-use,kill>
    Successors according to CFG: BB#1(?%)

BB#1: derived from LLVM BB %entry
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#0
	%IP<def,dead> = CMPri_r32 %R3, 1, %STATUS<imp-def>
	BCC <BB#12>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#2(0x50000000 / 0x80000000 = 62.50%) BB#12(0x30000000 / 0x80000000 = 37.50%)

BB#2: derived from LLVM BB %for.body3.lr.ph.preheader
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#1
	%R16<def> = MOViPTR %FP, -40
	%R19<def> = MOVi32ri 0, %D9<imp-def>
	%IP<def> = LSL32ri %R3, 2, %STATUS<imp-def,dead>
	%R1<def> = ADDri_r32 %R1<kill>, 8, %STATUS<imp-def,dead>
	%R17<def> = ADDri_r32 %R16, 8, %STATUS<imp-def,dead>
	%R20<def> = MOVi32rr %R19
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %for.body3.lr.ph
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20
    Predecessors according to CFG: BB#2 BB#11
	%R21<def> = LDRi32_r32 %FP, -8; mem:LD4[FixedStack3]
	GID %CONFIG<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %R21<kill>
	GIE %CONFIG<imp-def,dead>
	%R21<def> = IMULrr_r32 %R20, %R3, %STATUS<imp-def,dead>
	%R22<def> = MOVi32rr %R2
	%R21<def> = LSL32ri %R21<kill>, 2, %STATUS<imp-def,dead>
	%R23<def> = MOVi32rr %R1
	%R24<def> = MOVi32rr %R19
	%R21<def> = ADDrr_r32 %R0, %R21<kill>, %STATUS<imp-def,dead>
    Successors according to CFG: BB#4(?%)

BB#4: derived from LLVM BB %for.body9.preheader
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#3 BB#10
	%R18<def> = MOVi32rr %R19<kill>, %D9<imp-use,kill>, %D9<imp-def>
	STRi64 %D9, %FP, -16; mem:ST8[%1+24]
	STRi64 %D9, %FP, -24; mem:ST8[%1+16]
	STRi64 %D9, %FP, -32; mem:ST8[%1+8]
	STRi64 %D9, %FP, -40; mem:ST8[%1]
	%R25<def> = MOVi32rr %R23
	%R26<def> = MOVi32rr %R19
    Successors according to CFG: BB#5(?%)

BB#5: derived from LLVM BB %for.body9
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#4 BB#7
	%R27<def> = LSL32ri %R26, 2, %STATUS<imp-def,dead>
	%R27<def> = ADDrr_r32 %R21, %R27<kill>, %STATUS<imp-def,dead>
	%R27<def> = LDRf32 %R27<kill>, 0; mem:Volatile LD4[%add.ptr10](tbaa=!2)
	%R32<def> = MOVi32rr %R17
	%R34<def> = MOVi32rr %R25
	%R33<def> = MOVi32rr %R19
    Successors according to CFG: BB#6(?%)

BB#6: derived from LLVM BB %for.body13
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26 %R27 %R32 %R33 %R34
    Predecessors according to CFG: BB#5 BB#6
	%R37<def> = LDRf32 %R34, -8; mem:Volatile LD4[%scevgep8](tbaa=!2)
	%R38<def> = LDRf32 %R34, -4; mem:Volatile LD4[%scevgep9](tbaa=!2)
	%R39<def> = LDRf32 %R34, 0; mem:Volatile LD4[%lsr.iv5](tbaa=!2)
	%R40<def> = LDRf32 %R34, 4; mem:Volatile LD4[%scevgep7](tbaa=!2)
	%D21<def> = LDRf64 %R32, -8; mem:LD4[%scevgep17](tbaa=!2) LD4[%scevgep15](tbaa=!2)
	%R36<def> = ADDri_r32 %R34<kill>, 16, %STATUS<imp-def,dead>
	%R34<def> = LDRi32_r32 %FP, -4; mem:LD4[FixedStack2]
	GID %CONFIG<imp-def,dead>
	%R35<def> = ADDri_r32 %R32, 16, %STATUS<imp-def,dead>
	%R33<def> = ADDri_r32 %R33<kill>, 4, %STATUS<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %R34<kill>
	GIE %CONFIG<imp-def,dead>
	%R43<def,tied1> = FMADDrr_r32 %R43<kill,tied0>, %R27, %R37<kill>, %STATUS<imp-def,dead>, %D21<imp-use,kill>, %D21<imp-def>
	%R42<def,tied1> = FMADDrr_r32 %R42<kill,tied0>, %R27, %R38<kill>, %STATUS<imp-def,dead>, %D21<imp-use,kill>, %D21<imp-def>
	%R44<def> = MOVi32rr %R43, %D22<imp-def>
	%R45<def> = MOVi32rr %R42<kill>, %D21<imp-use,kill>, %D22<imp-use,kill>, %D22<imp-def>
	STRf64 %D22<kill>, %R32, -8; mem:ST4[%scevgep17](tbaa=!2) ST4[%scevgep15](tbaa=!2)
	%R34<def> = LDRf32 %R32, 0; mem:LD4[%lsr.iv1214](tbaa=!2)
	%R34<def,tied1> = FMADDrr_r32 %R34<tied0>, %R27, %R39<kill>, %STATUS<imp-def,dead>
	STRf32 %R34<kill>, %R32, 0; mem:ST4[%lsr.iv1214](tbaa=!2)
	%R63<def> = LDRf32 %R32, 4; mem:LD4[%scevgep16](tbaa=!2)
	%R63<def,tied1> = FMADDrr_r32 %R63<tied0>, %R27, %R40<kill>, %STATUS<imp-def,dead>
	%R34<def,dead> = CMPri_r32 %R33, 8, %STATUS<imp-def>
	STRf32 %R63<kill>, %R32<kill>, 4; mem:ST4[%scevgep16](tbaa=!2)
	%R32<def> = MOVi32rr %R35<kill>
	%R34<def> = MOVi32rr %R36<kill>
	BCC <BB#6>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#6(0x7c000000 / 0x80000000 = 96.88%) BB#7(0x04000000 / 0x80000000 = 3.12%)

BB#7: derived from LLVM BB %for.end60
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#6
	%R26<def> = ADDri_r32 %R26<kill>, 1, %STATUS<imp-def,dead>
	%R25<def> = ADDrr_r32 %R25<kill>, %IP, %STATUS<imp-def,dead>
	%R27<def,dead> = CMPrr_r32 %R26, %R3, %STATUS<imp-def>
	BCC <BB#5>, 1, %STATUS<imp-use>
    Successors according to CFG: BB#8(0x04000000 / 0x80000000 = 3.12%) BB#5(0x7c000000 / 0x80000000 = 96.88%)

BB#8: derived from LLVM BB %for.cond64.preheader
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#7
	%R25<def> = MOVi32rr %R22
	%R26<def> = MOVi32rr %R19
    Successors according to CFG: BB#9(?%)

BB#9: derived from LLVM BB %for.body66
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#8 BB#9
	%R27<def> = ADDrr_r32 %R16, %R26, %STATUS<imp-def,dead>
	%R26<def> = ADDri_r32 %R26<kill>, 4, %STATUS<imp-def,dead>
	%R33<def> = LDRf32 %R27<kill>, 0; mem:LD4[%sunkaddr30](tbaa=!2)
	%R34<def> = LDRf32 %R25, 0; mem:Volatile LD4[%lsr.iv24](tbaa=!2)
	%R32<def> = LDRi32_r32 %FP, -4; mem:LD4[FixedStack2]
	GID %CONFIG<imp-def,dead>
	%R27<def> = ADDri_r32 %R25, 4, %STATUS<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %R32<kill>
	GIE %CONFIG<imp-def,dead>
	%R33<def> = FADDrr_r32 %R33<kill>, %R34<kill>, %STATUS<imp-def,dead>
	%R32<def,dead> = CMPri_r32 %R26, 32, %STATUS<imp-def>
	STRf32 %R33<kill>, %R25<kill>, 0; mem:Volatile ST4[%lsr.iv24](tbaa=!2)
	%R25<def> = MOVi32rr %R27<kill>
	BCC <BB#9>, 1, %STATUS<imp-use>
    Successors according to CFG: BB#10(0x04000000 / 0x80000000 = 3.12%) BB#9(0x7c000000 / 0x80000000 = 96.88%)

BB#10: derived from LLVM BB %for.end75
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#9
	%R24<def> = ADDri_r32 %R24<kill>, 8, %STATUS<imp-def,dead>
	%R22<def> = ADDri_r32 %R22<kill>, 32, %STATUS<imp-def,dead>
	%R23<def> = ADDri_r32 %R23<kill>, 32, %STATUS<imp-def,dead>
	%R25<def,dead> = CMPrr_r32 %R24, %R3, %STATUS<imp-def>
	BCC <BB#4>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#4(0x7c000000 / 0x80000000 = 96.88%) BB#11(0x04000000 / 0x80000000 = 3.12%)

BB#11: derived from LLVM BB %for.end78
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20
    Predecessors according to CFG: BB#10
	%R20<def> = ADDri_r32 %R20<kill>, 1, %STATUS<imp-def,dead>
	%R2<def> = ADDrr_r32 %R2<kill>, %IP, %STATUS<imp-def,dead>
	%R21<def,dead> = CMPrr_r32 %R20, %R3, %STATUS<imp-def>
	BCC <BB#3>, 1, %STATUS<imp-use>
    Successors according to CFG: BB#12(0x04000000 / 0x80000000 = 3.12%) BB#3(0x7c000000 / 0x80000000 = 96.88%)

BB#12: derived from LLVM BB %for.end81
    Predecessors according to CFG: BB#1 BB#11
	%R0<def> = LDRi32_r32 %FP, -44; mem:LD4[FixedStack1]
	GID
	%CONFIG<def> = MOVTS32_core %R0<kill>
	GIE %CONFIG<imp-use,kill>
	%LR<def> = LDRi64 %SP, 48; flags: FrameSetup
	%SP<def> = ADDri_r32 %SP, 48, %STATUS<imp-def>
	JR32 %LR

# End machine code for function matmac.


Running Epiphany Load/Store Optimization Pass

Trying to pair instruction: STRi32_r32 %R19, %FP, -44; mem:ST4[FixedStack1]
Unable to find matching instruction

Trying to pair instruction: %R21<def> = LDRi32_r32 %FP, -8; mem:LD4[FixedStack3]
Unable to find matching instruction

Trying to pair instruction: %R27<def> = LDRf32 %R27<kill>, 0; mem:Volatile LD4[%add.ptr10](tbaa=!2)
Volatile load/store, skipping
Not a candidate for merging

Trying to pair instruction: %R37<def> = LDRf32 %R34, -8; mem:Volatile LD4[%scevgep8](tbaa=!2)
Volatile load/store, skipping
Not a candidate for merging

Trying to pair instruction: %R38<def> = LDRf32 %R34, -4; mem:Volatile LD4[%scevgep9](tbaa=!2)
Volatile load/store, skipping
Not a candidate for merging

Trying to pair instruction: %R39<def> = LDRf32 %R34, 0; mem:Volatile LD4[%lsr.iv5](tbaa=!2)
Volatile load/store, skipping
Not a candidate for merging

Trying to pair instruction: %R40<def> = LDRf32 %R34, 4; mem:Volatile LD4[%scevgep7](tbaa=!2)
Volatile load/store, skipping
Not a candidate for merging

Trying to pair instruction: %R34<def> = LDRi32_r32 %FP, -4; mem:LD4[FixedStack2]
Unable to find matching instruction

Trying to pair instruction: %R34<def> = LDRf32 %R32, 0; mem:LD4[%lsr.iv1214](tbaa=!2)
Checking instruction   %R63<def> = LDRf32 %R32, 4; mem:LD4[%scevgep16](tbaa=!2)
Can't find matching superreg
Unable to find matching instruction

Trying to pair instruction: STRf32 %R34<kill>, %R32, 0; mem:ST4[%lsr.iv1214](tbaa=!2)
Checking instruction   STRf32 %R63<kill>, %R32<kill>, 4; mem:ST4[%scevgep16](tbaa=!2)
Can't find matching superreg
Unable to find matching instruction

Trying to pair instruction: %R63<def> = LDRf32 %R32, 4; mem:LD4[%scevgep16](tbaa=!2)
Unable to find matching instruction

Trying to pair instruction: STRf32 %R63<kill>, %R32<kill>, 4; mem:ST4[%scevgep16](tbaa=!2)
Unable to find matching instruction

Trying to pair instruction: %R33<def> = LDRf32 %R27<kill>, 0; mem:LD4[%sunkaddr30](tbaa=!2)
Unable to find matching instruction

Trying to pair instruction: %R34<def> = LDRf32 %R25, 0; mem:Volatile LD4[%lsr.iv24](tbaa=!2)
Volatile load/store, skipping
Not a candidate for merging

Trying to pair instruction: %R32<def> = LDRi32_r32 %FP, -4; mem:LD4[FixedStack2]
Unable to find matching instruction

Trying to pair instruction: STRf32 %R33<kill>, %R25<kill>, 0; mem:Volatile ST4[%lsr.iv24](tbaa=!2)
Volatile load/store, skipping
Not a candidate for merging

Trying to pair instruction: %R0<def> = LDRi32_r32 %FP, -44; mem:LD4[FixedStack1]
Unable to find matching instruction
# *** IR Dump After Epiphany Load/Store Optimization Pass ***:
# Machine code for function matmac: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=32, align=8, at location [SP-40]
  fi#1: size=4, align=4, at location [SP-44]
  fi#2: size=4, align=4, at location [SP-4]
  fi#3: size=4, align=8, at location [SP-8]
Function Live Ins: %R0, %R1, %R2, %R3

BB#0: 
    Live Ins: %R0 %R1 %R2 %R3
	%SP<def,tied2> = STRi64_pmd %LR, %SP<tied0>, -48; flags: FrameSetup
	%FP<def> = ADDri_r32 %SP, 48, %STATUS<imp-def>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	%IP<def> = MOVi32ri 65535
	GID %CONFIG<imp-def>
	%R19<def> = MOVFS32_core %CONFIG, %D9<imp-def>
	%IP<def,tied1> = MOVTi32ri %IP<tied0>, 65521
	STRi32_r32 %R19, %FP, -44; mem:ST4[FixedStack1]
	%R18<def> = ANDrr_r32 %R19<kill>, %IP<kill>, %STATUS<imp-def>, %D9<imp-use,kill>, %D9<imp-def>
	%R19<def,tied1> = MOVTi32ri %R19<kill,tied0>, 72, %D9<imp-use,kill>, %D9<imp-def>
	STRi64 %D9<kill>, %FP, -8; mem:ST4[FixedStack3] ST4[FixedStack2]
	GIE %CONFIG<imp-use,kill>
    Successors according to CFG: BB#1(?%)

BB#1: derived from LLVM BB %entry
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#0
	%IP<def,dead> = CMPri_r32 %R3, 1, %STATUS<imp-def>
	BCC <BB#12>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#2(0x50000000 / 0x80000000 = 62.50%) BB#12(0x30000000 / 0x80000000 = 37.50%)

BB#2: derived from LLVM BB %for.body3.lr.ph.preheader
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#1
	%R16<def> = MOViPTR %FP, -40
	%R19<def> = MOVi32ri 0, %D9<imp-def>
	%IP<def> = LSL32ri %R3, 2, %STATUS<imp-def,dead>
	%R1<def> = ADDri_r32 %R1<kill>, 8, %STATUS<imp-def,dead>
	%R17<def> = ADDri_r32 %R16, 8, %STATUS<imp-def,dead>
	%R20<def> = MOVi32rr %R19
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %for.body3.lr.ph
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20
    Predecessors according to CFG: BB#2 BB#11
	%R21<def> = LDRi32_r32 %FP, -8; mem:LD4[FixedStack3]
	GID %CONFIG<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %R21<kill>
	GIE %CONFIG<imp-def,dead>
	%R21<def> = IMULrr_r32 %R20, %R3, %STATUS<imp-def,dead>
	%R22<def> = MOVi32rr %R2
	%R21<def> = LSL32ri %R21<kill>, 2, %STATUS<imp-def,dead>
	%R23<def> = MOVi32rr %R1
	%R24<def> = MOVi32rr %R19
	%R21<def> = ADDrr_r32 %R0, %R21<kill>, %STATUS<imp-def,dead>
    Successors according to CFG: BB#4(?%)

BB#4: derived from LLVM BB %for.body9.preheader
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#3 BB#10
	%R18<def> = MOVi32rr %R19<kill>, %D9<imp-use,kill>, %D9<imp-def>
	STRi64 %D9, %FP, -16; mem:ST8[%1+24]
	STRi64 %D9, %FP, -24; mem:ST8[%1+16]
	STRi64 %D9, %FP, -32; mem:ST8[%1+8]
	STRi64 %D9, %FP, -40; mem:ST8[%1]
	%R25<def> = MOVi32rr %R23
	%R26<def> = MOVi32rr %R19
    Successors according to CFG: BB#5(?%)

BB#5: derived from LLVM BB %for.body9
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#4 BB#7
	%R27<def> = LSL32ri %R26, 2, %STATUS<imp-def,dead>
	%R27<def> = ADDrr_r32 %R21, %R27<kill>, %STATUS<imp-def,dead>
	%R27<def> = LDRf32 %R27<kill>, 0; mem:Volatile LD4[%add.ptr10](tbaa=!2)
	%R32<def> = MOVi32rr %R17
	%R34<def> = MOVi32rr %R25
	%R33<def> = MOVi32rr %R19
    Successors according to CFG: BB#6(?%)

BB#6: derived from LLVM BB %for.body13
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26 %R27 %R32 %R33 %R34
    Predecessors according to CFG: BB#5 BB#6
	%R37<def> = LDRf32 %R34, -8; mem:Volatile LD4[%scevgep8](tbaa=!2)
	%R38<def> = LDRf32 %R34, -4; mem:Volatile LD4[%scevgep9](tbaa=!2)
	%R39<def> = LDRf32 %R34, 0; mem:Volatile LD4[%lsr.iv5](tbaa=!2)
	%R40<def> = LDRf32 %R34, 4; mem:Volatile LD4[%scevgep7](tbaa=!2)
	%D21<def> = LDRf64 %R32, -8; mem:LD4[%scevgep17](tbaa=!2) LD4[%scevgep15](tbaa=!2)
	%R36<def> = ADDri_r32 %R34<kill>, 16, %STATUS<imp-def,dead>
	%R34<def> = LDRi32_r32 %FP, -4; mem:LD4[FixedStack2]
	GID %CONFIG<imp-def,dead>
	%R35<def> = ADDri_r32 %R32, 16, %STATUS<imp-def,dead>
	%R33<def> = ADDri_r32 %R33<kill>, 4, %STATUS<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %R34<kill>
	GIE %CONFIG<imp-def,dead>
	%R43<def,tied1> = FMADDrr_r32 %R43<kill,tied0>, %R27, %R37<kill>, %STATUS<imp-def,dead>, %D21<imp-use,kill>, %D21<imp-def>
	%R42<def,tied1> = FMADDrr_r32 %R42<kill,tied0>, %R27, %R38<kill>, %STATUS<imp-def,dead>, %D21<imp-use,kill>, %D21<imp-def>
	%R44<def> = MOVi32rr %R43, %D22<imp-def>
	%R45<def> = MOVi32rr %R42<kill>, %D21<imp-use,kill>, %D22<imp-use,kill>, %D22<imp-def>
	STRf64 %D22<kill>, %R32, -8; mem:ST4[%scevgep17](tbaa=!2) ST4[%scevgep15](tbaa=!2)
	%R34<def> = LDRf32 %R32, 0; mem:LD4[%lsr.iv1214](tbaa=!2)
	%R34<def,tied1> = FMADDrr_r32 %R34<tied0>, %R27, %R39<kill>, %STATUS<imp-def,dead>
	STRf32 %R34<kill>, %R32, 0; mem:ST4[%lsr.iv1214](tbaa=!2)
	%R63<def> = LDRf32 %R32, 4; mem:LD4[%scevgep16](tbaa=!2)
	%R63<def,tied1> = FMADDrr_r32 %R63<tied0>, %R27, %R40<kill>, %STATUS<imp-def,dead>
	%R34<def,dead> = CMPri_r32 %R33, 8, %STATUS<imp-def>
	STRf32 %R63<kill>, %R32<kill>, 4; mem:ST4[%scevgep16](tbaa=!2)
	%R32<def> = MOVi32rr %R35<kill>
	%R34<def> = MOVi32rr %R36<kill>
	BCC <BB#6>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#6(0x7c000000 / 0x80000000 = 96.88%) BB#7(0x04000000 / 0x80000000 = 3.12%)

BB#7: derived from LLVM BB %for.end60
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#6
	%R26<def> = ADDri_r32 %R26<kill>, 1, %STATUS<imp-def,dead>
	%R25<def> = ADDrr_r32 %R25<kill>, %IP, %STATUS<imp-def,dead>
	%R27<def,dead> = CMPrr_r32 %R26, %R3, %STATUS<imp-def>
	BCC <BB#5>, 1, %STATUS<imp-use>
    Successors according to CFG: BB#8(0x04000000 / 0x80000000 = 3.12%) BB#5(0x7c000000 / 0x80000000 = 96.88%)

BB#8: derived from LLVM BB %for.cond64.preheader
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#7
	%R25<def> = MOVi32rr %R22
	%R26<def> = MOVi32rr %R19
    Successors according to CFG: BB#9(?%)

BB#9: derived from LLVM BB %for.body66
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#8 BB#9
	%R27<def> = ADDrr_r32 %R16, %R26, %STATUS<imp-def,dead>
	%R26<def> = ADDri_r32 %R26<kill>, 4, %STATUS<imp-def,dead>
	%R33<def> = LDRf32 %R27<kill>, 0; mem:LD4[%sunkaddr30](tbaa=!2)
	%R34<def> = LDRf32 %R25, 0; mem:Volatile LD4[%lsr.iv24](tbaa=!2)
	%R32<def> = LDRi32_r32 %FP, -4; mem:LD4[FixedStack2]
	GID %CONFIG<imp-def,dead>
	%R27<def> = ADDri_r32 %R25, 4, %STATUS<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %R32<kill>
	GIE %CONFIG<imp-def,dead>
	%R33<def> = FADDrr_r32 %R33<kill>, %R34<kill>, %STATUS<imp-def,dead>
	%R32<def,dead> = CMPri_r32 %R26, 32, %STATUS<imp-def>
	STRf32 %R33<kill>, %R25<kill>, 0; mem:Volatile ST4[%lsr.iv24](tbaa=!2)
	%R25<def> = MOVi32rr %R27<kill>
	BCC <BB#9>, 1, %STATUS<imp-use>
    Successors according to CFG: BB#10(0x04000000 / 0x80000000 = 3.12%) BB#9(0x7c000000 / 0x80000000 = 96.88%)

BB#10: derived from LLVM BB %for.end75
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#9
	%R24<def> = ADDri_r32 %R24<kill>, 8, %STATUS<imp-def,dead>
	%R22<def> = ADDri_r32 %R22<kill>, 32, %STATUS<imp-def,dead>
	%R23<def> = ADDri_r32 %R23<kill>, 32, %STATUS<imp-def,dead>
	%R25<def,dead> = CMPrr_r32 %R24, %R3, %STATUS<imp-def>
	BCC <BB#4>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#4(0x7c000000 / 0x80000000 = 96.88%) BB#11(0x04000000 / 0x80000000 = 3.12%)

BB#11: derived from LLVM BB %for.end78
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20
    Predecessors according to CFG: BB#10
	%R20<def> = ADDri_r32 %R20<kill>, 1, %STATUS<imp-def,dead>
	%R2<def> = ADDrr_r32 %R2<kill>, %IP, %STATUS<imp-def,dead>
	%R21<def,dead> = CMPrr_r32 %R20, %R3, %STATUS<imp-def>
	BCC <BB#3>, 1, %STATUS<imp-use>
    Successors according to CFG: BB#12(0x04000000 / 0x80000000 = 3.12%) BB#3(0x7c000000 / 0x80000000 = 96.88%)

BB#12: derived from LLVM BB %for.end81
    Predecessors according to CFG: BB#1 BB#11
	%R0<def> = LDRi32_r32 %FP, -44; mem:LD4[FixedStack1]
	GID
	%CONFIG<def> = MOVTS32_core %R0<kill>
	GIE %CONFIG<imp-use,kill>
	%LR<def> = LDRi64 %SP, 48; flags: FrameSetup
	%SP<def> = ADDri_r32 %SP, 48, %STATUS<imp-def>
	JR32 %LR

# End machine code for function matmac.

# *** IR Dump Before Contiguously Lay Out Funclets ***:
# Machine code for function matmac: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=32, align=8, at location [SP-40]
  fi#1: size=4, align=4, at location [SP-44]
  fi#2: size=4, align=4, at location [SP-4]
  fi#3: size=4, align=8, at location [SP-8]
Function Live Ins: %R0, %R1, %R2, %R3

BB#0: 
    Live Ins: %R0 %R1 %R2 %R3
	%SP<def,tied2> = STRi64_pmd %LR, %SP<tied0>, -48; flags: FrameSetup
	%FP<def> = ADDri_r32 %SP, 48, %STATUS<imp-def>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	%IP<def> = MOVi32ri 65535
	GID %CONFIG<imp-def>
	%R19<def> = MOVFS32_core %CONFIG, %D9<imp-def>
	%IP<def,tied1> = MOVTi32ri %IP<tied0>, 65521
	STRi32_r32 %R19, %FP, -44; mem:ST4[FixedStack1]
	%R18<def> = ANDrr_r32 %R19<kill>, %IP<kill>, %STATUS<imp-def>, %D9<imp-use,kill>, %D9<imp-def>
	%R19<def,tied1> = MOVTi32ri %R19<kill,tied0>, 72, %D9<imp-use,kill>, %D9<imp-def>
	STRi64 %D9<kill>, %FP, -8; mem:ST4[FixedStack3] ST4[FixedStack2]
	GIE %CONFIG<imp-use,kill>
    Successors according to CFG: BB#1(?%)

BB#1: derived from LLVM BB %entry
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#0
	%IP<def,dead> = CMPri_r32 %R3, 1, %STATUS<imp-def>
	BCC <BB#12>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#2(0x50000000 / 0x80000000 = 62.50%) BB#12(0x30000000 / 0x80000000 = 37.50%)

BB#2: derived from LLVM BB %for.body3.lr.ph.preheader
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#1
	%R16<def> = MOViPTR %FP, -40
	%R19<def> = MOVi32ri 0, %D9<imp-def>
	%IP<def> = LSL32ri %R3, 2, %STATUS<imp-def,dead>
	%R1<def> = ADDri_r32 %R1<kill>, 8, %STATUS<imp-def,dead>
	%R17<def> = ADDri_r32 %R16, 8, %STATUS<imp-def,dead>
	%R20<def> = MOVi32rr %R19
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %for.body3.lr.ph
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20
    Predecessors according to CFG: BB#2 BB#11
	%R21<def> = LDRi32_r32 %FP, -8; mem:LD4[FixedStack3]
	GID %CONFIG<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %R21<kill>
	GIE %CONFIG<imp-def,dead>
	%R21<def> = IMULrr_r32 %R20, %R3, %STATUS<imp-def,dead>
	%R22<def> = MOVi32rr %R2
	%R21<def> = LSL32ri %R21<kill>, 2, %STATUS<imp-def,dead>
	%R23<def> = MOVi32rr %R1
	%R24<def> = MOVi32rr %R19
	%R21<def> = ADDrr_r32 %R0, %R21<kill>, %STATUS<imp-def,dead>
    Successors according to CFG: BB#4(?%)

BB#4: derived from LLVM BB %for.body9.preheader
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#3 BB#10
	%R18<def> = MOVi32rr %R19<kill>, %D9<imp-use,kill>, %D9<imp-def>
	STRi64 %D9, %FP, -16; mem:ST8[%1+24]
	STRi64 %D9, %FP, -24; mem:ST8[%1+16]
	STRi64 %D9, %FP, -32; mem:ST8[%1+8]
	STRi64 %D9, %FP, -40; mem:ST8[%1]
	%R25<def> = MOVi32rr %R23
	%R26<def> = MOVi32rr %R19
    Successors according to CFG: BB#5(?%)

BB#5: derived from LLVM BB %for.body9
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#4 BB#7
	%R27<def> = LSL32ri %R26, 2, %STATUS<imp-def,dead>
	%R27<def> = ADDrr_r32 %R21, %R27<kill>, %STATUS<imp-def,dead>
	%R27<def> = LDRf32 %R27<kill>, 0; mem:Volatile LD4[%add.ptr10](tbaa=!2)
	%R32<def> = MOVi32rr %R17
	%R34<def> = MOVi32rr %R25
	%R33<def> = MOVi32rr %R19
    Successors according to CFG: BB#6(?%)

BB#6: derived from LLVM BB %for.body13
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26 %R27 %R32 %R33 %R34
    Predecessors according to CFG: BB#5 BB#6
	%R37<def> = LDRf32 %R34, -8; mem:Volatile LD4[%scevgep8](tbaa=!2)
	%R38<def> = LDRf32 %R34, -4; mem:Volatile LD4[%scevgep9](tbaa=!2)
	%R39<def> = LDRf32 %R34, 0; mem:Volatile LD4[%lsr.iv5](tbaa=!2)
	%R40<def> = LDRf32 %R34, 4; mem:Volatile LD4[%scevgep7](tbaa=!2)
	%D21<def> = LDRf64 %R32, -8; mem:LD4[%scevgep17](tbaa=!2) LD4[%scevgep15](tbaa=!2)
	%R36<def> = ADDri_r32 %R34<kill>, 16, %STATUS<imp-def,dead>
	%R34<def> = LDRi32_r32 %FP, -4; mem:LD4[FixedStack2]
	GID %CONFIG<imp-def,dead>
	%R35<def> = ADDri_r32 %R32, 16, %STATUS<imp-def,dead>
	%R33<def> = ADDri_r32 %R33<kill>, 4, %STATUS<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %R34<kill>
	GIE %CONFIG<imp-def,dead>
	%R43<def,tied1> = FMADDrr_r32 %R43<kill,tied0>, %R27, %R37<kill>, %STATUS<imp-def,dead>, %D21<imp-use,kill>, %D21<imp-def>
	%R42<def,tied1> = FMADDrr_r32 %R42<kill,tied0>, %R27, %R38<kill>, %STATUS<imp-def,dead>, %D21<imp-use,kill>, %D21<imp-def>
	%R44<def> = MOVi32rr %R43, %D22<imp-def>
	%R45<def> = MOVi32rr %R42<kill>, %D21<imp-use,kill>, %D22<imp-use,kill>, %D22<imp-def>
	STRf64 %D22<kill>, %R32, -8; mem:ST4[%scevgep17](tbaa=!2) ST4[%scevgep15](tbaa=!2)
	%R34<def> = LDRf32 %R32, 0; mem:LD4[%lsr.iv1214](tbaa=!2)
	%R34<def,tied1> = FMADDrr_r32 %R34<tied0>, %R27, %R39<kill>, %STATUS<imp-def,dead>
	STRf32 %R34<kill>, %R32, 0; mem:ST4[%lsr.iv1214](tbaa=!2)
	%R63<def> = LDRf32 %R32, 4; mem:LD4[%scevgep16](tbaa=!2)
	%R63<def,tied1> = FMADDrr_r32 %R63<tied0>, %R27, %R40<kill>, %STATUS<imp-def,dead>
	%R34<def,dead> = CMPri_r32 %R33, 8, %STATUS<imp-def>
	STRf32 %R63<kill>, %R32<kill>, 4; mem:ST4[%scevgep16](tbaa=!2)
	%R32<def> = MOVi32rr %R35<kill>
	%R34<def> = MOVi32rr %R36<kill>
	BCC <BB#6>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#6(0x7c000000 / 0x80000000 = 96.88%) BB#7(0x04000000 / 0x80000000 = 3.12%)

BB#7: derived from LLVM BB %for.end60
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#6
	%R26<def> = ADDri_r32 %R26<kill>, 1, %STATUS<imp-def,dead>
	%R25<def> = ADDrr_r32 %R25<kill>, %IP, %STATUS<imp-def,dead>
	%R27<def,dead> = CMPrr_r32 %R26, %R3, %STATUS<imp-def>
	BCC <BB#5>, 1, %STATUS<imp-use>
    Successors according to CFG: BB#8(0x04000000 / 0x80000000 = 3.12%) BB#5(0x7c000000 / 0x80000000 = 96.88%)

BB#8: derived from LLVM BB %for.cond64.preheader
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#7
	%R25<def> = MOVi32rr %R22
	%R26<def> = MOVi32rr %R19
    Successors according to CFG: BB#9(?%)

BB#9: derived from LLVM BB %for.body66
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#8 BB#9
	%R27<def> = ADDrr_r32 %R16, %R26, %STATUS<imp-def,dead>
	%R26<def> = ADDri_r32 %R26<kill>, 4, %STATUS<imp-def,dead>
	%R33<def> = LDRf32 %R27<kill>, 0; mem:LD4[%sunkaddr30](tbaa=!2)
	%R34<def> = LDRf32 %R25, 0; mem:Volatile LD4[%lsr.iv24](tbaa=!2)
	%R32<def> = LDRi32_r32 %FP, -4; mem:LD4[FixedStack2]
	GID %CONFIG<imp-def,dead>
	%R27<def> = ADDri_r32 %R25, 4, %STATUS<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %R32<kill>
	GIE %CONFIG<imp-def,dead>
	%R33<def> = FADDrr_r32 %R33<kill>, %R34<kill>, %STATUS<imp-def,dead>
	%R32<def,dead> = CMPri_r32 %R26, 32, %STATUS<imp-def>
	STRf32 %R33<kill>, %R25<kill>, 0; mem:Volatile ST4[%lsr.iv24](tbaa=!2)
	%R25<def> = MOVi32rr %R27<kill>
	BCC <BB#9>, 1, %STATUS<imp-use>
    Successors according to CFG: BB#10(0x04000000 / 0x80000000 = 3.12%) BB#9(0x7c000000 / 0x80000000 = 96.88%)

BB#10: derived from LLVM BB %for.end75
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#9
	%R24<def> = ADDri_r32 %R24<kill>, 8, %STATUS<imp-def,dead>
	%R22<def> = ADDri_r32 %R22<kill>, 32, %STATUS<imp-def,dead>
	%R23<def> = ADDri_r32 %R23<kill>, 32, %STATUS<imp-def,dead>
	%R25<def,dead> = CMPrr_r32 %R24, %R3, %STATUS<imp-def>
	BCC <BB#4>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#4(0x7c000000 / 0x80000000 = 96.88%) BB#11(0x04000000 / 0x80000000 = 3.12%)

BB#11: derived from LLVM BB %for.end78
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20
    Predecessors according to CFG: BB#10
	%R20<def> = ADDri_r32 %R20<kill>, 1, %STATUS<imp-def,dead>
	%R2<def> = ADDrr_r32 %R2<kill>, %IP, %STATUS<imp-def,dead>
	%R21<def,dead> = CMPrr_r32 %R20, %R3, %STATUS<imp-def>
	BCC <BB#3>, 1, %STATUS<imp-use>
    Successors according to CFG: BB#12(0x04000000 / 0x80000000 = 3.12%) BB#3(0x7c000000 / 0x80000000 = 96.88%)

BB#12: derived from LLVM BB %for.end81
    Predecessors according to CFG: BB#1 BB#11
	%R0<def> = LDRi32_r32 %FP, -44; mem:LD4[FixedStack1]
	GID
	%CONFIG<def> = MOVTS32_core %R0<kill>
	GIE %CONFIG<imp-use,kill>
	%LR<def> = LDRi64 %SP, 48; flags: FrameSetup
	%SP<def> = ADDri_r32 %SP, 48, %STATUS<imp-def>
	JR32 %LR

# End machine code for function matmac.

# *** IR Dump After Contiguously Lay Out Funclets ***:
# Machine code for function matmac: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=32, align=8, at location [SP-40]
  fi#1: size=4, align=4, at location [SP-44]
  fi#2: size=4, align=4, at location [SP-4]
  fi#3: size=4, align=8, at location [SP-8]
Function Live Ins: %R0, %R1, %R2, %R3

BB#0: 
    Live Ins: %R0 %R1 %R2 %R3
	%SP<def,tied2> = STRi64_pmd %LR, %SP<tied0>, -48; flags: FrameSetup
	%FP<def> = ADDri_r32 %SP, 48, %STATUS<imp-def>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	%IP<def> = MOVi32ri 65535
	GID %CONFIG<imp-def>
	%R19<def> = MOVFS32_core %CONFIG, %D9<imp-def>
	%IP<def,tied1> = MOVTi32ri %IP<tied0>, 65521
	STRi32_r32 %R19, %FP, -44; mem:ST4[FixedStack1]
	%R18<def> = ANDrr_r32 %R19<kill>, %IP<kill>, %STATUS<imp-def>, %D9<imp-use,kill>, %D9<imp-def>
	%R19<def,tied1> = MOVTi32ri %R19<kill,tied0>, 72, %D9<imp-use,kill>, %D9<imp-def>
	STRi64 %D9<kill>, %FP, -8; mem:ST4[FixedStack3] ST4[FixedStack2]
	GIE %CONFIG<imp-use,kill>
    Successors according to CFG: BB#1(?%)

BB#1: derived from LLVM BB %entry
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#0
	%IP<def,dead> = CMPri_r32 %R3, 1, %STATUS<imp-def>
	BCC <BB#12>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#2(0x50000000 / 0x80000000 = 62.50%) BB#12(0x30000000 / 0x80000000 = 37.50%)

BB#2: derived from LLVM BB %for.body3.lr.ph.preheader
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#1
	%R16<def> = MOViPTR %FP, -40
	%R19<def> = MOVi32ri 0, %D9<imp-def>
	%IP<def> = LSL32ri %R3, 2, %STATUS<imp-def,dead>
	%R1<def> = ADDri_r32 %R1<kill>, 8, %STATUS<imp-def,dead>
	%R17<def> = ADDri_r32 %R16, 8, %STATUS<imp-def,dead>
	%R20<def> = MOVi32rr %R19
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %for.body3.lr.ph
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20
    Predecessors according to CFG: BB#2 BB#11
	%R21<def> = LDRi32_r32 %FP, -8; mem:LD4[FixedStack3]
	GID %CONFIG<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %R21<kill>
	GIE %CONFIG<imp-def,dead>
	%R21<def> = IMULrr_r32 %R20, %R3, %STATUS<imp-def,dead>
	%R22<def> = MOVi32rr %R2
	%R21<def> = LSL32ri %R21<kill>, 2, %STATUS<imp-def,dead>
	%R23<def> = MOVi32rr %R1
	%R24<def> = MOVi32rr %R19
	%R21<def> = ADDrr_r32 %R0, %R21<kill>, %STATUS<imp-def,dead>
    Successors according to CFG: BB#4(?%)

BB#4: derived from LLVM BB %for.body9.preheader
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#3 BB#10
	%R18<def> = MOVi32rr %R19<kill>, %D9<imp-use,kill>, %D9<imp-def>
	STRi64 %D9, %FP, -16; mem:ST8[%1+24]
	STRi64 %D9, %FP, -24; mem:ST8[%1+16]
	STRi64 %D9, %FP, -32; mem:ST8[%1+8]
	STRi64 %D9, %FP, -40; mem:ST8[%1]
	%R25<def> = MOVi32rr %R23
	%R26<def> = MOVi32rr %R19
    Successors according to CFG: BB#5(?%)

BB#5: derived from LLVM BB %for.body9
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#4 BB#7
	%R27<def> = LSL32ri %R26, 2, %STATUS<imp-def,dead>
	%R27<def> = ADDrr_r32 %R21, %R27<kill>, %STATUS<imp-def,dead>
	%R27<def> = LDRf32 %R27<kill>, 0; mem:Volatile LD4[%add.ptr10](tbaa=!2)
	%R32<def> = MOVi32rr %R17
	%R34<def> = MOVi32rr %R25
	%R33<def> = MOVi32rr %R19
    Successors according to CFG: BB#6(?%)

BB#6: derived from LLVM BB %for.body13
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26 %R27 %R32 %R33 %R34
    Predecessors according to CFG: BB#5 BB#6
	%R37<def> = LDRf32 %R34, -8; mem:Volatile LD4[%scevgep8](tbaa=!2)
	%R38<def> = LDRf32 %R34, -4; mem:Volatile LD4[%scevgep9](tbaa=!2)
	%R39<def> = LDRf32 %R34, 0; mem:Volatile LD4[%lsr.iv5](tbaa=!2)
	%R40<def> = LDRf32 %R34, 4; mem:Volatile LD4[%scevgep7](tbaa=!2)
	%D21<def> = LDRf64 %R32, -8; mem:LD4[%scevgep17](tbaa=!2) LD4[%scevgep15](tbaa=!2)
	%R36<def> = ADDri_r32 %R34<kill>, 16, %STATUS<imp-def,dead>
	%R34<def> = LDRi32_r32 %FP, -4; mem:LD4[FixedStack2]
	GID %CONFIG<imp-def,dead>
	%R35<def> = ADDri_r32 %R32, 16, %STATUS<imp-def,dead>
	%R33<def> = ADDri_r32 %R33<kill>, 4, %STATUS<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %R34<kill>
	GIE %CONFIG<imp-def,dead>
	%R43<def,tied1> = FMADDrr_r32 %R43<kill,tied0>, %R27, %R37<kill>, %STATUS<imp-def,dead>, %D21<imp-use,kill>, %D21<imp-def>
	%R42<def,tied1> = FMADDrr_r32 %R42<kill,tied0>, %R27, %R38<kill>, %STATUS<imp-def,dead>, %D21<imp-use,kill>, %D21<imp-def>
	%R44<def> = MOVi32rr %R43, %D22<imp-def>
	%R45<def> = MOVi32rr %R42<kill>, %D21<imp-use,kill>, %D22<imp-use,kill>, %D22<imp-def>
	STRf64 %D22<kill>, %R32, -8; mem:ST4[%scevgep17](tbaa=!2) ST4[%scevgep15](tbaa=!2)
	%R34<def> = LDRf32 %R32, 0; mem:LD4[%lsr.iv1214](tbaa=!2)
	%R34<def,tied1> = FMADDrr_r32 %R34<tied0>, %R27, %R39<kill>, %STATUS<imp-def,dead>
	STRf32 %R34<kill>, %R32, 0; mem:ST4[%lsr.iv1214](tbaa=!2)
	%R63<def> = LDRf32 %R32, 4; mem:LD4[%scevgep16](tbaa=!2)
	%R63<def,tied1> = FMADDrr_r32 %R63<tied0>, %R27, %R40<kill>, %STATUS<imp-def,dead>
	%R34<def,dead> = CMPri_r32 %R33, 8, %STATUS<imp-def>
	STRf32 %R63<kill>, %R32<kill>, 4; mem:ST4[%scevgep16](tbaa=!2)
	%R32<def> = MOVi32rr %R35<kill>
	%R34<def> = MOVi32rr %R36<kill>
	BCC <BB#6>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#6(0x7c000000 / 0x80000000 = 96.88%) BB#7(0x04000000 / 0x80000000 = 3.12%)

BB#7: derived from LLVM BB %for.end60
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#6
	%R26<def> = ADDri_r32 %R26<kill>, 1, %STATUS<imp-def,dead>
	%R25<def> = ADDrr_r32 %R25<kill>, %IP, %STATUS<imp-def,dead>
	%R27<def,dead> = CMPrr_r32 %R26, %R3, %STATUS<imp-def>
	BCC <BB#5>, 1, %STATUS<imp-use>
    Successors according to CFG: BB#8(0x04000000 / 0x80000000 = 3.12%) BB#5(0x7c000000 / 0x80000000 = 96.88%)

BB#8: derived from LLVM BB %for.cond64.preheader
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#7
	%R25<def> = MOVi32rr %R22
	%R26<def> = MOVi32rr %R19
    Successors according to CFG: BB#9(?%)

BB#9: derived from LLVM BB %for.body66
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#8 BB#9
	%R27<def> = ADDrr_r32 %R16, %R26, %STATUS<imp-def,dead>
	%R26<def> = ADDri_r32 %R26<kill>, 4, %STATUS<imp-def,dead>
	%R33<def> = LDRf32 %R27<kill>, 0; mem:LD4[%sunkaddr30](tbaa=!2)
	%R34<def> = LDRf32 %R25, 0; mem:Volatile LD4[%lsr.iv24](tbaa=!2)
	%R32<def> = LDRi32_r32 %FP, -4; mem:LD4[FixedStack2]
	GID %CONFIG<imp-def,dead>
	%R27<def> = ADDri_r32 %R25, 4, %STATUS<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %R32<kill>
	GIE %CONFIG<imp-def,dead>
	%R33<def> = FADDrr_r32 %R33<kill>, %R34<kill>, %STATUS<imp-def,dead>
	%R32<def,dead> = CMPri_r32 %R26, 32, %STATUS<imp-def>
	STRf32 %R33<kill>, %R25<kill>, 0; mem:Volatile ST4[%lsr.iv24](tbaa=!2)
	%R25<def> = MOVi32rr %R27<kill>
	BCC <BB#9>, 1, %STATUS<imp-use>
    Successors according to CFG: BB#10(0x04000000 / 0x80000000 = 3.12%) BB#9(0x7c000000 / 0x80000000 = 96.88%)

BB#10: derived from LLVM BB %for.end75
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#9
	%R24<def> = ADDri_r32 %R24<kill>, 8, %STATUS<imp-def,dead>
	%R22<def> = ADDri_r32 %R22<kill>, 32, %STATUS<imp-def,dead>
	%R23<def> = ADDri_r32 %R23<kill>, 32, %STATUS<imp-def,dead>
	%R25<def,dead> = CMPrr_r32 %R24, %R3, %STATUS<imp-def>
	BCC <BB#4>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#4(0x7c000000 / 0x80000000 = 96.88%) BB#11(0x04000000 / 0x80000000 = 3.12%)

BB#11: derived from LLVM BB %for.end78
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20
    Predecessors according to CFG: BB#10
	%R20<def> = ADDri_r32 %R20<kill>, 1, %STATUS<imp-def,dead>
	%R2<def> = ADDrr_r32 %R2<kill>, %IP, %STATUS<imp-def,dead>
	%R21<def,dead> = CMPrr_r32 %R20, %R3, %STATUS<imp-def>
	BCC <BB#3>, 1, %STATUS<imp-use>
    Successors according to CFG: BB#12(0x04000000 / 0x80000000 = 3.12%) BB#3(0x7c000000 / 0x80000000 = 96.88%)

BB#12: derived from LLVM BB %for.end81
    Predecessors according to CFG: BB#1 BB#11
	%R0<def> = LDRi32_r32 %FP, -44; mem:LD4[FixedStack1]
	GID
	%CONFIG<def> = MOVTS32_core %R0<kill>
	GIE %CONFIG<imp-use,kill>
	%LR<def> = LDRi64 %SP, 48; flags: FrameSetup
	%SP<def> = ADDri_r32 %SP, 48, %STATUS<imp-def>
	JR32 %LR

# End machine code for function matmac.

# *** IR Dump Before StackMap Liveness Analysis ***:
# Machine code for function matmac: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=32, align=8, at location [SP-40]
  fi#1: size=4, align=4, at location [SP-44]
  fi#2: size=4, align=4, at location [SP-4]
  fi#3: size=4, align=8, at location [SP-8]
Function Live Ins: %R0, %R1, %R2, %R3

BB#0: 
    Live Ins: %R0 %R1 %R2 %R3
	%SP<def,tied2> = STRi64_pmd %LR, %SP<tied0>, -48; flags: FrameSetup
	%FP<def> = ADDri_r32 %SP, 48, %STATUS<imp-def>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	%IP<def> = MOVi32ri 65535
	GID %CONFIG<imp-def>
	%R19<def> = MOVFS32_core %CONFIG, %D9<imp-def>
	%IP<def,tied1> = MOVTi32ri %IP<tied0>, 65521
	STRi32_r32 %R19, %FP, -44; mem:ST4[FixedStack1]
	%R18<def> = ANDrr_r32 %R19<kill>, %IP<kill>, %STATUS<imp-def>, %D9<imp-use,kill>, %D9<imp-def>
	%R19<def,tied1> = MOVTi32ri %R19<kill,tied0>, 72, %D9<imp-use,kill>, %D9<imp-def>
	STRi64 %D9<kill>, %FP, -8; mem:ST4[FixedStack3] ST4[FixedStack2]
	GIE %CONFIG<imp-use,kill>
    Successors according to CFG: BB#1(?%)

BB#1: derived from LLVM BB %entry
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#0
	%IP<def,dead> = CMPri_r32 %R3, 1, %STATUS<imp-def>
	BCC <BB#12>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#2(0x50000000 / 0x80000000 = 62.50%) BB#12(0x30000000 / 0x80000000 = 37.50%)

BB#2: derived from LLVM BB %for.body3.lr.ph.preheader
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#1
	%R16<def> = MOViPTR %FP, -40
	%R19<def> = MOVi32ri 0, %D9<imp-def>
	%IP<def> = LSL32ri %R3, 2, %STATUS<imp-def,dead>
	%R1<def> = ADDri_r32 %R1<kill>, 8, %STATUS<imp-def,dead>
	%R17<def> = ADDri_r32 %R16, 8, %STATUS<imp-def,dead>
	%R20<def> = MOVi32rr %R19
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %for.body3.lr.ph
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20
    Predecessors according to CFG: BB#2 BB#11
	%R21<def> = LDRi32_r32 %FP, -8; mem:LD4[FixedStack3]
	GID %CONFIG<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %R21<kill>
	GIE %CONFIG<imp-def,dead>
	%R21<def> = IMULrr_r32 %R20, %R3, %STATUS<imp-def,dead>
	%R22<def> = MOVi32rr %R2
	%R21<def> = LSL32ri %R21<kill>, 2, %STATUS<imp-def,dead>
	%R23<def> = MOVi32rr %R1
	%R24<def> = MOVi32rr %R19
	%R21<def> = ADDrr_r32 %R0, %R21<kill>, %STATUS<imp-def,dead>
    Successors according to CFG: BB#4(?%)

BB#4: derived from LLVM BB %for.body9.preheader
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#3 BB#10
	%R18<def> = MOVi32rr %R19<kill>, %D9<imp-use,kill>, %D9<imp-def>
	STRi64 %D9, %FP, -16; mem:ST8[%1+24]
	STRi64 %D9, %FP, -24; mem:ST8[%1+16]
	STRi64 %D9, %FP, -32; mem:ST8[%1+8]
	STRi64 %D9, %FP, -40; mem:ST8[%1]
	%R25<def> = MOVi32rr %R23
	%R26<def> = MOVi32rr %R19
    Successors according to CFG: BB#5(?%)

BB#5: derived from LLVM BB %for.body9
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#4 BB#7
	%R27<def> = LSL32ri %R26, 2, %STATUS<imp-def,dead>
	%R27<def> = ADDrr_r32 %R21, %R27<kill>, %STATUS<imp-def,dead>
	%R27<def> = LDRf32 %R27<kill>, 0; mem:Volatile LD4[%add.ptr10](tbaa=!2)
	%R32<def> = MOVi32rr %R17
	%R34<def> = MOVi32rr %R25
	%R33<def> = MOVi32rr %R19
    Successors according to CFG: BB#6(?%)

BB#6: derived from LLVM BB %for.body13
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26 %R27 %R32 %R33 %R34
    Predecessors according to CFG: BB#5 BB#6
	%R37<def> = LDRf32 %R34, -8; mem:Volatile LD4[%scevgep8](tbaa=!2)
	%R38<def> = LDRf32 %R34, -4; mem:Volatile LD4[%scevgep9](tbaa=!2)
	%R39<def> = LDRf32 %R34, 0; mem:Volatile LD4[%lsr.iv5](tbaa=!2)
	%R40<def> = LDRf32 %R34, 4; mem:Volatile LD4[%scevgep7](tbaa=!2)
	%D21<def> = LDRf64 %R32, -8; mem:LD4[%scevgep17](tbaa=!2) LD4[%scevgep15](tbaa=!2)
	%R36<def> = ADDri_r32 %R34<kill>, 16, %STATUS<imp-def,dead>
	%R34<def> = LDRi32_r32 %FP, -4; mem:LD4[FixedStack2]
	GID %CONFIG<imp-def,dead>
	%R35<def> = ADDri_r32 %R32, 16, %STATUS<imp-def,dead>
	%R33<def> = ADDri_r32 %R33<kill>, 4, %STATUS<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %R34<kill>
	GIE %CONFIG<imp-def,dead>
	%R43<def,tied1> = FMADDrr_r32 %R43<kill,tied0>, %R27, %R37<kill>, %STATUS<imp-def,dead>, %D21<imp-use,kill>, %D21<imp-def>
	%R42<def,tied1> = FMADDrr_r32 %R42<kill,tied0>, %R27, %R38<kill>, %STATUS<imp-def,dead>, %D21<imp-use,kill>, %D21<imp-def>
	%R44<def> = MOVi32rr %R43, %D22<imp-def>
	%R45<def> = MOVi32rr %R42<kill>, %D21<imp-use,kill>, %D22<imp-use,kill>, %D22<imp-def>
	STRf64 %D22<kill>, %R32, -8; mem:ST4[%scevgep17](tbaa=!2) ST4[%scevgep15](tbaa=!2)
	%R34<def> = LDRf32 %R32, 0; mem:LD4[%lsr.iv1214](tbaa=!2)
	%R34<def,tied1> = FMADDrr_r32 %R34<tied0>, %R27, %R39<kill>, %STATUS<imp-def,dead>
	STRf32 %R34<kill>, %R32, 0; mem:ST4[%lsr.iv1214](tbaa=!2)
	%R63<def> = LDRf32 %R32, 4; mem:LD4[%scevgep16](tbaa=!2)
	%R63<def,tied1> = FMADDrr_r32 %R63<tied0>, %R27, %R40<kill>, %STATUS<imp-def,dead>
	%R34<def,dead> = CMPri_r32 %R33, 8, %STATUS<imp-def>
	STRf32 %R63<kill>, %R32<kill>, 4; mem:ST4[%scevgep16](tbaa=!2)
	%R32<def> = MOVi32rr %R35<kill>
	%R34<def> = MOVi32rr %R36<kill>
	BCC <BB#6>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#6(0x7c000000 / 0x80000000 = 96.88%) BB#7(0x04000000 / 0x80000000 = 3.12%)

BB#7: derived from LLVM BB %for.end60
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#6
	%R26<def> = ADDri_r32 %R26<kill>, 1, %STATUS<imp-def,dead>
	%R25<def> = ADDrr_r32 %R25<kill>, %IP, %STATUS<imp-def,dead>
	%R27<def,dead> = CMPrr_r32 %R26, %R3, %STATUS<imp-def>
	BCC <BB#5>, 1, %STATUS<imp-use>
    Successors according to CFG: BB#8(0x04000000 / 0x80000000 = 3.12%) BB#5(0x7c000000 / 0x80000000 = 96.88%)

BB#8: derived from LLVM BB %for.cond64.preheader
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#7
	%R25<def> = MOVi32rr %R22
	%R26<def> = MOVi32rr %R19
    Successors according to CFG: BB#9(?%)

BB#9: derived from LLVM BB %for.body66
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#8 BB#9
	%R27<def> = ADDrr_r32 %R16, %R26, %STATUS<imp-def,dead>
	%R26<def> = ADDri_r32 %R26<kill>, 4, %STATUS<imp-def,dead>
	%R33<def> = LDRf32 %R27<kill>, 0; mem:LD4[%sunkaddr30](tbaa=!2)
	%R34<def> = LDRf32 %R25, 0; mem:Volatile LD4[%lsr.iv24](tbaa=!2)
	%R32<def> = LDRi32_r32 %FP, -4; mem:LD4[FixedStack2]
	GID %CONFIG<imp-def,dead>
	%R27<def> = ADDri_r32 %R25, 4, %STATUS<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %R32<kill>
	GIE %CONFIG<imp-def,dead>
	%R33<def> = FADDrr_r32 %R33<kill>, %R34<kill>, %STATUS<imp-def,dead>
	%R32<def,dead> = CMPri_r32 %R26, 32, %STATUS<imp-def>
	STRf32 %R33<kill>, %R25<kill>, 0; mem:Volatile ST4[%lsr.iv24](tbaa=!2)
	%R25<def> = MOVi32rr %R27<kill>
	BCC <BB#9>, 1, %STATUS<imp-use>
    Successors according to CFG: BB#10(0x04000000 / 0x80000000 = 3.12%) BB#9(0x7c000000 / 0x80000000 = 96.88%)

BB#10: derived from LLVM BB %for.end75
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#9
	%R24<def> = ADDri_r32 %R24<kill>, 8, %STATUS<imp-def,dead>
	%R22<def> = ADDri_r32 %R22<kill>, 32, %STATUS<imp-def,dead>
	%R23<def> = ADDri_r32 %R23<kill>, 32, %STATUS<imp-def,dead>
	%R25<def,dead> = CMPrr_r32 %R24, %R3, %STATUS<imp-def>
	BCC <BB#4>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#4(0x7c000000 / 0x80000000 = 96.88%) BB#11(0x04000000 / 0x80000000 = 3.12%)

BB#11: derived from LLVM BB %for.end78
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20
    Predecessors according to CFG: BB#10
	%R20<def> = ADDri_r32 %R20<kill>, 1, %STATUS<imp-def,dead>
	%R2<def> = ADDrr_r32 %R2<kill>, %IP, %STATUS<imp-def,dead>
	%R21<def,dead> = CMPrr_r32 %R20, %R3, %STATUS<imp-def>
	BCC <BB#3>, 1, %STATUS<imp-use>
    Successors according to CFG: BB#12(0x04000000 / 0x80000000 = 3.12%) BB#3(0x7c000000 / 0x80000000 = 96.88%)

BB#12: derived from LLVM BB %for.end81
    Predecessors according to CFG: BB#1 BB#11
	%R0<def> = LDRi32_r32 %FP, -44; mem:LD4[FixedStack1]
	GID
	%CONFIG<def> = MOVTS32_core %R0<kill>
	GIE %CONFIG<imp-use,kill>
	%LR<def> = LDRi64 %SP, 48; flags: FrameSetup
	%SP<def> = ADDri_r32 %SP, 48, %STATUS<imp-def>
	JR32 %LR

# End machine code for function matmac.

********** COMPUTING STACKMAP LIVENESS: matmac **********
# *** IR Dump After StackMap Liveness Analysis ***:
# Machine code for function matmac: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=32, align=8, at location [SP-40]
  fi#1: size=4, align=4, at location [SP-44]
  fi#2: size=4, align=4, at location [SP-4]
  fi#3: size=4, align=8, at location [SP-8]
Function Live Ins: %R0, %R1, %R2, %R3

BB#0: 
    Live Ins: %R0 %R1 %R2 %R3
	%SP<def,tied2> = STRi64_pmd %LR, %SP<tied0>, -48; flags: FrameSetup
	%FP<def> = ADDri_r32 %SP, 48, %STATUS<imp-def>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	%IP<def> = MOVi32ri 65535
	GID %CONFIG<imp-def>
	%R19<def> = MOVFS32_core %CONFIG, %D9<imp-def>
	%IP<def,tied1> = MOVTi32ri %IP<tied0>, 65521
	STRi32_r32 %R19, %FP, -44; mem:ST4[FixedStack1]
	%R18<def> = ANDrr_r32 %R19<kill>, %IP<kill>, %STATUS<imp-def>, %D9<imp-use,kill>, %D9<imp-def>
	%R19<def,tied1> = MOVTi32ri %R19<kill,tied0>, 72, %D9<imp-use,kill>, %D9<imp-def>
	STRi64 %D9<kill>, %FP, -8; mem:ST4[FixedStack3] ST4[FixedStack2]
	GIE %CONFIG<imp-use,kill>
    Successors according to CFG: BB#1(?%)

BB#1: derived from LLVM BB %entry
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#0
	%IP<def,dead> = CMPri_r32 %R3, 1, %STATUS<imp-def>
	BCC <BB#12>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#2(0x50000000 / 0x80000000 = 62.50%) BB#12(0x30000000 / 0x80000000 = 37.50%)

BB#2: derived from LLVM BB %for.body3.lr.ph.preheader
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#1
	%R16<def> = MOViPTR %FP, -40
	%R19<def> = MOVi32ri 0, %D9<imp-def>
	%IP<def> = LSL32ri %R3, 2, %STATUS<imp-def,dead>
	%R1<def> = ADDri_r32 %R1<kill>, 8, %STATUS<imp-def,dead>
	%R17<def> = ADDri_r32 %R16, 8, %STATUS<imp-def,dead>
	%R20<def> = MOVi32rr %R19
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %for.body3.lr.ph
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20
    Predecessors according to CFG: BB#2 BB#11
	%R21<def> = LDRi32_r32 %FP, -8; mem:LD4[FixedStack3]
	GID %CONFIG<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %R21<kill>
	GIE %CONFIG<imp-def,dead>
	%R21<def> = IMULrr_r32 %R20, %R3, %STATUS<imp-def,dead>
	%R22<def> = MOVi32rr %R2
	%R21<def> = LSL32ri %R21<kill>, 2, %STATUS<imp-def,dead>
	%R23<def> = MOVi32rr %R1
	%R24<def> = MOVi32rr %R19
	%R21<def> = ADDrr_r32 %R0, %R21<kill>, %STATUS<imp-def,dead>
    Successors according to CFG: BB#4(?%)

BB#4: derived from LLVM BB %for.body9.preheader
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#3 BB#10
	%R18<def> = MOVi32rr %R19<kill>, %D9<imp-use,kill>, %D9<imp-def>
	STRi64 %D9, %FP, -16; mem:ST8[%1+24]
	STRi64 %D9, %FP, -24; mem:ST8[%1+16]
	STRi64 %D9, %FP, -32; mem:ST8[%1+8]
	STRi64 %D9, %FP, -40; mem:ST8[%1]
	%R25<def> = MOVi32rr %R23
	%R26<def> = MOVi32rr %R19
    Successors according to CFG: BB#5(?%)

BB#5: derived from LLVM BB %for.body9
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#4 BB#7
	%R27<def> = LSL32ri %R26, 2, %STATUS<imp-def,dead>
	%R27<def> = ADDrr_r32 %R21, %R27<kill>, %STATUS<imp-def,dead>
	%R27<def> = LDRf32 %R27<kill>, 0; mem:Volatile LD4[%add.ptr10](tbaa=!2)
	%R32<def> = MOVi32rr %R17
	%R34<def> = MOVi32rr %R25
	%R33<def> = MOVi32rr %R19
    Successors according to CFG: BB#6(?%)

BB#6: derived from LLVM BB %for.body13
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26 %R27 %R32 %R33 %R34
    Predecessors according to CFG: BB#5 BB#6
	%R37<def> = LDRf32 %R34, -8; mem:Volatile LD4[%scevgep8](tbaa=!2)
	%R38<def> = LDRf32 %R34, -4; mem:Volatile LD4[%scevgep9](tbaa=!2)
	%R39<def> = LDRf32 %R34, 0; mem:Volatile LD4[%lsr.iv5](tbaa=!2)
	%R40<def> = LDRf32 %R34, 4; mem:Volatile LD4[%scevgep7](tbaa=!2)
	%D21<def> = LDRf64 %R32, -8; mem:LD4[%scevgep17](tbaa=!2) LD4[%scevgep15](tbaa=!2)
	%R36<def> = ADDri_r32 %R34<kill>, 16, %STATUS<imp-def,dead>
	%R34<def> = LDRi32_r32 %FP, -4; mem:LD4[FixedStack2]
	GID %CONFIG<imp-def,dead>
	%R35<def> = ADDri_r32 %R32, 16, %STATUS<imp-def,dead>
	%R33<def> = ADDri_r32 %R33<kill>, 4, %STATUS<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %R34<kill>
	GIE %CONFIG<imp-def,dead>
	%R43<def,tied1> = FMADDrr_r32 %R43<kill,tied0>, %R27, %R37<kill>, %STATUS<imp-def,dead>, %D21<imp-use,kill>, %D21<imp-def>
	%R42<def,tied1> = FMADDrr_r32 %R42<kill,tied0>, %R27, %R38<kill>, %STATUS<imp-def,dead>, %D21<imp-use,kill>, %D21<imp-def>
	%R44<def> = MOVi32rr %R43, %D22<imp-def>
	%R45<def> = MOVi32rr %R42<kill>, %D21<imp-use,kill>, %D22<imp-use,kill>, %D22<imp-def>
	STRf64 %D22<kill>, %R32, -8; mem:ST4[%scevgep17](tbaa=!2) ST4[%scevgep15](tbaa=!2)
	%R34<def> = LDRf32 %R32, 0; mem:LD4[%lsr.iv1214](tbaa=!2)
	%R34<def,tied1> = FMADDrr_r32 %R34<tied0>, %R27, %R39<kill>, %STATUS<imp-def,dead>
	STRf32 %R34<kill>, %R32, 0; mem:ST4[%lsr.iv1214](tbaa=!2)
	%R63<def> = LDRf32 %R32, 4; mem:LD4[%scevgep16](tbaa=!2)
	%R63<def,tied1> = FMADDrr_r32 %R63<tied0>, %R27, %R40<kill>, %STATUS<imp-def,dead>
	%R34<def,dead> = CMPri_r32 %R33, 8, %STATUS<imp-def>
	STRf32 %R63<kill>, %R32<kill>, 4; mem:ST4[%scevgep16](tbaa=!2)
	%R32<def> = MOVi32rr %R35<kill>
	%R34<def> = MOVi32rr %R36<kill>
	BCC <BB#6>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#6(0x7c000000 / 0x80000000 = 96.88%) BB#7(0x04000000 / 0x80000000 = 3.12%)

BB#7: derived from LLVM BB %for.end60
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#6
	%R26<def> = ADDri_r32 %R26<kill>, 1, %STATUS<imp-def,dead>
	%R25<def> = ADDrr_r32 %R25<kill>, %IP, %STATUS<imp-def,dead>
	%R27<def,dead> = CMPrr_r32 %R26, %R3, %STATUS<imp-def>
	BCC <BB#5>, 1, %STATUS<imp-use>
    Successors according to CFG: BB#8(0x04000000 / 0x80000000 = 3.12%) BB#5(0x7c000000 / 0x80000000 = 96.88%)

BB#8: derived from LLVM BB %for.cond64.preheader
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#7
	%R25<def> = MOVi32rr %R22
	%R26<def> = MOVi32rr %R19
    Successors according to CFG: BB#9(?%)

BB#9: derived from LLVM BB %for.body66
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#8 BB#9
	%R27<def> = ADDrr_r32 %R16, %R26, %STATUS<imp-def,dead>
	%R26<def> = ADDri_r32 %R26<kill>, 4, %STATUS<imp-def,dead>
	%R33<def> = LDRf32 %R27<kill>, 0; mem:LD4[%sunkaddr30](tbaa=!2)
	%R34<def> = LDRf32 %R25, 0; mem:Volatile LD4[%lsr.iv24](tbaa=!2)
	%R32<def> = LDRi32_r32 %FP, -4; mem:LD4[FixedStack2]
	GID %CONFIG<imp-def,dead>
	%R27<def> = ADDri_r32 %R25, 4, %STATUS<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %R32<kill>
	GIE %CONFIG<imp-def,dead>
	%R33<def> = FADDrr_r32 %R33<kill>, %R34<kill>, %STATUS<imp-def,dead>
	%R32<def,dead> = CMPri_r32 %R26, 32, %STATUS<imp-def>
	STRf32 %R33<kill>, %R25<kill>, 0; mem:Volatile ST4[%lsr.iv24](tbaa=!2)
	%R25<def> = MOVi32rr %R27<kill>
	BCC <BB#9>, 1, %STATUS<imp-use>
    Successors according to CFG: BB#10(0x04000000 / 0x80000000 = 3.12%) BB#9(0x7c000000 / 0x80000000 = 96.88%)

BB#10: derived from LLVM BB %for.end75
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#9
	%R24<def> = ADDri_r32 %R24<kill>, 8, %STATUS<imp-def,dead>
	%R22<def> = ADDri_r32 %R22<kill>, 32, %STATUS<imp-def,dead>
	%R23<def> = ADDri_r32 %R23<kill>, 32, %STATUS<imp-def,dead>
	%R25<def,dead> = CMPrr_r32 %R24, %R3, %STATUS<imp-def>
	BCC <BB#4>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#4(0x7c000000 / 0x80000000 = 96.88%) BB#11(0x04000000 / 0x80000000 = 3.12%)

BB#11: derived from LLVM BB %for.end78
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20
    Predecessors according to CFG: BB#10
	%R20<def> = ADDri_r32 %R20<kill>, 1, %STATUS<imp-def,dead>
	%R2<def> = ADDrr_r32 %R2<kill>, %IP, %STATUS<imp-def,dead>
	%R21<def,dead> = CMPrr_r32 %R20, %R3, %STATUS<imp-def>
	BCC <BB#3>, 1, %STATUS<imp-use>
    Successors according to CFG: BB#12(0x04000000 / 0x80000000 = 3.12%) BB#3(0x7c000000 / 0x80000000 = 96.88%)

BB#12: derived from LLVM BB %for.end81
    Predecessors according to CFG: BB#1 BB#11
	%R0<def> = LDRi32_r32 %FP, -44; mem:LD4[FixedStack1]
	GID
	%CONFIG<def> = MOVTS32_core %R0<kill>
	GIE %CONFIG<imp-use,kill>
	%LR<def> = LDRi64 %SP, 48; flags: FrameSetup
	%SP<def> = ADDri_r32 %SP, 48, %STATUS<imp-def>
	JR32 %LR

# End machine code for function matmac.

# *** IR Dump Before Live DEBUG_VALUE analysis ***:
# Machine code for function matmac: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=32, align=8, at location [SP-40]
  fi#1: size=4, align=4, at location [SP-44]
  fi#2: size=4, align=4, at location [SP-4]
  fi#3: size=4, align=8, at location [SP-8]
Function Live Ins: %R0, %R1, %R2, %R3

BB#0: 
    Live Ins: %R0 %R1 %R2 %R3
	%SP<def,tied2> = STRi64_pmd %LR, %SP<tied0>, -48; flags: FrameSetup
	%FP<def> = ADDri_r32 %SP, 48, %STATUS<imp-def>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	%IP<def> = MOVi32ri 65535
	GID %CONFIG<imp-def>
	%R19<def> = MOVFS32_core %CONFIG, %D9<imp-def>
	%IP<def,tied1> = MOVTi32ri %IP<tied0>, 65521
	STRi32_r32 %R19, %FP, -44; mem:ST4[FixedStack1]
	%R18<def> = ANDrr_r32 %R19<kill>, %IP<kill>, %STATUS<imp-def>, %D9<imp-use,kill>, %D9<imp-def>
	%R19<def,tied1> = MOVTi32ri %R19<kill,tied0>, 72, %D9<imp-use,kill>, %D9<imp-def>
	STRi64 %D9<kill>, %FP, -8; mem:ST4[FixedStack3] ST4[FixedStack2]
	GIE %CONFIG<imp-use,kill>
    Successors according to CFG: BB#1(?%)

BB#1: derived from LLVM BB %entry
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#0
	%IP<def,dead> = CMPri_r32 %R3, 1, %STATUS<imp-def>
	BCC <BB#12>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#2(0x50000000 / 0x80000000 = 62.50%) BB#12(0x30000000 / 0x80000000 = 37.50%)

BB#2: derived from LLVM BB %for.body3.lr.ph.preheader
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#1
	%R16<def> = MOViPTR %FP, -40
	%R19<def> = MOVi32ri 0, %D9<imp-def>
	%IP<def> = LSL32ri %R3, 2, %STATUS<imp-def,dead>
	%R1<def> = ADDri_r32 %R1<kill>, 8, %STATUS<imp-def,dead>
	%R17<def> = ADDri_r32 %R16, 8, %STATUS<imp-def,dead>
	%R20<def> = MOVi32rr %R19
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %for.body3.lr.ph
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20
    Predecessors according to CFG: BB#2 BB#11
	%R21<def> = LDRi32_r32 %FP, -8; mem:LD4[FixedStack3]
	GID %CONFIG<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %R21<kill>
	GIE %CONFIG<imp-def,dead>
	%R21<def> = IMULrr_r32 %R20, %R3, %STATUS<imp-def,dead>
	%R22<def> = MOVi32rr %R2
	%R21<def> = LSL32ri %R21<kill>, 2, %STATUS<imp-def,dead>
	%R23<def> = MOVi32rr %R1
	%R24<def> = MOVi32rr %R19
	%R21<def> = ADDrr_r32 %R0, %R21<kill>, %STATUS<imp-def,dead>
    Successors according to CFG: BB#4(?%)

BB#4: derived from LLVM BB %for.body9.preheader
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#3 BB#10
	%R18<def> = MOVi32rr %R19<kill>, %D9<imp-use,kill>, %D9<imp-def>
	STRi64 %D9, %FP, -16; mem:ST8[%1+24]
	STRi64 %D9, %FP, -24; mem:ST8[%1+16]
	STRi64 %D9, %FP, -32; mem:ST8[%1+8]
	STRi64 %D9, %FP, -40; mem:ST8[%1]
	%R25<def> = MOVi32rr %R23
	%R26<def> = MOVi32rr %R19
    Successors according to CFG: BB#5(?%)

BB#5: derived from LLVM BB %for.body9
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#4 BB#7
	%R27<def> = LSL32ri %R26, 2, %STATUS<imp-def,dead>
	%R27<def> = ADDrr_r32 %R21, %R27<kill>, %STATUS<imp-def,dead>
	%R27<def> = LDRf32 %R27<kill>, 0; mem:Volatile LD4[%add.ptr10](tbaa=!2)
	%R32<def> = MOVi32rr %R17
	%R34<def> = MOVi32rr %R25
	%R33<def> = MOVi32rr %R19
    Successors according to CFG: BB#6(?%)

BB#6: derived from LLVM BB %for.body13
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26 %R27 %R32 %R33 %R34
    Predecessors according to CFG: BB#5 BB#6
	%R37<def> = LDRf32 %R34, -8; mem:Volatile LD4[%scevgep8](tbaa=!2)
	%R38<def> = LDRf32 %R34, -4; mem:Volatile LD4[%scevgep9](tbaa=!2)
	%R39<def> = LDRf32 %R34, 0; mem:Volatile LD4[%lsr.iv5](tbaa=!2)
	%R40<def> = LDRf32 %R34, 4; mem:Volatile LD4[%scevgep7](tbaa=!2)
	%D21<def> = LDRf64 %R32, -8; mem:LD4[%scevgep17](tbaa=!2) LD4[%scevgep15](tbaa=!2)
	%R36<def> = ADDri_r32 %R34<kill>, 16, %STATUS<imp-def,dead>
	%R34<def> = LDRi32_r32 %FP, -4; mem:LD4[FixedStack2]
	GID %CONFIG<imp-def,dead>
	%R35<def> = ADDri_r32 %R32, 16, %STATUS<imp-def,dead>
	%R33<def> = ADDri_r32 %R33<kill>, 4, %STATUS<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %R34<kill>
	GIE %CONFIG<imp-def,dead>
	%R43<def,tied1> = FMADDrr_r32 %R43<kill,tied0>, %R27, %R37<kill>, %STATUS<imp-def,dead>, %D21<imp-use,kill>, %D21<imp-def>
	%R42<def,tied1> = FMADDrr_r32 %R42<kill,tied0>, %R27, %R38<kill>, %STATUS<imp-def,dead>, %D21<imp-use,kill>, %D21<imp-def>
	%R44<def> = MOVi32rr %R43, %D22<imp-def>
	%R45<def> = MOVi32rr %R42<kill>, %D21<imp-use,kill>, %D22<imp-use,kill>, %D22<imp-def>
	STRf64 %D22<kill>, %R32, -8; mem:ST4[%scevgep17](tbaa=!2) ST4[%scevgep15](tbaa=!2)
	%R34<def> = LDRf32 %R32, 0; mem:LD4[%lsr.iv1214](tbaa=!2)
	%R34<def,tied1> = FMADDrr_r32 %R34<tied0>, %R27, %R39<kill>, %STATUS<imp-def,dead>
	STRf32 %R34<kill>, %R32, 0; mem:ST4[%lsr.iv1214](tbaa=!2)
	%R63<def> = LDRf32 %R32, 4; mem:LD4[%scevgep16](tbaa=!2)
	%R63<def,tied1> = FMADDrr_r32 %R63<tied0>, %R27, %R40<kill>, %STATUS<imp-def,dead>
	%R34<def,dead> = CMPri_r32 %R33, 8, %STATUS<imp-def>
	STRf32 %R63<kill>, %R32<kill>, 4; mem:ST4[%scevgep16](tbaa=!2)
	%R32<def> = MOVi32rr %R35<kill>
	%R34<def> = MOVi32rr %R36<kill>
	BCC <BB#6>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#6(0x7c000000 / 0x80000000 = 96.88%) BB#7(0x04000000 / 0x80000000 = 3.12%)

BB#7: derived from LLVM BB %for.end60
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#6
	%R26<def> = ADDri_r32 %R26<kill>, 1, %STATUS<imp-def,dead>
	%R25<def> = ADDrr_r32 %R25<kill>, %IP, %STATUS<imp-def,dead>
	%R27<def,dead> = CMPrr_r32 %R26, %R3, %STATUS<imp-def>
	BCC <BB#5>, 1, %STATUS<imp-use>
    Successors according to CFG: BB#8(0x04000000 / 0x80000000 = 3.12%) BB#5(0x7c000000 / 0x80000000 = 96.88%)

BB#8: derived from LLVM BB %for.cond64.preheader
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#7
	%R25<def> = MOVi32rr %R22
	%R26<def> = MOVi32rr %R19
    Successors according to CFG: BB#9(?%)

BB#9: derived from LLVM BB %for.body66
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#8 BB#9
	%R27<def> = ADDrr_r32 %R16, %R26, %STATUS<imp-def,dead>
	%R26<def> = ADDri_r32 %R26<kill>, 4, %STATUS<imp-def,dead>
	%R33<def> = LDRf32 %R27<kill>, 0; mem:LD4[%sunkaddr30](tbaa=!2)
	%R34<def> = LDRf32 %R25, 0; mem:Volatile LD4[%lsr.iv24](tbaa=!2)
	%R32<def> = LDRi32_r32 %FP, -4; mem:LD4[FixedStack2]
	GID %CONFIG<imp-def,dead>
	%R27<def> = ADDri_r32 %R25, 4, %STATUS<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %R32<kill>
	GIE %CONFIG<imp-def,dead>
	%R33<def> = FADDrr_r32 %R33<kill>, %R34<kill>, %STATUS<imp-def,dead>
	%R32<def,dead> = CMPri_r32 %R26, 32, %STATUS<imp-def>
	STRf32 %R33<kill>, %R25<kill>, 0; mem:Volatile ST4[%lsr.iv24](tbaa=!2)
	%R25<def> = MOVi32rr %R27<kill>
	BCC <BB#9>, 1, %STATUS<imp-use>
    Successors according to CFG: BB#10(0x04000000 / 0x80000000 = 3.12%) BB#9(0x7c000000 / 0x80000000 = 96.88%)

BB#10: derived from LLVM BB %for.end75
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#9
	%R24<def> = ADDri_r32 %R24<kill>, 8, %STATUS<imp-def,dead>
	%R22<def> = ADDri_r32 %R22<kill>, 32, %STATUS<imp-def,dead>
	%R23<def> = ADDri_r32 %R23<kill>, 32, %STATUS<imp-def,dead>
	%R25<def,dead> = CMPrr_r32 %R24, %R3, %STATUS<imp-def>
	BCC <BB#4>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#4(0x7c000000 / 0x80000000 = 96.88%) BB#11(0x04000000 / 0x80000000 = 3.12%)

BB#11: derived from LLVM BB %for.end78
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20
    Predecessors according to CFG: BB#10
	%R20<def> = ADDri_r32 %R20<kill>, 1, %STATUS<imp-def,dead>
	%R2<def> = ADDrr_r32 %R2<kill>, %IP, %STATUS<imp-def,dead>
	%R21<def,dead> = CMPrr_r32 %R20, %R3, %STATUS<imp-def>
	BCC <BB#3>, 1, %STATUS<imp-use>
    Successors according to CFG: BB#12(0x04000000 / 0x80000000 = 3.12%) BB#3(0x7c000000 / 0x80000000 = 96.88%)

BB#12: derived from LLVM BB %for.end81
    Predecessors according to CFG: BB#1 BB#11
	%R0<def> = LDRi32_r32 %FP, -44; mem:LD4[FixedStack1]
	GID
	%CONFIG<def> = MOVTS32_core %R0<kill>
	GIE %CONFIG<imp-use,kill>
	%LR<def> = LDRi64 %SP, 48; flags: FrameSetup
	%SP<def> = ADDri_r32 %SP, 48, %STATUS<imp-def>
	JR32 %LR

# End machine code for function matmac.

# *** IR Dump After Live DEBUG_VALUE analysis ***:
# Machine code for function matmac: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=32, align=8, at location [SP-40]
  fi#1: size=4, align=4, at location [SP-44]
  fi#2: size=4, align=4, at location [SP-4]
  fi#3: size=4, align=8, at location [SP-8]
Function Live Ins: %R0, %R1, %R2, %R3

BB#0: 
    Live Ins: %R0 %R1 %R2 %R3
	%SP<def,tied2> = STRi64_pmd %LR, %SP<tied0>, -48; flags: FrameSetup
	%FP<def> = ADDri_r32 %SP, 48, %STATUS<imp-def>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	%IP<def> = MOVi32ri 65535
	GID %CONFIG<imp-def>
	%R19<def> = MOVFS32_core %CONFIG, %D9<imp-def>
	%IP<def,tied1> = MOVTi32ri %IP<tied0>, 65521
	STRi32_r32 %R19, %FP, -44; mem:ST4[FixedStack1]
	%R18<def> = ANDrr_r32 %R19<kill>, %IP<kill>, %STATUS<imp-def>, %D9<imp-use,kill>, %D9<imp-def>
	%R19<def,tied1> = MOVTi32ri %R19<kill,tied0>, 72, %D9<imp-use,kill>, %D9<imp-def>
	STRi64 %D9<kill>, %FP, -8; mem:ST4[FixedStack3] ST4[FixedStack2]
	GIE %CONFIG<imp-use,kill>
    Successors according to CFG: BB#1(?%)

BB#1: derived from LLVM BB %entry
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#0
	%IP<def,dead> = CMPri_r32 %R3, 1, %STATUS<imp-def>
	BCC <BB#12>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#2(0x50000000 / 0x80000000 = 62.50%) BB#12(0x30000000 / 0x80000000 = 37.50%)

BB#2: derived from LLVM BB %for.body3.lr.ph.preheader
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#1
	%R16<def> = MOViPTR %FP, -40
	%R19<def> = MOVi32ri 0, %D9<imp-def>
	%IP<def> = LSL32ri %R3, 2, %STATUS<imp-def,dead>
	%R1<def> = ADDri_r32 %R1<kill>, 8, %STATUS<imp-def,dead>
	%R17<def> = ADDri_r32 %R16, 8, %STATUS<imp-def,dead>
	%R20<def> = MOVi32rr %R19
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %for.body3.lr.ph
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20
    Predecessors according to CFG: BB#2 BB#11
	%R21<def> = LDRi32_r32 %FP, -8; mem:LD4[FixedStack3]
	GID %CONFIG<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %R21<kill>
	GIE %CONFIG<imp-def,dead>
	%R21<def> = IMULrr_r32 %R20, %R3, %STATUS<imp-def,dead>
	%R22<def> = MOVi32rr %R2
	%R21<def> = LSL32ri %R21<kill>, 2, %STATUS<imp-def,dead>
	%R23<def> = MOVi32rr %R1
	%R24<def> = MOVi32rr %R19
	%R21<def> = ADDrr_r32 %R0, %R21<kill>, %STATUS<imp-def,dead>
    Successors according to CFG: BB#4(?%)

BB#4: derived from LLVM BB %for.body9.preheader
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#3 BB#10
	%R18<def> = MOVi32rr %R19<kill>, %D9<imp-use,kill>, %D9<imp-def>
	STRi64 %D9, %FP, -16; mem:ST8[%1+24]
	STRi64 %D9, %FP, -24; mem:ST8[%1+16]
	STRi64 %D9, %FP, -32; mem:ST8[%1+8]
	STRi64 %D9, %FP, -40; mem:ST8[%1]
	%R25<def> = MOVi32rr %R23
	%R26<def> = MOVi32rr %R19
    Successors according to CFG: BB#5(?%)

BB#5: derived from LLVM BB %for.body9
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#4 BB#7
	%R27<def> = LSL32ri %R26, 2, %STATUS<imp-def,dead>
	%R27<def> = ADDrr_r32 %R21, %R27<kill>, %STATUS<imp-def,dead>
	%R27<def> = LDRf32 %R27<kill>, 0; mem:Volatile LD4[%add.ptr10](tbaa=!2)
	%R32<def> = MOVi32rr %R17
	%R34<def> = MOVi32rr %R25
	%R33<def> = MOVi32rr %R19
    Successors according to CFG: BB#6(?%)

BB#6: derived from LLVM BB %for.body13
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26 %R27 %R32 %R33 %R34
    Predecessors according to CFG: BB#5 BB#6
	%R37<def> = LDRf32 %R34, -8; mem:Volatile LD4[%scevgep8](tbaa=!2)
	%R38<def> = LDRf32 %R34, -4; mem:Volatile LD4[%scevgep9](tbaa=!2)
	%R39<def> = LDRf32 %R34, 0; mem:Volatile LD4[%lsr.iv5](tbaa=!2)
	%R40<def> = LDRf32 %R34, 4; mem:Volatile LD4[%scevgep7](tbaa=!2)
	%D21<def> = LDRf64 %R32, -8; mem:LD4[%scevgep17](tbaa=!2) LD4[%scevgep15](tbaa=!2)
	%R36<def> = ADDri_r32 %R34<kill>, 16, %STATUS<imp-def,dead>
	%R34<def> = LDRi32_r32 %FP, -4; mem:LD4[FixedStack2]
	GID %CONFIG<imp-def,dead>
	%R35<def> = ADDri_r32 %R32, 16, %STATUS<imp-def,dead>
	%R33<def> = ADDri_r32 %R33<kill>, 4, %STATUS<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %R34<kill>
	GIE %CONFIG<imp-def,dead>
	%R43<def,tied1> = FMADDrr_r32 %R43<kill,tied0>, %R27, %R37<kill>, %STATUS<imp-def,dead>, %D21<imp-use,kill>, %D21<imp-def>
	%R42<def,tied1> = FMADDrr_r32 %R42<kill,tied0>, %R27, %R38<kill>, %STATUS<imp-def,dead>, %D21<imp-use,kill>, %D21<imp-def>
	%R44<def> = MOVi32rr %R43, %D22<imp-def>
	%R45<def> = MOVi32rr %R42<kill>, %D21<imp-use,kill>, %D22<imp-use,kill>, %D22<imp-def>
	STRf64 %D22<kill>, %R32, -8; mem:ST4[%scevgep17](tbaa=!2) ST4[%scevgep15](tbaa=!2)
	%R34<def> = LDRf32 %R32, 0; mem:LD4[%lsr.iv1214](tbaa=!2)
	%R34<def,tied1> = FMADDrr_r32 %R34<tied0>, %R27, %R39<kill>, %STATUS<imp-def,dead>
	STRf32 %R34<kill>, %R32, 0; mem:ST4[%lsr.iv1214](tbaa=!2)
	%R63<def> = LDRf32 %R32, 4; mem:LD4[%scevgep16](tbaa=!2)
	%R63<def,tied1> = FMADDrr_r32 %R63<tied0>, %R27, %R40<kill>, %STATUS<imp-def,dead>
	%R34<def,dead> = CMPri_r32 %R33, 8, %STATUS<imp-def>
	STRf32 %R63<kill>, %R32<kill>, 4; mem:ST4[%scevgep16](tbaa=!2)
	%R32<def> = MOVi32rr %R35<kill>
	%R34<def> = MOVi32rr %R36<kill>
	BCC <BB#6>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#6(0x7c000000 / 0x80000000 = 96.88%) BB#7(0x04000000 / 0x80000000 = 3.12%)

BB#7: derived from LLVM BB %for.end60
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#6
	%R26<def> = ADDri_r32 %R26<kill>, 1, %STATUS<imp-def,dead>
	%R25<def> = ADDrr_r32 %R25<kill>, %IP, %STATUS<imp-def,dead>
	%R27<def,dead> = CMPrr_r32 %R26, %R3, %STATUS<imp-def>
	BCC <BB#5>, 1, %STATUS<imp-use>
    Successors according to CFG: BB#8(0x04000000 / 0x80000000 = 3.12%) BB#5(0x7c000000 / 0x80000000 = 96.88%)

BB#8: derived from LLVM BB %for.cond64.preheader
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#7
	%R25<def> = MOVi32rr %R22
	%R26<def> = MOVi32rr %R19
    Successors according to CFG: BB#9(?%)

BB#9: derived from LLVM BB %for.body66
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#8 BB#9
	%R27<def> = ADDrr_r32 %R16, %R26, %STATUS<imp-def,dead>
	%R26<def> = ADDri_r32 %R26<kill>, 4, %STATUS<imp-def,dead>
	%R33<def> = LDRf32 %R27<kill>, 0; mem:LD4[%sunkaddr30](tbaa=!2)
	%R34<def> = LDRf32 %R25, 0; mem:Volatile LD4[%lsr.iv24](tbaa=!2)
	%R32<def> = LDRi32_r32 %FP, -4; mem:LD4[FixedStack2]
	GID %CONFIG<imp-def,dead>
	%R27<def> = ADDri_r32 %R25, 4, %STATUS<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %R32<kill>
	GIE %CONFIG<imp-def,dead>
	%R33<def> = FADDrr_r32 %R33<kill>, %R34<kill>, %STATUS<imp-def,dead>
	%R32<def,dead> = CMPri_r32 %R26, 32, %STATUS<imp-def>
	STRf32 %R33<kill>, %R25<kill>, 0; mem:Volatile ST4[%lsr.iv24](tbaa=!2)
	%R25<def> = MOVi32rr %R27<kill>
	BCC <BB#9>, 1, %STATUS<imp-use>
    Successors according to CFG: BB#10(0x04000000 / 0x80000000 = 3.12%) BB#9(0x7c000000 / 0x80000000 = 96.88%)

BB#10: derived from LLVM BB %for.end75
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#9
	%R24<def> = ADDri_r32 %R24<kill>, 8, %STATUS<imp-def,dead>
	%R22<def> = ADDri_r32 %R22<kill>, 32, %STATUS<imp-def,dead>
	%R23<def> = ADDri_r32 %R23<kill>, 32, %STATUS<imp-def,dead>
	%R25<def,dead> = CMPrr_r32 %R24, %R3, %STATUS<imp-def>
	BCC <BB#4>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#4(0x7c000000 / 0x80000000 = 96.88%) BB#11(0x04000000 / 0x80000000 = 3.12%)

BB#11: derived from LLVM BB %for.end78
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20
    Predecessors according to CFG: BB#10
	%R20<def> = ADDri_r32 %R20<kill>, 1, %STATUS<imp-def,dead>
	%R2<def> = ADDrr_r32 %R2<kill>, %IP, %STATUS<imp-def,dead>
	%R21<def,dead> = CMPrr_r32 %R20, %R3, %STATUS<imp-def>
	BCC <BB#3>, 1, %STATUS<imp-use>
    Successors according to CFG: BB#12(0x04000000 / 0x80000000 = 3.12%) BB#3(0x7c000000 / 0x80000000 = 96.88%)

BB#12: derived from LLVM BB %for.end81
    Predecessors according to CFG: BB#1 BB#11
	%R0<def> = LDRi32_r32 %FP, -44; mem:LD4[FixedStack1]
	GID
	%CONFIG<def> = MOVTS32_core %R0<kill>
	GIE %CONFIG<imp-use,kill>
	%LR<def> = LDRi64 %SP, 48; flags: FrameSetup
	%SP<def> = ADDri_r32 %SP, 48, %STATUS<imp-def>
	JR32 %LR

# End machine code for function matmac.

# *** IR Dump Before Insert XRay ops ***:
# Machine code for function matmac: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=32, align=8, at location [SP-40]
  fi#1: size=4, align=4, at location [SP-44]
  fi#2: size=4, align=4, at location [SP-4]
  fi#3: size=4, align=8, at location [SP-8]
Function Live Ins: %R0, %R1, %R2, %R3

BB#0: 
    Live Ins: %R0 %R1 %R2 %R3
	%SP<def,tied2> = STRi64_pmd %LR, %SP<tied0>, -48; flags: FrameSetup
	%FP<def> = ADDri_r32 %SP, 48, %STATUS<imp-def>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	%IP<def> = MOVi32ri 65535
	GID %CONFIG<imp-def>
	%R19<def> = MOVFS32_core %CONFIG, %D9<imp-def>
	%IP<def,tied1> = MOVTi32ri %IP<tied0>, 65521
	STRi32_r32 %R19, %FP, -44; mem:ST4[FixedStack1]
	%R18<def> = ANDrr_r32 %R19<kill>, %IP<kill>, %STATUS<imp-def>, %D9<imp-use,kill>, %D9<imp-def>
	%R19<def,tied1> = MOVTi32ri %R19<kill,tied0>, 72, %D9<imp-use,kill>, %D9<imp-def>
	STRi64 %D9<kill>, %FP, -8; mem:ST4[FixedStack3] ST4[FixedStack2]
	GIE %CONFIG<imp-use,kill>
    Successors according to CFG: BB#1(?%)

BB#1: derived from LLVM BB %entry
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#0
	%IP<def,dead> = CMPri_r32 %R3, 1, %STATUS<imp-def>
	BCC <BB#12>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#2(0x50000000 / 0x80000000 = 62.50%) BB#12(0x30000000 / 0x80000000 = 37.50%)

BB#2: derived from LLVM BB %for.body3.lr.ph.preheader
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#1
	%R16<def> = MOViPTR %FP, -40
	%R19<def> = MOVi32ri 0, %D9<imp-def>
	%IP<def> = LSL32ri %R3, 2, %STATUS<imp-def,dead>
	%R1<def> = ADDri_r32 %R1<kill>, 8, %STATUS<imp-def,dead>
	%R17<def> = ADDri_r32 %R16, 8, %STATUS<imp-def,dead>
	%R20<def> = MOVi32rr %R19
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %for.body3.lr.ph
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20
    Predecessors according to CFG: BB#2 BB#11
	%R21<def> = LDRi32_r32 %FP, -8; mem:LD4[FixedStack3]
	GID %CONFIG<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %R21<kill>
	GIE %CONFIG<imp-def,dead>
	%R21<def> = IMULrr_r32 %R20, %R3, %STATUS<imp-def,dead>
	%R22<def> = MOVi32rr %R2
	%R21<def> = LSL32ri %R21<kill>, 2, %STATUS<imp-def,dead>
	%R23<def> = MOVi32rr %R1
	%R24<def> = MOVi32rr %R19
	%R21<def> = ADDrr_r32 %R0, %R21<kill>, %STATUS<imp-def,dead>
    Successors according to CFG: BB#4(?%)

BB#4: derived from LLVM BB %for.body9.preheader
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#3 BB#10
	%R18<def> = MOVi32rr %R19<kill>, %D9<imp-use,kill>, %D9<imp-def>
	STRi64 %D9, %FP, -16; mem:ST8[%1+24]
	STRi64 %D9, %FP, -24; mem:ST8[%1+16]
	STRi64 %D9, %FP, -32; mem:ST8[%1+8]
	STRi64 %D9, %FP, -40; mem:ST8[%1]
	%R25<def> = MOVi32rr %R23
	%R26<def> = MOVi32rr %R19
    Successors according to CFG: BB#5(?%)

BB#5: derived from LLVM BB %for.body9
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#4 BB#7
	%R27<def> = LSL32ri %R26, 2, %STATUS<imp-def,dead>
	%R27<def> = ADDrr_r32 %R21, %R27<kill>, %STATUS<imp-def,dead>
	%R27<def> = LDRf32 %R27<kill>, 0; mem:Volatile LD4[%add.ptr10](tbaa=!2)
	%R32<def> = MOVi32rr %R17
	%R34<def> = MOVi32rr %R25
	%R33<def> = MOVi32rr %R19
    Successors according to CFG: BB#6(?%)

BB#6: derived from LLVM BB %for.body13
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26 %R27 %R32 %R33 %R34
    Predecessors according to CFG: BB#5 BB#6
	%R37<def> = LDRf32 %R34, -8; mem:Volatile LD4[%scevgep8](tbaa=!2)
	%R38<def> = LDRf32 %R34, -4; mem:Volatile LD4[%scevgep9](tbaa=!2)
	%R39<def> = LDRf32 %R34, 0; mem:Volatile LD4[%lsr.iv5](tbaa=!2)
	%R40<def> = LDRf32 %R34, 4; mem:Volatile LD4[%scevgep7](tbaa=!2)
	%D21<def> = LDRf64 %R32, -8; mem:LD4[%scevgep17](tbaa=!2) LD4[%scevgep15](tbaa=!2)
	%R36<def> = ADDri_r32 %R34<kill>, 16, %STATUS<imp-def,dead>
	%R34<def> = LDRi32_r32 %FP, -4; mem:LD4[FixedStack2]
	GID %CONFIG<imp-def,dead>
	%R35<def> = ADDri_r32 %R32, 16, %STATUS<imp-def,dead>
	%R33<def> = ADDri_r32 %R33<kill>, 4, %STATUS<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %R34<kill>
	GIE %CONFIG<imp-def,dead>
	%R43<def,tied1> = FMADDrr_r32 %R43<kill,tied0>, %R27, %R37<kill>, %STATUS<imp-def,dead>, %D21<imp-use,kill>, %D21<imp-def>
	%R42<def,tied1> = FMADDrr_r32 %R42<kill,tied0>, %R27, %R38<kill>, %STATUS<imp-def,dead>, %D21<imp-use,kill>, %D21<imp-def>
	%R44<def> = MOVi32rr %R43, %D22<imp-def>
	%R45<def> = MOVi32rr %R42<kill>, %D21<imp-use,kill>, %D22<imp-use,kill>, %D22<imp-def>
	STRf64 %D22<kill>, %R32, -8; mem:ST4[%scevgep17](tbaa=!2) ST4[%scevgep15](tbaa=!2)
	%R34<def> = LDRf32 %R32, 0; mem:LD4[%lsr.iv1214](tbaa=!2)
	%R34<def,tied1> = FMADDrr_r32 %R34<tied0>, %R27, %R39<kill>, %STATUS<imp-def,dead>
	STRf32 %R34<kill>, %R32, 0; mem:ST4[%lsr.iv1214](tbaa=!2)
	%R63<def> = LDRf32 %R32, 4; mem:LD4[%scevgep16](tbaa=!2)
	%R63<def,tied1> = FMADDrr_r32 %R63<tied0>, %R27, %R40<kill>, %STATUS<imp-def,dead>
	%R34<def,dead> = CMPri_r32 %R33, 8, %STATUS<imp-def>
	STRf32 %R63<kill>, %R32<kill>, 4; mem:ST4[%scevgep16](tbaa=!2)
	%R32<def> = MOVi32rr %R35<kill>
	%R34<def> = MOVi32rr %R36<kill>
	BCC <BB#6>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#6(0x7c000000 / 0x80000000 = 96.88%) BB#7(0x04000000 / 0x80000000 = 3.12%)

BB#7: derived from LLVM BB %for.end60
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#6
	%R26<def> = ADDri_r32 %R26<kill>, 1, %STATUS<imp-def,dead>
	%R25<def> = ADDrr_r32 %R25<kill>, %IP, %STATUS<imp-def,dead>
	%R27<def,dead> = CMPrr_r32 %R26, %R3, %STATUS<imp-def>
	BCC <BB#5>, 1, %STATUS<imp-use>
    Successors according to CFG: BB#8(0x04000000 / 0x80000000 = 3.12%) BB#5(0x7c000000 / 0x80000000 = 96.88%)

BB#8: derived from LLVM BB %for.cond64.preheader
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#7
	%R25<def> = MOVi32rr %R22
	%R26<def> = MOVi32rr %R19
    Successors according to CFG: BB#9(?%)

BB#9: derived from LLVM BB %for.body66
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#8 BB#9
	%R27<def> = ADDrr_r32 %R16, %R26, %STATUS<imp-def,dead>
	%R26<def> = ADDri_r32 %R26<kill>, 4, %STATUS<imp-def,dead>
	%R33<def> = LDRf32 %R27<kill>, 0; mem:LD4[%sunkaddr30](tbaa=!2)
	%R34<def> = LDRf32 %R25, 0; mem:Volatile LD4[%lsr.iv24](tbaa=!2)
	%R32<def> = LDRi32_r32 %FP, -4; mem:LD4[FixedStack2]
	GID %CONFIG<imp-def,dead>
	%R27<def> = ADDri_r32 %R25, 4, %STATUS<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %R32<kill>
	GIE %CONFIG<imp-def,dead>
	%R33<def> = FADDrr_r32 %R33<kill>, %R34<kill>, %STATUS<imp-def,dead>
	%R32<def,dead> = CMPri_r32 %R26, 32, %STATUS<imp-def>
	STRf32 %R33<kill>, %R25<kill>, 0; mem:Volatile ST4[%lsr.iv24](tbaa=!2)
	%R25<def> = MOVi32rr %R27<kill>
	BCC <BB#9>, 1, %STATUS<imp-use>
    Successors according to CFG: BB#10(0x04000000 / 0x80000000 = 3.12%) BB#9(0x7c000000 / 0x80000000 = 96.88%)

BB#10: derived from LLVM BB %for.end75
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#9
	%R24<def> = ADDri_r32 %R24<kill>, 8, %STATUS<imp-def,dead>
	%R22<def> = ADDri_r32 %R22<kill>, 32, %STATUS<imp-def,dead>
	%R23<def> = ADDri_r32 %R23<kill>, 32, %STATUS<imp-def,dead>
	%R25<def,dead> = CMPrr_r32 %R24, %R3, %STATUS<imp-def>
	BCC <BB#4>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#4(0x7c000000 / 0x80000000 = 96.88%) BB#11(0x04000000 / 0x80000000 = 3.12%)

BB#11: derived from LLVM BB %for.end78
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20
    Predecessors according to CFG: BB#10
	%R20<def> = ADDri_r32 %R20<kill>, 1, %STATUS<imp-def,dead>
	%R2<def> = ADDrr_r32 %R2<kill>, %IP, %STATUS<imp-def,dead>
	%R21<def,dead> = CMPrr_r32 %R20, %R3, %STATUS<imp-def>
	BCC <BB#3>, 1, %STATUS<imp-use>
    Successors according to CFG: BB#12(0x04000000 / 0x80000000 = 3.12%) BB#3(0x7c000000 / 0x80000000 = 96.88%)

BB#12: derived from LLVM BB %for.end81
    Predecessors according to CFG: BB#1 BB#11
	%R0<def> = LDRi32_r32 %FP, -44; mem:LD4[FixedStack1]
	GID
	%CONFIG<def> = MOVTS32_core %R0<kill>
	GIE %CONFIG<imp-use,kill>
	%LR<def> = LDRi64 %SP, 48; flags: FrameSetup
	%SP<def> = ADDri_r32 %SP, 48, %STATUS<imp-def>
	JR32 %LR

# End machine code for function matmac.

# *** IR Dump After Insert XRay ops ***:
# Machine code for function matmac: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=32, align=8, at location [SP-40]
  fi#1: size=4, align=4, at location [SP-44]
  fi#2: size=4, align=4, at location [SP-4]
  fi#3: size=4, align=8, at location [SP-8]
Function Live Ins: %R0, %R1, %R2, %R3

BB#0: 
    Live Ins: %R0 %R1 %R2 %R3
	%SP<def,tied2> = STRi64_pmd %LR, %SP<tied0>, -48; flags: FrameSetup
	%FP<def> = ADDri_r32 %SP, 48, %STATUS<imp-def>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	%IP<def> = MOVi32ri 65535
	GID %CONFIG<imp-def>
	%R19<def> = MOVFS32_core %CONFIG, %D9<imp-def>
	%IP<def,tied1> = MOVTi32ri %IP<tied0>, 65521
	STRi32_r32 %R19, %FP, -44; mem:ST4[FixedStack1]
	%R18<def> = ANDrr_r32 %R19<kill>, %IP<kill>, %STATUS<imp-def>, %D9<imp-use,kill>, %D9<imp-def>
	%R19<def,tied1> = MOVTi32ri %R19<kill,tied0>, 72, %D9<imp-use,kill>, %D9<imp-def>
	STRi64 %D9<kill>, %FP, -8; mem:ST4[FixedStack3] ST4[FixedStack2]
	GIE %CONFIG<imp-use,kill>
    Successors according to CFG: BB#1(?%)

BB#1: derived from LLVM BB %entry
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#0
	%IP<def,dead> = CMPri_r32 %R3, 1, %STATUS<imp-def>
	BCC <BB#12>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#2(0x50000000 / 0x80000000 = 62.50%) BB#12(0x30000000 / 0x80000000 = 37.50%)

BB#2: derived from LLVM BB %for.body3.lr.ph.preheader
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#1
	%R16<def> = MOViPTR %FP, -40
	%R19<def> = MOVi32ri 0, %D9<imp-def>
	%IP<def> = LSL32ri %R3, 2, %STATUS<imp-def,dead>
	%R1<def> = ADDri_r32 %R1<kill>, 8, %STATUS<imp-def,dead>
	%R17<def> = ADDri_r32 %R16, 8, %STATUS<imp-def,dead>
	%R20<def> = MOVi32rr %R19
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %for.body3.lr.ph
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20
    Predecessors according to CFG: BB#2 BB#11
	%R21<def> = LDRi32_r32 %FP, -8; mem:LD4[FixedStack3]
	GID %CONFIG<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %R21<kill>
	GIE %CONFIG<imp-def,dead>
	%R21<def> = IMULrr_r32 %R20, %R3, %STATUS<imp-def,dead>
	%R22<def> = MOVi32rr %R2
	%R21<def> = LSL32ri %R21<kill>, 2, %STATUS<imp-def,dead>
	%R23<def> = MOVi32rr %R1
	%R24<def> = MOVi32rr %R19
	%R21<def> = ADDrr_r32 %R0, %R21<kill>, %STATUS<imp-def,dead>
    Successors according to CFG: BB#4(?%)

BB#4: derived from LLVM BB %for.body9.preheader
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#3 BB#10
	%R18<def> = MOVi32rr %R19<kill>, %D9<imp-use,kill>, %D9<imp-def>
	STRi64 %D9, %FP, -16; mem:ST8[%1+24]
	STRi64 %D9, %FP, -24; mem:ST8[%1+16]
	STRi64 %D9, %FP, -32; mem:ST8[%1+8]
	STRi64 %D9, %FP, -40; mem:ST8[%1]
	%R25<def> = MOVi32rr %R23
	%R26<def> = MOVi32rr %R19
    Successors according to CFG: BB#5(?%)

BB#5: derived from LLVM BB %for.body9
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#4 BB#7
	%R27<def> = LSL32ri %R26, 2, %STATUS<imp-def,dead>
	%R27<def> = ADDrr_r32 %R21, %R27<kill>, %STATUS<imp-def,dead>
	%R27<def> = LDRf32 %R27<kill>, 0; mem:Volatile LD4[%add.ptr10](tbaa=!2)
	%R32<def> = MOVi32rr %R17
	%R34<def> = MOVi32rr %R25
	%R33<def> = MOVi32rr %R19
    Successors according to CFG: BB#6(?%)

BB#6: derived from LLVM BB %for.body13
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26 %R27 %R32 %R33 %R34
    Predecessors according to CFG: BB#5 BB#6
	%R37<def> = LDRf32 %R34, -8; mem:Volatile LD4[%scevgep8](tbaa=!2)
	%R38<def> = LDRf32 %R34, -4; mem:Volatile LD4[%scevgep9](tbaa=!2)
	%R39<def> = LDRf32 %R34, 0; mem:Volatile LD4[%lsr.iv5](tbaa=!2)
	%R40<def> = LDRf32 %R34, 4; mem:Volatile LD4[%scevgep7](tbaa=!2)
	%D21<def> = LDRf64 %R32, -8; mem:LD4[%scevgep17](tbaa=!2) LD4[%scevgep15](tbaa=!2)
	%R36<def> = ADDri_r32 %R34<kill>, 16, %STATUS<imp-def,dead>
	%R34<def> = LDRi32_r32 %FP, -4; mem:LD4[FixedStack2]
	GID %CONFIG<imp-def,dead>
	%R35<def> = ADDri_r32 %R32, 16, %STATUS<imp-def,dead>
	%R33<def> = ADDri_r32 %R33<kill>, 4, %STATUS<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %R34<kill>
	GIE %CONFIG<imp-def,dead>
	%R43<def,tied1> = FMADDrr_r32 %R43<kill,tied0>, %R27, %R37<kill>, %STATUS<imp-def,dead>, %D21<imp-use,kill>, %D21<imp-def>
	%R42<def,tied1> = FMADDrr_r32 %R42<kill,tied0>, %R27, %R38<kill>, %STATUS<imp-def,dead>, %D21<imp-use,kill>, %D21<imp-def>
	%R44<def> = MOVi32rr %R43, %D22<imp-def>
	%R45<def> = MOVi32rr %R42<kill>, %D21<imp-use,kill>, %D22<imp-use,kill>, %D22<imp-def>
	STRf64 %D22<kill>, %R32, -8; mem:ST4[%scevgep17](tbaa=!2) ST4[%scevgep15](tbaa=!2)
	%R34<def> = LDRf32 %R32, 0; mem:LD4[%lsr.iv1214](tbaa=!2)
	%R34<def,tied1> = FMADDrr_r32 %R34<tied0>, %R27, %R39<kill>, %STATUS<imp-def,dead>
	STRf32 %R34<kill>, %R32, 0; mem:ST4[%lsr.iv1214](tbaa=!2)
	%R63<def> = LDRf32 %R32, 4; mem:LD4[%scevgep16](tbaa=!2)
	%R63<def,tied1> = FMADDrr_r32 %R63<tied0>, %R27, %R40<kill>, %STATUS<imp-def,dead>
	%R34<def,dead> = CMPri_r32 %R33, 8, %STATUS<imp-def>
	STRf32 %R63<kill>, %R32<kill>, 4; mem:ST4[%scevgep16](tbaa=!2)
	%R32<def> = MOVi32rr %R35<kill>
	%R34<def> = MOVi32rr %R36<kill>
	BCC <BB#6>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#6(0x7c000000 / 0x80000000 = 96.88%) BB#7(0x04000000 / 0x80000000 = 3.12%)

BB#7: derived from LLVM BB %for.end60
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#6
	%R26<def> = ADDri_r32 %R26<kill>, 1, %STATUS<imp-def,dead>
	%R25<def> = ADDrr_r32 %R25<kill>, %IP, %STATUS<imp-def,dead>
	%R27<def,dead> = CMPrr_r32 %R26, %R3, %STATUS<imp-def>
	BCC <BB#5>, 1, %STATUS<imp-use>
    Successors according to CFG: BB#8(0x04000000 / 0x80000000 = 3.12%) BB#5(0x7c000000 / 0x80000000 = 96.88%)

BB#8: derived from LLVM BB %for.cond64.preheader
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#7
	%R25<def> = MOVi32rr %R22
	%R26<def> = MOVi32rr %R19
    Successors according to CFG: BB#9(?%)

BB#9: derived from LLVM BB %for.body66
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#8 BB#9
	%R27<def> = ADDrr_r32 %R16, %R26, %STATUS<imp-def,dead>
	%R26<def> = ADDri_r32 %R26<kill>, 4, %STATUS<imp-def,dead>
	%R33<def> = LDRf32 %R27<kill>, 0; mem:LD4[%sunkaddr30](tbaa=!2)
	%R34<def> = LDRf32 %R25, 0; mem:Volatile LD4[%lsr.iv24](tbaa=!2)
	%R32<def> = LDRi32_r32 %FP, -4; mem:LD4[FixedStack2]
	GID %CONFIG<imp-def,dead>
	%R27<def> = ADDri_r32 %R25, 4, %STATUS<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %R32<kill>
	GIE %CONFIG<imp-def,dead>
	%R33<def> = FADDrr_r32 %R33<kill>, %R34<kill>, %STATUS<imp-def,dead>
	%R32<def,dead> = CMPri_r32 %R26, 32, %STATUS<imp-def>
	STRf32 %R33<kill>, %R25<kill>, 0; mem:Volatile ST4[%lsr.iv24](tbaa=!2)
	%R25<def> = MOVi32rr %R27<kill>
	BCC <BB#9>, 1, %STATUS<imp-use>
    Successors according to CFG: BB#10(0x04000000 / 0x80000000 = 3.12%) BB#9(0x7c000000 / 0x80000000 = 96.88%)

BB#10: derived from LLVM BB %for.end75
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#9
	%R24<def> = ADDri_r32 %R24<kill>, 8, %STATUS<imp-def,dead>
	%R22<def> = ADDri_r32 %R22<kill>, 32, %STATUS<imp-def,dead>
	%R23<def> = ADDri_r32 %R23<kill>, 32, %STATUS<imp-def,dead>
	%R25<def,dead> = CMPrr_r32 %R24, %R3, %STATUS<imp-def>
	BCC <BB#4>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#4(0x7c000000 / 0x80000000 = 96.88%) BB#11(0x04000000 / 0x80000000 = 3.12%)

BB#11: derived from LLVM BB %for.end78
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20
    Predecessors according to CFG: BB#10
	%R20<def> = ADDri_r32 %R20<kill>, 1, %STATUS<imp-def,dead>
	%R2<def> = ADDrr_r32 %R2<kill>, %IP, %STATUS<imp-def,dead>
	%R21<def,dead> = CMPrr_r32 %R20, %R3, %STATUS<imp-def>
	BCC <BB#3>, 1, %STATUS<imp-use>
    Successors according to CFG: BB#12(0x04000000 / 0x80000000 = 3.12%) BB#3(0x7c000000 / 0x80000000 = 96.88%)

BB#12: derived from LLVM BB %for.end81
    Predecessors according to CFG: BB#1 BB#11
	%R0<def> = LDRi32_r32 %FP, -44; mem:LD4[FixedStack1]
	GID
	%CONFIG<def> = MOVTS32_core %R0<kill>
	GIE %CONFIG<imp-use,kill>
	%LR<def> = LDRi64 %SP, 48; flags: FrameSetup
	%SP<def> = ADDri_r32 %SP, 48, %STATUS<imp-def>
	JR32 %LR

# End machine code for function matmac.

# *** IR Dump Before Implement the 'patchable-function' attribute ***:
# Machine code for function matmac: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=32, align=8, at location [SP-40]
  fi#1: size=4, align=4, at location [SP-44]
  fi#2: size=4, align=4, at location [SP-4]
  fi#3: size=4, align=8, at location [SP-8]
Function Live Ins: %R0, %R1, %R2, %R3

BB#0: 
    Live Ins: %R0 %R1 %R2 %R3
	%SP<def,tied2> = STRi64_pmd %LR, %SP<tied0>, -48; flags: FrameSetup
	%FP<def> = ADDri_r32 %SP, 48, %STATUS<imp-def>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	%IP<def> = MOVi32ri 65535
	GID %CONFIG<imp-def>
	%R19<def> = MOVFS32_core %CONFIG, %D9<imp-def>
	%IP<def,tied1> = MOVTi32ri %IP<tied0>, 65521
	STRi32_r32 %R19, %FP, -44; mem:ST4[FixedStack1]
	%R18<def> = ANDrr_r32 %R19<kill>, %IP<kill>, %STATUS<imp-def>, %D9<imp-use,kill>, %D9<imp-def>
	%R19<def,tied1> = MOVTi32ri %R19<kill,tied0>, 72, %D9<imp-use,kill>, %D9<imp-def>
	STRi64 %D9<kill>, %FP, -8; mem:ST4[FixedStack3] ST4[FixedStack2]
	GIE %CONFIG<imp-use,kill>
    Successors according to CFG: BB#1(?%)

BB#1: derived from LLVM BB %entry
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#0
	%IP<def,dead> = CMPri_r32 %R3, 1, %STATUS<imp-def>
	BCC <BB#12>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#2(0x50000000 / 0x80000000 = 62.50%) BB#12(0x30000000 / 0x80000000 = 37.50%)

BB#2: derived from LLVM BB %for.body3.lr.ph.preheader
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#1
	%R16<def> = MOViPTR %FP, -40
	%R19<def> = MOVi32ri 0, %D9<imp-def>
	%IP<def> = LSL32ri %R3, 2, %STATUS<imp-def,dead>
	%R1<def> = ADDri_r32 %R1<kill>, 8, %STATUS<imp-def,dead>
	%R17<def> = ADDri_r32 %R16, 8, %STATUS<imp-def,dead>
	%R20<def> = MOVi32rr %R19
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %for.body3.lr.ph
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20
    Predecessors according to CFG: BB#2 BB#11
	%R21<def> = LDRi32_r32 %FP, -8; mem:LD4[FixedStack3]
	GID %CONFIG<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %R21<kill>
	GIE %CONFIG<imp-def,dead>
	%R21<def> = IMULrr_r32 %R20, %R3, %STATUS<imp-def,dead>
	%R22<def> = MOVi32rr %R2
	%R21<def> = LSL32ri %R21<kill>, 2, %STATUS<imp-def,dead>
	%R23<def> = MOVi32rr %R1
	%R24<def> = MOVi32rr %R19
	%R21<def> = ADDrr_r32 %R0, %R21<kill>, %STATUS<imp-def,dead>
    Successors according to CFG: BB#4(?%)

BB#4: derived from LLVM BB %for.body9.preheader
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#3 BB#10
	%R18<def> = MOVi32rr %R19<kill>, %D9<imp-use,kill>, %D9<imp-def>
	STRi64 %D9, %FP, -16; mem:ST8[%1+24]
	STRi64 %D9, %FP, -24; mem:ST8[%1+16]
	STRi64 %D9, %FP, -32; mem:ST8[%1+8]
	STRi64 %D9, %FP, -40; mem:ST8[%1]
	%R25<def> = MOVi32rr %R23
	%R26<def> = MOVi32rr %R19
    Successors according to CFG: BB#5(?%)

BB#5: derived from LLVM BB %for.body9
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#4 BB#7
	%R27<def> = LSL32ri %R26, 2, %STATUS<imp-def,dead>
	%R27<def> = ADDrr_r32 %R21, %R27<kill>, %STATUS<imp-def,dead>
	%R27<def> = LDRf32 %R27<kill>, 0; mem:Volatile LD4[%add.ptr10](tbaa=!2)
	%R32<def> = MOVi32rr %R17
	%R34<def> = MOVi32rr %R25
	%R33<def> = MOVi32rr %R19
    Successors according to CFG: BB#6(?%)

BB#6: derived from LLVM BB %for.body13
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26 %R27 %R32 %R33 %R34
    Predecessors according to CFG: BB#5 BB#6
	%R37<def> = LDRf32 %R34, -8; mem:Volatile LD4[%scevgep8](tbaa=!2)
	%R38<def> = LDRf32 %R34, -4; mem:Volatile LD4[%scevgep9](tbaa=!2)
	%R39<def> = LDRf32 %R34, 0; mem:Volatile LD4[%lsr.iv5](tbaa=!2)
	%R40<def> = LDRf32 %R34, 4; mem:Volatile LD4[%scevgep7](tbaa=!2)
	%D21<def> = LDRf64 %R32, -8; mem:LD4[%scevgep17](tbaa=!2) LD4[%scevgep15](tbaa=!2)
	%R36<def> = ADDri_r32 %R34<kill>, 16, %STATUS<imp-def,dead>
	%R34<def> = LDRi32_r32 %FP, -4; mem:LD4[FixedStack2]
	GID %CONFIG<imp-def,dead>
	%R35<def> = ADDri_r32 %R32, 16, %STATUS<imp-def,dead>
	%R33<def> = ADDri_r32 %R33<kill>, 4, %STATUS<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %R34<kill>
	GIE %CONFIG<imp-def,dead>
	%R43<def,tied1> = FMADDrr_r32 %R43<kill,tied0>, %R27, %R37<kill>, %STATUS<imp-def,dead>, %D21<imp-use,kill>, %D21<imp-def>
	%R42<def,tied1> = FMADDrr_r32 %R42<kill,tied0>, %R27, %R38<kill>, %STATUS<imp-def,dead>, %D21<imp-use,kill>, %D21<imp-def>
	%R44<def> = MOVi32rr %R43, %D22<imp-def>
	%R45<def> = MOVi32rr %R42<kill>, %D21<imp-use,kill>, %D22<imp-use,kill>, %D22<imp-def>
	STRf64 %D22<kill>, %R32, -8; mem:ST4[%scevgep17](tbaa=!2) ST4[%scevgep15](tbaa=!2)
	%R34<def> = LDRf32 %R32, 0; mem:LD4[%lsr.iv1214](tbaa=!2)
	%R34<def,tied1> = FMADDrr_r32 %R34<tied0>, %R27, %R39<kill>, %STATUS<imp-def,dead>
	STRf32 %R34<kill>, %R32, 0; mem:ST4[%lsr.iv1214](tbaa=!2)
	%R63<def> = LDRf32 %R32, 4; mem:LD4[%scevgep16](tbaa=!2)
	%R63<def,tied1> = FMADDrr_r32 %R63<tied0>, %R27, %R40<kill>, %STATUS<imp-def,dead>
	%R34<def,dead> = CMPri_r32 %R33, 8, %STATUS<imp-def>
	STRf32 %R63<kill>, %R32<kill>, 4; mem:ST4[%scevgep16](tbaa=!2)
	%R32<def> = MOVi32rr %R35<kill>
	%R34<def> = MOVi32rr %R36<kill>
	BCC <BB#6>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#6(0x7c000000 / 0x80000000 = 96.88%) BB#7(0x04000000 / 0x80000000 = 3.12%)

BB#7: derived from LLVM BB %for.end60
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#6
	%R26<def> = ADDri_r32 %R26<kill>, 1, %STATUS<imp-def,dead>
	%R25<def> = ADDrr_r32 %R25<kill>, %IP, %STATUS<imp-def,dead>
	%R27<def,dead> = CMPrr_r32 %R26, %R3, %STATUS<imp-def>
	BCC <BB#5>, 1, %STATUS<imp-use>
    Successors according to CFG: BB#8(0x04000000 / 0x80000000 = 3.12%) BB#5(0x7c000000 / 0x80000000 = 96.88%)

BB#8: derived from LLVM BB %for.cond64.preheader
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#7
	%R25<def> = MOVi32rr %R22
	%R26<def> = MOVi32rr %R19
    Successors according to CFG: BB#9(?%)

BB#9: derived from LLVM BB %for.body66
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#8 BB#9
	%R27<def> = ADDrr_r32 %R16, %R26, %STATUS<imp-def,dead>
	%R26<def> = ADDri_r32 %R26<kill>, 4, %STATUS<imp-def,dead>
	%R33<def> = LDRf32 %R27<kill>, 0; mem:LD4[%sunkaddr30](tbaa=!2)
	%R34<def> = LDRf32 %R25, 0; mem:Volatile LD4[%lsr.iv24](tbaa=!2)
	%R32<def> = LDRi32_r32 %FP, -4; mem:LD4[FixedStack2]
	GID %CONFIG<imp-def,dead>
	%R27<def> = ADDri_r32 %R25, 4, %STATUS<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %R32<kill>
	GIE %CONFIG<imp-def,dead>
	%R33<def> = FADDrr_r32 %R33<kill>, %R34<kill>, %STATUS<imp-def,dead>
	%R32<def,dead> = CMPri_r32 %R26, 32, %STATUS<imp-def>
	STRf32 %R33<kill>, %R25<kill>, 0; mem:Volatile ST4[%lsr.iv24](tbaa=!2)
	%R25<def> = MOVi32rr %R27<kill>
	BCC <BB#9>, 1, %STATUS<imp-use>
    Successors according to CFG: BB#10(0x04000000 / 0x80000000 = 3.12%) BB#9(0x7c000000 / 0x80000000 = 96.88%)

BB#10: derived from LLVM BB %for.end75
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#9
	%R24<def> = ADDri_r32 %R24<kill>, 8, %STATUS<imp-def,dead>
	%R22<def> = ADDri_r32 %R22<kill>, 32, %STATUS<imp-def,dead>
	%R23<def> = ADDri_r32 %R23<kill>, 32, %STATUS<imp-def,dead>
	%R25<def,dead> = CMPrr_r32 %R24, %R3, %STATUS<imp-def>
	BCC <BB#4>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#4(0x7c000000 / 0x80000000 = 96.88%) BB#11(0x04000000 / 0x80000000 = 3.12%)

BB#11: derived from LLVM BB %for.end78
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20
    Predecessors according to CFG: BB#10
	%R20<def> = ADDri_r32 %R20<kill>, 1, %STATUS<imp-def,dead>
	%R2<def> = ADDrr_r32 %R2<kill>, %IP, %STATUS<imp-def,dead>
	%R21<def,dead> = CMPrr_r32 %R20, %R3, %STATUS<imp-def>
	BCC <BB#3>, 1, %STATUS<imp-use>
    Successors according to CFG: BB#12(0x04000000 / 0x80000000 = 3.12%) BB#3(0x7c000000 / 0x80000000 = 96.88%)

BB#12: derived from LLVM BB %for.end81
    Predecessors according to CFG: BB#1 BB#11
	%R0<def> = LDRi32_r32 %FP, -44; mem:LD4[FixedStack1]
	GID
	%CONFIG<def> = MOVTS32_core %R0<kill>
	GIE %CONFIG<imp-use,kill>
	%LR<def> = LDRi64 %SP, 48; flags: FrameSetup
	%SP<def> = ADDri_r32 %SP, 48, %STATUS<imp-def>
	JR32 %LR

# End machine code for function matmac.

# *** IR Dump After Implement the 'patchable-function' attribute ***:
# Machine code for function matmac: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=32, align=8, at location [SP-40]
  fi#1: size=4, align=4, at location [SP-44]
  fi#2: size=4, align=4, at location [SP-4]
  fi#3: size=4, align=8, at location [SP-8]
Function Live Ins: %R0, %R1, %R2, %R3

BB#0: 
    Live Ins: %R0 %R1 %R2 %R3
	%SP<def,tied2> = STRi64_pmd %LR, %SP<tied0>, -48; flags: FrameSetup
	%FP<def> = ADDri_r32 %SP, 48, %STATUS<imp-def>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	%IP<def> = MOVi32ri 65535
	GID %CONFIG<imp-def>
	%R19<def> = MOVFS32_core %CONFIG, %D9<imp-def>
	%IP<def,tied1> = MOVTi32ri %IP<tied0>, 65521
	STRi32_r32 %R19, %FP, -44; mem:ST4[FixedStack1]
	%R18<def> = ANDrr_r32 %R19<kill>, %IP<kill>, %STATUS<imp-def>, %D9<imp-use,kill>, %D9<imp-def>
	%R19<def,tied1> = MOVTi32ri %R19<kill,tied0>, 72, %D9<imp-use,kill>, %D9<imp-def>
	STRi64 %D9<kill>, %FP, -8; mem:ST4[FixedStack3] ST4[FixedStack2]
	GIE %CONFIG<imp-use,kill>
    Successors according to CFG: BB#1(?%)

BB#1: derived from LLVM BB %entry
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#0
	%IP<def,dead> = CMPri_r32 %R3, 1, %STATUS<imp-def>
	BCC <BB#12>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#2(0x50000000 / 0x80000000 = 62.50%) BB#12(0x30000000 / 0x80000000 = 37.50%)

BB#2: derived from LLVM BB %for.body3.lr.ph.preheader
    Live Ins: %R0 %R1 %R2 %R3
    Predecessors according to CFG: BB#1
	%R16<def> = MOViPTR %FP, -40
	%R19<def> = MOVi32ri 0, %D9<imp-def>
	%IP<def> = LSL32ri %R3, 2, %STATUS<imp-def,dead>
	%R1<def> = ADDri_r32 %R1<kill>, 8, %STATUS<imp-def,dead>
	%R17<def> = ADDri_r32 %R16, 8, %STATUS<imp-def,dead>
	%R20<def> = MOVi32rr %R19
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %for.body3.lr.ph
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20
    Predecessors according to CFG: BB#2 BB#11
	%R21<def> = LDRi32_r32 %FP, -8; mem:LD4[FixedStack3]
	GID %CONFIG<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %R21<kill>
	GIE %CONFIG<imp-def,dead>
	%R21<def> = IMULrr_r32 %R20, %R3, %STATUS<imp-def,dead>
	%R22<def> = MOVi32rr %R2
	%R21<def> = LSL32ri %R21<kill>, 2, %STATUS<imp-def,dead>
	%R23<def> = MOVi32rr %R1
	%R24<def> = MOVi32rr %R19
	%R21<def> = ADDrr_r32 %R0, %R21<kill>, %STATUS<imp-def,dead>
    Successors according to CFG: BB#4(?%)

BB#4: derived from LLVM BB %for.body9.preheader
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#3 BB#10
	%R18<def> = MOVi32rr %R19<kill>, %D9<imp-use,kill>, %D9<imp-def>
	STRi64 %D9, %FP, -16; mem:ST8[%1+24]
	STRi64 %D9, %FP, -24; mem:ST8[%1+16]
	STRi64 %D9, %FP, -32; mem:ST8[%1+8]
	STRi64 %D9, %FP, -40; mem:ST8[%1]
	%R25<def> = MOVi32rr %R23
	%R26<def> = MOVi32rr %R19
    Successors according to CFG: BB#5(?%)

BB#5: derived from LLVM BB %for.body9
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#4 BB#7
	%R27<def> = LSL32ri %R26, 2, %STATUS<imp-def,dead>
	%R27<def> = ADDrr_r32 %R21, %R27<kill>, %STATUS<imp-def,dead>
	%R27<def> = LDRf32 %R27<kill>, 0; mem:Volatile LD4[%add.ptr10](tbaa=!2)
	%R32<def> = MOVi32rr %R17
	%R34<def> = MOVi32rr %R25
	%R33<def> = MOVi32rr %R19
    Successors according to CFG: BB#6(?%)

BB#6: derived from LLVM BB %for.body13
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26 %R27 %R32 %R33 %R34
    Predecessors according to CFG: BB#5 BB#6
	%R37<def> = LDRf32 %R34, -8; mem:Volatile LD4[%scevgep8](tbaa=!2)
	%R38<def> = LDRf32 %R34, -4; mem:Volatile LD4[%scevgep9](tbaa=!2)
	%R39<def> = LDRf32 %R34, 0; mem:Volatile LD4[%lsr.iv5](tbaa=!2)
	%R40<def> = LDRf32 %R34, 4; mem:Volatile LD4[%scevgep7](tbaa=!2)
	%D21<def> = LDRf64 %R32, -8; mem:LD4[%scevgep17](tbaa=!2) LD4[%scevgep15](tbaa=!2)
	%R36<def> = ADDri_r32 %R34<kill>, 16, %STATUS<imp-def,dead>
	%R34<def> = LDRi32_r32 %FP, -4; mem:LD4[FixedStack2]
	GID %CONFIG<imp-def,dead>
	%R35<def> = ADDri_r32 %R32, 16, %STATUS<imp-def,dead>
	%R33<def> = ADDri_r32 %R33<kill>, 4, %STATUS<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %R34<kill>
	GIE %CONFIG<imp-def,dead>
	%R43<def,tied1> = FMADDrr_r32 %R43<kill,tied0>, %R27, %R37<kill>, %STATUS<imp-def,dead>, %D21<imp-use,kill>, %D21<imp-def>
	%R42<def,tied1> = FMADDrr_r32 %R42<kill,tied0>, %R27, %R38<kill>, %STATUS<imp-def,dead>, %D21<imp-use,kill>, %D21<imp-def>
	%R44<def> = MOVi32rr %R43, %D22<imp-def>
	%R45<def> = MOVi32rr %R42<kill>, %D21<imp-use,kill>, %D22<imp-use,kill>, %D22<imp-def>
	STRf64 %D22<kill>, %R32, -8; mem:ST4[%scevgep17](tbaa=!2) ST4[%scevgep15](tbaa=!2)
	%R34<def> = LDRf32 %R32, 0; mem:LD4[%lsr.iv1214](tbaa=!2)
	%R34<def,tied1> = FMADDrr_r32 %R34<tied0>, %R27, %R39<kill>, %STATUS<imp-def,dead>
	STRf32 %R34<kill>, %R32, 0; mem:ST4[%lsr.iv1214](tbaa=!2)
	%R63<def> = LDRf32 %R32, 4; mem:LD4[%scevgep16](tbaa=!2)
	%R63<def,tied1> = FMADDrr_r32 %R63<tied0>, %R27, %R40<kill>, %STATUS<imp-def,dead>
	%R34<def,dead> = CMPri_r32 %R33, 8, %STATUS<imp-def>
	STRf32 %R63<kill>, %R32<kill>, 4; mem:ST4[%scevgep16](tbaa=!2)
	%R32<def> = MOVi32rr %R35<kill>
	%R34<def> = MOVi32rr %R36<kill>
	BCC <BB#6>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#6(0x7c000000 / 0x80000000 = 96.88%) BB#7(0x04000000 / 0x80000000 = 3.12%)

BB#7: derived from LLVM BB %for.end60
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#6
	%R26<def> = ADDri_r32 %R26<kill>, 1, %STATUS<imp-def,dead>
	%R25<def> = ADDrr_r32 %R25<kill>, %IP, %STATUS<imp-def,dead>
	%R27<def,dead> = CMPrr_r32 %R26, %R3, %STATUS<imp-def>
	BCC <BB#5>, 1, %STATUS<imp-use>
    Successors according to CFG: BB#8(0x04000000 / 0x80000000 = 3.12%) BB#5(0x7c000000 / 0x80000000 = 96.88%)

BB#8: derived from LLVM BB %for.cond64.preheader
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#7
	%R25<def> = MOVi32rr %R22
	%R26<def> = MOVi32rr %R19
    Successors according to CFG: BB#9(?%)

BB#9: derived from LLVM BB %for.body66
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24 %R25 %R26
    Predecessors according to CFG: BB#8 BB#9
	%R27<def> = ADDrr_r32 %R16, %R26, %STATUS<imp-def,dead>
	%R26<def> = ADDri_r32 %R26<kill>, 4, %STATUS<imp-def,dead>
	%R33<def> = LDRf32 %R27<kill>, 0; mem:LD4[%sunkaddr30](tbaa=!2)
	%R34<def> = LDRf32 %R25, 0; mem:Volatile LD4[%lsr.iv24](tbaa=!2)
	%R32<def> = LDRi32_r32 %FP, -4; mem:LD4[FixedStack2]
	GID %CONFIG<imp-def,dead>
	%R27<def> = ADDri_r32 %R25, 4, %STATUS<imp-def,dead>
	%CONFIG<def,dead> = MOVTS32_core %R32<kill>
	GIE %CONFIG<imp-def,dead>
	%R33<def> = FADDrr_r32 %R33<kill>, %R34<kill>, %STATUS<imp-def,dead>
	%R32<def,dead> = CMPri_r32 %R26, 32, %STATUS<imp-def>
	STRf32 %R33<kill>, %R25<kill>, 0; mem:Volatile ST4[%lsr.iv24](tbaa=!2)
	%R25<def> = MOVi32rr %R27<kill>
	BCC <BB#9>, 1, %STATUS<imp-use>
    Successors according to CFG: BB#10(0x04000000 / 0x80000000 = 3.12%) BB#9(0x7c000000 / 0x80000000 = 96.88%)

BB#10: derived from LLVM BB %for.end75
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20 %R21 %R22 %R23 %R24
    Predecessors according to CFG: BB#9
	%R24<def> = ADDri_r32 %R24<kill>, 8, %STATUS<imp-def,dead>
	%R22<def> = ADDri_r32 %R22<kill>, 32, %STATUS<imp-def,dead>
	%R23<def> = ADDri_r32 %R23<kill>, 32, %STATUS<imp-def,dead>
	%R25<def,dead> = CMPrr_r32 %R24, %R3, %STATUS<imp-def>
	BCC <BB#4>, 8, %STATUS<imp-use>
    Successors according to CFG: BB#4(0x7c000000 / 0x80000000 = 96.88%) BB#11(0x04000000 / 0x80000000 = 3.12%)

BB#11: derived from LLVM BB %for.end78
    Live Ins: %IP %D9 %R0 %R1 %R2 %R3 %R16 %R17 %R20
    Predecessors according to CFG: BB#10
	%R20<def> = ADDri_r32 %R20<kill>, 1, %STATUS<imp-def,dead>
	%R2<def> = ADDrr_r32 %R2<kill>, %IP, %STATUS<imp-def,dead>
	%R21<def,dead> = CMPrr_r32 %R20, %R3, %STATUS<imp-def>
	BCC <BB#3>, 1, %STATUS<imp-use>
    Successors according to CFG: BB#12(0x04000000 / 0x80000000 = 3.12%) BB#3(0x7c000000 / 0x80000000 = 96.88%)

BB#12: derived from LLVM BB %for.end81
    Predecessors according to CFG: BB#1 BB#11
	%R0<def> = LDRi32_r32 %FP, -44; mem:LD4[FixedStack1]
	GID
	%CONFIG<def> = MOVTS32_core %R0<kill>
	GIE %CONFIG<imp-use,kill>
	%LR<def> = LDRi64 %SP, 48; flags: FrameSetup
	%SP<def> = ADDri_r32 %SP, 48, %STATUS<imp-def>
	JR32 %LR

# End machine code for function matmac.


Has FP: DisableFramePointerElim set
